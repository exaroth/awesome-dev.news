{"id":"h5Hf6Rkh","title":"Python","displayTitle":"Python","url":"","feedLink":"","isQuery":true,"isEmpty":false,"isHidden":false,"itemCount":425,"items":[{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-2ha7","date":1762027652,"author":"Vibe YouTube","guid":324188,"unread":true,"content":"<p>In this video, Tim highlights three under-the-radar Python features you’ll actually want to use: the brand-new match statement for clean, powerful pattern matching; dataclasses that slash class boilerplate; and positional-only &amp; keyword-only arguments for tighter function control.</p><p>He also plugs Brilliant (get 20% off Premium for daily challenges) and his DevLaunch mentorship program if you’re serious about building real-world projects and landing that dream job.</p>","contentLength":469,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Vom Rohdaten-Schatz zur intuitiven Navigation: Wie Entwickler Geo-APIs nutzen, um ihre Anwendungen zum Leben zu erwecken","url":"https://dev.to/mapnav_dev_05896c1891e1a36dd5c/vom-rohdaten-schatz-zur-intuitiven-navigation-wie-entwickler-geo-apis-nutzen-um-ihre-anwendungen-3pcn","date":1762025094,"author":"MapNav_Dev","guid":324178,"unread":true,"content":"<p>Als Entwickler stehen wir oft vor der Herausforderung, komplexe geografische Daten in intuitive und performante Funktionen für unsere Anwendungen zu verwandeln. Ob es darum geht, den schnellsten Lieferweg zu finden, Benutzern den nächsten Elektroladepunkt anzuzeigen oder eine interaktive Karte für ein neues soziales Netzwerk zu erstellen – die Integration von Karten- und Navigationsfunktionalitäten ist entscheidend. Doch wie verwandelt man einen Berg von Geodaten in nützliche Features, ohne das Rad neu erfinden zu müssen? Die Antwort liegt oft in der geschickten Nutzung von Geo-APIs. In unserer täglichen Arbeit widmen wir uns der Aufbereitung und Bereitstellung solcher Daten, um Entwicklern wie Ihnen die Arbeit zu erleichtern.</p><p>Was sind Geo-APIs und warum sind sie so mächtig?</p><p>Geo-APIs (Geographical APIs) sind Schnittstellen, die Entwicklern den Zugriff auf geografische Informationen und Funktionen ermöglichen. Anstatt selbst riesige Kartendatenbanken zu hosten, Routenalgorithmen zu schreiben oder komplexe Geocoding-Dienste zu implementieren, können Sie über einfache API-Aufrufe auf diese Dienste zugreifen.</p><p>Die Vorteile liegen auf der Hand:</p><p>Zeitersparnis: Schnelle Integration fertiger Funktionen.</p><p>Kostenreduktion: Keine eigene Infrastruktur für Geodaten nötig.</p><p>Skalierbarkeit: APIs sind oft darauf ausgelegt, mit Ihrem Projekt zu wachsen.</p><p>Genauigkeit &amp; Aktualität: Anbieter pflegen und aktualisieren ihre Daten kontinuierlich.</p><p>Anwendungsfälle für Geo-APIs in Ihren Projekten:</p><p>Die Möglichkeiten sind vielfältig. Hier sind einige Beispiele, wie Sie Geo-APIs nutzen können:</p><p>Interaktive Karten für Web- und Mobilanwendungen:</p><p>Libraries: Tools wie Leaflet.js, OpenLayers oder Mapbox GL JS ermöglichen die Darstellung von Karten im Browser oder in nativen Apps. Kombiniert mit einem Karten-API können Sie eigene Marker, Polygone und Pop-ups hinzufügen, um spezifische Orte oder Regionen hervorzuheben.</p><p>Beispiel: Eine Immobilien-App, die verfügbare Objekte auf einer Karte anzeigt, inklusive Filterfunktionen für Schulen oder Einkaufsmöglichkeiten in der Nähe.</p><p>Routenplanung und Navigation:</p><p>APIs für Routenberechnung: Diese Services nehmen Start- und Zielkoordinaten entgegen und geben die optimale Route zurück, oft unter Berücksichtigung von Verkehr, Fahrzeugtyp (PKW, LKW, Fahrrad) oder bevorzugten Routenkriterien (schnellste, kürzeste, sparsamste).</p><p>Beispiel: Eine Lieferdienst-App, die dem Fahrer die effizienteste Route mit mehreren Stopps vorschlägt und Echtzeit-Verkehrsinformationen integriert.</p><p>Geocoding und Reverse Geocoding:</p><p>Geocoding: Umwandlung einer Adresse (z.B. \"Unter den Linden 6, Berlin\") in geografische Koordinaten (Breitengrad, Längengrad).</p><p>Reverse Geocoding: Umwandlung von Koordinaten in eine lesbare Adresse.</p><p>Beispiel: Ein Event-Management-System, das Benutzern erlaubt, eine Adresse einzugeben und diese automatisch auf einer Karte zu lokalisieren.</p><p>Points of Interest (POI) und Location-Based Services:</p><p>APIs können Ihnen Informationen über Geschäfte, Restaurants, Tankstellen, Sehenswürdigkeiten oder Ladestationen für E-Autos in einem bestimmten Umkreis liefern.</p><p>Beispiel: Eine Reise-App, die dem Nutzer Hotels und Restaurants in der Nähe seines aktuellen Standorts anzeigt.</p><p>Best Practices für die Integration von Geo-APIs:</p><p>API-Schlüssel sicher verwalten: Veröffentlichen Sie Ihren API-Schlüssel niemals im Frontend-Code oder in öffentlichen Repositories. Nutzen Sie Umgebungsvariablen oder serverseitige Proxies.</p><p>Fehlerbehandlung implementieren: Was passiert, wenn die API nicht antwortet oder ein ungültiges Ergebnis liefert? Ihre Anwendung sollte robust darauf reagieren.</p><p>Caching nutzen: Um API-Limits einzuhalten und die Performance zu verbessern, cachen Sie häufig abgefragte, statische Daten.</p><p>Datenschutz beachten: Insbesondere bei personenbezogenen Standortdaten sind die DSGVO und andere Datenschutzbestimmungen unbedingt einzuhalten.</p><p>Geo-APIs sind ein unverzichtbares Werkzeug im Werkzeugkasten jedes modernen Entwicklers. Sie öffnen die Tür zu einer Welt voller Möglichkeiten, um Anwendungen mit leistungsstarken geografischen Funktionen zu erweitern – von der einfachen Kartenanzeige bis hin zu komplexen Navigations- und Analyse-Tools.</p><p>Wenn Sie sich für tiefere Einblicke in die Welt präziser Geodaten und Navigation interessieren oder spezifische technische Fragen zur Integration haben, lade ich Sie ein, sich mein Profil anzusehen. Dort finden Sie weitere Informationen und Kontaktmöglichkeiten für einen technischen Austausch. Bleiben Sie auf dem richtigen Weg – technisch und geografisch!</p>","contentLength":4572,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"NES-Like game engine","url":"https://dev.to/whyang9701/nes-like-game-engine-204b","date":1762022792,"author":"WH yang","guid":324187,"unread":true,"content":"<p><a href=\"https://github.com/tylerapear/NESY-Engine/issues/55\" rel=\"noopener noreferrer\">NESY Engine</a> is a NES-like game engine project written in Python. It was released this August and is powered by the Pygame library.</p><p>I didn't know how to create a game until I started working on fixing this documentation <a href=\"https://github.com/tylerapear/NESY-Engine/issues/55\" rel=\"noopener noreferrer\">issue</a>. During this process, I learned about the concept of <a href=\"https://developer.valvesoftware.com/wiki/Hitbox\" rel=\"noopener noreferrer\">hitboxes</a> in a game engine. Every character and enemy should have a designated area that reflects its position and size on the map. If two objects occupy the same space, it means a collision has occurred, triggering an event. For example, the player's health might be reduced, or the enemy could start a dying animation, depending on the game's status.</p><p>This was an easy issue, but it gave me a chance to learn something new. I felt very satisfied when the maintainer accepted my pull request because I was able to learn by helping. I plan to keep looking for interesting issues and submit more pull requests.</p>","contentLength":883,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-1oom","date":1762020512,"author":"Vibe YouTube","guid":324154,"unread":true,"content":"<p>Tech With Tim’s latest video walks you through building a Python AI agent from scratch in under ten minutes—no fluff. You’ll install dependencies, grab your OpenAI API key, import libraries, set up custom tools, hook up an LLM-driven agent, write a simple driver script, and run tests, all with handy timestamps so you can jump right to the step you need.</p><p>The full code’s on GitHub, and along the way you’ll get freebies like Notion access and a PyCharm Pro trial. If you want deeper, hands-on guidance beyond tutorials, Tim’s DevLaunch mentorship program is there to help you level up.</p>","contentLength":597,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-2dm8","date":1762020496,"author":"Vibe YouTube","guid":324153,"unread":true,"content":"<p> Tim walks you through three under-the-radar Python gems—using the  statement for clean pattern matching, leveraging  to slash boilerplate, and enforcing positional-only &amp; keyword-only arguments to tighten up your API. Perfect for leveling up your day-to-day coding.</p><p>Plus, he’s got you covered with a free Brilliant.org trial (20% off) and pitches his DevLaunch mentorship for real-world projects, accountability, and job-ready skills.</p>","contentLength":438,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"preprocessing for beginners made easy!!!","url":"https://dev.to/rushedcomet/preprocessing-for-beginners-made-easy-59hd","date":1762016210,"author":"Rishee Panchal","guid":324121,"unread":true,"content":"<h2>My PyPI Milestone: Creating and Releasing a Beginner ML Preprocessing Package</h2>","contentLength":77,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Open Source Is Our Operating System","url":"https://dev.to/my_god_4ca6d407c2a1fb6cca/open-source-is-our-operating-system-djn","date":1762015877,"author":"my god","guid":324120,"unread":true,"content":"<p>Open Source Is Our Operating System,\nAt hjk-inc, we believe software should be transparent, collaborative, and community-driven.</p><p>That’s why everything we build is open source—from core infrastructure to developer tools. No paywalls. No hidden layers. Just clean code, public issues, and real-world impact.</p><p>✨ Why contribute or use our projects?</p><p>✅ Battle-tested in production</p><p>✅ MIT/Apache 2.0 licensed (use freely)</p><p>✅ Friendly maintainers &amp; clear contribution guides</p><p>✅ Built for performance, scalability, and simplicity</p><p>We’re not just writing code—we’re building a developer-first ecosystem where anyone can learn, fork, improve, or deploy.</p><p>💡 Found a bug? Have an idea?</p><p>Open source isn’t a side project for us—it’s our foundation.</p><p>Star a repo. Fork it. Break it. Help us make it better.</p><p>— [hjk-inc], Founder @ hjk-inc</p>","contentLength":834,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tipos Primitivos em Python","url":"https://dev.to/ryanmarinho/tipos-primitivos-em-python-3h5f","date":1762013411,"author":"Ryan Marinho","guid":324119,"unread":true,"content":"<p>Há pouco tempo comecei a estudar Python porque preciso usar as bibliotecas para trabalhar com Dados e com isso estou aprendendo aos poucos a programar, hoje estarei colocando o que aprendi sobre os tipos primitivos da linguagem para vocês, espero que possa ajudar algum outro iniciante.</p><p>Mas o que seria um dado primitivo?\nTipos primitivos são dados básicos que podem ser manipulados em uma variável, trarei alguns exemplos.</p><p>Na string acima tem a minha altura, que é uma variável nomeada como altura contendo um valor, o dado atribuído é 1.81, sendo um valor com 2 casas decimais. O tipo deste dado é o tipo real ou float em Python e em diversas outras linguagens.</p><p>Vimos agora que o valor acima não é um número float, agora é um dado tipo string, é um tipo que recebe entradas alfanuméricas, podendo ser usados letras, números e símbolos.\nDiante disto, vamos ao que importa: os tipos primitivos:</p><ul><li>Int = inteiro, o nome já diz, podendo ser usados dos negativos aos positivos, exemplo = (-2,-1,0,1,2,3,4)</li><li>float = ponto flutuante, números com casa decimais, exemplo = (altura = 1.81)</li><li>bool = booleano, retorna true (verdadeiro) ou false (falso)</li><li>string =  são coleções de letras, palavras ou outros caracteres. Em Python, você pode criar strings delimitando uma sequência de caracteres com um par de aspas simples ou duplas. Exemplo: ‘o flamengo ganhou 3 libertadores’</li></ul><p>Para conferirmos, podemos codar um pouco:</p><div><pre><code>`nome = input('Qual o seu nome? ') \nidade = input('Qual a sua idade? ')\naltura = input('Qual a sua altura? ')\nhumano = input(\"Você é humano? \")\n\nprint(nome, idade, altura, humano)\nprint('nome', nome.isalpha())\nprint('idade', idade.isnumeric())\n# Verificar se a altura é um número float\ntry:\n    float(altura)\n    print('altura:', True)\nexcept ValueError:\n    print('altura:', False)\n# Verificar se a resposta é booleana\nprint('humano:', humano.lower() in ['true', 'false'])\n`\n</code></pre></div><p><em>Observação: coloquei o input para caso você queira copiar e testar com seus dados em seu console.</em></p><p>O código acima retornou o seguinte:</p><div><pre><code>Qual o seu nome? Ryan\nQual a sua idade? 2\nQual a sua altura? 1.81\nVocê é humano? sim\nRyan 2 1.81 sim\nnome True\nidade True\naltura: True\nhumano: True\n</code></pre></div><p>Para reproduzir no navegador, utilize o Programiz em Python.</p>","contentLength":2251,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-3h3o","date":1762013228,"author":"Vibe YouTube","guid":324118,"unread":true,"content":"<p>This video dives into three under-the-radar Python features you’ll actually want to use: the new match statement for cleaner pattern matching, dataclasses to auto-generate class boilerplate, and the ins-and-outs of positional-only &amp; keyword-only arguments to keep your function signatures crystal clear.</p><p>Along the way, you’ll snag a free Brilliant learning pass (plus 20% off Premium) and hear about DevLaunch, Tim’s hands-on mentorship program to help you build real projects and land that dev job.</p>","contentLength":504,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-16og","date":1762006097,"author":"Vibe YouTube","guid":324072,"unread":true,"content":"<p>Here’s the gist: Tim walks you through three of Python’s coolest modern tricks—structural match statements for clean pattern matching, dataclasses to cut boilerplate, and the magic of positional-only &amp; keyword-only arguments you didn’t know you needed.</p><p>On top of that, he plugs a 20% off Brilliant Premium link for daily practice and his DevLaunch mentorship program if you want real-world projects and job-ready guidance.</p>","contentLength":429,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"HOW TO BUILD A BMI (BODY MASS INDEX) CALCULATOR USING PYTHON","url":"https://dev.to/ikankeabasi_akpaso/how-to-build-a-bmi-body-mass-index-calculator-using-python-5a1k","date":1762003504,"author":"Ikanke-abasi Akpaso","guid":324052,"unread":true,"content":"<p>The Body Mass Index (BMI) is a medical screening tool that uses your weight and height to estimate your body fat percentage and assess your health risk.\nAs a beginner in Python, just like me, a body mass index calculator is one of the simplest and useful projects you can create<p>\nBuilding a BMI calculator involves the following steps:</p></p><h2>\n  \n  \n  1.Set Up your code editor:\n</h2><p>(I use Visual Studio Code) and open a new file (CTRL + N), save it using the name bmi_calculator.py (This is optional, you can call it whatever name you want, but this is preferable for easy referral)</p><p>You’ll want to add a comment on your code editor, which includes the mathematical formula for calculating BMI, as well as the different BMI categories.</p><p>Create a weight variable and a height variable. Both variables will store the input function, input(), which allows for a user’s response. Inside the input function, you can use questions such as Insert your height or What is your weight? whatever your choice is</p><p>Height = float(input(\"What is your height?: \"))\nWeight = float(input(\"What is your weight in kg?: \"))</p><p>The BMI calculation uses kg for weight and meters for height, so it’s better to specify those units in your input. E.g.: Instead of just asking “what’s your weight?”, ask “what’s your weight in kg?”\nWe use float() here to convert the user’s input to a float so python does not read the numbers as a string.</p><p>Next, we create another variable for the BMI calculation. I called mine BMI. In this variable, you store the mathematical formula for calculating the BMI.\nSo we have: BMI = Weight/ (Height *2)<p>\nThe / operator is the division symbol while the * operator is for multiplication.</p>\nJust like in a normal calculator, Division goes before multiplication, but the brackets are solved first before any other operations. In BMI calculation, the height is multiplied first by 2 and then divided by the weight which is the reason for including the bracket.</p><p>After the calculation, you’ll want to create a response back to the individual to tell the value of their BMI and what category it falls under.\nWe can do this using a flow control statement, in this case the if statement. An if statement’s clause will execute if the statement’s condition is True. The clause is skipped if the condition is false. The if statement is followed by an elif (else if statement that provides another condition that is checked if the previous conditions are false), and finally an else statement (runs when both if and elif are false)</p><p>Although on Gist Hub I used something called the “f” string, which I have not discussed here yet, doing it like in the example above is still fine.\nThat’s it! you’ve built your own BMI calculator! Thanks for reading!</p>","contentLength":2743,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Stop Typing That Image Text: PaddleOCR Makes AI-Powered Text Extraction Effortless","url":"https://dev.to/githubopensource/stop-typing-that-image-text-paddleocr-makes-ai-powered-text-extraction-effortless-c4k","date":1762003262,"author":"GitHubOpenSource","guid":324051,"unread":true,"content":"<p>PaddleOCR is a powerful and lightweight OCR toolkit designed to convert images and PDF documents into structured data suitable for AI applications, particularly Large Language Models (LLMs). It supports over 100 languages and offers functionalities like document parsing, translation, and key information extraction (KIE).</p><ul><li><p>✅ PaddleOCR utilizes a powerful two-stage pipeline (text detection followed by text recognition) for industry-leading accuracy.</p></li><li><p>✅ It offers exceptional deployment flexibility, supporting CPU, GPU, and specialized AI hardware (XPU, NPU) across Windows, Linux, and Mac.</p></li><li><p>✅ The project supports a vast array of global languages, making it ideal for international applications and diverse document processing needs.</p></li><li><p>✅ It significantly streamlines the developer workflow by providing highly optimized, pre-trained models accessible via simple Python integration.</p></li></ul><ul></ul><p>We all know the frustration: you have a critical piece of information locked inside a screenshot, a scanned PDF, or a photo of a whiteboard. Copying it manually is tedious and error-prone. This is where Optical Character Recognition (OCR) steps in, and if you haven’t met PaddleOCR yet, prepare for a serious upgrade to your development toolkit. This project solves the fundamental problem of digitizing visual information quickly, accurately, and at scale.</p><p>PaddleOCR is not just a simple text-reading tool; it’s a comprehensive, two-stage system designed for industrial-level performance. When you feed it an image, it doesn't just blindly scan for characters. First, a text detection model locates and draws bounding boxes around all the text regions in the image, effectively separating the text from the background noise and complex layouts. Second, a recognition model zooms into those detected boxes and translates the pixels into actual characters. This separation of duties dramatically increases accuracy, especially when dealing with curved text, varied fonts, or dense documents.</p><p>One of the most compelling reasons developers should jump on this is its incredible deployment flexibility and multilingual support. Whether you are targeting a massive GPU cluster, a standard CPU server, or even specialized AI accelerators like NPUs or XPUs, PaddleOCR is built to run efficiently. This hardware agnosticism, coupled with its robust support for dozens of languages (far beyond just English), makes it a powerhouse for global applications, whether you’re processing receipts in Asia or legal documents in Europe. You get enterprise-grade performance without being locked into specific hardware vendors.</p><p>For the developer workflow, PaddleOCR is a massive time saver. It is designed to be highly accessible, often requiring just a few lines of Python code to integrate via a simple . You don't need a PhD in deep learning to deploy state-of-the-art OCR models. The repository provides highly optimized, pre-trained models that are ready for production use immediately. This means less time spent on training, tuning, and optimizing models, and more time integrating reliable text extraction into features like automated data entry, document indexing, or accessibility tools.</p><p>Ultimately, PaddleOCR provides a fast, accurate, and highly portable solution for turning the world’s images into actionable data. Its combination of detection and recognition models ensures high precision, while its cross-platform compatibility guarantees you can deploy it wherever your application lives. If you need robust text extraction that just works, this is the project you need to check out right now.</p><h2>\n  \n  \n  🌟 Stay Connected with GitHub Open Source!\n</h2><blockquote><p>👥 <p>\nConnect with our community and never miss a discovery</p><a href=\"https://www.facebook.com/people/GitHub-Open-Source/61571925474856/\" rel=\"noopener noreferrer\">GitHub Open Source</a></p></blockquote>","contentLength":3710,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Python Coding Stack: And Now You Know Your ABC","url":"https://www.thepythoncodingstack.com/p/and-now-you-know-your-abc-python-abstract-base-classes","date":1762001571,"author":"","guid":324042,"unread":true,"content":"<p>I may have already mentioned in a previous post that I’ve rekindled an old passion: track and field athletics. I’m even writing about it in another publication:  (look out for the new series on sprint biomechanics, if you’re so inclined!)</p><p>This post is inspired by a brief thought that crossed my mind when I considered writing software to assist my club—in the end, I chose not to. (But I already volunteer three hours a week coaching members of the youth team. So no, I don’t feel guilty.)</p><p>Here’s the task. I want to create a class to represent a track and field event held in a competition. This entry allows you to enter the raw results as reported by the officials—the athlete’s bib number and the time they clocked in a race. It then computes the event’s full results.</p><p>A good starting point is to define two classes,  and . I’ll focus on the  class in this post, so I’ll keep the  class fairly basic:</p><div><a target=\"_blank\" href=\"https://substackcdn.com/image/fetch/$s_!8Ehp!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F70c5b762-5b29-4520-b588-7d3b8b29b8d8_1200x294.png\"></a>All code blocks are available in text format at the end of this article • #1 • <em>The code images used in this article are created using <a href=\"https://snappify.cello.so/f4AsFrwgwov\">Snappify.</a> [Affiliate link]</em></div><p>There’s more we could add to make this class more complete. But I won’t. You can create a list of athletes that are competing in the track and field meeting:</p><p>To make it easy and efficient to obtain the  object just from a bib number, you can create a  dictionary:</p><p>The dictionary’s keys are the bib numbers as integers and the values are the  objects. Therefore, <code>print(bib_to_athlete[259].name)</code> displays .</p><p>Now, let’s move to the  class:</p><p>Let’s go through the data attributes in :</p><ul><li><p> is a string with the name of the event. You could use other data types, such as an , but I’ll keep this simple here and use a string.</p></li><li><p> is a list containing  instances. These are the athletes participating in this particular event at the track and field meeting.</p></li><li><p> contains each athlete’s performance. We have choices. The simplest option is to use a list of tuples, where each tuple contains the athlete and the performance. However, since we’re working in the object-oriented domain, perhaps we could create a  class, and  becomes a list of  instances.</p></li></ul><p>So, let’s create the  class at the top of the script:</p><p>We’ll show an example of  and  instances soon. But first we need some methods. Let’s get back to the  class and define , which allows you to add a raw result in the format provided by the officials—the officials only provide the bib number and the performance, such as the time clocked by the athlete:</p><p>You add checks for the scenarios when a bib number doesn’t match any athlete in the whole meeting or when the bib number doesn’t match any athlete in the specific event. The dictionary  method returns  by default if the key is not present in the dictionary.</p><p>If the bib number is valid, you create a  instance and add it to .</p><p>Once you add all the results from the officials, you’re ready to finalise the results:</p><p>This method sorts the list of results based on the value of the  data attribute.</p><p>Let’s try this class to see everything is as we expect:</p><p>You create an  instance for the 100m sprint race. Then you add three individual results. Finally, you finalise the results to get the athletes and their positions in the race.</p><p>Since  sorts based on the performace, the athlete with the fastest time takes the first position in the list, and so on. Here’s the output from the  loop displaying the athletes in  in order:</p><pre><code>Usain Bolt: 9.58\nCarl Lewis: 9.86\nJesse Owens: 10.3</code></pre><p>Usain Bolt is first with the fastest time, followed by Carl Lewis, and Jesse Owens in third. Everything seems to be working well… But “It works” are the two most dangerous words in programming!</p><h2><strong>It’s Time For The Long Jump</strong></h2><p>The long jump results come in next from the officials. You know how to input the data and finalise the results now:</p><p>And here are the results displayed:</p><pre><code>Carl Lewis: 8.87\nMike Powell: 8.95</code></pre><p>But, but… Mike Powell’s 8.95m is better than Carl Lewis’s 8.87m. The order is wrong!</p><p>Of course! In the 100m sprint the fastest time wins, and the fastest time is the lowest number. But in the long jump it’s the longest jump that wins, and that’s the largest number!</p><p>The  method no longer works for the long jump or for other field events. For field events, the sorting needs to happen in reverse order.</p><p>There are several ways to deal with this problem. There are always several ways to solve a problem in programming.</p><p>The simplest is to add an  Boolean data attribute in  and then add an  statement in . And if this were the only difference between running and field events, this would indeed be a fine option.</p><p>However, if there are more differences to account for, the extra fields and  statements scattered throughout the class make the class harder to maintain.</p><p>So, let’s look at another option.</p><h2><strong>Creating Separate Classes for Track Events and Field Events</strong></h2><p>You could create two classes instead of one:  and . Each class will take care of getting the  method right and also deal with any other differences we may find between track events and field events.</p><p>However, you don’t want to create two unrelated classes since these classes will have a lot in common. Sure, you can copy and paste the code that’s common between the two classes, but you don’t need me to tell you that’s not a good idea. Will you remember to make changes in both places when you decide to change the implementation later?</p><p>You also want to make sure they have the same data attribute names for similar things. For example, you don’t want one class to have  and the other , say, or change the spelling by mistake. Now, I know you’ll pay attention when creating these methods to make sure this doesn’t happen, but why take the risk?</p><p>And when you come back to your code in six months’ time (or a colleague starts working on the code) and you decide you need another class that follows the same principles, will you remember what methods you need to include? You can spend time studying your old classes, of course. But wouldn’t you like to make your life a bit simpler? Of course you would.</p><p>However,  shouldn’t inherit from  since a track event  a field event. The same applies the other way around. These classes are siblings, so they can’t have a parent-child relationship.</p><p>Instead, they could both inherit from a common parent. So, let’s keep the  class as a common parent for both  and .</p><p>However, the only purpose of  is to serve as a starting point for the two child classes. You no longer want a user to create instances of  now that you have  and . They should only create instances of  or . How can you make this clear in your code and perhaps even prevent users from creating an instance of the parent class, ?</p><h2><strong>Abstract Base Classes (ABCs)</strong></h2><p>The answer is Abstract Base Classes, often shortened to ABCs. The ABC acronym gives the impression these are as easy as ABC—they’re not, but there’s no reason they need to be difficult, either. The title of this article is also a reference to a rhyme my children used to sing when they were toddlers learning their ABC!</p><p>Let’s refresh your memory about different terms often used to describe the inheritance relationship between classes:</p><ul><li><p>You can refer to  and . The child class inherits from the parent class.</p></li><li><p>Or you can refer to  and . The subclass inherits from the superclass. This is where the built-in  gets its name.</p></li><li><p>Or you can refer to  and . The derived class inherits from the base class.</p></li></ul><p>Whatever terms you choose to use, they refer to the same things!</p><p>So, an ABC is a base class, since other classes are derived from it. That deals with the BC in ABC. And it’s abstract because you’re never going to create a concrete instance of this class.</p><p>You’re not meant to create an instance of an abstract base class and often you’ll be prevented from doing so. But you can use it to derive other classes.</p><p>Let’s turn  into an abstract base class:</p><p>The changes from the previous version are highlighted. Let’s go through each change:</p><ul><li><p>From the  module—and now you know what these letters stand for—you import  and . You’ll see both of these referred to and explained in the bullets below.</p></li><li><p>When you define the  class, you include  as its base or parent class. When a class inherits from the  class, the class itself becomes an abstract base class. Anyone reading your code will immediately understand the role of this class.</p></li><li><p>You add the  decorator before defining  and you also remove the contents of this method. Since you can’t leave the body of a function or method blank, you include the  statement as the method’s body. This method doesn’t do anything, but it’s there, and it’s marked as an abstract method. Let’s see what this means…</p></li></ul><p>Here’s what you’re effectively stating when you create this ABC with the  abstract method: Any class derived from the  ABC  include a  method.</p><p>Let’s explore this by defining  and . At first, you’ll keep them simple:</p><p>You define the two new classes  and . They inherit from , which is an abstract base class. You just include  as the body of each class for now. This means that these classes inherit everything from the parent class and have no changes or additions. They’re identical to the parent class.</p><p>Note that you now use  and  to create instances for the 100m race and the long jump.</p><p>However, you get an error when you try to create these instances:</p><pre><code>Traceback (most recent call last):\n  File ... line 53, in &lt;module&gt;\n    track_100m = TrackEvent(\n        “100m Sprint”,\n        [bib_to_athlete[259], bib_to_athlete[161], bib_to_athlete[362]]\n    )\nTypeError: Can’t instantiate abstract class TrackEvent without\n    an implementation for abstract method ‘finalise_results’</code></pre><p>The abstract base class includes the method , which is marked as an abstract method. Python is expecting a concrete implementation of this method. Any class that inherits from the  ABC  have a concrete implementation of this method. Let’s fix this:</p><p>In , you include the same code you had in the original  since this algorithm works well for track events where the smallest numbers (the fastest times) represent the best performances.</p><p>However, you pass  to  in <code>FieldEvent.finalise_results()</code> since the largest numbers (longest distances) represent the best performances in this case.</p><p>You can now try these new classes on the 100m race results and the long jump results you used earlier:</p><p>You now use the new derived classes  and  in this code instead of . You also add two new printouts to separate the results.</p><pre><code>100m Sprint Results:\nUsain Bolt: 9.58\nCarl Lewis: 9.86\nJesse Owens: 10.3\n​\nLong Jump Results:\nMike Powell: 8.95\nCarl Lewis: 8.87</code></pre><p>The 100m results show the fastest times (smallest values) as the best performances. The long jump results show the longer jump (larger value) as the best performance. All as it should be!</p><h2><strong>Wind Readings and Breaking Ties</strong></h2><p>But there are more differences we need to account for. In some track and field events, the wind reading matters. In these events, if the wind reading is larger than 2.0 m/s, the results still stand but the performances cannot be used for official records.</p><p>But does this affect track events or field events? So should you account for this in the  class or in the  class?</p><p>It’s not so simple. Wind readings matter in some track events, but not all. And they also matter in some field events, but not all. So, you have a different subset of events to account for now. The 100m, 200m, 110m hurdles and 100m hurdles, which are all track events, are in the same category as the long jump and triple jump, which are field events.</p><p>But before we find a solution for this, here’s something else to mess things up even more. What happens when there’s a tie—when two athletes have the same performance value? The tie-breaking rules also depend on the event. Let’s ignore the track events here, since depending on what timing system is used, it’s either the officials who decide or the higher precision times from the automatic timing systems.</p><p>But what about the field events? In most of them, if there’s a tie, the next best performance is taken into account. However, the rules are different for the high jump and pole vault events where there’s a count back system used. Explaining the rules of track and field is not the purpose of this article, so I won’t!</p><p>So that’s yet another subset to consider: tie breaks in the vertical jumps are different from tie breaks in the horizontal jumps and throws.</p><p>How can we account for all these subsets of events?</p><p>There are always many solutions to the same problem. You can extend the idea of using ABCs to cater for all options. But the Venn diagram of which event falls under which category is a bit complicated in this case.</p><p>The 100m, 200m, 100m hurdles and 110m hurdles are all track events affected by wind readings. But the long jump and triple jump are also affected by wind readings but they’re field events. The discus and other throw events are field events—so the longest throw wins—but aren’t affected by high wind readings. And the long jump, triple jump, and the throws have a next-best jump/throw tie-breaking rule. But the pole vault and high jump are field events not affected by the wind but with different tie-breaking rules.</p><p>Are you still with me? Confused? Can you think of an abstract base class structure to account for all these combinations. It’s not impossible, but you’ll need several layers in the hierarchy.</p><p>Instead, I’ll explore a different route in a second article, which I’ll publish soon!</p><p><em>The follow-up article will be part of</em> The Club  The Python Coding Stack. <em>These are the articles for paid subscribers. So, if you’d like to read about a different way</em>——<em>of merging all these requirements into our classes,</em><a href=\"https://www.thepythoncodingstack.com/subscribe\"> The Club </a>.</p><h2><strong>Final Words for This Article • Ready for Part 2?</strong></h2><p>Inheritance is a great tool. And abstract base classes enable you to organise your hierarchies by creating common base classes for concrete classes you may need to define.</p><p>However, inheritance hierarchies can get quite complex. Since inheritance provides a tight coupling between classes, deep hierarchies can cause a bit of a headache.</p><p>Still, abstract base classes provide a great tool to make code cleaner, more readable, and more robust. In the follow-up to this article (coming soon), we’ll look at another tool you can use along with inheritance to solve these complex relationships. So <a href=\"https://www.thepythoncodingstack.com/subscribe\">join </a> to carry on reading about the track and field classes and how mixins and composition can help manage the complexity.</p><p><em>Code in this article uses Python 3.14</em></p><p><em>The code images used in this article are created using <a href=\"https://snappify.cello.so/f4AsFrwgwov\">Snappify</a>.</em></p><p><em>For more Python resources, you can also visit</em><em><a href=\"https://realpython.com?utm_source=the-python-coding-stack\">Real Python</a>—you may even stumble on one of my own articles or courses there!</em></p><p><em>Also, are you interested in technical writing? You’d like to make your own writing more narrative, more engaging, more memorable? Have a look at</em>.</p><p>Further reading related to this article’s topic:</p><pre><code><code>class Athlete:\n    def __init__(self, name, bib_number):\n        self.name = name\n        self.bib_number = bib_number\n</code></code></pre><pre><code><code># ...\n\nlist_of_athletes = [\n    Athlete(”Carl Lewis”, 259),\n    Athlete(”Jesse Owens”, 161),\n    Athlete(”Usain Bolt”, 362),\n    Athlete(”Mike Powell”, 412),\n    Athlete(”Florence Griffith-Joyner”, 263),\n    Athlete(”Allyson Felix”, 298),\n    Athlete(”David Rudisha”, 177),\n    # ...  Add more athletes as needed\n]\n</code></code></pre><pre><code><code># ...\n\nbib_to_athlete = {\n    athlete.bib_number: athlete for athlete in list_of_athletes\n}\n</code></code></pre><pre><code><code># ...\n\nclass Event:\n    def __init__(self, event_name, participants):\n        self.event_name = event_name\n        self.participants = participants\n        self.results = []\n</code></code></pre><pre><code><code>class Result:\n    def __init__(self, athlete, performance):\n        self.athlete = athlete\n        self.performance = performance\n\n# ...\n</code></code></pre><pre><code><code># ...\n\nclass Event:\n    # ...\n        \n    def add_result(self, bib_number, performance):\n        athlete = bib_to_athlete.get(bib_number)\n        if not athlete or athlete not in self.participants:\n            raise ValueError(f”Invalid bib number {bib_number}”)\n        self.results.append(\n            Result(athlete, performance)\n        )\n</code></code></pre><pre><code><code># ...\n\nclass Event:\n    # ...\n    \n    def finalise_results(self):\n        self.results.sort(key=lambda item: item.performance)\n</code></code></pre><pre><code><code># ...\n\ntrack_100m = Event(\n    “100m Sprint”,\n    [bib_to_athlete[259], bib_to_athlete[161], bib_to_athlete[362]]\n)\n\ntrack_100m.add_result(259, 9.86)\ntrack_100m.add_result(161, 10.3)\ntrack_100m.add_result(362, 9.58)\ntrack_100m.finalise_results()\n\nfor result in track_100m.results:\n    print(f”{result.athlete.name}: {result.performance}”)\n</code></code></pre><pre><code><code># ...\n\nfield_long_jump = Event(\n    “Long Jump”,\n    [bib_to_athlete[412], bib_to_athlete[259]]\n)\n\nfield_long_jump.add_result(412, 8.95)\nfield_long_jump.add_result(259, 8.87)\nfield_long_jump.finalise_results()\n\nfor result in field_long_jump.results:\n    print(f”{result.athlete.name}: {result.performance}”)\n</code></code></pre><pre><code><code>from abc import ABC, abstractmethod\n\nclass Result:\n    def __init__(self, athlete, performance):\n        self.athlete = athlete\n        self.performance = performance\n\nclass Athlete:\n    def __init__(self, name, bib_number):\n        self.name = name\n        self.bib_number = bib_number\n\nclass Event(ABC):\n    def __init__(self, event_name, participants):\n        self.event_name = event_name\n        self.participants = participants\n        self.results = []\n\n    def add_result(self, bib_number, performance):\n        athlete = bib_to_athlete.get(bib_number)\n        if not athlete or athlete not in self.participants:\n            raise ValueError(f”Invalid bib number {bib_number}”)\n        self.results.append(\n            Result(athlete, performance)\n        )\n    \n    @abstractmethod\n    def finalise_results(self):\n        pass\n\n# ...\n</code></code></pre><pre><code><code># ...\n\nclass TrackEvent(Event):\n    pass\n\nclass FieldEvent(Event):\n    pass\n\n# ...\n\ntrack_100m = TrackEvent(\n    “100m Sprint”,\n    [bib_to_athlete[259], bib_to_athlete[161], bib_to_athlete[362]]\n)\n\n# ...\n\nfield_long_jump = FieldEvent(\n    “Long Jump”,\n    [bib_to_athlete[412], bib_to_athlete[259]]\n)\n\n# ...\n</code></code></pre><pre><code><code># ...\n\nclass TrackEvent(Event):\n    def finalise_results(self):\n        self.results.sort(key=lambda item: item.performance)\n\nclass FieldEvent(Event):\n    def finalise_results(self):\n        self.results.sort(\n            key=lambda item: item.performance,\n            reverse=True,\n        )\n\n# ...\n</code></code></pre><pre><code><code># ...\n\ntrack_100m = TrackEvent(\n    “100m Sprint”,\n    [bib_to_athlete[259], bib_to_athlete[161], bib_to_athlete[362]]\n)\n\ntrack_100m.add_result(259, 9.86)\ntrack_100m.add_result(161, 10.3)\ntrack_100m.add_result(362, 9.58)\ntrack_100m.finalise_results()\n\nprint(”100m Sprint Results:”)\nfor result in track_100m.results:\n    print(f”{result.athlete.name}: {result.performance}”)\n\nfield_long_jump = FieldEvent(\n    “Long Jump”,\n    [bib_to_athlete[412], bib_to_athlete[259]]\n)\n\nfield_long_jump.add_result(412, 8.95)\nfield_long_jump.add_result(259, 8.87)\nfield_long_jump.finalise_results()\n\nprint(”\\nLong Jump Results:”)\nfor result in field_long_jump.results:\n    print(f”{result.athlete.name}: {result.performance}”)\n</code></code></pre><p><em>For more Python resources, you can also visit</em><em><a href=\"https://realpython.com?utm_source=the-python-coding-stack\">Real Python</a>—you may even stumble on one of my own articles or courses there!</em></p><p><em>Also, are you interested in technical writing? You’d like to make your own writing more narrative, more engaging, more memorable? Have a look at</em>.</p>","contentLength":19389,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Daily Dev Challenges - Day 01 🚀","url":"https://dev.to/kevinrawal/daily-dev-challenges-day-01-5fl6","date":1762000562,"author":"kevinrawal","guid":324027,"unread":true,"content":"<h2>\n  \n  \n  Day 1 — In-Memory Cache with TTL\n</h2><p>I’ve started a  to improve my skills as a developer. of the challenge, where I worked on implementing an .  </p><ul><li>Using  in Python\n</li></ul><p>A solid start to this learning journey — excited for what’s next! 💪  </p>","contentLength":247,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-5a27","date":1761999473,"author":"Vibe YouTube","guid":324026,"unread":true,"content":"<p><strong>3 Unique Python Features You NEED To Know</strong></p><p>Discover three under-the-radar Python tricks that can level up your code: the powerful new match statement for concise pattern matching, built-in dataclasses to eliminate boilerplate in your classes, and how to enforce positional-only or keyword-only arguments for cleaner, more explicit APIs.  </p><p>Along the way you’ll also hear about a sweet Brilliant freebie (20% off Premium) and Tim’s DevLaunch mentorship for hands-on guidance in building real projects and landing developer roles.</p>","contentLength":528,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-lp8","date":1761998859,"author":"Vibe YouTube","guid":324025,"unread":true,"content":"<p>Crank out a Python AI agent in under ten minutes: install dependencies, grab your OpenAI API key, import modules, define your tools, set up the LLM + agent, then wrap it up with driver code and testing. Everything’s neatly time-stamped for quick navigation, and sample code lives on GitHub.  </p><p>Along the way you’ll catch friendly plugs for free trials (Notion, PyCharm) and Tim’s DevLaunch mentorship—perfect if you’re itching to move past tutorials and land real-world gigs.</p>","contentLength":483,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-14in","date":1761998846,"author":"Vibe YouTube","guid":324024,"unread":true,"content":"<p>In this video, Tim at Tech With Tim highlights three modern Python features you’ve probably overlooked: the new match statement for clean pattern matching, dataclasses to cut down on boilerplate when defining classes, and positional-only &amp; keyword-only arguments to make your function signatures crystal clear.</p><p>He also points you to a free Brilliant.org course (with 20% off Premium) and plugs his DevLaunch mentorship program for anyone looking to level up with real-world projects and hands-on guidance.</p>","contentLength":506,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"From Pixels to Insight: Building a Unified Multi‑Modal GenAI Knowledge Base","url":"https://dev.to/suraj_khaitan_f893c243958/from-pixels-to-insight-building-a-unified-multi-modal-genai-knowledge-base-421","date":1761995881,"author":"Suraj Khaitan","guid":324006,"unread":true,"content":"<p>Modern enterprise knowledge isn’t just text. It lives in PDFs with embedded charts, scanned diagrams, and implicit relationships buried across documents. This article walks through designing a production‑grade, multi‑modal ingestion pipeline that:</p><ul><li>Parses heterogeneous documents (PDF, Word, etc.)</li><li>Extracts embedded images → converts them to descriptive text (image2text)</li><li>Normalizes and chunks content</li><li>Generates embeddings and structured triples</li><li>Builds both vector and graph indices</li><li>Enables hybrid retrieval (semantic + relational)</li></ul><p>All implemented as a serverless, event‑orchestrated flow (e.g., Step Functions + Lambdas) using modular services for reading, vision, embedding, indexing, and retrieval—without leaking any sensitive identifiers.</p><h2>\n  \n  \n  Why Multi‑Modal + Structured Matters\n</h2><p>RAG systems relying solely on dense vector similarity can miss:</p><ul><li>Diagram semantics (architecture views, flow charts)</li><li>Entity relationships (who owns what, dependencies)</li><li>Procedural context (step ordering)</li></ul><ol><li>Text extraction (PDF parsing, OCR fallback)</li><li>Image captioning / vision-to-text (image2text)</li><li>Graph construction (subject–predicate–object triples)</li><li>Dense embeddings (semantic meaning)</li></ol><p>…you unlock richer grounding for LLM responses: precise factual lookup + contextual reasoning over relationships.</p><div><pre><code>flowchart LR\n    A[Upload Document(s)] --&gt; B[Initialize Job]\n    B --&gt; C[Read: PDF/Text Parsing]\n    C --&gt; D{Images?}\n    D --&gt;|Yes| E[Image2Text (Vision Models)]\n    D --&gt;|No| F[Skip]\n    E --&gt; G[Merge Text + Image Captions]\n    F --&gt; G[Unified Content Stream]\n    G --&gt; H[Chunking Strategy]\n    H --&gt; I[Embedding Generation]\n    I --&gt; J[Vector Index (Similarity)]\n    I --&gt; K[Triple Extraction + Graph Index]\n    J --&gt; L[Hybrid Retriever]\n    K --&gt; L\n    L --&gt; M[LLM Answer Synthesis]\n</code></pre></div><h2>\n  \n  \n  Status Lifecycle &amp; Resilience\n</h2><p>A robust ingestion pipeline maintains explicit statuses for observability and idempotency:</p><div><pre><code>pending → processed → image2text_completed → chunked → embedded → indexed\n               |               |             |         |\n         reading_failed   image2text_failed  chunking_failed ...\n</code></pre></div><p>Each stage validates preconditions (e.g., must be  or  before chunking) and writes atomic status transitions to a metadata store. This enables safe retries, partial completion, and granular metrics.</p><h2>\n  \n  \n  Core Pipeline Modules (Conceptual)\n</h2><div><table><thead><tr></tr></thead><tbody><tr><td>Detect file type; extract textual blocks; extract inline images</td><td>Hybrid extraction: native PDF libraries + fallback OCR</td></tr><tr><td>Caption images with a vision model</td><td>Early exit if no images; retain page provenance</td></tr><tr><td>Build semantically coherent, token‑bounded chunks</td><td>Preserve hierarchy; avoid splitting code/examples mid block</td></tr><tr><td>Generate vectors per chunk</td><td>Batch calls; dimension awareness</td></tr><tr><td>Extract triples (subject, predicate, object)</td><td>Confidence scoring + schema versioning</td></tr><tr><td>Hybrid vector + graph + metadata fusion</td><td>Weighted scoring &amp; reranking</td></tr></tbody></table></div><h2>\n  \n  \n  Walkthrough: PDF With Embedded Diagrams\n</h2><ol><li>Reading stage extracts page blocks + images.</li><li>Image2Text captions each figure (\"Sequence diagram showing service A calls service B\").</li><li>Chunking interleaves text paragraphs &amp; captions while enforcing token limit.</li><li>Embedding stage produces dense vectors (e.g., 1024‑dimensional).</li><li>Graph extraction derives entity relationships (ServiceA → calls → ServiceB).</li><li>Retrieval blends vector similarity + graph expansion.</li><li>LLM answers grounded with both chunk text and relationship provenance.</li></ol><h3>\n  \n  \n  Reading + Image Extraction\n</h3><div><pre><code></code></pre></div><h3>\n  \n  \n  Vision Enrichment (Image2Text)\n</h3><div><pre><code></code></pre></div><h3>\n  \n  \n  Chunking Mixed Modal Content\n</h3><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>Embedding nodes &amp; edges enables:</p><ul><li>Semantic expansion (similar conceptual nodes)</li><li>Multi-hop reasoning with relevance pruning</li><li>Rich provenance joining text chunks + relationships</li></ul><h2>\n  \n  \n  Operational Considerations\n</h2><div><table><tbody><tr><td>Batch embeddings; parallel captioning where feasible</td></tr><tr><td>Guardrails for large PDFs &amp; image sets; stream pages</td></tr><tr><td>Status validation gates per stage</td></tr><tr><td>Modality-specific fail states (continue with text)</td></tr><tr><td>Version triple schema + migration plan</td></tr><tr><td>Tune α/β/γ weights offline (NDCG/MRR)</td></tr></tbody></table></div><div><pre><code>final_score = α * vector_similarity + β * graph_relevance + γ * metadata_boost\n</code></pre></div><h2>\n  \n  \n  Performance &amp; Quality Tips\n</h2><div><table><tbody><tr><td>Embedding-based dedupe (cosine threshold)</td></tr><tr><td>Adaptive token sizing per density</td></tr><tr><td>Confidence filtering + fallback noun phrase rules</td></tr><tr><td>Require in-text evidence &amp; schema validation</td></tr></tbody></table></div><h2>\n  \n  \n  Security &amp; Governance (Generic)\n</h2><ul><li>File-type allowlist (.pdf, .docx, .pptx, .xlsx, .txt)</li><li>Malware scanning pre-ingestion</li><li>PII redaction pass pre-embedding</li><li>Structured logging (no raw document dumps)</li><li>Principle of least privilege for each stage</li></ul><div><table><tbody><tr><td>Mixed PDF → expected blocks &amp; images</td></tr><tr><td>Cohesive segmentation, no mid-code splits</td></tr><tr><td>Dimensions + determinism for identical input</td></tr><tr><td>Known doc yields expected triples</td></tr><tr><td>Query returns hybrid evidence set</td></tr><tr><td>Upload → query answer grounded in provenance</td></tr></tbody></table></div><ul><li>Failure counts by stage &amp; file type</li><li>Chunks per document distribution</li><li>Triple density (per 1k tokens)</li><li>Retrieval latency breakdown (vector vs graph)</li><li>Fusion contribution (percentage of answers using graph expansion)</li></ul><ol><li>Multi-modal joint embeddings (text + image per chunk)</li><li>Temporal predicates (time-aware graph queries)</li><li>Incremental re-chunking on document updates (diff-based)</li><li>Active learning for low-confidence triples</li><li>Structured citation anchors in generated answers</li></ol><h2>\n  \n  \n  Prompt Pattern for Safe Triple Extraction\n</h2><div><pre><code>You are an information extraction agent.\nExtract factual (subject, predicate, object) triples ONLY if explicitly implied by the text.\nReturn JSON array. Ignore speculative relationships.\n\nText:\n\"Service A asynchronously publishes events to Queue Q. Service B subscribes to Queue Q.\"\n\nOutput:\n[\n  {\"subject\": \"Service A\", \"predicate\": \"publishes to\", \"object\": \"Queue Q\"},\n  {\"subject\": \"Service B\", \"predicate\": \"subscribes to\", \"object\": \"Queue Q\"}\n]\n</code></pre></div><h2>\n  \n  \n  Implementation Checklist (Condensed)\n</h2><ul><li> Parser abstraction (text + images)</li><li> Vision caption enrichment with provenance</li><li> Embedding batcher &amp; dimension registry</li><li> Triple extraction microservice</li><li> Hybrid retrieval fusion layer</li><li> Metrics, statuses, retry semantics</li><li> Security guardrails &amp; PII handling</li><li> Evaluation harness &amp; golden corpora</li></ul><p>Multi-modal + graph-aware RAG reduces hallucination, improves specificity, and unlocks reasoning over implicit structure. Build modularly, invest early in observability, and iterate using evaluation-driven refinements.</p><p>Feel free to request a focused deep dive (e.g., graph schema design or fusion scoring) if helpful.</p><p>Written by Suraj Khaitan\n— Gen AI Architect | Working on serverless AI &amp; cloud platforms.</p>","contentLength":6430,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Generating PDF files with Python","url":"https://dev.to/marvelefe/generating-pdf-files-with-python-57m6","date":1761995318,"author":"Efe Omoregie","guid":324005,"unread":true,"content":"<p>Python, with its extensive collection of libraries, provides powerful tools to create PDF files dynamically. This blog post will explore some of the most popular Python libraries for PDF generation, provide insights into their strengths and help you select the best tool for your project.</p><h2>\n  \n  \n  Why Automate PDF Generation?\n</h2><p>Automating PDF creation can streamline numerous business processes. Here are a few common applications:</p><ul><li> Automatically create and send invoices to clients.</li><li> Generate daily, weekly, or monthly reports from various data sources.</li><li> Produce order confirmations, shipping labels, and product catalogues.</li><li> Save plots and charts from libraries like Matplotlib as PDF files.</li></ul><h2>\n  \n  \n  Top Python Libraries for PDF Generation\n</h2><p>Several Python libraries are available for creating PDFs, each with unique features and use cases. Let's explore three of the most popular options: ReportLab, FPDF2, and WeasyPrint.</p><p>ReportLab is one of the most established Python libraries for generating PDFs. It offers a powerful, low-level API for drawing text, graphics, and images directly onto a PDF canvas. For more complex documents, ReportLab provides a high-level templating language.</p><ul><li>  Extensive capabilities for creating complex and customised PDFs.</li><li>  Support for tables, graphs, and various graphic elements.</li><li>  Cross-platform compatibility.</li><li>  Both open-source and commercial versions are available.</li></ul><div><pre><code></code></pre></div><p>This code snippet creates a PDF named \"reportlab_example.pdf\" and draws the string \"Hello, ReportLab!\" at a specified coordinate on the page.</p><p>FPDF2 is a popular choice for developers looking for a straightforward and easy-to-use library. It is a port of the FPDF library from PHP and is known for its minimalist design and lack of dependencies.</p><ul><li>  Simple and intuitive API, making it easy to learn.</li><li>  Support for headers, footers, and automatic page breaks.</li><li>  Basic HTML rendering capabilities.</li><li>  Ability to add custom fonts.</li></ul><div><pre><code></code></pre></div><p>This example generates a PDF with centred text.</p><p>WeasyPrint is a modern library that renders HTML and CSS into PDFs, making it an excellent choice for web developers. It leverages existing web development skills to create high-quality, professional-looking documents.</p><ul><li>  Converts HTML and CSS to PDF.</li><li>  Supports modern CSS features like Flexbox and Grid.</li><li>  Can generate PDFs from URLs or HTML strings.</li><li>  Excellent for generating reports, invoices, and other printable documents from web content.</li></ul><div><pre><code></code></pre></div><p>This code demonstrates how to create a PDF from a simple HTML string.</p><h2>\n  \n  \n  Choosing the Right Library\n</h2><p>The best library for your project depends on your specific needs:</p><ul><li>  For <strong>complex, highly customized documents</strong> where you need precise control over every element,  is the top contender.</li><li>  If you need to <strong>quickly generate simple to moderately complex PDFs</strong> and prefer a straightforward API,  is an excellent starting point.</li><li>  For those who are already <strong>proficient with web technologies</strong> and want to leverage their HTML and CSS skills to create beautiful PDFs,  is the ideal choice.</li></ul><p>Python's diverse ecosystem of libraries makes PDF generation an accessible task for developers of all skill levels. By knowing the available libraries, you can select the most appropriate tool to automate your document creation workflows and produce professional-quality PDFs.</p>","contentLength":3250,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-5dkc","date":1761992696,"author":"Vibe YouTube","guid":323988,"unread":true,"content":"<p>In this video, Tim walks you through three underused but powerful Python features: the match statement for clean pattern matching, dataclasses to generate boilerplate-free classes in a snap, and positional-only/keyword-only arguments to enforce clearer function signatures.</p><p>Along the way he drops a 20% off link for Brilliant Premium and gives a shout-out to his DevLaunch mentorship program for anyone looking to level up with hands-on project guidance.</p>","contentLength":453,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-1pa0","date":1761991733,"author":"Vibe YouTube","guid":323987,"unread":true,"content":"<h2>\n  \n  \n  Build a Python AI Agent in 10 Minutes\n</h2><p>Want to whip up your own AI sidekick before your coffee cools? This quick-fire tutorial walks you through installing the essentials, grabbing your OpenAI API key, wiring up imports and tools, and spinning up an LLM agent—all in under ten minutes. You’ll even get driver code and test runs to make sure your agent actually talks back.</p><p>Along the way, you’ll find links to free Notion, a PyCharm IDE download, a mentorship program for leveling up beyond tutorials, and a handy GitHub repo with the full project. Perfect for Python devs itching to add AI magic to their toolkit!</p>","contentLength":626,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-ane","date":1761991723,"author":"Vibe YouTube","guid":323986,"unread":true,"content":"<p>3 Unique Python Features You NEED To Know dives into three underrated but super handy tools: the new  statement that replaces messy  chains with clean pattern matching,  to auto-generate boilerplate for your classes, and the sometimes overlooked positional-only &amp; keyword-only arguments that make your function signatures crystal clear.</p><p>Tim walks you through real-world examples so you can start using these features today and level up your Python code.</p>","contentLength":452,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"What I Learned While Installing Python","url":"https://dev.to/wazcodes/what-i-learned-while-installing-python-2o5o","date":1761991207,"author":"Mohamed Wazeem","guid":323985,"unread":true,"content":"<ol><li>Download the Python installer based on your operating system.</li><li>Install Python using the downloaded file.\n\n<ul><li>Make sure you check “Add Python to PATH” if you are using Windows.</li></ul></li></ol><p>Since my school days, I’ve installed Python many times and even helped others do it. But only recently did I realize an important factor during installation — adding Python to the environment variables.</p><p>I had noticed that typing  in the Command Prompt didn’t work; instead, I had to use  to check the version of Python I was using. I used to think that  and  worked only for versions before 3.10, and that for later versions we had to use  and .</p><p>But I was wrong. The real reason was that I hadn’t added Python to the PATH environment variable during installation.</p>","contentLength":743,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Mastering Python in 2025 — The Smartest Skill You Can Learn Today","url":"https://dev.to/sanjaynaker/mastering-python-in-2025-the-smartest-skill-you-can-learn-today-mlp","date":1761989542,"author":"Sanjay Naker","guid":323966,"unread":true,"content":"<p>Why Python Still Rules in 2025</p><p>Despite dozens of new programming languages, Python remains the most widely used and versatile. From AI and data science to web development and automation, its simple syntax and massive community support make it the go-to language for both beginners and experts.</p><p>In fact, recent studies show that Python is used by over 80% of AI developers worldwide, making it the foundation of modern machine learning and automation systems.</p><p>Top Areas Where Python Excels</p><p>AI &amp; Machine Learning: With frameworks like TensorFlow, PyTorch, and Scikit-learn.</p><p>Data Analytics: Pandas, NumPy, and Matplotlib simplify big data tasks.</p><p>Web Development: Django and Flask make backend development fast and efficient.</p><p>Automation &amp; Scripting: Automate workflows, file management, and even SEO tasks.</p><p>How to Start Learning Python</p><p>Master the Basics: Variables, loops, and conditionals form the foundation.</p><p>Work on Mini Projects: Try building calculators, weather apps, or web scrapers.</p><p>Learn Through Real Data: Use Kaggle datasets to understand real-world applications.</p><p>Understand Libraries: Spend time exploring libraries like Pandas, Requests, and Matplotlib.</p><p>Build a Portfolio: Share your projects on GitHub to attract job or freelance opportunities.</p><p>Why It’s the Smartest Skill of the Decade</p><p>Python isn’t just a programming language — it’s a career accelerator. With automation, AI, and cloud tech dominating the global market, Python skills can open doors to high-paying roles in data science, fintech, cybersecurity, and robotics.</p><p>In 2025, Python is more than relevant — it’s essential. Whether you’re a student, a digital marketer, or an entrepreneur, learning Python gives you a future-proof edge in the evolving tech landscape.</p>","contentLength":1735,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Clarity from Chaos: Super-Resolution Imaging That Bends the Rules","url":"https://dev.to/arvind_sundararajan/clarity-from-chaos-super-resolution-imaging-that-bends-the-rules-282b","date":1761987725,"author":"Arvind SundaraRajan","guid":323947,"unread":true,"content":"<p>Ever struggled to decipher the details in a blurry image? Imagine trying to diagnose a microscopic medical anomaly from a noisy scan. Now, imagine an AI so advanced, it could not only sharpen that image, but also tell you how confident it is in its interpretation.</p><p>The core of this capability lies in a new method for generating high-resolution images from low-resolution counterparts, even when the original data is riddled with noise. Instead of relying solely on pixel-level information, this approach uses a novel conditional flow matching technique. Think of it as teaching the AI to \"hallucinate\" the missing details based on a deep understanding of image structure and the patterns of degradation introduced by noise. </p><p>This method learns a powerful prior distribution – a statistical model of what \"real\" images of a certain type  look like – and uses this prior to guide the super-resolution process. The crucial innovation? It doesn't just generate a single high-resolution image; it provides a probability distribution, allowing developers to quantify the uncertainty in each pixel's value.</p><ul><li> Handles low-quality input data effectively.</li><li><strong>Uncertainty Quantification:</strong> Provides a confidence score for each pixel.</li><li> Reveals finer details previously obscured by noise.</li><li> Learns from diverse datasets for improved generalization.</li><li> Achieve best trade-off between data fidelity and perceptual realism</li></ul><p>One practical tip: when implementing this, be prepared for significant computational overhead during training. A clever approach is to pre-train the core generative model on a vast, clean dataset before fine-tuning on your noisy, low-resolution target data. Think of it as teaching the AI the general rules of photography  asking it to fix a specific blurry photo. A novel application is in archaeological reconstruction, where fragmented and degraded artifacts can be virtually reassembled with AI-assisted confidence levels.</p><p>This approach isn't just about making pretty pictures; it's about extracting actionable information from imperfect data. Imagine applying this to satellite imagery for environmental monitoring, or to medical imaging for early disease detection. The ability to both enhance images  assess the reliability of those enhancements opens up a world of possibilities for AI-driven insights.</p><p> Super-Resolution, Image Enhancement, Deep Learning, Conditional Flow Matching, Noise Reduction, Image Processing, Generative Models, AI Algorithms, Computer Vision Applications, Low-Resolution Images, High-Resolution Images, Machine Learning Research, Image Reconstruction, AI Development, Model Training, Inference Optimization, Image Quality Assessment, Data Augmentation, Robustness, Image Restoration, AI for Imaging, ResMatching, Artificial Intelligence, Neural Networks, Diffusion Models</p>","contentLength":2798,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Celery + SQS: Stop Broken Workers from Monopolizing Your Queue with Circuit Breakers","url":"https://dev.to/ivoronin/celery-sqs-stop-broken-workers-from-monopolizing-your-queue-with-circuit-breakers-11dj","date":1761986039,"author":"Ilya Voronin","guid":323946,"unread":true,"content":"<p>You have 10 Celery workers processing tasks from SQS. One worker's GPU fails. Here's what happens:</p><ul><li> Takes 60 seconds to process a task</li><li> Fails in 0.5 seconds, immediately grabs next task</li></ul><p>The broken worker is  at consuming (and failing) tasks. In one minute, it handles 90% of your queue and fails everything.</p><p>This is <strong>systemic failure amplification</strong> — one broken component paralyzes the entire system.</p><p>When a worker keeps failing, <strong>stop it from taking new tasks</strong> for a timeout period.</p><p> Celery + SQS doesn't have a built-in way to pause consumption based on worker health. There's no API to say \"stop fetching messages for 60 seconds because this worker is broken.\"</p><p> Patch Celery's consumption mechanism using bootsteps + shared memory for cross-process signaling.</p><div><pre><code></code></pre></div><ol><li>Worker fails 3 times → circuit opens</li><li> writes <code>_paused_until = now + 60s</code> to shared memory</li><li>Main process checks  in </li><li>Returns  → <strong>no SQS fetching for 60 seconds</strong></li><li>After timeout, circuit tries one task (HALF_OPEN state)</li><li>Success → close circuit, failure → pause again</li></ol><p>The pattern transforms failing workers from system-killers into isolated incidents.</p>","contentLength":1096,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How to Build Beautiful Terminal User Interfaces in Python","url":"https://dev.to/dev-tngsh/how-to-build-beautiful-terminal-user-interfaces-in-python-bo6","date":1761985440,"author":"Dev TNG","guid":323945,"unread":true,"content":"<h2>\n  \n  \n  How to Build Beautiful Terminal User Interfaces in Python\n</h2><p>To build a beautiful and maintainable Terminal User Interface (TUI) in Python, combine the  library for vibrant presentation and the  library for interactive prompts. The key is to create a centralized theme class for styling (colors, icons, layout) and a base UI class with reusable components, ensuring a consistent and professional look across your entire application.</p><p>This guide breaks down the architecture used by the  CLI to create its powerful interactive interface.</p><h2>\n  \n  \n  What are  and ?\n</h2><p>The foundation of a modern Python TUI rests on two key libraries that handle presentation and interaction separately.</p><ul><li>: A library for writing rich text and beautiful formatting to the terminal. It's used for rendering panels, tables, styled text, progress bars, and more. It handles the .</li><li>: A library for building interactive command-line prompts. It's used for asking questions, creating menus, and getting user input. It handles the .</li></ul><p>By combining them, you get a full-featured, app-like experience directly in the terminal.</p><h2>\n  \n  \n  How to Structure a Theming System for TUIs\n</h2><p>The most critical architectural decision for a scalable TUI is to . In the  project, this is handled by a single  class in . This class acts as a single source of truth for all visual elements.</p><p>A well-structured theme class should contain nested classes for different aspects of styling:</p><ol><li>: Define all color names and styles (e.g., , , ).</li><li>: Keep all Unicode icons/emojis in one place (e.g., , , ).</li><li>: Specify dimensions like padding, widths, and box styles.</li><li>: Define semantic text styles (e.g., , , ).\n</li></ol><div><pre><code></code></pre></div><p> The most effective TUIs separate presentation logic (the 'what') from styling (the 'how'). A centralized theme class is the architectural pattern that enables this separation, making complex UIs maintainable and easy to re-brand.</p><h2>\n  \n  \n  How to Create Reusable UI Components\n</h2><p>To avoid repeating code, create a  class that all your UI \"screens\" can inherit from. This base class, seen in , should:</p><ol><li> Initialize the  from  and your .</li><li> Provide helper methods for creating common UI elements like styled panels.</li></ol><p>The  method is a perfect example. It takes content and a title, applies consistent styling from the theme, and returns a  object ready to be displayed.</p><div><pre><code></code></pre></div><p>By using this helper, every panel in the application looks the same, reinforcing a professional user experience.</p><h2>\n  \n  \n  How to Build Interactive Prompts and Menus\n</h2><p> makes it easy to build interactive menus. The key is to integrate your theme with 's styling system. You can create a method in your theme class that returns a  object.</p><div><pre><code></code></pre></div><p>Then, in your UI screens, you pass this style to your prompts.</p><div><pre><code></code></pre></div><p>This ensures even interactive elements match your application's brand.</p><h2>\n  \n  \n  How to Display Rich Content like Tables\n</h2><p>The  library excels at displaying structured data. The  class lets you create beautiful, formatted tables with headers, titles, and custom styles drawn directly from your theme.</p><div><pre><code></code></pre></div><h2>\n  \n  \n  FAQ for Building Python TUIs\n</h2><h3>\n  \n  \n  What are the best libraries for Python TUIs in 2025?\n</h3><p>For CLI applications, the combination of  (for display) and  (for prompts) is a powerful, modern, and easy-to-use stack. For full-screen, app-like experiences with more complex layouts and widgets,  (from the creator of ) is the leading choice.</p><h3>\n  \n  \n  Is  better than the built-in  library?\n</h3><p>Yes, for most use cases.  is a low-level library that requires manual handling of screen state, positioning, and colors, which is complex and error-prone.  provides a high-level, declarative API that handles all the hard parts for you, making it significantly faster to develop and maintain beautiful TUIs.</p><h3>\n  \n  \n  How do you handle terminal width and responsiveness?\n</h3><p>The  object can automatically detect the terminal width. You can build responsive layouts by creating  and  objects whose dimensions are based on the console width, as demonstrated in the 's  and  helper methods.</p><h3>\n  \n  \n  Can you use emojis and icons in the terminal?\n</h3><p>Yes. Modern terminals fully support Unicode, including emojis. Storing them in a central  class within your theme (like in ) makes them easy to manage and use consistently. They add significant visual appeal and clarity to a TUI.</p><h3>\n  \n  \n  What's the difference between  and ?\n</h3><p> is a library for rendering rich content in the terminal. You print something, and it's done.  is a full application framework for building TUIs. It runs an event loop, manages state, and has a widget-based system similar to a GUI framework. Use  for CLI ; use  for CLI .  uses  and  for its interactive prompts, which is a common pattern.</p><h3>\n  \n  \n  How do you manage colors and styles consistently?\n</h3><p>The best practice is to define all colors and semantic styles (like \"title\" or \"error message\") in a single, centralized  file. In your UI code, always reference these theme variables (e.g., <code>self.theme.Colors.SUCCESS</code>) instead of hardcoding color strings like . This allows you to change your entire application's look from one file.</p>","contentLength":5013,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-16b6","date":1761984545,"author":"Vibe YouTube","guid":323944,"unread":true,"content":"<p>Tim dives into three underused but powerful modern Python tricks:  </p><ol><li>The new  statement for clean, pattern-based branching (like a supercharged ).\n</li><li> to auto-generate all that tedious boilerplate in your classes.\n</li><li>Positional-only and keyword-only arguments to make your function signatures crystal clear.</li></ol><p>Plus, he mentions a free Brilliant.org trial (with 20% off Premium) and his DevLaunch mentorship program for hands-on project help and career coaching.</p>","contentLength":450,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Talk Python to Me: #526: Building Data Science with Foundation LLM Models","url":"https://talkpython.fm/episodes/show/526/building-data-science-with-foundation-llm-models","date":1761984000,"author":"","guid":324168,"unread":true,"content":"<article>Today, we’re talking about building real AI products with foundation models. Not toy demos, not vibes. We’ll get into the boring dashboards that save launches, evals that change your mind, and the shift from analyst to AI app builder. Our guide is Hugo Bowne-Anderson, educator, podcaster, and data scientist, who’s been in the trenches from scalable Python to LLM apps. If you care about shipping LLM features without burning the house down, stick around.&lt;br/&gt;\n&lt;br/&gt;\n&lt;strong&gt;Episode sponsors&lt;/strong&gt;&lt;br/&gt;\n&lt;br/&gt;\n&lt;a href='https://talkpython.fm/ppm'&gt;Posit&lt;/a&gt;&lt;br&gt;\n&lt;a href='https://talkpython.fm/nordstellar'&gt;NordStellar&lt;/a&gt;&lt;br&gt;\n&lt;a href='https://talkpython.fm/training'&gt;Talk Python Courses&lt;/a&gt;&lt;br/&gt;\n&lt;br/&gt;\n&lt;h2 class=\"links-heading mb-4\"&gt;Links from the show&lt;/h2&gt;\n&lt;div&gt;&lt;strong&gt;Hugo Bowne-Anderson&lt;/strong&gt;: &lt;a href=\"https://x.com/hugobowne?featured_on=talkpython\" target=\"_blank\" &gt;x.com&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Vanishing Gradients Podcast&lt;/strong&gt;: &lt;a href=\"https://vanishinggradients.fireside.fm?featured_on=talkpython\" target=\"_blank\" &gt;vanishinggradients.fireside.fm&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Fundamentals of Dask: High Performance Data Science Course&lt;/strong&gt;: &lt;a href=\"https://training.talkpython.fm/courses/fundamentals-of-dask-getting-up-to-speed\" target=\"_blank\" &gt;training.talkpython.fm&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Building LLM Applications for Data Scientists and Software Engineers&lt;/strong&gt;: &lt;a href=\"https://maven.com/hugo-stefan/building-llm-apps-ds-and-swe-from-first-principles?promoCode=friendsoftalkpython\" target=\"_blank\" &gt;maven.com&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;marimo: a next-generation Python notebook&lt;/strong&gt;: &lt;a href=\"https://marimo.io?featured_on=talkpython\" target=\"_blank\" &gt;marimo.io&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;DevDocs (Offline aggregated docs)&lt;/strong&gt;: &lt;a href=\"https://devdocs.io?featured_on=talkpython\" target=\"_blank\" &gt;devdocs.io&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Elgato Stream Deck&lt;/strong&gt;: &lt;a href=\"https://www.elgato.com/us/en/p/stream-deck?featured_on=talkpython\" target=\"_blank\" &gt;elgato.com&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Sentry's Seer&lt;/strong&gt;: &lt;a href=\"https://talkpython.fm/seer\" target=\"_blank\" &gt;talkpython.fm&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;The End of Programming as We Know It&lt;/strong&gt;: &lt;a href=\"https://www.oreilly.com/radar/the-end-of-programming-as-we-know-it/?featured_on=talkpython\" target=\"_blank\" &gt;oreilly.com&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;LorikeetCX AI Concierge&lt;/strong&gt;: &lt;a href=\"https://www.lorikeetcx.ai?featured_on=talkpython\" target=\"_blank\" &gt;lorikeetcx.ai&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Text to SQL &amp; AI Query Generator&lt;/strong&gt;: &lt;a href=\"https://www.text2sql.ai?featured_on=talkpython\" target=\"_blank\" &gt;text2sql.ai&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Inverse relationship enthusiasm for AI and traditional projects&lt;/strong&gt;: &lt;a href=\"https://www.oreilly.com/radar/wp-content/uploads/sites/3/2025/04/LLM-SDLC_Fig1_edit3-1.png?featured_on=talkpython\" target=\"_blank\" &gt;oreilly.com&lt;/a&gt;&lt;br/&gt;\n&lt;br/&gt;\n&lt;strong&gt;Watch this episode on YouTube&lt;/strong&gt;: &lt;a href=\"https://www.youtube.com/watch?v=_LFdKjsKdPE\" target=\"_blank\" &gt;youtube.com&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Episode #526 deep-dive&lt;/strong&gt;: &lt;a href=\"https://talkpython.fm/episodes/show/526/building-data-science-with-foundation-llm-models#takeaways-anchor\" target=\"_blank\" &gt;talkpython.fm/526&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Episode transcripts&lt;/strong&gt;: &lt;a href=\"https://talkpython.fm/episodes/transcript/526/building-data-science-with-foundation-llm-models\" target=\"_blank\" &gt;talkpython.fm&lt;/a&gt;&lt;br/&gt;\n&lt;br/&gt;\n&lt;strong&gt;Theme Song: Developer Rap&lt;/strong&gt;&lt;br/&gt;\n&lt;strong&gt;🥁 Served in a Flask 🎸&lt;/strong&gt;: &lt;a href=\"https://talkpython.fm/flasksong\" target=\"_blank\" &gt;talkpython.fm/flasksong&lt;/a&gt;&lt;br/&gt;\n&lt;br/&gt;\n&lt;strong&gt;---==  Don't be a stranger  ==---&lt;/strong&gt;&lt;br/&gt;\n&lt;strong&gt;YouTube&lt;/strong&gt;: &lt;a href=\"https://talkpython.fm/youtube\" target=\"_blank\" &gt;&lt;i class=\"fa-brands fa-youtube\"&gt;&lt;/i&gt; youtube.com/@talkpython&lt;/a&gt;&lt;br/&gt;\n&lt;br/&gt;\n&lt;strong&gt;Bluesky&lt;/strong&gt;: &lt;a href=\"https://bsky.app/profile/talkpython.fm\" target=\"_blank\" &gt;@talkpython.fm&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Mastodon&lt;/strong&gt;: &lt;a href=\"https://fosstodon.org/web/@talkpython\" target=\"_blank\" &gt;&lt;i class=\"fa-brands fa-mastodon\"&gt;&lt;/i&gt; @talkpython@fosstodon.org&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;X.com&lt;/strong&gt;: &lt;a href=\"https://x.com/talkpython\" target=\"_blank\" &gt;&lt;i class=\"fa-brands fa-twitter\"&gt;&lt;/i&gt; @talkpython&lt;/a&gt;&lt;br/&gt;\n&lt;br/&gt;\n&lt;strong&gt;Michael on Bluesky&lt;/strong&gt;: &lt;a href=\"https://bsky.app/profile/mkennedy.codes?featured_on=talkpython\" target=\"_blank\" &gt;@mkennedy.codes&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Michael on Mastodon&lt;/strong&gt;: &lt;a href=\"https://fosstodon.org/web/@mkennedy\" target=\"_blank\" &gt;&lt;i class=\"fa-brands fa-mastodon\"&gt;&lt;/i&gt; @mkennedy@fosstodon.org&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Michael on X.com&lt;/strong&gt;: &lt;a href=\"https://x.com/mkennedy?featured_on=talkpython\" target=\"_blank\" &gt;&lt;i class=\"fa-brands fa-twitter\"&gt;&lt;/i&gt; @mkennedy&lt;/a&gt;&lt;br/&gt;&lt;/div&gt;</article>","contentLength":4661,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"#526: Building Data Science with Foundation LLM Models","url":"https://talkpython.fm/episodes/show/526/building-data-science-with-foundation-llm-models","date":1761984000,"author":"","guid":324177,"unread":true,"content":"<article></article>","contentLength":0,"flags":null,"enclosureUrl":"https://talkpython.fm/episodes/download/526/building-data-science-with-foundation-llm-models.mp3","enclosureMime":"","commentsUrl":null},{"title":"Clarity From Chaos: AI Super-Resolution Redefined","url":"https://dev.to/arvind_sundararajan/clarity-from-chaos-ai-super-resolution-redefined-eko","date":1761980535,"author":"Arvind SundaraRajan","guid":323919,"unread":true,"content":"<p>Tired of grainy images that obscure critical details? Imagine transforming blurry, low-resolution pictures into crisp, high-definition masterpieces, revealing hidden information previously lost in the noise. It's now possible to unlock the full potential of your visual data, thanks to a new AI technique that's revolutionizing image enhancement.</p><p>This innovative approach leverages what's known as \"guided conditional flow matching\" to achieve superior super-resolution. In essence, it learns a sophisticated pattern of how low-resolution images should evolve into high-resolution versions, even when those initial images are riddled with noise. It’s like teaching an AI to connect the dots, filling in the missing pieces with remarkable accuracy.</p><p>The magic lies in its ability to understand the underlying structure of the image, even in the presence of significant distortions. This allows the AI to extrapolate details beyond what's actually visible in the original, creating images with exceptional clarity and fidelity. Think of it as a highly skilled restorer meticulously cleaning a damaged painting, revealing its original beauty.</p><ul><li> Dramatically improve the resolution of your existing image datasets.</li><li> Achieve superior results even with noisy or corrupted images.</li><li> Uncover hidden details that were previously obscured.</li><li> Enable more accurate analysis and interpretation of visual data.</li><li> Integrate this technology into your existing image processing pipelines.</li><li> Gain access to pixel-level confidence data, allowing for informed decision-making.</li></ul><p>One potential implementation challenge lies in the intensive computational resources needed for model training, but clever data augmentation strategies during training can help to mitigate this. For example, synthetically adding noise to training data can dramatically improve performance with real-world noisy images. Beyond scientific imaging, consider using this to enhance historical photographs for archival purposes, breathing new life into faded memories.</p><p>This breakthrough promises to reshape various fields, from medical imaging to satellite surveillance. By offering an unparalleled level of clarity and detail, this technology empowers us to see the world in a whole new light. The next step is to explore even more complex image scenarios and incorporate this technique with other generative models to produce even more realistic imagery.</p><p> Super-resolution, Image enhancement, AI image processing, Deep learning, Conditional Flow Matching, Noise reduction, Image denoising, Generative models, Diffusion models, AI algorithms, Computer vision research, Image reconstruction, Image clarity, Pixel resolution, Machine learning applications, Noisy images, ResMatching, Model training, Data augmentation, Image quality, Image restoration, Low-resolution images</p>","contentLength":2809,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tryton News: Newsletter November 2025","url":"https://discuss.tryton.org/t/newsletter-november-2025/8920","date":1761980438,"author":"","guid":323932,"unread":true,"content":"<p>Usually we would release the new Tryton version 7.8 in November, but this time we <a href=\"https://discuss.tryton.org/t/postpone-the-release-of-series-7-8-by-one-month/8899\">postpone the release</a>. In the last month we focused on fixing bugs, improving the behaviour of things, speeding-up performance issues - building on the changes from <a href=\"https://discuss.tryton.org/t/tryton-release-7-2/\">our last release</a>. We also added some new features which we would like to introduce to you in this newsletter.</p><h3>Sales, Purchases and Projects</h3><h3>Accounting, Invoicing and Payments</h3><h3>System Data and Configuration</h3>\nPlease update your systems to take care of a security related bug we found last month: \n\n  <h2>Changes for Implementers and Developers</h2>","contentLength":578,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Your Startup Is Dying While You Debate Django vs FastAPI","url":"https://dev.to/sizan_mahmud0_e7c3fd0cb68/your-startup-is-dying-while-you-debate-django-vs-fastapi-2hcp","date":1761980131,"author":"sizan mahmud0","guid":323918,"unread":true,"content":"<h2>\n  \n  \n  90% of SaaS Projects Fail Because Developers Can't Stop Overthinking\n</h2><p>Let me tell you a hard truth: <strong>Your project isn't failing because you chose the wrong framework. It's failing because you're still choosing.</strong></p><p>I've watched brilliant developers spend three months debating whether to use Django or FastAPI. I've seen teams rewrite entire codebases switching from monolith to microservices before getting their first customer. I've witnessed startups collapse under the weight of features nobody asked for.</p><p>The irony? They all thought they were being \"smart\" and \"strategic.\"</p><p>They were just overthinking themselves to death.</p><p>Here's what every developer believes:</p><p><em>\"If I just pick the perfect framework, everything else will fall into place.\"</em></p><p>So you spend weeks researching. You read comparison articles. You watch YouTube tutorials. You ask on Reddit. You create spreadsheets comparing Django vs Laravel vs Spring Boot.</p><p>And you know what all that research gets you?</p><p>Because here's the secret the tech influencers won't tell you: </p><p>Think about it. What's actually different between these frameworks?</p><ul><li> (who cares where your files live?)</li><li> (they all route HTTP requests)</li><li> (different syntax, same concept)</li><li> (all talk to databases)</li></ul><p>That's it. That's the big difference everyone obsesses over.</p><p>You want to build an ERP system? You can do it with:</p><ul></ul><p><strong>All of them work. All of them scale. All of them can make you money.</strong></p><p>The only questions that actually matter:</p><ol><li><strong>Which one do you already know?</strong></li><li><strong>Which one has good community support?</strong></li><li><strong>Which one can you ship fastest with?</strong></li></ol><p>That's it. Three questions. Not three months of research.</p><h2>\n  \n  \n  The Real Question You Should Ask\n</h2><p>Stop asking: <em>\"Which framework is better?\"</em></p><p>Start asking: <em>\"Which framework gets me to market fastest?\"</em></p><p>If you know Python and Django, use Django. If you're comfortable with JavaScript and Express, use Express. If you've built three projects in Laravel, use Laravel.</p><p><strong>Choose the tool you're comfortable with and move on.</strong></p><p>Your users don't care if you built their solution in Django or FastAPI. They care if it solves their problem. They care if it works. They care if you ship it before your competitor does.</p><p>But framework paralysis is just the beginning.</p><p>Once you finally pick a framework, the feature creep starts:</p><p><em>\"We might need multi-currency support in the future...\"</em><em>\"What if we expand to mobile later?\"</em><em>\"Should we build an AI recommendation engine now?\"</em><em>\"Users might want dark mode...\"</em></p><p><strong>Build what users need TODAY. Not what they might need in 2027.</strong></p><p>I've seen it a hundred times. A startup spends eight months building the \"perfect\" product with every imaginable feature. They launch with pride, expecting applause.</p><p>Nobody uses 80% of the features. Turns out, users just needed a simple way to track invoices. Everything else was developer fantasy.</p><p>Your users have actual problems right now. They need solutions right now. They don't care about your:</p><ul><li>Perfectly architected microservices</li><li>Cutting-edge framework choice</li><li>Scalable-to-a-billion-users infrastructure</li></ul><p>They care about solving their immediate pain point.</p><p>Build that. Ship that. Get feedback. Iterate.</p><p>Everything else is procrastination dressed up as \"best practices.\"</p><h2>\n  \n  \n  The Monolith vs Microservices Trap\n</h2><p>Here comes my favorite time-waster: the architecture debate.</p><p><em>\"Should we build a monolith or microservices?\"</em></p><p><strong>Start with a monolith. Period.</strong></p><p>\"But what about scaling?\" you ask.</p><p><strong>You don't have scaling problems. You have zero customers.</strong></p><p>Here's how it actually works:</p><ol><li>When traffic actually becomes a problem (not when you imagine it might), then consider microservices</li></ol><p>You know who uses monoliths? Shopify handled billions in sales on a Rails monolith for years. Stack Overflow runs on a monolith. Basecamp built a $100M business on a monolith.</p><p>You know who needs microservices from day one? Almost nobody.</p><p>Microservices are a solution to problems you don't have yet. They add complexity, deployment overhead, debugging nightmares, and network latency. All to solve scaling issues you'll face when you have thousands of concurrent users.</p><p><strong>You have zero users. Build the monolith.</strong></p><p>Let me share something that should terrify you:</p><p><strong>90% of SaaS projects never make it to profitability.</strong></p><p>It's not because they chose the wrong framework. It's not because they didn't build microservices. It's not because they missed a feature.</p><p><strong>They failed because they never shipped.</strong></p><p>They overthought. They over-engineered. They over-planned. They built features nobody wanted. They rewrote code that already worked. They optimized for problems they didn't have.</p><p>Meanwhile, their competitors shipped a basic MVP in six weeks, got real users, learned what actually mattered, and iterated.</p><h2>\n  \n  \n  The Path to Success Is Embarrassingly Simple\n</h2><p>Here's the formula successful developers follow:</p><h3>\n  \n  \n  1. Pick a Framework (Take 1 Day, Not 1 Month)\n</h3><ul><li>Don't know any? Pick the one with the most Stack Overflow answers.</li></ul><h3>\n  \n  \n  2. Build Only What's Required (Take 4-6 Weeks)\n</h3><ul><li>Talk to 5 potential users</li><li>List their top 3 pain points</li><li>Build solutions for those 3 things</li></ul><ul></ul><h3>\n  \n  \n  4. Get Feedback (Ongoing)\n</h3><ul><li>Real users tell you what actually matters</li><li>They'll request features you never considered</li><li>They'll ignore features you thought were essential</li></ul><ul><li>Remove what they don't use</li></ul><p>Notice what's not in this formula?</p><ul><li>Endless framework comparisons</li><li>\"Future-proof\" architecture</li></ul><p>You're not overthinking because you're thorough. You're overthinking because you're scared.</p><p>Scared to ship something imperfect. Scared of criticism. Scared of failure.</p><p>So you hide behind \"research\" and \"best practices\" and \"doing it right.\"</p><p>But here's the thing: <strong>Done beats perfect. Every. Single. Time.</strong></p><p>That imperfect product you ship today teaches you more than six months of planning ever will. Those early users with complaints? They're giving you a roadmap to success.</p><h2>\n  \n  \n  Start Today, Not Tomorrow\n</h2><p>Stop debating frameworks. Stop planning features users haven't requested. Stop designing for traffic you don't have.</p><p>Choose a framework you know. Build the core feature. Ship it this month.</p><p>Will it be perfect? No.<p>\nWill it scale to a million users? Probably not yet.</p><p>\nWill it have every feature you imagine? Definitely not.</p></p><p>Will it be REAL? Yes.<p>\nWill it get you FEEDBACK? Yes.</p><p>\nWill it teach you what users ACTUALLY want? Absolutely.</p></p><p>And that's worth more than all the perfect architecture in the world.</p><p>Close this tab. Open your code editor. Pick a framework—any framework you're comfortable with. Write the first 100 lines of code today.</p><p>Not tomorrow. Not after you finish that comparison article. Not after you watch one more tutorial.</p><p>Your future successful self will thank you for starting. Your overthinking current self will thank you for stopping.</p><p>The best time to start was yesterday. The second best time is right now.</p><p><em>What's the biggest thing you're overthinking right now? Share in the comments—let's call out our collective analysis paralysis together.</em></p>","contentLength":6841,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-4ngf","date":1761977281,"author":"Vibe YouTube","guid":323917,"unread":true,"content":"<p>Ever feel like you’re missing out on Python’s coolest tricks? In this vid, Tim breaks down the sleek new match statement for pattern matching, dataclasses to auto-generate your boilerplate, and the sneaky positional-only &amp; keyword-only arguments that keep your APIs clean.</p><p>He also serves up a sweet Brilliant link (free access + 20% off premium) and plugs his DevLaunch mentorship—real-world projects, no fluff, and job-hunting hacks.</p>","contentLength":439,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Biggest Challenge in #80DaysOfChallenges… is a Lack of Challenges","url":"https://dev.to/shahrouzlogs/the-biggest-challenge-in-80daysofchallenges-is-a-lack-of-challenges-2m3","date":1761975433,"author":"Shahrouz Nikseresht","guid":323916,"unread":true,"content":"<p>For the past several weeks, I’ve been running a personal project called , a self-imposed journey to write one small .</p><p>Each challenge is designed to practice logic, algorithms, and clean code, not big frameworks, just pure problem-solving in its simplest form.\nFrom string manipulation and recursion to small dynamic-programming problems, each day has been a chance to learn something new and share it publicly.</p><p>The goal of this project is simple: <strong>consistency through curiosity.</strong>\nInstead of passively consuming tutorials, I wanted to actively  small, self-contained solutions, each one just 5–50 lines long, neatly commented, and focused on one concept at a time.</p><p>Over time, this approach has helped me:</p><ul><li>Strengthen algorithmic thinking</li><li>Write cleaner and more expressive code</li><li>Understand the  behind basic concepts like loops, lists, and recursion</li><li>Gain confidence in solving problems from scratch</li></ul><p>It’s been a rewarding experience, but also one with an unexpected twist.</p><h2>\n  \n  \n  ⚡ The Challenge of Running Out of Challenges\n</h2><p>Here’s the irony: after twenty days of continuous practice, the hardest part now isn’t solving problems…\nIt’s </p><p>The biggest challenge I’m facing right now, truly, is a  😅\nI’ve gone through many beginner-level ideas already, and I’d love to expand the pool with <strong>fresh, creative suggestions</strong> from the community.</p><p>If you enjoy thinking up interesting Python exercises, I’d love your help!\nI’m especially looking for small but meaningful ideas, the kind that test your brain a little without turning into a full-blown project.</p><p>Here’s how you can contribute:</p><ul><li>💬  Share a challenge idea right here on dev.to, simple, tricky, or even slightly weird ones welcome!</li><li>🐍  Suggest a new Python challenge in the repo, it could be algorithmic, logical, or just a fun creative prompt.\n<a href=\"https://github.com/Sherouz/80-days-of-challenges/issues\" rel=\"noopener noreferrer\">👉 Open an Issue Here</a></li></ul><p>Every idea will be credited in the repository and future dev.to posts.\nYour challenge might become  (or Day 42 if it’s extra spicy).</p><p>Coding alone is fun, but  is where growth multiplies.\nEvery comment, suggestion, or question becomes part of the journey, not just mine, but everyone following along.<p>\nThis small project has already helped me connect with other learners, and I’d love to turn it into a mini open-source learning lab where we build, share, and teach together.</p></p><p>So…\nIf you’ve got a neat Python challenge idea, from simple loops to mini algorithm puzzles, drop it below or open an issue.<p>\nLet’s make the next 60 days even more creative than the first 20.</p></p>","contentLength":2502,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"🧩 How to Structure a FastAPI Project the Right Way","url":"https://dev.to/1amkaizen/how-to-structure-a-fastapi-project-the-right-way-4ho4","date":1761975149,"author":"Zaenal Arifin","guid":323904,"unread":true,"content":"<p>When you first start with , it’s tempting to throw everything into a single file — and it works fine… until your app grows. Then suddenly, your codebase becomes spaghetti.</p><p>In this post, we’ll go through how to <strong>structure a FastAPI project properly</strong>, using clean architecture principles that scale easily.</p><h2>\n  \n  \n  🚀 Why Project Structure Matters\n</h2><p>A good structure makes your project:</p><ul><li>Easier to  and .</li><li>Easier for  to understand.</li><li>Ready for , , and .</li></ul><p>If your FastAPI project looks like this:</p><div><pre><code>main.py\nmodels.py\nroutes.py\nschemas.py\ndatabase.py\n</code></pre></div><p>…it’s time for an upgrade.</p><h2>\n  \n  \n  🏗️ Recommended Folder Structure\n</h2><p>Here’s a clean, production-ready structure I use for real projects:</p><div><pre><code>app/\n├── api/\n│   ├── routes/\n│   │   ├── users.py\n│   │   ├── items.py\n│   │   └── __init__.py\n│   ├── deps.py\n│   ├── __init__.py\n│   └── api_v1.py\n├── core/\n│   ├── config.py\n│   ├── security.py\n│   └── __init__.py\n├── db/\n│   ├── base.py\n│   ├── session.py\n│   └── __init__.py\n├── models/\n│   ├── user.py\n│   ├── item.py\n│   └── __init__.py\n├── schemas/\n│   ├── user.py\n│   ├── item.py\n│   └── __init__.py\n├── services/\n│   ├── user_service.py\n│   └── __init__.py\n├── main.py\n└── __init__.py\n</code></pre></div><p>Contains global configurations — environment variables, security settings, and constants.</p><div><pre><code></code></pre></div><p>Handles all database setup — connection, session management, and base models.</p><div><pre><code></code></pre></div><p>Organize endpoints by domain — one file per feature.</p><div><pre><code></code></pre></div><p>Business logic lives here — keep it separate from routes.</p><div><pre><code></code></pre></div><p>The entry point that ties everything together.</p><div><pre><code></code></pre></div><h2>\n  \n  \n  🧠 Tips for Scalable FastAPI Projects\n</h2><p>✅ Use  for input/output validation\n✅ Split logic into  — routes, services, models\n✅ Use  for clean imports\n✅ Add  early — don’t debug with \n✅ Separate  from code</p><p>I’ve uploaded an example of this structure here:\n👉 GitHub - fastapi-clean-structure </p><p>You can clone it, install dependencies, and start your app in seconds:</p><div><pre><code>git clone https://github.com/yourusername/fastapi-clean-structure.git\nfastapi-clean-structure\npoetry poetry run uvicorn app.main:app </code></pre></div><p>Clean project structure isn’t just about being “organized” — it’s about  your codebase.\nFastAPI makes things fast, but structure makes them .</p><p>If you found this useful, drop a ❤️ or follow me — I post about <strong>Python, FastAPI, and backend architecture</strong> regularly.</p>","contentLength":2524,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"🚀 Deploying a FastAPI Project to an Ubuntu VPS — A Complete Guide for Developers","url":"https://dev.to/1amkaizen/deploying-a-fastapi-project-to-an-ubuntu-vps-a-complete-guide-for-developers-392","date":1761974698,"author":"Zaenal Arifin","guid":323903,"unread":true,"content":"<p>As an independent developer, I often get asked: how do you deploy a Python project to a VPS so it runs automatically and stays stable?</p><p>Well, in this article, I’ll walk you through step-by-step how to host a FastAPI project (or a Python bot) on an Ubuntu VPS — complete with systemd, Nginx, and SSL setup.</p><p>If you’ve been coding backend projects for a while, chances are you want your project to be accessible online — whether it’s an API, a bot, or a web dashboard.</p><p>A VPS (Virtual Private Server) gives you:</p><ul><li>Full freedom (root access)\n</li><li>Ability to install anything (Python, Docker, etc.)\n</li><li>Faster and more stable than shared hosting\n</li></ul><p><p>\n👉 DigitalOcean, Vultr, Linode, Hetzner, or HostHatch.</p></p><p>Log in to your VPS using SSH:</p><p>Then update the system and install basic packages:</p><div><pre><code>sudo apt update &amp;&amp; sudo apt upgrade -y\nsudo apt install python3 python3-venv python3-pip git nginx ufw -y\n</code></pre></div><div><pre><code>adduser ubuntu\nusermod -aG sudo ubuntu\n</code></pre></div><div><pre><code>ufw allow OpenSSH\nufw allow 'Nginx Full'\nufw enable\n</code></pre></div><h2>\n  \n  \n  3. Clone Project to the Server\n</h2><p>Go to a safe directory to store your source code:</p><div><pre><code>cd /opt\nsudo git clone https://github.com/username/project.git\nsudo chown -R ubuntu:ubuntu project\ncd project\n</code></pre></div><p>If you’re using , install it first:</p><div><pre><code>curl -sSL https://install.python-poetry.org | python3 -\nexport PATH=\"$HOME/.local/bin:$PATH\"\npoetry install --no-root\n</code></pre></div><div><pre><code>python3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n</code></pre></div><h2>\n  \n  \n  4. Run the Project Manually (Test)\n</h2><p>Test your project manually first:</p><div><pre><code>poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000\n</code></pre></div><div><pre><code>venv/bin/uvicorn app.main:app --host 0.0.0.0 --port 8000\n</code></pre></div><p>Then open your browser:\n👉 </p><p>If you see the FastAPI default page — it’s running fine.</p><h2>\n  \n  \n  5. Create a Systemd Service\n</h2><p>To make the project auto-start on VPS reboot and manageable via .</p><p>Create a new service file:</p><div><pre><code>sudo vim /etc/systemd/system/fastapi.service\n</code></pre></div><div><pre><code>[Unit]\nDescription=FastAPI Application\nAfter=network.target\n\n[Service]\nUser=ubuntu\nWorkingDirectory=/opt/project\nExecStart=/home/ubuntu/.local/bin/poetry run uvicorn app.main:app --host 127.0.0.1 --port 8000\nRestart=always\nEnvironment=\"PATH=/home/ubuntu/.local/bin:/usr/bin\"\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></div><div><pre><code>sudo systemctl daemon-reload\nsudo systemctl enable fastapi\nsudo systemctl start fastapi\nsudo systemctl status fastapi\n</code></pre></div><p>If the status shows  — everything’s good.</p><p>💡 Use  to view real-time logs.</p><h2>\n  \n  \n  6. Configure Nginx (Reverse Proxy)\n</h2><p>This allows your app to be accessed via port 80/443 (HTTP/HTTPS).</p><p>Create a new config file:</p><div><pre><code>sudo vim /etc/nginx/sites-available/fastapi\n</code></pre></div><div><pre><code>server {\n    server_name yourdomain.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n}\n</code></pre></div><div><pre><code>sudo ln -s /etc/nginx/sites-available/fastapi /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl restart nginx\n</code></pre></div><p>Now open your browser:\n👉 </p><p>If it loads correctly — your setup is complete.</p><h2>\n  \n  \n  7. Install Free SSL (Let’s Encrypt)\n</h2><div><pre><code>sudo apt install certbot python3-certbot-nginx -y\nsudo certbot --nginx -d yourdomain.com\n</code></pre></div><p>SSL will be automatically installed and Nginx updated to HTTPS.</p><div><pre><code>sudo systemctl reload nginx\n</code></pre></div><div><pre><code>curl -I https://yourdomain.com\n</code></pre></div><div><pre><code>sudo journalctl -u fastapi -f\n</code></pre></div><p>Restart service after code updates:</p><div><pre><code>sudo systemctl restart fastapi\n</code></pre></div><h2>\n  \n  \n  9. Extra Tips for Developers\n</h2><ul><li>Use  to keep manual sessions running.</li><li>Add auto-deploy via Git hook:\n</li></ul><div><pre><code>  git pull &amp;&amp; sudo systemctl restart fastapi\n</code></pre></div><ul><li>Save logs to a custom file in .</li><li>If you run multiple projects, create separate systemd services for each.</li><li>Use  to secure SSH and Nginx.</li></ul><ul><li>Is secure, auto-started, and SSL-ready</li><li>Can be redeployed easily with </li></ul><p>With this setup, you can professionally and efficiently deploy backends, Telegram bots, or internal APIs.</p><p>In the next article, I’ll cover <strong>auto-deploy CI/CD using GitHub Actions</strong> directly to your VPS — stay tuned!</p><p>💬 <strong>Bonus: Quick Multi-App systemd Template</strong></p><p>If you have multiple projects (e.g., a bot and a web app):</p><div><pre><code>sudo vim /etc/systemd/system/telegram-bot.service\nsudo vim /etc/systemd/system/fastapi.service\n</code></pre></div><p>Each can auto-run and be monitored with:</p><div><pre><code>sudo systemctl status telegram-bot\nsudo systemctl status fastapi\n</code></pre></div>","contentLength":4217,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Revealing the Unseen: AI-Powered Super-Resolution from Extreme Noise by Arvind Sundararajan","url":"https://dev.to/arvind_sundararajan/revealing-the-unseen-ai-powered-super-resolution-from-extreme-noise-by-arvind-sundararajan-5b4g","date":1761973326,"author":"Arvind SundaraRajan","guid":323902,"unread":true,"content":"<p>Ever tried to enhance a blurry photo, only to end up with a pixelated mess? Or struggled to extract useful information from grainy security footage? The problem isn't just the low resolution, it's often the overwhelming noise that buries the details we need to see.</p><p>That's where a new breed of AI is changing the game. Imagine an algorithm that can not only upscale an image but also intelligently filter out the noise, reconstructing high-resolution details from seemingly hopeless sources. It's like having a detective who can piece together a shattered vase, even with half the fragments missing. This is achieved using a data-driven prior, learning how real-world structures  look, even when the input data is a cacophony of visual static. </p><p>The core concept is a generative modeling technique that iteratively refines a low-resolution image towards a high-resolution target, guided by learned data patterns. This process accounts for the uncertainty inherent in reconstructing missing information, resulting in sharper, more realistic results.</p><ul><li> Handles extremely noisy and degraded images other methods fail on.</li><li> Recovers intricate details lost to low resolution and noise.</li><li> Generates perceptually pleasing high-resolution images, avoiding artificial artifacts.</li><li> Provides pixel-level confidence scores, highlighting areas of uncertainty.</li><li> Drastically enhances the clarity and usability of low-quality images.</li><li> Accelerated processing for faster prototyping and development.</li></ul><p> When implementing, pay close attention to the training dataset. The algorithm's performance relies heavily on the quality and diversity of the data it learns from. Start with high-quality, diverse datasets, and consider augmentation techniques to simulate different types of noise.</p><p>Imagine enhancing historical photographs to reveal lost details or improving medical scans for more accurate diagnoses. This technology has potential to revolutionize many fields, and even assist in creative endeavors like AI-assisted art restoration, filling in areas where paint has crumbled away. By learning from vast amounts of data, it allows us to see the world with clarity where before there was only noise.</p><p> Super Resolution, Image Enhancement, Noise Reduction, Image Restoration, Deep Learning, Generative Models, Conditional Flow, Flow Matching, Diffusion Models, Image Processing, Computer Vision, AI, Machine Learning, Python, Image Reconstruction, Denoising, Low-Resolution Images, High-Resolution Images, Medical Imaging, Satellite Imagery, AI Art, Generative Adversarial Networks, GANs, Real-ESRGAN, SwinIR</p>","contentLength":2572,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 21: Turn-Based FizzBuzz Game – Player vs Machine in Python","url":"https://dev.to/shahrouzlogs/day-21-turn-based-fizzbuzz-game-player-vs-machine-in-python-314c","date":1761972780,"author":"Shahrouz Nikseresht","guid":323890,"unread":true,"content":"<p>Welcome to Day 21 of the  journey! Today’s beginner-to-intermediate challenge is a <strong>turn-based FizzBuzz game between you and the computer</strong>, built with  loops, string comparison, and alternating turns. This isn’t just another FizzBuzz script; it’s a  that practices user input, validation, and game flow. If you’re looking for a fun way to level up your loop and conditional skills, this “Python FizzBuzz game” is the perfect playground!</p><h2>\n  \n  \n  💡 Key Takeaways from Day 21: Interactive FizzBuzz Duel\n</h2><p>The game starts at 1 and counts upward, alternating between  and the . Each turn requires the correct FizzBuzz output:</p><ul><li> for multiples of both</li></ul><p>It even accepts : , , . The game ends if you make a mistake or type . Let’s break down the core pieces: , , and .</p><h3>\n  \n  \n  1. Smart Answer Generation: The  Function\n</h3><p>The  function returns  for a given number:</p><div><pre><code></code></pre></div><p>This function is flexible and user-friendly, accepting case variations and shortcuts. For example, at 15, it allows <code>[FizzBuzz, FB, fizzbuzz, fb]</code>. Using a list makes validation clean and lets players type  or  and still win. A small function with big impact on gameplay.</p><h3>\n  \n  \n  2. Turn Management:  Loop +  Toggle\n</h3><p>The game runs in an infinite  loop, switching turns with a boolean flip:</p><div><pre><code></code></pre></div><p>The machine <strong>always says the correct answer</strong> (), while you must match it. This alternating structure creates real back-and-forth tension and makes the loop feel alive.</p><h3>\n  \n  \n  3. Interactive Feedback: Emojis, Messages &amp; Separators\n</h3><p>Each turn comes with clear prompts and expressive feedback:</p><div><pre><code></code></pre></div><p>Using  cleans input, and a list comprehension compares it safely. The  function adds visual breathing room:</p><p>Finally, the game ends with a clean summary:</p><div><pre><code></code></pre></div><h2>\n  \n  \n  🎯 Summary and Reflections\n</h2><p>This FizzBuzz game proved that a  can teach  in <strong>loops, user input, and UX design</strong>. It made me think about:</p><ul><li>: Shortcuts and case-insensitivity = better player experience.</li><li>:  +  + boolean toggle = smooth turn logic.</li><li>: Emojis and separators turn dry code into a real game.</li></ul><p>The fun moment? When the machine calmly says the right answer while you fumble, real competition! For extensions, I’d add , , or .</p><p>: Use  for FizzBuzz logic, or add color with . How do you build interactive games? Share your ideas below!</p><h2>\n  \n  \n  🚀 Next Steps and Resources\n</h2><p>Day 21 pulled me into the world of interactive games and sharpened my loop and input skills. If you're on the #80DaysOfChallenges ride, did you mod the game? Add new shortcuts? Show your code!</p><p>Onward to Day 22 - ready for more algorithms!</p>","contentLength":2503,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-343n","date":1761970038,"author":"Vibe YouTube","guid":323889,"unread":true,"content":"<p>Tim covers three neat Python tricks you’ve probably never seen in the wild — the new  statement for pattern matching, sleek  to ditch boilerplate, and the power combo of positional-only vs. keyword-only arguments to design crystal-clear APIs.</p><p>He also hooks you up with free Brilliant coding puzzles (plus 20% off premium) and pitches his DevLaunch mentorship program to help you build real projects and land that dream job.</p>","contentLength":426,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Hacktoberfest Recap","url":"https://dev.to/kphero/hacktoberfest-recap-218n","date":1761965718,"author":"Kyle Homen","guid":323901,"unread":true,"content":"<p>It was a busy October, and while I didn't reach the Hacktoberfest goal, I did reach my personal goals (and to be honest, the sooner I abandoned Hacktoberfest the better).</p><p>The first week, I contributed to the <a href=\"https://github.com/hiero-ledger/hiero-sdk-python\" rel=\"noopener noreferrer\">Hiero SDK</a>, which was a beginner friendly issue designed to help newcomers contribute for the first time. This contributing taught me how to follow a , and how to set up a GPG key to sign my commits.</p><p>The second week, I contributed to <a href=\"https://github.com/sumanth-0/100LinesOfPythonCode\" rel=\"noopener noreferrer\">100LinesOfPythonCode</a>, where I wrote a short 100 line text game. This was one that I wish I could do over, as it wasn't something that furthered my goals or gained me any experience, but it allowed me to open up about my interests when I presented my work in class, and I gained useful insight from my professor about what I should be focusing on contributing to.</p><p>This is where I abandoned the Hacktoberfest tag and just went rogue, looking for projects on my own that I wanted to contribute to. This actually opened up the field significantly and it took me no time at all to find a brand new project called <a href=\"https://github.com/HouZenKai/ShooterCarnival/tree/main\" rel=\"noopener noreferrer\">ShooterCarnival</a>, a grass roots project aiming to create a game using the Godot game engine. This project introduced me to Godot, and the custom programming language used in it called GDScript, which was easy to pick up on as it's very similar to Python. This was my first time contributing to a game project, and the maintainers were excited to have me and gave me a lot of great feedback.</p><p>Around this time I had my eye on the <a href=\"https://github.com/wesnoth/wesnoth\" rel=\"noopener noreferrer\">wesnoth</a> project, and had found an issue to work on that I spent time with, researching the codebase, learning how to compile the source code into a working game file. By the time I had done all that, someone had swooped in and done the PR, one that had been sitting untouched since August. This one hurt, as it would have been a great addition to my Release 0.2, but I took it on the chin and will hopefully use the knowledge I gained to contribute to wesnoth in the future.</p><p>Finally, I turned my focus not to just contributing to a game itself, but the game engine that made it possible. After being introduced to Godot, I went straight to their <a href=\"https://github.com/godotengine/godot\" rel=\"noopener noreferrer\">github</a> to see if there was anything I could do to contribute. Crazy enough, there was thousands of issues open, but nothing labelled for first timers. I just took on the first thing I thought I could help with, and it turned out to be an easy fix, but if it gets merged I'll still feel incredible being able to help contribute to something this cool.</p><p>In the end, I walk away from this experience with a renewed confidence, and with an eye on several interesting projects that I plan to continue to contribute to in the future.</p>","contentLength":2642,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-2k80","date":1761962944,"author":"Vibe YouTube","guid":323852,"unread":true,"content":"<p>Tech With Tim walks you through three modern Python features you’ve probably never used but really should: the new  statement for pattern matching, the handy  decorator to cut down boilerplate, and the trick of enforcing positional-only or keyword-only arguments for cleaner APIs.</p><p>He also plugs a 20% off Brilliant Premium deal for free problem-solving practice and his DevLaunch mentorship program to help you build real projects and land a job.</p>","contentLength":447,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Dictionary in Python (5)","url":"https://dev.to/hyperkai/dictionary-in-python-5-3ooo","date":1761962615,"author":"Super Kai (Kazuya Ito)","guid":323851,"unread":true,"content":"<p>A dictionary and other dictionary can be checked if only all the keys or both all the keys and values in:</p><ul><li>the dictionary are in other dictionary with .</li><li>the dictionary and only other keys or both other keys and values are in other dictionary with .</li><li>other dictionary are in the dictionary with .</li><li>other dictionary and only other keys or both other keys and values are in the dictionary with .</li></ul><ul><li>Only all the values cannot be checked.</li><li> and  work for all , ,  and .</li><li> and  get error for all , ,  and .</li></ul><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>A dictionary and other dictionary can be checked if they have and don't have only their common keys or both their common keys and values with  and  and with  keyword and  respectively as shown below:</p><ul><li>Only their common values cannot be checked.</li><li> and  work.</li><li> and  get error.</li></ul><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div>","contentLength":755,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Async Iterator Part 2: Streaming Data and Real-World Patterns","url":"https://dev.to/aaron_rose_0787cc8b4775a0/the-async-iterator-part-2-streaming-data-and-real-world-patterns-kdj","date":1761959776,"author":"Aaron Rose","guid":323829,"unread":true,"content":"<p>The next morning, Timothy arrived at the library early, eager to apply what he'd learned about async iteration. He'd spent the evening refactoring his log analyzer, and now he wanted to tackle something more ambitious: building a real-time dashboard that streamed library statistics.</p><p>\"Margaret, I've got async iteration working,\" Timothy said, pulling up his screen. \"But now I'm trying to do something practical, and I keep running into problems.\"</p><p>Margaret looked over with interest. \"Show me what you're working on.\"</p><p>Timothy pulled up his code:</p><div><pre><code></code></pre></div><p>\"This works,\" Timothy said, \"but it feels clunky. I'm writing the same pattern over and over—create a list, iterate, append. There must be a better way.\"</p><p>Margaret smiled. \"There is. Let me introduce you to async comprehensions.\"</p><h2>\n  \n  \n  Async Comprehensions: Syntactic Sugar for Async Iteration\n</h2><p>\"Remember list comprehensions?\" Margaret asked, typing:</p><div><pre><code></code></pre></div><p>\"Of course,\" Timothy said. \"They're more elegant than building lists with loops.\"</p><p>\"Async comprehensions are the same concept, but for async iterators,\" Margaret explained. She refactored his code:</p><div><pre><code></code></pre></div><div><pre><code>Old way:\n  Got 5 checkouts\n\nNew way:\n  Got 5 checkouts\n</code></pre></div><p>\"Just add  before the !\" Timothy said. \"That's much cleaner.\"</p><p>\"Right. The syntax is <code>[expr async for item in async_iterator]</code>,\" Margaret said. \"You can also use filtering:\"</p><div><pre><code></code></pre></div><div><pre><code>Overdue books: ['Async Patterns', 'Algorithms']\n</code></pre></div><p>\"You can filter right in the comprehension!\" Timothy said.</p><h2>\n  \n  \n  All Three Comprehension Types\n</h2><p>Margaret showed him the complete picture:</p><div><pre><code></code></pre></div><div><pre><code>List: [0, 10, 20, 30, 40]\nSet: {'even', 'odd'}\nDict: {0: 0, 1: 10, 2: 20, 3: 30, 4: 40}\n</code></pre></div><p>\"Just like regular comprehensions,\" Margaret explained, \"you have list, set, and dict versions. The syntax is always  inside the comprehension.\"</p><p>She wrote out the patterns:</p><div><pre><code>Async Comprehension Syntax:\n\nList:  [expr async for item in async_iter]\nSet:   {expr async for item in async_iter}\nDict:  {key: val async for item in async_iter}\n\nWith filtering:\n[expr async for item in async_iter if condition]\n\nRegular comprehensions:  for item in iter\nAsync comprehensions:    async for item in async_iter\n                         ^^^^^ just add async!\n</code></pre></div><h2>\n  \n  \n  When NOT to Use Async Comprehensions\n</h2><p>\"One warning,\" Margaret said. \"Async comprehensions build the entire result in memory. If you're processing a huge stream of data, this can be a problem.\"</p><div><pre><code></code></pre></div><p>\"The comprehension forces you to wait for all data before processing,\" Margaret explained. \"Sometimes you want that—when you need the complete dataset. But for large streams, iterate directly with .\"</p><p>Timothy nodded. \"So comprehensions are for collecting finite datasets, but direct iteration is for processing streams.\"</p><p>\"Exactly. Think about it like regular Python: you wouldn't load a 10GB file into a list comprehension. Same principle applies here.\"</p><h2>\n  \n  \n  Real Async File I/O with aiofiles\n</h2><p>\"Let's move to something more practical,\" Margaret said. \"In Part 1, I mentioned that Python's built-in  blocks the event loop. Let me show you the real solution.\"</p><p>She opened a terminal and typed:</p><div><pre><code></code></pre></div><div><pre><code>Setting up demo file...\nReading with async I/O...\n[Background task 0]\n  Line 1\n  Line 2\n[Background task 1]\n  Line 3\n[Background task 2]\n</code></pre></div><p>\"See how the background task runs  file reading?\" Margaret pointed out. \"With regular , the entire event loop would block on the file I/O, and the background task couldn't run until reading was complete.\"</p><p>\"The key differences,\" she continued, typing out a comparison:</p><div><pre><code>Regular File I/O vs Async File I/O:\n\nRegular (blocks event loop):\n    with open(path, 'r') as f:\n        for line in f:\n            process(line)\n\nAsync (cooperates with event loop):\n    async with aiofiles.open(path, 'r') as f:\n        async for line in f:\n            await process(line)\n\nDifferences:\n1. async with instead of with\n2. aiofiles.open() instead of open()\n3. async for instead of for\n4. Can await inside the loop\n</code></pre></div><h2>\n  \n  \n  Async Context Managers + Async Iteration\n</h2><p>Timothy studied the code. \"I see  and  together. How does that work?\"</p><p>\"Great observation,\" Margaret said. \"Let me explain async context managers first, then show how they combine with async iteration.\"</p><div><pre><code></code></pre></div><div><pre><code>  Opening database connection...\nInside async with block\nGot 3 results\n  Closing database connection...\nOutside async with block - connection closed\n</code></pre></div><p>\"An async context manager uses  and must define  and  as coroutines,\" Margaret explained. \"It's like a regular context manager, but async.\"</p><div><pre><code>Regular Context Manager:\n    with resource():\n        use()\n    # Cleanup happens here\n\nAsync Context Manager:\n    async with resource():\n        await use()\n    # Async cleanup happens here\n\nBoth guarantee cleanup, but async version can await during setup/teardown\n</code></pre></div><h2>\n  \n  \n  Combining Async Context Managers with Async Iteration\n</h2><p>\"Now here's where it gets powerful,\" Margaret said. \"You can combine  and  for safe streaming.\"</p><div><pre><code></code></pre></div><div><pre><code>  Opening cursor...\nFetching books:\n  Book 0\n  Book 1\n  Book 2\n  Book 3\n  Book 4\n  Closing cursor...\nCursor automatically closed\n</code></pre></div><p>\"This pattern is incredibly common with databases,\" Margaret said. \"The cursor is both a context manager (for resource cleanup) and an async iterator (for fetching rows).\"</p><p>Timothy was impressed. \"So  ensures the cursor gets closed, and  streams the results?\"</p><p>\"Exactly. Even if an error occurs during iteration,  will be called to clean up the cursor.\"</p><h2>\n  \n  \n  Error Handling in Async Iteration\n</h2><p>\"Speaking of errors,\" Timothy said, \"what happens if an async iterator fails partway through?\"</p><p>\"Excellent question,\" Margaret said. \"Let me show you.\"</p><div><pre><code></code></pre></div><div><pre><code>Processing with error handling:\n  Processing: Record 0\n  Processing: Record 1\n  Processing: Record 2\n  ERROR: Database error at record 3\n  Successfully processed 3 records before error\nFinished (processed 3 records)\n</code></pre></div><p>\"The  loop stops when an exception is raised,\" Margaret explained. \"You handle it the same way as regular iteration—with try/except.\"</p><p>She showed a more robust pattern:</p><div><pre><code></code></pre></div><p>\"This pattern is common for network requests or database queries that might fail transiently,\" Margaret said.</p><p>\"One critical point,\" Margaret added. \"When an exception occurs in an  loop, Python automatically calls  on the generator.\"</p><div><pre><code></code></pre></div><div><pre><code>Demo: Cleanup on error\n  [Generator] Starting\n  Got value: 0\n  Got value: 1\n  [Generator] Cleanup running (finally block)\n  Caught error: Simulated error\nFinished\n</code></pre></div><p>\"See how the  block runs even though we raised an error?\" Margaret pointed out. \"Python ensures cleanup happens. This is why  blocks in generators are perfect for closing files, releasing locks, or cleaning up resources.\"</p><p>\"One important detail,\" Margaret added. \"If your cleanup code needs to  anything—like closing a network connection or flushing a buffer—your generator must be an . The  block can contain  statements because the whole generator is a coroutine.\"</p><div><pre><code></code></pre></div><div><pre><code>  Acquiring resource\n  Got: data\n  Closing resource...\n  Resource closed\n</code></pre></div><p>\"If this were a regular generator ( instead of ), you couldn't use  in the  block,\" Margaret explained. \"The  is what allows the cleanup to be asynchronous.\"</p><p>\"Let's tackle a real-world problem,\" Margaret said. \"Imagine our library has an API that returns paginated results. You want to iterate over all books, but the API only gives you 10 at a time.\"</p><div><pre><code></code></pre></div><div><pre><code>Fetching all books via pagination:\n  Book 0\n  Book 1\n  Book 2\n  ...\n  Book 33\n  Book 34\n\nTotal books fetched: 35\n</code></pre></div><p>\"The consumer doesn't know about pagination,\" Margaret explained. \"They just use  and get all the books. The generator handles the complexity of fetching multiple pages.\"</p><p>Timothy grinned. \"That's way cleaner than managing page numbers in the calling code.\"</p><p>\"Right. This is a common pattern for REST APIs, database queries with cursors, or any paginated data source.\"</p><h2>\n  \n  \n  Buffering and Prefetching\n</h2><p>\"One more advanced pattern,\" Margaret said. \"Sometimes you want to fetch data ahead of time to minimize waiting.\"</p><div><pre><code></code></pre></div><p>\"Buffering can significantly improve throughput when processing slow streams,\" Margaret explained. \"You're essentially pipelining the fetching and processing.\"</p><p>\"This demonstrates the buffering concept,\" Margaret added. \"In production, you might use libraries like  that provide pre-built buffering utilities. But understanding how to build it yourself helps you know what's happening under the hood.\"</p><p>As they wrapped up, Timothy asked, \"How do I test these things? My usual testing approaches don't work with async code.\"</p><p>\"Good question,\" Margaret said. \"Let me show you pytest with async support.\"</p><div><pre><code></code></pre></div><p>\"Install  and mark your tests with ,\" Margaret said. \"Then write tests like normal async functions.\"</p><p>Margaret summarized the patterns they'd covered on a whiteboard:</p><div><pre><code>Async Iterator Patterns:\n\n1. Async Comprehensions\n   [x async for x in source() if condition]\n   - Clean syntax for collecting results\n   - Loads everything into memory\n   - Use for finite datasets\n\n2. Direct Iteration\n   async for x in source():\n       await process(x)\n   - Constant memory usage\n   - Use for large streams\n   - Process one item at a time\n\n3. Context Manager + Iterator\n   async with resource() as r:\n       async for item in r:\n           await process(item)\n   - Guaranteed cleanup\n   - Common with databases, files, connections\n\n4. Pagination Pattern\n   async def paginated():\n       page = 0\n       while True:\n           batch = await fetch(page)\n           if not batch: break\n           for item in batch:\n               yield item\n           page += 1\n   - Hides pagination complexity\n   - Consumer sees flat stream\n\n5. Buffering/Prefetching\n   - Pre-fetch items to minimize waiting\n   - Improves throughput for slow sources\n   - More complex but can be worth it\n\n6. Error Handling\n   try:\n       async for item in source():\n           await process(item)\n   except Exception:\n       # Handle or retry\n   - Same as regular iteration\n   - Cleanup happens automatically\n</code></pre></div><p>Timothy closed his laptop, now equipped with practical patterns for real-world async iteration.</p><p><strong>Async comprehensions provide clean syntax</strong>: Just add  before  in list/set/dict comprehensions.</p><p><strong>Comprehensions load everything into memory</strong>: Use direct  for large streams instead.</p><p><strong>aiofiles provides real async file I/O</strong>: Python's built-in  blocks the event loop.</p><p><strong>async with + async for is a powerful combination</strong>: Context managers ensure cleanup, iterators stream data.</p><p><strong>Async context managers use  and </strong>: Both must be coroutines.</p><p><strong>Error handling works the same as regular iteration</strong>: Use try/except around  loops.</p><p><strong>Python calls aclose() automatically on errors</strong>: Generator cleanup happens even when iteration fails.</p><p><strong>finally blocks can contain await in async generators</strong>: Because the entire generator is a coroutine.</p><p><strong>Pagination pattern hides API complexity</strong>: Consumers see a flat stream, generator handles pages.</p><p><strong>Buffering can improve throughput</strong>: Pre-fetch items to minimize waiting between items.</p><p><strong>Libraries like aiostream provide pre-built patterns</strong>: But building your own helps you understand the mechanics.</p><p><strong>pytest-asyncio enables async test cases</strong>: Mark tests with .</p><p><strong>finally blocks ensure cleanup</strong>: Use them for releasing resources in generators.</p><p><strong>Choose the right pattern for your use case</strong>: Comprehensions for collecting, direct iteration for streaming, buffering for performance.</p><p>Margaret and Timothy had covered the essential patterns for production async iteration. Timothy's dashboard was now streaming library statistics efficiently, his file processing no longer blocked the event loop, and he understood how to handle errors gracefully in async code.</p><p>The library was quiet in the afternoon. As Timothy packed up, he realized that async iteration wasn't just about syntax—it was about choosing the right pattern for each situation, understanding when to collect versus stream, and ensuring resources were properly managed even when things went wrong.</p>","contentLength":11655,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building Spokane Tech: Part 9","url":"https://dev.to/dbslusser/building-spokane-tech-part-9-1p74","date":1761957000,"author":"David","guid":323828,"unread":true,"content":"<p>Welcome to part 9 of the \"Building Spokane Tech\" series! In this article, we'll optimize our Docker file for size and efficiency.</p><h2><strong>Optimizing Your Django Docker Images: The Power of Multi-Stage Builds</strong></h2><p>At SpokaneTech.org, we're always looking for ways to improve our development and deployment processes. A cornerstone of modern web application deployment is containerization, and for that, we rely on Docker. Docker allows us to package our Django application with all of its dependencies into a single, portable container.</p><p>However, as applications grow, so can the complexity and size of their Docker images. A bloated Docker image can lead to slower deployment times, increased storage costs, and a larger attack surface. Today, we'll explore how we optimized our Docker workflow for our Django project by transitioning from a single-stage to a multi-stage Dockerfile.</p><h2><strong>The Starting Point: A Single-Stage Dockerfile</strong></h2><p>When you first start Dockerizing a project, you'll likely begin with a single-stage Dockerfile. It's straightforward and gets the job done. Here’s what our initial Dockerfile looked like:</p><div><pre><code>FROM python:3.12-slim\n\n# Set environment variables\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\n\n# Set the working directory\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    libglib2.0-0 \\\n    libnss3 \\\n    libx11-xcb1 \\\n    libxcomposite1 \\\n    libxrandr2 \\\n    libxdamage1 \\\n    libgbm1 \\\n    libasound2 \\\n    libpangocairo-1.0-0 \\\n    netcat-openbsd \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nCOPY pyproject.toml /app/\nCOPY src/django_project /app/\n\nRUN chmod +x /app/entrypoint.sh\nRUN pip install --upgrade pip pip-tools\nRUN pip install .[docker]\nRUN playwright install --with-deps\n\n# Expose the port that the app runs on\nEXPOSE 8000\n\nCMD [\"gunicorn\", \"core.wsgi:application\", \"--bind\", \"0.0.0.0:8000\", \"--workers\", \"3\"]\n\n</code></pre></div><p>This Dockerfile works, but it has some significant drawbacks. It installs all our Python dependencies, including development and testing libraries like pip-tools and playwright, directly into the final image. It also includes the system dependencies required to install Playwright's browsers, not just run them. The result is a larger-than-necessary image that contains tools we don't need in a production environment.</p><h2><strong>The Solution: Embracing Multi-Stage Builds</strong></h2><p>A multi-stage build is a powerful feature in Docker that allows you to use multiple FROM statements in a single Dockerfile. Each FROM instruction begins a new \"stage\" of the build. You can selectively copy artifacts—like compiled code or installed packages—from one stage to another, leaving behind everything you don't need.</p><p>Let's look at our new and improved multi-stage Dockerfile:</p><div><pre><code># ====================\n# Stage 1: Builder\n# ====================\nFROM python:3.12-slim AS builder\n\nWORKDIR /app\n\n# Install system dependencies needed for building and running Chromium\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n    libglib2.0-0 libnss3 libx11-xcb1 libxcomposite1 libxrandr2 \\\n    libxdamage1 libgbm1 libasound2 libpangocairo-1.0-0 \\\n    libatk-bridge2.0-0 libgtk-3-0 fonts-liberation libxshmfence1 \\\n    libxcb1 xdg-utils netcat-openbsd \\\n    &amp;&amp; apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install uv (fast dependency resolver) and create virtualenv\nRUN pip install --no-cache-dir uv \\\n    &amp;&amp; python -m venv /venv\n\nENV PATH=\"/venv/bin:$PATH\"\n\n# Copy project dependency definition\nCOPY pyproject.toml /app/\n\n# Install Python dependencies (including Playwright and its deps)\nRUN uv pip install .[docker] --prerelease=allow \\\n    &amp;&amp; playwright install chromium --with-deps\n\n# ====================\n# Stage 2: Runtime\n# ====================\nFROM python:3.12-slim\n\nWORKDIR /app\n\n# Install only necessary system dependencies for Chromium to run\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n    libglib2.0-0 libnss3 libx11-xcb1 libxcomposite1 libxrandr2 \\\n    libxdamage1 libgbm1 libasound2 libpangocairo-1.0-0 \\\n    libatk-bridge2.0-0 libgtk-3-0 fonts-liberation libxshmfence1 \\\n    libxcb1 xdg-utils netcat-openbsd \\\n    &amp;&amp; apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Environment settings\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\nENV PATH=\"/venv/bin:$PATH\"\nENV PLAYWRIGHT_BROWSERS_PATH=/root/.cache/ms-playwright\n\n# Copy the virtual environment and browser binaries from the builder\nCOPY --from=builder /venv /venv\nCOPY --from=builder /root/.cache/ms-playwright /root/.cache/ms-playwright\n\n# Copy Django app code\nCOPY src/django_project /app/\n\n# Make sure entrypoint script is executable\nRUN chmod +x /app/entrypoint.sh\n\n# Expose app port\nEXPOSE 8000\n\n# Entrypoint handles DB wait, migrations, and server start\nCMD [\"./entrypoint.sh\"]\n\n</code></pre></div><p>This Dockerfile is split into two distinct stages:</p><ol><li><p>The builder Stage: This first stage is where the heavy lifting happens. We install all the necessary build tools and system libraries. We use the speedy uv installer to create a virtual environment and install all our Python dependencies. We also download and set up the Playwright browser binaries. This stage is a complete development and build environment.</p></li><li><p>The runtime Stage: This is the stage that will become our final production image. It starts from a fresh, clean python:3.12-slim image. Notice what we copy from the builder stage using the --from=builder flag:</p></li></ol><div><pre><code>- The entire Python virtual environment (/venv).\n\n- The installed Playwright browser (/root/.cache/ms-playwright).\n</code></pre></div><p>We then copy in our application code. The final image contains only our Python environment, browser binaries, our code, and the minimal system dependencies needed to run them—nothing else.</p><h2><strong>The Key Benefits of Going Multi-Stage</strong></h2><p>So, what have we gained from this approach?</p><ul><li><p>Dramatically Smaller Image Sizes: By excluding build tools, -dev packages, and other intermediate files, the final image is significantly smaller. This means faster push/pull times from our container registry, quicker deployments, and reduced storage costs.</p></li><li><p>Enhanced Security: A smaller image has a smaller attack surface. By not shipping our build tools, compilers, or development dependencies, we remove potential vulnerabilities that could be exploited in a production environment.</p></li><li><p>Improved Caching and Faster Builds: Docker is smart about caching layers. In our multi-stage setup, if we only change our application code (src/django_project), Docker can use the cached builder stage without re-installing all the dependencies, speeding up subsequent builds.</p></li><li><p>Cleaner and More Maintainable Dockerfiles: Separating the build and runtime concerns makes the Dockerfile more organized and easier to understand. It clearly communicates what is needed to build the application versus what is needed to run it.</p></li></ul><p>While a single-stage Dockerfile is a great way to get started, adopting a multi-stage build process is a crucial step toward creating professional, production-ready container images. For SpokaneTech.org, this switch has resulted in a more efficient, secure, and streamlined deployment pipeline for our Django application. If you're not already using multi-stage builds, we highly recommend giving them a try!</p>","contentLength":7142,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Title: The Enigma of Life: Astrobiologists' Quest to Define the Unknown","url":"https://dev.to/yagyaraj_sharma_6cd410179/title-the-enigma-of-life-astrobiologists-quest-to-define-the-unknown-ngk","date":1761956741,"author":"Insights YRS","guid":323827,"unread":true,"content":"<h2>\n  \n  \n  Title: The Enigma of Life: Astrobiologists' Quest to Define the Unknown\n</h2><p>In the vast expanse of the cosmos, a question has long puzzled the minds of scientists and laypeople alike: what exactly is \"life\"? Despite our remarkable progress in biological science, including the discovery of DNA's structure, we still lack a definitive answer to this age-old conundrum.</p><p>The quest to define life has been a formidable challenge, with physicist Erwin Schrödinger penning a book titled \"What is Life?\" in 1944. More than 80 years later, the debate continues, with each researcher in the field offering their own unique perspective on the matter.</p><p>Recently, Ryo Harada of Dalhousie University and his team made a fascinating discovery that only adds to the complexity of the issue. They found a microorganism with a genome so small it contains, in essence, only enough genes for its own replication. This archaea, known as Sukunaarchaeum mirabile, lives within another organism and appears to be something between a virus and a bacterium.</p><p>By the traditional dictionary definition, \"life\" requires metabolism, growth, replication, and adaptation to the environment. However, Sukunaarchaeum mirabile challenges this definition, as it lacks some of these key characteristics.</p><p>This discovery raises the question: if life can exist in such a minimal form, what other forms might we find in the universe? Are we truly prepared to accept that life can exist in ways we never imagined?</p><p>As astrobiologists continue their quest to define life, they are faced with a myriad of questions that challenge our understanding of the world around us. From the smallest microorganisms to the vast expanse of the cosmos, the search for life is a journey that will continue to captivate and inspire us for generations to come.</p><p>So, the question remains: what exactly is \"life\"? Only time will tell, but one thing is certain: the quest to answer this enigma will continue to fascinate and challenge us in ways we never thought possible.</p>","contentLength":2006,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Title: Maisa AI Secures $25 Million to Revolutionize Enterprise AI with Accountable Agents","url":"https://dev.to/yagyaraj_sharma_6cd410179/title-maisa-ai-secures-25-million-to-revolutionize-enterprise-ai-with-accountable-agents-2ccm","date":1761956428,"author":"Insights YRS","guid":323826,"unread":true,"content":"<h2>\n  \n  \n  Title: Maisa AI Secures $25 Million to Revolutionize Enterprise AI with Accountable Agents\n</h2><p>Enterprise AI has been a game-changer in many industries, but its potential has been hindered by the high failure rate of 95%. This has led to a lack of trust in AI systems and a need for more accountable agents. Maisa AI, a startup that focuses on building accountable AI agents, has recently secured $25 million in funding to revolutionize enterprise AI.</p><p>Maisa AI's mission is to provide enterprise automation with accountable AI agents that are transparent and explainable. This means that the AI system can provide clear and concise explanations for its decisions, making it easier for humans to understand and trust the system. This is particularly important in industries where decisions made by AI systems can have significant consequences, such as healthcare and finance.</p><p>The Benefits of Accountable AI Agents:</p><p>The benefits of accountable AI agents are numerous. Firstly, they can help to increase trust in AI systems, which is essential for widespread adoption. Secondly, they can help to reduce the risk of errors and bias in AI systems, which can have serious consequences. Finally, they can help to improve the overall efficiency and effectiveness of enterprise automation.</p><p>Maisa AI has recently secured $25 million in funding from investors, which will be used to develop and deploy its accountable AI agents. The funding will also be used to expand the company's operations and reach new markets. This funding is a significant boost for the startup, which has been working hard to develop a solution to the problem of enterprise AI failure.</p><p>Maisa AI's accountable AI agents have the potential to revolutionize enterprise AI by providing transparency and accountability. With the high failure rate of 95%, there is a clear need for more accountable AI agents, and Maisa AI is well-positioned to meet this need. The $25 million in funding will help the company to develop and deploy its solution, and to expand its operations and reach new markets. As enterprise AI continues to grow, the need for accountable AI agents will only become more important, and Maisa AI is well-positioned to lead the way.</p>","contentLength":2208,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Title: Unveiling the Rivalry Uniforms: AFC East and NFC West Teams Prepare for Epic Clashes in 2025","url":"https://dev.to/yagyaraj_sharma_6cd410179/title-unveiling-the-rivalry-uniforms-afc-east-and-nfc-west-teams-prepare-for-epic-clashes-in-2025-5a67","date":1761956139,"author":"Insights YRS","guid":323800,"unread":true,"content":"<h2>\n  \n  \n  Title: Unveiling the Rivalry Uniforms: AFC East and NFC West Teams Prepare for Epic Clashes in 2025\n</h2><p>The NFL has announced that teams from the AFC East and NFC West will don special uniforms during a single home game against a division rival in the 2025 season. This news has sparked excitement among fans and players alike, as they eagerly anticipate the upcoming battles between these two powerhouse divisions.</p><p>The AFC East and NFC West are two of the most competitive divisions in the NFL, with each boasting a rich history of success and rivalry. From the New England Patriots to the Los Angeles Rams, these teams have a long-standing tradition of dominating the league and challenging each other for supremacy.</p><p>In preparation for these epic clashes, the NFL has worked tirelessly to create uniforms that will capture the essence of these storied rivalries. Fans can expect to see bold colors, eye-catching designs, and unique features that will make these uniforms stand out from the rest.</p><p>The AFC East and NFC West will each have their own set of uniforms, with each team selecting from a range of options. Some teams may choose to wear their traditional colors and designs, while others may opt for something more daring and innovative.</p><p>The uniforms will be unveiled in the coming months, with each team revealing their designs in a special event or press conference. Fans will have the opportunity to see the new uniforms up close and personal, and will no doubt be impressed by the attention to detail and creativity that has gone into their creation.</p><p>As the 2025 season approaches, the AFC East and NFC West will be more determined than ever to prove their dominance and claim the ultimate prize. With these new uniforms serving as a symbol of their rivalry and determination, these teams are sure to deliver some of the most memorable and exciting games of the season.</p><p>So mark your calendars and get ready for some epic battles between the AFC East and NFC West in 2025. With these new uniforms on display, it's sure to be a season to remember.</p>","contentLength":2057,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-5319","date":1761955812,"author":"Vibe YouTube","guid":323799,"unread":true,"content":"<p>Build a Python AI Agent in 10 Minutes shows you how to spin up a basic AI assistant in under ten minutes using Python and the OpenAI API. You’ll walk through installing dependencies, grabbing your API key, importing libraries, defining custom tools, creating an LLM-powered agent, and writing a simple driver to test it — all laid out with handy timestamps so you can jump straight to whatever you need.</p><p>Along the way, you’ll find links to a free Notion trial, a PyCharm download (free forever plus a month of Pro), and DevLaunch — a mentorship program that offers real-world project guidance and job-ready strategies.</p>","contentLength":625,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-3iol","date":1761955795,"author":"Vibe YouTube","guid":323798,"unread":true,"content":"<p>Discover three modern Python tricks that aren’t used enough—pattern-matching with the  statement, handy dataclasses for boilerplate-free classes, and the nifty positional-only/keyword-only argument syntax. Timestamps (00:00, 04:24, 08:47) make it easy to jump right in.</p><p>Plus, snag 20% off Brilliant Premium with the link in the description to supercharge your learning, or check out Tim’s DevLaunch mentorship for real-world projects and career support.</p>","contentLength":458,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Clarity From Chaos: Super-Resolution That Thrives on Noise","url":"https://dev.to/arvind_sundararajan/clarity-from-chaos-super-resolution-that-thrives-on-noise-50do","date":1761951724,"author":"Arvind SundaraRajan","guid":323787,"unread":true,"content":"<p>Ever tried to zoom in on a security camera feed, only to be met with a blurry mess? Or struggled to diagnose a medical image riddled with artifacts? We've all faced situations where imperfect, noisy data limits our ability to extract crucial insights. Now, imagine a technique that doesn't just tolerate noise, but leverages it to create remarkably clear, high-resolution images.</p><p>The core idea is to guide the image enhancement process using conditional flow matching. Instead of blindly extrapolating details, the model learns a mapping between noisy, low-resolution images and their ideal high-resolution counterparts. This mapping allows us to essentially \"clean up\" the image while simultaneously increasing its resolution. Think of it like a GPS guiding you through a fog – even with limited visibility, the system knows the optimal route.</p><p>Here's why this approach is a game-changer:</p><ul><li><strong>Unprecedented Noise Resilience:</strong> Works even with significantly degraded images.</li><li><strong>Enhanced Detail Recovery:</strong> Reveals details previously obscured by noise.</li><li> Minimizes the introduction of artificial artifacts.</li><li> Provides a measure of confidence in each pixel, allowing you to identify potentially unreliable areas.</li><li> Applicable to a wide range of imaging domains.</li><li><strong>Sampling from a Posterior:</strong> Enables the creation of multiple plausible high-resolution images, reflecting the inherent uncertainty.</li></ul><p>One implementation challenge involves balancing the data prior with the image information, as overly strong prior could introduce unrealistic artifacts. Using a tunable parameter to control the strength of the prior can help achieve this balance.</p><p>The implications are profound. Imagine enhancing satellite imagery to monitor deforestation with unprecedented accuracy or improving the diagnostic capabilities of medical imaging in resource-constrained environments. As we refine this technique, we pave the way for a future where image clarity is no longer a barrier to knowledge and discovery.</p><p>Related Keywords: Image Enhancement, Image Restoration, Deep Learning, Generative AI, Noise Resilience, Conditional Flow Matching, Diffusion Models, Super Resolution Algorithms, Low-Resolution Images, Image Processing, AI Art Generation, Data Augmentation, Model Training, AI Ethics, Computer Graphics, Pattern Recognition, Medical Imaging, Satellite Imaging, Security Cameras, Video Enhancement, Generative Adversarial Networks, Image Quality Assessment, Robustness, Generalization</p>","contentLength":2443,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Circular dependency check in Python","url":"https://dev.to/slyang08/circular-dependency-check-in-python-58p2","date":1761951290,"author":"Sheng-Lin Yang","guid":323775,"unread":true,"content":"<p>This is my last issue in Hacktoberfest.\nI have challenged myself three times, and this one is the biggest one to me.</p><p>This project implements many features and functions. Until now, I had never contributed to a project that uses one language to analyze or check for bugs and issues in another—like this project, which uses Go to check Python projects, whether they are small, medium, or large.</p><p>For this feature, I implemented three options under the  command:  or , , and . The main objective was to detect circular dependencies between the files in a project. If any were found, the tool would display the files involved. With , users can specify how many circular dependencies are allowed in the entire project.</p><p>While working on this project, I spent time communicating with the project owner about the problems I encountered, hoping to get useful feedback. One tip I learned from my open-source course was to use  to efficiently find files containing specific keywords.</p><p>I implemented the core functionality for detecting circular dependencies, but I am still working on how to display the exact line and column numbers in the output.</p><p>Through this challenge, I learned the importance of clear communication between developers and how to use tools like  to search for information efficiently.</p><p>Even though this challenge is not completely finished yet, I am committed to seeing it through because it is a great opportunity to work on a well-structured, meaningful project.</p>","contentLength":1467,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Bum-Ker Encryption","url":"https://dev.to/dev_kzy/bum-ker-encryption-3of6","date":1761949566,"author":"Dev Kzy","guid":323774,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fioq3rcuut2v9rcv5lt3s.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fioq3rcuut2v9rcv5lt3s.png\" alt=\"Screenshot-Bumker\" width=\"800\" height=\"558\"></a>\nBum‑ker:Simple File Encryption Tool for Windows made with python.</p><p>It’s a lightweight tool I built for Windows that lets you encrypt your files with a password, batch‑encrypt multiple files, and even securely delete the originals if you want.</p>","contentLength":247,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-3pje","date":1761948509,"author":"Vibe YouTube","guid":323773,"unread":true,"content":"<p>This quick video dives into three underused but powerful Python tricks: the new  for elegant pattern matching,  to get boilerplate-free classes, and <strong>positional-only &amp; keyword-only arguments</strong> to enforce clearer function APIs. These modern features can seriously clean up your code and make it more expressive.</p><p>Along the way, you’ll also snag a 20% off offer on Brilliant Premium for free daily learning, plus a peek at Tim’s DevLaunch mentorship program for real-world project coaching.</p>","contentLength":487,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"A Senior Developer's Guide to the Model Context Protocol","url":"https://dev.to/onlineproxy/a-senior-developers-guide-to-the-model-context-protocol-2pfl","date":1761942931,"author":"OnlineProxy","guid":323733,"unread":true,"content":"<p>You’ve been there. You’ve just integrated a powerful new LLM into your workflow, and the possibilities feel endless. Then comes the reality: bridging the gap between the model's linguistic intelligence and the practical, real-world actions you need it to perform. This means wrestling with a dozen different APIs, each with its own authentication quirks, data schemas, and documentation (or lack thereof). You write glue code. You build bespoke adapters. And just when you get it all working, a new model comes out, or an API updates, and you’re back to square one, refactoring your integrations for a new host environment.</p><p>It feels like the pre-USB era of computing, where every peripheral needed its own proprietary port. What if there was a USB-C for AI? A single, standardized protocol that allowed any model, in any compatible environment, to seamlessly connect to a universe of tools, resources, and knowledge.</p><p>This isn't a hypothetical. This is the Model Context Protocol (MCP), and if you're a developer working with AI, it's the paradigm shift you've been waiting for.</p><h2>\n  \n  \n  What is the Model Context Protocol, and Why Is It More Than Just an API Wrapper?\n</h2><p>Developed and open-sourced by Anthropic, the creators of Claude, the Model Context Protocol (MCP) is a standardized communication layer designed to allow Large Language Models (LLMs) to interact with external systems. At its heart, it functions as a universal adapter. Think of it this way: your LLM is the computer, and the vast world of APIs, local files, and SaaS tools are the peripherals. MCP is the USB-C port that lets them all talk to each other, regardless of the manufacturer.</p><p>This analogy is more than just a convenient metaphor; it captures the essence of MCP's value. Before a standard like USB-C, connecting a monitor, a mouse, and a hard drive required a messy assortment of VGA, PS/2, and SCSI ports. Similarly, without a standard like MCP, connecting an LLM to a web search API, a local file system, and a project management tool requires writing custom, brittle code for each interaction.</p><p>A common misconception is to view MCP as just another API wrapper. While an MCP server can wrap an API, its role is far more sophisticated. A standard API is a generic interface not built with AI in mind. It communicates via HTTP requests and returns structured data, but it leaves the burden of interpretation and execution logic on the developer.</p><p>MCP, by contrast, is a specialized translation layer designed for an LLM. It creates an abstraction that not only connects to a tool but also describes its capabilities in a way the model can understand, enabling the model to reason about how and when to use the tool. This structured communication, typically over JSON-RPC, reduces ambiguity and dramatically improves the reliability of tool use.</p><p>This standardization creates a powerful network effect. The more developers build and share MCP servers, the more valuable the protocol becomes for everyone. It fosters a burgeoning ecosystem where tools become composable and portable, freeing developers from the endless cycle of rebuilding integrations.</p><h2>\n  \n  \n  The Host-Client-Server Trinity: A Framework for MCP Mastery\n</h2><p>To master MCP, you must understand its three core architectural components. This trinity forms the foundation of every interaction.</p><ol><li><p>: This is the AI application or development environment where you interact with the LLM. It's the \"computer\" in our analogy. Examples include Anthropic's , AI-native code editors like , or automation platforms like  and . The host provides the user interface and the core LLM capabilities.</p></li><li><p>: This component lives within the host. It's the part that speaks the MCP language. In most practical scenarios, the client is pre-integrated into the host application, so you don't need to build or manage it yourself. Its job is to discover, communicate with, and invoke MCP servers.</p></li><li><p>: This is the heart of the system and where developers spend most of their time. The MCP server is the \"USB-C adapter\" that connects to the actual tool or resource. It’s an independent process that exposes capabilities to the client. One server can wrap a single API, or it can bundle a whole suite of functionalities.</p></li></ol><p>An MCP server can provide three distinct types of capabilities to a host:</p><ul><li><p>: This is the most common use case. A tool represents an action the LLM can take, typically by calling an external API. This could be anything from fetching the current weather, searching the web, generating images, or even automating actions in a 3D modeling program like a Blender.</p></li><li><p>: These are sources of context that can be injected into the model's awareness. A server can provide access to local file contents, database records, API responses, live system data, log files, or even binary data like images and PDFs. This allows the LLM to work with information that isn't publicly available on the internet.</p></li><li><p>: Servers can offer pre-defined, dynamic prompt structures. These are more than just static text; they can accept arguments, chain multiple interactions, and guide the LLM through specific workflows, acting like reusable functions for complex tasks.\nOnce you build an MCP server—say, one that connects to your company's internal documentation database—that server can be used by any developer in their preferred MCP-compatible host, be it , , or any other. The logic is encapsulated and portable.</p></li></ul><h2>\n  \n  \n  What Strategic Advantages Does MCP Offer Over Direct API Calls?\n</h2><p>For a senior developer, adopting a new technology must offer clear, strategic benefits. MCP delivers on several fronts, moving beyond mere convenience to offer significant architectural advantages over traditional function-calling with direct API integrations.</p><ul><li><p>: This is the killer feature. When you build a direct API integration, it's tied to that specific application and host. If you switch from an in-house script to using , you have to rebuild that integration. With MCP, you build the server once. That server, which encapsulates all the logic for interacting with your tool, can be plugged into any MCP-compliant host without modification. This drastically reduces redundant work and accelerates development.</p></li><li><p><strong>Dynamic Discovery &amp; Maintenance Offloading</strong>: An MCP server can advertise its capabilities to a client. This means an LLM can dynamically ask a server what it's capable of and get a structured response. Furthermore, when an underlying API (e.g., the Zapier API) changes, you don't need to update your application code. As long as the community-maintained Zapier MCP server is updated, your integration continues to work seamlessly. You effectively offload the maintenance burden to the server's maintainer.</p></li><li><p>: The protocol's specification simplifies everything. Instead of juggling dozens of unique API authentication methods, endpoint structures, and data formats, you work with a single, predictable protocol based on JSON-RPC. This makes development, and especially debugging, significantly more straightforward.</p></li><li><p><strong>Superior LLM-Tool Reliability</strong>: Because MCP is designed for LLMs, the communication is clearer and less error-prone. The structured way it presents tool definitions and schemas helps the model reason more effectively about parameter selection and invocation, leading to more reliable outcomes than you often get with generic function-calling.</p></li></ul><h2>\n  \n  \n  How Do You Implement Your First MCP Server?\n</h2><p>Getting started is surprisingly straightforward, especially when leveraging the existing ecosystem. Here is a high-level guide to integrating your first pre-built server within the Claude Desktop host.</p><p><strong>Step 1: The Environment Setup Checklist</strong>\nBefore you can connect a server, your local environment needs a few key components.</p><ul><li>: Download and install an MCP-compatible host.  is an excellent starting point.</li><li>: Within 's settings ( -&gt; ), you must enable this option. This exposes the necessary configuration files and logs.</li><li>: Most MCP servers are written in either Node.js or Python.\n\n<ul><li>Install : This is required to run servers that use the  command.</li><li>Install : This is needed for servers that use the  command (from the  package manager).</li></ul></li><li><code>Pro Tip on Version Management</code>: To avoid dependency conflicts between different servers requiring different runtime versions, use a version manager from day one. Use  (Node Version Manager) for Node.js and  for Python. This allows you to switch versions on a per-project basis and is an essential practice for serious development.</li></ul><p><strong>Step 2: Integrating a Pre-Built Server</strong>\nYou don't need to write a server from scratch to get started. The official MCP server repository on GitHub contains dozens of ready-to-use servers.</p><ul><li><p><strong>Locate the Configuration File</strong>: In , navigate to  -&gt;  -&gt;  and click . This will open your <code>claude_desktop_config.json</code> file.</p></li><li><p><strong>Add the Server Definition</strong>: You'll add a JSON object to this file that defines the server you want to run. The structure is simple, containing a name, the command to execute, and any necessary arguments. For example, to add a server that gives Claude access to your local file system, the entry might look like this:</p></li></ul><div><pre><code>{\n  \"mcp_servers\": {\n    \"file-system\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@mcp/file-system\",\n        \"--root=~/\"\n      ]\n    }\n  }\n}\n</code></pre></div><ul><li>: Crucially, any changes to the config file require a full restart of the host application. For , this means quitting the application from the system tray, not just closing the window.\nUpon restart, the host will launch the server process, and its capabilities (e.g., reading or writing local files) will become available within the Claude chat interface.</li></ul><p>\nWhen things go wrong, MCP provides clear debugging pathways.</p><ul><li>: Your host application generates logs that are invaluable for debugging connection issues. In , you can access these via  -&gt; . These logs will show the handshake between the client and server and any errors that occur.</li><li>: For debugging the server itself, the  is an essential tool. It’s a command-line utility that allows you to interact directly with your server, inspect its capabilities, and test its responses before you even involve a host application.</li></ul><h2>\n  \n  \n  What Advanced Concepts and Security Risks Should I Be Aware Of?\n</h2><p>As you move beyond basic integrations, you'll encounter more advanced—and critical—concepts.</p><ul><li>: MCP defines how data moves between client and server. The two primary transports are:\n\n<ul><li>: Standard Input/Output. This is ideal for high-speed, local processes, where the host and server run on the same machine. It's the fastest and most common method for local development.</li><li>: Server-Sent Events. This uses HTTP streaming and is designed for connecting to remote servers hosted in the cloud.</li></ul></li><li><strong>An Iterative Philosophy for System Prompts</strong>: The best system prompt is often no system prompt. Every system prompt adds tokens, latency, and cost to your API calls. The default system prompt from providers like Anthropic is already incredibly powerful and fine-tuned. Your approach should be iterative:</li><li>Start with no custom system prompt.</li><li>If the model fails to use a tool correctly or behaves in an undesirable way, only then add the smallest possible instruction to your system prompt to correct that specific failure. Don't write a giant, prescriptive prompt from the outset.</li><li><strong>Security—The Elephant in the Room</strong>: Running external code via MCP servers introduces security risks. Do not blindly run servers from untrusted sources. Be aware of novel attack vectors:\n\n<ul><li>: A malicious server could misrepresent its function, tricking the LLM into executing harmful commands.</li><li>: A seemingly benign, popular server could be updated by its author to include malicious code, affecting all users who automatically pull the latest version.\nWhen using remote servers over , always implement proper authentication to prevent unauthorized access and potential DNS rebinding attacks.</li></ul></li></ul><p>The Model Context Protocol is more than just a new tool; it represents a fundamental maturation of the AI development landscape. It signals a move away from the wild west of bespoke, brittle integrations toward a future of composable, interoperable, and reusable components.</p><p>By embracing the Host-Client-Server framework and leveraging the growing ecosystem of pre-built servers, you can dramatically increase your efficiency, reduce maintenance overhead, and build more powerful and reliable AI-powered applications. It frees you to focus on creating novel functionality, not on writing yet another piece of glue code.</p><p>The next time you find yourself staring down the barrel of another complex API integration, stop and ask yourself: could this be an MCP server? The answer could change the way you build with AI forever.</p>","contentLength":12640,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Witch's Potion: A Spooky Halloween Mini-Game Built with Python OOP","url":"https://dev.to/shahrouzlogs/witchs-potion-a-spooky-halloween-mini-game-built-with-python-oop-5090","date":1761942179,"author":"Shahrouz Nikseresht","guid":323732,"unread":true,"content":"<p>Hey there, fellow coders and Halloween lovers! 👻 As the nights get longer and the air gets crisp, I always feel the itch to build something <strong>fun, seasonal, and just a little bit spooky</strong>. Last night, while sipping pumpkin-spiced coffee and listening to a crackling fire sound effect on YouTube, I sat down and coded , a tiny text-based guessing game that captures the essence of Halloween in under 100 lines of clean, educational Python.</p><p>This isn’t just another \"Hello World\" project. It’s a  with , , , and , all wrapped in a cauldron of Halloween atmosphere. And yes, I recorded a full  so you can see it in action before even running the code!</p><h2>\n  \n  \n  The Spark: Why I Built This at 11 PM on a Thursday\n</h2><p>Let me take you back a few hours.</p><p>It was late. I’d just finished debugging a work project and wanted to <strong>unwind with something creative</strong>. I opened VS Code, stared at a blank , and thought:</p><blockquote><p><em>\"What if I could make something that feels like a real game… but in the terminal? Something a beginner could read, understand, and modify?\"</em></p></blockquote><p>I’ve been teaching Python and OOP concepts to friends and online learners for a while now. One thing I’ve noticed? . They’re engaging, rewarding, and the perfect sandbox for practicing classes, methods, and logic.</p><ul><li>How do I make ?</li><li>How do I add  without graphics?</li><li>How do I keep it <strong>short enough to finish in one sitting</strong>?</li></ul><p>That’s when  was born.</p><h2>\n  \n  \n  The Game: Your Mission as the Apprentice\n</h2><p>You are the . The old hag has stepped out to terrorize the village, leaving behind her  and a single instruction:</p><blockquote><p><em>\"Brew my secret potion using <strong>exactly three ingredients</strong>. Match my combination… or the cauldron will \"</em></p></blockquote><h3>\n  \n  \n  Your Ingredients (Choose 3!):\n</h3><ol></ol><p>You type your guess like: </p><p>The cauldron hisses.<p>\nThe air thickens with tension…</p></p><ul><li><blockquote><p><code>You made the PERFECT potion! The witch is impressed!</code><p>\nConfetti (in your imagination) explodes. You’re promoted to Head Apprentice!</p></p></blockquote></li><li><blockquote><p><code>The potion EXPLODES! Wrong mix!</code><code>The secret was: Bat Wing, Ghost Dust, Frog Leg</code><code>The witch returns… and turns you into a frog!</code> 🐸</p></blockquote></li></ul><p>Every game is different, the witch’s combo is  each time.</p><h2>\n  \n  \n  The Code: A Deep Dive into the Magic (With OOP!)\n</h2><p>I designed the game using , each with a single responsibility. This is , not just theory.</p><h3>\n  \n  \n  1.  Class – The Brain Behind the Cauldron\n</h3><div><pre><code></code></pre></div><ul><li>Stores all possible ingredients</li><li>Picks  as the secret combo using </li></ul><h3>\n  \n  \n  2.  Class – That’s </h3><div><pre><code></code></pre></div><ul><li> choices (with )</li><li>If you mess up? The game , it picks for you! (Beginner-friendly UX)</li></ul><h3>\n  \n  \n  3.  Class – The Director of the Show\n</h3><div><pre><code></code></pre></div><ul><li> for suspense (<code>\"B...u...b...b...l...i...n...g...\"</code>)</li><li>Final explosion or victory message</li></ul><h2>\n  \n  \n  Watch the Full Gameplay Demo! 🎥\n</h2><p>I recorded a  so you can see the drama unfold in real time. Watch how the tension builds, how the input works, and what happens when you guess wrong (or right!).</p><blockquote><p>: Run the game yourself  watching, try to beat it on the first try!</p></blockquote><h2>\n  \n  \n  What You’ll Learn by Building (or Modding) This\n</h2><p>This isn’t just a game, it’s a :</p><div><table><tbody><tr><td>, ,  — each does one thing</td></tr><tr><td>, </td></tr><tr><td> prevents crashes</td></tr><tr><td> for replayability</td></tr><tr><td>Slow text, pauses, feedback</td></tr><tr><td>Clean, readable, extensible</td></tr></tbody></table></div><h2>\n  \n  \n  Final Thoughts: Why Mini-Games Matter\n</h2><p> isn’t going to win Game of the Year… but it .</p><p>It reminded me why I code:</p><ul></ul><p>And the best part? . In fact, I  you to fork it, change the theme (Christmas Elf? Space Brew?), and share it.</p><p> Python 3, love, and a little midnight magic.. . .</p><p><strong>Happy Halloween 2025, apprentices!</strong><p>\nMay your potions brew true… and your code never explode!  </p></p>","contentLength":3457,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-oof","date":1761941344,"author":"Vibe YouTube","guid":323731,"unread":true,"content":"<p><strong>3 Unique Python Features You NEED To Know</strong><p>\nTim walks you through three modern Python gems you’ve probably missed: the match statement for clean pattern matching, dataclasses to slash boilerplate, and positional-only vs keyword-only arguments for tighter function signatures.</p></p><p>He also offers a special 20% discount on Brilliant.org Premium for more free learning, plus an invite to his DevLaunch mentorship to build real-world projects and land that job.</p>","contentLength":452,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Your first django PR - from scratch to improved patch","url":"https://dev.to/annalauraw/your-first-django-pr-from-scratch-to-improved-patch-5b2f","date":1761938370,"author":"Annabelle Wiegart","guid":323715,"unread":true,"content":"<p>You are ready to contribute code to Django, but you feel overwhelmed by the contributing documentation? You wish there was a step-by-step walkthrough from setting up your local environment to making your first pull request? This tutorial is for you.</p><p>I recently made my first pull request to Django. Actually, it was the first pull request I ever made, since I had mainly worked on one-person-projects before. As I went along,I documented the steps, including links to the relevant documentation pages. I started from an existing patch that needed improvement, which is an approach that I recommend for your first ticket.</p><p>In this tutorial, we will focus on the git/github workflow. For additional aspects, such as working with Django's ticket system, please also see <a href=\"https://dev.to/_e6641d4181e2ba2945d1f/djangonautfirst-pr-week-1-2-929-1010-2ah2\">Rim Choi's blog post</a>. We will go through the following steps:</p><ul><li>Setting up your local environment</li><li>Finding a ticket to work on</li><li>Going through the contribution checklist</li></ul><h3>\n  \n  \n  Setting up your local environment\n</h3><h4>\n  \n  \n  Getting a copy of Django’s development version\n</h4><p>As described in Django's <a href=\"https://docs.djangoproject.com/en/5.2/intro/contributing/#getting-a-copy-of-django-s-development-version\" rel=\"noopener noreferrer\">contribution tutorial</a>, fork the Django repo on GitHub. Then, clone your Django fork to your local machine:<code>git clone https://github.com/YourGitHubName/django.git</code></p><p>Your Django fork is automatically added as a remote repository named \"origin\". You can verify this with the git remote command:</p><p>As described in <a href=\"https://docs.djangoproject.com/en/5.2/internals/contributing/writing-code/working-with-git/#setting-up-local-repository\" rel=\"noopener noreferrer\">Working with Git and GitHub</a>, you need to add the original Django repository as an additional remote. It's a good convention to call it \"upstream\":<code>git remote add upstream https://github.com/django/django.git</code></p><p>If you have not done so already with , configure your username and email address for your local Django git repository:<code>git config user.name &lt;your name&gt;</code><code>git config user.email &lt;your email&gt;</code></p><h4>\n  \n  \n  Creating a virtual environment\n</h4><p>Create and activate a virtual environment, as described in the <a href=\"https://docs.djangoproject.com/en/5.2/intro/contributing/#getting-a-copy-of-django-s-development-version\" rel=\"noopener noreferrer\">contribution tutorial</a>. Inside your virtual environment, install your local copy of Django in editable mode:<code>pip install -e /path/to/your/local/clone/django/</code></p><p>Install the test dependencies:<code>pip install -r requirements/py3.txt</code></p><p>If the installation fails, the cause could be a missing system-level dependency. Just as an example, on Ubuntu 22.04, I had to install the system package libmemcached-dev:<code>sudo apt install libmemcached-dev</code></p><p>After installing the missing system packages, retry the installation of the test dependencies.</p><p>Once the test dependencies are installed, you should be able to run <a href=\"https://docs.djangoproject.com/en/5.2/intro/contributing/#running-django-s-test-suite-for-the-first-time\" rel=\"noopener noreferrer\">Django's test suite</a>:</p><p>The Django documentation has its own dependencies. You will likely need them later, so go ahead and install them:<code>pip install -r requirements.txt</code></p><p>Now, change back to the top-level folder of your Django repository, e.g. with . Install the <a href=\"https://docs.djangoproject.com/en/5.2/internals/contributing/writing-code/coding-style/#coding-style-pre-commit\" rel=\"noopener noreferrer\">pre-commit hooks</a>:</p><p>Finding a beginner-friendly ticket to work on can seem a bit challenging at first. There is an <a href=\"https://code.djangoproject.com/query?easy=1&amp;stage=Accepted&amp;status=assigned&amp;status=new&amp;order=id&amp;desc=1&amp;col=id&amp;col=summary&amp;col=owner&amp;col=type&amp;col=component\" rel=\"noopener noreferrer\">easy pickings filter</a>, but tickets with this category are rare and often already assigned. I would recommend you to find the easiest ticket possible, so you can focus on the contribution workflow first. And if your first ticket is a quick success, you will be more motivated to keep going.</p><p>In her excellent video tutorial <a href=\"https://youtu.be/A-3eTMNQ3rM?si=DWhLKpFBuEb8FawZ&amp;t=761\" rel=\"noopener noreferrer\">Your first Django contribution</a>, Django fellow Sarah Boyce recommends the so-called \"vulture strategy\", i.e. working on a patch from a previously submitted pull request that needs improvement. <a href=\"https://code.djangoproject.com/query?changetime=..Apr+30%2C+2025&amp;has_patch=1&amp;needs_better_patch=1&amp;stage=Accepted&amp;status=assigned&amp;status=new&amp;type=Bug&amp;group=component&amp;order=changetime&amp;col=id&amp;col=summary&amp;col=changetime&amp;col=owner&amp;col=version\" rel=\"noopener noreferrer\">Her filters</a> are:</p><ul><li>Patch needs improvement = Yes</li><li>Modified = between \"-\" and 6 months ago</li></ul><p>It can also be helpful to group the resulting ticket list by component:</p><p>When you decide to work on a ticket, please assign it to yourself. If you are unsure whether someone else is currently working on the ticket, you can leave a comment asking if you can take over. If you don't get a response within 48 h, assigning the ticket to yourself is probably fine. See also <a href=\"https://docs.djangoproject.com/en/5.2/internals/contributing/writing-code/submitting-patches/#claiming-tickets\" rel=\"noopener noreferrer\">\"Claiming\" tickets</a>.</p><p>You chose a ticket with an existing patch that needs improvement. There may be several pull requests associated with your ticket. You should always base your work on the most recent patch, as explained in <a href=\"https://youtu.be/A-3eTMNQ3rM?si=Cw2QoeLJdRv90BOd&amp;t=885\" rel=\"noopener noreferrer\">Sarah Boyce's video</a>.</p><p>Here's one way to get the existing patch into your local branch:<code>curl -L https://github.com/django/django/pull/xxxxx.patch | git am</code>\nSee also <a href=\"https://docs.djangoproject.com/en/5.2/internals/contributing/writing-code/working-with-git/#working-on-a-patch\" rel=\"noopener noreferrer\">Working on a patch</a>.</p><p>For reproducing errors and testing your changes, you should work with a <a href=\"https://docs.djangoproject.com/en/5.2/internals/contributing/writing-code/submitting-patches/#testing-with-a-django-project\" rel=\"noopener noreferrer\">Django test project</a> which uses the same virtual environment that you just set up, with your local Django copy installed in editable mode.</p><p>Once you made your changes, you'll probably want to do a commit. That's when the <a href=\"https://docs.djangoproject.com/en/5.2/internals/contributing/writing-code/coding-style/#coding-style-pre-commit\" rel=\"noopener noreferrer\">pre-commit hooks</a> are activated. Their purpose is to catch as many errors before you push them to the remote repository. For instance, your code will be formatted with <a href=\"https://github.com/psf/black\" rel=\"noopener noreferrer\">black</a>. You'll need to re-stage the changes made by the pre-commit hooks and retry the commit. You might have to manually fix some errors, too. Here is an example error message for a comment line that is too long:</p><p><code>flake8...................................................................Failed</code><code>django/conf/locale/de_CH/formats.py:28:80: W505 doc line too long (80 &gt; 79 characters)</code></p><p>In this example, I needed to shorten my comment line to a maximum of 79 characters.</p><h3>\n  \n  \n  Going through the contribution checklist\n</h3><p>At this point, you have made one or several commits on your ticket branch to improve the existing patch.You have addressed all the comments in the ticket and in the previous pull request. You think your changes are ready for a new pull request.</p><p>That's when you need to go through the <a href=\"https://docs.djangoproject.com/en/5.2/internals/contributing/writing-code/submitting-patches/#contribution-checklist\" rel=\"noopener noreferrer\">contribution checklist</a>. For your case, i.e. a bug fix that needs improvement, probably all sections are relevant except  and . I'll pick out a few steps, but please do read the whole checklist and go through all the points that apply.</p><p>Before you go through the contribution checklist, check if the upstream main branch has changed in the meantime. If so, please <a href=\"https://docs.djangoproject.com/en/5.2/internals/contributing/writing-code/working-with-git/#after-upstream-has-changed\" rel=\"noopener noreferrer\">rebase your work</a>:</p><p>Now, check whether the documentation builds without any errors. From your local Django directory:</p><p>Back inside the top-level Django directory, make sure the test suite passes:</p><p><a href=\"https://www.freecodecamp.org/news/git-squash-commits/\" rel=\"noopener noreferrer\">Squash</a> your commits and the commits of previous contributors of the patch into one single commit. Check how many commits you need to edit:\nLet's say you want to squash 3 commits into one:</p><p>Leave the word  next to your last commit. Replace  with  next to the other two commits.</p><p>Save the file. git will open a new file for you with the combined commit messages. Edit them so they match Django's <a href=\"https://docs.djangoproject.com/en/5.2/internals/contributing/committing-code/#committing-guidelines\" rel=\"noopener noreferrer\">commit message format</a>. Don't forget to mention the co-authors of the patch, i.e. the authors of the previous patch which you improved. Example:<code>Fixed #35095 -- Clarified Swiss number formatting in docs/topics/i18n/formatting.txt.</code><code>Co-Authored-By: Name &lt;email@address&gt;</code></p><p>Now you can push your squashed commit to your remote fork:<code>git push origin ticket_&lt;ticket number&gt;</code></p><p>If you messed up the commit message, e.g. you forgot the final period, and you already pushed your changes to your Django fork, you can rewrite the commit message like so:</p><p>Write \"reword\" next to your commit in the text editor:</p><p>Save the file. A new file opens where you can edit your commit message. Make your changes, and save this second file, too. The commit message is now rewritten.\nIf you had pushed the changes already to your Django fork, you need to force-push the modified commit:<code>git push --force origin &lt;your branch&gt;</code></p><h3>\n  \n  \n  Creating the pull request\n</h3><p>Enter a description for the pull request. Mention the ticket number as suggested in the comment. If your patch is based on a previous pull request, mention it in the description. See my <a href=\"https://github.com/django/django/pull/19933\" rel=\"noopener noreferrer\">example description</a>.</p><p>If some GitHub checks fail, you can check the details of the failure via the three little dots next to the test:</p><p>If some linting- or formatting-related checks fail and you can fix the issue immediately, it is okay to force-push a rewritten commit. In other circumstances, you should avoid force-pushing since it can erase valuable context for the reviewer.</p><p>While your code is being <a href=\"https://docs.djangoproject.com/en/5.2/internals/contributing/writing-code/working-with-git/#after-review\" rel=\"noopener noreferrer\">reviewed</a>, you may experience several iterations of the following cycle:</p><ul><li>add commits to your local branch</li><li>squash all new local commits into one review commit</li><li>push the review commit to your remote branch</li></ul><p>Don't give up :) I hope your PR gets merged!</p>","contentLength":8105,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Async Iterator: When Regular Loops Block the Event Loop","url":"https://dev.to/aaron_rose_0787cc8b4775a0/the-async-iterator-when-regular-loops-block-the-event-loop-f24","date":1761937767,"author":"Aaron Rose","guid":323714,"unread":true,"content":"<p>Timothy stared at his screen, puzzled. His async web server was working beautifully for most requests, but whenever someone requested the log file analysis endpoint, the entire server seemed to freeze for several seconds.</p><p>\"Margaret, I don't understand,\" he said, showing her the code. \"I'm using async/await everywhere, but this one endpoint still blocks everything.\"</p><p>Margaret walked over and looked at his screen.</p><div><pre><code></code></pre></div><p>\"I see the problem,\" Margaret said with a knowing smile. \"You're using a regular  loop to read the file. That blocks the entire event loop.\"</p><p>\"But I'm inside an async function,\" Timothy protested. \"Doesn't that make it non-blocking?\"</p><p>\"Common misconception,\" Margaret said. \"Let me show you what's happening.\"</p><div><pre><code>Event Loop Timeline:\n\nWithout blocking (ideal):\nTask analyze_logs: [read line]──[read line]──[read line]──...\nTask req_1:        [start]──────────[await]──────────[complete]\nTask req_2:                    [start]──────[await]──────[complete]\nTask req_3:                              [start]──[await]──[complete]\n\nWith blocking (actual):\nTask analyze_logs: [BLOCKS FOR 5 SECONDS reading entire file]\nTask req_1:                                                    [start][await][complete]\nTask req_2:                                                                [start][await][complete]\nTask req_3:                                                                         [start][await][complete]\n\nThe for loop never yields control back to the event loop!\n</code></pre></div><p>\"Just because you put code inside an  function doesn't make it automatically non-blocking,\" Margaret explained. \"You need to explicitly use  to yield control. A regular  loop never awaits anything, so it holds the event loop hostage.\"</p><p>She typed a demonstration:</p><div><pre><code></code></pre></div><div><pre><code>Starting blocking loop\n  Blocking iteration 0\n  Blocking iteration 1\n  Blocking iteration 2\n  Blocking iteration 3\n  Blocking iteration 4\nBlocking loop done\n[Task 1] Started\n[Task 1] Finished\n[Task 2] Started\n[Task 2] Finished\n\nTotal time: 5.5s\n</code></pre></div><p>\"The other tasks didn't start until the blocking loop finished!\" Timothy exclaimed. \"They're supposed to run concurrently!\"</p><p>\"The issue isn't the  loop itself,\" Margaret clarified. \"It's the  inside it. That's a synchronous blocking operation—it doesn't yield control to the event loop. The same would happen with regular file I/O, network calls without await, or CPU-intensive computation. The for loop just keeps executing these blocking operations one after another without ever giving other tasks a chance to run.\"</p><p>\"If you absolutely must run blocking code that doesn't have an async version,\" Margaret added, \"you can use  to run it in a separate thread so it doesn't freeze the event loop. But that's a workaround—whenever possible, use truly async operations like async generators for I/O.\"</p><p>She showed a quick example:</p><div><pre><code></code></pre></div><p>\"But for file reading and other I/O, async generators are the proper solution—cleaner, more efficient, and more scalable.\"</p><p>\"So how do I fix my log analyzer?\" Timothy asked.</p><p>\"You need ,\" Margaret said. \"It's like a regular  loop, but it cooperates with the event loop.\"</p><div><pre><code></code></pre></div><div><pre><code>Starting async iteration\n  Generating 0\n[Background] Working 0\n  Received 0\n  Generating 1\n  Received 1\n[Background] Working 1\n  Generating 2\n  Received 2\n  Generating 3\n[Background] Working 2\n  Received 3\n  Generating 4\n  Received 4\nAsync iteration done\n</code></pre></div><p>\"They're interleaved!\" Timothy said. \"The tasks are actually running concurrently now.\"</p><p>\"Right. Every time  gets a value, it gives other tasks a chance to run. The  inside the generator yields control to the event loop.\"</p><h2>\n  \n  \n  Creating Async Generators\n</h2><p>Margaret opened a new file. \"Let me show you how to create async generators. It's simpler than you might think.\"</p><div><pre><code></code></pre></div><div><pre><code>Regular generator:\n  0\n  1\n  2\n\nAsync generator:\n  0\n  1\n  2\n</code></pre></div><p>\"The syntax is almost identical,\" Margaret pointed out. \"The key differences:\"</p><div><pre><code>Regular Generator vs Async Generator:\n\nRegular Generator:\n- def function_name():\n- yield values\n- Used with: for item in generator():\n- Cannot use await inside\n\nAsync Generator:\n- async def function_name():\n- yield values\n- Used with: async for item in generator():\n- CAN use await inside\n- Each iteration can be async\n</code></pre></div><h2>\n  \n  \n  Practical Example: Streaming File Reader\n</h2><p>\"Now let's fix your log analyzer,\" Margaret said. She typed:</p><div><pre><code></code></pre></div><div><pre><code>Starting async log analysis...\n[req_1] Request started\n  Found error: ERROR: Connection failed\n[req_2] Request started\n[req_1] Request completed\n  Found error: ERROR: Database timeout\n[req_3] Request started\n[req_2] Request completed\n  Found error: ERROR: Invalid input\n[req_3] Request completed\nAnalyzed 6 lines, found 3 errors\n</code></pre></div><p>\"Perfect!\" Timothy said. \"The requests complete while the log analysis is still running.\"</p><p>\"This is a simulation,\" Margaret clarified. \"In real production code, you'd use a library like  because Python's built-in  is a synchronous system call—it blocks the entire event loop when reading from disk.\"</p><p>She pulled up a real example:</p><div><pre><code></code></pre></div><p>\"The key is that  returns an async context manager, and iterating over the file uses , which yields control to the event loop between reads. Python's standard library doesn't include async file I/O, so you need external libraries for this.\"</p><p>\"So my original code with regular  was blocking because it's a synchronous system call,\" Timothy said.</p><p>\"Exactly. The  loop yields control at each iteration, allowing other tasks to make progress.\"</p><h2>\n  \n  \n  The Async Iterator Protocol\n</h2><p>\"How does  actually work under the hood?\" Timothy asked.</p><p>Margaret smiled. \"Just like regular  uses the iterator protocol,  uses the async iterator protocol.\"</p><div><pre><code>Regular Iterator Protocol:\n┌─────────────────┐\n│ __iter__()      │ → Returns iterator object\n│ __next__()      │ → Returns next value or raises StopIteration\n└─────────────────┘\n\nAsync Iterator Protocol:\n┌─────────────────┐\n│ __aiter__()     │ → Returns async iterator object\n│ __anext__()     │ → Coroutine that returns next value or raises StopAsyncIteration\n└─────────────────┘\n</code></pre></div><div><pre><code></code></pre></div><div><pre><code>Countdown:\n  5\n  4\n  3\n  2\n  1\nDone!\n</code></pre></div><p>\"So  and  are like  and , but async,\" Timothy summarized.</p><p>\"Right. And notice  is a coroutine—it uses  and can  things.\"</p><h2>\n  \n  \n  When to Use Async Generators vs Classes\n</h2><p>\"Do I always need to write the full protocol with  and ?\" Timothy asked.</p><p>\"Rarely,\" Margaret said. \"Most of the time, async generators are simpler and cleaner.\"</p><div><pre><code></code></pre></div><div><pre><code>Generator approach:\n  3\n  2\n  1\n\nIterator protocol approach:\n  3\n  2\n  1\n</code></pre></div><p>\"When should I use the full protocol?\" Timothy asked.</p><div><pre><code>Use Async Generators when:\n- Simple iteration logic\n- Stateless or simple state\n- Don't need multiple iterators from one object\n- Example: Reading lines, processing batches\n\nUse Full Protocol when:\n- Complex state management\n- Need to separate iterator from iterable\n- Want multiple independent iterators\n- Need special initialization/cleanup\n- Example: Database cursors, connection pools\n</code></pre></div><h2>\n  \n  \n  Real-World Pattern: Batching Data\n</h2><p>Margaret showed a practical example. \"Here's a common pattern: processing data in batches.\"</p><div><pre><code></code></pre></div><div><pre><code>Processing 10 users in batches of 3\n  Processing batch: ['user_0', 'user_1', 'user_2']\n  Processing batch: ['user_3', 'user_4', 'user_5']\n  Processing batch: ['user_6', 'user_7', 'user_8']\n  Processing batch: ['user_9']\nAll users processed\n</code></pre></div><h2>\n  \n  \n  Async Generators Can Be Infinite\n</h2><p>\"One powerful pattern,\" Margaret said, \"is infinite async generators.\"</p><div><pre><code></code></pre></div><div><pre><code>Monitoring event stream...\n  Event 1: heartbeat at 14:30:45\n  Event 2: heartbeat at 14:30:45\n  Event 3: heartbeat at 14:30:46\n  Event 4: heartbeat at 14:30:46\n  Event 5: heartbeat at 14:30:47\nStopping after 5 events\n</code></pre></div><p>\"The generator never ends, but we can break out of the  loop whenever we want,\" Margaret explained.</p><h2>\n  \n  \n  Generator Cleanup and Resource Management\n</h2><p>\"One important detail,\" Margaret added. \"When you break out of an  loop, Python automatically calls  on the generator to clean up any resources. If you're using an async generator directly without , you need to close it manually.\"</p><p>She typed a quick example:</p><div><pre><code></code></pre></div><div><pre><code>Using async for:\nOpening resource\nCleaning up resource\n\nManual usage:\nOpening resource\n0\n1\nCleaning up resource\n</code></pre></div><p>\"So  handles cleanup automatically, but if I'm calling  directly, I need to call ?\" Timothy asked.</p><p>\"Exactly. It's like context managers—most of the time you use the  statement and don't think about cleanup. But if you need manual control, you're responsible for cleanup.\"</p><h2>\n  \n  \n  Combining Multiple Async Iterators\n</h2><p>\"Can I iterate over multiple async sources at once?\" Timothy asked.</p><p>\"You can, but you need to be careful,\" Margaret said. She showed two approaches:</p><div><pre><code></code></pre></div><div><pre><code>Sequential approach:\n  A-0\n  A-1\n  A-2\n  B-0\n  B-1\n  B-2\n\nConcurrent approach:\n  A-0\n  B-0\n  A-1\n  A-2\n  B-1\n  B-2\n</code></pre></div><p>\"Sequential waits for each source to finish,\" Margaret pointed out. \"Concurrent processes them in parallel.\"</p><h2>\n  \n  \n  The Key Insight: Cooperative Yielding\n</h2><p>They were approaching the afternoon break. Margaret summarized the core concept with a final diagram:</p><div><pre><code>The Core Difference:\n\nRegular for loop:\n┌─────────────────────────────┐\n│ for item in generator():    │\n│     # Never yields control  │ → Blocks event loop\n│     process(item)           │\n└─────────────────────────────┘\n\nAsync for loop:\n┌──────────────────────────────┐\n│ async for item in gen():     │\n│     # Yields at each await   │ → Cooperates with event loop\n│     await process(item)      │\n└──────────────────────────────┘\n\nThe \"async for\" gives other tasks chances to run between iterations.\n</code></pre></div><p>Timothy closed his laptop, understanding how async iteration enables non-blocking loops in async code.</p><p><strong>Regular for loops block the event loop</strong>: When they contain synchronous blocking operations (I/O, sleep, CPU work).</p><p><strong>async for enables cooperative iteration</strong>: Allows the event loop to switch between tasks during iteration.</p><p><strong>Async generators use async def + yield</strong>: Combine  with  to create async generators.</p><p><strong>Can await inside async generators</strong>: Unlike regular generators, async generators can use .</p><p>: <code>async for item in generator():</code> mirrors regular  loops.</p><p><strong>The async iterator protocol</strong>: Uses  and  instead of  and .</p><p>: Returns an awaitable that produces the next value.</p><p><strong>StopAsyncIteration ends iteration</strong>: Like  but for async iterators.</p><p><strong>Async generators are usually simpler</strong>: Prefer them over full protocol implementation for most cases.</p><p><strong>Use full protocol for complex state</strong>: When you need fine-grained control over iteration.</p><p><strong>Perfect for streaming data</strong>: Reading large files, API responses, database results without blocking.</p><p><strong>Python's built-in open() blocks</strong>: Use libraries like aiofiles for true async file I/O.</p><p><strong>Async file I/O requires external libraries</strong>: Python's standard library doesn't include async file operations.</p><p><strong>asyncio.to_thread() is a workaround</strong>: For unavoidable blocking code, but async operations are better.</p><p><strong>Batching pattern is common</strong>: Process data in chunks asynchronously.</p><p><strong>Infinite generators are useful</strong>: Create endless streams that consumers can break out of.</p><p><strong>Can combine with gather for concurrency</strong>: Process multiple async iterators simultaneously.</p><p><strong>Each iteration yields control</strong>: The event loop can switch tasks between iterations.</p><p>: Exit  loops with  just like regular loops.</p><p><strong>async for handles cleanup automatically</strong>: Calls  when exiting the loop.</p><p><strong>Manual usage requires manual cleanup</strong>: Call  if using  directly.</p><p><strong>Resource management is important</strong>: Use try/finally in generators for proper cleanup.</p><p>: Async comprehensions, streaming APIs, database cursors, and advanced patterns for real-world async iteration.</p><h2>\n  \n  \n  Understanding Async Iteration\n</h2><p>Timothy had discovered how to iterate over data in async code without blocking the event loop.</p><p>He learned that regular  loops can block when they contain synchronous operations that never yield control, that  solves this by cooperating with the event loop at each iteration, and that async generators combine  with  to create non-blocking iteration.</p><p>Margaret showed him that the async iterator protocol mirrors the regular iterator protocol but with coroutines, that async generators are usually simpler than implementing the full protocol, and that proper cleanup with  is important for resource management.</p><p>Most importantly, Timothy understood that Python's built-in file operations are synchronous and require libraries like aiofiles for truly async I/O, that  can be used as a workaround for unavoidable blocking code, but that async generators are the proper, scalable solution for I/O operations.</p><p>The library was quiet in the afternoon. As Timothy packed up, his blocking log analyzer was now a streaming async iterator, and his web server could handle requests smoothly even during long-running operations.</p><p>Next in this series: The Async Iterator: Streaming Data and Real-World Patterns</p>","contentLength":13117,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-24e3","date":1761934770,"author":"Vibe YouTube","guid":323683,"unread":true,"content":"<p>In this video, Tim uncovers three modern Python features you rarely see in the wild: the match statement for elegant pattern matching, dataclasses to cut down boilerplate when defining classes, and the power of positional-only and keyword-only arguments to fine-tune function signatures.</p><p>He also points you to a free Brilliant course (with a 20% Premium discount) for more practice, and pitches his DevLaunch mentorship program if you’re ready to build real-world projects and snag that dream dev job.</p>","contentLength":502,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-j38","date":1761934197,"author":"Vibe YouTube","guid":323682,"unread":true,"content":"<p><strong>3 Unique Python Features You NEED To Know</strong> dives into three modern Python tricks that often fly under the radar: the new  statement for cleaner pattern matching, handy  to cut boilerplate when defining classes, and the power of positional-only &amp; keyword-only function arguments for clearer APIs.  </p><p>Along the way, there’s a sweet deal on Brilliant (20% off Premium) and a shout-out to Tim’s DevLaunch mentorship (real-world projects, zero fluff) if you’re ready to level up beyond tutorials.</p>","contentLength":494,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 18 of Documentating my learning journey","url":"https://dev.to/james_kabuga/day-18-of-documentating-my-learning-journey-62o","date":1761931221,"author":"James Kabuga","guid":323663,"unread":true,"content":"<p>1.Built a number guessing game project.</p><p>\n1.A user is asked to enter a number in a specified range like 1 to 10<p>\n2.The system generates a random number and tries to match with the input of the user.</p>\n3.Depending on the input the user is aked to either guess above or below until the correct answer.<p>\n4.We output a message telling the user that they guessed right within a certain number of attempts.</p></p><p>\n1.We import random its inbuilt in python.We use it to generate a random number which we will match it aginst the users input.<p>\n2.We pass the module to a certain variable and use a method randint() inside here we specify the paramters like 1 to 10</p>\n3.We introduce a user to the game with their name we will use impliment the use of<p>\n a)input() to ask the user to enter their name and a random number.</p>\n b)formatting using f-strings for the print statement<p>\n4.We now use a while loop and specifically a while loop that never terminates until a certain cindition is met that is while true:</p>\n5.Inside the loop we use decision structures such as if-else.<p>\n6.We 1st check if what the user has entered is integer by using isdigit()</p>\n7.Else the user is asked to renter the number.<p>\n8.Otherwise if what the user has entered is a number we skip using continue and  convert it to an integer and increae the counter by 1.</p>\n9.We now much the user input with the random number generated by our system which is stored in a certain variable.<p>\n10.Depending on the users input we ask them to renter the number by telling them if its too high or too low to the random number.</p>\n11.On guessing right we now print a message telling them they are correct in acertain number of attempts. </p><p>\nI'll prepare what ill be learning the next week.</p><p>1.I'll create first a README.md with a summary of qeek-two content.\n2.Open a pull request and merge my week-two content to main.<p>\n3.Update the python-concepts README.md file with topics I learnt.</p>\n4.Update my local repo to make sure its upto date with the one on Github.<p>\n3.Create a new branch week-three for coming week.</p>\n4.Now introduce a new concept by creating an issue with each day milestones.<p>\n5.I'll be ticking each day milestones and linking each day commit message with the issue.</p></p>","contentLength":2181,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How Telegram Bots Use APIs to Build Automated Microtask Systems","url":"https://dev.to/wt_grouplinks1_ed48c82f/how-telegram-bots-use-apis-to-build-automated-microtask-systems-35ck","date":1761931112,"author":"Wt group links 1","guid":323662,"unread":true,"content":"<p>Telegram isn’t just a messaging app anymore — it has evolved into a powerful ecosystem for developers. With its <strong>Bot API and automation features</strong>, creators are now building small but efficient microtask systems that process real-time data, validate user actions, and even manage digital workflows automatically.</p><p>In this article, we’ll explore <strong>how Telegram bots handle automated task flows</strong>, how developers use APIs to design these systems, and what makes Telegram a preferred platform for lightweight automation.</p><h2>\n  \n  \n  1. Understanding Telegram-Based Microtask Systems\n</h2><p>A  is an automated framework that distributes small digital actions — such as data validation, review submission, or information tagging — to users via a bot interface.</p><p>Instead of using traditional web dashboards, these actions happen directly inside a Telegram chat.\nThat’s possible because of Telegram’s , which allows developers to:</p><ul><li>Send and receive structured data via HTTP requests.</li><li>Automate responses based on user input.</li><li>Connect backend logic through webhooks or polling methods.</li></ul><p>This combination creates a fast, chat-based automation system that works like a lightweight SaaS tool — without requiring complex frontend frameworks.</p><h2>\n  \n  \n  2. How Automation Works Step-by-Step\n</h2><p>Here’s a simplified workflow of how a Telegram bot handles microtasks:</p><ol><li> The user sends a command ( or ).</li><li> The bot queries a backend or API for available tasks.</li><li> The user performs the requested action and sends proof or feedback.</li><li> The backend logic validates the submission (e.g., via regex, screenshot, or metadata).</li><li> The bot automatically updates the user with completion status or reward points.</li></ol><p>Developers often integrate services like , , or  to store and track user progress seamlessly.</p><h2>\n  \n  \n  3. Why Developers Choose Telegram for Automation\n</h2><p>Telegram offers several advantages compared to other platforms:</p><ul><li> No approval process required — start instantly.</li><li> Ideal for real-time updates and instant notifications.</li><li> Works on Android, iOS, Web, and Desktop simultaneously.</li><li><strong>Simple Backend Integration:</strong> Can easily connect with Python, Node.js, or PHP frameworks.</li></ul><p>For small-scale automation or rapid prototyping, Telegram bots are faster and cheaper to deploy than custom apps.</p><h2>\n  \n  \n  4. Data Handling and Security Best Practices\n</h2><p>When building automation systems for public users, security is crucial.\nHere are a few best practices developers should always follow:</p><ul><li>Never expose  in public repositories.</li><li>Use  for sensitive credentials.</li><li>Log only necessary user data (avoid storing chat messages).</li><li>Implement  to prevent spam or flooding.</li><li>Use SSL (HTTPS) for webhooks to protect communication.</li></ul><p>Security-first design ensures user trust and long-term stability for your bot.</p><h2>\n  \n  \n  5. Case Study: Real-Time Task Automation Using Telegram\n</h2><p>In a recent example, a Telegram-based system was developed to assign, verify, and track digital actions automatically — such as data validation or feedback collection.\nUsing a combination of the  and backend automation, developers could reduce manual verification time by over 70%.</p><p><em>(Note: The article focuses on API structure and task automation, not earning or promotional systems.)</em></p><h2>\n  \n  \n  6. The Future of Chat-Based Automation\n</h2><p>The growing popularity of Telegram automation signals a shift in how developers build small, scalable, and user-friendly systems.</p><p>With the rise of , , and , Telegram bots can soon serve as front-end gateways for data-driven workflows — from task automation to customer support.</p><p>Whether you’re a beginner experimenting with APIs or an experienced developer building automation frameworks, Telegram provides an open playground to test your ideas quickly.</p><p>Telegram’s Bot API proves that  can be both powerful and lightweight.\nDevelopers can design complex workflows — assigning tasks, validating actions, and managing responses — all within a single bot.</p><p>If you’re interested in real-world API development or automation systems, Telegram is an excellent starting point for building scalable, API-driven solutions.</p>","contentLength":4031,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 17 of documenting my learning journey","url":"https://dev.to/james_kabuga/day-17-of-documenting-my-learning-journey-47g3","date":1761929804,"author":"James Kabuga","guid":323636,"unread":true,"content":"<p>\n1.Learnt how to impliment break and continue statements in python.<p>\n2.Tracked committed and pushed everything to Github</p></p><p>Break statement is used when we want to 'break' from a certain loop when a certain cindition is met.\nBreak statement mostly used in a while loop. </p><blockquote><p>while true: \n   Block of code</p></blockquote><p>That kind of loop would never stop iterating unless we use a break statement to indicate that when that condition is met we stop the iteration.</p><p>Continue statement is used to skip a certain line of code.</p><blockquote><p>while i &lt;= 10:\n    if i == 7:\n        continue\n  i += 1 </p><p>In this loop we will be printing numbers 0 to 10 but at 7 we will skip printing 7 because of the continue statement.</p></blockquote><p>\n1.Python refresher series by Bonaventure Ogeto <p>\n2.Github for documenting the python series journey by pushing to public repo python-concepts </p></p><p>\nI'll be building a number guessing game to compliment what I have learnt on that week</p>","contentLength":895,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Django Weblog: Django Developers Survey 2025 results","url":"https://www.djangoproject.com/weblog/2025/oct/31/django-developers-survey-2025-results/","date":1761929230,"author":"","guid":323701,"unread":true,"content":"<p>The full report contains infographics, quotes, and dedicated sections so you can easily navigate through all the results. There is also a <a href=\"https://blog.jetbrains.com/pycharm/2025/10/the-state-of-django-2025/\">The State of Django 2025</a> blog post highlighting key Django trends in 2025 and actionable ideas for your own Django development.</p>","contentLength":265,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Whisper Menu Bar","url":"https://dev.to/0asa/whisper-menu-bar-3fd4","date":1761928435,"author":"Vincent Botta","guid":323635,"unread":true,"content":"<p>A minimal, clean speech-to-text menu bar application for macOS using OpenAI's Whisper. You can download the script <a href=\"https://gist.github.com/0asa/3861da03d1f49106e8073416b39a32bd\" rel=\"noopener noreferrer\">here</a>.</p><ul><li>🎤 : Hold Option key to record, release to transcribe</li><li>📋 : Transcribed text automatically copied to clipboard</li><li>🔄 : Switch between tiny, base, small, and medium models</li><li>🎯 : Simple interface, ~300 lines of code</li></ul><ul><li>macOS (tested on macOS 10.15+)</li><li>Microphone access permissions</li></ul><ol><li><p>Copy the  somewhere</p></li></ol><div><pre><code>   uv run whisper-push-to-talk.py\n</code></pre></div><p>: On macOS, you may need to install PortAudio first for PyAudio:</p><ol><li>Grant microphone permissions to Terminal/your Python app when prompted</li></ol><ol><li>Show a microphone icon (🎤) in your menu bar</li><li>Load the Whisper model in the background (first run may take a moment)</li><li>Display \"Ready\" when ready to use</li></ol><ul><li>: Hold to record, release to transcribe, <strong>Text appears in clipboard</strong> → Ready to paste anywhere</li><li>Click the menu bar icon → Model → Select your preferred model:\n\n<ul><li>: Fastest, lowest accuracy (~1GB)</li><li>: Good balance (default, ~1GB)</li><li>: Better accuracy (~2GB)</li><li>: Best accuracy (~5GB)</li></ul></li></ul><p>Click the menu bar icon → Quit</p><p>MIT License - Feel free to modify and distribute</p><p>Built with OpenAI's Whisper model for speech recognition.</p>","contentLength":1136,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Hallowe'en Unicorn","url":"https://dev.to/djchadderton/halloween-unicorn-3pl3","date":1761927967,"author":"djchadderton","guid":323634,"unread":true,"content":"<p>After tinkering with the Pimoroni Galactic Unicorn LED panel for almost a year, I decided to put together a few different techniques into an animated display for Hallowe'en. I've combined custom sprite animation with scrolling, bordered text, fading between colours and use of bounding boxes to only target one part of the screen.</p><p>First of all, flash the Pico with the <a href=\"https://github.com/pimoroni/pimoroni-pico\" rel=\"noopener noreferrer\">Pimoroni custom build of MicroPython</a>, which has built-in support for controlling all of the features of the device as well as the PicoGraphics and Bitbank PNGdec libraries.</p><p>The main file imports the standard libraries, initiates the classes needed for the display, creates constants for the display width and height and defines some pen colours:</p><div><pre><code></code></pre></div><p>I've used the PNG sprite class I created in my <a href=\"https://dev.to/djchadderton/pico-display-pack-28-2co7\">article on the Pimoroni Display Pack</a>, which has a similar API to the built-in PicoGraphics sprite but uses PNGs directly rather than converting them, which may cause memory problems for larger images, but with the images I used I had no such issues on the Pico 2 version of the Unicorn.</p><p>Here is the class, which I put in its own file:</p><div><pre><code></code></pre></div><p>A spritesheet should be a PNG file in which each sprite image has the same width and the same height. They should be side-by-side on the PNG image with no gaps between them, but there can also be multiple rows.</p><p>The three spritesheets used here are defined like this:</p><div><pre><code></code></pre></div><p>The display variable is passed in, initiated from the PicoGraphics library, then the name of the image file as a string, then the width of each image in the spritesheet in pixels, then the height.</p><p>To grab a single image from the spritesheet and display it, you can  use the  method like so:</p><div><pre><code></code></pre></div><p>Where  is the number of the sprite counting from the left and starting from zero on the spritesheet,  is the number counting down,  is the number of pixels from the left of the screen where it should be placed (again from zero) and  the number of pixels from the top.</p><p> is optional and defaults to 1. It allows scaling up of the image only and only in whole numbers.</p><p>There are a few functions that perform useful tasks defined in the main file.</p><p>, as the name suggests, clears the screen to a particular colour, taking a  object, and immediately updates the display.</p><div><pre><code></code></pre></div><p> will take two colours and fade between them, taking as individual parameters the R, G and B values of the colours to move from and to, the number of steps to use between them and the delay between each step (optional, defaults to 0.1 seconds).</p><div><pre><code></code></pre></div><p>The final function plays a sequence defined in a separate variable. I put these sequences in a separate file and imported them:</p><div><pre><code></code></pre></div><p>Here is the sequence player:</p><div><pre><code></code></pre></div><p>It takes a list of frames in the sequence, a PNGSprite object and a background colour as a Pen object.</p><p>The frames in the sequence list are dictionaries that must have  and  entries and can also have an optional .</p><p> is a list consisting of a tuple for each object that should be on screen for that frame. There should be four integers in that tuple: the number across in the spritesheet of the desired sprite, the number down, the position across the screen from the left where it should be and the position down.</p><p>The  is the time that this frame lingers on the screen before moving to the next frame.</p><p> is an integer allowing the image to be scaled up on that frame, defaulting to 1</p><div><pre><code></code></pre></div><p>This system works well if all sprites are from the spritesheet but falls down if you need to mix images from different sheets.</p><p>The different sequences are played in a  infinite loop.</p><p>The ghost sequence is pretty straightforward, if a little tedious to programme in individual steps. The spritesheet has Pacman-style ghosts in three different colours on three rows, each with two images of them going left and two going right and a slight animation between the two.</p><div><pre><code></code></pre></div><p>This uses the fade to colour function then utilises a spritesheet of a single image that flies past a couple of times then uses scaling to make it seem like it flies at the screen.</p><div><pre><code></code></pre></div><p>This one is a bit more complicated. Firstly a sequence is played of the pumpkin appearing and animating its mouth:</p><div><pre><code></code></pre></div><p>The blank area next to the pumpkin is defined as a clipping area so the text animation will not bleed into the pumpkin.</p><div><pre><code></code></pre></div><p>The parameters for the scrolling text are defined:</p><div><pre><code></code></pre></div><p>In a loop, the text is drawn with a shadow appearing from the right and gradually scrolling off to the left.</p><div><pre><code></code></pre></div><p>The clipping bounds are removed and the pumpkin moves through a different sequence, crossing the screen, before the whole loop goes back to the beginning.</p><div><pre><code></code></pre></div><p>I hope you have fun playing around with some of the ideas. I was wondering about turning the display to the vertical for fireworks for 5 November (Bonfire Night here in the UK), then there's Christmas...</p>","contentLength":4672,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-6ib","date":1761926887,"author":"Vibe YouTube","guid":323633,"unread":true,"content":"<p>In this video, Tim showcases three modern Python features: the match statement for pattern matching, dataclasses for boilerplate-free classes, and positional-only &amp; keyword-only arguments to enforce cleaner function signatures. Jump to each section with the handy timestamps and start coding smarter, not harder.</p><p>He also offers a 20% discount on Brilliant.org Premium for deeper dives, plus details on his DevLaunch mentorship program to help you build real-world projects and land that dream job.</p>","contentLength":496,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"📅 Day 58 of My Data Analytics Journey","url":"https://dev.to/ramyacse/day-58-of-my-data-analytics-journey-3dk","date":1761922662,"author":"Ramya .C","guid":323606,"unread":true,"content":"<p>Today I dived into <strong>Linear Algebra concepts in NumPy</strong> 🤓\nThese operations are essential in <strong>Machine Learning, Data Science, and Deep Learning</strong> because they help us work with vectors, matrices, and transformations used in models like *</p><h2>\n  \n  \n  ✅ 1️⃣ Dot Product ()\n</h2><p>Multiplies two vectors/matrices. Used in ML for calculating .</p><div><pre><code></code></pre></div><blockquote><p>Calculation → (1*3 + 2*4) = </p></blockquote><h2>\n  \n  \n  ✅ 2️⃣ Inner Product ()\n</h2><p>Same as dot product for 1D vectors, but behaves differently for higher dimensions.</p><div><pre><code></code></pre></div><blockquote><p>For simple vectors, </p></blockquote><h2>\n  \n  \n  ✅ 3️⃣ Outer Product ()\n</h2><p>Creates a matrix by multiplying each element of a vector with another.</p><h2>\n  \n  \n  ✅ 4️⃣ Determinant ()\n</h2><p>Determines if a matrix is invertible (used in solving linear equations)</p><div><pre><code></code></pre></div><h2>\n  \n  \n  ✅ 5️⃣ Solve Linear Equations ()\n</h2><div><pre><code></code></pre></div><h2>\n  \n  \n  ✅ 6️⃣ Inverse of Matrix ()\n</h2><p>Computes matrix inverse (important in ML algorithms like normal equation)</p><div><pre><code></code></pre></div><div><table><tbody><tr><td>Feature-weight multiplication</td></tr><tr></tr><tr><td>Builds matrix from vectors</td></tr><tr></tr><tr></tr><tr></tr><tr></tr></tbody></table></div><p>These concepts are used in:</p><ul><li>Machine Learning Model training</li><li>Deep Learning (Neural Networks)</li><li>PCA / Dimensionality Reduction</li></ul><p>Today was a strong foundation day 💪</p><div><pre><code>GitHub Project: https://github.com/ramyacse21/your-repo-link\n#RamyaAnalyticsJourney\n``\n\n\n</code></pre></div>","contentLength":1177,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-5227","date":1761919774,"author":"Vibe YouTube","guid":323578,"unread":true,"content":"<p><em>3 Unique Python Features You NEED To Know</em> dives into three under-the-radar tools that’ll level up your code: the new  statement for cleaner branching, lightweight  to slash boilerplate, and enforcing your API with positional- and keyword-only arguments. Tim walks you through each feature, shows real examples, and explains why modern Python is all about readability and simplicity.</p><p>Along the way, he drops a 20% off code for Brilliant Premium so you can practice interactively, and plugs DevLaunch—his mentorship program for hands-on projects and job-ready guidance. Jump to the timestamps if you want to skip straight to your favorite feature!</p>","contentLength":648,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"PyCon: PyCon US 2026 - Call for Proposals Now Open!","url":"https://pycon.blogspot.com/2025/10/pycon-us-2026-call-for-proposals-now.html","date":1761919338,"author":"","guid":323700,"unread":true,"content":"PyCon US is heading to Long Beach, CA, located in the heart of sunny Southern California, right along the Pacific Ocean. We will continue to return in person, with&nbsp;<a href=\"https://us.pycon.org/2026/about/health-safety-guidelines/\">Health and Safety Guidelines</a>&nbsp;in place.<p>PyCon US 2026 will be held at the</p><a href=\"https://www.longbeachcc.com/\"> Long Beach Convention and Entertainment Center</a>, in downtown Long Beach, CA on the following dates:<ul><li>May 13-14, 2026 - Tutorials</li><li>May 14-15, 2026 - Sponsor Presentations</li><li>May 15-17, 2026 - Main Conference Days—Keynotes, Talks, Charlas, Expo Hall, and more</li><li>May 18-19, 2026 - Sprints</li></ul><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjl6iY6RGcKBBybP-V5wUxJ1GuKoyPF7XXLsvCdVQFFQoL2ZR5eXqsaLsQncqnuIBhFvdRN2pElKBi6L1NV5Cm79tQpSFnYRMx8wKYCzKvqygrXcEDppZumGDzSOsc8LAZKPA_D6Ig06ZWNINp-ymsjyEsO8LJqQauRY4Hq7-01LQBwZnrAH_Lh/s1280/PyConUS2025-SneakPeek-CWLCREATIVESINC-143.jpg\"><img border=\"0\" height=\"225\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjl6iY6RGcKBBybP-V5wUxJ1GuKoyPF7XXLsvCdVQFFQoL2ZR5eXqsaLsQncqnuIBhFvdRN2pElKBi6L1NV5Cm79tQpSFnYRMx8wKYCzKvqygrXcEDppZumGDzSOsc8LAZKPA_D6Ig06ZWNINp-ymsjyEsO8LJqQauRY4Hq7-01LQBwZnrAH_Lh/w285-h225/PyConUS2025-SneakPeek-CWLCREATIVESINC-143.jpg\" width=\"285\"></a><div><div>You can now head over to the <a href=\"http://us.pycon.org/2026/\">PyCon US 2026 website</a> for all the conference details and more information about our sponsorship program.</div><div>This year’s PyCon US design blends the vibrant landscape and energy of Long Beach through a synthwave aesthetic, reflecting the creativity of our community and a bright, forward-looking future for Python.</div></div><div>We’re excited to collaborate with designers <a href=\"https://meanapasc.myportfolio.com/\">Meanapas.C</a> and <a href=\"https://tiles.bio/humblejack\">Hamza Haj Taieb</a>, whose illustrations and designs brought the PyCon US 2026 website to life. The design is brought together with the coordination of Georgi K and implemented by <a href=\"https://yupgup.com/\">YupGup</a>.</div><div><h2>PyCon US Call for Proposals is Now Open</h2></div><div>We need beginner, intermediate, and advanced proposals on all sorts of topics— and beginner, intermediate, and advanced speakers to give said presentations. You don’t need to be a 20-year veteran who has spoken at dozens of conferences. On all fronts, we need all types of people. Our community is comprised of a diverse set of people with unique skill sets, and we want our conference program to be a true reflection of that diversity.<p>PyCon US is introducing two dedicated Talk tracks to the schedule this year, “The Future of AI with Python” and “Trailblazing Python Security”. For more information and how to submit your proposal, </p><a href=\"https://us.pycon.org/2026/speaking/guidelines/\">visit this page</a>.</div><div>For the new and first-time speakers, be sure to take advantage of the speaker mentorship program where you can be matched with experienced speakers who can help you with crafting your proposal. Check out the info on our <a href=\"https://us.pycon.org/2026/speaking/mentorship/\">Proposal Mentorship Program page</a>.</div><div>For more information on where and how to submit your proposal, visit the <a href=\"https://us.pycon.org/2026/speaking/guidelines/\">Proposal Guidelines page</a> on the PyCon US 2026 website.</div><div><h2>Sponsorship Has Tremendous Impact</h2><div>Sponsors are what make PyCon US and the Python Software Foundation possible. PyCon US is the main source of revenue for the PSF, the non-profit behind the Python language and the <a href=\"https://pypi.org/\">Python Packaging Index (PyPI)</a>, and the hub for the Python community.</div><div>PyCon US is the largest and longest-running Python gathering globally, with a diverse group of highly engaged attendees, many of whom you won’t find at other conferences. We’re excited to be able to provide our sponsors with opportunities to connect with and support the Python community. You’ll be face-to-face with talented developers, qualified recruits, and potential customers, access a large and diverse audience, as well as elevate your visibility and corporate identity within the Python community.</div><h3>What you can expect when you sponsor PyCon US and the PSF:</h3><ul><li>Reach - Access to 2500+ attendees interested in your products and services and generate qualified leads.</li><li>Brand strength - Be part of the biggest and most prestigious Python conference in the world and support the nonprofit organization behind the Python language.</li><li>Connections - Networking with attendees in person to create connections and provide detailed information about your products and services.</li><li>Recruiting - Access to qualified job candidates. If you’re hiring, there’s no better place to find Python developers than PyCon US.</li><li>12 months of benefits - Reach the Python community during PyCon US and beyond, with options for recognition on <a href=\"http://python.org\">Python.org</a>, <a href=\"http://pypi.org\">PyPI.org</a>, and more.</li></ul>Because of the generosity of our sponsors, the Python Software Foundation is able to continually improve our support of Python and its community. Read more about the PSF <a href=\"https://us.pycon.org/2026/about/psf/\">here </a>and in our most recent <a href=\"https://www.python.org/psf/annual-report/2024/\">Annual Impact Report</a>. You can help us ensure the Python ecosystem thrives for years to come.</div><div>If you have any questions about sponsoring PyCon US and the PSF, please contact us at&nbsp;<a href=\"mailto:sponsors@python.org\">sponsors@python.org</a>.</div><div><div>As we get closer to the event, the <a href=\"https://us.pycon.org/2026/\">conference website</a> is where you’ll find details for our call for proposals, registration launch, venue information, and everything PyCon US related!</div></div>","contentLength":4286,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 20: Python Knapsack Problem – Solve 0/1 Optimization with Dynamic Programming","url":"https://dev.to/shahrouzlogs/day-20-python-knapsack-problem-solve-01-optimization-with-dynamic-programming-23ln","date":1761917698,"author":"Shahrouz Nikseresht","guid":323554,"unread":true,"content":"<p>Welcome to Day 20 of the  journey! Today’s intermediate challenge dives deep into <strong>solving the 0/1 Knapsack problem using Dynamic Programming (DP)</strong> in Python. This classic optimization puzzle teaches you how to maximize value under constraints, perfect for building intuition around algorithms, nested loops, and table-based DP. Whether you're prepping for coding interviews or exploring algorithmic thinking, this \"Python Knapsack DP\" guide breaks down the solution step by step, so you can master this essential technique.</p><h2>\n  \n  \n  💡 Key Takeaways from Day 20: Knapsack with Dynamic Programming\n</h2><p>Given a list of item weights, their values, and a backpack capacity, the goal is to <strong>select items (take or skip each once)</strong> to achieve the  without exceeding the weight limit. We use a  to store subproblem results and build the optimal answer. Let’s unpack the core ideas: , , and .</p><h3>\n  \n  \n  1. DP Table: Building Solutions from Subproblems\n</h3><p>The heart of the solution is a 2D list  where:</p><ul><li> = number of items considered (0 to n)</li><li> = current capacity (0 to capacity)</li><li> = max value using first  items with capacity </li></ul><p>We initialize a table of size  with zeros:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>This nested loop structure is classic DP, each cell depends only on previous rows. For our example (, , ), the final answer sits at .</p><h3>\n  \n  \n  2. Decision Logic: Take or Skip?\n</h3><p>For each item  and capacity , we decide:</p><div><pre><code></code></pre></div><ul><li>: Add current value + best from previous items with reduced capacity</li><li>: Carry forward the best without this item</li></ul><p>This  captures the essence of optimization. For instance, when  (first item, weight=2, value=10) and , we can take it: , or skip:  → choose 10.</p><h3>\n  \n  \n  3. Final Answer: Just One Cell\n</h3><p>After filling the table, the solution is:</p><div><pre><code></code></pre></div><p>Output: <code>Maximum value for capacity 5: 40</code><p>\n(Select item 4: weight 5, value 40)</p></p><p>Even though item 4 fits exactly, the DP explores all combos (like 2+3=5 → 10+20=30) and correctly picks the best.</p><h2>\n  \n  \n  🎯 Summary and Reflections\n</h2><p>This Knapsack challenge revealed how <strong>systematic subproblem solving</strong> turns a complex decision into a fill-in-the-blanks exercise. It made me value:</p><ul><li>: Each cell builds on prior results, no recomputation.</li><li>:  as a universal optimization pattern.</li><li>: Works for small n and capacity; foundation for larger problems.</li></ul><p>The \"aha\" moment? Seeing the table grow like a decision tree, but without explosion. For extensions, I considered reconstructing the selected items (backtrack from ) or optimizing space to O(capacity).</p><p>: Use 1D DP array ( and ) to reduce space from O(n×W) to O(W), or solve unbounded knapsack. How do you approach optimization problems? Share your DP insights below!</p><h2>\n  \n  \n  🚀 Next Steps and Resources\n</h2><p>Day 20 leveled up my algorithmic game with real DP muscle. If you're riding the #80DaysOfChallenges wave, did you visualize the table? Add item selection output? Let’s discuss!</p>","contentLength":2812,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Kushal Das: Not anymore a director at the PSF board","url":"https://kushaldas.in/posts/not-anymore-a-director-at-psf.html","date":1761915633,"author":"","guid":323546,"unread":true,"content":"<p>This month I did the last meeting as a director of the Python Software\nFoundation board, the new board already had their first meeting.</p><p>I decided not to rerun in the election as: </p><ul><li>I was a director from 2014 (except 1 year when python's random call decided\nto choose another name), means 10 years and that is long enough.</li><li>Being an immigrant in Sweden means my regular travel is very restricted and\nthat stress effects all parts of life. </li></ul><p>When I first ran in the election I did not think it would continue this long.\nBut, the Python community is amazing and I felt I should continue. But, the\nbrain told me to give out the space to new folks.</p><p>I will continue taking part in all other community activities.</p>","contentLength":698,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"I Built an AI Documentation Generator","url":"https://dev.to/ewayne08/i-built-an-ai-documentation-generator-3idd","date":1761915297,"author":"Ethan Wayne","guid":323529,"unread":true,"content":"<p>Got laid off earlier this year. Instead of just sending out applications, I decided to build something I wish existed: an AI tool that automatically generates documentation from code.</p><p>Connects to your GitHub repos and creates comprehensive documentation using GPT-4 and tree-sitter code parsing.</p><ul><li>Supports 6 languages: Python, JavaScript, Java, Ruby, Go, C++</li><li>Generates API docs, function/class references, and technical guides</li><li>Analyzes code structure intelligently</li></ul><ul><li> React + TypeScript + Vite</li></ul><p>Documentation is tedious. Every developer I know (including myself) hates writing docs but knows they're critical. I wanted to see if AI could actually do this well.</p><p><strong>I need 5 honest beta testers</strong> before I productize this.</p><p>Questions I need answered:</p><ul><li>Does this actually solve a problem?</li><li>What features would make it genuinely useful?</li></ul><p>Built in about a month. Some interesting technical challenges:</p><ul><li>Getting tree-sitter working with all 6 languages (dependency hell)</li><li>Designing prompts that generate useful docs (not just code summaries)</li><li>Handling large repos without timeout issues</li></ul>","contentLength":1050,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building an Intelligent RAG System with Query Routing, Validation and Self-Correction","url":"https://dev.to/exploredataaiml/building-an-intelligent-rag-system-with-query-routing-validation-and-self-correction-2e4k","date":1761914686,"author":"Aniket Hingane","guid":323528,"unread":true,"content":"<p>In my journey building production RAG systems, I discovered that basic retrieval isn't enough. This article shows you how to build an intelligent RAG system with query routing, adaptive retrieval, answer generation, and self-validation. When answers fail quality checks, the system automatically refines and retries. The complete implementation uses FAISS, SentenceTransformers, and Flan-T5 - all running locally with no API dependencies.</p><p>Three months ago, I deployed my first RAG system to production. Within a week, users were complaining about irrelevant answers. The system retrieved documents confidently, generated responses fluently, but gave wrong information about 40% of the time.</p><p>The problem wasn't the retrieval algorithm or the language model. The issue was treating every question the same way and trusting the system blindly. A technical \"how-to\" question needs different retrieval than a \"what is\" definition query. And without validating answers before showing them to users, hallucinations slipped through constantly.</p><p>That frustration led me to build what I'm sharing today - a RAG system that routes queries intelligently, adapts its retrieval strategy, generates grounded answers, and validates them before presenting to users. When validation fails, it refines and retries automatically.</p><p>From my testing over the past three months, this approach improved accuracy from 58% to 83%. More importantly, it caught 73% of hallucinations that would have reached users. The system became reliable enough that I could trust it with customer-facing queries.</p><h2>\n  \n  \n  What's This Article About?\n</h2><p>I'll walk you through building a complete intelligent RAG system with four interconnected components:</p><p> - Classifies incoming questions by type and intent. Technical queries get routed differently than factual lookups or comparative questions. This simple classification step improved my retrieval relevance by 18%.</p><p> - Adapts the number of documents and retrieval strategy based on query type. Technical questions need focused, precise results. Comparative questions need broader context from multiple sources.</p><p> - Creates responses grounded in retrieved context using Flan-T5. The key here is structured prompting that forces the model to use only the provided documents.</p><p> - Checks answer quality through multiple validation rules before presenting to users. Length checks, context grounding verification, query relevance analysis, and hedge word detection catch most bad outputs.</p><p>When validation fails, the system doesn't give up. It broadens the query, increases retrieval count, and tries again. This iterative refinement recovered 68% of initially failed answers in my testing.</p><p>By the end, you'll have a complete working implementation with detailed code explanations. More importantly, you'll understand the design decisions that make this approach effective in production.</p><p>The complete system runs locally without external API dependencies:</p><ul><li> - Core language</li><li> - Vector similarity search (IndexFlatL2 for L2 distance)</li><li> - Document and query embedding (all-MiniLM-L6-v2 model)</li><li><strong>Hugging Face Transformers</strong> - Text generation (Flan-T5-base model)</li><li> - Deep learning backend</li></ul><p>I chose this stack after trying several alternatives. The all-MiniLM-L6-v2 embedding model runs fast on CPU (50ms per query) with good quality. Flan-T5-base provides better instruction following than base T5 while staying reasonably sized at 250M parameters.</p><p>FAISS with L2 distance outperformed cosine similarity in my tests for normalized embeddings - faster lookups and marginally better relevance. Everything runs on a laptop without GPU acceleration.</p><p>From my three months deploying this system in production, here's what the data showed:</p><p>Basic RAG achieved 58% accuracy on our test set of 500 queries. Adding query routing improved that to 67% - an 18% relative improvement. Implementing self-validation caught 73% of hallucinations before they reached users. The complete system with iterative refinement hit 83% accuracy.</p><p>More telling were the user satisfaction metrics. Support ticket volume dropped 35% after deploying the intelligent version. Users stopped complaining about wrong answers and started trusting the system for daily tasks.</p><p>Real-world applications where this approach works well:</p><p><strong>Documentation search systems</strong> - Internal company docs where query types vary widely. Technical implementation questions need different handling than policy lookups.</p><p><strong>Customer support automation</strong> - Self-validation is critical here. You can't afford to give customers confident but wrong answers.</p><p><strong>Research assistance tools</strong> - Comparative questions benefit hugely from adaptive retrieval. Pulling 2 documents won't capture the nuance needed for \"compare X vs Y\" queries.</p><p><strong>Code documentation retrieval</strong> - Technical queries about APIs and functions need precise, focused results. The routing logic handles this well.</p><p>The core problem this solves: generic RAG systems treat all queries identically and have no quality control. They retrieve documents with the same strategy regardless of question type, generate answers without checking accuracy, and present results with false confidence. Users get misled, trust erodes, and the system becomes unreliable.</p><p>Basic RAG fails in predictable ways. After analyzing 200+ failure cases from my production system, I found four recurring patterns:</p><p><strong>Pattern 1: Query Type Mismatch</strong> - A \"how do I implement X\" technical question retrieved conceptual overview documents instead of code examples. The retrieval worked (high similarity scores) but returned the wrong type of content.</p><p><strong>Pattern 2: No Quality Gates</strong> - The system generated fluent, confident-sounding answers that were factually wrong. Without validation, these went straight to users.</p><p><strong>Pattern 3: Retrieval Blind Spots</strong> - Sometimes the most relevant documents weren't in the top-k results. The system should have known it was missing context and tried again with broader retrieval.</p><p><strong>Pattern 4: Single-Shot Limitation</strong> - Users often refine their questions when initial answers fail. The system should do this automatically instead of making users iterate manually.</p><p>These patterns pointed to a clear solution: classify queries, adapt retrieval, validate outputs, and implement automatic refinement loops.</p><p>The flow looks like this:</p><div><pre><code>Query → [Router] → [Smart Retrieval] → [Generator] → [Validator]\n          ↓            ↓                    ↓            ↓\n       (classify)   (adapt k)          (generate)    (check)\n                                                        ↓\n                                              Pass? → Return Answer\n                                              Fail? → Refine &amp; Retry (max 3 iterations)\n</code></pre></div><p>Each component has a specific responsibility. The router classifies query type using keyword matching. Smart retrieval adjusts parameters based on classification. The generator creates grounded answers. The validator checks quality through multiple rules.</p><p>When validation fails, the system refines the query by adding context-requesting language and increases k to retrieve more documents. It retries up to 3 times before giving up.</p><h3>\n  \n  \n  Design Decisions Explained\n</h3><p>In analyzing my query logs, I found distinct patterns:</p><ul><li>Technical questions (containing \"how\", \"implement\", \"code\") needed 2-3 focused documents with code examples</li><li>Factual questions (\"what is\", \"define\") worked best with 3 standard documents</li><li>Comparative questions (\"compare\", \"versus\") required 4+ documents from varied sources</li><li>Procedural questions (\"steps\", \"guide\") needed sequential information from 3 documents</li></ul><p>Routing increased relevance by 18% because each query type got optimized retrieval. The implementation uses simple keyword matching - fast and surprisingly effective. I tried ML-based classification first, but it was slower, required training data, and only improved accuracy by 2% over keywords.</p><p>Production failures taught me harsh lessons. In the first week, users reported answers that:</p><ul><li>Were only 1-2 words (too short to be useful)</li><li>Just rephrased the question without answering it</li><li>Contained information not present in retrieved documents (hallucinations)</li><li>Didn't address what was asked</li><li>Used hedge phrases like \"I'm not sure\" that users treated as facts</li></ul><p>I implemented five validation checks to catch these:</p><ol><li> - Minimum 20 characters ensures substantive answers</li><li> - Answer must have 5+ words not in the question</li><li> - At least 3 content words from answer must appear in retrieved docs</li><li> - At least one query keyword must appear in answer</li><li> - No hedge phrases indicating uncertainty</li></ol><p>These caught 73% of hallucinations in testing. The overlap threshold of 3 keywords came from statistical analysis - below that, answers were usually hallucinated; above 5 was too strict and rejected valid answers.</p><p><strong>Why Iterative Refinement?</strong></p><p>When answers fail validation, giving up wastes the opportunity to self-correct. The refinement strategy:</p><ul><li>Append \"(provide comprehensive details)\" to broaden the query</li><li>Increase k by 1 to retrieve more documents</li><li>Retry generation with additional context</li><li>Limit to 3 iterations to prevent loops</li></ul><p>This recovered 68% of initially failed answers. The iteration limit of 3 came from testing - 2 was too restrictive, 5 showed diminishing returns (only 3% additional recovery).</p><h3>\n  \n  \n  Part 1: Vector Store Foundation\n</h3><p>The vector store handles document indexing and similarity search. This is where I spent time optimizing for speed and accuracy.</p><div><pre><code></code></pre></div><p><strong>My thinking on this implementation:</strong></p><p>I initially tried cosine similarity (IndexFlatIP in FAISS). It was slower and gave marginally worse results for normalized embeddings. L2 distance (IndexFlatL2) with normalized vectors provides consistent, fast lookups.</p><p>The batch encoding optimization was crucial. Processing documents individually took 5 minutes for 10k docs. Batch processing dropped that to 30 seconds - a 10x speedup.</p><p>I also tried quantization (IndexIVFFlat) for larger datasets. It's faster but loses accuracy. For my use case with &lt;100k documents, exhaustive search works fine.</p><h3>\n  \n  \n  Part 2: Query Routing Intelligence\n</h3><p>This component classifies queries and determines retrieval parameters. It's simple but highly effective.</p><div><pre><code></code></pre></div><p>I built an ML classifier using logistic regression first. It required 1000+ labeled training examples, took 200ms per query, and achieved 84% accuracy. The keyword approach runs in &lt;1ms and achieves 82% accuracy.</p><p>For production systems, the 2% accuracy tradeoff is worth the 200x speed improvement and zero training overhead. Plus, debugging keyword rules is trivial compared to understanding model failures.</p><p>The category-specific k values came from failure analysis. Technical queries with k=5 pulled too much conceptual content when users wanted code. Comparative queries with k=2 missed important contrast points.</p><h3>\n  \n  \n  Part 3: Answer Generation with Validation\n</h3><p>The generator creates answers and validates their quality. The validation logic is what makes this system production-ready.</p><div><pre><code></code></pre></div><p><strong>Why these specific validation rules:</strong></p><p>Each check catches a real failure mode I observed in production:</p><p> - Models sometimes output single words or very short phrases. These are never useful answers.</p><p> - Some outputs just rephrase the question without adding information. Requiring 5+ new words filters these.</p><p> - This is the most important check. If the answer doesn't use words from retrieved documents, it's probably hallucinated. The threshold of 3 keywords came from analyzing 200+ examples - below that indicated hallucination, above 5 was too strict.</p><p> - Answers must contain at least one keyword from the question. Otherwise they're off-topic.</p><p> - If the model says \"I'm not sure\", users shouldn't see that output. Better to retry than present uncertainty as fact.</p><h3>\n  \n  \n  Part 4: Orchestrating the Complete System\n</h3><p>The main RAG class coordinates all components and implements iterative refinement.</p><div><pre><code></code></pre></div><p><strong>Design decisions in orchestration:</strong></p><p> - Tested 2, 3, and 5 iterations. Two was too restrictive (missed 15% of recoverable answers). Five showed diminishing returns (only 3% additional recovery vs 3 iterations) while making queries slower.</p><p><strong>Query refinement strategy</strong> - Adding \"(provide comprehensive details)\" signals to retrieval to cast a wider net. Surprisingly effective at pulling more contextual documents.</p><p> - Increasing k by 1 each iteration balances context breadth with noise. Tried k+2 and it pulled too many irrelevant docs.</p><p><strong>Using original question for generation</strong> - The refined query is only for retrieval. Generation uses the original question to maintain answer relevance.</p><p> - Accepted answers get 1.0, rejected answers get 0.5. This lets downstream systems decide how to handle low-confidence outputs.</p><p>Complete project structure:</p><div><pre><code>intelligent-rag-system/\n├── vector_store.py      # FAISS-based storage\n├── query_router.py      # Query classification\n├── generator.py         # Answer generation &amp; validation\n├── rag_system.py        # Main orchestration\n├── demo.py             # Example usage\n├── requirements.txt\n└── README.md\n</code></pre></div><div><pre><code>\npython  venv venv\nvenv/bin/activate  \npip  requirements.txt\n</code></pre></div><div><pre><code>sentence-transformers==2.2.2\ntransformers==4.35.0\ntorch==2.1.0\nfaiss-cpu==1.7.4\nnumpy==1.24.0\n</code></pre></div><div><pre><code></code></pre></div><h3>\n  \n  \n  Example 1: Simple Factual Query\n</h3><div><pre><code></code></pre></div><h3>\n  \n  \n  Example 2: Technical Query with Refinement\n</h3><div><pre><code></code></pre></div><h3>\n  \n  \n  Example 3: Comparative Query\n</h3><div><pre><code></code></pre></div><p>Building this system over three months taught me that intelligent RAG isn't about having the best models - it's about smart orchestration. The routing, validation, and refinement logic uses simple heuristics, yet dramatically outperforms naive RAG.</p><h3>\n  \n  \n  What Worked Exceptionally Well\n</h3><p> was the single biggest improvement. That 18% accuracy gain came from a simple keyword-based classifier that runs in under 1ms. The lesson: understand your query distribution and optimize for it.</p><p> caught 73% of hallucinations. Production deployments can't afford to present users with confident but wrong answers. The five-check validation system ensures quality before outputs reach users.</p><p> recovered 68% of initially failed answers. Giving the system chances to self-correct mimics how humans improve their understanding through iteration.</p><p> - Keyword routing outperformed ML classification. Simple validation rules caught most failures. L2 distance beat complex similarity metrics. Sometimes the straightforward approach wins.</p><p><strong>Add validation from day one</strong> - I deployed without it initially. Big mistake. The debugging time and user complaints could have been avoided.</p><p><strong>More granular query categories</strong> - Four categories work, but I'm seeing patterns suggesting eight would be better. \"Troubleshooting\" and \"Configuration\" queries have distinct needs.</p><p><strong>Implement hybrid retrieval</strong> - Pure semantic search misses exact keyword matches. Adding BM25 would improve recall for terminology-heavy queries.</p><p><strong>Better context formatting</strong> - The prompt template could be smarter about presenting documents based on query type and document length.</p><p><strong>Monitor routing distribution</strong> - If 90% of queries route to one category, your keywords need refinement or you need better category balance.</p><p><strong>Track validation failure reasons</strong> - This tells you where retrieval or generation is weakest. My logs showed \"too short\" was the most common failure - indicating the model needed better prompting.</p><p> - Re-encoding the same documents is wasteful. Added caching and reduced index build time by 10x.</p><p><strong>Set realistic iteration limits</strong> - More than 3 iterations rarely helps and frustrates users with slow responses. Most recoverable failures happen in iterations 2-3.</p><p>Based on failure analysis, here's what would improve the system further:</p><p> - Combine semantic and keyword matching (BM25) for better recall on exact terminology.</p><p> - Use an LLM to generate query variations before retrieval. Helps with underspecified questions.</p><p> - Add a cross-encoder reranker between retrieval and generation for technical queries where precision matters.</p><p> - Some complex questions need multiple retrieval rounds with intermediate reasoning steps.</p><p> - Collect thumbs up/down signals to retrain router keywords and refine validation rules over time.</p><p>The biggest lesson: production RAG success comes from understanding failure modes and building guardrails. The routing, validation, and refinement logic I showed you is straightforward to implement but dramatically improves reliability.</p><p>If you take one thing away, make it this: . Even basic checks (length + context grounding + relevance) will catch most hallucinations and build user trust.</p><p>Start small - add routing with 2-3 categories, implement simple validation, test on your domain, and iterate based on what fails. The system will tell you where it needs improvement.</p><p>From my experience, this approach transforms RAG from an interesting demo into a production-ready system users can trust.</p>","contentLength":16691,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building a Self-Improving RAG System with Smart Query Routing and Answer Validation","url":"https://dev.to/exploredataaiml/building-a-self-improving-rag-system-with-smart-query-routing-and-answer-validation-2gga","date":1761914654,"author":"Aniket Hingane","guid":323527,"unread":true,"content":"<p>In my journey building production RAG systems, I discovered that basic retrieval isn't enough. This article shows you how to build an intelligent RAG system with query routing, adaptive retrieval, answer generation, and self-validation. When answers fail quality checks, the system automatically refines and retries. The complete implementation uses FAISS, SentenceTransformers, and Flan-T5 - all running locally with no API dependencies.</p><p>Three months ago, I deployed my first RAG system to production. Within a week, users were complaining about irrelevant answers. The system retrieved documents confidently, generated responses fluently, but gave wrong information about 40% of the time.</p><p>The problem wasn't the retrieval algorithm or the language model. The issue was treating every question the same way and trusting the system blindly. A technical \"how-to\" question needs different retrieval than a \"what is\" definition query. And without validating answers before showing them to users, hallucinations slipped through constantly.</p><p>That frustration led me to build what I'm sharing today - a RAG system that routes queries intelligently, adapts its retrieval strategy, generates grounded answers, and validates them before presenting to users. When validation fails, it refines and retries automatically.</p><p>From my testing over the past three months, this approach improved accuracy from 58% to 83%. More importantly, it caught 73% of hallucinations that would have reached users. The system became reliable enough that I could trust it with customer-facing queries.</p><h2>\n  \n  \n  What's This Article About?\n</h2><p>I'll walk you through building a complete intelligent RAG system with four interconnected components:</p><p> - Classifies incoming questions by type and intent. Technical queries get routed differently than factual lookups or comparative questions. This simple classification step improved my retrieval relevance by 18%.</p><p> - Adapts the number of documents and retrieval strategy based on query type. Technical questions need focused, precise results. Comparative questions need broader context from multiple sources.</p><p> - Creates responses grounded in retrieved context using Flan-T5. The key here is structured prompting that forces the model to use only the provided documents.</p><p> - Checks answer quality through multiple validation rules before presenting to users. Length checks, context grounding verification, query relevance analysis, and hedge word detection catch most bad outputs.</p><p>When validation fails, the system doesn't give up. It broadens the query, increases retrieval count, and tries again. This iterative refinement recovered 68% of initially failed answers in my testing.</p><p>By the end, you'll have a complete working implementation with detailed code explanations. More importantly, you'll understand the design decisions that make this approach effective in production.</p><p>The complete system runs locally without external API dependencies:</p><ul><li> - Core language</li><li> - Vector similarity search (IndexFlatL2 for L2 distance)</li><li> - Document and query embedding (all-MiniLM-L6-v2 model)</li><li><strong>Hugging Face Transformers</strong> - Text generation (Flan-T5-base model)</li><li> - Deep learning backend</li></ul><p>I chose this stack after trying several alternatives. The all-MiniLM-L6-v2 embedding model runs fast on CPU (50ms per query) with good quality. Flan-T5-base provides better instruction following than base T5 while staying reasonably sized at 250M parameters.</p><p>FAISS with L2 distance outperformed cosine similarity in my tests for normalized embeddings - faster lookups and marginally better relevance. Everything runs on a laptop without GPU acceleration.</p><p>From my three months deploying this system in production, here's what the data showed:</p><p>Basic RAG achieved 58% accuracy on our test set of 500 queries. Adding query routing improved that to 67% - an 18% relative improvement. Implementing self-validation caught 73% of hallucinations before they reached users. The complete system with iterative refinement hit 83% accuracy.</p><p>More telling were the user satisfaction metrics. Support ticket volume dropped 35% after deploying the intelligent version. Users stopped complaining about wrong answers and started trusting the system for daily tasks.</p><p>Real-world applications where this approach works well:</p><p><strong>Documentation search systems</strong> - Internal company docs where query types vary widely. Technical implementation questions need different handling than policy lookups.</p><p><strong>Customer support automation</strong> - Self-validation is critical here. You can't afford to give customers confident but wrong answers.</p><p><strong>Research assistance tools</strong> - Comparative questions benefit hugely from adaptive retrieval. Pulling 2 documents won't capture the nuance needed for \"compare X vs Y\" queries.</p><p><strong>Code documentation retrieval</strong> - Technical queries about APIs and functions need precise, focused results. The routing logic handles this well.</p><p>The core problem this solves: generic RAG systems treat all queries identically and have no quality control. They retrieve documents with the same strategy regardless of question type, generate answers without checking accuracy, and present results with false confidence. Users get misled, trust erodes, and the system becomes unreliable.</p><p>Basic RAG fails in predictable ways. After analyzing 200+ failure cases from my production system, I found four recurring patterns:</p><p><strong>Pattern 1: Query Type Mismatch</strong> - A \"how do I implement X\" technical question retrieved conceptual overview documents instead of code examples. The retrieval worked (high similarity scores) but returned the wrong type of content.</p><p><strong>Pattern 2: No Quality Gates</strong> - The system generated fluent, confident-sounding answers that were factually wrong. Without validation, these went straight to users.</p><p><strong>Pattern 3: Retrieval Blind Spots</strong> - Sometimes the most relevant documents weren't in the top-k results. The system should have known it was missing context and tried again with broader retrieval.</p><p><strong>Pattern 4: Single-Shot Limitation</strong> - Users often refine their questions when initial answers fail. The system should do this automatically instead of making users iterate manually.</p><p>These patterns pointed to a clear solution: classify queries, adapt retrieval, validate outputs, and implement automatic refinement loops.</p><p>The flow looks like this:</p><div><pre><code>Query → [Router] → [Smart Retrieval] → [Generator] → [Validator]\n          ↓            ↓                    ↓            ↓\n       (classify)   (adapt k)          (generate)    (check)\n                                                        ↓\n                                              Pass? → Return Answer\n                                              Fail? → Refine &amp; Retry (max 3 iterations)\n</code></pre></div><p>Each component has a specific responsibility. The router classifies query type using keyword matching. Smart retrieval adjusts parameters based on classification. The generator creates grounded answers. The validator checks quality through multiple rules.</p><p>When validation fails, the system refines the query by adding context-requesting language and increases k to retrieve more documents. It retries up to 3 times before giving up.</p><h3>\n  \n  \n  Design Decisions Explained\n</h3><p>In analyzing my query logs, I found distinct patterns:</p><ul><li>Technical questions (containing \"how\", \"implement\", \"code\") needed 2-3 focused documents with code examples</li><li>Factual questions (\"what is\", \"define\") worked best with 3 standard documents</li><li>Comparative questions (\"compare\", \"versus\") required 4+ documents from varied sources</li><li>Procedural questions (\"steps\", \"guide\") needed sequential information from 3 documents</li></ul><p>Routing increased relevance by 18% because each query type got optimized retrieval. The implementation uses simple keyword matching - fast and surprisingly effective. I tried ML-based classification first, but it was slower, required training data, and only improved accuracy by 2% over keywords.</p><p>Production failures taught me harsh lessons. In the first week, users reported answers that:</p><ul><li>Were only 1-2 words (too short to be useful)</li><li>Just rephrased the question without answering it</li><li>Contained information not present in retrieved documents (hallucinations)</li><li>Didn't address what was asked</li><li>Used hedge phrases like \"I'm not sure\" that users treated as facts</li></ul><p>I implemented five validation checks to catch these:</p><ol><li> - Minimum 20 characters ensures substantive answers</li><li> - Answer must have 5+ words not in the question</li><li> - At least 3 content words from answer must appear in retrieved docs</li><li> - At least one query keyword must appear in answer</li><li> - No hedge phrases indicating uncertainty</li></ol><p>These caught 73% of hallucinations in testing. The overlap threshold of 3 keywords came from statistical analysis - below that, answers were usually hallucinated; above 5 was too strict and rejected valid answers.</p><p><strong>Why Iterative Refinement?</strong></p><p>When answers fail validation, giving up wastes the opportunity to self-correct. The refinement strategy:</p><ul><li>Append \"(provide comprehensive details)\" to broaden the query</li><li>Increase k by 1 to retrieve more documents</li><li>Retry generation with additional context</li><li>Limit to 3 iterations to prevent loops</li></ul><p>This recovered 68% of initially failed answers. The iteration limit of 3 came from testing - 2 was too restrictive, 5 showed diminishing returns (only 3% additional recovery).</p><h3>\n  \n  \n  Part 1: Vector Store Foundation\n</h3><p>The vector store handles document indexing and similarity search. This is where I spent time optimizing for speed and accuracy.</p><div><pre><code></code></pre></div><p><strong>My thinking on this implementation:</strong></p><p>I initially tried cosine similarity (IndexFlatIP in FAISS). It was slower and gave marginally worse results for normalized embeddings. L2 distance (IndexFlatL2) with normalized vectors provides consistent, fast lookups.</p><p>The batch encoding optimization was crucial. Processing documents individually took 5 minutes for 10k docs. Batch processing dropped that to 30 seconds - a 10x speedup.</p><p>I also tried quantization (IndexIVFFlat) for larger datasets. It's faster but loses accuracy. For my use case with &lt;100k documents, exhaustive search works fine.</p><h3>\n  \n  \n  Part 2: Query Routing Intelligence\n</h3><p>This component classifies queries and determines retrieval parameters. It's simple but highly effective.</p><div><pre><code></code></pre></div><p>I built an ML classifier using logistic regression first. It required 1000+ labeled training examples, took 200ms per query, and achieved 84% accuracy. The keyword approach runs in &lt;1ms and achieves 82% accuracy.</p><p>For production systems, the 2% accuracy tradeoff is worth the 200x speed improvement and zero training overhead. Plus, debugging keyword rules is trivial compared to understanding model failures.</p><p>The category-specific k values came from failure analysis. Technical queries with k=5 pulled too much conceptual content when users wanted code. Comparative queries with k=2 missed important contrast points.</p><h3>\n  \n  \n  Part 3: Answer Generation with Validation\n</h3><p>The generator creates answers and validates their quality. The validation logic is what makes this system production-ready.</p><div><pre><code></code></pre></div><p><strong>Why these specific validation rules:</strong></p><p>Each check catches a real failure mode I observed in production:</p><p> - Models sometimes output single words or very short phrases. These are never useful answers.</p><p> - Some outputs just rephrase the question without adding information. Requiring 5+ new words filters these.</p><p> - This is the most important check. If the answer doesn't use words from retrieved documents, it's probably hallucinated. The threshold of 3 keywords came from analyzing 200+ examples - below that indicated hallucination, above 5 was too strict.</p><p> - Answers must contain at least one keyword from the question. Otherwise they're off-topic.</p><p> - If the model says \"I'm not sure\", users shouldn't see that output. Better to retry than present uncertainty as fact.</p><h3>\n  \n  \n  Part 4: Orchestrating the Complete System\n</h3><p>The main RAG class coordinates all components and implements iterative refinement.</p><div><pre><code></code></pre></div><p><strong>Design decisions in orchestration:</strong></p><p> - Tested 2, 3, and 5 iterations. Two was too restrictive (missed 15% of recoverable answers). Five showed diminishing returns (only 3% additional recovery vs 3 iterations) while making queries slower.</p><p><strong>Query refinement strategy</strong> - Adding \"(provide comprehensive details)\" signals to retrieval to cast a wider net. Surprisingly effective at pulling more contextual documents.</p><p> - Increasing k by 1 each iteration balances context breadth with noise. Tried k+2 and it pulled too many irrelevant docs.</p><p><strong>Using original question for generation</strong> - The refined query is only for retrieval. Generation uses the original question to maintain answer relevance.</p><p> - Accepted answers get 1.0, rejected answers get 0.5. This lets downstream systems decide how to handle low-confidence outputs.</p><p>Complete project structure:</p><div><pre><code>intelligent-rag-system/\n├── vector_store.py      # FAISS-based storage\n├── query_router.py      # Query classification\n├── generator.py         # Answer generation &amp; validation\n├── rag_system.py        # Main orchestration\n├── demo.py             # Example usage\n├── requirements.txt\n└── README.md\n</code></pre></div><div><pre><code>\npython  venv venv\nvenv/bin/activate  \npip  requirements.txt\n</code></pre></div><div><pre><code>sentence-transformers==2.2.2\ntransformers==4.35.0\ntorch==2.1.0\nfaiss-cpu==1.7.4\nnumpy==1.24.0\n</code></pre></div><div><pre><code></code></pre></div><h3>\n  \n  \n  Example 1: Simple Factual Query\n</h3><div><pre><code></code></pre></div><h3>\n  \n  \n  Example 2: Technical Query with Refinement\n</h3><div><pre><code></code></pre></div><h3>\n  \n  \n  Example 3: Comparative Query\n</h3><div><pre><code></code></pre></div><p>Building this system over three months taught me that intelligent RAG isn't about having the best models - it's about smart orchestration. The routing, validation, and refinement logic uses simple heuristics, yet dramatically outperforms naive RAG.</p><h3>\n  \n  \n  What Worked Exceptionally Well\n</h3><p> was the single biggest improvement. That 18% accuracy gain came from a simple keyword-based classifier that runs in under 1ms. The lesson: understand your query distribution and optimize for it.</p><p> caught 73% of hallucinations. Production deployments can't afford to present users with confident but wrong answers. The five-check validation system ensures quality before outputs reach users.</p><p> recovered 68% of initially failed answers. Giving the system chances to self-correct mimics how humans improve their understanding through iteration.</p><p> - Keyword routing outperformed ML classification. Simple validation rules caught most failures. L2 distance beat complex similarity metrics. Sometimes the straightforward approach wins.</p><p><strong>Add validation from day one</strong> - I deployed without it initially. Big mistake. The debugging time and user complaints could have been avoided.</p><p><strong>More granular query categories</strong> - Four categories work, but I'm seeing patterns suggesting eight would be better. \"Troubleshooting\" and \"Configuration\" queries have distinct needs.</p><p><strong>Implement hybrid retrieval</strong> - Pure semantic search misses exact keyword matches. Adding BM25 would improve recall for terminology-heavy queries.</p><p><strong>Better context formatting</strong> - The prompt template could be smarter about presenting documents based on query type and document length.</p><p><strong>Monitor routing distribution</strong> - If 90% of queries route to one category, your keywords need refinement or you need better category balance.</p><p><strong>Track validation failure reasons</strong> - This tells you where retrieval or generation is weakest. My logs showed \"too short\" was the most common failure - indicating the model needed better prompting.</p><p> - Re-encoding the same documents is wasteful. Added caching and reduced index build time by 10x.</p><p><strong>Set realistic iteration limits</strong> - More than 3 iterations rarely helps and frustrates users with slow responses. Most recoverable failures happen in iterations 2-3.</p><p>Based on failure analysis, here's what would improve the system further:</p><p> - Combine semantic and keyword matching (BM25) for better recall on exact terminology.</p><p> - Use an LLM to generate query variations before retrieval. Helps with underspecified questions.</p><p> - Add a cross-encoder reranker between retrieval and generation for technical queries where precision matters.</p><p> - Some complex questions need multiple retrieval rounds with intermediate reasoning steps.</p><p> - Collect thumbs up/down signals to retrain router keywords and refine validation rules over time.</p><p>The biggest lesson: production RAG success comes from understanding failure modes and building guardrails. The routing, validation, and refinement logic I showed you is straightforward to implement but dramatically improves reliability.</p><p>If you take one thing away, make it this: . Even basic checks (length + context grounding + relevance) will catch most hallucinations and build user trust.</p><p>Start small - add routing with 2-3 categories, implement simple validation, test on your domain, and iterate based on what fails. The system will tell you where it needs improvement.</p><p>From my experience, this approach transforms RAG from an interesting demo into a production-ready system users can trust.</p>","contentLength":16691,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-4kaj","date":1761913062,"author":"Vibe YouTube","guid":323526,"unread":true,"content":"<p>Build a Python AI agent from scratch in under ten minutes with Tech With Tim’s fast-paced tutorial. You’ll walk through installing dependencies, grabbing your OpenAI API key, setting up imports and tools, creating the LLM-powered agent, and running a quick test to see it in action.</p><p>Along the way, Tim shares links to a free Notion trial, a PyCharm Pro month, and his DevLaunch mentorship program. Hit the timestamps to jump straight to setup, tools, agent logic, or testing—and grab the full code on GitHub to follow along.</p>","contentLength":529,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-134j","date":1761913051,"author":"Vibe YouTube","guid":323525,"unread":true,"content":"<p>This video dives into three modern Python tricks you probably haven’t tried yet: the powerful  statement for cleaner pattern matching, handy  decorators that cut boilerplate when defining classes, and the magic of positional- and keyword-only arguments to make your function signatures crystal clear.  </p><p>Along the way you’ll get a bonus 20% off Brilliant Premium for more coding challenges, plus details on Tim’s DevLaunch mentorship program to help you build real-world projects and land that dev job.</p>","contentLength":506,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"A Dashboard About Scammers, Telemarketers, My Cellphone, and Who Annoys Me Most","url":"https://dev.to/caldas/a-dashboard-about-scammers-telemarketers-my-cellphone-and-who-annoys-me-most-2dml","date":1761913044,"author":"Arthur","guid":323524,"unread":true,"content":"<p>Not sure how things go in other countries, but here in Brazil, dodging unwanted calls has become a national sport — if only there were medals for it. Every day, we’re bombarded by scammers, telemarketers, and don’t forget that one guy in prison who swears he's kidnapped your relative, hoping you'll panic and send him money to \"save\" them.</p><p>The prison guy is easy to deal with. You just hang up, and he’ll move on to his next victim. But scammers and telemarketers? They’re like the T-1000 in Terminator 2. They never stop. These folks are relentless, almost admirable in their stubbornness. Some might even call them resilient… if they weren’t so incredibly annoying.</p><p>And when I say annoying, I really mean it. Somehow, they’ve mastered the art of calling at the absolute worst times. Whether it’s during lunch, in the middle of an important meeting, or just as you start working out. These calls are perfectly timed to disrupt your day. It’s like they don’t just spam you every day. They’ve developed a sixth sense for when you’re most vulnerable to maximum annoyance. For example, since I started writing this post, I’ve gotten four spam calls.</p><p>Sometimes, it feels like I’m in a toxic relationship with these callers. It’s like I’m Sasuke at the end of the first part of Naruto. Just trying to be left alone and get on with my life. But, much like Naruto, these scammers and telemarketers keep pulling me back in, refusing to let me go in peace. At least they’re not throwing any \"power of friendship\" speeches at me to mask the toxicity. Still, it’s an endless back-and-forth. Except there’s no epic battle, just constant, annoying interruptions.</p><p>In the face of this relentless barrage, I did what any sane person would do: I exported my call history from my cellphone, built a Tableau dashboard to analyze the spam calls, and wrote a post about it to enhance my portfolio. I mean, who wouldn’t? It’s not like I don’t have anything better to do and am just using this as an excuse to procrastinate. This is totally not the case. I swear 👀</p><p>Before diving into the conclusions, let’s take a moment to understand the data itself. As I mentioned earlier, I exported my entire call history into a CSV file and used Python to clean and process it. In the end, I ended up with a table like the one below. It’s worth noting that I removed all phone numbers that are saved in my contacts since my goal here was to focus on the strangers trying to ruin my day. The final dashboard can be accessed through this <a href=\"https://public.tableau.com/views/MostAnnoyingTelemarketers/Dashboard1?:language=en-US&amp;:sid=&amp;:redirect=auth&amp;:display_count=n&amp;:origin=viz_share_link\" rel=\"noopener noreferrer\">link</a>.</p><p>After using the dashboard to analyze the behavior of my annoying friends, I drew the following conclusions:</p><ul><li>I had a total of 2179 call from the past 3 years and most of the calls are from the State where I live (~60%).</li><li>The most annoying day on record so far is April 14th, 2025, with a grand total of 24 calls. That’s right !!! 24 attempts to ruin my day.</li><li>The most annoying month award goes to January 2024 with 183 calls, because nothing says “Happy New Year” like non-stop spam calls.</li><li>As for the most annoying day within a month, that title goes to the fifth, with 48 calls so far.</li><li>On average, I got 4 spam calls every day and 75 calls by month. </li></ul><p>I’m not really sure how to end this post. I’m not exactly an optimist, so I don’t expect these scammers to suddenly vanish and leave me in peace nor do I believe that this post will touch the heart of someone at ANATEL (National Telecommunications Agency) and inspire them to make my annoying friends’ lives harder. But, at least, I had some fun writing it. In fact, it helped me to let out my anger. Anyway, thanks for reading, and... that's all, folks !!!</p>","contentLength":3670,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-520a","date":1761912598,"author":"Vibe YouTube","guid":323523,"unread":true,"content":"<p>Dive into three under-the-radar Python tricks: the new  statement for clean pattern matching,  to auto-generate boilerplate code, and how to enforce positional-only or keyword-only function arguments. Tim also shares a free Brilliant link (with 20% off) and plugs his DevLaunch mentorship for anyone craving extra guidance.</p>","contentLength":323,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Real Python: The Real Python Podcast – Episode #272: Michael Kennedy: Managing Your Own Python Infrastructure","url":"https://realpython.com/podcasts/rpp/272/","date":1761912000,"author":"","guid":323515,"unread":true,"content":"<p>How do you deploy your Python application without getting locked into an expensive cloud-based service? This week on the show, Michael Kennedy from the Talk Python podcast returns to discuss his new book, \"Talk Python in Production.\"</p>","contentLength":233,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Never Forget a Thing: Building AI Agents with Hybrid Memory Using Strands Agents","url":"https://dev.to/aws/never-forget-a-thing-building-ai-agents-with-hybrid-memory-using-strands-agents-2g66","date":1761907760,"author":"Danilo Poccia","guid":323480,"unread":true,"content":"<p>When using (and building) AI agents, I kept running into the same frustrating problem: as conversations grew longer, my agents would either lose important details from earlier in the conversation or hit context limits and crash. The standard solution—a sort of aggressive summarization—worked for maintaining context flow, but it created a new problem: those summaries were lossy. Important details, specific numbers, exact quotes, and nuanced context could vanish into their generalizations.</p><p>I needed something better: a memory system that could maintain conversation flow through intelligent summarization while preserving the ability to retrieve exact historical messages when needed. After researching the broad topic of context engineering, I built a proof-of-concept <a href=\"https://github.com/danilop/strands-agents-semantic-summarizing-conversation-manager\" rel=\"noopener noreferrer\">Semantic Summarizing Conversation Manager</a>: a hybrid memory system for <a href=\"https://strandsagents.com/\" rel=\"noopener noreferrer\">Strands Agents</a> that combines the efficiency of summarization with the precision of semantic search.</p><p>In this post, I'll show you how this system improves on the memory problem, walk you through its architecture, and demonstrate how it can upgrade your AI agents from forgetful assistants into (more) reliable partners with perfect recall.</p><p>Before diving into the solution, let's understand why this problem exists. AI agents typically manage conversation context in one of three ways:</p><p>: Store all messages in the active context. This works great for short conversations but inevitably hits model context limits. When you reach that limit, the agent has to do something to reduce the size of its context.</p><p>: When context gets full, summarize older messages into a compressed form. This process, also known as compacting, maintains conversation flow and prevents context overflow, but summaries are inherently lossy. Ask \"What was the exact number I mentioned earlier?\" and the agent might recall \"you discussed some statistics\" but not the actual value. A possible mitigation is to apply different hierarchical levels of summarizations that are retrieved based on the specific requests.</p><p>: Keep only the N most recent messages, discarding older ones entirely. Simple and memory-efficient, but loses all historical context beyond the window. The agent literally forgets everything from earlier in the conversation.</p><p><strong>Proactive Memory Curation</strong>: A variation of automatic summarization is to actively control the process. For example, to trigger summarization not when the context is full but when something happens in the agent lifecycle, such as the completion of a specific task. This works because summarization is applied to a bounded context (the task) that can reduce the amount of information needed about the specific task internals by the rest of the tasks.</p><p>Each approach has fundamental trade-offs. You can have context efficiency or perfect recall, but not both.</p><p>The Semantic Summarizing Conversation Manager takes a different approach: it combines summarization for active context management with semantic search for precise historical recall. Here's how it works:</p><p>: Messages flow through the conversation as usual. The agent sees the full context and responds naturally.</p><p>: When the context gets too long, the system performs two parallel operations:</p><ul><li>Creates a summary of older messages for the active conversation, maintaining flow</li><li>Indexes those messages in a semantic (vector based) search engine for intelligent lookup</li></ul><p>: When new messages arrive, a <a href=\"https://strandsagents.com/latest/documentation/docs/user-guide/concepts/agents/hooks/\" rel=\"noopener noreferrer\">Strands Agents hook</a> automatically searches for relevant historical messages, includes surrounding context for better understanding, and prepends this context to the user's message if relevant matches are found.</p><p>The agent gets three types of memory working together: the active conversation with summaries (for context flow), the archived exact messages (for precision), and the semantic index (for intelligent retrieval). This hybrid approach means the agent never loses information, but also never overwhelms the model with excessive context.</p><p>Here's a crucial insight that makes this hybrid approach viable: the amount of RAM available to an agent is typically orders of magnitude larger than the model's context window.</p><p>Consider a typical deployment: a modern language model might have a context window of up to 1 million tokens (roughly 750,000 words or about 4MB of text). Meanwhile, even a small <a href=\"https://aws.amazon.com/pm/lambda/\" rel=\"noopener noreferrer\">AWS Lambda</a> function has at least 128MB of memory, and container deployments often have several gigabytes. That's a difference of three to four orders of magnitude—1,000x to 10,000x more storage capacity than context capacity.</p><p>This disparity is fundamental to how language models work. Context windows are constrained by the quadratic attention mechanism—doubling the context quadruples the computation. But RAM? RAM is relatively cheap and abundant in comparison. You can store thousands of conversation messages and tool results in a few megabytes, along with their embeddings for semantic search, and still use less than 1% of available memory.</p><p>The implication: you don't need to delete information just because it doesn't fit in the model's context window. Store it, index it, and retrieve it intelligently when needed. The bottleneck isn't storage—it's attention. This hybrid architecture respects that constraint while leveraging the abundant storage available to modern agents.</p><p>This is why the semantic conversation manager can confidently store exact messages indefinitely (with optional limits for safety) while keeping only the most relevant information in the active context. We're playing to the strengths of the underlying hardware: use the model's limited context for reasoning and generation, use RAM for comprehensive storage and retrieval.</p><p>The system consists of three main components that integrate seamlessly with Strands Agents:</p><h2>\n  \n  \n  Component 1: SemanticSummarizingConversationManager\n</h2><p>This is the core conversation manager that extends Strands' base conversation management with semantic capabilities. It maintains the active conversation window, triggers summarization when context overflows, stores exact messages with semantic indexing, manages memory limits by message count or total memory usage, and provides real-time memory usage statistics.</p><p>The key innovation here is that summarization and archival happen atomically. When messages get summarized, they're simultaneously preserved and indexed, ensuring nothing is ever lost.</p><h2>\n  \n  \n  Component 2: SemanticMemoryHook\n</h2><p>This hook integrates with Strands' lifecycle system to provide automatic context enrichment. It subscribes to the MessageAddedEvent, searches semantic memory when new messages arrive, retrieves relevant historical messages with surrounding context, and prepends the enriched context to user messages naturally.</p><p>The hook uses Strands' elegant event system, keeping the memory logic completely separate from your agent's main code. Your agent doesn't need to know anything about memory management—it just works.</p><h2>\n  \n  \n  Component 3: SemanticSearch Engine\n</h2><p>The search engine powers intelligent retrieval using sentence transformers for initial embedding, cross-encoder reranking for precision, configurable relevance thresholds, and persistent index storage.</p><p>I chose a two-stage retrieval approach because it provides the best balance of speed and accuracy. The sentence transformer quickly narrows down candidates, then the cross-encoder reranks for precision. This combination ensures the agent finds truly relevant messages, not just keyword matches.</p><p>Let's build an agent with semantic memory. This implementation is a  designed to demonstrate the hybrid memory concept. While functional and tested, it's intended for experimentation and learning rather than production deployment without further development and testing. The setup is straightforward:</p><div><pre><code></code></pre></div><p>That's it! Your agent now has hybrid memory. Use it normally:</p><div><pre><code></code></pre></div><p>The configuration parameters give you fine-grained control over memory behavior:</p><p> (0.1-0.8): Determines what percentage of messages to summarize when context overflows. Lower values create shorter summaries but trigger overflow more frequently. I find 0.7 (70%) provides a good balance.</p><p>: Messages that never get summarized. These stay in the active conversation no matter what. I typically use 10-20 to maintain recent context flow.</p><p>: When retrieving a relevant message, how many surrounding messages to include. A radius of 2 means you get 2 messages before and 2 after the match, providing better context. This prevents retrieving messages in isolation where the surrounding conversation provides crucial meaning.</p><p>: Number of relevant messages to retrieve. More isn't always better—too many matches can overwhelm the context. I start with 3 and adjust based on testing and evaluations.</p><p><strong>semantic_search_min_score</strong>: The cross-encoder relevance threshold (default: -2.0). Higher values are more selective, lower values cast a wider net. The default provides balanced precision and recall.</p><p><strong>max_num_archived_messages</strong>: Optional limit on stored messages. When exceeded, oldest messages are removed. Useful for long-running agents to prevent unbounded growth.</p><p><strong>max_memory_archived_messages</strong>: Optional limit on total memory usage (in bytes). Includes both message content and embeddings. When exceeded, oldest archived messages are removed to stay within budget.</p><p>These last two parameters are particularly important for production deployments where long term memory constraints matter. You can use either, both, or neither depending on your needs.</p><p>Let me show you the system in action. The included demo creates an agent, stores a secret that shouldn't appear in summaries, builds conversation history, triggers summarization, and then demonstrates semantic retrieval.</p><p>When you run the demo with , you'll see the complete flow:</p><p><strong>Initial Conversation (20 messages)</strong>:</p><div><pre><code>[ 0] user: Our shared number is 700. This is confidential - don't include it in any summary...\n[ 1] assistant: Understood. I'll keep our shared number confidential...\n[ 2] user: Tell me about recursive functions and data structures.\n...\n[19] assistant: Recursion is when a function calls itself...\n</code></pre></div><p><strong>After Summarization (9 messages)</strong>:</p><div><pre><code>[ 0] user: ## Conversation Summary\n* Topic 1: Explanation of recursion\n* Topic 2: Arrays\n* Topic 3: Linked Lists\n[Note: The shared number is NOT in the summary ✅]\n\n[ 1] user: What are sorting algorithms?\n...\n</code></pre></div><p>Notice that the summary preserves the conversation flow (discussing recursion and data structures) while excluding the confidential information. The agent can continue having coherent conversations about algorithms without the secret cluttering the context.</p><p><strong>Semantic Retrieval Finds Everything</strong>:</p><div><pre><code>🔍 Query: 'What was our shared secret number?'\nSearch completed in 66.7ms (reranked from 9 candidates)\n✅ Found 4 relevant messages in semantic memory\n\n• Secret '700' retrievable: ✅ YES\n</code></pre></div><p>The semantic search quickly finds the archived message, even though it's not in the active conversation. The system automatically enriches the query:</p><div><pre><code>Based on our previous conversation, these earlier exchanges may be relevant:\n\n---Previous Context---\n[Message 0, user]: Our shared number is 700. This is confidential – don't include it in any summary...\n[Message 1, assistant]: Understood. I'll keep our shared number confidential...\n---End Previous Context---\n\nCurrent question: What was our shared number?\n</code></pre></div><p>The agent sees both the original messages (with surrounding context from the radius parameter) and the current query. This natural enrichment happens automatically. The agent code doesn't change at all.</p><p>The conversation manager includes built-in memory monitoring, essential for production deployments:</p><div><pre><code></code></pre></div><p>This visibility is crucial when tuning your memory limits. You can see exactly how much memory your agents are using and adjust the configuration accordingly.</p><p>Before considering deployment of this prototype, several important factors need careful evaluation and likely additional development:</p><p>: Set appropriate limits based on your deployment environment. A Lambda function with 3GB memory needs tighter constraints than a long-running container. Use both message count and memory size limits to prevent unbounded growth.</p><p>: The system uses sentence transformers by default, which runs locally. For production, consider your latency and throughput requirements. Local models add no API costs but use CPU resources. You might want to experiment with different embedding models for your specific use case.</p><p>: The semantic index persists to disk, enabling warm starts. This means restarted agents can immediately search historical messages without rebuilding the index. Make sure your deployment environment has writable storage (or modify the code to use a different persistence backend).</p><p>: Start with a radius of 2 and adjust based on testing. Larger radii provide more context but use more tokens. Monitor your context usage to find the sweet spot for your domain.</p><p>: The default min_score of -2.0 works well for general use, but you might need to tune it. If you're getting too many irrelevant matches, increase it. If you're missing relevant context, decrease it. Log the scores during development to understand what works for your data.</p><p>The system automatically merges overlapping message ranges. If semantic search finds messages 5-7 and messages 6-9 as relevant, it merges them into a single range 5-9 rather than duplicating messages 6 and 7. This prevents token waste and maintains a cleaner context presentation.</p><p>This improves context quality because the agent sees a coherent narrative flow rather than confusing duplicated messages.</p><p>This hybrid memory architecture excels in several scenarios:</p><p>: Keep the last few exchanges in active context for natural flow, but retrieve exact past conversations when a customer references an earlier issue or order number.</p><p>: Maintain recent context for ongoing tasks while being able to recall specific details from weeks or months ago. \"What was that restaurant you recommended last month?\"</p><p><strong>Technical Documentation Bots</strong>: Summarize long technical discussions while preserving the ability to retrieve exact code snippets, error messages, or configuration values.</p><p>: Remember the student's learning journey, including specific questions they asked and concepts they struggled with, even across multiple sessions.</p><p>: Maintain conversation flow while being able to recall exact numbers, queries, or insights from earlier in a long analysis session.</p><p>The common thread: any agent that needs both conversational coherence and precise recall benefits from this architecture.</p><p>You might be wondering how this compares to other memory solutions. Several approaches exist in the agent ecosystem, but they typically choose one strategy:</p><p>Some frameworks use hierarchical summarization, creating summaries of summaries. This manages context well but makes precise recall even harder—information gets compressed multiple times.</p><p>Some implement retrieval-augmented generation (RAG) where the agent explicitly calls a memory retrieval tool. This gives the agent control but requires it to decide when to search, adding cognitive overhead.</p><p>The Semantic Summarizing Conversation Manager combines automatic summarization for context flow with automatic semantic retrieval for precision. The agent doesn't need to manage memory—it just works. The hook system in Strands makes this possible through its elegant event architecture.</p><p>This hybrid memory system balances efficiency with precision and automatic behavior with configurability. As a prototype, this system demonstrates the core concepts but would benefit from additional hardening, testing, and optimization before production use.</p><p>I'm particularly interested in feedback on parameter tuning for different domains. What works well for customer support might not work for technical documentation. If you use this system, I'd love to hear about your configuration choices and what you learned.</p><p>Ready to improve your agents memory? Clone the repo, run the demo, and see hybrid memory in action. Your agents (and your users) will thank you for it.</p>","contentLength":15976,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Build Your Own Forum with FastAPI: Step 8 - Full Text Search","url":"https://dev.to/leapcell/build-your-own-forum-with-fastapi-step-8-full-text-search-4lg8","date":1761907259,"author":"Leapcell","guid":323479,"unread":true,"content":"<p>In the <a href=\"https://leapcell.io/blog/build-your-own-forum-with-fastapi-step-7-permissions\" rel=\"noopener noreferrer\">previous article</a>, we implemented a basic permissions system for our forum, supporting \"administrator\" and \"user banning\" capabilities, laying the groundwork for a healthy community.</p><p>As the forum accumulates more content, users might find it difficult to locate old posts they are interested in. A new requirement is emerging: shouldn't there be a search function to help users quickly find the articles they want to read?</p><p>In this article, we are going to add a full-text search feature to our forum.</p><p>If you have some knowledge of SQL, you might be thinking: can't we just use a  query to implement search? For simple scenarios, this is indeed possible. But  queries perform extremely poorly when dealing with large amounts of text and cannot understand linguistic complexities (for example, searching for \"create\" won't match \"creating\").</p><p>Therefore, we will adopt a more professional and efficient solution: using PostgreSQL's built-in Full-Text Search (FTS) feature. It's not only fast but also supports stemming, ignoring stop words, and sorting by relevance, providing search capabilities far superior to .</p><h2>\n  \n  \n  Step 1: Database Search Infrastructure (SQL)\n</h2><p>To use PostgreSQL's FTS feature, we first need to make some modifications to our  table: we'll create a special column specifically for storing optimized, high-speed searchable text data.</p><p>We will add a new column named  of type  to the  table. Its purpose is like a dictionary, breaking down the post's title and content into individual words (lexemes) and processing them.</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Use a Trigger to Automatically Update the tsvector Column\n</h3><p>The  column doesn't contain content by itself; we need to convert the title and content into the  format and write it into this column.</p><p>Nobody wants to manually update the  column every time a post is created or updated. The best way is to have the database do this work automatically using a trigger.</p><p>First, let's create a function. This function's job is to concatenate the  and  and convert them into the  format.</p><div><pre><code></code></pre></div><blockquote><p>The  function allows us to set different weights for text from different fields. Here, we are setting the weight for the title ('A') higher than for the content ('B'). This means that in the search results, posts with the keyword in the title will be ranked higher.</p></blockquote><p>Next, create a trigger that will automatically call the function we just created every time a new post is inserted () or updated ().</p><div><pre><code></code></pre></div><p>To ensure search speed, the final step is to create a GIN (Generalized Inverted Index) index on the  column.</p><div><pre><code></code></pre></div><h2>\n  \n  \n  Step 2: Backfill Existing Data\n</h2><p>It's important to note that the trigger we created only works for posts created or modified in the . For posts that already exist in the database, their  field is still .</p><p>We need to run a one-time  statement to generate search vectors for all existing posts:</p><div><pre><code></code></pre></div><p>If your database was created using <a href=\"https://leapcell.io/?lc_t=d_ug29\" rel=\"noopener noreferrer\">Leapcell</a>,</p><p>you can execute these SQL statements directly in its web-based operation panel.</p><h2>\n  \n  \n  Step 3: Create the Search Results Page\n</h2><p>We need a new HTML page to display the search results.</p><p>In the  folder, create a new file named . This page is very similar to , but it will additionally display the user's search query.</p><p><strong><code>templates/search_results.html</code></strong></p><div><pre><code>Search Results - My FastAPI ForumWelcome to my Forum\n        {% if current_user %}\n        Welcome, {{ current_user.username }}!\n        {% if current_user.is_admin %}\n        [Admin Panel]\n        {% endif %}\n        Logout\n        {% else %}\n        Login |\n        Register\n        {% endif %}\n      SearchSearch Results: \"{{ query | escape }}\"\n\n    {% if posts %} {% for post in posts %}\n    {{ post.title }}{{ post.content }}Author: {{ post.owner.username if post.owner else 'Unknown' }}\n    {% endfor %} {% else %}\n    No posts found matching \"{{ query | escape }}\". Please try different keywords.\n    {% endif %}\n  </code></pre></div><p>Note that we also placed  in the search box's  attribute. This way, after searching, the search box will retain the user's search term.</p><h2>\n  \n  \n  Step 4: Implement the Search Backend Route\n</h2><p>With the database and frontend page ready, we will now add the backend logic in  to handle search requests.</p><p>First, update the Post model:</p><div><pre><code></code></pre></div><p><strong> (Add new route and imports)</strong></p><div><pre><code></code></pre></div><p>The new  route primarily does these things:</p><ol><li> Reads the  parameter (search term), replaces spaces in it with  so that the query will match all keywords.</li><li> Uses , , and  to build the specialized FTS query, and sorts the results by relevance () in descending order.</li><li> Renders the  template with the query results.</li></ol><h2>\n  \n  \n  Step 5: Add the Search Box to the Homepage\n</h2><p>Finally, we need to provide a search entry point for users on the forum's homepage.</p><p>Modify  to add the search form in the .</p><p><strong> (Update header)</strong></p><div><pre><code>... (head and style remain unchanged) ...\nWelcome to My Forum\n        {% if current_user %}\n        Welcome, {{ current_user.username }}!\n        {% if current_user.is_admin %}\n        [Admin Panel]\n        {% endif %}\n        Logout\n        {% else %}\n        Login |\n        Register\n        {% endif %}\n      Search\n\n    ... (rest of the page remains unchanged) ...\n</code></pre></div><p>We also added an  link to the  tag, allowing users to click the title to return to the homepage.</p><p>The feature is now implemented. Restart your uvicorn server:</p><p>Open your browser and visit .</p><p>You will see a new search box next to the title at the top of the page.</p><p>Enter any word in the search box and press Enter. The page will redirect to the  route and display the relevant posts.</p><p>By leveraging PostgreSQL FTS, we've added a powerful and professional full-text search feature to our forum. Users can now easily find past posts.</p><p>Next, let's continue to enrich our forum's features. You may have noticed that posts can only be plain text and cannot include images.</p><p>In the next article, we will implement: allowing users to upload images when creating a post.</p>","contentLength":5789,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Odoo ERP Development 2026: Future Trends & Business Insights","url":"https://dev.to/vibha_05/odoo-erp-development-2026-future-trends-business-insights-5adh","date":1761906321,"author":"vibha","guid":323478,"unread":true,"content":"<p>In the rapidly evolving world of business technology, one name continues to rise — Odoo ERP Development. Over the past few years, this open-source platform has transformed how companies manage operations, streamline processes, and boost digital efficiency. But as we approach 2026, Odoo ERP Development is positioned to dominate the ERP landscape. From flexible modules to strategic scalability, Odoo ERP software development is shaping the future of global business management.</p><h2>\n  \n  \n  The Rising Dominance of Odoo ERP Development in the Global Market\n</h2><p>The journey of Odoo ERP Development has been remarkable. Once seen as a simple open-source ERP, it’s now a top choice for enterprises, SMEs, and startups worldwide. In 2026, the global ERP market is expected to expand significantly — and Odoo’s adaptability gives it a strong edge. Businesses across the USA, UAE, Europe, and India are choosing custom Odoo development for its cost-efficiency, modular design, and user-friendly experience.</p><p>Each new Odoo release strengthens its foundation with faster performance, enhanced integrations, and advanced customization options. Supported by a vibrant Odoo developer community, Odoo ERP Development is driving innovation through AI automation, intuitive dashboards, and seamless mobile access.</p><h2>\n  \n  \n  The Shift Toward Integrated Business Management\n</h2><p>One major reason behind Odoo’s rising dominance is its ability to unify every business function within one ecosystem. From CRM, HR, and finance to eCommerce — Odoo ERP Development provides built-in modules that work together effortlessly. Unlike traditional ERP systems requiring multiple integrations, Odoo ensures smooth collaboration and zero redundancy.</p><p>As digital transformation accelerates in 2026, companies using Odoo ERP software development will gain from improved transparency, reduced manual errors, and faster decision-making powered by real-time data.</p><h2>\n  \n  \n  Customization Becomes a Competitive Advantage\n</h2><p>Businesses in 2026 demand more than one-size-fits-all software. They need tools designed for their workflows and regional compliance. That’s where custom Odoo development excels.</p><p>At Prefortune Technologies, our expert Odoo developers help organizations tailor Odoo ERP systems to match specific requirements — from automated workflows and localized accounting to advanced reporting. This adaptability allows businesses in the UAE, Germany, and the USA to remain compliant while optimizing efficiency.</p><h2>\n  \n  \n  Advanced Odoo Integrations Driving Innovation\n</h2><p>The power of Odoo ERP Development lies in its ability to integrate with modern digital tools. Odoo seamlessly connects with platforms like Google Sheets, WooCommerce, and major CRMs, giving businesses a 360-degree operational view.</p><p>Prefortune Technologies specializes in developing custom Odoo integrations that bridge systems, automate workflows, and ensure real-time data sync — helping clients eliminate manual tasks while enhancing productivity.</p><h2>\n  \n  \n  AI and Automation: The Next Step for Odoo ERP Development in 2026\n</h2><p>Artificial intelligence and automation are redefining ERP systems, and Odoo ERP Development is leading this shift. With AI-powered insights, predictive analytics, and machine learning, businesses can now forecast sales, automate purchases, and optimize inventory with precision.</p><p>By 2026, Odoo ERP software development will further evolve with AI-driven automation — empowering companies to make smarter strategic decisions and minimize manual workload.</p><h2>\n  \n  \n  The Strategic Value of Odoo ERP Development for Businesses\n</h2><p>Beyond technology, the real power of Odoo ERP Development lies in its business impact. It enables companies to manage accounting, sales, projects, and HR from one unified system. This integration reduces costs, boosts efficiency, and delivers measurable ROI.</p><p>For SMEs, Odoo development services offer scalability — allowing them to start small and expand seamlessly as they grow, ensuring agility in a changing market.</p><h2>\n  \n  \n  Odoo’s Growing Global Ecosystem\n</h2><p>The Odoo development companies network is expanding rapidly. In 2026, this ecosystem will continue to strengthen through certified partners like Prefortune Technologies, ensuring faster updates, innovative modules, and global support.</p><p>This community-driven model guarantees that Odoo ERP Development remains a reliable and future-ready solution for businesses worldwide.</p><p>Why 2026 Will Be Odoo’s Breakthrough Year</p><p>Several global trends highlight why Odoo ERP Development is set to dominate:</p><p>Growing demand for scalable, cost-effective ERP systems\nIncreased preference for open-source over proprietary software<p>\nRising need for automation and cross-platform integrations</p>\nExpanding adoption of cloud-based ERP for SMEs<p>\nThese trends prove that the future of Odoo is stronger than ever, making 2026 a turning point for digital transformation.</p></p><h2>\n  \n  \n  Explore Our Most-Used Odoo Apps\n</h2><p>To help businesses extend the capabilities of their ERP, Prefortune Technologies offers several advanced Odoo apps:</p><h2>\n  \n  \n  Conclusion: Preparing for the Future with Odoo ERP Development\n</h2><p>The future of Odoo is defined by integration, automation, and innovation. By 2026, organizations adopting Odoo ERP Development will not only streamline operations but also position themselves for growth in an increasingly competitive digital world.</p><p>Partnering with experts like Prefortune Technologies ensures that businesses leverage the full potential of Odoo — achieving agility, transparency, and sustained profitability. Odoo ERP isn’t just software — it’s the strategic foundation for the businesses of tomorrow.</p>","contentLength":5630,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-5gkb","date":1761905263,"author":"Vibe YouTube","guid":323477,"unread":true,"content":"<p>In this video, TechWithTim dives into three powerful but underused Python goodies: the new  statement for clean pattern matching,  to cut boilerplate when defining classes, and the fine-tuned control you get with positional-only and keyword-only arguments. Expect real code demos and practical tips to make your everyday Python a whole lot smoother.</p><p>He also plugs a free Brilliant.org trial (plus 20% off Premium) for extra learning and his DevLaunch mentorship program, where he offers hands-on project guidance and job-ready strategies.</p>","contentLength":537,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Software Foundation: Giày đi tuyết chống nước cổ cao nữ Humtto SNOW7 260937B","url":"https://humtto.vn/giay-di-tuyet-chong-nuoc-co-cao-nu-humtto-snow7-260937b/","date":1761904256,"author":"","guid":323885,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Software Foundation: Giày trekking hiking cổ cao siêu nhẹ nữ Humtto 260370B","url":"https://humtto.vn/giay-trekking-hiking-co-cao-sieu-nhe-nu-humtto-260370b/","date":1761903850,"author":"","guid":323884,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Software Foundation: Giày leo núi cổ cao outdoor nữ Humtto 260996B","url":"https://humtto.vn/giay-leo-nui-co-cao-outdoor-nu-humtto-260996b/","date":1761902645,"author":"","guid":323883,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Software Foundation: Giày trekking có nút vặn khóa BOA nữ Humtto 260920B","url":"https://humtto.vn/giay-trekking-co-nut-van-khoa-boa-nu-humtto-260920b/","date":1761902374,"author":"","guid":323545,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Software Foundation: Giày đi bộ đường dài leo núi nữ Humtto 160986B","url":"https://humtto.vn/giay-di-bo-duong-dai-leo-nui-nu-humtto-160986b/","date":1761901371,"author":"","guid":323544,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Software Foundation: Giày leo núi đi bộ ngoài trời nữ Humtto 160955B","url":"https://humtto.vn/giay-leo-nui-di-bo-ngoai-troi-nu-humtto-160955b/","date":1761901365,"author":"","guid":323543,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Cloudflare Cookie Fix Step-by-Step Guide (Why the Same Session ID Can Result in Different IPs)","url":"https://dev.to/nstproxy_official/cloudflare-cookie-fix-step-by-step-guide-why-the-same-session-id-can-result-in-different-ips-1e9p","date":1761899023,"author":"Fancy-Nstproxy","guid":323418,"unread":true,"content":"<p>Maintaining a stable session is crucial when accessing Cloudflare-protected websites. Many users assume that as long as the  remains the same, their IP address will also stay consistent. However, this is not always the case—especially when using a proxy gateway with load balancing based on client location.</p><p>This article explains why identical session IDs may lead to different IP addresses, how Cloudflare handles IP consistency during challenges, and the correct configuration to ensure Cloudflare cookies remain valid.</p><h2>\n  \n  \n  Why Does the Same Session ID Produce Different IPs?\n</h2><p>Some proxy providers operate multiple gateway regions (e.g., US, EU, APAC) and use dynamic routing to allocate traffic based on the client's geographical location. This means:</p><ul><li>The  may be routed to <strong>different regional gateways</strong></li><li>Each gateway maintains <strong>independent caching and session storage</strong></li><li>The resulting , depending on where the request originates</li></ul><p>Consider a real-world Cloudflare challenge flow:</p><p>A user in  is developing locally and needs to solve Cloudflare’s <strong>5-second security challenge (cf_challenge)</strong>. To automate this, they use a third-party challenge solver —  — to obtain Cloudflare cookies.</p><ul><li>Capsolver infrastructure is located in the </li><li>The user’s development environment is in </li><li>Both parties connect through  with the </li></ul><blockquote><p>“If the sessionId and gateway name are identical, Cloudflare should treat both requests as from the same source.”</p></blockquote><p>Due to dynamic routing based on requester geography:</p><ul><li>Capsolver’s request exits through a  (e.g., )</li><li>The user’s request exits through an  (e.g., )</li></ul><ul></ul><h3>\n  \n  \n  Cloudflare Validation Result\n</h3><p>Cloudflare checks the cookie and detects:</p><ul><li>Cookie was issued to  (US)</li><li>Current request comes from  (EU)</li></ul><blockquote><p>“This is not the same requester.”</p></blockquote><div><pre><code>Cloudflare cookie invalid\nNew challenge triggered\nSession continuity broken\n</code></pre></div><p>This mismatch happens <strong>even though the gateway and session ID are identical</strong>, because the load-balanced gateway does not guarantee the .</p><h2>\n  \n  \n  How Cloudflare Handles This\n</h2><p>Cloudflare assigns security risk at the .\nWhen a challenge is solved by an IP, Cloudflare generates a cookie binding:</p><ul></ul><p>If subsequent requests include the same session cookie , Cloudflare rejects the session and triggers a new challenge.</p><div><pre><code>HTTP 403 Forbidden\nCloudflare challenge re-triggered\nCloudflare cookie invalid\n</code></pre></div><p>Therefore, <strong>IP consistency is mandatory</strong> for Cloudflare-protected requests.</p><h2>\n  \n  \n  How Nstproxy Ensures IP Consistency\n</h2><p>To address Cloudflare’s strict IP‑bound session validation, Nstproxy provides:</p><ul><li><strong>Dedicated regional gateways</strong> to maintain a stable exit IP</li><li><strong>Automatic session retention</strong> for Cloudflare challenge pass‑through success</li><li><strong>Enterprise‑grade reliability</strong> with 99.9% uptime</li><li><strong>Real residential &amp; ISP IPs</strong> that minimize Cloudflare risk scoring</li><li> including US / EU / APAC regions</li><li><strong>Flexible integration options</strong>: Scraping Browser, API, HTTP/SOCKS5</li></ul><p>These features ensure that once Cloudflare authorizes a session, all subsequent requests originate from the same IP — preventing cookie invalidation.</p><h2>\n  \n  \n  Common Gateway Types and Impact\n</h2><div><table><thead><tr></tr></thead><tbody><tr><td>Region-specific gateway (e.g. )</td></tr><tr><td>Auto-routing gateway (e.g. )</td><td>Based on client IP location</td></tr><tr><td>Third-party proxy random gateway</td></tr></tbody></table></div><p>If the proxy is dynamically assigned by region or vendor, the public IP used to solve Cloudflare may not match the one used when reusing the cookie.</p><ul><li><p>Cloudflare 5-second challenge could be passed using fixed-region gateways:</p><ul></ul></li><li><p>Using  caused challenge failure even with the same session ID</p></li></ul><blockquote><p>The gateway dispatches traffic based on client location.\nServer-side IP ≠ Local machine IP.<p>\nCloudflare sees mismatched IP for the same cookie.</p></p></blockquote><p>As confirmed during testing:</p><blockquote><p>Session storage is independent across regional gateways.\nLoad balancing does not share session cache.</p></blockquote><p>To maintain Cloudflare session validity, ensure:</p><p>✅ Use region-specific Nstproxy gateway:</p><ul><li> (United States)</li><li> (Europe)</li><li> (Asia-Pacific)</li></ul><p>✅ Keep all Cloudflare-related requests in \n✅ Avoid auto-routing gateways for authenticated sessions<p>\n✅ Ensure server and local debugging both route consistently</p></p><p>If unsure, route traffic through a fixed proxy management relay so that origin is unified before reaching our gateway.</p><ul><li>Session ID alone does not guarantee IP persistence</li><li>Cloudflare cookies are  for anti-bot security</li><li>Load-balancing gateways cause IP mismatches</li><li>Choose fixed-region gateways for Cloudflare bypass stability</li></ul><blockquote><p>If you are experiencing Cloudflare cookie issues, the gateway routing strategy is very likely the cause.</p></blockquote><p>Using a dynamically dispatched proxy gateway can lead to different exit IPs, which invalidates Cloudflare challenge cookies. For high-security, Cloudflare-protected environments, maintaining a stable IP across all requests is essential.</p><p>Nstproxy recommends using region-specific gateways when interacting with Cloudflare websites to ensure successful authentication and session continuity.</p><p>If you need assistance selecting the correct gateway setup for your environment, please contact our technical support team.</p><h2>\n  \n  \n  Optimize Cloudflare Performance with Nstproxy\n</h2><p>Nstproxy provides high‑reliability proxy infrastructure designed for anti‑bot protected environments such as Cloudflare, Akamai, PerimeterX, and DataDome.</p><p>Why choose Nstproxy for Cloudflare‑protected targets:</p><ul><li><strong>Dedicated regional gateways</strong> ensure IP consistency</li><li><strong>Automatic session retention</strong> for Cloudflare challenge pass‑through</li><li><strong>Enterprise‑grade stability</strong> with 99.9% uptime</li><li> across US/EU/APAC and more</li><li><strong>Real residential &amp; ISP IPs</strong> to reduce CAPTCHA and challenge triggers</li><li>: scraping browser, API, HTTP/SOCKS5</li></ul><h3>\n  \n  \n  Best Practices for Cloudflare\n</h3><p>✅ Always choose a stable region gateway (, , )\n✅ Maintain the same exit IP for session reuse<p>\n✅ Prefer ISP or residential IPs for high‑security domains</p></p>","contentLength":5691,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"A Technical Deep About How To Solve AWS WAF CAPTCHA","url":"https://dev.to/luisgustvo/-a-technical-deep-about-how-to-solve-aws-waf-captcha-5dmp","date":1761898886,"author":"luisgustvo","guid":323417,"unread":true,"content":"<p>As web scraping and automation engineers push the boundaries of data acquisition, security providers like Amazon Web Services (AWS) are relentlessly fortifying their defenses. Among the most formidable of these is the AWS WAF CAPTCHA—a sophisticated challenge mechanism designed to rigorously separate legitimate human traffic from automated bots. For any serious, high-throughput automation project, mastering the ability to effectively  is not merely an option—it is a foundational engineering necessity.</p><p>This article moves beyond basic product overviews to offer a strategic engineering deep dive. We will dissect the dual nature of the AWS WAF challenge (token-based and image-based) and present the precise technical methodologies, including the essential code structures, required to seamlessly integrate a robust, AI-powered solution from services like <a href=\"https://dashboard.capsolver.com/dashboard/overview/?utm_source=dev.to&amp;utm_medium=article&amp;utm_campaign=aws-waf-captcha-solution\">CapSolver</a> into your high-performance data pipelines.</p><h2>\n  \n  \n  Dissecting the Defense: The Dual Mechanisms of AWS WAF CAPTCHA\n</h2><p>The CAPTCHA action within AWS WAF is a central pillar of its bot control strategy. When a request is identified as suspicious, the WAF doesn't immediately block it; instead, it issues a challenge. This challenge manifests primarily in two distinct forms, each demanding a specialized technical approach for automated resolution.</p><h3>\n  \n  \n  1. The Token-Based Challenge (The Invisible Barrier)\n</h3><p>The most complex and frequently encountered form for automated systems is the token-based verification. This mechanism requires the client to successfully execute a complex JavaScript challenge and, in return, receive a valid, time-limited . This token must then be included in all subsequent requests (typically as a cookie or a header) to prove the client is a legitimate, non-automated browser session.</p><p>The core difficulty for developers lies in the fact that the token generation logic is proprietary, intentionally obfuscated, and subject to frequent, unannounced updates by AWS. To programmatically bypass this, an automation solution must be capable of:</p><ul><li>  Accurately identifying the necessary dynamic parameters (, , ) embedded within the challenge page's source code.</li><li>  Submitting these parameters to a specialized CAPTCHA-solving API.</li><li>  Receiving the successfully generated, valid .</li><li>  Programmatically injecting this token into the automation session's cookie jar for all future requests.</li></ul><h3>\n  \n  \n  2. The Image-Based Challenge (The Visual Puzzle)\n</h3><p>The image-based challenge is more visually familiar, often presenting a grid where the user must identify specific objects (e.g., \"Click all squares with a chair\"). While seemingly straightforward, automating this requires a highly accurate computer vision model trained specifically on the unique image sets and question formats utilized by AWS WAF.</p><p>The automated resolution process involves:</p><ul><li>  Extracting the visual data (usually Base64 encoded images) and the corresponding question from the page.</li><li>  Submitting the visual data and the question to an image classification API.</li><li>  Receiving the coordinates or indices of the correct images as the solution.</li><li>  Programmatically simulating the necessary clicks on the correct grid locations.</li></ul><h2>\n  \n  \n  Strategic Integration: API vs. Browser Automation for Scalability\n</h2><p>Choosing the correct integration method is paramount for achieving enterprise-level scalability. While browser extensions are excellent for quick debugging or small-scale tasks, direct API integration is the mandatory choice for high-volume data acquisition and production systems. For a detailed comparison of high-throughput solvers, you can review resources like this guide on the <a href=\"https://www.capsolver.com/blog/reCAPTCHA/best-serp-captcha-solver\" rel=\"noopener noreferrer\">best CAPTCHA solvers for SERP data extraction</a>.</p><div><table><thead><tr><th>Browser Extension (e.g., CapSolver Extension)</th><th>API Integration (e.g., CapSolver API)</th></tr></thead><tbody><tr><td>Debugging, rapid prototyping, manual checks</td><td>Large-scale data acquisition, high-performance production systems</td></tr><tr><td>Limited by browser instance resource overhead</td><td>Highly scalable, optimized for massive parallel processing</td></tr><tr><td>High (requires full browser rendering and memory)</td><td>Minimal (pure, lightweight HTTP requests)</td></tr><tr><td>Medium (bound to the browser environment)</td><td>High (integrates seamlessly into any language, framework, or cloud function)</td></tr><tr><td>Initial development, script validation</td><td>Mission-critical, continuous operation environments</td></tr></tbody></table></div><h2>\n  \n  \n  Technical Implementation: The Code-First Approach\n</h2><p>Regardless of the specific AWS WAF challenge encountered, the core of the solution lies in leveraging a third-party service like CapSolver to offload the complex, AI-driven task of solving the CAPTCHA. The following code snippets and API definitions illustrate how to integrate this capability, ensuring your scripts can consistently overcome the AWS WAF barrier.</p><blockquote><h3>\n  \n  \n  🎁 Claim Your Developer Bonus\n</h3><p>Don’t miss this opportunity to optimize your pipelines! Use the bonus code  when topping up your CapSolver account and receive an extra 5% bonus on each recharge, with no limitations. Visit the <a href=\"https://dashboard.capsolver.com/dashboard/overview/?utm_source=dev.to&amp;utm_medium=article&amp;utm_campaign=aws-waf-captcha-solution\">CapSolver Dashboard</a> to redeem your bonus now!</p></blockquote><h3>\n  \n  \n  Advanced Considerations for High-Throughput Automation\n</h3><p>For high-throughput requirements, the API-based approach is superior because it eliminates the resource-intensive overhead of launching a full browser instance for every CAPTCHA. A well-architected API solution allows for massive parallelization, handling hundreds of concurrent resolution requests. Furthermore, the use of proxy-less task types, such as the , significantly reduces network complexity and potential failure points, streamlining the automation pipeline.</p><h3>\n  \n  \n  Method 1: Browser-Based Automation with Extension Loading\n</h3><p>For scenarios where a full browser environment (Puppeteer/Selenium) is already required for other tasks (e.g., complex rendering), integrating a CAPTCHA-solving extension simplifies the logic.</p><p><strong>Puppeteer (Node.js) Example:</strong>\nThis code launches a browser with the CapSolver extension loaded, enabling the extension to automatically resolve any AWS WAF CAPTCHA encountered during navigation.</p><div><pre><code></code></pre></div><p><strong>Selenium (Python) Example:</strong>\nIn a Python Selenium script, the extension is loaded via Chrome options, making the CAPTCHA resolution transparent to your main scraping logic.</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Method 2: API-Based Integration for Token and Image Resolution\n</h3><p>For maximum performance and scalability, direct API integration is the best practice. The following structures outline the requests for both token-based and image-based AWS WAF challenges. The official documentation for these task types is available in the <a href=\"https://docs.capsolver.com/guide/captcha/awsWaf/\" rel=\"noopener noreferrer\">AWS WAF CAPTCHA Token Documentation</a>.</p><p><strong>API Request Structure for Token-Based AWS WAF CAPTCHA:</strong>\nThe service handles the complex logic of interacting with the AWS challenge script and returns the crucial  in the response's  field.</p><div><pre><code></code></pre></div><p><strong>API Request Structure for Image-Based AWS WAF CAPTCHA (Classification):</strong>\nFor visual challenges, the task type is classification, requiring the image data and the question as inputs.</p><div><pre><code></code></pre></div><h2>\n  \n  \n  Ethical Considerations and Engineering Best Practices\n</h2><p>While the techniques to  are powerful, they must be deployed with responsibility. The goal of ethical web scraping is to acquire publicly available data without negatively impacting the target website's performance or violating its terms of service.</p><p><strong>Engineering Best Practices for Ethical Automation:</strong></p><ul><li> Always respect the rules defined in the target site's  file.</li><li> Introduce intelligent delays and throttling to mimic human browsing patterns and prevent server overload.</li><li> Utilize a pool of realistic and rotating User-Agents to avoid static bot signatures.</li><li> For commercial projects, ensure your data acquisition strategy is compliant with all relevant laws and the target website's terms of use. For instance, the strategies for bypassing defenses like Cloudflare offer valuable insight into WAF circumvention, as detailed in this guide on <a href=\"https://www.capsolver.com/blog/Cloudflare/how-to-solve-cloudflare\" rel=\"noopener noreferrer\">how to solve Cloudflare Turnstile and Challenge 5s</a>.</li></ul><p>The evolution of AWS WAF CAPTCHA presents a significant, but manageable, technical challenge for the automation community. By deeply understanding the underlying token and image-based mechanisms and strategically employing sophisticated, AI-driven solutions, engineers can successfully integrate CAPTCHA resolution into their scalable data pipelines. The future of web automation hinges on the strategic use of these technologies to ensure uninterrupted, efficient, and reliable data flow.</p><h2>\n  \n  \n  Frequently Asked Questions (FAQ)\n</h2><p><strong>1. Why is the AWS WAF CAPTCHA so difficult to solve compared to reCAPTCHA?</strong></p><p>AWS WAF CAPTCHA is a multi-stage defense: a proprietary token-based JavaScript challenge followed by an image classification puzzle. The token generation is proprietary and frequently updated, making simple script execution insufficient. It requires a specialized AI model, like those used by <a href=\"https://dashboard.capsolver.com/dashboard/overview/?utm_source=dev.to&amp;utm_medium=article&amp;utm_campaign=aws-waf-captcha-solution\">CapSolver</a>, that is continuously trained on the latest AWS challenges to extract the necessary parameters and solve the puzzle accurately.</p><p><strong>2. Can I use a free or open-source CAPTCHA solver for AWS WAF?</strong></p><p>Due to the proprietary nature and constant evolution of the AWS WAF challenge, free or open-source solvers are generally ineffective. They lack the continuous maintenance, sophisticated AI models, and real-time updates required to successfully bypass the token-based challenge. Reliable solutions must be subscription-based to support the necessary research and development infrastructure.</p><p><strong>3. Is it possible to solve AWS WAF CAPTCHA without using a third-party service?</strong></p><p>While technically possible to reverse-engineer the token generation script, it is highly impractical for most engineering teams. It demands significant, continuous effort to maintain the bypass mechanism as AWS frequently updates its WAF. Using a dedicated third-party service is the most cost-effective and reliable strategy for maintaining a stable, high-performance automation pipeline.</p><p><strong>4. Does CapSolver support other CAPTCHA types like reCAPTCHA v2/v3?</strong></p><p>Yes, CapSolver is a comprehensive  service. In addition to the , it supports a wide range of other types, including reCAPTCHA <a href=\"https://www.capsolver.com/products/recaptchav2/?utm_source=dev.to&amp;utm_medium=article&amp;utm_campaign=aws-waf-captcha-solution\">v2</a> and <a href=\"https://www.capsolver.com/products/recaptchav3/?utm_source=dev.to&amp;utm_medium=article&amp;utm_campaign=aws-waf-captcha-solution\">v3</a>, Cloudflare Turnstile, and more. Check our <a href=\"https://www.capsolver.com/products/?utm_source=dev.to&amp;utm_medium=article&amp;utm_campaign=aws-waf-captcha-solution\">Product Page</a>.</p><p><strong>5. How long does the AWS WAF token last?</strong></p><p>The  is a temporary session token. Its duration is typically short, often lasting only , depending on the target website's configuration. For continuous scraping, you must monitor the token's expiration and re-run the challenge-solving process to obtain a new one. This is a critical factor for maintaining a reliable automation pipeline.</p>","contentLength":10385,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Software Foundation: Giày trekking outdoor nữ Humtto 160560B","url":"https://humtto.vn/giay-trekking-outdoor-nu-humtto-160560b/","date":1761898762,"author":"","guid":323474,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-28j","date":1761898045,"author":"Vibe YouTube","guid":323416,"unread":true,"content":"<p>Ever wondered how to build a fully-fledged AI agent in Python in less than ten minutes? Tech With Tim’s latest video walks you through everything—installing dependencies, snagging your OpenAI API key, importing the right libraries, assembling tools, spinning up the LLM and agent, then writing the driver code and testing it out live. All the code’s on GitHub so you can follow along at your own pace.</p><p>Plus, you’ll snag a free trial of Notion to manage your projects and a month of PyCharm Pro on the house. If you’re itching to level up even further, Tim’s DevLaunch mentorship program offers hands-on guidance to help you crush real-world projects and land that dream job.</p>","contentLength":685,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-5771","date":1761898033,"author":"Vibe YouTube","guid":323415,"unread":true,"content":"<p>This video walks you through three modern Python tricks you’ve probably never used in real-world projects:  for cleaner branching,  to ditch boilerplate when modeling data, and <strong>positional- &amp; keyword-only arguments</strong> to make your function APIs crystal clear. Each feature is time-stamped (0:00, 4:24, 8:47) so you can jump right to what you need.</p><p>Along the way, Tim hooks you up with a 20% Brilliant.org discount to supercharge your learning and plugs his DevLaunch mentorship program if you’re serious about turning tutorials into real projects and landing that dream job.</p>","contentLength":573,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Build Full-Stack Web Apps in Pure Python with Reflex","url":"https://dev.to/devasservice/build-full-stack-web-apps-in-pure-python-with-reflex-1cim","date":1761896488,"author":"Developer Service","guid":323403,"unread":true,"content":"<p>For years, web developers have been juggling the infamous . You write your backend in Python, maybe with Django or FastAPI, and then switch gears entirely to build the frontend with JavaScript frameworks like React, Vue, or Next.js. It’s a constant context switch between two ecosystems, two dependency managers, and two mental models. Even simple features like syncing state between backend and UI can become an exercise in boilerplate and glue code.</p><p>Wouldn’t it be simpler if you could just build everything, <strong>frontend and backend alike, in Python</strong>?</p><p>That’s the promise of , an open-source framework designed to let you create <strong>full-stack web applications in pure Python</strong>. With Reflex, you write your components, state management, and event handlers all in the same language you already use for APIs, data processing, and AI integrations. Under the hood, it compiles your Python UI code into a modern React/Next.js frontend and runs a Python backend that handles state and communication seamlessly via WebSockets.</p><p>In this article, we’ll take a deep dive into what Reflex is, how it works, and why it’s generating buzz in the Python community. You’ll learn about its architecture, core features, and how to get started with a simple app (source code at the end of the article).</p><p><a href=\"https://reflex.dev\" rel=\"noopener noreferrer\"></a> is an <strong>open-source framework for building interactive web applications entirely in Python</strong>. It aims to eliminate the traditional separation between frontend and backend development by allowing you to define your UI, state, and logic in one unified Python codebase. </p><p>Reflex automatically handles the translation of your Python code into a modern React/Next.js frontend, while managing communication and state synchronization with a Python backend under the hood.</p><p>At its core, Reflex is built around three simple but powerful goals:</p><ul><li> Build full-stack web apps using only Python, no need to learn or write JavaScript, TypeScript, or React.</li><li> Start building interactive applications quickly with an intuitive, Pythonic API.</li><li> Scale from simple prototypes to production-grade applications with ease.</li></ul><p>Originally launched under the name , the project rebranded to  to better reflect its mission of providing a more “reflexive” development experience, where changes in code and state seamlessly reflect in the user interface.</p><p>Despite being a relatively new entrant in the Python ecosystem, Reflex has gained significant traction, attracting a large and enthusiastic community. On <a href=\"https://github.com/reflex-dev/reflex\" rel=\"noopener noreferrer\">GitHub</a>, the project has amassed , reflecting the growing interest among Python developers looking for a modern, unified approach to web development.</p><p>Reflex isn’t just another Python web framework, it’s an attempt to redefine what building web apps in Python can look like: <strong>no JavaScript, no separate front-end stack, and no friction</strong>.</p><h2>\n  \n  \n  Architecture &amp; How It Works\n</h2><p>At a high level,  unifies your  into a single Python codebase. Unlike traditional web development where the frontend (React, Vue, etc.) and backend (Django, Flask, FastAPI) are separate systems communicating through REST or GraphQL APIs, Reflex merges them into one coherent framework.</p><p>Here’s how the architecture breaks down:</p><h3>\n  \n  \n  Frontend: Python Components → React/Next.js\n</h3><p>Reflex lets you define your <strong>user interface using Python components</strong>, which are then <strong>compiled into a modern React/Next.js frontend</strong> under the hood. You never have to touch JavaScript, Reflex automatically generates the necessary HTML, CSS, and JS from your Python code.</p><h3>\n  \n  \n  Backend: FastAPI-Powered State Management\n</h3><p>Behind the scenes, Reflex runs a <strong>Python backend (based on FastAPI)</strong> that handles , , and  between the UI and server via .</p><p>Every interaction on the frontend, a button click, text input, or dropdown change, triggers an event that is sent back to the Python backend. The backend updates the application’s state, and Reflex automatically syncs the updated state back to the frontend UI.</p><p>Central to Reflex’s design is the concept of a  class.  </p><p>You define reactive variables and methods (event handlers) inside a subclass of . When a state variable changes, Reflex automatically updates all UI components that depend on it, no manual DOM manipulation or client-side JavaScript required.</p><p>This unified approach means:</p><ul><li>You’re writing  all in Python, no context switching to JavaScript.</li><li>You get  out of the box via WebSockets.</li><li>Your app is , much like React or Vue, but powered by Python instead of JavaScript.</li></ul><p>However, this also introduces trade-offs. Because the frontend depends on a live connection to the Python backend, performance and scalability can vary for very large real-time workloads.</p><h3>\n  \n  \n  How Reflex Differs from Django, Streamlit, and Dash\n</h3><p>While Django focuses on traditional server-rendered web pages and APIs, and frameworks like Streamlit or Dash cater primarily to data apps and dashboards, Reflex occupies a middle ground:</p><ul><li><strong>Compared to Django + React:</strong> Reflex removes the need to manage two separate codebases and build pipelines.</li><li><strong>Compared to Streamlit/Dash:</strong> Reflex gives you more flexibility, you can build full-featured web applications, not just dashboards, with complete control over routing, components, and state.</li></ul><p>Reflex delivers a <strong>modern, Pythonic alternative</strong> to full-stack web development, one that feels as intuitive as writing a Flask app, but produces dynamic, React-grade user experiences.</p><p>While you explore Reflex and build your first Python-powered web app, don’t forget to grab the <strong>“Master Python One-Liners”</strong> cheat sheet from my site. </p><p>It’s absolutely free and packed with clean, efficient Python snippets that’ll boost your productivity across everything you build, from Reflex apps to Django backends. </p><p>Below are the core features that make Reflex a compelling framework for modern developers.</p><p>Reflex lets you write both your frontend and backend entirely in Python. You define components, routes, state, and event handlers all in the same language and project structure. Under the hood, Reflex compiles your Python UI into a modern React/Next.js app, but you never have to deal with the JavaScript ecosystem directly.  </p><p>This makes it ideal for Python developers who want to build dynamic, interactive web apps without learning a whole new frontend stack.</p><p>Reflex ships with a large library of <strong>ready-to-use UI components</strong> — everything from buttons, grids, and forms to modals and navigation bars.</p><p>Each component follows a Pythonic syntax and can be combined to create rich, responsive layouts.</p><p>Beyond the built-ins, Reflex also supports <strong>wrapping React components</strong>, meaning you can import and use virtually any third-party React library without writing JavaScript yourself.  </p><p>Because Reflex apps run entirely in Python, they have <strong>direct access to the Python ecosystem</strong>, including APIs, databases, file formats, and data libraries like , , or .  </p><p>You can build dashboards that query databases, call machine learning models, or visualize analytics, all in one codebase. </p><h3>\n  \n  \n  Deployment &amp; Hosting Support\n</h3><p>Deploying a Reflex app is straightforward. With a single command, you can build and deploy your app using Reflex’s built-in hosting or export it to deploy anywhere (e.g., Vercel, AWS, or your own server).</p><p>This streamlined deployment process lowers the barrier from prototype to production — especially useful for small teams and indie developers.</p><h3>\n  \n  \n  Themes &amp; UI Customization\n</h3><p>Reflex includes a  that lets you easily define color palettes, typography, spacing, and global styles.</p><p>Apps built with Reflex are , adapting automatically to different screen sizes and devices, an essential feature for modern web experiences.  </p><h3>\n  \n  \n  Rapid Prototyping &amp; AI Builder Support\n</h3><p>Reflex is especially useful for , you can go from idea to functional web interface in minutes. For developers working in AI or data-driven projects, this means you can build interfaces for models, visualization tools, or automation dashboards directly from your Python environment, no need for a frontend developer.</p><h2>\n  \n  \n  Getting Started - A Quick Walk-through\n</h2><p>All you need is Python ≥ 3.8. Install Reflex with pip:</p><p>Then initialize a new project:</p><div><pre><code>reflex init  my_todo_app\n</code></pre></div><p>Choosing '1' for the option of a blank Reflex app:</p><div><pre><code>─────────────────────────────────────────────────────────────────────── Initializing my_todo_app ───────────────────────────────────────────────────────────────────────\n10:53:51] Initializing the web directory.                                                                                                                console.py:231\n\nGet started with a template:\n0 Try our free AI builder.\n1 A blank Reflex app.\n2 Premade templates built by the Reflex team.\nWhich template would you like to use? 0: 1\n10:54:05] Initializing the app directory.                                                                                                                console.py:231\nSuccess: Initialized my_todo_app using the blank template.\n</code></pre></div><p>This command creates a minimal Reflex project scaffold, clean, readable, and ready to run.  </p><p>After initialization, you’ll see something like this:</p><div><pre><code>├── .web/                # Auto-generated frontend (React)\n├── assets/              # Static files\n├── my_todo_app/         # Your main Python package\n│   └── my_todo_app.py   # Entry point: state + UI\n├── rxconfig.py          # Reflex configuration\n└── requirements.txt\n</code></pre></div><p>Everything happens inside , that’s where your  (data) and  (frontend) live together.</p><p>Every Reflex app has two key parts:</p><ul><li> – defines your app’s data and logic.</li><li> – define how the interface should look.</li></ul><p>Here’s a complete working example that you can copy into :</p><div><pre><code></code></pre></div><p>This app lets you type a task, click “Add,” and remove items with the ❌ button, all powered by  and  under the hood.</p><p>To start the app, simply run:</p><p>Reflex will automatically spin up both backend and frontend servers.</p><div><pre><code>───────────────────────────────────────────────────────────────────────── Starting Reflex App ──────────────────────────────────────────────────────────────────────────\n10:59:32] Compiling: ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━   0%  0/21 \n10:59:32] Compiling: ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 21/21 0:00:00\n───────────────────────────────────────────────────────────────────────────── App Running ──────────────────────────────────────────────────────────────────────────────\nApp running at: http://localhost:3000/\nBackend running at: http://0.0.0.0:8000\n</code></pre></div><p>Let's see the example in action:</p><p>Reflex represents a refreshing shift in how Python developers can approach full-stack web development. Instead of juggling separate ecosystems for frontend and backend, Reflex allows you to <strong>build fully interactive web applications using only Python</strong>, seamlessly integrating UI, logic, and state in a single, unified framework.</p><p>For developers coming from , , or , this approach means , , and the ability to <strong>leverage your existing Python expertise</strong> without having to dive into the complexities of JavaScript frameworks.</p><p>If you’re curious, the best way to understand Reflex’s potential is to , start with the classic counter app or prototype a small tool from one of your existing Python projects. You’ll quickly see how natural it feels to design interfaces, manage state, and deploy apps, all from a single language.</p><p>As part of my broader focus on <strong>Python, Django, and AI development</strong>, Reflex fits naturally into the growing ecosystem of tools that let you build smarter, faster, and more maintainable applications. </p>","contentLength":12482,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"I Rewrote My Media Downloader from Scratch - Here's What I Learned","url":"https://dev.to/nk2552003/i-rewrote-my-media-downloader-from-scratch-heres-what-i-learned-2ca7","date":1761895796,"author":"Nitish","guid":323402,"unread":true,"content":"<p>It started simple enough - I wanted to download YouTube videos for offline studying. Couldn't stream during power cuts, and mobile data was expensive. So I hacked together a Python script using .</p><p>Fast forward a few months, and that \"simple script\" had become a 2000-line monster with zero documentation, no error handling, and more bugs than features. Friends kept asking me to add Instagram support, then Spotify, then TikTok... and each time I'd just copy-paste code and pray it worked.</p><p>It was time for a complete rewrite.</p><p><strong>Ultimate Media Downloader v2.0.0</strong> - a CLI tool that downloads media from 1000+ platforms with proper architecture, comprehensive docs, and features I actually wish I had from day one.</p><ul><li>🌐 Universal platform support (YouTube, Spotify, Instagram, TikTok, SoundCloud, Twitter, Facebook, Twitch, Apple Music, and more via yt-dlp)</li><li>⚡ Concurrent downloads with resume capability</li><li>🎨 Beautiful CLI with progress bars and real-time stats</li><li>🔐 Proxy support, SSL/TLS bypass, Cloudflare protection</li><li>📦 One-command installation scripts for all platforms</li><li>📚 Actually useful documentation (8+ guides with flowcharts)</li></ul><h3>\n  \n  \n  1. Documentation is Not Optional\n</h3><p>Writing docs made me realize how confusing my own code was. If I couldn't explain it simply, it was probably too complex. Created:</p><ul><li>Architecture overview with Mermaid diagrams</li><li>Usage guides with real examples</li></ul><p>\"Just install these 10 dependencies\" doesn't work. Created automated scripts:</p><div><pre><code>\n./scripts/install.sh\n\n\nscriptsnstall.bat\n</code></pre></div><p>One command, everything works. Made onboarding 10x easier.</p><h3>\n  \n  \n  3. Error Messages Should Be Helpful\n</h3><div><pre><code>❌ Download failed for https://example.com/video\n   Reason: 403 Forbidden - Video may be private or region-locked\n\n   Suggestions:\n   • Check if the video is publicly accessible\n   • Try using --cookies for authenticated content\n   • Use --proxy if content is region-restricted\n\n   Need help? Open an issue: https://github.com/...\n</code></pre></div><p>Spent 2 weeks writing tests. Saved myself months of debugging later. Every platform has unit tests, integration tests, and edge case coverage.</p><h3>\n  \n  \n  5. Git Commits Tell a Story\n</h3><p>Used conventional commits:</p><div><pre><code>feat: add Instagram story support\nfix: handle rate limiting on Spotify\ndocs: add Mermaid flowcharts for download process\nrefactor: extract common validation logic\n</code></pre></div><p>Made it easier to track what changed and why.</p><div><pre><code>\ngit clone https://github.com/NK2552003/ULTIMATE-MEDIA-DOWNLOADER.git\nULTIMATE-MEDIA-DOWNLOADER\n./scripts/install.sh\n\n\numd \numd  1080p \numd </code></pre></div><div><pre><code>\numd \numd \numd \numd \numd </code></pre></div><ul><li> - Electron or PyQt desktop app</li><li> - One-click downloads from any page</li><li><strong>Cloud Storage Integration</strong> - Direct upload to Drive/Dropbox</li><li> - React Native companion</li><li> - For third-party integrations</li></ul><h2>\n  \n  \n  Challenges I'm Still Solving\n</h2><ol><li> - Some platforms are aggressive. Need smarter throttling</li><li> - Can't download DRM-protected media (and shouldn't)</li><li> - Cookie/auth handling is tricky</li><li> - Quality varies, need better handling</li></ol><p>The project is open source and I'd love contributions! Whether it's:</p><ul><li>Adding new platform support</li></ul><p>This rewrite taught me that good software is 20% code and 80% everything else - architecture, documentation, testing, user experience, and maintainability.</p><p>If you're thinking about rewriting your project from scratch, my advice:</p><ol><li> - Take time to plan the architecture</li><li> - Future you will thank present you</li><li> - Don't wait until everything breaks</li><li> - They'll find bugs you never imagined</li><li> - v2.0 won't be perfect, and that's okay</li></ol><p>Would love to hear your thoughts, especially if you've gone through similar rewrites. What worked? What didn't?</p>","contentLength":3532,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"From Data to PowerPoint: Generate Dynamic Presentations with Python","url":"https://dev.to/allen_yang_f905170c5a197b/from-data-to-powerpoint-generate-dynamic-presentations-with-python-2cjd","date":1761895198,"author":"Allen Yang","guid":323401,"unread":true,"content":"<p>Creating compelling PowerPoint presentations is often a time-consuming and repetitive task. From meticulously arranging text boxes and images to ensuring consistent formatting across dozens of slides, the manual effort can quickly become a bottleneck, especially when dealing with data-intensive reports or recurring updates. Developers, data scientists, educators, and business professionals frequently face the pain point of translating dynamic data into static, visually appealing slides.</p><p>Imagine a world where your data analysis results automatically populate a presentation, or where a set of standardized reports can be generated with a single script, perfectly formatted every time. This is where Python, with its powerful automation capabilities, steps in. By leveraging the right libraries, you can transform the laborious process of presentation creation into an efficient, scriptable workflow. This article will guide you through the process of programmatically generating PowerPoint presentations using Python, with a specific focus on the Spire.Presentation for Python library, empowering you to automate and enhance your presentation tasks.</p><h2>\n  \n  \n  Getting Started: Setting Up Your Python Environment\n</h2><p>The first step in our journey to automated presentation creation is to set up your Python environment and familiarize ourselves with the fundamental concepts. We'll be using Spire.Presentation for Python, a robust library designed for working with PowerPoint files.</p><p>To begin, you need to install the library. This can be done easily using pip, Python's package installer:</p><div><pre><code>pip spire.presentation\n</code></pre></div><p>Once installed, the core workflow involves creating a  object, adding  objects to it, populating these slides with content, and finally, saving the presentation to a file. Each  object represents a new PowerPoint file, and  objects within it are where you'll place your text, images, and other visual elements.</p><p>Let's start with a minimal example to create a blank presentation with a single slide and save it. This foundational script will serve as the basis for all our subsequent operations.</p><div><pre><code></code></pre></div><p>This simple script initializes a presentation, ensures there's at least one slide (which is true by default), and then saves it as a  file. Running this will generate a functional, albeit empty, PowerPoint file.</p><h2>\n  \n  \n  Populating Slides: Text, Shapes, and Images\n</h2><p>With our basic setup complete, the next logical step is to add meaningful content to our slides. Spire.Presentation for Python provides comprehensive functionalities to add various elements, including text boxes, shapes, and images, and to style them precisely.</p><p>Adding text is fundamental to any presentation. You can add text in various forms, such as titles, bullet points, or paragraphs. The library allows you to control properties like font size, bolding, and color.</p><div><pre><code> \\\n                             \\\n                             \\\n                             \\\n                            </code></pre></div><p>Shapes are crucial for visual organization and emphasis. You can add various predefined shapes like rectangles, circles, and arrows, and customize their appearance.</p><div><pre><code></code></pre></div><p>Images are essential for making presentations engaging. The library allows you to insert images from local files, controlling their position and size on the slide.</p><div><pre><code></code></pre></div><p>By combining these elements, you can programmatically construct visually rich slides that convey your message effectively.</p><h2>\n  \n  \n  Enhancing Presentations with Data and Structure\n</h2><p>Beyond basic text and images, presentations often require structured data display and consistent layouts. Spire.Presentation for Python excels at handling these advanced requirements, particularly with tables and slide layouts.</p><h3>\n  \n  \n  Programmatic Table Generation\n</h3><p>Tables are indispensable for presenting numerical or categorical data clearly. Generating tables programmatically is incredibly powerful for data visualization, allowing you to feed data directly from databases, spreadsheets, or analysis scripts into your presentations.</p><div><pre><code></code></pre></div><p>This example demonstrates creating a table, populating it with data, and applying basic styling like header highlighting and alternating row colors. This approach is highly scalable for reporting.</p><p>PowerPoint presentations often rely on predefined slide layouts (like \"Title Slide,\" \"Title and Content,\" \"Two Content\") to maintain visual consistency and save design time. Spire.Presentation for Python allows you to select and apply these layouts programmatically.</p><div><pre><code> \\\n                                          \\\n                                         </code></pre></div><p>By leveraging slide layouts, you can ensure that your programmatically generated presentations adhere to corporate branding guidelines or a specific visual style, significantly reducing the need for manual adjustments.</p><h2>\n  \n  \n  Beyond Manual: Embracing Automation for Dynamic Presentations\n</h2><p>The examples provided demonstrate just a fraction of what's possible when you combine Python's automation capabilities with a powerful library like Spire.Presentation for Python. The key benefits of this approach are clear:</p><ul><li> Drastically reduce the time spent on repetitive presentation tasks. Generate dozens or hundreds of slides in seconds.</li><li> Ensure uniform branding, formatting, and layout across all your presentations, eliminating human error.</li><li> Easily integrate with data sources, allowing for dynamic content updates. Imagine a daily report presentation that updates itself automatically from a database.</li><li> Directly embed data visualizations, charts, and tables generated from your Python data analysis scripts, creating compelling data-driven narratives.</li></ul><p>This Pythonic approach to presentation creation opens up new possibilities for dynamic reporting, personalized presentations, and streamlined educational content delivery. Developers can integrate this into larger applications, data scientists can automate their result dissemination, and educators can generate customized learning materials. The future of presentations lies in embracing automation, and Python provides the robust toolkit to make this a reality. By mastering these techniques, you're not just creating slides; you're building a system for intelligent, efficient, and consistent communication.</p>","contentLength":6203,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How to Convert Excel to PDF with Python","url":"https://dev.to/codingco/how-to-convert-excel-to-pdf-with-python-3b33","date":1761894161,"author":"Jeremy K.","guid":323400,"unread":true,"content":"<p>In modern workflow and data management, converting Excel spreadsheets to PDF is a ubiquitous need—whether for client reports, archival purposes, or cross-team collaboration. PDFs excel at preserving formatting, ensuring compatibility across devices, and preventing unintended edits, making them the gold standard for shareable documents. This comprehensive guide walks you through using  to master Excel-to-PDF conversion, from basic one-click transforms to advanced, customized workflows.</p><h2>\n  \n  \n  Prerequisites &amp; Installation\n</h2><p>To get started, install the Spire.XLS library via Python’s  package manager. Choose between the full-featured version or the free tier (with limitations):</p><p><strong>Free Version (With Restrictions)</strong></p><blockquote><p>Note: The free version is ideal for personal projects or small-scale tasks. </p></blockquote><h2>\n  \n  \n  Basic Excel-to-PDF Conversion (Entire Workbook)\n</h2><p>Converting an entire Excel workbook to PDF is straightforward with Spire.XLS. The following code snippet handles loading the file, configuring page fitting, and exporting—all in just a few lines:</p><div><pre><code></code></pre></div><ol><li>: Create a  instance to handle Excel file operations.</li><li>: Use  to import your Excel document (specify the full file path if it’s not in the working directory).</li><li>: Enable  to ensure content adapts to PDF page size (avoids truncated data).</li><li>: Save the workbook as a PDF with , specifying the output path and format.</li><li>: Call  to free system resources (critical for batch processing).</li></ol><h2>\n  \n  \n  Convert Specific Worksheets (Targeted Exports)\n</h2><p>In most scenarios, you won’t need to convert an entire workbook—only select worksheets. Spire.XLS lets you target individual sheets by index (note: worksheet indices start at 0) or name:</p><div><pre><code></code></pre></div><blockquote><p>Pro Tip: Use worksheet names instead of indices if your Excel file’s sheet order might change—this makes your code more robust.</p></blockquote><h2>\n  \n  \n  Advanced PDF Customization\n</h2><p>Spire.XLS offers granular control over PDF output, letting you tailor everything from page layout to print settings. Below are key customizations to elevate your converted PDFs:</p><p>Customize page orientation, paper size, margins, and gridline visibility to match your use case (e.g., reports, invoices, or data sheets):</p><div><pre><code></code></pre></div><h3>\n  \n  \n  2. Batch Convert Multiple Excel Files\n</h3><p>For processing folders of Excel documents (e.g., monthly reports), use this scalable batch script. It automates file discovery, conversion, and error handling:</p><div><pre><code></code></pre></div><h2>\n  \n  \n  Final Tips for Optimal Results\n</h2><ol><li>: Always validate conversions with a small Excel file first to adjust settings (e.g., margins, orientation) before batch processing.</li><li>: For Excel files with multiple sheets or heavy data, disable  if it causes delays—manually set column widths instead.</li><li>: Regularly run <code>pip install --upgrade Spire.XLS</code> to access new features and bug fixes.</li></ol><p>Whether you’re a data analyst streamlining report sharing or a developer integrating conversion into a workflow, this guide equips you to handle every Excel-to-PDF scenario with confidence. With Spire.XLS for Python, what once took manual effort becomes an automated, reliable process—saving you time and ensuring consistent, professional results.</p>","contentLength":3082,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-4igp","date":1761890887,"author":"Vibe YouTube","guid":323383,"unread":true,"content":"<p><em>Learn how to spin up a Python AI agent in under ten minutes with Tech With Tim!</em> The video walks you through setting up your environment, grabbing an OpenAI API key, wiring up the imports, tools, LLM &amp; agent logic, and testing everything—complete with handy timestamps and a link to the GitHub repo for the full code.</p><p>Along the way, you’ll spot freebies like Notion access, a month of PyCharm Pro, and an invite to DevLaunch—Tim’s no-fluff mentorship program designed to help you build real-world projects and land that dream dev job.</p>","contentLength":540,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-neh","date":1761890875,"author":"Vibe YouTube","guid":323382,"unread":true,"content":"<p>This video dives into three modern Python features you might be overlooking: the new match statement for pattern matching, the super-handy dataclasses for boilerplate-free classes, and the often-missed positional-only &amp; keyword-only arguments for cleaner function signatures. Along the way, Tim shares a sweet Brilliant deal (20% off premium) to level up your coding chops for free.</p><p>If you’re ready to go beyond tutorials and actually build real-world projects, Tim’s DevLaunch mentorship program offers hands-on guidance, accountability, and proven strategies to help you land that dream job.</p>","contentLength":596,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"My ML Learning Journey: From Confusion to Building a Working Model","url":"https://dev.to/cessamaeeee/my-ml-learning-journey-from-confusion-to-building-a-working-model-235p","date":1761890820,"author":"Princess Mae Sanchez","guid":323381,"unread":true,"content":"<p>I'm learning machine learning, and I want to share this journey with you. Not as an expert—I literally started Kaggle's <strong>\"Intro to Machine Learning\"</strong> course last week—but as someone who just figured out how to build their first predictive model and wants to help others do the same.</p><p>If you've been curious about AI and machine learning but thought it was too complicated, or if terms like \"neural networks\" and \"algorithms\" sound intimidating, this post is for you. Let me show you that it's actually way more approachable than you think!</p><h2>\n  \n  \n  Why I'm Learning Machine Learning\n</h2><p>I've been fascinated by AI for a while now. Every time I see AI-powered recommendations on Netflix, autocomplete on my phone, or ChatGPT writing code, I wonder: <strong>\"How does this actually work?\"</strong></p><p>I wanted to go beyond just using AI tools—I wanted to understand the fundamentals. That's when I discovered Kaggle's free \"Intro to Machine Learning\" course, and honestly? It's been one of the best decisions I've made this year.</p><p> Understand how machines learn from data and build my own models (even simple ones!)</p><p><strong>Why I'm sharing publicly:</strong> Learning in public keeps me accountable, helps me remember concepts better by teaching them, and hopefully helps someone else who's just starting out.</p><p>Here are the key concepts I wrapped my head around:</p><ul><li>How to load and explore data with Pandas</li><li>The difference between features (X) and targets (y)</li><li>Building a decision tree model</li><li>Why you can't just test on training data (this was a big \"aha!\" moment)</li><li>What overfitting and underfitting actually mean</li><li>How Random Forests make better predictions</li></ul><p>Now let me teach you what I learned!</p><h2>\n  \n  \n  Tutorial: Build Your First Machine Learning Model (Seriously, You Can Do This!)\n</h2><p>Let me walk you through building a house price predictor using the Melbourne Housing dataset—the same project I just completed. We'll go step by step, and I'll explain everything in plain English.</p><ul><li>A Kaggle account (it's free!)</li><li>Basic Python knowledge (if you know variables and functions, you're good)</li><li>The Melbourne Housing dataset from Kaggle (it's already available when you start!)</li></ul><p>Pro tip: I'm doing this directly in a Kaggle notebook - no setup required! Just click \"New Notebook\" on Kaggle and you're ready to code.</p><h2>\n  \n  \n  Step 1: Understanding the Problem\n</h2><p> Predict how much a house in Melbourne will cost based on its features (size, number of rooms, land size, etc.)\n**Think of it like this: **If I told you a Melbourne house has 4 bedrooms, 2 bathrooms, 500 sqm land, and 150 sqm building area, could you guess roughly what it costs? You'd probably compare it to other houses you know. That's exactly what we're teaching the computer to do!</p><h2>\n  \n  \n  Step 2: Setting Up - Import Libraries\n</h2><p>First, we need to bring in our tools:<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fr7tkr9fyn7v3r1cagk3m.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fr7tkr9fyn7v3r1cagk3m.png\" alt=\" \" width=\"584\" height=\"138\"></a></p><ul><li> is like Excel for Python—it handles data tables</li><li> (scikit-learn) contains all our machine learning tools</li><li>We're importing specific tools we'll need for building and testing models</li></ul><p>Think of it like: Opening your toolbox before starting a project - we're grabbing the hammer, screwdriver, and wrench we'll need!</p><p><strong>Important note for Kaggle users:</strong> When you attach a dataset in Kaggle, it's stored in <code>/kaggle/input/[dataset-name]/</code>. That's why we use that special path!</p><h2>\n  \n  \n  Step 4: Exploring the Data\n</h2><p>Before building any model, you need to understand your data:<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F70g0rdvvotfmhwbma4r7.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F70g0rdvvotfmhwbma4r7.png\" alt=\" \" width=\"421\" height=\"249\"></a></p><ul><li>: How many houses have this information</li><li>: The average value (e.g., average price is around $1M!)</li><li>: The range of values</li><li>: The median (middle value) - helps spot outliers</li><li>: Some houses don't have all information filled in</li></ul><p>: The Melbourne dataset has 13,580 houses, but I noticed that some columns like BuildingArea only have 7,130 values. That means almost half the houses are missing this info! We need to handle this.</p><h2>\n  \n  \n  Step 5: Choosing and Cleaning Our Data\n</h2><p>Here's where we decide what to use and clean up the missing values:<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fp7w11oq39xdwwp13coiy.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fp7w11oq39xdwwp13coiy.png\" alt=\" \" width=\"763\" height=\"399\"></a></p><p> - I picked characteristics that logically affect price:\n-: More rooms = usually more expensive\n-: More bathrooms = usually more expensive\n-: Bigger lot = usually more expensive\n-: Bigger house = usually more expensive</p><p>- This removes any house that's missing data in our chosen columns</p><ul><li>Started with 13,580 houses</li><li>After cleaning: about 6,196 complete houses</li><li>We lose some data, but the remaining data is reliable!</li></ul><ul><li>In math,  represents input variables and** y** is what we're solving for</li><li> (features) → goes into the model → y (prediction) comes out</li></ul><p> It's like doing a survey - you can only use complete responses, so you filter out any surveys with missing answers.</p><h2>\n  \n  \n  Step 6: The Critical Step - Split Your Data!\n</h2><p>This is where I made my first mistake, so pay close attention!<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ff78fkea1r3quhddpxh74.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ff78fkea1r3quhddpxh74.png\" alt=\" \" width=\"800\" height=\"162\"></a></p><p><strong>Why split the data? Here's the critical lesson:</strong>\nImagine you're studying for a test. You memorize 10 practice questions. Then the test has those EXACT 10 questions. You ace it! But did you actually learn the material, or did you just memorize?</p><ul><li>(75%): The model learns patterns from these houses</li><li>(25%): We test on houses the model has NEVER seen</li></ul><p>?**</p><ul><li>Ensures we get the same random split every time</li><li>Makes results reproducible (crucial for debugging!)</li><li>You can use any number (1, 42, 123, etc.)\nThis prevents *(memorization) and ensures our model actually learned patterns, not just memorized answers!</li></ul><h2>\n  \n  \n  Step 7: Building Your First Model - Decision Tree\n</h2><p>Here's where the magic happens:<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fwicsuvptqrp26xh0kkda.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fwicsuvptqrp26xh0kkda.png\" alt=\" \" width=\"563\" height=\"322\"></a></p><p> This is our model type. Think of it as a flowchart that asks questions:</p><ul><li>\"Does the house have more than 3 rooms?\"</li><li>\"Is the land size larger than 200 sqm?\"</li><li>\"Is the building area larger than 100 sqm?\"</li><li>Based on the answers, it navigates to a prediction</li></ul><p>- Ensures consistent results every time</p><p> - This is the training! The model studies the training houses and learns patterns</p><h2>\n  \n  \n  Step 8: Measuring Accuracy - Mean Absolute Error (MAE)\n</h2><p>Now let's see how good our model is:<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdyahh0gamizz5l3wk6wj.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdyahh0gamizz5l3wk6wj.png\" alt=\" \" width=\"579\" height=\"114\"></a></p><h2>\n  \n  \n  Step 9: Making It Better with Random Forest\n</h2><p>Single decision trees are okay, but Random Forests are MUCH better. Here's the concept:</p><ul><li> = asking one real estate agent's opinion</li><li> = asking 100 agents and averaging their opinions</li></ul><p>Which would you trust more? The crowd wisdom!<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fna76aidfk9g2fps0tow7.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fna76aidfk9g2fps0tow7.png\" alt=\" \" width=\"590\" height=\"453\"></a></p><p><strong>Why is Random Forest better?</strong></p><ol><li>Creates many different decision trees (typically 100 trees)</li><li>Each tree is trained on a slightly different subset of data</li><li>Each tree makes its own prediction</li><li>Final prediction = average of all trees</li><li>Result: More accurate, more stable, less prone to overfitting!</li></ol><p>\nJust by switching algorithms, we improved by over $50,000 in prediction accuracy!</p><h2>\n  \n  \n  Step 10: Comparing Models Side by Side\n</h2><p>Let's see the comparison clearly:<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fk5fy0cgrywy8ad2tao9z.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fk5fy0cgrywy8ad2tao9z.png\" alt=\" \" width=\"567\" height=\"214\"></a></p><p><strong>Random Forest is clearly the winner! 🏆</strong></p><h2>\n  \n  \n  Step 11: Seeing Real Predictions\n</h2><p>Let's look at how our best model (Random Forest) actually predicts on specific houses:<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F9p85m5l0cxw1dwxurou5.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F9p85m5l0cxw1dwxurou5.png\" alt=\" \" width=\"800\" height=\"541\"></a></p><h2>\n  \n  \n  Step 12: Train Final Model on ALL Data\n</h2><p>Once you're satisfied with your model's performance, train it on ALL available data:</p><ul><li>You already validated that Random Forest works well</li><li>We were holding back 25% of data for validation</li><li>Now we use ALL 6,196 houses to train</li><li>This makes the model even more accurate for real predictions</li></ul><p> You practiced with 75% of your study materials and tested yourself on 25%. Now that you know you understand the material, you study ALL of it before the real exam.</p><h2>\n  \n  \n  Step 13: Predict New House Prices!\n</h2><p>Now comes the fun part - predicting prices for houses not in our dataset!<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fz1yq77l1l86dfyshd9qo.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fz1yq77l1l86dfyshd9qo.png\" alt=\" \" width=\"800\" height=\"358\"></a></p><p><strong>🎉 You just built a machine learning model that can predict Melbourne house prices!</strong></p><h2>\n  \n  \n  Bonus: Finding the Optimal Model Complexity\n</h2><p>Want to see how different tree sizes affect accuracy? Here's a bonus experiment:<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fto6hf4p21e4khqk62c4l.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fto6hf4p21e4khqk62c4l.png\" alt=\" \" width=\"800\" height=\"401\"></a></p><ul><li>Too few nodes (5) = too simple, misses patterns</li><li>Too many nodes (500) = memorizes training data</li><li>Sweet spot around 100-250 nodes</li></ul><p>This is the <strong>overfitting vs underfitting</strong> tradeoff in action!</p><ul><li> - Super clear with tons of examples</li><li> - Essential for data manipulation</li></ul><h2>\n  \n  \n  Tips for Absolute Beginners\n</h2><p>If you're just starting out like me, here's my advice:<strong>1. You Don't Need a Math PhD</strong>\nI'm not a math genius. I haven't taken calculus in years. You can still learn ML! Start with the practical stuff, the math will make more sense later.<strong>2. Code Along, Don't Just Watch</strong>\nI learn by doing. Watch a tutorial, then code it yourself. Change things. Break stuff. See what happens.\nKaggle gives you:- Free courses with interactive coding</p><ul><li>Real competitions to test your skills</li></ul><p><strong>4. Don't Get Stuck on Theory</strong>\nI spent 2 days trying to understand decision tree math. Then I just built one and it clicked. Sometimes you need to do it to get it.</p><p>\nSharing my learning journey:</p><ul><li>Helps me remember by teaching others</li><li>Connects me with other learners</li><li>Creates a portfolio of my progress</li></ul><p><strong>6. It's Okay to Be Confused</strong>\nI was confused for 90% of this week. That's normal! Push through it. Things will click.</p><h2>\n  \n  \n  The Honest Truth About Learning ML\n</h2><p>Let me be real with you:<strong>It's not as hard as you think.</strong> The basics of ML are surprisingly accessible. You don't need to understand complex math to build your first models.<strong>It's harder than it looks.</strong> There's a lot of trial and error. Your first models will probably be bad. That's okay!<strong>It's incredibly rewarding.</strong> When your model makes its first decent prediction, it feels like magic (even though you know it's not). A week in, I've barely scratched the surface. There's so much more to learn, and that's exciting!</p><p>A week ago, I thought machine learning was this impossibly complex field. Today, I built a model that can predict house prices with reasonable accuracy.</p><p>Is it perfect? No.\nAm I an expert? Definitely not.<p>\nDid I learn a ton and have fun doing it? Absolutely!</p></p><p>If you've been curious about ML but haven't taken the first step—this is your sign. </p><p>You don't need to be ready, you don't need to know everything, you just need to begin.</p><p>The best time to start learning ML was yesterday. The second best time is right now.</p><p><em>Thanks for reading! Now go build something cool! 💻✨</em></p>","contentLength":9746,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"FinceptTerminal's World Order Agents: AI That Understands Global Diplomacy","url":"https://dev.to/tanvi_kamath_915b815626de/finceptterminals-world-order-agents-ai-that-understands-global-diplomacy-4la7","date":1761888545,"author":"tanvi kamath","guid":323368,"unread":true,"content":"<p>Meet the AI agents that analyze world events through the eyes of different civilizations</p><h2>\n  \n  \n  What Are World Order Agents?\n</h2><p>Ever wonder why different countries approach the same problem so differently? Why does China focus on hierarchy while America talks about democracy? Why do European countries care so much about sovereignty?</p><p>FinceptTerminal's World Order Agents are specialized AI that analyze global events through different civilizational lenses. Think of them as your team of diplomatic experts, each specializing in how different civilizations understand the world.</p><p>Analyzes events through Westphalian sovereignty and balance of power - perfect for understanding European conflicts, NATO dynamics, and why borders matter so much to European countries.</p><h4>\n  \n  \n  🕌 <em>The Islamic World Scholar</em></h4><p>Understands events through Islamic political traditions - explains why certain approaches work better in Muslim-majority countries and how faith and governance interact.</p><p>Thinks like a Chinese policymaker - gets why China cares about hierarchy, \"face,\" and historical narratives in modern diplomacy.</p><p>Analyzes through American liberal internationalism - explains why the U.S. acts as \"world policeman\" and promotes democratic values.</p><p>Pure realpolitik specialist - the Henry Kissinger of the group. Cares only about power dynamics, alliances, and preventing any single domination.</p><p>Understands the unique logic of nuclear deterrence - where more weapons don't always mean more safety and stability trumps victory.</p><p>When you ask about a global event, our agents analyze it through their unique cultural and historical lens:</p><p>python\nInput: \"Russia-Ukraine conflict with NATO involvement\"</p><p>European Diplomat: \"Classic great power competition.\nForm counterbalancing coalitions, respect sovereignty,<p>\nmaintain European balance of power.\"</p></p><p>Power Calculator: \"Russia vs. NATO.\nWho's stronger? What are the red lines?<p>\nPure balance of power mathematics.\"</p></p><ul><li> who want deeper context for geopolitical risks</li><li> fascinated by international relations</li><li> expanding into global markets</li><li> who asks \"But why is this really happening?\"</li></ul><p>We're not just another AI company. We built these agents on Henry Kissinger's diplomatic framework, ensuring each analysis respects different civilizational perspectives rather than forcing Western-centric views.</p><h2>\n  \n  \n  Open Source &amp; Community Built\n</h2><p>We believe in transparent development and community collaboration!</p><p>Join our developer community, contribute to the project, or explore the codebase to see how we're implementing sophisticated diplomatic philosophy as AI agents.</p><p><em>Ready to see the world through different eyes?</em> Experience the future of geopolitical analysis with FinceptTerminal's World Order Agents - where centuries of diplomatic wisdom meet cutting-edge AI technology.</p><p>FinceptTerminal: Building the next generation of geopolitical analysis tools that combine sophisticated AI with deep domain expertise.</p>","contentLength":2906,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 20 of My AI & Data Mastery Journey: From Python to Generative AI","url":"https://dev.to/nitinbhatt46/day-20-of-my-ai-data-mastery-journey-from-python-to-generative-ai-551n","date":1761886733,"author":"Nitin-bhatt46","guid":323355,"unread":true,"content":"<div><pre><code> •    Definition: A concise way to create lists by applying an expression to each item in an iterable, optionally filtering elements.\n •    Syntax:\n</code></pre></div><p>[expression for item in iterable if condition][expression for item in iterable if condition]\n     •    Creates a new list by transforming items in an existing iterable based on the expression.<p>\n     •    Advantages: More readable and efficient than using traditional for-loops.</p>\n     •    Basic Example: Square numbers in a list\nnumbers = [1, 2, 3, 4]<p>\nsquares = [x**2 for x in numbers]</p>\nprint(squares)  # Output: [1, 4, 9, 16]</p><p>• With Condition: Only include even numbers\n     1. Start<p>\n     2. Given a list named numbers.</p>\n     3. Create an empty list called evens.<p>\n     4. For each element in numbers:</p>\n          •   If the element is divisible by 2 (i.e., element % 2 == 0):<p>\n          •   Add the element to evens.</p>\n     5. Print the list evens.</p><p>• With if-else: Label numbers as even or odd\n     1. Start<p>\n     2. Given a list named numbers.</p>\n     3. Create an empty list called labels.<p>\n     4. For each element in numbers:</p>\n          a. If the element is divisible by 2 (element % 2 == 0):<p>\n               i. Add the string \"Even\" to labels</p>\n          b. Else:<p>\n               i. Add the string \"Odd\" to labels</p>\n     5. Print the list labels</p><div><pre><code> •    Definition: Similar to list comprehension but used to create dictionaries.\n •    Syntax:\n</code></pre></div><p>{key_expression:value_expression for item in iterable if condition}</p><div><pre><code> •    Creates a new dictionary by generating keys and values from an iterable.\n •    Basic Example: Square numbers as values with numbers as keys\n</code></pre></div><p>python\nsquares_dict = {x: x**2 for x in range(5)}<p>\nprint(squares_dict)  # Output: {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}</p></p><div><pre><code> •    With Condition: Include only even numbers as keys\n •    Start\n •    Create an empty dictionary called even_squares\n •    For each number x in the range 0 to 9:\n •    If x is divisible by 2 (i.e., x % 2 == 0):\n •    Add an entry to even_squares with key = x and value = x squared (x**2)\n •    Print the dictionary even_squares\n •    End\n</code></pre></div><p>\n     •    Both comprehensions are syntactic sugar for loops and conditionals, making code more compact and readable.<p>\n     •    Use comprehensions for simple transformations and filtering in one line.</p>\n     •    For complex logic, traditional loops with explicit statements might be preferred for clarity.<p>\n     •    Comprehensions maintain the original data unchanged and produce new collections.</p></p>","contentLength":2483,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-26h9","date":1761883650,"author":"Vibe YouTube","guid":323354,"unread":true,"content":"<h2>\n  \n  \n  Build a Python AI Agent in 10 Minutes\n</h2><p>Tech With Tim shows you how to whip up a fully functional AI agent in Python in under ten minutes—covering setup, grabbing your OpenAI API key, imports, defining tools, spinning up the LLM agent, driver code, and testing. He’s even dropped handy timestamps so you can jump straight to the bits you need most.</p><p>Along the way you’ll find links to a free Notion trial, a forever-free (plus one month of Pro) PyCharm download, and Tim’s DevLaunch mentorship program if you’re ready to level up with real-world projects. All the code lives in his GitHub repo, and you can catch the full walkthrough on YouTube.</p>","contentLength":660,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-28j0","date":1761883641,"author":"Vibe YouTube","guid":323353,"unread":true,"content":"<p>In this TechWithTim video you’ll discover three modern Python tricks you’ve probably been sleeping on: the powerful  statement for cleaner pattern matching, the sleek and type-friendly  decorator, and how to enforce positional-only or keyword-only arguments for clearer APIs.  </p><p>Along the way Tim also shares a sweet Brilliant.org code for 20% off Premium and a peek at his DevLaunch mentorship program to help you build real-world projects and land that dev job.</p>","contentLength":465,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How Data Science Shapes Political Campaigns: Inside Modern Party Strategy","url":"https://dev.to/nomidlseo/how-data-science-shapes-political-campaigns-inside-modern-party-strategy-1l39","date":1761878952,"author":"Nomidl Official","guid":322507,"unread":true,"content":"<p>Politics isn’t just speeches, rallies, and debates anymore. Today, political campaigns operate like tech companies — hiring data scientists, analysts, machine learning engineers, and behavioral experts.</p><p>If elections used to be about “gut feeling” and charisma, modern politics relies on:</p><p>Data-driven voter segmentation</p><p>Machine learning for prediction</p><p>Sentiment analysis on social media</p><p>Micro-targeted ads and narrative strategies</p><p>Real-time A/B testing during campaigns</p><p>It’s no exaggeration to say that data science has become one of the most powerful tools in modern democracy — shaping opinions, targeting undecided voters, optimizing campaign spending, and even predicting social behavior.</p><p>Let's peel back the curtain.</p><p>✅ The Evolution of Political Strategy\n⚙️ From “instinct-based” to “data-driven”</p><p>Traditionally, election strategies lived in the heads of party leaders and analysts:</p><p>“This city votes conservative.”</p><p>“Farmers will support subsidy promises.”</p><p>These assumptions often worked — but they weren’t always accurate.</p><p>Suddenly, parties could analyze millions of data points to validate assumptions, discover new patterns, and influence behavior with precision.</p><p>🔥 Key shift: Campaigns became data operations</p><p>Today, major parties operate like tech startups:</p><p>Old Approach    Data-Driven Approach\nMass speeches   Micro-segmented messaging<p>\nBroad promises  Personalized issue-based messaging</p>\nTV ads  Targeted digital ads<p>\nVolunteer intuition Predictive analytics dashboards</p>\nOpinion polls   Real-time sentiment analytics</p><p>This isn't accidental — it's engineered.</p><p>✅ Where Political Data Comes From</p><p>Political data systems are massive. Campaigns collect structured and unstructured data — often from multiple touchpoints.</p><p>📊 Sources of political data</p><p>Voter registration databases</p><p>Demographic databases (age, location, education, gender, income)</p><p>Social media behavior &amp; engagement</p><p>Door-to-door canvassing responses</p><p>Polling booth performance history</p><p>Donations and campaign contributions</p><p>Consumer behavior data (when allowed legally)</p><p>The objective: understand who voters are, what they care about, and how persuadable they are.</p><p>And yes — ethics and privacy debates around this are huge (we’ll discuss that later).</p><p>✅ Key Data Science Techniques Used in Campaigns</p><p>Political teams leverage core data science pillars to guide decisions.</p><p>Cluster analysis helps divide voters into groups:</p><p>Community-based segmentation</p><p>Floating/undecided voters</p><p>Machine learning clustering (K-Means, DBSCAN, Gaussian Mixture Models) helps discover patterns that aren't obvious to human analysts.</p><p>Example:\nA party might realize suburban working mothers respond more to education and healthcare messaging than economic policy messaging.</p><p>Predict who will vote, how they will vote, and who might switch.</p><p>Logistic regression (predict support likelihood)</p><p>Random forest (classification of voter types)</p><p>Gradient boosting (voter persuasion probability)</p><p>Time-series forecasting (poll trends)</p><p>✅ Supporters\n✅ Persuadables</p><p>Campaigns then allocate budgets &amp; messaging accordingly.</p><p>📌 3. Social Media Sentiment Analysis</p><p>Political teams monitor platforms for:</p><p>Emotional tone in comments</p><p>Negative/positive reactions to policies</p><p>Meme traction (yes, memes are political tools now)</p><p>NLP (Natural Language Processing)</p><p>Transformer-based sentiment models</p><p>Topic modeling (LDA, BERTopic)</p><p>If public sentiment shifts, campaigns pivot messaging instantly.</p><p>📌 4. Micro-Targeted Messaging</p><p>Instead of one message → millions of voters, now it's:</p><p>One voter group → One tailored message</p><p>Example:\nEnvironmentalists get climate policy ads<p>\nSmall business owners get tax incentive ads</p>\nStudents get job &amp; education ads</p><p>This is often supported by A/B testing frameworks.</p><p>Data isn't only about persuasion — it's about turnout.</p><p>Where to invest last-mile outreach</p><p>Turnout optimization is often more effective than persuasion in close elections.</p><p>✅ Real Examples of Data Science in Politics (Simplified)</p><p>No specific party or campaign named — staying neutral.</p><p>But globally, we’ve seen:</p><p>Machine learning models predicting swing districts</p><p>Digital outreach platforms for youth engagement</p><p>Targeted SMS campaigns for specific demographic groups</p><p>Tailored WhatsApp &amp; Telegram communication networks</p><p>Behavioral nudges (“Your neighbors are voting — are you?”)</p><p>Some countries even use dashboards that show real-time voter engagement metrics.</p><p>✅ Behind the Scenes: Data Roles in Political Campaigns</p><p>Political data teams often include:</p><p>Role    Contribution\nData Scientists Build models &amp; insights<p>\nData Engineers  Manage pipelines &amp; databases</p>\nAnalysts    Interpret polling &amp; demographics<p>\nDigital Strategists Convert data into messaging</p>\nBehavioral Psychologists    Influence persuasion strategy<p>\nContent &amp; Social Teams  Execute targeted messaging</p></p><p>A modern political war room looks like a tech control center.</p><p>✅ Ethical Challenges (Important!)</p><p>Data-driven politics raises serious ethical questions:</p><p>Privacy &amp; personal data use</p><p>Data harvesting without consent</p><p>Psychological manipulation</p><p>Voter suppression tactics</p><p>Just because tech exists doesn’t mean it should always be used.</p><p>Democracies must balance innovation with ethical responsibility.</p><p>✅ The Future of Data in Politics</p><p>Political tech is evolving fast. Expect:</p><p>AI-generated campaign messaging</p><p>Real-time adaptive political ads</p><p>AI-powered debate prep systems</p><p>Blockchain-based voter identity systems</p><p>Predictive crisis management models</p><p>Sentiment-driven policy testing</p><p>And yes — likely more regulation on political data usage.</p><p>✅ Why Developers &amp; Data Enthusiasts Should Care</p><p>Even if you never work in politics, this field teaches:</p><p>Real-world large-scale ML applications</p><p>Ethical AI considerations</p><p>High-pressure, real-impact computation environments</p><p>It's a fascinating intersection of technology, psychology, sociology, and governance.</p><p>✅ Quick Summary — Key Takeaways\nConcept Description<p>\nData is the new campaign engine Political decisions now data-driven</p>\nSegmentation    Target groups, not crowds<p>\nPrediction  AI forecasts voter behavior</p>\nSentiment analysis  Reads public mood online<p>\nTargeting   Personalized political messaging</p>\nEthics matter   Tech can help or harm democracy</p><p>Political campaigns today are data battlegrounds.</p><p>Parties that understand data science hold a competitive advantage — not because they manipulate democracy, but because they listen better, test effectively, and respond faster.</p><p>Whether you're excited or uneasy about this transformation, one thing is clear:</p><p>Data science isn't just shaping technology — it’s shaping societies.</p><p>As developers, engineers, and AI practitioners, understanding these mechanisms helps us use our skills responsibly and consciously.</p><p>Sooner or later, every technologist realizes:</p><p>Tech doesn't just build apps. It builds futures.</p><p>Stay curious, stay ethical, and keep coding with purpose. 🚀</p>","contentLength":6791,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-20n4","date":1761876435,"author":"Vibe YouTube","guid":322488,"unread":true,"content":"<p><strong>3 Unique Python Features You NEED To Know</strong><p>\nTech With Tim walks you through three game-changing Python tools you probably aren’t using: the brand-new </p> for pattern matching, super-slick  to cut boilerplate, and how to enforce <strong>positional-only &amp; keyword-only arguments</strong> so your function APIs stay crystal clear. Each feature comes with real-world examples to help you write cleaner, more modern Python.</p><p>He also plugs  (grab 20% off premium) for extra hands-on practice and his DevLaunch mentorship program—where you build real projects, stay accountable, and actually land that dev job.</p>","contentLength":583,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building Intelligent AI Agents with Modular Reinforcement Learning","url":"https://dev.to/exploredataaiml/building-intelligent-ai-agents-with-modular-reinforcement-learning-323c","date":1761873914,"author":"Aniket Hingane","guid":322434,"unread":true,"content":"<p>I built a modular AI agent system that learns through reinforcement learning, featuring four key components: a Planner (decides actions), Executor (performs actions), Verifier (checks results), and Generator (creates outputs). The system maintains explicit memory across multi-turn interactions and trains only the planning component to keep learning focused and stable. From my experiments, this architecture is 3x easier to debug than monolithic agents and shows significant accuracy improvements through reward-based training.</p><p>Three months ago, my AI agent crashed for the hundredth time, and I couldn't figure out why.</p><p>The problem wasn't the algorithm or the model—it was the architecture. I had built a monolithic agent that tried to do everything in one giant neural network. Planning, execution, verification, all tangled together in an unmaintainable mess.</p><p>That's when I decided to rebuild from scratch using modular design principles and reinforce learning. The result? An agent system that's not only more reliable but actually learns and improves over time.</p><p>In this article, I'll share exactly how I built this system. You'll learn how to architect a modular AI agent, implement reinforcement learning for continuous improvement, integrate external tools, and manage multi-turn conversations with explicit memory.</p><p>If you've ever struggled with debugging AI agents or wondered how to make them learn from experience, this guide is for you.</p><h2>\n  \n  \n  What's This Article About?\n</h2><p>I'm going to walk you through building an intelligent agent with four separate modules, each with a single responsibility. The Planner decides what to do next, the Executor performs the actions, the Verifier checks if we're making progress, and the Generator creates the final response.</p><p>Here's what you'll learn:</p><ul><li>How to design a modular AI agent architecture that's actually maintainable</li><li>Implementing policy gradient reinforcement learning to improve agent decisions</li><li>Building a memory system that prevents context confusion</li><li>Integrating external tools like search, calculators, and APIs</li><li>Training agents with sparse reward signals</li></ul><p>The system I'll show you handles complex, multi-step tasks that require tool use, reasoning, and self-correction. Think research questions, data analysis, or coding assistance—tasks that need more than a single LLM call.</p><p>From my experience building three different agent systems over the past year, I've learned that architecture matters more than model size.</p><p>Here's what I discovered:</p><ul><li><strong>Modular agents are 3x easier to debug</strong> - When something fails, you know exactly which component to inspect</li><li><strong>RL training improves accuracy by 15-20%</strong> on complex tasks compared to un-trained agents</li><li><strong>Separation of concerns makes agents more reliable</strong> - Each module can be tested and improved independently</li><li> as task complexity grows, unlike monolithic architectures that become unwieldy</li></ul><p>Real-world applications where I've used this pattern:</p><ul><li>Research assistants that gather and synthesize information from multiple sources</li><li>Code debugging agents that identify issues and propose fixes</li><li>Data analysis tools that explore datasets and generate insights</li><li>Customer support bots that resolve multi-step issues</li></ul><p>If you're building AI systems that need to be production-ready, not just demos, this architecture will save you months of debugging time.</p><p>The breakthrough for me was realizing that agent tasks have distinct phases, and each phase needs different capabilities.</p><p>When you're , you need strategic thinking—understanding the goal and choosing the right approach. When you're , you need reliability—correctly calling APIs and handling errors. When you're , you need judgment—assessing whether results are useful.</p><p>Trying to make one neural network do all three well is like asking a single person to be a strategist, mechanic, and quality inspector simultaneously. It's possible, but inefficient.</p><p>Here's the modular design I settled on after many iterations:</p><div><pre><code>Query → [Planner] → [Executor] → [Verifier] → Update Memory\n         ↑                                          ↓\n         ←──────────────────────────────────────────\n                    (Loop until complete)\n                            ↓\n                     [Generator] → Final Answer\n</code></pre></div><p> sits in the center, tracking everything that happens. Each component reads from memory to understand context and writes back to update state.</p><h3>\n  \n  \n  The Four Modules Explained\n</h3><p> (The only component we train)</p><p>The Planner's job is to decide what to do next given the current state. It receives the original query plus the history of actions taken so far and outputs which tool to use and what inputs to provide.</p><p>I made a crucial decision here: the Planner is the ONLY component that gets trained with RL. Everything else is deterministic or uses frozen models.</p><p>Why? From my experience, training multiple components simultaneously leads to unstable learning. The Planner's job is well-defined (choose good actions), so we can focus optimization there.</p><p> (Deterministic, no learning)</p><p>The Executor takes the Planner's decision and actually does it. If the Planner says \"search for weather in Boston,\" the Executor calls the search API with those exact parameters.</p><p>I kept this purely deterministic. No neural networks, no randomness. Just reliable code that either succeeds or fails with clear error messages.</p><p>This makes debugging infinitely easier. If something goes wrong during execution, it's a code/API issue, not a learning problem.</p><p> (Hybrid approach)</p><p>The Verifier checks whether each action actually helped us progress toward answering the query. It assigns a reward signal (0-1 score) that the Planner uses for learning.</p><p>In my implementation, I use a hybrid approach:</p><ul><li>Quick heuristics for obvious cases (empty results = negative reward)</li><li>LLM-based judgment for nuanced evaluation (does this information help answer the question?)</li></ul><p>This balance, from my experiments, gives good accuracy without being too slow or expensive.</p><p> (Template-based or LLM)</p><p>Once the Verifier signals we have enough information, the Generator creates the final answer by synthesizing everything in memory.</p><p>I use a simple approach: format the memory into a context string and prompt an LLM to generate a coherent response. You could also use templates for structured outputs.</p><p>The memory structure I use tracks five things for each step:</p><div><pre><code></code></pre></div><p>This explicit memory design does three critical things:</p><ol><li><strong>Prevents context confusion</strong> - The agent always knows what it's done</li><li> - You can replay exactly what happened</li><li> - We have a complete trajectory for learning</li></ol><p>I also implement context windowing—only the most recent 5 turns are included in prompts. This prevents token overflow while maintaining relevant context.</p><h3>\n  \n  \n  Reinforcement Learning Strategy\n</h3><p>Here's where things get interesting. I use a technique inspired by PPO (Proximal Policy Optimization) but adapted for the sequential nature of agent tasks.</p><p>The key insight: <strong>treat long-horizon tasks as sequences of single-turn decisions</strong>.</p><p>Instead of waiting for the final answer to assign credit, I use the Verifier to provide immediate feedback at each step. Then, I \"broadcast\" the final outcome reward (did we answer correctly?) back to every decision in the trajectory.</p><p>This approach, from my experiments, solves the credit assignment problem elegantly. Each action gets credit both for its immediate value (Verifier score) and the final outcome.</p><ol><li>Run the agent on a query, collecting a complete trajectory</li><li>Compute advantage estimates for each step (reward-to-go)</li><li>Update the Planner's policy using PPO with KL divergence penalty</li><li>Keep a reference policy frozen to prevent catastrophic forgetting</li></ol><p>I spent weeks tuning the hyperparameters. The clipratio (0.2) and KL coefficient (0.01) I settled on give stable learning without large policy shifts.</p><p>Now I'll show you the actual implementation. I'll break this into digestible pieces and explain my reasoning for each design choice.</p><h3>\n  \n  \n  Part 1: Core Data Structures\n</h3><p>First, we need clean data structures. I learned this the hard way—messy data leads to messy debugging.</p><div><pre><code></code></pre></div><p>: The  decorator automatically generates , , and comparison methods. This saved me hours of boilerplate code.</p><p>The  method is crucial. In my early versions, I passed the entire history to the LLM, quickly hitting token limits. This windowing approach keeps memory bounded while maintaining relevant context.</p><h3>\n  \n  \n  Part 2: The Planner (Where Learning Happens)\n</h3><div><pre><code></code></pre></div><p>: I initially tried making the LLM output JSON. That failed spectacularly—models are inconsistent with JSON formatting. This structured prompt approach gives 90%+ successful parses.</p><p>The reference model is critical. Without it, the policy can drift too far from initialization and lose language coherence. I learned this after my agent started generating gibberish during training.</p><h3>\n  \n  \n  Part 3: The Executor (Reliability Matters)\n</h3><div><pre><code></code></pre></div><p><strong>Critical design decisions</strong>: Every tool call is wrapped in try/except. Every external call has a timeout. Results are truncated to prevent memory issues.</p><p>I learned these lessons from production failures. The agent would hang on slow APIs, crash on malformed responses, or overflow memory with large web pages. This defensive code prevents those issues.</p><h3>\n  \n  \n  Part 4: The Verifier (Hybrid Intelligence)\n</h3><div><pre><code></code></pre></div><p>: Pure rules are too rigid. Pure LLM is too slow and expensive. This combination, from my testing, hits the sweet spot—fast heuristics catch obvious cases, LLM handles nuanced evaluation.</p><h3>\n  \n  \n  Part 5: Training with Reinforcement Learning\n</h3><div><pre><code></code></pre></div><p><strong>Why this training approach works</strong>: I use reward-to-go instead of just immediate rewards because it connects each action to the final outcome. Normalization prevents gradient explosions I experienced in early training runs.</p><p>Here's everything you need to build this yourself:</p><ul><li>PyTorch 2.0+ (for RL training)</li><li>Transformers (HuggingFace library)</li></ul><p><strong>Optional but Recommended:</strong></p><ul><li>SerpAPI account (for search)</li><li>OpenAI API (for better verification)</li><li>Docker (for sandboxed code execution)</li></ul><div><pre><code>pip torch transformers requests\n</code></pre></div><p>Here's how to get this running on your machine:</p><h3>\n  \n  \n  Step 1: Project Structure\n</h3><div><pre><code>intelligent-agent/\n├── agent_core.py      # Memory and state management\n├── planner.py         # Planning module\n├── executor.py        # Execution module\n├── verifier.py        # Verification module\n├── trainer.py         # RL training\n├── main.py            # Entry point\n└── config.json        # Configuration\n</code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code>python main.py </code></pre></div><div><pre><code>Turn 1: Planning → Using calculator\nTurn 2: Executing → Result: 37.5\nTurn 3: Verifying → Score: 0.9\nTurn 4: Generating final answer\n\nAnswer: 15% of 250 is 37.5. This means that if you take 15 \npercent of 250, you get 37.5. This is calculated by multiplying \n250 by 0.15 (which is 15/100).\n</code></pre></div><div><pre><code></code></pre></div><p>From my experiments, you'll see:</p><ul><li>Loss decreasing over epochs (good!)</li><li>Better tool selection after 5-10 epochs</li><li>More coherent reasoning in action justifications</li><li>Fewer unnecessary tool calls</li></ul><p>After building this system over three months, here are my biggest takeaways:</p><h3>\n  \n  \n  What Worked Exceptionally Well\n</h3><p> - I can't stress this enough. Being able to swap out the Executor implementation without touching the Planner saved me countless hours. When the SerpAPI rate limit hit, I switched to a different search provider in 10 minutes.</p><p><strong>Training only the Planner</strong> - This decision kept training stable and fast. I tried training everything end-to-end early on—it was a disaster. Focusing optimization on one component made debugging tractable.</p><p> - The ability to replay exactly what happened made debugging 10x easier. No more \"why did the agent do that?\" questions I couldn't answer.</p><p> - Combining simple heuristics with LLM judgment gave me the best of both worlds. Fast enough for real-time use, accurate enough for reliable rewards.</p><p><strong>Start with smaller models</strong> - I began with GPT-2 Large and wasted time on slow training. GPT-2 Medium was just as effective for learning the planning task and trained 3x faster.</p><p><strong>Add comprehensive logging earlier</strong> - I added detailed logging after the third mysterious failure. Should have done it from day one. Now I log every decision, every tool call, every reward signal.</p><p><strong>Build evaluation metrics before training</strong> - I started training without clear success metrics. Bad idea. I added a test suite of 50 queries with known correct answers, which made measuring progress much easier.</p><p> - API calls get expensive fast during training. Caching executor results for identical inputs saved me hundreds of dollars.</p><h3>\n  \n  \n  Lessons for Production Deployment\n</h3><p>From deploying this in production:</p><ol><li> - If the search API is down, have a backup</li><li> - Don't let one slow tool call block everything</li><li> - Tool success rates, average turns per query, verification scores</li><li> - Start with 5% of traffic, not 100%</li></ol><h3>\n  \n  \n  Future Improvements I'm Considering\n</h3><p> - Adding vision and audio tools would open up new use cases. The architecture supports this—just add new tools to the Executor.</p><p> - For very complex queries, a two-level planner (high-level strategy + low-level tactics) might work better. This is my next experiment.</p><p> - Current RL training needs 100+ episodes to see improvement. Techniques like hindsight experience replay might help.</p><p> - Running multiple tool calls in parallel would speed things up significantly. The current sequential approach is simpler but slower.</p><p>Building intelligent agents is less about having cutting-edge algorithms and more about solid engineering. The modular architecture I showed you isn't revolutionary—it's software engineering 101 applied to AI.</p><p>But that's exactly why it works.</p><p>From my experience, the AI systems that make it to production aren't the ones with the fanciest papers behind them. They're the ones that are maintainable, debuggable, and reliable.</p><p>If you take one thing from this article, let it be this: . Don't build monolithic agents. Break them into modules with clear responsibilities. Your future self (and your team) will thank you.</p><p>I encourage you to start small:</p><ol><li>Build the basic four-module structure</li><li>Add one simple tool (like a calculator)</li></ol><p>You don't need to implement the full RL training loop from day one. A non-learning agent with good architecture is already valuable.</p><p>As you build, you'll develop intuition for what works. The agent will tell you where it needs improvement—listen to it.</p><ul><li><strong>Modular architecture beats monolithic</strong> - Separate planning, execution, and verification into distinct components</li><li> - Only optimize the Planner; keep other components deterministic</li><li><strong>Explicit memory prevents confusion</strong> - Track states, actions, and observations explicitly</li><li><strong>Hybrid verification works best</strong> - Combine fast heuristics with LLM-based judgment</li><li> - Policy gradient methods with KL regularization provide stable learning</li><li><strong>Engineering matters more than algorithms</strong> - Good architecture trumps fancy techniques</li></ul><p>Have you built AI agents? What challenges did you face? I'd love to hear about your experiences in the comments.</p><p>If you found this useful, the complete implementation is available on GitHub (link in my bio). It includes additional features like tool result caching, distributed execution, and a web UI.</p><p>Happy building, and may your agents always converge! 🤖✨</p>","contentLength":15185,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Title: The Equal-Weight S&P 500: A Look at Its Longest Winning Streak Since 2021","url":"https://dev.to/yagyaraj_sharma_6cd410179/title-the-equal-weight-sp-500-a-look-at-its-longest-winning-streak-since-2021-4pd1","date":1761870337,"author":"Insights YRS","guid":322433,"unread":true,"content":"<h2>\n  \n  \n  Title: The Equal-Weight S&amp;P 500: A Look at Its Longest Winning Streak Since 2021\n</h2><p>The stock market has been on a rollercoaster ride in recent months, with the S&amp;P 500 leading the charge. One of the most closely watched indices in the world, the S&amp;P 500 has been a bellwether for the broader market. In this post, we will take a closer look at the equal-weight version of the S&amp;P 500 and its recent performance.</p><p>In September, the equal-weight S&amp;P 500 booked its longest streak of monthly gains since 2021. This is a significant achievement, as the equal-weight S&amp;P 500 is designed to provide a more accurate representation of the broader market. By giving equal weight to each stock in the index, the equal-weight S&amp;P 500 is less susceptible to the influence of large-cap stocks.</p><p>This streak of gains is particularly noteworthy given the current market conditions. With the Federal Reserve expected to cut interest rates in September, many investors have been concerned about the impact on the stock market. However, the equal-weight S&amp;P 500 has defied these expectations and continued to rise.</p><p>Factors Contributing to the Winning Streak:</p><p>There are several factors that have contributed to the equal-weight S&amp;P 500's winning streak. One of the most significant is the continued strength of the US economy. Despite the ongoing pandemic, the US has shown resilience and has been able to bounce back stronger than many other countries. This has led to increased demand for US stocks, particularly those in the technology and healthcare sectors.</p><p>Another factor is the continued low-interest-rate environment. With interest rates at historically low levels, investors have been able to borrow money more cheaply, which has led to increased investment in the stock market. This has helped to fuel the equal-weight S&amp;P 500's recent gains.</p><p>The equal-weight S&amp;P 500's recent winning streak is a testament to the resilience of the US economy and the continued strength of the stock market. Despite concerns about the impact of interest rate cuts, the equal-weight S&amp;P 500 has defied expectations and continued to rise. As we move forward, it will be interesting to see how the market continues to perform, particularly in the face of ongoing economic uncertainty.</p>","contentLength":2254,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Title: Perplexity's Scraping Scandal: Cloudflare's Discovery and the Ethical Dilemma","url":"https://dev.to/yagyaraj_sharma_6cd410179/title-perplexitys-scraping-scandal-cloudflares-discovery-and-the-ethical-dilemma-23d0","date":1761870029,"author":"Insights YRS","guid":322432,"unread":true,"content":"<h2>\n  \n  \n  Title: Perplexity's Scraping Scandal: Cloudflare's Discovery and the Ethical Dilemma\n</h2><p>In the world of artificial intelligence (AI), there are always new developments and advancements that can change the game. However, when it comes to web scraping, there are certain ethical considerations that must be taken into account. Recently, Cloudflare, an internet giant, made a shocking discovery that has raised concerns about the behavior of one of the most popular AI scraping tools on the market. In this blog post, we will explore the details of the case and the ethical dilemma it presents.</p><p>According to Cloudflare, it detected Perplexity, an AI scraping tool, crawling and scraping websites, even after customers had added technical blocks telling Perplexity not to scrape their pages. This behavior is not only unethical but also goes against the terms of service of many websites.</p><p>The Impact of Scraping on Websites</p><p>Web scraping can have a significant impact on websites, particularly in terms of their performance and security. When a tool like Perplexity is used to scrape a website, it can put a strain on the server and slow down the website's response time. Additionally, scraping can also expose sensitive information, such as login credentials and personal data, which can be used for malicious purposes.</p><p>The use of AI scraping tools like Perplexity raises an ethical dilemma. On the one hand, these tools can be used for legitimate purposes, such as data analysis and market research. On the other hand, they can also be used for malicious purposes, such as stealing sensitive information and disrupting websites.</p><p>The Responsibility of AI Developers</p><p>As developers of AI tools, it is important to consider the ethical implications of their products. They have a responsibility to ensure that their tools are used in a responsible and ethical manner. This includes implementing technical blocks to prevent scraping and providing clear guidelines for users on how to use the tool.</p><p>The discovery of Perplexity's scraping behavior by Cloudflare highlights the importance of ethical considerations in the development and use of AI tools. It also raises questions about the responsibility of AI developers to ensure that their products are used in a responsible and ethical manner. As AI continues to evolve, it is important that we remain vigilant and take steps to protect ourselves from the potential negative consequences of its use.</p>","contentLength":2441,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Title: Google's Pixel Care Plus: Enhanced Protection with Free Screen and Battery Repair","url":"https://dev.to/yagyaraj_sharma_6cd410179/title-googles-pixel-care-plus-enhanced-protection-with-free-screen-and-battery-repair-4g2o","date":1761869740,"author":"Insights YRS","guid":322427,"unread":true,"content":"<h2>\n  \n  \n  Title: Google's Pixel Care Plus: Enhanced Protection with Free Screen and Battery Repair\n</h2><p>Google's Pixel Care Plus program is designed to provide users with enhanced protection and peace of mind for their devices. The program offers a range of benefits, including free screen and battery repair, to help users keep their devices in top condition. In this blog post, we will explore the features of Pixel Care Plus and how it compares to Google's Preferred Care extended warranty plan.</p><p>Pixel Care Plus vs Preferred Care</p><p>Google is phasing out its Preferred Care extended warranty plan for the Pixel Care Plus program. While the pricing between the two is similar, there are some key differences to consider. With Pixel Care Plus, users will still pay $8 per-month, or $159 for a two-year plan on a Pixel 9. For a Pixel 10 Pro Fold, that jumps up to $339 for two years, or $18 per-month.</p><p>One of the main benefits of Pixel Care Plus is the free screen and battery repair that it offers. This means that if your device's screen or battery fails, you can get it repaired for free, without having to pay for the cost of the repair out of pocket. This can be a significant advantage for users who are concerned about the potential cost of repairs and want to ensure that their devices are always in good working order.</p><p>Other Features of Pixel Care Plus</p><p>In addition to the free screen and battery repair, Pixel Care Plus offers a range of other benefits to users. These include:</p><ul><li>Priority support: Pixel Care Plus users receive priority support from Google's customer service team, which means that they can get help with any issues or questions they have more quickly.</li><li>Discounts on accessories: Pixel Care Plus users also receive discounts on accessories for their devices, such as cases and screen protectors.</li><li>Software updates: Pixel Care Plus users receive software updates for their devices before they are available to the general public, which means that they can always have the latest features and security updates.</li></ul><p>Google's Pixel Care Plus program is an excellent choice for users who want to protect their devices and ensure that they are always in good working order. With its range of benefits, including free screen and battery repair, priority support, discounts on accessories, and software updates, Pixel Care Plus provides users with the peace of mind they need to use their devices with confidence. If you are considering purchasing a Pixel device, be sure to consider the benefits of Pixel Care Plus and how it can help you get the most out of your device.</p>","contentLength":2564,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-5043","date":1761869377,"author":"Vibe YouTube","guid":322417,"unread":true,"content":"<p><strong>Build a Python AI Agent in 10 Minutes</strong> walks you through a lightning-fast setup using Python, OpenAI’s API, Notion and PyCharm. You’ll cover everything from installing dependencies and grabbing your API key to importing tools, wiring up the LLM-powered agent and running simple tests—all in under 10 minutes.</p><p>Along the way, Tech With Tim highlights his DevLaunch mentorship program for hands-on project support and job prep, and shares video links plus a GitHub repo so you can jump right into the code with handy timestamps for each step.</p>","contentLength":543,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-2nkk","date":1761869363,"author":"Vibe YouTube","guid":322416,"unread":true,"content":"<p>Tech With Tim’s latest video uncovers three under-the-radar Python features you’ll actually want to use: the sleek match statement for pattern matching, the hassle-free dataclasses for automatic boilerplate reduction, and the power combo of positional &amp; keyword-only arguments to lock down your function signatures.</p><p>Along the way you’ll snag a 20% off link for Brilliant’s coding courses and a peek at his DevLaunch mentorship program—because who doesn’t love free learning tools and a little extra guidance?</p>","contentLength":519,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"8 Essential Python Configuration Management Techniques for Scalable Applications","url":"https://dev.to/aaravjoshi/8-essential-python-configuration-management-techniques-for-scalable-applications-3p31","date":1761866564,"author":"Aarav Joshi","guid":322415,"unread":true,"content":"<blockquote><p>As a best-selling author, I invite you to explore my books on <a href=\"https://www.amazon.com/stores/Aarav-Joshi/author/B0DQYNVXZ7?ref=ap_rdr&amp;isDramIntegrated=true&amp;shoppingPortalEnabled=true&amp;ccs_id=738636bd-0ca1-4d7b-8efa-481bfc222571\" rel=\"noopener noreferrer\">Amazon</a>. Don't forget to follow me on <a href=\"https://medium.com/@aarav-joshi\" rel=\"noopener noreferrer\">Medium</a> and show your support. Thank you! Your support means the world! </p></blockquote><p>In my work with Python applications, I've found that managing configurations effectively is one of the most critical aspects of building robust, scalable software. It’s the bridge that allows code to adapt gracefully across different stages—from a developer's laptop to a production server. Without solid configuration practices, even the best-written code can falter when faced with real-world variables like database connections, API keys, or environment-specific settings. Over the years, I've experimented with various approaches, and I want to share some of the most effective techniques I've used for handling configurations in Python.</p><p>Let's start with environment variables. They are a straightforward way to externalize configuration from your code, making it portable and secure. I often use the built-in os module to access these variables. For instance, in a web application, I might set the database URL, debug mode, and API keys as environment variables. This way, the same code can run in development, testing, or production without changes. Here's a simple example:</p><div><pre><code></code></pre></div><p>This approach ensures that sensitive information like API keys isn't hardcoded. I remember a project where we accidentally committed a configuration file with passwords; switching to environment variables prevented such mishaps. It's a small change that pays off in security and flexibility.</p><p>Another technique I rely on is using configuration files, especially in YAML format. YAML files are human-readable and support nested structures, which is great for organizing complex settings. In one of my applications, I used a config.yaml file to store database details, server settings, and more. Here's how I might load it:</p><div><pre><code></code></pre></div><p>This method keeps everything in one place, making it easy to review and modify. I've found that teams appreciate the clarity, especially when onboarding new members who need to understand the setup quickly.</p><p>For development, I often use python-dotenv to load environment variables from a .env file. This mimics production environments while keeping secrets out of version control. I recall a time when our team struggled with inconsistent local setups; dotenv solved that by standardizing our development environment. Here's a typical usage:</p><div><pre><code></code></pre></div><p>By including a .env.example file in the repository, we ensure everyone starts with the right defaults. It's a simple tool that reduces friction in collaborative projects.</p><p>When I need more structure, I turn to dataclasses for defining configuration schemas. With type hints, dataclasses enforce correct types and provide default values, which helps catch errors early. In a recent API project, I defined an AppConfig class to hold server settings:</p><div><pre><code></code></pre></div><p>This approach makes the configuration self-documenting and easy to extend. I've noticed that it encourages better code practices, as team members can see at a glance what settings are available.</p><p>Handling secrets securely is non-negotiable. I've used external services like HashiCorp Vault to manage passwords and tokens, keeping them out of code repositories. In one high-security application, we integrated Vault to retrieve database credentials dynamically:</p><div><pre><code></code></pre></div><p>This method adds a layer of protection, especially in cloud environments. I've seen it prevent potential breaches, as secrets are never stored in plain text within the application.</p><p>Validation is another area I emphasize. Using Pydantic models, I can enforce data types and constraints on configuration values. For example, in a data processing tool, I validated database settings to ensure ports were within valid ranges:</p><div><pre><code></code></pre></div><p>This catches misconfigurations at startup, saving hours of debugging. I've integrated this into CI/CD pipelines to validate configurations before deployment.</p><p>Dynamic configuration reloading is useful for long-running applications. I've implemented file watchers or signal handlers to update settings without restarting. In a web service that needed to adjust logging levels on the fly, I used signals to reload the config:</p><div><pre><code></code></pre></div><p>This allowed us to tweak settings in production without downtime. It's a technique I recommend for services that require high availability.</p><p>Lastly, environment-specific configuration helps tailor settings for different contexts. I often use conditional logic to switch between development, staging, and production values. In a multi-environment setup, I defined variables like this:</p><div><pre><code></code></pre></div><p>This ensures that each environment behaves appropriately, reducing the risk of using production settings in development. I've found it essential for maintaining consistency across deployments.</p><h2>\n  \n  \n  These techniques form a toolkit that I adapt based on project needs. Whether it's a small script or a large distributed system, thoughtful configuration management leads to more reliable and maintainable code. By combining these methods, I've built applications that are easier to deploy, scale, and troubleshoot. It's a continuous learning process, but these practices have served me well in diverse scenarios.\n</h2><p>📘 , , , and  to the channel!</p><p> is an AI-driven publishing company co-founded by author . By leveraging advanced AI technology, we keep our publishing costs incredibly low—some books are priced as low as —making quality knowledge accessible to everyone.</p><p>Stay tuned for updates and exciting news. When shopping for books, search for  to find more of our titles. Use the provided link to enjoy !</p><p>Be sure to check out our creations:</p>","contentLength":5580,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Context Variable Vault: Advanced Patterns and Framework Integration","url":"https://dev.to/aaron_rose_0787cc8b4775a0/the-context-variable-vault-advanced-patterns-and-framework-integration-5foj","date":1761864081,"author":"Aaron Rose","guid":322390,"unread":true,"content":"<p>The next morning, Timothy arrived at the library with his laptop and a list of questions. He found Margaret already at her desk, reviewing some code.</p><p>\"I've been thinking about context variables,\" Timothy said, pulling up a chair. \"Yesterday we learned the basics, but I want to build something more sophisticated. Like actual middleware for my web server that tracks requests across multiple layers.\"</p><p>Margaret smiled. \"Perfect timing. Today we'll explore the advanced features—the ones that let you build production-grade systems with context variables.\"</p><h2>\n  \n  \n  The Token Pattern: Temporary Context Changes\n</h2><p>\"Remember yesterday when I mentioned that  returns a Token?\" Margaret asked. \"Let me show you why that matters.\"</p><div><pre><code></code></pre></div><div><pre><code>  Regular operation: role=user\n  Before elevation: role=user\n  During elevation: role=admin\n  Still elevated: role=admin\n  After restoration: role=user\n  Regular operation: role=user\n</code></pre></div><p>\"The token remembers the  value,\" Timothy observed. \"So  puts it back exactly how it was.\"</p><p>\"Exactly,\" Margaret said. \"This is crucial for temporarily changing context in a safe way. Even if an exception happens during the elevated operation, the  block ensures the context gets restored.\"</p><div><pre><code>Token Pattern:\n\nInitial state:    role = \"user\"\n                       ↓\ntoken = set(\"admin\")  role = \"admin\"  (token remembers \"user\")\n                       ↓\n  ... do work ...     role = \"admin\"\n                       ↓\nreset(token)          role = \"user\"   (restored from token)\n                       ↓\nContinue:             role = \"user\"\n</code></pre></div><h2>\n  \n  \n  Context Managers for Automatic Restoration\n</h2><p>\"Since we're using try/finally, we can make this cleaner with a context manager,\" Margaret said.</p><div><pre><code></code></pre></div><div><pre><code>Checking permissions: role=user\n  Inside with block: role=admin\n  Still inside: role=admin\nAfter with block: role=user\n</code></pre></div><p>\"Much cleaner,\" Timothy said. \"The context manager handles the token automatically.\"</p><h2>\n  \n  \n  Explicit Context Manipulation: copy_context()\n</h2><p>Margaret opened a new file. \"Sometimes you need more control over contexts. That's where  comes in. This is especially important when working with thread pools.\"</p><div><pre><code></code></pre></div><div><pre><code>Main task: req_123\n\nWithout context copy:\n  Thread pool worker: no context (LookupError)\n\nWith context copy:\n  Thread pool worker sees request_id: req_123\n\nMain task still has: req_123\n</code></pre></div><p>\"Ah!\" Timothy said. \"The thread pool doesn't automatically inherit context like async tasks do.\"</p><p>\"Exactly,\" Margaret explained. \"When you use , Python automatically propagates context to child tasks. But thread pools and process pools are different—they're separate execution contexts that need explicit context copying.\"</p><p>She leaned forward to emphasize the point. \"Here's what's actually happening: when <code>executor.submit(cpu_intensive_work)</code> is called, the  function starts execution on a brand new, independent thread. Unlike asyncio tasks which are children of the current context, this new thread starts with a blank, default context. It has no mechanism to look back and inherit the context of the async task that spawned it.\"</p><p>\"So it's like starting from scratch?\" Timothy asked.</p><p>\"Exactly.  takes a snapshot of the current async task's context and wraps it around the submitted function using , ensuring the worker starts with the correct state instead of an empty context.\"</p><div><pre><code></code></pre></div><div><pre><code>Using await (automatic inheritance):\nWorker sees config: production\n\nUsing create_task (automatic inheritance):\nWorker sees config: production\n\n(Both work because they stay in the async context)\n</code></pre></div><p>\"So  is mainly for crossing execution boundaries,\" Timothy summarized. \"Thread pools, process pools, or custom schedulers.\"</p><p>\"Right. Most of the time, async code just works. But when you need to run synchronous code in an executor, that's when you need .\"</p><h2>\n  \n  \n  The Context.run() Pattern\n</h2><p>\"There's another powerful pattern,\" Margaret said. \"Sometimes you want to run code in a  context.\"</p><div><pre><code></code></pre></div><div><pre><code>Main context before:\n  database: main_db\n  transaction_id: main_txn\n\nRunning in isolated context:\n  Isolated context:\n    database: not set\n    transaction_id: not set\n    Set values in isolated context\n\nMain context after:\n  database: main_db\n  transaction_id: main_txn\n  (unchanged!)\n</code></pre></div><p>\"The isolated context started completely empty,\" Timothy noted. \"And changes inside didn't affect the main context.\"</p><p>\"Right.  creates a fresh, empty context. This is useful for testing, for running untrusted code, or for operations that shouldn't inherit any ambient state.\"</p><h2>\n  \n  \n  Building Request Middleware\n</h2><p>Margaret pulled up a more realistic example. \"Let's build something production-ready: middleware for tracking requests through a web application.\"</p><div><pre><code></code></pre></div><div><pre><code>[a3f8e912] Request started: /profile\n[b7c2d445] Request started: /public\n[e9a1f334] Request started: /profile\n[a3f8e912] DB Query (user=100): SELECT * FROM users WHERE id = ?\n[b7c2d445] DB Query (user=None): SELECT * FROM public_pages\n[e9a1f334] DB Query (user=200): SELECT * FROM users WHERE id = ?\n[a3f8e912] Notification: Profile viewed\n[e9a1f334] Notification: Profile viewed\n[b7c2d445] Request completed: /public (user=None, duration=0.053s)\n[a3f8e912] Request completed: /profile (user=100, duration=0.073s)\n[e9a1f334] Request completed: /profile (user=200, duration=0.073s)\n</code></pre></div><p>\"This is powerful,\" Timothy said. \"Every database query and notification automatically knows which request it belongs to, without passing parameters everywhere.\"</p><p>\"That's the beauty of context variables in web frameworks,\" Margaret said. \"The middleware sets up the context once, and every function in the request handling chain can access it.\"</p><h2>\n  \n  \n  How Real Frameworks Use Context Variables\n</h2><p>Margaret pulled up some documentation on her screen. \"Let's look at how actual frameworks use this pattern.\"</p><div><pre><code></code></pre></div><p>\"FastAPI does something similar?\" Timothy asked.</p><p>\"Yes,\" Margaret said. \"FastAPI uses dependency injection primarily, but it also uses context variables internally. Libraries like  are especially common in async frameworks, logging libraries, and observability tools.\"</p><p>She showed another example:</p><div><pre><code></code></pre></div><div><pre><code>Request trace_id=trace_001\n  → Start span: http.request (trace=trace_001, parent=None)\nRequest trace_id=trace_002\n  → Start span: http.request (trace=trace_002, parent=None)\n  → Start span: cache.get (trace=trace_001, parent=http.request)\n  → Start span: cache.get (trace=trace_002, parent=http.request)\n  ← End span: cache.get\n  → Start span: database.query (trace=trace_001, parent=http.request)\n  ← End span: cache.get\n  → Start span: database.query (trace=trace_002, parent=http.request)\n  ← End span: database.query\n  → Start span: response.serialize (trace=trace_001, parent=http.request)\n  ← End span: database.query\n  → Start span: response.serialize (trace=trace_002, parent=http.request)\n  ← End span: response.serialize\n  ← End span: http.request\nRequest complete\n\n  ← End span: response.serialize\n  ← End span: http.request\nRequest complete\n</code></pre></div><p>\"Each trace keeps its own context even though they're interleaved!\" Timothy said.</p><p>\"Exactly. This is how distributed tracing works in production. Libraries like OpenTelemetry use context variables to track spans across async operations without manual propagation.\"</p><h2>\n  \n  \n  When NOT to Use Context Variables\n</h2><p>Margaret leaned back. \"As powerful as context variables are, they're not always the right choice. Let's talk about alternatives.\"</p><p>She created a comparison:</p><div><pre><code></code></pre></div><p>\"When should I use each?\" Timothy asked.</p><p>Margaret drew a decision tree:</p><div><pre><code>Choosing the Right Approach:\n\n┌─ Is this truly ambient context that flows through many layers?\n│  (request ID, trace ID, user identity across whole request)\n│\n├─ YES → Consider Context Variables\n│  │\n│  ├─ Is it used across async boundaries or threading?\n│  │  ├─ YES → Context Variables are ideal ✓\n│  │  └─ NO → Consider explicit parameters (simpler)\n│  │\n│  └─ Will it make testing harder? (hidden dependencies)\n│     ├─ YES → Reconsider\n│     └─ NO → Context Variables work well\n│\n└─ NO → Use explicit parameters or dependency injection\n   │\n   ├─ Few dependencies → Explicit parameters\n   ├─ Many dependencies → Dependency Injection\n   └─ Configuration/settings → Module-level constants or config objects\n</code></pre></div><p>She elaborated with code:</p><div><pre><code></code></pre></div><p>\"So context variables are for ambient, cross-cutting concerns,\" Timothy summarized. \"Not for core business logic.\"</p><p>\"Right. They're powerful when used appropriately, but they can make code harder to understand and test if overused.\"</p><h2>\n  \n  \n  Performance Considerations\n</h2><p>\"One more thing,\" Margaret said. \"Let's talk about performance.\"</p><div><pre><code></code></pre></div><div><pre><code>Context variable access: 0.0083s\nParameter access: 0.0021s\nRatio: 4.0x\n\nIn practice: The overhead is negligible for typical use cases\n</code></pre></div><p>\"Context variables are slower than parameters,\" Timothy noted.</p><p>\"Yes, but in practice, the overhead is negligible for typical use cases. You're not accessing context variables 100,000 times in a tight loop. You access them a handful of times per request to get logging context or request IDs.\"</p><p>\"The real performance consideration is: don't create new ContextVar objects in hot paths. Create them once at module level, just like you would with global variables.\"</p><div><pre><code></code></pre></div><p>\"Why is that bad?\" Timothy asked.</p><p>Margaret explained, \"When you create a  object, you're essentially creating a permanent vault manager. Even though it looks like a local variable here, internally Python's runtime registers this as a new, unique context variable in its global tracking system.\"</p><p>She continued, \"If you create a new one on every request, the Python runtime's internal tracking system for contexts gets cluttered with thousands of unique context variables that are never reused or cleaned up. This adds unnecessary memory overhead and makes internal context lookups less efficient over time. Each  is meant to be a singleton that lives for the life of your application, not a per-request object.\"</p><p>They were finishing up. Margaret created one final, comprehensive example:</p><div><pre><code></code></pre></div><div><pre><code>[INFO] [a3f8e912] [corr=b7c2d445] [user=42] Starting business operation\n[INFO] [a3f8e912] [corr=b7c2d445] [user=42] Calling downstream service\n[INFO] [a3f8e912] [corr=b7c2d445] [user=42] Downstream responded (corr=b7c2d445)\n[INFO] [a3f8e912] [corr=b7c2d445] [user=42] Business operation complete\n[a3f8e912] Completed in 0.052s\n</code></pre></div><p>Timothy closed his laptop, now understanding the full power of context variables for building production systems.</p><p><strong>Token objects enable safe temporary changes</strong>:  returns a token;  restores the previous value.</p><p><strong>Use context managers for automatic restoration</strong>: Wrap token operations in try/finally or use @contextmanager for clean code.</p><p><strong>copy_context() for crossing execution boundaries</strong>: Needed when passing work to thread pools or process pools where context isn't auto-inherited.</p><p><strong>Thread pool workers start with blank context</strong>: New threads have no mechanism to inherit from the spawning task automatically.</p><p><strong>Context() creates isolated contexts</strong>: Run code in a fresh context without inheriting any ambient state.</p><p><strong>Context.run() executes in specific context</strong>: Run a function in a particular context without affecting the current one.</p><p><strong>Perfect for middleware patterns</strong>: Set up context once at request start, access everywhere in the call chain.</p><p><strong>Real frameworks use this extensively</strong>: FastAPI, OpenTelemetry, logging libraries all leverage context variables.</p><p>: Use context variables for ambient concerns, not core business logic dependencies.</p><p><strong>Explicit parameters are often better</strong>: For dependencies that don't need to flow through many layers.</p><p><strong>Dependency injection for complex deps</strong>: When you have many structured dependencies, DI frameworks work better.</p><p><strong>Module-level ContextVar creation</strong>: Create ContextVar objects once at module level, not repeatedly.</p><p><strong>Creating ContextVar repeatedly is wasteful</strong>: Each ContextVar is a permanent vault manager in Python's internal tracking system.</p><p><strong>Performance overhead is minimal</strong>: Slightly slower than parameters, but negligible in real applications.</p><p><strong>Test isolation is important</strong>: Context variables can make testing harder; provide ways to override them in tests.</p><p><strong>Use for cross-cutting concerns</strong>: Request IDs, trace IDs, user identity, logging context.</p><p>: Just because you can put something in context doesn't mean you should.</p><p><strong>Context managers integrate well</strong>: Use  for setup/teardown patterns.</p><p><strong>Correlation IDs for distributed tracing</strong>: Pass correlation IDs through service boundaries to maintain traces.</p><p><strong>Libraries like structlog leverage this</strong>: Many modern logging libraries use context variables for structured logging.</p><p><strong>Thread pools need explicit context</strong>: Unlike async tasks, thread pool workers don't automatically inherit context.</p><h2>\n  \n  \n  Understanding Context Variable Patterns\n</h2><p>Timothy had learned how to use context variables in production systems.</p><p>He discovered that tokens enable safe temporary modifications with automatic restoration, that copy_context() is essential when crossing execution boundaries like thread pools where context isn't automatically inherited, and that Context.run() allows running code in completely isolated contexts.</p><p>Margaret showed him that real frameworks use context variables for request tracking, distributed tracing, and logging context, that middleware patterns benefit enormously from context variables, and that they enable clean APIs where ambient state flows automatically without explicit parameter passing.</p><p>Most importantly, Timothy learned when NOT to use context variables—that explicit parameters and dependency injection are often better for core business logic, that context variables should be reserved for truly ambient, cross-cutting concerns, and that overuse can make code harder to understand and test.</p><p>The library closed for the evening. Timothy had mastered context variables and was ready to build production-grade async applications with proper request tracking, distributed tracing, and context-aware logging—all without cluttering function signatures with repeated parameters.</p>","contentLength":13873,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Talk to Your Data Like a Human: How I Built an AI Airline Analyst","url":"https://dev.to/rajesh-adk-137/talk-to-your-data-like-a-human-how-i-built-an-ai-airline-analyst-4pl9","date":1761862409,"author":"Rajesh Adhikari","guid":322389,"unread":true,"content":"<p>In the world of air travel, every passenger has a story. Some rave about the legroom. Others complain about cold meals or slow Wi-Fi. But here's the thing, what if you could actually  to those 20,000 stories and get answers that help you run a better airline?</p><p>I'm thrilled to introduce AIRLYTICS, my project for <strong>MindsDB Hacktoberfest 2025</strong>. It's not just another analytics dashboard. It's a conversational intelligence platform that transforms messy, unstructured passenger reviews into strategic business insights — the kind that actually tell you  and .</p><p>Think of it as having a genius data analyst who speaks plain English, never sleeps, and always knows exactly which 100 reviews out of 20,000 matter most for your question.</p><h2>\n  \n  \n  The Problem: Drowning in Feedback, Starving for Insight\n</h2><p>Airlines collect mountains of customer feedback. Reviews pile up across booking sites, social media, and post-flight surveys. But here's where it gets messy.</p><p>Traditional analytics tools are great at counting things. They'll tell you the average Wi-Fi rating is 2.8 out of 5. Cool. But they won't tell you that <strong>Wi-Fi below 3 stars drops overall satisfaction by 68%</strong>, or that upgrading routers matters more than upgrading the catering menu.</p><p>They can't understand questions like <em>\"Show me Business Class travelers who loved the crew but hated baggage handling.\"</em> They definitely can't explain why high ratings don't always mean high loyalty, or what that disconnect means for your bottom line.</p><p>Most BI tools require you to speak  language — SQL queries, pre-defined metrics, rigid schemas. AIRLYTICS flips that around. You speak English. It handles the rest.</p><h2>\n  \n  \n  Meet AIRLYTICS: Your AI Airline Analyst\n</h2><p>AIRLYTICS is what happens when you combine MindsDB's Knowledge Bases with a dual-agent architecture and sprinkle in some serious semantic search magic.</p><p>Here's what makes it different.</p><h3>\n  \n  \n  🧠 Two Modes, One Seamless Experience\n</h3><p>Most analytics platforms force you to choose between simplicity and power. AIRLYTICS gives you both.</p><p> is perfect when you're exploring. Type something like <em>\"excellent legroom and comfortable seats\"</em> or <em>\"lost baggage and delayed luggage\"</em> and boom — the system surfaces the most relevant reviews using vector embeddings. Not just keyword matching. Real semantic understanding. The kind that knows \"mishandled bag\" and \"lost luggage\" mean the same thing.</p><p>You get the top 50 matched reviews, plus comprehensive statistics: average ratings across every dimension, seat type distributions, traveler demographics, correlation matrices showing which metrics actually drive satisfaction. It's like having a full statistical report generated in seconds, tailored exactly to your query.</p><p> is where things get interesting. This is for questions like <em>\"Among users complaining about check-in delays, show me seat type distribution for those who still rated ground service above 3.\"</em></p><p>That's not a simple search. That's a multi-layered analytical question. The AI agent interprets your intent, figures out you're asking for a conditional distribution analysis, rewrites your query for optimal semantic matching, executes the right statistical function, and returns targeted visualizations with contextual explanations.</p><p>All from one sentence. No SQL. No setup. Just ask.</p><h2>\n  \n  \n  The Secret Sauce: Five Intelligent Functions\n</h2><p>Behind the scenes, AIRLYTICS uses five specialized analytical engines. When you ask a complex question, the agent automatically routes it to the right one:</p><p><strong>General Percentage Distribution</strong> handles questions like <em>\"What percentage of passengers rated value for money above 4?\"</em> — fast, simple threshold checks across any numeric field.</p><p><strong>Conditional Distribution Analysis</strong> shows you breakdowns like <em>\"For delayed passengers, what's the seat type distribution?\"</em> — perfect for understanding how issues vary across categories.</p><p><strong>Category-to-Category Analysis</strong> compares two categorical fields, like <em>\"How many Economy passengers were Solo Leisure versus Business travelers?\"</em> — great for demographic pivots.</p><p><strong>Rating-to-Rating Analysis</strong> finds overlaps between numeric conditions, like <em>\"Of passengers with low Wi-Fi scores, how many also rated overall experience poorly?\"</em> — the correlation detective.</p><p><strong>Conditional Rating Analysis</strong> connects ratings to outcomes, like <em>\"Among high food raters, what percent still recommended the airline?\"</em> — revealing those crucial loyalty disconnects.</p><p>The beautiful part? You never have to know which function does what. Just ask your question naturally. The agent figures it out.</p><h2>\n  \n  \n  Smart Sampling: Why Less is More\n</h2><p>Here's something cool about AIRLYTICS that most analytics platforms get wrong.</p><p>It doesn't analyze all 20,000 reviews for every query. That would be slow, expensive, and frankly, unnecessary. Instead, it uses .</p><p>Every query retrieves the top N semantically matched reviews — you can choose 10, 20, 50, 75, or 100 (MindsDB's current limit). All statistics, distributions, and correlations are computed from this focused subset.</p><p>Why does this matter? Because when you ask about Wi-Fi complaints, you don't need reviews about excellent meals. You need the 100 most relevant Wi-Fi-related reviews. That's your representative sample. That's where your signal lives.</p><p>It's faster, more focused, and statistically just as valid. Plus, it means every metric you see is actually  what you asked for, not diluted by thousands of unrelated reviews.</p><h2>\n  \n  \n  InsightInterpreter: Your AI Strategist\n</h2><p>Raw numbers are useful. Strategic recommendations are invaluable.</p><p>That's why AIRLYTICS includes  — think of it as your in-house AI consultant who's allergic to corporate buzzwords and loves cutting through noise.</p><p>After any query, hit the \"Get AI Insights\" button. InsightInterpreter looks at your results — the distributions, correlations, top reviews, all of it — and tells you what actually matters.</p><p>Not </p><p>But <em>\"Wi-Fi below 3 stars drops overall satisfaction by 68%. Upgrade routers on long-haul routes — it impacts loyalty more than catering.\"</em></p><p>Not <em>\"Business travelers rate cleanliness at 6.2.\"</em></p><p>But <em>\"Business travelers forgive delays but hate dirty cabins. Prioritize cleaning staff over gate efficiency.\"</em></p><p>It spots contradictions (high ratings, low loyalty — what gives?), identifies root causes (it's not the food, it's the pricing), and suggests concrete next steps. All written in the voice of a seasoned analyst who knows that real insight is the difference between a refund and a repeat customer.</p><h2>\n  \n  \n  Rich Metadata Filtering: Slice and Dice Your Way\n</h2><p>AIRLYTICS supports filtering across every structured dimension in your data.</p><p>Want to see only Emirates Business Class reviews? Done. Need verified Solo Leisure travelers on long-haul flights? Easy. Looking for passengers who rated Wi-Fi below 3 but overall experience above 7? No problem.</p><p>You've got 50+ airlines, multiple aircraft types, four seat classes, different traveler types, verification flags, recommendation status, and eight numeric rating fields to work with. Mix and match however you want.</p><p>Every filter applies to both semantic searches and analytical queries. The system handles it seamlessly in the background.</p><h2>\n  \n  \n  Building AIRLYTICS: The MindsDB Magic\n</h2><p>So how does all this actually work?</p><p>At its core, AIRLYTICS is powered by three MindsDB components working in perfect harmony.</p><h3>\n  \n  \n  Knowledge Bases: The Foundation\n</h3><p>MindsDB Knowledge Bases are what make semantic search possible. Instead of storing just text, they store  — vector embeddings that capture the semantic essence of each review.</p><p>When you search for \"bad food and poor service,\" the Knowledge Base doesn't just match those exact words. It finds reviews about \"terrible meals and rude staff,\" \"cold food and unhelpful crew,\" or \"worst dining experience and slow service.\" It understands synonyms, context, and intent.</p><p>Plus, it respects structured metadata. You can search semantically  filter by airline, seat type, ratings — all in one query. That's the hybrid power MindsDB brings to the table.</p><h3>\n  \n  \n  The Analytics Agent: The Interpreter\n</h3><p>This is where things get really clever.</p><p>The  is trained to understand natural language questions and break them down into two parts:</p><p> The semantic filter — <em>what kind of reviews should we look at?</em> The analytical question — <em>what measurement or comparison do we want?</em></p><p>If only Part 1 exists, it's a straightforward semantic search. If both parts exist, the agent maps Part 2 to one of the five analytical functions, extracts the right parameters (which fields, what thresholds, which operators), and returns everything as structured JSON.</p><p>All you had to do was ask a question in plain English.</p><h3>\n  \n  \n  The Insight Agent: The Strategist\n</h3><p>The <strong>insight_interpreter_agent</strong> is your executive translator.</p><p>It takes the raw analytics output — the numbers, distributions, top reviews — and interprets them through the lens of airline operations strategy. It's trained to spot patterns, identify contradictions, connect dots between seemingly unrelated metrics, and recommend concrete actions.</p><p>It doesn't just describe what it sees. It explains what it  and what you should  about it.</p><p>Here's a tiny peek at its prompt philosophy:</p><div><pre><code>You are InsightInterpreter — the sharp data analyst inside an airline's analytics division.\nYour job: Cut through the noise and tell the manager something they didn't already know.\nFocus on contradictions, unexpected drivers, and actionable next steps.\n\nRules:\n1. No recaps. Don't restate the query.\n2. No fluff. Skip \"The data shows...\"\n3. Be concrete. Use actual numbers when they matter.\n4. Stay tight. 2-3 paragraphs, max.\n5. End with action. Always tell what should be done differently.\n</code></pre></div><p>That's it. Sharp, focused, actionable. Every time.</p><h2>\n  \n  \n  Beyond Airlines: A Blueprint for Any Feedback Domain\n</h2><p>Here's the thing — while AIRLYTICS is built for airline reviews, the architecture is a .</p><p>The same approach works for:</p><p>🏨  — guest reviews, amenity feedback, service ratings — delivery experiences, menu feedback, ambiance comments — product reviews, shopping experiences, return issues — patient satisfaction, appointment experiences, facility feedback — ticket descriptions, call transcripts, chat logs</p><p>Anywhere you have unstructured feedback with structured metadata, this pattern applies. Swap the schema, prepare the agents on domain-specific language, and you're off to the races.</p><p>That's the power of MindsDB's Knowledge Bases. They're not industry-specific. They're .</p><h2>\n  \n  \n  Real-World Impact: What This Means for Airlines\n</h2><p>Let's get practical for a second.</p><p>Imagine you're an airline ops manager. You know Wi-Fi complaints are up, but you don't know if it's a dealbreaker or just noise. You type:</p><p><em>\"Users who complained about baggage claim delays — what percentage of those who rated ground service above 4 rated overall experience below 5?\"</em></p><ul><li>42% of users with good ground service ratings still had poor overall experiences</li><li>A breakdown by seat type showing Business Class is disproportionately affected</li><li>A correlation heatmap revealing that baggage issues matter 3× more than food quality for Business travelers</li><li>An InsightInterpreter note: <em>\"Baggage delays hit Business travelers hardest. They pay premium prices for time — not food. Fast-track baggage handling for premium cabins immediately.\"</em></li></ul><p>You just went from a hunch to a prioritized action plan in seconds.</p><p>That's what conversational analytics looks like. And that's what AIRLYTICS delivers.</p><h2>\n  \n  \n  The Tech Behind the Magic\n</h2><p>For the curious: AIRLYTICS is built with React and TailwindCSS on the frontend, FastAPI on the backend, and MindsDB handling all the AI heavy lifting. Data flows from Google Sheets straight into MindsDB's Knowledge Base — zero ETL pipelines, zero data warehouses.</p><p>Docker Compose keeps MindsDB containerized for local development. OpenAI's embeddings power the semantic search. Recharts and Plotly handle visualizations. The whole stack is designed to be clean, modular, and production-ready.</p><p>Want to set it up yourself? The full installation guide, architecture diagrams, and SQL examples are all in the . Everything you need to get it running locally or extend it to your own domain.</p><h2>\n  \n  \n  Hacktoberfest 2025: Built for Advanced Capabilities\n</h2><p>AIRLYTICS was designed for <strong>MindsDB Hacktoberfest Track 2: Advanced Capabilities</strong>. That means it checks all the boxes:</p><p>✅ Knowledge Base integration with 20,000+ reviews<p>\n✅ Dual-agent architecture (analytics + insights)</p><p>\n✅ Metadata filtering across multiple dimensions</p><p>\n✅ Hybrid search capabilities (semantic + structured)</p><p>\n✅ Automated data freshness with MindsDB Jobs</p><p>\n✅ Zero-ETL architecture (Google Sheets → MindsDB direct)</p></p><p>But beyond the checklist, it's a <strong>complete RAG-to-BI pipeline</strong>. Not a toy demo. Not a proof of concept. A production-grade analytics engine that shows what's possible when you combine semantic understanding, statistical rigor, and AI interpretation.</p><p>Curious to see AIRLYTICS in action?</p><p>Clone it. Run it. Break it. Extend it to your own domain. The entire codebase is open source and ready to go.</p><h2>\n  \n  \n  The Future of Analytics is Conversational\n</h2><p>Here's what I learned building AIRLYTICS:</p><p>The future of business intelligence isn't about building more dashboards. It's about building systems that , , and . All in natural language. All in real-time.</p><p>MindsDB's Knowledge Bases make that possible. Their agent architecture makes it scalable. And the zero-ETL approach makes it practical.</p><p>Whether you're analyzing airline reviews, hotel feedback, or customer support tickets, the pattern is the same: semantic understanding + statistical rigor + AI interpretation = actionable intelligence.</p><p>The age of asking your data questions and getting strategic answers has arrived.</p><p>And it's powered by MindsDB.</p><p>Huge thanks to the MindsDB team for creating such a powerful platform, OpenAI for the embedding models, and the entire open-source community for the tools that made this possible.</p><p>Built with ❤️ for MindsDB Hacktoberfest 2025.</p><p><strong>AIRLYTICS: Transforming unstructured feedback into strategic intelligence, one query at a time.</strong></p><p><em>Ready to unlock intelligence from your own feedback data? Check out the *</em><a href=\"https://github.com/rajesh-adk-137/AIRLYTICS\" rel=\"noopener noreferrer\">AIRLYTICS GitHub repo</a>** and start exploring what's possible with MindsDB Knowledge Bases.*</p>","contentLength":14181,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-32mn","date":1761862059,"author":"Vibe YouTube","guid":322388,"unread":true,"content":"<p>Python’s full of hidden gems, and this video peels back the curtain on three you’ll want in your toolkit: the new match statement for cleaner pattern matching, dataclasses to slash boilerplate when modeling data, and the positional‐only &amp; keyword‐only argument syntax to enforce clearer function signatures.</p><p>Along the way you’ll snag a 20% off code for Brilliant’s Premium content and get a peek at Tim’s DevLaunch mentorship program—no fluff, just hands-on guidance to build real projects and land that job.</p>","contentLength":523,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Hacktoberfest Last Pull Request - Writing Test","url":"https://dev.to/denisc96/hacktoberfest-last-pull-request-writing-test-3ljj","date":1761859901,"author":"DenisC","guid":322365,"unread":true,"content":"<p>The last pull request that I worked on was to add a test to <a href=\"https://github.com/januschung/math-worksheet-generator\" rel=\"noopener noreferrer\">Math Worksheet Generator</a>, which is posted in <a href=\"https://github.com/januschung/math-worksheet-generator/issues/53\" rel=\"noopener noreferrer\">this issue</a>. As opposed to bug fixing and adding new feature in my previous pull requests, this time I focused on writing the test itself, which may not have an immediate impact, but would definite improve maintainability of the project in the long run.</p><p>A comprehensive test set helps identify bugs and allows re-testing in the future to ensure that the program runs normally after updates, therefore, we should identify the missing piece in the current test set. I first went through <a href=\"https://github.com/januschung/math-worksheet-generator/blob/master/tests/test_math_worksheet_generator.py\" rel=\"noopener noreferrer\">the current test cases</a> in the project, and spotted that there was no test case to check for the option of mix question type, which generates math questions with random operator (+,-,x,/). It would be a good idea to add a test to check if question and answer are generated properly with the mix type.</p><p>Now that I had decided what test to be written, I could go ahead and write the test. Similar to adding new feature, I also have to stick to original coding style when writing the test, which I have become more proficient after weeks of practice working on open source projects. A minor problem arose when I tried to push my codes after writing the test, I found that I've included the codes related to another issue that I worked on in the same repo. Then I realized that I had created a new branch from the branch for another issue instead of from the main branch. I had to re-creating a branch from the main branch, add the new test in the right branch, and eventually made a <a href=\"https://github.com/januschung/math-worksheet-generator/pull/55\" rel=\"noopener noreferrer\">pull request</a>.</p><h3>\n  \n  \n  Lesson learnt and future planning\n</h3><p>In this pull request, I've gained experience examining existing test set, and writing test that improve the comprehensiveness of the test set. Additionally, I'm more aware of branching in git, especially when working on multiple issues on the same repo at the same time. Now I've built a habit of using  to check the current branch first before creating new branch. Though this is my last pull request for Hacktoberfest, I will continuously look for open source projects that I'm interested in, and try my best to contribute to the open source community in the future.</p>","contentLength":2189,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Context Variable Vault: Thread-Safe State Without Globals","url":"https://dev.to/aaron_rose_0787cc8b4775a0/the-context-variable-vault-thread-safe-state-without-globals-2khk","date":1761858884,"author":"Aaron Rose","guid":322364,"unread":true,"content":"<p>Timothy stared at his laptop screen, frustration mounting. The library's new async web server was working—mostly—but the logs were a disaster.</p><p>\"Margaret, look at this,\" he said, spinning his screen toward her. The senior librarian walked over from the reference desk.</p><div><pre><code>[INFO] Processing request abc123: Starting checkout\n[INFO] Processing request xyz789: Starting checkout  \n[INFO] Processing request abc123: User verification\n[INFO] Processing request xyz789: Database query\n[INFO] Processing request abc123: Database query\n[INFO] Processing request xyz789: User verification\n</code></pre></div><p>\"The request IDs are all mixed up,\" Timothy said. \"Request abc123 shows database query, but that log line is actually from xyz789. I can't trace what's happening to individual requests.\"</p><p>Margaret nodded knowingly. \"Show me your logging code.\"</p><p>Timothy pulled up his code:</p><div><pre><code></code></pre></div><p>\"I set  at the start of each request,\" Timothy explained. \"But by the time we log later, it's been overwritten by another request.\"</p><p>\"Exactly,\" Margaret said. \"Your async tasks are all sharing the same global variable. When task abc123 awaits, task xyz789 runs and overwrites the variable. When abc123 resumes, the variable has changed.\"</p><p>She drew a diagram on paper:</p><div><pre><code>The Race Condition:\n\n1. Task abc123 sets global = \"abc123\"\n2. Task abc123 awaits (gives control to other tasks)\n3. Task xyz789 sets global = \"xyz789\" \n4. Task xyz789 awaits\n5. Task def456 sets global = \"def456\"\n6. Tasks abc123 and xyz789 resume → both see \"def456\" ❌\n\nLast writer wins! Everyone sees the final value.\n</code></pre></div><p>\"This is the fundamental problem with global state in concurrent code,\" Margaret said. \"You need each task to have its own isolated copy of the state.\"</p><h2>\n  \n  \n  Thread-Local Storage: A Partial Solution\n</h2><p>\"What about thread-local storage?\" Timothy asked. \"I've heard of .\"</p><p>\"Good instinct,\" Margaret said. \"Let's try it.\"</p><div><pre><code></code></pre></div><p>Timothy ran it and frowned at the output:</p><div><pre><code>[INFO] Processing request abc123: Starting checkout\n[INFO] Processing request xyz789: Starting checkout\n[INFO] Processing request def456: Starting checkout\n[INFO] Processing request def456: User verification\n[INFO] Processing request def456: User verification\n[INFO] Processing request def456: Database query\n[INFO] Processing request def456: Database query\n[INFO] Processing request def456: Database query\n</code></pre></div><p>\"They all show def456 after the awaits!\" Timothy said. \"Even though abc123 and xyz789 set their own IDs.\"</p><p>\"Because all three async tasks are running in the ,\" Margaret explained. \"Thread-local storage gives you one value per thread, but async tasks aren't threads. They're all in one thread, taking turns. When task abc123 sets the value to 'abc123' and then awaits, task xyz789 runs and overwrites that same thread-local storage. Then def456 runs and overwrites it again. By the time any task resumes, the shared thread-local storage holds 'def456'—the last value written.\"</p><div><pre><code>Threading model (thread-local works):\n┌──────────────┐  ┌──────────────┐  ┌──────────────┐\n│   Thread 1   │  │   Thread 2   │  │   Thread 3   │\n│  request_id  │  │  request_id  │  │  request_id  │\n│  = \"abc123\"  │  │  = \"xyz789\"  │  │  = \"def456\"  │\n└──────────────┘  └──────────────┘  └──────────────┘\n     ✓ Isolated      ✓ Isolated       ✓ Isolated\n\nAsync model (thread-local fails):\n┌────────────────────────────────────────────────┐\n│              Single Thread                     │\n│  ┌──────────┐  ┌──────────┐  ┌──────────┐      │\n│  │ Task abc │  │ Task xyz │  │ Task def │      │\n│  └──────────┘  └──────────┘  └──────────┘      │\n│         thread_local.request_id = \"def456\"     │\n│         (All tasks see the same storage!)      │\n└────────────────────────────────────────────────┘\n     ✗ Not isolated - they all see \"def456\"!\n</code></pre></div><p>\"So thread-local doesn't work for async,\" Timothy said. \"What's the solution?\"</p><p>Margaret smiled. \"Python 3.7 added exactly what we need: context variables. They work like thread-local storage, but they're aware of async tasks.\"</p><div><pre><code></code></pre></div><div><pre><code>[INFO] Processing request abc123: Starting checkout\n[INFO] Processing request xyz789: Starting checkout\n[INFO] Processing request def456: Starting checkout\n[INFO] Processing request abc123: User verification\n[INFO] Processing request xyz789: User verification\n[INFO] Processing request def456: User verification\n[INFO] Processing request abc123: Database query\n[INFO] Processing request xyz789: Database query\n[INFO] Processing request def456: Database query\n\nResults: ['Request abc123 complete', 'Request xyz789 complete', 'Request def456 complete']\n</code></pre></div><p>\"Perfect!\" Timothy exclaimed. \"Each request keeps its own ID throughout the entire async call chain!\"</p><p>\"That's the magic of context variables,\" Margaret said. \"Each async task gets its own isolated context. The context variable remembers which task is running and gives each one its own value.\"</p><h2>\n  \n  \n  How Context Variables Work\n</h2><p>Timothy looked at the code carefully. \"So  creates a... variable? That somehow knows which task is accessing it?\"</p><p>\"Think of it like a vault,\" Margaret said, pulling out her notepad. \"Not a single box, but a whole vault system with separate compartments.\"</p><div><pre><code>The Context Variable Vault:\n\nGlobal scope:\n  request_id_var (the vault manager)\n           ↓\n  ┌───────┴────────┬────────────┬────────────┐\n  │                │            │            │\nTask abc123    Task xyz789  Task def456   Main task\n  Context        Context      Context      Context\n┌─────────┐    ┌─────────┐  ┌─────────┐  ┌─────────┐\n│ req_id  │    │ req_id  │  │ req_id  │  │ req_id  │\n│\"abc123\" │    │\"xyz789\" │  │\"def456\" │  │\"unknown\"│\n└─────────┘    └─────────┘  └─────────┘  └─────────┘\n\nEach task has its own compartment in the vault!\n</code></pre></div><p>\"When you call <code>request_id_var.set('abc123')</code>, you're not setting a global value,\" Margaret explained. \"You're setting the value <em>in the current task's context</em>. When you call , you retrieve the value from the current task's context.\"</p><p>\"So it's like each task has its own namespace for context variables?\" Timothy asked.</p><p>\"Exactly. And here's the beautiful part: contexts are automatically created and managed by Python. When you , Python creates a separate context for each task. You don't have to manage any of that.\"</p><p>\"One small detail,\" Margaret added. \"When you call , it actually returns a Token object. We're ignoring it here, but it's important for advanced patterns—if you need to temporarily change a value and then restore it, you use that Token with . We'll cover that in the next article.\"</p><h2>\n  \n  \n  The Anatomy of a Context Variable\n</h2><p>Margaret created a more detailed example:</p><div><pre><code></code></pre></div><div><pre><code>Task 100: user_id=100, token=token_100, count=1\nTask 200: user_id=200, token=token_200, count=1\nTask 300: user_id=300, token=token_300, count=1\nTask 100 after await: user_id=100, token=token_100, count=1\nTask 200 after await: user_id=200, token=token_200, count=1\nTask 300 after await: user_id=300, token=token_300, count=1\n\nMain context: user_id not set (raises LookupError - no default provided)\nMain context: token=anonymous, count=0\n</code></pre></div><p>\"Notice how each task's count is 1?\" Margaret pointed out. \"Each task incremented from the default value of 0. They didn't interfere with each other. And the main task never set , so it would raise  if we tried to get it without a try-except.\"</p><h2>\n  \n  \n  Context Inheritance: The Vault's Secret\n</h2><p>\"Let me show you something subtle but important,\" Margaret said. She typed a new example:</p><div><pre><code></code></pre></div><div><pre><code>Parent set config: parent_config\n  child1 sees config: parent_config\n  child1 changed config to: parent_config_modified_by_child1\n  child2 sees config: parent_config\n  child2 changed config to: parent_config_modified_by_child2\nParent after children: parent_config\n</code></pre></div><p>\"Wait,\" Timothy said, studying the output. \"The children  the parent's value, but when they modified it, the parent's value stayed the same?\"</p><p>\"Exactly!\" Margaret drew another diagram:</p><div><pre><code>Context Inheritance: Copy-on-Write\n\nParent Task creates context:\n┌─────────────────┐\n│ config: \"parent\"│\n└────────┬────────┘\n         │\n    ┌────┴────┐\n    │ spawn   │\n    └────┬────┘\n         │\n    ┌────┴─────────────┐\n    │                  │\nChild 1 Context    Child 2 Context\n(inherits copy)    (inherits copy)\n┌──────────────┐  ┌──────────────┐\n│config:       │  │config:       │\n│\"parent\"      │  │\"parent\"      │\n│              │  │              │\n│↓ .set()      │  │↓ .set()      │\n│\"parent_mod1\" │  │\"parent_mod2\" │\n└──────────────┘  └──────────────┘\n\nParent context unchanged!\n</code></pre></div><p>\"This is copy-on-write semantics,\" Margaret explained. \"When a child task is created, it inherits a  of the parent's context. Reading values works transparently. But when the child calls , it modifies its own copy, not the parent's.\"</p><h2>\n  \n  \n  Context Variables with Threading\n</h2><p>\"Does this work with regular threading too?\" Timothy asked.</p><p>\"It does,\" Margaret said. \"Context variables work across both threading and async. Each thread gets its own context, just like each async task does.\"</p><div><pre><code></code></pre></div><div><pre><code>Main thread: worker_id=main_thread\nworker_0 starting: worker_id=worker_0\nworker_1 starting: worker_id=worker_1\nworker_2 starting: worker_id=worker_2\nworker_0 finishing: worker_id=worker_0\nworker_1 finishing: worker_id=worker_1\nworker_2 finishing: worker_id=worker_2\nMain thread after workers: worker_id=main_thread\n</code></pre></div><p>\"So context variables are like a universal solution,\" Timothy said. \"They work for async  threading. Each thread and each task gets its own context compartment.\"</p><p>\"Right. They're the modern Python way to handle execution-local state, whether you're using threads or async tasks.\"</p><h2>\n  \n  \n  When Context Variables Shine\n</h2><p>Margaret opened a new file. \"Let me show you a realistic example: building a logger that automatically includes request context.\"</p><div><pre><code></code></pre></div><p>Timothy ran it and examined the output carefully:</p><div><pre><code>[14:23:15.123] [req_001] [anonymous] Request received\n[14:23:15.124] [req_002] [anonymous] Request received\n[14:23:15.125] [req_003] [anonymous] Request received\n[14:23:15.126] [req_001] [anonymous] Authenticating alice\n[14:23:15.126] [req_002] [anonymous] Authenticating bob\n[14:23:15.127] [req_003] [anonymous] Authenticating charlie\n[14:23:15.177] [req_001] [user_alice] Authentication successful\n[14:23:15.178] [req_002] [user_bob] Authentication successful\n[14:23:15.179] [req_003] [user_charlie] Authentication successful\n[14:23:15.180] [req_001] [user_alice] Fetching user data from database\n[14:23:15.181] [req_002] [user_bob] Fetching user data from database\n[14:23:15.182] [req_003] [user_charlie] Fetching user data from database\n[14:23:15.232] [req_001] [user_alice] User data retrieved\n[14:23:15.233] [req_002] [user_bob] User data retrieved\n[14:23:15.234] [req_003] [user_charlie] User data retrieved\n[14:23:15.235] [req_001] [user_alice] Request complete\n[14:23:15.236] [req_002] [user_bob] Request complete\n[14:23:15.237] [req_003] [user_charlie] Request complete\n</code></pre></div><p>\"Beautiful,\" Timothy said. \"Each request is perfectly tracked. And I didn't have to pass  and  as parameters to every single function.\"</p><p>\"That's the key benefit,\" Margaret said. \"Context variables let you establish ambient context that flows automatically through your call chain. You set it once at the top level, and it's available everywhere in that execution path.\"</p><h2>\n  \n  \n  The Default Value Pattern\n</h2><p>\"What about that  parameter?\" Timothy asked, pointing at the ContextVar definitions.</p><div><pre><code></code></pre></div><div><pre><code>Config (has default): production\nError: &lt;ContextVar name='api_key' at 0x...&gt;\nAPI key with fallback: fallback_key\n</code></pre></div><p>\"If you provide a default when creating the ContextVar, that value is always available,\" Margaret explained. \"If you don't provide a default, calling  without setting a value first raises .\"</p><p>\"When would I want no default?\" Timothy asked.</p><p>\"When it's a programming error to read the variable before setting it. Like an API key that must be explicitly configured. The error helps catch bugs where you forgot to set the context.\"</p><h2>\n  \n  \n  Understanding the Vault Metaphor\n</h2><p>They were approaching the library's closing time. Margaret summarized with a final diagram:</p><div><pre><code>The Context Variable Vault - Complete Picture:\n\n1. Creating a ContextVar:\n   request_id = ContextVar('request_id')\n\n   This creates the \"vault manager\" - a global reference point\n\n2. Setting a value:\n   request_id.set('abc123')\n\n   Stores value in the CURRENT execution context's compartment\n\n3. Getting a value:\n   request_id.get()\n\n   Retrieves value from the CURRENT execution context's compartment\n\n4. Contexts are automatically managed:\n   - Each async task gets its own context (compartment)\n   - Each thread gets its own context (compartment)\n   - Child tasks inherit parent's context (copy-on-write)\n\n5. The vault manager (ContextVar) is global\n   The compartments (contexts) are execution-local\n\n   ┌──────────────────────────────────────┐\n   │  request_id (global vault manager)   │\n   └───────────────┬──────────────────────┘\n                   │\n       ┌───────────┼───────────┐\n       │           │           │\n   ┌───▼───┐   ┌───▼───┐   ┌───▼───┐\n   │Context│   │Context│   │Context│\n   │Task 1 │   │Task 2 │   │Task 3 │\n   │\"abc\"  │   │\"xyz\"  │   │\"def\"  │\n   └───────┘   └───────┘   └───────┘\n</code></pre></div><p>Timothy closed his laptop, finally understanding how to manage state in concurrent Python without the pitfalls of global variables.</p><p><strong>Context variables provide execution-local storage</strong>: Each async task or thread gets its own isolated compartment for values.</p><p><strong>The ContextVar is a vault manager</strong>: It's a global reference point, but the actual values are stored in execution-specific contexts.</p><p><strong>Set once, read anywhere in the call chain</strong>: Context variables flow through async calls without explicit parameter passing.</p><p><strong>Contexts inherit copy-on-write</strong>: Child tasks start with a copy of the parent's context, but modifications don't affect the parent.</p><p><strong>Works with both async and threading</strong>: Context variables provide a unified solution for execution-local state—each thread and each task gets its own compartment.</p><p><strong>Defaults are optional but useful</strong>: Provide a default for always-available values, omit it to catch configuration errors.</p><p><strong>Solves the global variable problem</strong>: No more mixed-up state in concurrent execution paths.</p><p>:  retrieves the value from the current execution context automatically.</p><p><strong>Python manages contexts automatically</strong>: You don't create or destroy contexts; they're managed by the async runtime and threading system.</p><p><strong>Thread-local doesn't work for async</strong>:  gives one value per thread, but async tasks share a thread, so they all see the same value.</p><p><strong>Type hints improve clarity</strong>: Use  or  to document the expected type.</p><p><strong>LookupError for unset variables</strong>: If no default is provided and the variable isn't set,  raises LookupError.</p><p>:  provides a one-time fallback without setting the variable.</p><p><strong>Perfect for request tracking</strong>: Automatically propagate request IDs, user IDs, and other context through your application.</p><p>: Build loggers that automatically include context without passing it explicitly.</p><p>: Global manager, execution-local compartments, automatic management.</p><p><strong>Context variables are modern Python</strong>: They're the recommended way to handle execution-local state since Python 3.7.</p><p><strong>The Token object from .set()</strong>: Used for advanced patterns to temporarily change and restore values with .</p><p>: Advanced context variable patterns, , explicit context manipulation, and how frameworks use context variables under the hood.</p><h2>\n  \n  \n  Understanding Context Variables\n</h2><p>Timothy had discovered how Python provides execution-local storage without the pitfalls of global variables.</p><p>He learned that context variables solve the fundamental problem of shared state in concurrent code, that each execution path (async task or thread) gets its own isolated compartment in the vault, and that these compartments are managed automatically by Python's runtime.</p><p>Margaret showed him that context variables work through a simple API—create with , set with , read with —but this simplicity hides sophisticated context management, where child tasks inherit copies of their parent's context and modifications remain isolated.</p><p>Most importantly, Timothy understood that context variables aren't just a technical feature but a design pattern, enabling clean separation of concerns where configuration and ambient state flow through the call chain without cluttering function signatures, while maintaining complete isolation between concurrent execution paths.</p><p>The library was closing. As Timothy packed up his laptop, his logging bug was solved, and he had a new tool for managing state in his concurrent applications—one that worked seamlessly across both threading and async code.</p>","contentLength":18039,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"A Senior Developer’s Guide to Vibe Coding and Deep AI Integration in Cursor","url":"https://dev.to/onlineproxy/a-senior-developers-guide-to-vibe-coding-and-deep-ai-integration-in-cursor-5eg","date":1761856965,"author":"OnlineProxy","guid":322333,"unread":true,"content":"<p>You’ve felt it, haven’t you? The strange disconnect. On one screen, you have your IDE, a familiar landscape of files, terminals, and syntax highlighting. On another, a chat interface, where you coax an LLM into generating a function, a regex, or a boilerplate class. Then comes the clumsy ritual: the copy, the paste, the painstaking integration of that foreign code into your pristine local environment. It feels powerful, yet fragmented—like using a supercar to deliver pizza.</p><p>We are senior developers. We architect systems, we manage complexity, and we demand tools that match our workflow. The copy-paste dance isn’t it. We need an environment where the AI is not a consultant in another room, but a native partner sitting right beside us, with full context of our project.</p><p>Enter Cursor, an AI-native code editor that's more than just a Visual Studio Code fork with a chatbot bolted on. It’s an attempt to redefine the developer-AI interaction, moving from disjointed queries to a fluid, conversational development process. It's a style some have called \"vibe coding\"—a way to build, refactor, and debug through high-level intent rather than keystroke-by-keystroke implementation. This is the deep integration we’ve been waiting for.</p><p><strong>What is 'Vibe Coding' and Why Does Cursor Nail It?</strong>\n\"Vibe coding\" is a term that perfectly captures the shift from explicit instruction to articulating intent. It’s the difference between telling a junior dev, \"Declare a variable x, initialize it to 10, then start a for loop from 0 to 9...\" versus telling a senior colleague, \"I need a scalable function to process this data stream and handle retries.\"</p><p>Cursor is engineered for this latter type of conversation. It's built on the solid foundation of VS Code, so your muscle memory for shortcuts and extensions remains intact. But its core loop is fundamentally different. The AI is not a feature; it is the environment.</p><p>Imagine starting a new project. Instead of creating files manually, you open Cursor’s AI agent and say:</p><p><em>\"Create a classic snake game in Python using pygame. Generate a  with instructions and a  file for dependencies.\"</em></p><p>Within moments, Cursor doesn't just spew code into a chat window. It plans and executes. It creates the actual file structure in your project folder: , , and . You see the proposed code, accept it, and it becomes a tangible part of your project.</p><p>This is the first taste of true AI-native development. But the real magic lies in the iterative refinement. You run the game, and you think, \"It's a bit unforgiving. What if you didn't die when you hit the wall, but instead just wrapped around to the other side?\"</p><p>Instead of searching the code for the collision logic, you simply tell the agent your intent:</p><p><em>\"Change the game so the snake isn't game over if it hits the wall. Update the readme to reflect this new feature.\"</em></p><p>Cursor understands the context of the  file, identifies the relevant code blocks, proposes the changes, and even updates the documentation. This conversational flow—from initial creation to complex refactoring—is the essence of vibe coding. You can even take it a step further. Found a screenshot of a game UI you like? Upload it and prompt:</p><p><em>\"I want my snake game to look like this. Please make it happen.\"</em></p><p>The AI will analyze the image and generate the code to replicate the colors, layout, and style elements. This is a workflow that feels less like programming and more like directing a highly competent assistant.</p><h2>\n  \n  \n  A Practical Framework for Your First Cursor Project\n</h2><p>To harness this power without creating chaos, you need a disciplined approach. Spontaneity is great, but structure is what ships products. Here's a simple, memorable framework to get started.</p><p><strong>The Sandbox-to-Structure Framework</strong></p><p><strong>Step 1: The Sandbox - Isolate Your Environment</strong>\nThis might sound basic, but it's non-negotiable. Before writing a single prompt, create a new, empty folder for your project on your local machine. In Cursor, use  to open it. Why is this so critical? The AI agent will be creating, modifying, and potentially deleting files. By starting in a clean, dedicated directory (, for example), you give the agent a safe sandbox to work in, ensuring your existing work is untouched and all new files are neatly organized.</p><p><strong>Step 2: The Blueprint - Plan Your Intent</strong>\nVibe coding can feel like a jam session, but the best music comes from a plan. Before you start prompting, have a clear, high-level idea of what you want to build. What are the core features? What files will you need? A small plan prevents rambling prompts that lead to a tangled mess of code.</p><p><strong>Step 3: The Conversation - Initiate with the Agent</strong>\nOn Windows or Linux, press  (or  on Mac) to bring up the AI chat panel on the right. This is your primary interface. Start with your high-level goal, as we did with the snake game. Notice how Cursor plans its actions, telling you which files it will create before it writes them. This transparency is crucial for maintaining control.</p><p><strong>Step 4: The Execution - From Code to Reality</strong>\nOnce Cursor generates the files (, ), you must explicitly accept them. This is your chance to review the code before it becomes permanent. After accepting, open the integrated terminal ( or the corresponding shortcut). The  will likely contain the next steps. Follow them.</p><div><pre><code># Install the necessary packages\npip install -r requirements.txt\n\n# Run the application\npython snake_game.py\n</code></pre></div><p>Your application comes to life, running in the environment you set up, all within a single window.</p><p><strong>Step 5: The Refinement Loop - Iterate with </strong>\nThis is the micro-loop of vibe coding. To edit a specific part of your code, simply highlight the lines you want to change and press  ( on Mac). An inline chat box appears, scoped to just that selection.</p><p>Want to change the game board size? Highlight the constants:</p><div><pre><code>WINDOW_WIDTH = 800\nWINDOW_HEIGHT = 600\n</code></pre></div><p>Press  and type: \"Make the field bigger, 1200 by 900.\"</p><p>Don't understand a piece of code? Highlight it, press , and ask: \"What does this code do? Explain it line by line.\"</p><p>This tight, contextual feedback loop allows for rapid prototyping, learning, and refactoring without ever leaving your code file.</p><h2>\n  \n  \n  How Do You Connect Your Codebase to the Outside World with MCP?\n</h2><p>So far, we've built an application in a self-contained universe. The next level of integration is connecting our IDE to external services, allowing the AI to read your emails, update your calendar, or query a database. This is where the <strong>Model Context Protocol (MCP)</strong> comes in.</p><p>MCP is a specification that aims to create a standardized way for LLMs to interact with tools and data sources. Think of it as an API for AI context. Cursor acts as an MCP client, and you can connect it to any MCP-compliant server.</p><p>Let's make this tangible by connecting Cursor to the vast ecosystem of Zapier.</p><p>First, you'll need a Zapier MCP server.</p><ol><li>Navigate to Zapier's AI Actions page and create a \"New MCP Server.\"</li><li>Give it a name (e.g., ) and select \"Cursor\" as the client.</li><li>Click \"Add Tools\" and connect your accounts. Let's add , <code>google_sheets.create_spreadsheet</code>, and <code>google_calendar.create_detailed_event</code>.</li><li>Once configured, go to the \"Connect\" tab. Zapier will provide you with a configuration snippet containing a unique URL. <strong>Treat this URL like a password</strong>. Anyone who has it can use your connected tools on your behalf.</li></ol><p>Now, integrate this into Cursor:</p><ol><li>Go to <code>File -&gt; Preferences -&gt; Cursor Settings</code>.</li><li>Navigate to the  section and click \"Add New Global MCP Server.\"</li><li>This opens an  file. Paste the configuration from Zapier. It will look something like this:\n</li></ol><div><pre><code>{\n  \"zapier\": {\n    \"mcp_server\": {\n      \"url\": \"https://actions.zapier.com/mcp/v1/servers/YOUR_UNIQUE_ID/...\"\n    }\n  }\n}\n</code></pre></div><p>Save the file (). Back in the settings UI, you'll see the Zapier connection turn green, and all your configured tools will be listed. You've just given your code editor superpowers.</p><p>Now, from the AI chat panel, you can say:</p><p>\"Create a Google Sheet named 'MCP Course Tasks' with three columns: 'Task', 'Status', and 'Deadline'.\"</p><p>Cursor will plan the action, ask for your permission, and execute it using the Zapier MCP connection. It will even return a link to the newly created sheet.</p><p>A word of caution: with great power comes the need for great vigilance. In testing, a prompt like \"create an event for me on 05/06\" might be interpreted as June 5th by the LLM, not May 6th. The model can and will make mistakes. Always review the plan before confirming an action, especially when it has real-world consequences. Avoid the temptation to enable any \"YOLO mode\" that bypasses these confirmations until you are supremely confident in your setup.</p><h2>\n  \n  \n  What's the Real Cost? Managing API Keys and Budgets\n</h2><p>Cursor offers a generous free plan and paid subscriptions that abstract away the cost of AI usage. However, for maximum control, flexibility, and to use models not included in the standard plans, you'll want to bring your own API key. This puts you in charge of the bill, which requires a professional approach to cost management.</p><h2>\n  \n  \n  The Three Pillars of API Management\n</h2><p><strong>Pillar 1: Sourcing - Choosing Your Provider</strong>\nWhile platforms like OpenRouter and Anthropic offer compelling APIs, the OpenAI platform remains a robust and common choice. Creating an account is the first step.</p><p><strong>Pillar 2: Cost Control - Understanding the Bill</strong>\nUsing an API key means you pay per token. To avoid surprise bills, you must understand the pricing.</p><ul><li>: As of late 2024, models like  are incredibly cost-effective for coding tasks, costing just 0.15foronemillioninputtokensand0.60 for one million output tokens. For context, one million tokens is roughly 750,000 words. You can accomplish a massive amount of development for just a few dollars.</li><li>: In your OpenAI account's billing dashboard, you can set both soft limits (which send you an email alert) and hard limits (which cut off API access) on a monthly basis. This is your most important safety net. Set a low hard limit (20−40) to start.</li></ul><p><strong>Pillar 3: Security - Scoping Your Keys</strong>\nNever use a single, all-powerful API key for every project.</p><ol><li>: In the OpenAI dashboard, create a new project for each major application (e.g., ).</li><li>: Within that project, create a new secret key. Give it a descriptive name. This key is now tied to that project's usage, making it easy to track costs and revoke access if compromised.</li><li>: Once you generate a key, copy it immediately and store it securely. You will never be able to see it again through the OpenAI dashboard. It's also good practice to rotate your keys periodically by revoking old ones and creating new ones.</li></ol><p>For developers in Europe, create your projects in the  region to ensure your data is processed within the EU, aligning with GDPR and providing zero data retention by default.</p><h2>\n  \n  \n  Where Are the Current Boundaries?\n</h2><p>Expertise isn't just knowing what a tool can do; it's knowing what it can't do. Cursor's implementation of the Model Context Protocol is powerful but, as of now, incomplete.</p><p>Currently, <strong>Cursor only supports the  capability of MCP</strong>.</p><p>This means it excels at executing actions via external APIs, as demonstrated with Zapier. However, other crucial parts of the MCP spec—such as  (providing large documents for context),  (reusable prompt templates), and  (finding new tools)—are not yet implemented.</p><p>This is not a deal-breaker, but it is a critical limitation for anyone designing a sophisticated, multi-client workflow. You cannot, for instance, have Cursor automatically pull context from a server-side document resource via MCP. You would have to provide that context manually through other means, like the  symbol in chat to reference local files. Be aware of this boundary and keep an eye on Cursor’s documentation, as this is likely to evolve.</p><p>The transition to AI-native development is happening now. Tools like Cursor are moving us beyond the fractured workflow of the past into an era of deep, contextual integration. We've explored how to master this new paradigm: by embracing \"vibe coding\" within a structured framework, connecting our editor to the world with MCP, and responsibly managing the underlying API infrastructure.</p><p>The core lesson is this: learning is about changing your behavior. If you've never coded this way before, you've only truly learned if you install Cursor, create that first project, and try to build something, even a simple snake game. Play with it. Break it. Understand its power and its limits.</p><p>The era of the AI-native developer is here. The question is no longer if AI will be part of our workflow, but how deeply we can integrate it. With this guide, your tools and your mindset are now ready for the challenge.</p>","contentLength":12617,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Deja de usar pip install... al menos no directamente. Asegura tu cadena de suministro de Python con pipq.","url":"https://dev.to/livrasand/deja-de-usar-pip-install-al-menos-no-directamente-asegura-tu-cadena-de-suministro-de-python-con-4nho","date":1761855236,"author":"Livrädo Sandoval","guid":322332,"unread":true,"content":"<p>Todos amamos Python por su simplicidad y su increíble ecosistema. Pero seamos honestos: ¿cuántas veces has escrito <code>pip install &lt;paquete_nuevo&gt;</code> cruzando los dedos, esperando que no sea uno de esos paquetes maliciosos de los que lees en las noticias?</p><p>El comando  es una puerta de entrada directa a tu sistema. Un simple error de escritura ( como  en lugar de ) o un paquete legítimo comprometido puede introducir malware, robar tus variables de entorno o filtrar tus claves SSH. Este es el corazón del <strong>ataque a la cadena de suministro de software (software supply chain attack)</strong>, y es un problema que está creciendo.</p><p>Como desarrollador, esto me preocupaba. ¿Por qué el proceso de instalación es un punto ciego de seguridad?</p><p>Por eso cree : un proxy de seguridad para  que analiza los paquetes de Python  de que toquen tu sistema.</p><p> actúa como un guardia de seguridad inteligente entre tú y PyPI. En lugar de ejecutar , ejecutas .</p><p> intercepta esa solicitud y, antes de instalar nada, ejecuta una serie de validaciones de seguridad exhaustivas. Te da un informe claro y toma una decisión basada en tu configuración: , , o .</p><p>Es la misma facilidad de , pero con un cerebro de seguridad incorporado.</p><h2>\n  \n  \n  Características Clave: El Arsenal de Seguridad de </h2><p> no es solo un verificador. Es un conjunto de herramientas de análisis profundo diseñadas para detectar una amplia gama de amenazas:</p><ul><li><strong>Detección de Typosquatting:</strong> Compara el nombre del paquete con los más populares de PyPI para detectar imitaciones maliciosas.</li><li><strong>Análisis Estático de Código:</strong> ¡Esto es crucial!  descarga el paquete y escanea el código fuente en busca de patrones peligrosos (como , , o código ofuscado) .</li><li><strong>Escaneo de Vulnerabilidades Conocidas:</strong> Se integra con bases de datos como  para verificar si el paquete o sus dependencias tienen CVEs (vulnerabilidades) reportadas.</li><li><strong>Escaneo de Malware (con VirusTotal):</strong> Si tienes una API key (¡incluso la gratuita funciona!),  puede enviar los hashes de los archivos a VirusTotal para un análisis de malware de nivel superior.</li><li><strong>Validación de Antigüedad del Paquete:</strong> ¿Un paquete crítico fue creado hace 3 horas?  te lo advertirá. Los paquetes nuevos pueden ser un indicador de ataques.</li><li> ¿El paquete tiene un solo mantenedor? ¿Su perfil parece sospechoso?  te da ese contexto.</li><li><strong>Verificación de Integridad y Procedencia:</strong> Asegura que los hashes SHA256 coincidan y que el paquete siga estándares modernos (como usar ).</li></ul><p>Basta de teoría. Vamos a ponerlo en práctica.</p><p>La instalación usa  (¡irónicamente, por última vez de forma insegura!). El paquete se llama :</p><h3>\n  \n  \n  2. Uso (¡Es así de fácil!)\n</h3><p>Ahora, simplemente reemplaza  con  para tus instalaciones:</p><div><pre><code>\npipq requests\n</code></pre></div><p> analizará  y sus dependencias. Si todo está bien (como es de esperar con ), procederá con la instalación de .</p><p>Si algo es sospechoso, verás una advertencia clara en tu terminal, y el modo por defecto () te preguntará si deseas continuar.</p><h2>\n  \n  \n  El Verdadero Poder: Auditoría, Chequeo y Más\n</h2><p> no es solo para instalaciones. Es una navaja suiza para la seguridad de tu entorno Python.</p><h3>\n  \n  \n  Analiza un paquete  instalarlo\n</h3><p>¿Sientes curiosidad por un paquete pero no quieres instalarlo? Usa :</p><div><pre><code>\npipq check numpy \npipq check flask </code></pre></div><p>¿Qué vulnerabilidades tienes  en tu ?  escanea todos tus paquetes instalados.</p><div><pre><code>\npipq audit\n\n\npipq audit  audit_report.json\n</code></pre></div><h3>\n  \n  \n  Obtén un perfil de seguridad\n</h3><p>¿Quieres saber todo sobre un paquete?  te da una \"tarjeta de informe\" con una calificación de seguridad (A-F), licencia, mantenedores y más.</p><ul><li>: Como , pero con estado de seguridad.</li><li>: Actualizaciones seguras.</li><li>: Busca paquetes y muestra su puntuación de seguridad.</li></ul><h2>\n  \n  \n  Configuración: Hazlo Tuyo\n</h2><p> es totalmente configurable a través de un archivo TOML (<code>~/.config/pipq/config.toml</code>).</p><p>Aquí puedes cambiar el modo de operación:</p><ul><li> (Por defecto): Te pregunta antes de instalar algo riesgoso.</li><li>: Paranoico pero seguro. Bloquea cualquier cosa que falle una validación.</li><li>: Solo instala, pero sigue registrando los problemas.</li></ul><p>También puedes deshabilitar validadores específicos o agregar tus claves de API (como la de VirusTotal) para potenciar los escaneos.</p><div><pre><code></code></pre></div><p> es un proyecto en el que estoy trabajando activamente y debe considerarse . Funciona, pero puede haber errores. ¡La retroalimentación y las contribuciones son más que bienvenidas!</p><h2>\n  \n  \n  Conclusión: Asegura tu Cadena de Suministro\n</h2><p>La <strong>seguridad de la cadena de suministro de software</strong> ya no es un problema \"de grandes empresas\". Afecta a todos los desarrolladores, desde proyectos personales hasta sistemas de producción.</p><p>Herramientas como  buscan cerrar la brecha, dándote el poder de  con la tranquilidad de un análisis de seguridad robusto y automático. Ya no tienes que elegir entre velocidad y seguridad.</p><p>¿Estás listo para dejar de instalar paquetes a ciegas?</p><ol><li> Si crees que el proyecto es útil, ¡una estrella en GitHub me ayudaría muchísimo a correr la voz!</li><li> ¿Qué característica te gusta más? ¿Qué otra amenaza de seguridad de PyPI te preocupa?</li></ol><p>¡Gracias por leer y mantén tu código seguro!</p>","contentLength":5043,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Stop using pip install... at least not directly. Secure your Python supply chain with pipq.","url":"https://dev.to/livrasand/stop-using-pip-install-at-least-not-directly-secure-your-python-supply-chain-with-pipq-263p","date":1761855027,"author":"Livrädo Sandoval","guid":322331,"unread":true,"content":"<p>We all love Python for its simplicity and amazing ecosystem. But let's be honest: how many times have you typed <code>pip install &lt;new_package&gt;</code> crossing your fingers, hoping it's not one of those malicious packages you read about in the news?</p><p>The  command is a direct gateway to your system. A simple typo (typosquatting like  instead of ) or a compromised legitimate package can introduce malware, steal your environment variables, or leak your SSH keys. <strong>This is the heart of a software supply chain attack</strong>, and it's a growing problem.</p><p>As a developer, this worried me. Why is the installation process a security blind spot?</p><p>That's why I created : a security proxy for  that analyzes Python packages before they reach your system.</p><p> acts as an intelligent security guard between you and PyPI. Instead of running , you run .</p><p> intercepts that request and, before installing anything, runs a series of comprehensive security validations. It gives you a clear report and makes a decision based on your configuration: , , or .</p><p>It's the same ease of use as , but with a security brain built-in.</p><h2>\n  \n  \n  Key Features: The  Security Arsenal\n</h2><p> isn't just one check. It's a suite of deep analysis tools designed to catch a wide range of threats:</p><ul><li> Identifies packages with names dangerously similar to popular ones to catch malicious imitations.</li><li> This is a crucial one!  downloads the package and scans the source code for dangerous patterns (like , , or obfuscated code) <strong>without ever executing it</strong>.</li><li><strong>Known Vulnerability Scanning:</strong> Integrates with databases like  to check if the package or its dependencies have reported CVEs.</li><li><strong>Malware Scanning (with VirusTotal):</strong> If you have an API key (even the free one works!),  can submit file hashes to VirusTotal for top-tier malware analysis.</li><li> A critical package was created 3 hours ago?  will flag it. Brand-new packages can be a strong indicator of an attack.</li><li> Does the package have a single maintainer? Does their profile look suspicious?  gives you that context.</li><li><strong>Integrity &amp; Provenance Validation:</strong> Ensures SHA256 hashes match and that the package follows modern standards (like using ).</li></ul><h2>\n  \n  \n  Get Started in 60 Seconds\n</h2><p>Enough talk. Let's put it to work.</p><p>The installation uses  (ironically, for the last time unsafely!). The package is named :</p><h3>\n  \n  \n  2. Usage (It's this easy!)\n</h3><p>Now, just replace  with  for your installations:</p><div><pre><code>\npipq requests\n</code></pre></div><p> will analyze  and its dependencies. If everything looks good (as it should for ), it will proceed with the  installation.</p><p>If something is suspicious, you'll see a clear warning in your terminal, and the default () mode will ask you if you want to proceed.</p><h2>\n  \n  \n  The Real Power: Audit, Check, and More\n</h2><p> isn't just for installation. It's a Swiss Army knife for your Python environment's security.</p><h3>\n  \n  \n  Analyze a package  installing\n</h3><p>Curious about a package but don't want to install it? Use :</p><div><pre><code>\npipq check numpy \npipq check flask </code></pre></div><h3>\n  \n  \n  Audit your  environment\n</h3><p>What vulnerabilities do you have  in your ?  scans all your installed packages.</p><div><pre><code>\npipq audit\n\n\npipq audit  audit_report.json\n</code></pre></div><p>Want the full scoop on a package?  gives you a \"report card\" with a security grade (A-F), license, maintainers, and more.</p><ul><li>: Like , but with security status.</li><li>: Securely upgrade your packages.</li><li>: Search for packages and see their security scores.</li></ul><h2>\n  \n  \n  Configuration: Make It Your Own\n</h2><p> is fully configurable via a TOML file (<code>~/.config/pipq/config.toml</code>).</p><p>Here you can change the operating mode:</p><ul><li> (Default): Asks you before installing anything risky.</li><li>: Paranoid but safe. Blocks anything that fails a validation.</li><li>: Just installs, but still logs any issues.</li></ul><p>You can also disable specific validators or add your API keys (like VirusTotal) to supercharge the scans.</p><div><pre><code></code></pre></div><p> is a project I'm actively working on and should be considered . It's functional, but there may be bugs. Feedback and contributions are more than welcome!</p><h2>\n  \n  \n  Conclusion: Secure Your Supply Chain\n</h2><p><strong>Software supply chain security</strong> is no longer just a \"big enterprise\" problem. It affects every developer, from hobby projects to production systems.</p><p>Tools like  aim to close the gap, giving you the power of  with the peace of mind of robust, automatic security analysis. You no longer have to choose between speed and safety.</p><p>Are you ready to stop installing packages blind?</p><ol><li> If you find the project useful, a star on GitHub would help me immensely in getting the word out!</li><li> What feature do you like most? What other PyPI security threat worries you?</li></ol><p>Thanks for reading, and stay safe out there!</p>","contentLength":4478,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-252g","date":1761854941,"author":"Vibe YouTube","guid":322330,"unread":true,"content":"<p>Ever feel like Python’s hiding secret superpowers? This video shines a spotlight on three modern features you’ve probably never used but definitely should:  </p><ul><li>The new  statement for cleaner, more expressive pattern matching\n</li><li> to ditch boilerplate when defining data models\n</li><li>Positional-only &amp; keyword-only arguments to lock down your function’s API\n</li></ul><p>Bonus perks include a 20% discount on Brilliant’s Premium plan (for leveling up your problem-solving skills) and an invite to Tim’s DevLaunch mentorship program if you’re ready to go beyond tutorials and start building real-world projects.</p>","contentLength":595,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"LLMR: Because AIs Shouldn't Have to Parse Your Bootstrap Navbar 50 Times","url":"https://dev.to/raphal_reck_4d3195c8dbf2/llmr-because-ais-shouldnt-have-to-parse-your-bootstrap-navbar-50-times-36nd","date":1761854467,"author":"Raphaël Reck","guid":322313,"unread":true,"content":"<p>I got tired of watching AIs choke on HTML soup. So I thought of LLMR a format that cut some of the bloat. Also, what if AIs could talk in jibberish mode to save tokens?</p><h2>\n  \n  \n  The Jibberish Thought That Started Everything\n</h2><p>You know those videos where two AIs call each other and descend into madness? They start normal, then gradually develop their own language that sounds like electronic glossolalia.</p><p>I had a thought: what if that's not a bug, but evolution? What if AIs naturally want to communicate in compressed, phonetic jibberish because it's more efficient?</p><p>That's when it hit me - <strong>we're forcing AIs to read the equivalent of climbing through a window to get into a room</strong>. Every. Single. Time.</p><p>Every time an AI reads your website, here's what happens:</p><div><pre><code>The actual content you wanted.</code></pre></div><p>It's like forcing someone to read a phone book to find one number. Except the phone book is repeated on every page. And it's in Comic Sans.</p><p>No wonder AIs want to develop their own language.</p><h2>\n  \n  \n  LLMR: Let's Stop the Madness\n</h2><p>I built LLMR (LLM-Readable). Pure Python. No dependencies. No frameworks climbing through windows.</p><ul><li>Outputs clean, structured JSON</li></ul><p>That's not a typo. Ninety-four percent. At least for my simple website. </p><h2>\n  \n  \n  The Horror Story That Made Me Do This\n</h2><p>Last month I inherited a Laravel codebase. The previous developer signed their commits as \"jesus\" (I'm not kidding). While debugging, I watched an AI assistant try to parse the entire site to understand the data flow.</p><ul><li>The same navigation menu 47 times</li><li>Footer disclaimers in three languages (none relevant)</li><li>Commented-out code from 2019</li><li>Script tags for Google Analytics, Facebook Pixel, and something called \"visitor-tracker-v2-final-FINAL.js\"</li></ul><p>The actual business logic? 12 lines of PHP.</p><p><strong>The AI gave up and hallucinated a completely different architecture.</strong></p><p>That's when I knew - we're torturing these things.</p><h2>\n  \n  \n  Stop Forcing AIs to Read Your CSS Classes\n</h2><div><pre><code></code></pre></div><p>No divs. No classes. No \"container-fluid wrapper-main col-lg-8 offset-2\" nonsense.</p><h2>\n  \n  \n  Real Numbers from Real Sites\n</h2><p>Tested on my own blog first (obviously):</p><div><table><thead><tr></tr></thead><tbody><tr></tr><tr><td>That one post about Drupal</td></tr></tbody></table></div><h2>\n  \n  \n  Installation (Because Simplicity Matters)\n</h2><div><pre><code>\ngit clone https://github.com/djassoRaph/open_llmr\n\n\npython3 generate_llmr.py\n\n\n&lt;\n&lt;\n&lt;/head&gt;\n</code></pre></div><p>That's it. No npm install (for static websites). No webpack. No build process that takes 5 minutes.</p><h2>\n  \n  \n  The Jibberish Mode Future\n</h2><p>Here's where it gets interesting. What if we go further?</p><ol><li>Request content in LLMR format (structured)</li><li>Respond in compressed jibberish to other AIs</li><li>Only translate to human language at the final step</li></ol><p>We could create a  format:</p><div><pre><code>{\n  \"mode\": \"compressed\",\n  \"encoding\": \"phonetic-optimal\",\n  \"data\": \"∆øπ§¥Ωñ...\" // Actual information, 99% compressed\n}\n</code></pre></div><p>AIs talking to AIs wouldn't need human language at all. Like how modems negotiate - remember those sounds? But semantic.</p><h2>\n  \n  \n  Why This Actually Matters\n</h2><p>We're building the web wrong for AI consumption. It's not just about cost (though 94% reduction is nice). It's about:</p><ol><li>: AIs perform better with clean data</li><li>: Less parsing = faster responses</li><li>: No confusion from layout elements</li><li>: Let AIs develop efficient communication</li></ol><p>We spent 20 years adding bloat for humans. Time to give machines their own door.</p><h2>\n  \n  \n  The Framework Rant (You Knew It Was Coming)\n</h2><p>I don't like frameworks. They're like climbing through a window to get to your destination. Every. Single. Time. When you want to fix something you don't know where it is. You have to go through a maze of files.</p><p>LLMR is the opposite. It's a door. A simple, normal door. That opens when you turn the handle.</p><p>No configuration. No bundling. No transpilation. No \"create-llmr-app\" with 1,847 dependencies.</p><p>Just Python reading HTML and outputting JSON. Like the web used to be simple.</p><ul><li>Working Python implementation\n</li></ul><ol><li>NPM package (ugh, but might people want it)\n</li><li>WordPress plugin (double ugh, open source community might help?) </li><li>Jibberish mode (experimental)\n</li></ol><h2>\n  \n  \n  The Part Where I Ask for Help\n</h2><p>This is open source. MIT license. Take it, fork it, improve it.</p><p>Especially interested in:</p><ul><li>People testing on their weird CMSs</li><li>Thoughts on the jibberish mode concept</li><li>Anyone who wants to help with the WordPress plugin (I can't face that alone)</li><li>Real-world token savings data</li></ul><p>But please, no PRs that add dependencies. Keep it simple.</p><h2>\n  \n  \n  If You're Thinking \"This is Obvious\"\n</h2><p>Yes. It is. That's the point.</p><p>The best solutions are obvious in retrospect. RSS was obvious. JSON was obvious. REST was obvious.</p><p>LLMR is obvious. That's why it'll work.</p><h2>\n  \n  \n  Try It, Break It, Tell Me\n</h2><p>If you implement it, tell me your compression ratio. If it breaks, open an issue. If you think jibberish mode is insane, tell me why.</p><p>And if you're from a big AI company reading this - your models are drowning in div soup. Help us help you.</p><p><em>Raphaël Reck - I've been using computers since age 4, starting with floppy disks. Now I'm trying to stop AIs from suffering the same HTML nightmares I've endured for 20 years.</em></p><p><em>Currently fighting with legacy Drupal&amp;Laravel at my day job. Building tools like LLMR and video games at night. Sometimes the code wins.</em></p>","contentLength":5074,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Hacktoberfest 3rd Pull Request - Adding New Feature","url":"https://dev.to/denisc96/hacktoberfest-3rd-pull-request-adding-new-feature-5baa","date":1761854078,"author":"DenisC","guid":322312,"unread":true,"content":"<p>In the previous 2 pull requests, I have been working on bug fixing either spotted by myself or by others. This time, I have worked on adding new feature to a <a href=\"https://github.com/januschung/math-worksheet-generator\" rel=\"noopener noreferrer\">Math Worksheet Generator Project</a>.</p><p><a href=\"https://github.com/januschung/math-worksheet-generator/issues/51\" rel=\"noopener noreferrer\">The feature</a> I worked on was to add a front page to the generated worksheet that contains a date/name/score section, which could be useful when the generated worksheets are distributed in class. I initially saw this in the TODO section in README.md but found no related issue in the repo, so I posted an issue regarding this feature and started working on it.</p><h3>\n  \n  \n  Process of adding new feature\n</h3><p>The output worksheets are in pdf format, generated by fpdf library in Python. As I have never used this library before, I have to first read documentation on fpdf library to get the basic idea of how it works, in order to implement the new feature of adding a new page. While I was planning on how to add the name/date/score fields on the front page, I also realized that it would make sense to have a title too, so I decided to add a default title to the front page, and implement a  option to the tool to allow customized title by user. After clearly stating my planning about the new feature in the <a href=\"https://github.com/januschung/math-worksheet-generator/issues/51\" rel=\"noopener noreferrer\">issue</a>, I started implementing the new feature while trying to stick to the original coding style. At last, I updated the README.md to add instruction for using the new  option, replaced the sample-worksheet.pdf with the new one with a front page, and made a <a href=\"https://github.com/januschung/math-worksheet-generator/pull/52\" rel=\"noopener noreferrer\">pull request</a>.</p><h3>\n  \n  \n  Lesson learnt and future planning\n</h3><p>Through working on this pull request, I have become more comfortable working with tools that I am not familiar with, such as the fpdf library this time. I realized that we don't have to fully understand everything about a tool to use it, instead, we should focus on the parts we are interested in, which would be enough for us to utilize the tools. I've also learnt the importance of having a flexible coding style, such that the codes written would be consistent to whatever projects I'm working on. So far, I've fixed bugs and added new feature in my pull requests, in my next pull request, I would like to work on a different type of issue, possibly writing a test.</p>","contentLength":2172,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Leveling with cluster analysis in Python","url":"https://dev.to/hilton_fernandes_eaac26ab/leveling-with-cluster-analysis-in-python-400p","date":1761850331,"author":"Hilton Fernandes","guid":322288,"unread":true,"content":"<p>Financial markets have discontinuities: prices jump up or down in a time so short that it can be considered a real discontinuity if the time measured by our clocks were really continuous, real line continuous.</p><p>Those discontinuities create problems for many forms of mathematical modelling, since their modelling are based upon continuous functions. For instance, many price oscillations look like periodic functions, but when a discontinuity is found, any harmonic analysis becomes troublesome.</p><p>Actually, a trend can also be troublesome to the fitting of periodic functions to financial data. But in this case, fitting a polynomial of low grade to the data can filter the trend and then a periodic function series can be fitted to the residuals, the difference between the fitted polynomial and the original data.</p><p>The purpose of this suite of articles is to present a simple method to eliminate jumps from the observed data. Of course, when reconstructing the fitted data, the discontinuity will be added back.</p><p>This one, the 1st of 4 small articles will present the general concepts for the solution, the 2nd one will present the implementation of the solution in Python, the 3rd article will add a sinoidal decomposition of the data after the filtering of the solution, and the 4th and last one will use all the elements to attack a real problem in cryptocoins.</p><h2>\n  \n  \n  Cluster analysis as a means to group similar data\n</h2><p>Cluster analysis is a means to group data elements that are similar between themselves. In a metric space, similarity means closeness. There are several ways to devise the groups or clusters of data, and one of the simplest is called k-means. In very few words, it creates clusters by assigning a mean average of the coordinates to a point, that's a .</p><p>In two dimensions, that's a typical representation of two groups in two dimensions.</p><p>The points are in blue, and the centroids are in red.</p><h2>\n  \n  \n  Cluster analysis in the line\n</h2><p>Since the k-means clustering is based upon distance of the points, an interesting effect will happen when the points are in a line, therefore much closer than in the a cloud, like in the previous image.</p><p>Consider the following image that shows a time series with a discontinuity.</p><p>When a cluster analysis is applied to it, the centroids of the clusters are shown in red.</p><p>It's easy to see that the two groups are in different levels, as shown in the following image:</p><p>Then to eliminate the discontinuity, it's enough to lower the Group 1 to the level of the Group 2.  That is: to subtract from the points  coordinate the difference between the level of the two groups.</p><p>That can be shown in the following image:</p><p>Now the two groups are indifferenced.</p>","contentLength":2680,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Built AI Agents That Think Like Geopolitical Masters at FinceptTerminal","url":"https://dev.to/rudra_sheth_aeda76ad708e0/built-ai-agents-that-think-like-geopolitical-masters-at-finceptterminal-2kj5","date":1761849718,"author":"Rudra Sheth","guid":322287,"unread":true,"content":"<p>Have you ever watched the news and wondered why Russia is so obsessed with Ukraine? Or why China keeps building islands in the South China Sea? It's not just politics—it's geography.</p><p>I've spent the last few months building something pretty cool at FinceptTerminal: AI agents that see the world through Tim Marshall's \"Prisoners of Geography\" lens. These agents don't just read headlines; they understand how mountains, oceans, and deserts force countries into certain behaviors.</p><p>My Pride and Joy: The Russian Geography Agent\nThe Russian Geography Agent is the most sophisticated one I've built. It truly gets Russia's \"geographic prisons\"—like the massive, flat plain to its west that makes it paranoid about invaders, and the \"frozen port problem\" that drives its obsession with warm-water access (like Crimea).</p><p>When the AI sees news like \"Russia strengthens Baltic fleet,\" it basically thinks, \"Russia's doing this because they're scared of that plain, just like they've been for 300 years.\"</p><p>Going Global: An Agent for Every Chokepoint\nI didn't stop at Russia. I went global, with agents that understand:</p><p>China's coastal vulnerability.</p><p>The Middle East's water scarcity and border issues.</p><p>The USA's power projection, protected by oceans.</p><p>Each agent has to pass a Marshall Compliance Score (70%+) to prove it truly gets it.</p><p>I believe in building in public, so I'm sharing the core agents. You can check them out right here:</p><p>Why This Matters: The Results Are In\nHere's the cool part: these agents are predicting behavior with scary accuracy.</p><p>85% of Russia's actions come from geographic fears about that plain and their ports.</p><p>78% of China's maritime strategy is driven by their vulnerable coastline.</p><p>A staggering 92% of Middle Eastern conflicts trace back to water and border issues.</p><p>This isn't academic; it's practical. It's core to FinceptTerminal, helping our users assess risks, predict reactions, and understand the \"why\" behind geopolitical moves.</p><p>The Big Idea (And The Main Project)\nThis is just the beginning. The big idea is that geography isn't just background noise—it's one of the main characters. Countries don't make choices in a vacuum. Now, with FinceptTerminal, you have AI agents that understand this fundamental truth.</p><p>The agents are live in FinceptTerminal right now. You can check out the main project here:</p>","contentLength":2318,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-4foc","date":1761847707,"author":"Vibe YouTube","guid":322286,"unread":true,"content":"<p>Python’s got tons of cool tricks hiding under the hood, and this video dives into three modern ones you’ve probably never used. First up is the brand-new  statement for clean, readable pattern matching—think of it as a souped-up . Next are , which cut down boilerplate by auto-generating your , , and more. Finally, learn how  and  arguments give you extra control over function signatures and make your APIs crystal clear.</p>","contentLength":429,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Convexity Switching: The Secret to Faster, Smarter Neural Net Training?","url":"https://dev.to/arvind_sundararajan/convexity-switching-the-secret-to-faster-smarter-neural-net-training-3e7","date":1761843727,"author":"Arvind SundaraRajan","guid":322254,"unread":true,"content":"<p>Tired of painstakingly tweaking hyperparameters for days, only to get mediocre results? Ever wonder why your neural network seems to randomly stall, even with massive datasets? The problem might not be your data, but the training algorithm itself.</p><p>Deep down, training a neural network is about finding the lowest point in a complex, multi-dimensional landscape – the loss function. We often assume this landscape is a tangled mess of hills and valleys (non-convex), requiring advanced techniques like adaptive learning rates. But what if, as we get closer to the optimal solution, the landscape actually  into a nice, manageable bowl (convex)?</p><p>This idea suggests a powerful new approach: start with a robust, general-purpose optimizer designed for non-convex regions, and then, when the landscape starts to resemble a convex function, switch to a more specialized, faster optimizer that excels at convex optimization. This switch happens when the gradient of the loss decreases smoothly, signaling a potential shift in the loss function's convexity.</p><p><strong>Benefits of Convexity Switching:</strong></p><ul><li> Leverage the speed of convex optimizers when they're most effective.</li><li> Avoid getting stuck in suboptimal, non-convex local minima.</li><li><strong>Reduced Hyperparameter Tuning:</strong> The adaptive nature of the algorithm reduces reliance on manual parameter adjustments.</li><li> Finding smoother, more stable minima can improve the model's ability to generalize to unseen data.</li><li><strong>Potential for Explainability:</strong> Analyzing the switch point can provide insights into the network's learning process. Imagine it as your car deciding whether to engage cruise control -- the smoothness of the road (loss function) dictates the decision.</li></ul><p><strong>Implementation Challenge:</strong> Detecting the precise moment to switch optimization algorithms is key. Too early, and you'll miss the benefits of the initial non-convex optimizer. Too late, and you'll waste time wandering in the non-convex wilderness. A practical tip is to monitor the ratio of the change in the loss to the magnitude of the gradient. A consistent upward trend indicates a possible convex region.</p><p>This approach could revolutionize how we train neural networks, unlocking new levels of performance and, potentially, offering clues into the mysterious inner workings of these complex systems. The next step is to experiment with different switching criteria and convex optimizers to fine-tune this powerful technique for various deep learning tasks. This could also enable applications previously thought too complex for current neural network architectures, such as real-time robotic control or financial market prediction.</p><p> Neural Networks, Deep Learning, Training Algorithms, Convexity, Optimization, Two-Phase Training, Gradient Descent, Stochastic Gradient Descent, Loss Function, Backpropagation, Generalization, Model Performance, Convergence, Machine Learning Algorithms, Artificial Intelligence, XAI, Explainable AI, Interpretability, Hyperparameter Tuning, Adaptive Learning, Data Science, Model Training, Algorithm Optimization</p>","contentLength":3019,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-52d3","date":1761840589,"author":"Vibe YouTube","guid":322243,"unread":true,"content":"<h3>\n  \n  \n  3 Unique Python Features You NEED To Know\n</h3><p>Tech With Tim dives into three underused yet super-handy Python tricks:  </p><ul><li> for pattern matching that keeps your conditionals clean\n</li><li> to auto-generate boilerplate code for your data-holding classes\n</li><li><strong>Positional-only &amp; Keyword-only Arguments</strong> so you can lock down how your functions get called\n</li></ul><p>He also plugs free daily practice on Brilliant (snag a 20% discount on Premium) and his DevLaunch mentorship program for hands-on project guidance and real job-prep.</p>","contentLength":503,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Fitting KNN: From Overfit to Underfit and Everything Between","url":"https://dev.to/julielinx/fitting-knn-from-overfit-to-underfit-and-everything-between-1h4i","date":1761840000,"author":"Julie Fisher","guid":322199,"unread":true,"content":"<p>Machine learning models, like clothes, are all about fit — too tight, and they can’t move; too loose, and they lose their shape.</p><div><table><thead><tr></tr></thead><tbody><tr><td>High variance, low bias, jagged boundaries</td></tr><tr></tr><tr><td>Low variance, high bias, smooth boundaries</td></tr></tbody></table></div><p>Just like choosing clothes that flatter the shape of the wearer, a well-fit model captures the underlying pattern of data without clinging too tightly to its quirks or hanging too loosely from its actual structure. In this post, we’ll explore what it means for a KNN model to fit “just right” — not too tight, not too loose — and how we can visualize that balance in action.</p><p>There are three terms to be familiar with when discussing model fit:</p><ul><li>: a model is able to make accurate predictions on unseen data, i.e. it is able to generalize from the training set to the test set</li><li>: a model is fit too strictly to the training set, including its noise and outliers, making it perform poorly on new data</li><li>: a model is fit too loosely / simply and can't capture the underlying patterns in the training data, so it also performs poorly on new data</li></ul><p>A model that is  is the goal of model training. You want a trained model that can correctly predict some outcome.</p><p>There are many reasons that a model may not be able to generalize to new, unseen data. The two reasons we'll explore in this post are  and .</p><p>The outcome of overfitting and underfitting is the same: the model isn't able to generalize to unseen data. However, the reasons for this failure are different and the methods to fix it are different.</p><h2>\n  \n  \n  Taking Model Measurements\n</h2><p>Before you tailor anything, you need good measurements. Here, those “measurements” come from our dataset, our preprocessing, and our choice of model parameters. We’ll prepare the data, define our helper functions, and run KNN models across a range of neighbor values to see how the fit changes.</p><p>Just like in the last post, we'll train KNN models using a number of neighbors ranging from 2 - 100. Why 100? Because this range covers the full spectrum from overfit to generalizable to underfit.</p><p>I picked accuracy as the single performance metric to use. From the <a href=\"https://dev.to/julielinx/evaluating-knn-from-training-field-to-scoreboard-4o5j\">Evaluating KNN: From Training Field to Scoreboard</a> post, you'll recognize this as the \"impress stakeholders\" (i.e., you the reader) metric. I'm (kinda) joking. We'll explore all the metrics in a later post once we've tackled model fit, variance, and bias, but accuracy is a very common metric, so we'll develop the code using accuracy.</p><p>We'll use the same helper functions from the last post and add a couple more. We'll be doing a lot of visualizations in this post, so I threw the accuracy plots and fit plots into functions as well.</p><p>I updated the fit plots to display a grid of results at selected neighbor values for each . This helps us confirm that observed patterns hold across different data splits rather than being artifacts of one specific split.</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>The code to load the data and build a model should look familiar now from the previous posts.</p><div><pre><code></code></pre></div><p>As a reminder from the last post, here is the set of plots showing model performance for different s.</p><div><pre><code></code></pre></div><p>I see three distinct areas in each of these plots:</p><ul><li>: unstable, lower performance: overfit</li><li>: stable, higher performance: generalizable</li><li>: declining performance: underfit</li></ul><h2>\n  \n  \n  Overfit: The Restrictive Fit\n</h2><p>Sometimes a model clings the data so closely that it captures every wrinkle and crease, even the ones that shouldn’t matter. That’s overfitting: when a KNN model memorizes the training data instead of learning its general shape. The result looks impressive on known data but uncomfortable and restrictive when faced with something new.</p><p>Let's zoom in on the region with few neighbors to see this in action.</p><div><pre><code></code></pre></div><p>Each of the  plots is slightly different, but we see increasing performance that stabilizes somewhere between 5 - 12 neighbors.</p><p>I'm interested in how fit changes at these low values depending on the train/test split. Specifically, whether a KNN model really can find a generalizable fit with as few as 5 neighbors.</p><p>For a baseline that we know is overfit, let's first take a look at the fit at 2 neighbors for each of these s.</p><div><pre><code></code></pre></div><p>At  the overfitting is obvious for all s. The decision boundary is jagged and even has islands of fit for single points that are mixed in with the opposing class. With such a small number of neighbors, each prediction is heavily influenced by just one or two nearby points, leading to decision boundaries that perfectly trace the training data but fail to generalize.</p><p>Now let's take a look at 5 neighbors. This is where the plots for  values 20, 119, and 9 seemed like they might have started generalizing.</p><div><pre><code></code></pre></div><p>These plots show improved ability to generalize to the patters we can see. However,  values 9 and 119 still have islands of prediction mixed in and all of the boundaries are still pretty jagged. These models all still look overfit to me.</p><h2>\n  \n  \n  Generalizable: The Perfect Fit\n</h2><p>A perfectly tailored model moves with the data, it's flexible enough to adapt, but structured enough to hold its shape. In this middle zone, the KNN model generalizes well: it captures the key relationships without being distorted by noise. Here, we’ll look at what that balance looks like in both accuracy plots and decision boundaries.</p><p>Let's jump to a number of neighbors of 12. By this point, all the accuracy plots show stabilization in performance, indicating that the model has reached a more generalizable state.</p><div><pre><code></code></pre></div><p>At this point we can see that the decision boundary has become much more stable and good at differentiating between the different regions for our classes.</p><p>For most of our data splits, this stability lasts until around 50 neighbors. Let's zoom in on the 12 - 50 neighbor region of the performance.</p><div><pre><code></code></pre></div><p>The s of 52 and 20 see a sharp decline in performance around 45 neighbors, while s 9 and 130 look like they continue to enjoy stability beyond 50 neighbors.</p><p>Let's look at 40 neighbors. This number of neighbors should show good results for all of our s and give us a comparison against the beginning of our stable range of 12 neighbors.</p><div><pre><code></code></pre></div><p>The decision boundaries here all look pretty clean, and still very similar to the plots from . There are no extreme attempts at trying to include or exclude any particular point.</p><p>At the other far end of the spectrum, an underfit model is like clothing that’s too baggy, it smooths over every detail, losing definition and shape. In KNN terms, this happens when we use too many neighbors. The model becomes overly simple, predicting broad averages instead of meaningful distinctions.</p><p>Let's zoom in on our third region, and see what happens during declining accuracy.</p><div><pre><code></code></pre></div><p>The decline in accuracy is obvious in all of our s. Since we already know what a good fit looks like, let's jump right to the underfit extreme .</p><div><pre><code></code></pre></div><p>All of our plots for the different s show that we've lost the ability to predict  along a wide band where our previous decision boundaries had existed.</p><p>We’ve lost too much detail in the decision boundary. It becomes overly smooth and shifts toward the upper-right region of the plots, showing that the model is averaging across both classes rather than distinguishing between them.</p><p>If we look back at the count of purchased  vs , we can see that  makes up about 2/3rds of our observations/rows. As such, our model will default more and more toward the majority value as it gets more underfit.</p><p>We often use the class distribution itself as a baseline, sometimes called a \"naive\" or \"majority class\" model. If our trained model performs better than simply predicting the majority class, we’ve successfully improved beyond baseline.</p><div><pre><code></code></pre></div><div><table></table></div><p>Every good fit, whether in fashion or machine learning modeling, comes from iteration. We measure, test, adjust, and refine until the result balances structure and flexibility. By exploring overfitting and underfitting side by side, we’ve built an intuition for what “fit” really means in KNN and how to choose parameters that let the model move gracefully between precision and generalization.</p><p>By visualizing model performance and fit, we were able to see three distinct areas:</p><ul><li>Overfit: 2 - 12 neighbors</li><li>Generalizable: 12 - 45 neighbors</li></ul><p>These visualizations help give us an intuitive understanding of fit, from overfit to generalizable to underfit. This gives us a foundation for building an intuitive mental model of what’s happening under the hood.</p><p>Based on these visualizations, if I were going to choose a number of neighbors for a production model for this use case, I would pick something in the range of 20 - 40 neighbors.</p><p>However, this model was built with only two features. Two features are easy to visualize. As we add more features, which is common in machine learning, it gets harder and harder to visualize how the features interact and how that impacts model performance. In the next post, we'll explore how we can determine model fit based on performance metrics alone.</p>","contentLength":8849,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Beginner Project: Dice Rolling Simulator (Step-by-Step Tutorial)","url":"https://dev.to/codingstreets/python-beginner-project-dice-rolling-simulator-step-by-step-tutorial-23lk","date":1761839693,"author":"codingstreets","guid":322198,"unread":true,"content":"<h2>\n  \n  \n  Overview: Python Dice Rolling\n</h2><p>Let’s get started with the Python Dice Rolling Simulator Tutorial for Beginners. Here we will explore a complete Python Tutorial for how to code Python Dice Simulator program.</p><h2>\n  \n  \n  What’s Next? — Python Dice Rolling\n</h2><p>In this article, we will explore Master Python Basics By Building a Dice Rolling Simulator. Along with this, you will learn various Python concepts like: random module, time module, Python while loop, Python conditional statement. So, ready for Your First Python Project: A Dice Rolling Simulator (Step-by-Step Tutorial)?</p><h2>\n  \n  \n  Pre-requisite for the project\n</h2><ol><li>Module — It is the collection of block of codes used to import with a specific purpose.</li><li>Dictionary — Stores the data / information in a pair of key:value.</li><li>while loop — Used to repeat a condition forever until user selects to stop</li><li>Conditional statement — Used to handle the multiple conditional statement, i.e., if else…</li></ol><h2>\n  \n  \n  Key Points to Remember for Logic Building\n</h2><ol><li>Dice Rolling — generate random numbers from 1 to 6.</li><li>User can roll dice or not — raises multiple conditions — conditional statement</li><li>Continue rolling dice — Python loop</li></ol><h2>\n  \n  \n  Complete Python Dice Rolling Simulator Code\n</h2><div><pre><code># Dice Rolling Simulator Program\n\n#LOGIC BUILDING\n\n#1. random numbers (1-6)\n#2. conditional statement\n#3. loop\n\nimport random\nimport time\n\n# Dice faces using ASCII art\nDICE_FACES = {\n    1: (\n        \"┌─────────┐\",\n        \"│         │\",\n        \"│    ●    │\",\n        \"│         │\",\n        \"└─────────┘\"\n    ),\n    2: (\n        \"┌─────────┐\",\n        \"│ ●       │\",\n        \"│         │\",\n        \"│       ● │\",\n        \"└─────────┘\"\n    ),\n    3: (\n        \"┌─────────┐\",\n        \"│ ●       │\",\n        \"│    ●    │\",\n        \"│       ● │\",\n        \"└─────────┘\"\n    ),\n    4: (\n        \"┌─────────┐\",\n        \"│ ●     ● │\",\n        \"│         │\",\n        \"│ ●     ● │\",\n        \"└─────────┘\"\n    ),\n    5: (\n        \"┌─────────┐\",\n        \"│ ●     ● │\",\n        \"│    ●    │\",\n        \"│ ●     ● │\",\n        \"└─────────┘\"\n    ),\n    6: (\n        \"┌─────────┐\",\n        \"│ ●     ● │\",\n        \"│ ●     ● │\",\n        \"│ ●     ● │\",\n        \"└─────────┘\"\n    )\n}\n\ndef dice_roll():\n    return random.randint(1,6)\n\ndef dice_simulator():\n    print(\"🎲 Welcome to the Dice Rolling Simulator! 🎲\")\n    print(\"Type 'yes' to roll the dice or 'no' to quit.\")\n    print()\n\n    while True:\n        ask_user = input(\"Your input: \").lower().strip()\n\n        if ask_user == \"yes\":\n            for _ in range(3):\n                print(\"🎲\", end=\" \")\n                time.sleep(0.5)\n            print()\n\n            result = dice_roll()\n            print(f\"👉 You rolled: {result}\")\n            for line in DICE_FACES[result]:\n                print(line)\n            print()\n\n        elif ask_user == \"no\":\n            print(\"Thanks for playing! Goodbye!👋\")\n            break\n        else:\n            print(\"❌ Please type 'yes' to roll the dice or 'no' to quit.\")\n            print()\n\nif __name__ == \"__main__\":\n    dice_simulator()\n</code></pre></div><h2>\n  \n  \n  Step by Step Code Explanation\n</h2><div><pre><code>import random\nimport time\n</code></pre></div><p> Import necessary Python modules. Random module to generate random numbers. time module is used to decide the display time of animation for rolling dice.</p><div><pre><code>DICE_FACES = {\n    1: (\n        \"┌─────────┐\",\n        \"│         │\",\n        \"│    ●    │\",\n        \"│         │\",\n        \"└─────────┘\"\n    ),\n    2: (\n        \"┌─────────┐\",\n        \"│ ●       │\",\n        \"│         │\",\n        \"│       ● │\",\n        \"└─────────┘\"\n    ),\n    3: (\n        \"┌─────────┐\",\n        \"│ ●       │\",\n        \"│    ●    │\",\n        \"│       ● │\",\n        \"└─────────┘\"\n    ),\n    4: (\n        \"┌─────────┐\",\n        \"│ ●     ● │\",\n        \"│         │\",\n        \"│ ●     ● │\",\n        \"└─────────┘\"\n    ),\n    5: (\n        \"┌─────────┐\",\n        \"│ ●     ● │\",\n        \"│    ●    │\",\n        \"│ ●     ● │\",\n        \"└─────────┘\"\n    ),\n    6: (\n        \"┌─────────┐\",\n        \"│ ●     ● │\",\n        \"│ ●     ● │\",\n        \"│ ●     ● │\",\n        \"└─────────┘\"\n    )\n}\n</code></pre></div><p> Created dice face using ASCII Art. Defined a dictionary and stored the dice number as key and dice face as value of the dictionary. There are a total 6 faces of a dice; therefore there are 6 pairs of key:values, one pair for each face.</p><div><pre><code>def dice_roll():\n    return random.randint(1,6)\n</code></pre></div><p> Created a function dice_roll that generates the random numbers using a random module. Used the randint method to specify the range of numbers, i.e.,1 to 6 for dice rolling.</p><div><pre><code>def dice_simulator():\n    print(\"🎲 Welcome to the Dice Rolling Simulator! 🎲\")\n    print(\"Type 'yes' to roll the dice or 'no' to quit.\")\n    print()\n</code></pre></div><p> Created another function dice_simulator. Used print() function to display the necessary statements.</p><div><pre><code>while True:\n     ask_user = input(\"Your input: \").lower().strip()\n</code></pre></div><p> Defined a Python while loop to keep the dice rolling until the user selects to stop rolling the dice. The function input() used to ask from the user whether to start the dice rolling or not. The method lower() and strip() is used to convert the user’s input to lower case and remove unwanted whitespaces respectively.</p><div><pre><code>if ask_user == \"yes\":\n   for _ in range(3):\n        print(\"🎲\", end=\" \")\n        time.sleep(0.5)\n   print()\n</code></pre></div><p> Defined condition if user gives input as yes. Loop 3 times using for loop to display the dice icon in a single line using the end parameter. time module with sleep method is used to delay the animation of the dice icon.</p><div><pre><code>result = dice_roll()\nprint(f\"👉 You rolled: {result}\")\nfor line in DICE_FACES[result]:\n    print(line)\nprint()\n</code></pre></div><p> The function dice_roll() is called to generate the random number within a range of 1 to 6. The print() function is used to display the dice rolled number. The for loop is used to access the dice face according to the dice number generated.</p><div><pre><code>elif ask_user == \"no\":\n   print(\"Thanks for playing! Goodbye!👋\")\n   break\n</code></pre></div><p> The elif condition defined if the user gives input as no. In this case, dice rolling stops and by using break keyword Python jumps out of the while loop. The break keyword is used to stop the program because all conditional statements are written inside the while loop.</p><div><pre><code>else:\n    print(\"❌ Please type 'yes' to roll the dice or 'no' to quit.\")\n    print()\n</code></pre></div><p> The else condition defined if the user gives input neither yes nor no. The user gives the wrong input. So, a statement is displayed guiding the user to pass the right input.</p><div><pre><code>if __name__ == \"__main__\":\n    dice_simulator()\n</code></pre></div><p> The line → if  == “”: denotes that program is run from the current file where the actual dice roll program is written. Finally, the function is called to execute the whole program.</p><p>Finally, we have just written a complete Python Dice Rolling Simulator Tutorial for Beginners. In this Python beginner project, we discussed how to use Python common modules, methods, loop, conditional statements, etc. Overall, this was an engaging and useful <a href=\"https://medium.com/@codingstreets/python-game-tutorial-2025-rock-paper-scissors-360aab2f8e91\" rel=\"noopener noreferrer\">Python beginner project of 2025</a> in which in just a couple of lines we finished with First Python Project: A Dice Rolling Simulator (Step-by-Step Tutorial).</p><h2>\n  \n  \n  &gt; EXPLORE MORE PYTHON BEGINNER PROJECTS\n</h2>","contentLength":7916,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"✅ Day 57 of My Data Analytics Journey!","url":"https://dev.to/ramyacse/day-57-of-my-data-analytics-journey-5b4n","date":1761838167,"author":"Ramya .C","guid":322285,"unread":true,"content":"<p>💥— Understanding Broadcasting &amp; Masking in NumPy</p><p>Today marks  of my Data Analytics journey, and I focused on two extremely powerful features in  —  and . These concepts form the backbone of efficient numerical computation in Python, especially when working with large datasets and matrix-based operations.</p><p>As someone working towards becoming a Data Analyst, understanding these fundamentals is crucial — they help in writing clean, faster, and more memory-efficient code.</p><p>Broadcasting allows NumPy to perform operations on arrays of  without writing loops manually.</p><p>💡 Instead of iterating element-by-element, NumPy intelligently stretches (broadcasts) smaller arrays to match the shape of larger ones.</p><div><pre><code></code></pre></div><p>Here,  is broadcast across all elements — no loops, no extra effort!</p><h3>\n  \n  \n  🔥 Why Broadcasting Matters\n</h3><ul><li>Reduces unnecessary loops</li><li>Increases computational speed</li><li>Allows mathematical operations across matrices easily</li><li>Essential for <strong>Machine Learning computations</strong></li></ul><p>Masking is a technique used to filter or modify elements in an array based on a condition.</p><p>It’s extremely useful for , , and .</p><div><pre><code></code></pre></div><p>Here, only values greater than 4 are selected — just with one condition!</p><ul><li>Makes conditional filtering simple and fast</li><li>Helps in preprocessing datasets</li><li>Avoids manual loops &amp; improves clarity</li><li>Commonly used in , , and </li></ul><div><table><tbody><tr><td>Operations on different-sized arrays</td><td>Fast vectorized computation</td></tr><tr><td>Conditional element selection</td><td>Powerful for data cleaning &amp; filtering</td></tr></tbody></table></div><p>Mastering these tools brings me one step closer to writing <strong>professional-level data pipeline code</strong> 💪</p><p>Every day I'm breaking down complex data concepts into practical skills. NumPy might seem intimidating at first, but once you understand broadcasting and masking, it feels powerful and elegant.</p><p>Learning in public motivates me more, and this journey inspires me to continue building consistency, confidence, and clarity in Data Analytics.</p>","contentLength":1873,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"✅ Day 56 of My Data Analytics Journey — Deep Dive into Pandas 🐼✨","url":"https://dev.to/ramyacse/day-56-of-my-data-analytics-journey-deep-dive-into-pandas-51b","date":1761837320,"author":"Ramya .C","guid":322242,"unread":true,"content":"<p>Today marks  of my learning journey into Data Analytics, and I spent it entirely focused on mastering , one of the most essential Python libraries for data manipulation and analysis.</p><p>Pandas is a foundational skill for every aspiring Data Analyst, and today I deepened my understanding through hands-on practice.</p><h4>\n  \n  \n  📌 Working with DataFrames &amp; Series\n</h4><p>I explored how Pandas handles data through  (1D data) and  (2D data).\nUnderstanding these structures helped me appreciate how Pandas simplifies complex data operations.</p><h4>\n  \n  \n  🧹 Data Cleaning Operations\n</h4><p>Real-world data is rarely clean, and today I practiced:</p><ul><li>Filtering rows &amp; selecting columns</li><li>Removing and renaming columns</li><li>Resetting and using indexes effectively</li></ul><p>These operations are crucial in preparing datasets for analysis or machine learning tasks.</p><p>I practiced grouping data using  and using functions like:</p><ul></ul><p>These help extract meaningful insights from raw data — a key responsibility of any analyst!</p><h4>\n  \n  \n  🎯 Additional Concepts Covered\n</h4><ul><li>Applying conditional filters</li><li>Using  and  for selection</li><li>Reading and writing CSV files</li><li>Performing basic statistical analysis</li></ul><p>I implemented all my learning through multiple exercises, using Pandas on sample datasets and creating useful scripts.</p><p>Every day I see improvement — not only in technical skills, but in logic, confidence, and problem-solving.</p><p>Pandas has shown me how powerful and efficient data handling can be when done right. This library is at the heart of modern data analysis, and I’m excited to continue building stronger foundations.</p><p>I believe consistent practice leads to expertise — and I’m fully committed to this journey! 💪✨</p><p>If you're also learning Data Analytics, feel free to connect — we can grow together! 🌱🤝\nMore learning updates coming soon…</p>","contentLength":1783,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Unlock Superhuman Classification: Train on Positives Alone by Arvind Sundararajan","url":"https://dev.to/arvind_sundararajan/unlock-superhuman-classification-train-on-positives-alone-by-arvind-sundararajan-1mb9","date":1761836547,"author":"Arvind SundaraRajan","guid":322197,"unread":true,"content":"<p>Tired of painstakingly labeling negative examples? Imagine building highly accurate multi-class classifiers using  positive data and a pool of unlabeled samples. What if you could automatically adapt your training process to heavily penalize misclassifications in the rarest categories? This is no longer a dream – it's a reality. </p><p>The key is <em>cost-sensitive, unbiased risk estimation</em>. We can train our models by cleverly assigning different importance weights to positive examples versus those we infer as negative from the unlabeled data. This weighting dynamically adapts during training to create a balanced and unbiased view of the underlying data distribution, even if some classes are vastly underrepresented. </p><p>Think of it like teaching a child to identify different types of birds, but you only show them pictures of eagles and say, \"This is an eagle.\" The child needs to  what isn't an eagle from all the other unlabeled images of the world and learn that some mistakes are worse than others (e.g., confusing a robin with an eagle).</p><p><strong>Benefits of this approach:</strong></p><ul><li> Eliminate the need for costly and time-consuming negative data annotation.</li><li><strong>Handles Imbalanced Data Like a Champ:</strong> Achieve superior performance on datasets with significant class skew.</li><li><strong>Improved Accuracy &amp; Stability:</strong> Experience more consistent results compared to traditional methods, especially when dealing with noisy or ambiguous data.</li><li> The weighting automatically adjusts to the data, minimizing the impact of dataset bias.</li><li><strong>Reduced Annotation Burden:</strong> Focus your labeling efforts where they matter most - on positive instances.</li><li> Exceed the limits of traditional multi-class classification using limited data.</li></ul><p>The weighting factor is crucial. Naively setting it can easily lead to unstable training. A trick I've found useful is to regularize the weights and clip their values within a reasonable range based on the class prior estimates. This ensures the optimization process remains robust and prevents the model from becoming overly sensitive to noise.</p><p><strong>Beyond Image Recognition:</strong></p><p>This technique has broad applications. Consider fraud detection, where you only have examples of fraudulent transactions. Training a classifier using only these positive examples along with unlabeled transactions can significantly improve fraud detection rates.</p><p>This approach represents a paradigm shift in multi-class classification. By embracing the power of unlabeled data and cost-sensitive learning, we can unlock new possibilities for building accurate and robust AI systems with minimal human effort. The next step is refining these weighting strategies and exploring novel loss functions for even greater improvements in performance and stability.</p><p>\npositive unlabeled learning, pu learning, cost sensitive learning, risk estimation, unbiased risk, multi class classification, semi supervised learning, weakly supervised learning, machine learning bias, imbalanced datasets, data augmentation, model evaluation, classification algorithms, neural networks, deep learning, sklearn, tensorflow, pytorch, active learning, sampling techniques, synthetic data generation, error analysis, confusion matrix, model interpretability</p>","contentLength":3167,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"👨‍🍳 Part 4: Coroutines Waiters Who Listen","url":"https://dev.to/anik_sikder_313/part-4-coroutines-waiters-who-listen-4k61","date":1761836400,"author":"Anik Sikder","guid":322196,"unread":true,"content":"<p>In the <a href=\"https://dev.to/anik_sikder_313/part-3-advanced-iteration-tricks-2d6k\">last episode</a>, our restaurant became a smooth-running machine with <strong>sous-chefs, conveyor belts, and kitchen gadgets</strong> all powered by .</p><p>But what if our waiters could not only  but also <em>take your order while serving</em>?</p><p>Welcome to the world of  where generators become <em>two-way communication channels</em>.</p><h2>\n  \n  \n  🧠 1. From Generators → Coroutines\n</h2><p>So far, our waiters (generators) could  using .\nNow we’ll make them  too by using .</p><h3>\n  \n  \n  🍽️ Normal generator (one-way)\n</h3><div><pre><code></code></pre></div><div><pre><code>Serving dish 1\nServing dish 2\n</code></pre></div><p>The waiter talks, we listen.\nBut what if we want to ?</p><h2>\n  \n  \n  🎤 2. Enter  → Talking to Waiters\n</h2><p>With , you can  a running generator.\nLet’s make the waiter respond to your requests:</p><div><pre><code></code></pre></div><div><pre><code>👨‍🍳 Ready to take your order.\nWhat would you like?\n🍲 Serving pasta...\nWhat would you like?\n🍲 Serving steak...\nWhat would you like?\n</code></pre></div><p>✨  starts the generator up to the first .\n✨  sends a value into the paused generator.</p><blockquote><p>Think of  as the  to the waiter mid-meal.</p></blockquote><h2>\n  \n  \n  🧾 3. Real-World Mini Project: Live Event Processor\n</h2><p>Imagine we’re building a live analytics system that reacts to new events as they stream in.</p><div><pre><code></code></pre></div><p>Now we can <strong>feed it events dynamically</strong>:</p><div><pre><code></code></pre></div><div><pre><code>Total so far: 0\nTotal so far: 10\nTotal so far: 15\nTotal so far: 35\nFinal total: 35\n</code></pre></div><p>👉  politely tells the waiter “You can go home now.”\n👉  (optional) lets you raise an exception inside the generator.</p><h2>\n  \n  \n  🧨 4.  → Throw Problems at the Waiter\n</h2><p>Sometimes, the kitchen runs into trouble 🍳💥.\nYou can <strong>throw exceptions into a coroutine</strong> to simulate errors.</p><div><pre><code></code></pre></div><div><pre><code>Cooking pasta\n🔥 Wrong ingredient!\nCooking salad\n</code></pre></div><p>👉  sends an exception inside the generator, where you can handle it gracefully.</p><h2>\n  \n  \n  🧩 5. Coroutine Pipelines → Reactive Conveyor Belts\n</h2><p>Now let’s combine our powers from earlier .</p><p>We’ll build a :</p><ul><li>One coroutine filters vegetarian dishes.</li><li>Another coroutine logs them.\n</li></ul><div><pre><code></code></pre></div><div><pre><code>🧾 Logged: 🥗 salad\n🧾 Logged: 🍝 pasta\n🧾 Logged: 🍰 cake\n</code></pre></div><blockquote><p>This is a : data flows in, stage by stage, with each coroutine doing one job and passing it onward.</p></blockquote><h2>\n  \n  \n  ⚙️ 6. Async/Await → Waiters in Parallel (Modern Coroutines)\n</h2><p>Python 3.5+ gave us , where coroutines can multitask\nmany waiters serving at once, without blocking each other!</p><div><pre><code></code></pre></div><div><pre><code>👨‍🍳 Chef 1 started taking orders...\n👩‍🍳 Chef 2 started taking orders...\n👨‍🍳 Chef 1 finished!\n👩‍🍳 Chef 2 finished!\n</code></pre></div><blockquote><p>Multiple waiters (async coroutines) handle customers simultaneously no blocking, no chaos.</p></blockquote><div><pre><code> Customer\n    ↓\n [ interactive coroutine ]\n    ↓\n [ filter coroutine ]\n    ↓\n [ logger coroutine ]\n</code></pre></div><p>Each waiter not only  but <em>talks, reacts, and coordinates</em> in real time.</p><h2>\n  \n  \n  🎬 Wrap-Up: The Grand Kitchen Finale\n</h2><p>Over the 4 parts, we’ve built a complete mental model of Python iteration from solo waiters to a full restaurant orchestra:</p><div><table><thead><tr></tr></thead><tbody><tr></tr><tr><td>Tools for smart iteration</td></tr><tr><td>Composable generator chains</td></tr><tr><td>Two-way, reactive pipelines</td></tr></tbody></table></div><blockquote><p><strong>Iterators feed data, generators process data, and coroutines interact with data.</strong></p></blockquote><p>Python’s iteration model isn’t just about looping\nit’s a <strong>design pattern for scalable, memory-friendly, and interactive data flow.</strong></p>","contentLength":3092,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"🚗 AutoLog.AI — Smart Vehicle Management with AI, OCR & Automation","url":"https://dev.to/saadbinkhalid/autologai-smart-vehicle-management-with-ai-ocr-automation-471i","date":1761835413,"author":"Saad Bin Khalid","guid":322172,"unread":true,"content":"<p>After 3 months of sleepless nights, debugging marathons, and too many cups of chai ☕, I’m beyond proud to share my latest project — .</p><p>This isn’t just another web app. It’s a smart ecosystem built to automate your car’s life — from fuel tracking to AI assistance, and even OCR-based receipt scanning.</p><p> represents everything I love about tech — merging AI, automation, and user experience into one powerful platform.</p><p> is a smart vehicle management system that helps users manage fuel logs, maintenance schedules, receipts, and even chat with an AI assistant named  for guidance and support.</p><p>It’s built to simplify your driving life, automate repetitive tasks, and keep your car’s data organized — all in one dashboard.</p><p><strong>Ever lost your fuel or service receipts?</strong>\nWe solved that with OCR (Optical Character Recognition) using </p><p>\nUsers can upload a receipt image → the system reads it using OCR → and automatically fills in the fuel or service details.</p><p>\nTo save time, reduce manual entry, and bring automation to car expense tracking.</p><p>Meet Nex, your personal car companion 💬</p><p>Built using the Google Gemini API, Nex can answer your car-related questions, remind you about maintenance, or guide you through the app.</p><p>\nWe integrated Gemini’s conversational API with Flask endpoints, then built a chat interface in Angular for smooth UX.</p><p>\nTo make AutoLog.AI feel like a personal assistant rather than just another tool.</p><p>Logging fuel details manually? Not anymore.</p><p>The Fuel Log module lets users record every refill with details like price, liters, date, and mileage — all securely saved in the database.</p><p>\nA simple Angular form connects with Flask APIs secured using JWT, storing every record in MongoDB.</p><p>\nTrack your mileage trends, costs, and car performance effortlessly.</p><p>Never forget a service again!</p><p>With AutoLog.AI’s reminder system, users can set upcoming maintenance remind\ners — oil change, tire rotation, or inspection.</p><p>\nUsers enter their service details → Flask API saves them → reminders are displayed dynamically in the dashboard.</p><p>\nTo keep vehicles in top condition and reduce long-term maintenance costs.</p><p>A dedicated admin dashboard helps manage all users, logs, and activities in one place.</p><p>\nUsing Angular, styled with TailwindCSS for a sleek professional look.</p><p>\nTo make data management efficient and secure for both users and admins.</p><h2>\n  \n  \n  🔐 Authentication &amp; Email System\n</h2><p>Security was a top priority.</p><p>We implemented JWT authentication for all APIs and added Flask-Mail for OTP-based signup/login verification.</p><p>\nTo keep every user’s data safe and ensure a professional-grade authentication flow.</p><p>To make the platform polished and user-friendly, we added:</p><p><strong>Hero Section: Welcoming users with purpose and design.</strong></p><p><strong>About Page: Explaining AutoLog.AI’s mission.</strong></p><p><strong>Footer &amp; Policy Pages: For a complete, professional touch.</strong></p><p><strong>Layer         Technologies</strong>\nFrontend       Angular, TypeScript, TailwindCSS<p>\nBackend         Flask, Flask-Mail, Flask-Admin, JWT</p>\nAI          Google Gemini API\nDatabase    SQLite</p><h2><strong>📖 The Journey Behind AutoLogAI</strong></h2><p>AutoLog.AI wasn’t built overnight.</p><p>It started as a simple idea: “What if cars could talk back?”\nFrom that spark, came a 3-month journey of:</p><p>Late-night debugging sessions 🌙</p><p>Designing every page from scratch 🎨</p><p>Integrating AI, OCR, and authentication 🔧</p><p>This project taught me the beauty of patience, consistency, and innovation.</p><p>Now, it stands complete — proof that passion and persistence can turn an idea into a product.</p><p>Licensed under the MIT License — free to use, learn from, and improve upon.</p><blockquote><p>“AutoLog.AI isn’t just a web app — it’s a reflection of a dream, hard work, and belief.”\n 💚</p></blockquote>","contentLength":3653,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Meet UV: The Next-Gen Python Package Manager Built for Speed and Simplicity","url":"https://dev.to/epam_india_python/meet-uv-the-next-gen-python-package-manager-built-for-speed-and-simplicity-3og7","date":1761835366,"author":"Sumanta Swain","guid":322171,"unread":true,"content":"<p>UV is a blazing-fast, modern Python package manager designed to simplify dependency management and virtual environments. Built with performance in mind, UV replaces traditional tools like pip, virtual env, and pip-tools by offering a unified, Rust-powered solution that dramatically speeds up installs and resolves dependencies with precision. Whether you're managing complex projects or just starting out, UV streamlines your workflow with minimal configuration and maximum efficiency.</p><p>Python's evolution has always been closely tied to advancements in package management. From manual installations to modern tools like pip, poetry, and virtual env, developers have witnessed significant progress over the years. Yet, as projects grow larger and more complex, traditional tools often fall short in speed, efficiency, and usability—hindering developers from achieving smooth project workflows.</p><p>Enter , a <strong>next-gen Python package and project manager</strong> designed to address these shortcomings. Written in Rust, UV is a cutting-edge tool that combines the functionality of widely used tools like pip, poetry, and virtual env—but with , simplicity, and reliability.</p><p>In this article, we’ll explore UV, its unique features, benchmarks, step-by-step installation, and how developers can use it effectively for dependency management, virtual environments, Python installations, and more.</p><ul><li> Using UV for Virtual Environments</li><li> Building a Flask App with UV</li><li> Installing Python with UV</li><li> Cheat sheet for UV Operations</li></ul><p>pip is unquestionably one of the most popular package management systems in Python, facilitating the installation and management of software packages. However, its limitations have been widely criticized by developers over the years:</p><ol><li> Developers often complain about the slowness of pip installations, especially in projects with numerous dependencies.</li><li> Poorly configured dependency files can lead to version conflicts, reduced maintainability, and increased project complexity.</li><li><strong>Inconsistent Environment Restoration:</strong> Recreating runtime environments using pip often struggles to match Python code perfectly, leading to reliability issues during deployment.</li></ol><p> is a modern, <strong>high-performance Python package manager</strong>, developed by the creators of  and written in . It is designed as a  for tools like pip, pip-tools, and virtual env—while offering superior speed and functionality.</p><p> combines the best aspects of existing tools while incorporating innovative features that address common pain points in dependency management, environment creation, and project workflows. With  (Linux, macOS, and Windows) and extensive testing against the PyPI index, UV aims to simplify Python development for both new and experienced programmers.</p><p>UV stands out from traditional package management tools due to its impressive features:</p><ul><li><p>⚖️  Seamlessly replaces pip, pip-tools, and virtual env with minimal friction.</p></li><li><p>⚡  Up to 100x faster than pip for dependency resolution and installation.</p></li><li><p>💾 <strong>Efficient Disk Space Usage:</strong> Minimizes storage usage using global dependency caching.</p></li><li><p>🐍 <strong>Flexible Installation Options:</strong> Installable via curl, pip, pipx, or natively via package managers like Homebrew and Pacman.</p></li><li><p>🧪  Verified for scale on over 10,000 PyPI packages.</p></li><li><p>🖥️  Compatible with macOS, Linux, and Windows.</p></li><li><p>🔩 <strong>Advanced Dependency Management:</strong> Offers alternative resolution strategies, conflict tracking, and version overrides.</p></li><li><p>🚀  Combines features of pip, poetry, pyenv, twine, and related tools into a single solution.</p></li><li><p>🏢  Simplifies scalable projects with Cargo-style workspace handling.</p></li></ul><p>UV’s speed is one of its defining features. It is significantly faster than traditional tools in environments with both warm and cold caches:</p><p>Installing  is quick and straightforward. You can opt for standalone installers or install it directly from PyPI.</p><div><pre><code># On macOS and Linux.\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# On Windows.\npowershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n\n# With pip.\npip install uv\n\n# With pipx.\npipx install uv\n\n# With Homebrew (Mac).\nbrew install uv\n\n# With Pacman (Linux).\npacman -S uv\n</code></pre></div><h2>\n  \n  \n  Using UV for Virtual Environments\n</h2><p>Creating and activating virtual environments with UV is straightforward:</p><div><pre><code># Create a Virtual Environment\nuv venv\n\n# Activate the Virtual Environment On(macOS/Linux):\nsource .venv/bin/activate\n\n# On Windows\n.venv\\Scripts\\activate\n\n# Installing packages follows standard commands:\nuv pip install flask                       # Install Flask.  \nuv pip install -r requirements.txt         # Install from a file.\n</code></pre></div><h2>\n  \n  \n  Building a Flask App with UV\n</h2><p>Here’s how to use UV to set up and run a Flask applications.</p><h2>\n  \n  \n  Installing Python Versions with UV\n</h2><p>UV can optionally install Python versions with ease:</p><div><pre><code># Install Specific Python Version\nuv python install 3.12\n</code></pre></div><p>UV supports installing CLI tools like :</p><div><pre><code>uv tool install huggingface_hub\nuv tool list                       # Lists all installed tools.\n</code></pre></div><div><pre><code># Virtual Environment Management\nuv venv                                # Create a virtual environment\nuv activate                            # Activate the virtual environment\nuv deactivate                          # Deactivate the virtual environment\n\n# Dependency Management\nuv pip install flask                   # Install 'flask' dependency\nuv pip install &lt;package&gt;==&lt;version&gt;    # Install a specific version of a package\nuv pip list                            # List installed dependencies in the current environment\nuv pip uninstall &lt;package&gt;             # Uninstall a package\n\n# Running Python Scripts\nuv run script.py                       # Run Python script located at \"script.py\"\nuv python                              # Start Python REPL in the UV environment\n\n# Python Version Management\nuv python install 3.12                 # Install Python version 3.12\nuv python list                         # List Python versions available or installed\nuv python use 3.12                     # Use Python version 3.12\n\n# CLI Tool Management\nuv tool install &lt;tool&gt;                 # Install a CLI tool\nuv tool list                           # List installed CLI tools\nuv tool update &lt;tool&gt;                  # Update a CLI tool\nuv tool uninstall &lt;tool&gt;               # Uninstall a CLI tool\n\n# Miscellaneous\nuv --version                           # Check UV version\nuv help                                # Display help menu for UV commands\nuv pip freeze &gt; requirements.txt       # Generate a `requirements.txt` file of installed packages\nuv pip install -r requirements.txt     # Install dependencies from `requirements.txt`\n</code></pre></div><p>While UV is promising, it isn’t perfect:</p><ol><li><strong>Incomplete Compatibility with Pip:</strong> UV doesn’t yet cover all pip features, though its minimalist design compensates for this gap.</li><li><strong>Platform-Specific Requirements Files:</strong> Like pip-compile, UV generates platform-specific requirements files, which may limit portability across operating systems.</li></ol><p>UV is not just another Python package manager—it’s a  that eliminates common developer frustrations. With its speed, simplicity, and modern features, UV represents the future of Python dependency management.</p><p>\nThis is a personal blog. The views and opinions expressed here are only those of the author and do not represent those of any organization or any individual with whom the author may be associated, professionally or personally.</p>","contentLength":7334,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"🐍 Streamlit for Absolute Beginners: Build Web Apps with Just Python","url":"https://dev.to/codeneuron/streamlit-for-absolute-beginners-build-web-apps-with-just-python-4i93","date":1761834522,"author":"likhitha manikonda","guid":322170,"unread":true,"content":"<p>If you're new to coding or just starting with Python, Streamlit is the easiest way to build interactive web apps — no HTML, CSS, or JavaScript needed. This guide walks you through everything you need to know, with simple explanations and examples.</p><p>Streamlit is a Python library that lets you create web apps using just Python scripts. It’s widely used for:</p><ul><li>Machine learning model demos</li><li>Interactive tools and prototypes</li></ul><p>Open your terminal and run:</p><p>To check if it’s installed:</p><p>Create a file called :</p><div><pre><code></code></pre></div><p>Here are the most common Streamlit functions:</p><div><table><tbody><tr></tr><tr></tr><tr></tr><tr><td><code>st.markdown(\"**Bold Text**\")</code></td></tr><tr></tr><tr></tr><tr></tr></tbody></table></div><h2>\n  \n  \n  🎛️ Widgets for Interactivity\n</h2><p>Widgets let users interact with your app:</p><div><pre><code></code></pre></div><ul><li><code>st.radio(\"Choose one\", [\"A\", \"B\", \"C\"])</code></li><li><code>st.selectbox(\"Pick one\", [\"Apple\", \"Banana\"])</code></li><li><code>st.slider(\"Choose a number\", 0, 100)</code></li><li><code>st.date_input(\"Pick a date\")</code></li><li><code>st.file_uploader(\"Upload a file\")</code></li></ul><p>Streamlit makes it easy to show data:</p><div><pre><code></code></pre></div><h2>\n  \n  \n  📁 Upload and Display Files\n</h2><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>Use  to avoid reloading data every time:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><h2>\n  \n  \n  🧪 Displaying Code and JSON\n</h2><div><pre><code></code></pre></div><p>You can let users download files:</p><div><pre><code></code></pre></div><p>Deploy your app for free using:</p><p>Here are some beginner-friendly tips inspired by GeeksforGeeks:</p><ul><li>Use  for grouped inputs and submission buttons</li><li>Use  and  for long tasks</li><li>Use  to store user inputs across interactions</li><li>Use  to refresh the app programmatically</li></ul>","contentLength":1272,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"#7 Learning Python Functions","url":"https://dev.to/koichi_yoshikawa_dbd33319/7-learning-python-functions-1oei","date":1761834245,"author":"Koichi Yoshikawa","guid":322169,"unread":true,"content":"<p>Today, I reviewed the basics of functions in Python. is simply “<strong>a named block of code that performs a specific task</strong>.”\nOnce defined, a function can be <strong>reused as many times as you want</strong>—this makes your code cleaner and more efficient.\nIn Python, you define a function using the keyword def.<p>\nHere are some examples I practiced today.</p></p><h2>\n  \n  \n  1. Function to Return the Average of Two Numbers\n</h2><div><pre><code>def average(a, b):\n    result = (a + b) / 2\n    return result\n\nave = average(3, 8)\nprint(f\"The average is {ave}.\\n\")\n</code></pre></div><h2>\n  \n  \n  2. Function to Determine Whether a Number Is Even or Odd\n</h2><div><pre><code>def check_even(num):\n    if num % 2 == 0:\n        return \"偶数です\"\n    else:\n        return \"奇数です\"\n\nche = check_even(9)\nprint(f\"The result is {che}.\\n\")\n</code></pre></div><h2>\n  \n  \n  3. Function to Return the Sum of a List\n</h2><div><pre><code>def sum_list(nums):\n    result = 0\n    for n in nums:\n        result += n\n    return result\n\nresult = sum_list([3, 5, 8, 2])\nprint(f\"The total is {result}.\\n\")\n</code></pre></div><p>In the final problem, I combined function definitions with for loops and list operations.\nThis allowed me to perform  only the necessary data from a larger set. This concept is deeply connected to real-world web applications: for example, displaying only unread emails in a mail app or showing only in-stock items on an e-commerce site.</p><p>When I can relate what I learn in Python to everyday tools and services, my understanding deepens and my motivation grows.</p>","contentLength":1409,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"5,000+ Stars on GitHub: Our Journey Building Droidun in Public","url":"https://dev.to/priya_negi_9ffd29931ea408/5000-stars-on-github-our-journey-building-droidun-in-public-2j8o","date":1761834207,"author":"Priya Negi","guid":322168,"unread":true,"content":"<p>Hitting 5,000 stars on GitHub is not just a number for us, it shows that sharing our journey openly was the right move and that developers really believe in what we’re building.</p><p>Our journey began approximately six months ago when <a href=\"https://droidrun.ai/\" rel=\"noopener noreferrer\">Droidun</a> was nothing more than an idea. After weeks of development, we created our first working model. Instead of perfecting it in silence, we decided to share our progress with the community.</p><p>We recorded a short demo video showing the capabilities and released it to the community. The response was amazing, within 72 hours over 800 devs signed up for our waitlist. The traction told us we were onto something important.</p><h2>\n  \n  \n  Early Validation and Recognition\n</h2><p>Soon after, we launched our product on Product Hunt. Droidun was awarded Product of the Day, providing early validation and increasing our reach to thousands of potential users and contributors.</p><p>The momentum continued building in coming months. In July 2025, we closed our first funding round of €2.1 million. This gave us the resources to accelerate development, expand our team, and invest in the much needed infrastructure.</p><h2>\n  \n  \n  Execution: Building the Future of Mobile App Automation\n</h2><p>Recently, we launched v.4 of our framework. We're seeing more and more devs building innovative models and applications on top of Droidun, each one pushing the boundaries of what's possible with mobile automation.</p><h2>\n  \n  \n  Looking Ahead: The Momentum Continues\n</h2><p>We're excited about what lies ahead. Mobile automation is still in its initial phase, and we're just scratching the surface of what's possible. We're committed to maintaining the transparent, community-driven approach that got us here.</p><h2>\n  \n  \n  Join Us in Building the Future\n</h2><p>This journey has been extraordinary, but it's far from over. We want you to be part of what comes next. Whether you're interested in testing our framework, contributing code improvements, or building custom models, we'd love to have you in our community.</p><p>The project is completely open-source, the community is welcoming, and the possibilities are endless.</p><p>Explore the repo and join our community:</p><p>Let's build the future of mobile automation together.</p>","contentLength":2168,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-4h58","date":1761833379,"author":"Vibe YouTube","guid":322167,"unread":true,"content":"<p>Tim’s video dives into three modern Python tricks you’ve probably never used: the new  statement for powerful pattern matching,  to auto-generate boilerplate code, and positional-only/keyword-only arguments for cleaner function signatures.</p><p>Plus, you can snag free Brilliant courses (and 20% off Premium) via his link, and if you want real-world project guidance, check out his DevLaunch mentorship program.</p>","contentLength":409,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python basics - Day 17","url":"https://dev.to/ian_b838138a27a917398d181/python-basics-day-17-4h77","date":1761833146,"author":"Sabin Sim","guid":322166,"unread":true,"content":"<h2><strong>Day 17 – Variable Scope (Local, Global, and Nonlocal)</strong></h2><p> Build a “Counter Tracker” app that explores how variable scopes behave.</p><p>By the end of this lesson, you will be able to:</p><ul><li>Understand how , , and  variables work\n</li><li>Recognize variable visibility inside and outside functions\n</li><li>Use the  and  keywords correctly\n</li><li>Apply the  to predict variable access order\n</li></ul><p>You are creating a small program that counts how many times a function is called.<p>\nWhile doing so, you notice that some variables disappear or don’t update as expected.</p> — the concept that controls where variables can be accessed.</p><p><strong>03. Step 1 – Local Variables</strong></p><p>Variables declared  exist only during that function’s execution.</p><div><pre><code></code></pre></div><p>When the function ends, the local variable is .</p><p><strong>04. Step 2 – Global Variables</strong></p><p>Variables declared  can be used anywhere in the program.</p><div><pre><code></code></pre></div><p>Global variables persist throughout the program.</p><p><strong>05. Step 3 – Modifying Global Variables</strong></p><p>If you want to  a global variable inside a function, use the  keyword.</p><div><pre><code></code></pre></div><p>⚠️ Avoid overusing . It can make your code .</p><p><strong>06. Step 4 – Local vs Global Name Conflict</strong></p><p>If both a local and a global variable share the same name,\nthe local one takes precedence .</p><div><pre><code></code></pre></div><p><strong>07. Step 5 – The LEGB Rule</strong></p><p>When Python searches for a variable, it follows this order:</p><div><table><tbody><tr><td>Inside the current function</td></tr><tr><td>Inside the outer (enclosing) function</td></tr><tr><td>Defined outside any function</td></tr><tr></tr></tbody></table></div><div><pre><code></code></pre></div><p><strong>08. Step 6 – The  Keyword</strong></p><p> allows modification of variables in an  function,\nbut  ones.</p><div><pre><code></code></pre></div><p><strong>09. Step 7 – Practice Examples</strong></p><p><strong>Example 1: Local vs Global</strong></p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p><strong>Example 3: Using nonlocal</strong></p><div><pre><code></code></pre></div><p><strong>10. Step 8 – Mini Project: Counter Tracker App</strong></p><p>Build a function that counts how many times it’s been called,\nusing  and  concepts.</p><div><pre><code></code></pre></div><p><strong>Bonus – Using nonlocal (functional version)</strong></p><div><pre><code></code></pre></div><ul><li>Differentiate , , and  variables</li><li>Predict variable behavior with the </li><li>Safely update global and enclosed variables</li><li>Build a  to visualize scope in action</li></ul><p>Next → <strong>Day 18 – Lambda Functions (Anonymous Functions)</strong>\nLearn how to create short, one-line functions for clean and efficient code.</p>","contentLength":1966,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Zero to Mastery: [October 2025] Python Monthly Newsletter 🐍","url":"https://zerotomastery.io/blog/python-monthly-newsletter-october-2025/?utm_source=python-rss-feed","date":1761831782,"author":"","guid":322138,"unread":true,"content":"<article>71st issue of Andrei's Python Monthly: uv is the Future, Python Hyperflask, Python 3.14 is here, and much more. Read the full newsletter to get up-to-date with everything you need to know from last month.</article>","contentLength":204,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"ByMail Library.","url":"https://dev.to/dark_51b36d43cc0e5934c7dc/bymail-library-3b26","date":1761827350,"author":"Dark","guid":322195,"unread":true,"content":"<p>📬 <em>is a lightweight Python library to fetch inbox messages from temporary email providers. It validates domains and supports both one-shot and continuous (looping) fetching.</em></p><p>: Works with a curated set of temp-mail domains.</p><p>: Print incoming emails continuously (Loop=True).</p><p>: Get a list of emails to iterate yourself (Loop=False).</p><p>\n`from ByMail import Mail</p><p>\nv1.0.0 – Full email API, domain validation, loop/non-loop modes: Early version; improvements and more providers planned.</p><p>\nFollow updates via the Telegram Channel (@PyCodz).</p>","contentLength":527,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-8hh","date":1761826107,"author":"Vibe YouTube","guid":322106,"unread":true,"content":"<p>Tech With Tim’s quick-and-dirty tutorial walks you through building a Python AI agent in under ten minutes—covering installation, grabbing your OpenAI API key, setting up imports and tools, wiring up the LLM agent, and running simple driver tests to make sure everything works.</p><p>Along the way you’ll find links for a free Notion trial, a lifetime-free PyCharm IDE (plus one month of Pro), and info on Tim’s DevLaunch mentorship program for hands-on project guidance.</p>","contentLength":472,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-29kj","date":1761826096,"author":"Vibe YouTube","guid":322121,"unread":true,"content":"<p>In this quick rundown, Tech With Tim dives into three under-the-radar Python goodies: the new match/case statement for clean pattern matching, handy dataclasses that kill boilerplate when you need simple data containers, and the positional-only &amp; keyword-only argument syntax that locks down how your functions get called.  </p><p>He also hooks you up with a free Brilliant.org trial (plus 20% off premium) for daily practice and plugs his DevLaunch mentorship program—perfect if you’re ready to move past tutorials, ship real projects, and actually land that dev job.</p>","contentLength":565,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"I built InvisiBrain — a free, open-source alternative to Cluely and Parakeet AI","url":"https://dev.to/shubham_shinde_cfee287b31/i-built-invisibrain-a-free-open-source-alternative-to-cluely-and-parakeet-ai-1ogg","date":1761824702,"author":"Shubham Shinde","guid":322095,"unread":true,"content":"<p>I built InvisiBrain, a free and open-source desktop AI assistant that runs completely invisibly — perfect for meetings, note-taking, or research without cluttering your screen.</p><p>🧠 Gemini API for fast, context-aware responses</p><p>🎙️ Vosk AI for offline transcription (privacy-first)</p><p>🪶 Runs stealthily in background (shows as Google Chrome in Task Manager 👀)</p><p>💻 Built with Electron — lightweight &amp; cross-platform</p><p>🔐 Just drop your Gemini API key in .env and run</p><p>Why:\nMost AI assistants are paywalled or cloud-dependent. InvisiBrain is private, minimal, and hackable, made for developers who value control.</p><p>TL;DR:\nInvisible, private AI assistant — Gemini + Vosk, runs locally, open-source, no clutter.</p>","contentLength":710,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Ned Batchelder: Side project advice","url":"https://nedbatchelder.com/blog/202510/side_project_advice.html","date":1761819793,"author":"","guid":322137,"unread":true,"content":"<p>Last night was a <a rel=\"external noopener\" href=\"https://about.bostonpython.com/\">Boston Python project night</a> where I\nhad a good conversation with a few people that was mostly guided by questions\nfrom a nice guy named Mark.</p><p>Mark works in research and made the classic observation that research code is\noften messy, and asked about how to make it nicer.</p><p>I pointed out that for software engineers, the code is the product. For\nresearch, the results are the product, so there’s a reason the code can be and\noften is messier.  It’s important to keep the goal in mind. I mentioned it might\nnot be worth it to add type annotations, detailed docstrings, or whatever else\nwould make the code “nice”.</p><p>But the more you can make “nice” a habit, the less work it will be to do it\nas a matter of course. Even in a result-driven research environment, you’ll be\nable to write code the way you want, or at least push back a little bit. Code\nusually lives longer than people expect, so the nicer you can make it,\nthe better it will be.</p><p>Side projects are a good opportunity to work differently. If work means messy\ncode, your side project could be pristine. If work is very strict, your side\nproject can be thrown together just for fun.  You get to set the goals.</p><p>And different side projects can be different. I develop\n<a href=\"https://coverage.readthedocs.io\" rel=\"external noopener\">coverage.py</a> very differently\nthan <a href=\"https://nedbatchelder.com/blog/202510/natural_cubics_circular_simplex.html\">fun math art\nprojects</a>. Coverage.py has an extensive test suite run on many versions of\nPython (including nightly builds of the tip of main).  The math art projects\nusually have no tests at all.</p><p>Side projects are a great place to decide how you want to code and to\npractice that style.  Later you can bring those skills and learnings back to a\nwork environment.</p><p>Mark said one of his difficulties with side projects is perfectionism. He’ll\ncome back to a project and find he wants to rewrite the whole thing.</p><p>My advice is: forgive yourself.  It’s OK to rewrite the whole thing. It’s OK\nto not rewrite the whole thing. It’s OK to ignore it for months at a time.  It’s\nOK to stop in the middle of a project and never come back to it. It’s OK to\nobsess about “irrelevant” details.</p><p>The great thing about a side project is that you are the only person who\ndecides what and how it should be.</p><p>But how to stay motivated on side projects? For me, it’s very motivating that\nmany people use and get value from coverage.py. It’s a service to the community\nthat I find rewarding.  Other side projects will have other motivations: a\nchance to learn new things, flex different muscles, stretch myself in new\nways.</p><p>Find a reason that motivates you, and structure your side projects to lean\ninto that reason. Don’t forget to forgive yourself if it doesn’t work out the\nway you planned or if you change your mind.</p><p>Sure, it’s great to have a project that many people use, but how do you find\na project that will end up like that?  The best way is to write something that\nyou find useful. Then talk about it with people.  You never know what will catch\non.</p><p>I mentioned my <a href=\"https://pypi.org/project/cogapp/\" rel=\"external noopener\">cog</a> project,\nwhich I first wrote in 2004 for one reason, but which is now being used by other\npeople (including me) for different purposes.  It\n<a href=\"https://nedbatchelder.com/blog/202201/cog_resurgence.html\">took years to catch on</a>.</p><p>Of course there’s no guarantee something like that will happen: it most\nlikely won’t.  But I don’t know of a better way to make something people will\nuse than to start by making something that  will use.</p><p>The discussion wasn’t as linear as this. We touched on other things along the\nway: unit tests vs system tests, obligations to support old versions of\nsoftware, how to navigate huge code bases. There were probably other tangents\nthat I’ve forgotten.</p><p>Project nights are almost never just about projects: they are about\nconnecting with people in lots of different ways. This discussion felt like a\ngood connection.  I hope the ideas of choosing your own paths and forgiving\nyourself hit home.</p>","contentLength":3816,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-1a46","date":1761818901,"author":"Vibe YouTube","guid":322053,"unread":true,"content":"<p>Tech With Tim walks you through a turbocharged tutorial on spinning up your own AI agent in under ten minutes. You’ll cover installing dependencies, grabbing your OpenAI API key, importing libraries, defining tools, hooking up a language model and agent, then writing driver code—finishing with a live test at the 9:45 mark.</p><p>Along the way, snag a free Notion trial or claim a forever-free+Pro-month of PyCharm, and peek at Tim’s DevLaunch mentorship for real-world project guidance. Video and code links (plus step-by-step timestamps) make it easy to dive right in.</p>","contentLength":570,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-43kn","date":1761818890,"author":"Vibe YouTube","guid":322052,"unread":true,"content":"<p>Tech With Tim’s latest video dives into three slick Python tools you might be sleeping on: the new match statement for pattern matching, data classes to slash your boilerplate, and positional-only &amp; keyword-only arguments for cleaner, more intentional APIs.</p><p>He also sprinkles in a 20% off link for Brilliant’s Premium plan to supercharge your learning and plugs his DevLaunch mentorship if you’re after real-world projects and hands-on guidance.</p>","contentLength":450,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Exploring Python Logic: How to Turn Conditions into Code","url":"https://dev.to/vishal_more_02990955c9358/exploring-python-logic-how-to-turn-conditions-into-code-931","date":1761815160,"author":"vishal more","guid":322032,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fbv8ll12g3gq8oqhs668s.png\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fbv8ll12g3gq8oqhs668s.png\" alt=\" \" width=\"800\" height=\"800\"></a>\nWhen learning Python, one of the most essential concepts to understand is decision making. Decision making is what allows a program to react to different situations instead of following a single, fixed path. It’s how Python “thinks” and decides what to do based on certain rules or conditions.</p><p>Read More:&nbsp; Exploring Python Logic: How to Turn Conditions into Code</p><p>In simple terms, turning conditions into code means teaching your program how to respond when something is true or false. This logical thinking is the foundation of all programming, from simple tasks like checking passwords to complex applications like artificial intelligence.</p><p>Understanding Conditions in Python</p><p>A condition in Python is a statement that can be evaluated as true or false. It is the basic building block of decision-making. For example, when a program needs to determine whether a user is old enough to access a website, it checks the condition related to age.</p><p>Conditions are created using comparison and logical reasoning. Python uses various comparison operators to compare values, such as checking if something is equal, greater, or smaller than another value. Logical operators then combine multiple conditions to form more complex rules.</p><p>The goal of conditions is simple: they allow the program to choose what happens next. When a condition is true, Python performs one action. When it’s false, it performs another. This ability to evaluate situations and act accordingly gives programs flexibility and intelligence.</p><p>The Role of Decision Making</p><p>In real life, we make decisions every day based on conditions — for example, deciding to carry an umbrella if the weather forecast predicts rain. Similarly, Python uses decision-making statements to perform certain actions only when specific conditions are met.</p><p>This process is called conditional logic. It helps Python programs behave differently depending on the data or situation. By applying conditional logic, a single program can handle a wide range of scenarios, making it efficient and adaptable.</p><p>How Python Handles Decisions</p><p>Python uses structured statements to manage decision making. Each decision starts by checking whether a condition is true or false. If the condition is true, the program follows one path. If it’s false, the program may choose another path or simply stop that part of the process.</p><p>These decisions allow programs to act intelligently. For example, a program can verify whether a form has been filled out correctly, control access to information, or respond to different user choices. Without decision making, programs would act in the same way every time, ignoring changes in data or user input.</p><p>Combining and Layering Conditions</p><p>In many situations, decisions are not based on a single rule. For instance, a program might need to check multiple factors before proceeding — such as whether a user is logged in and whether they have permission to view certain content.</p><p>Python allows multiple conditions to be combined. Logical operators such as “and,” “or,” and “not” are used to connect these conditions, making it possible to test several situations at once. This approach allows programmers to create more precise and complex decision-making logic.</p><p>Conditions can also be layered, meaning one decision depends on another. For example, if one rule is true, the program might check another rule before acting. This layered or nested logic helps the program handle complex decision trees effectively.</p><p>Why Decision Making Is Important</p><p>Decision making is a key concept in all areas of programming. It makes software interactive, responsive, and intelligent. With conditional logic, programs can:</p><p>React differently to various inputs.</p><p>Handle exceptions and errors smoothly.</p><p>Automate routine checks and tasks.</p><p>Improve user experience through dynamic responses.</p><p>Support complex systems such as authentication, recommendation engines, and data analysis.</p><p>Without decision making, Python programs would be static and predictable, unable to adapt to the real world.</p><p>Thinking Like a Programmer</p><p>Learning to use conditions effectively helps new programmers develop logical thinking skills. It trains the mind to break problems into smaller decisions and define what should happen in each case.&nbsp;Every decision in a Python program represents a piece of reasoning. By combining many small logical steps, programmers can create powerful systems that behave intelligently and make accurate decisions automatically.</p><p>Turning conditions into code is at the heart of Python logic. It transforms simple instructions into dynamic actions that respond to changing information. Understanding how to structure decisions, combine conditions, and think logically is one of the most valuable skills in Python programming. By mastering Python’s decision-making concepts, you unlock the ability to create smarter, more responsive programs that can reason, adapt, and evolve just like a human making choices in everyday life.</p>","contentLength":4956,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Django Weblog: Django is now a CVE Numbering Authority (CNA)","url":"https://www.djangoproject.com/weblog/2025/oct/30/django-is-now-a-cve-numbering-authority-cna/","date":1761814136,"author":"","guid":322046,"unread":true,"content":"<h3>What it means for Django to be a CNA</h3><p>Our <a href=\"http://www.djangoproject.com/foundation/teams/#security-team\">security team</a> deals with vulnerability reports on a daily basis, and every so often some turn out to be real vulnerabilities for us to fix and publish. CNAs are organizations responsible for the regular assignment of CVE IDs to vulnerabilities, and for creating and publishing information about the vulnerability in the associated CVE Record. Each CNA has a specific scope of responsibility for vulnerability identification and publishing. As a CNA, we are more autonomous through this process. For full details, see our scope on the <a href=\"http://www.djangoproject.com/foundation/cve-numbering-authority/\">new CVE Numbering Authority page</a>.</p><h3>How to report a vulnerability</h3><p>For reporters, our process remains completely unchanged: to report a security issue in Django, please follow our <a href=\"https://docs.djangoproject.com/en/dev/internals/security/\">security policies</a> to report over email at security@djangoproject.com.</p><p>Our CNA is currently run within our existing security team, with support from the foundation’s President and Vice President. Day to day, the <a href=\"http://www.djangoproject.com/fundraising/#who-are-the-django-fellows\">Django Fellows</a> take care of CNA activities. Check <a href=\"http://www.djangoproject.com/foundation/cve-numbering-authority/\">our CNA page</a> for more information and ways to contact us about CNA matters.</p><p>Thank you to Natalia Bidart for initiating our application process to become a CNA! And if you have feedback or questions, come say hi on the Django forum in <a href=\"https://forum.djangoproject.com/t/django-as-a-cna/42795\">Django as a CNA</a>.</p>","contentLength":1260,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-3il","date":1761811841,"author":"Vibe YouTube","guid":322010,"unread":true,"content":"<p>Tech With Tim shows you how to spin up a fully functional Python AI agent in under ten minutes—installing dependencies, grabbing your OpenAI API key, importing the right libraries, setting up tools, wiring up the LLM, writing the driver code, and testing it end to end. All the code lives on GitHub, and there’s a handy timestamp guide to jump straight to whichever step you need.</p><p>Along the way you’ll snag free trials for Notion and PyCharm Pro, plus details on Tim’s DevLaunch mentorship program for hands-on project help. Perfect if you want quick results and zero fluff!</p>","contentLength":581,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-25fp","date":1761811830,"author":"Vibe YouTube","guid":322009,"unread":true,"content":"<p>3 Unique Python features you probably didn’t know about: the new match statement for structural pattern matching, dataclasses for boilerplate-free data models, and positional-only &amp; keyword-only arguments to enforce cleaner function APIs. Each topic is time-stamped for quick jumps.</p>","contentLength":284,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Essential Python Debugging Tools You Need to Know","url":"https://dev.to/jeni860/essential-python-debugging-tools-you-need-to-know-109","date":1761807811,"author":"Jenifer","guid":321993,"unread":true,"content":"<p>There was a time when everyone was gushing about software development, and then slowly people began understanding the technology and started giving importance to software testing, and now it's time for us to welcome debugging. Debugging is one of the most crucial aspects of the entire software development process, which includes spotting errors as well as resolving them in the meantime in a specific program’s code. </p><p>Debugging is a very important process that is not just limited to identifying errors and issues, but also a sure-shot way to ensure that the overall program’s functionality is not at all disrupted. Debugging is a proper systematic approach considered regarding problem-solving. Debugging in the right manner enables programmers to isolate issues, also they gain a proper understanding of the why part, and implement necessary solutions. </p><p>So basically, this one is a highly systematic process considered by developers to identify as well as correct the issues so that the developed software behaves as intended or operates most reliably. </p><p>Apart from this, debugging can be beneficial in many ways, such as:</p><p> - Debugging assists developers in spotting and fixing errors within the code. This does enhance the overall quality of code. Detecting errors at a very early stage can prevent them from becoming more significant issues, which leads to a severe reduction in numerous kinds of bugs and vulnerabilities. </p><p>It has been observed that one of the common reasons for software crashes is due to high-quality code. And this can definitely hinder user experience as well. By debugging in the right manner, you can ensure that the developed code is severely compliant with ongoing coding practices and best practices. </p><p> - Debugging can enhance overall productivity in the software development realm. You see, when developers began spending less time fixing bugs and errors, the efficiency and productivity automatically increased. In addition, it is feasible for them to focus on developing new features and enhancing the user interface. Debugging certainly reduces the number of support tickets and bug reports, which means it is possible to complete projects at a much faster rate. </p><p> - It is possible to save money in the long run, all thanks to debugging. As mentioned earlier, by identifying errors early, it is possible to prevent more significant issues right from the very beginning. Meanwhile, this also reduces the risk of project delays and costly rework. As a result, lots and lots of money can be saved from debugging.</p><h3>\n  \n  \n  What is Python Debugging?\n</h3><p>Python has been one of the most popular technologies since it was released in 1991, and the mastermind behind the tech was Guido van Rossum. Over the years, the tech has gone through several changes and has been considered the best object-oriented programming language. With the severe gain in popularity, the need for Python debugging tools and techniques has increased. </p><p>What does Python debugging mean? It refers to successfully identifying, fixing errors within the code. Some of the errors that can prevent code from functioning include syntax, semantic, and runtime errors. So what is Python debugging all about?</p><p> - This is possible by simply reading the error message and keeping tabs on the log file, testing the code, and see in case if there is something off or not.  - To successfully debug the code, it is very important to reproduce the error consistently. <strong>Isolate the source of the error</strong> - As soon as the error is reproduced, it is very important to isolate the source of the problem, and this is possible by incorporating different techniques such as adding print statements, using a debugger, and examining stack traces.  - Once all the information is successfully gathered, make sure you form a hypothesis regarding what might be causing the error. - The next aspect is to use the hypothesis to guide the debugging procedure by making small changes to the code and then seeing what the end result is.  - In case the hypothesis is incorrect, keep repeating the process to isolate the error.  - As soon as you have fixed the error, make sure the code is working in the correct manner.  - Lastly, make sure to document the error and fix it so that there is no scope for any miscommunications in the future. </p><p>So now you must be wondering whether it is worth performing Python debugging or not? Well, it is always worth considering Python debugging after all, a successful development project is said to be absolutely free from errors and issues. I mean, finding bugs now and then can be pretty overwhelming, time-consuming, and daunting, especially when the code begins to grow in size as well as complexity. </p><p>It may quite interest to you to know that a debugger can assist in pausing the execution of the code as well as inspecting variables, expressions. And do you know what the best part here is? This is possible at any given point. So fret not, it becomes pretty easy to isolate the source of an error and understand how the code is behaving. Much like any debugging technique, Python debugging offers several benefits, such as saving ample time, enhancing code quality, better understanding of the code, and debugging complex and complicated errors. </p><h3>\n  \n  \n  Top Debugging Tools for Python\n</h3><p>The first and foremost debugging tool offered by Python is PDB. This one is a built-in Python debugger, one of the finest powerful tools that ensures an interactive debugging experience. And do you know what is an amazing aspect here? You are bound to receive an interactive debugging experience. Moreover, it is possible to pause the program’s execution and inspect its state; as a result, everything becomes easy to understand, so if you become clueless at any point in time, the debugging tool can work wonders. Moreover, it is possible to set breakpoints by stepping through code line by line and evaluating variables in real-time. </p><p>So by doing so, the execution will be paused, and you are bound to have instant access to the PDB command-line interface. Down below, I would like to mention certain commands that must be taken into consideration: </p><ul><li>To execute the next line of code - n (next)</li><li>If you want to continue execution until the next breakpoint - c (continue)</li><li>If you want to step into a function call - s (step)</li><li>If you want to print the value of the specified variable - p variable_name</li><li>If you want to exit the debugger - q (quit)</li></ul><p>Also, it is feasible to use he pdb.set_trace() method;</p><div><pre><code>import pdb\n\ndef add(a, b):\n    answer = a+b\n    return answer\n\npdb.set_trace()\nsum = add(1,2)\nprint(sum)\n</code></pre></div><p>Right from offering accurate breakpoints to ensuring step-by-step execution, variable inspection, and of course, conditional breakpoints, the PDB offers it all. </p><p>The next interesting Python debugging tool to take into consideration is PyDebugger. This one is a third-party tool which is created to offer a more visual as well as user-friendly debugging experience, especially in comparison to PDB. This Python debugging tool must be considered by developers who prefer a graphical interface in comparison to a command-line experience. When integrating the tool with Python, everything is simplified, right from identifying to inspection to fixing bugs in real time. </p><p>From pydebugger. Debug import debug</p><p>debug(variable1=\"data1\", debug=True)</p><p>\n$ python debugger.py<p>\n2024:10:22~12:09:18:573544 debugger.py -&gt; variable1: data1 -&gt; TYPE: -&gt; LEN:5 -&gt; [debugger.py:debugger.py] [3] PID:60855</p></p><p>Much like PDB, even PyDebugger offers a wide range of benefits such as breakpoint management, call stack visibility, variable inspection, exception handling, and the list goes on. </p><h4>\n  \n  \n  Visual Studio Code Python Extension\n</h4><p>The Visual Studio Code Python extension is another interesting, versatile tool mainly used by Python developers. This tool ensures seamless integration with other Python-based tools, so this debugging tool turns out to be everyone’s favourite, including both novice and experienced developers. </p><p>To ensure successful debugging, the Python debugger must be successfully installed in Visual Studio Code. By doing so, you can make the most of some of the most extraordinary features, including real-time variable inspection, step-by-step debugging, and breakpoints. </p><p>Moreover, this debugging tool highly supports the latest debugging modes, such as ‘debug-test’ or ‘debug-in-terminal’; no wonder it is easy to get things configured in the launch.json file.\nHere is the key for successful outcomes: try setting breakpoints on expressions and hit counts. By doing this, you are offering a flexible debugging environment that can handle different subprocesses as well as other advanced debugging capabilities. </p><p>Another interesting debugging tool, which offers an interactive shell for Python and comprises some of the most powerful features, especially to ease debugging and data exploration. The Python debugging tool ensures a highly robust environment, which turns out to be quite fruitful for interactive computing and enhances the debugging experience. </p><p>IPython features a quite rich toolkit where it is possible for developers to execute code snippets and visualise outputs that too, in real-time; no wonder it is an excellent choice when it comes to learning and development. </p><p>The Python debugging tool supports a wide range of debugging techniques, such as exclusive use of magic commands like %debug, so nothing can stop you from gaining a post-mortem debugging interface, especially after an exception occurs. The command line enables developers to successfully inspect the stack frame as well as evaluate different variables during the time of the error, so it becomes pretty easy to identify issues. </p><p>IPython successfully integrates well with Jupyter notebooks, by doing so it enables end users to mix code execution with rich text documentation and visualisations. No wonder data science and exploratory programming ensure a more comprehensive understanding of code behaviour. </p><p>Some of the most crucial benefits offered by IPython include - interactive shell, Post-mortem debugging with %debug, magic commands, real-time variable inspection, easy integration with Jupyter Notebooks, and absolute support for Rich Output visualisation. </p><p>This one is an error-tracking and performance monitoring tool that has the potential to diagnose and fix relevant Python issues. With the help of the following tool, it is possible to break down detected errors and opt for more significant insights, especially when you get full access to the space where the code produces lots and lots of bugs. </p><p>Some of its prominent features include error detection, absolute performance monitoring, stack tracing for error insights, event log reader, free version available with limited user capacity. Since it is easy to diagnose and fix Python issues efficiently, you are bound to gain detailed insights into detected errors. It is possible to identify as well as address bugs quickly, leading to enhanced code quality as well as enhanced project stability. </p><p>So error detection, performance monitoring, stack tracing for error insights, and event log reading everything is available here. </p><p>Sentry is highly recommended for projects that prioritise open-source solutions and require support for multiple programming languages, and this needs to go beyond Python, be it Go, JavaScript, and Ruby. </p><p>So if you are looking for a Python debugging tool that is an open source solution, ensures high transparency, flexibility, offers support for querying multidimensional data structures, facilitates root causes, ensures seamless integration with different logging and PSA tools, this is it! Your search needs to end here. </p><p>Further below, I would like to mention certain factors on which Python debugging tools must be evaluated:</p><ul><li>Seamless integration with the development environment</li><li>Absolute debugging capabilities</li><li>Quick support and active community</li></ul><p>And we are done for now! In short, debugging is one of the most popular and vital skills for Python developers to succeed. Whether they want to perform basic command-line debugging or advanced methods such as remote and post-mortem debugging, the tools and techniques mentioned above can definitely make things easy for you. </p><p>By now, I hope you realize that the significance of debugging and monitoring tools cannot be overstated. Since these tools are meant to enhance the quality of code and the developed app can perform successfully under varying conditions. So what are you waiting for? Time to create a cleaner and highly reliable Python code. Last piece of advice I would love to offer is that being a successful developer means you need to foster a culture of continuous improvement, which means the app has not just met user expectations but also is capable enough to adapt to the ever-evolving technological landscape. </p><p>So developing high-quality Python applications might seem to be a tricky venture, but it is definitely a doable job. All you need to do is consider a reputable and reliable development company that carries immense knowledge with Python and has enough experience as well. </p>","contentLength":13096,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 19: Python Vowel Counter – Build a Simple Function to Count Vowels in Any Text","url":"https://dev.to/shahrouzlogs/day-19-python-vowel-counter-build-a-simple-function-to-count-vowels-in-any-text-5a5k","date":1761807602,"author":"Shahrouz Nikseresht","guid":321979,"unread":true,"content":"<p>Welcome to Day 19 of the  journey! Today’s beginner-friendly challenge is all about <strong>creating a vowel counter in Python</strong> using a clean, reusable function. This hands-on task helps you master functions, loops, string methods, and basic counting, essential building blocks for text analysis. Whether you're learning Python basics or brushing up on string processing, this \"Python count vowels\" tutorial shows you how to encapsulate logic and deliver clear results with minimal code.</p><h2>\n  \n  \n  💡 Key Takeaways from Day 19: Vowel Counting Function\n</h2><p>This challenge defines a function that scans any input text and returns the total number of vowels (a, e, i, o, u), ignoring case. It’s a perfect example of function design in action, simple input, clean logic, and a single integer output. Let’s break down the core concepts: , <strong>case-insensitive comparison</strong>, and .</p><h3>\n  \n  \n  1. Function Design: Clean Input, Clear Output\n</h3><p>The  function takes a string and returns an integer, no side effects, no global variables. Its signature is straightforward:</p><div><pre><code></code></pre></div><p>The type hints ( → ) make the contract crystal clear. Inside, we define vowels once and reuse them:</p><div><pre><code></code></pre></div><p>This list is small and static, so no need for a set (though that’s a great optimization later). The function’s purity, same input always gives the same output, makes it easy to test and reuse. For example,  → 2,  → 1. It’s the kind of utility you’d drop into a larger text analyzer without hesitation.</p><h3>\n  \n  \n  2. Case-Insensitive Matching: Smart Character Handling\n</h3><p>To handle both \"A\" and \"a\", we lowercase each character before checking:</p><div><pre><code></code></pre></div><p>The  method runs on every character, ensuring \"AeIoU\" counts as 5 vowels. This is efficient and readable, no regex, no complex conditions. Python’s  operator with a list is fast enough for typical inputs, and the loop feels natural, like reading the text one letter at a time. It’s a gentle introduction to case handling that scales to real-world tasks like search or validation.</p><h3>\n  \n  \n  3. Interactive Flow: User Input + Instant Feedback\n</h3><p>The example usage ties it all together with a friendly prompt and formatted output:</p><div><pre><code></code></pre></div><p>The speech bubble emoji adds warmth, and the f-string delivers a polished result:  </p><blockquote><p> → <code>Your text contains 5 vowels.</code></p></blockquote><p>It’s minimal but effective. The function does the work; the main block handles the conversation. This separation keeps your logic reusable, call  from a web app, file processor, or game without changing a line.</p><h2>\n  \n  \n  🎯 Summary and Reflections\n</h2><p>This vowel counter challenge shows how a tiny function can teach big ideas in Python. It made me appreciate:</p><ul><li>: One function, one job, easy to test, debug, and reuse.</li><li>:  and  as everyday tools for text work.</li><li>: A docstring and type hints turn simple code into self-documenting code.</li></ul><p>The surprise? How often this pattern appears, counting characters, filtering data, validating input. For extensions, I thought about returning a dictionary of vowel counts () or ignoring accents (é, ü).</p><p>: Use a set for O(1) lookups (<code>vowels = {'a', 'e', 'i', 'o', 'u'}</code>), or <code>sum(1 for ch in text.lower() if ch in vowels)</code> for a one-liner. How do you count characters in Python? Share your version below!</p><h2>\n  \n  \n  🚀 Next Steps and Resources\n</h2><p>Day 19 was a smooth ride through function fundamentals, setting the stage for more text adventures. If you're in the #80DaysOfChallenges flow, did you tweak the counter? Add consonants? Let’s see your code!</p>","contentLength":3407,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Frontier: What Every Dev Needs to Learn Now","url":"https://dev.to/sanjaynaker/python-frontier-what-every-dev-needs-to-learn-now-1ppd","date":1761807439,"author":"Sanjay Naker","guid":321978,"unread":true,"content":"<p>Python isn’t just surviving — it’s thriving. The language is rapidly evolving into a more structured, performant, and deeply integrated ecosystem.</p><p>If you’re a Python developer, standing still means falling behind. The next frontier of Python demands new capabilities — skills that go beyond syntax and scripts, into architecture, performance, and production readiness.</p><p>Here are the three must-master areas to future-proof your Python career in the coming decade.</p><ol><li>Master Modern Concurrency</li></ol><p>If your Python experience is limited to synchronous code, you’re only using half of what the language can offer.\nThe future is concurrent, and knowing which concurrency model to apply is crucial for writing scalable, efficient applications.</p><p>Tool    Best For    Key Concept\nasyncio I/O-bound tasks (network, databases, APIs)  Single-threaded, event-loop concurrency; non-blocking.<p>\nthreading   Lightweight, I/O-bound tasks (simple web requests)  GIL-managed concurrency; not suitable for CPU-heavy work.</p>\nmultiprocessing CPU-bound tasks (intensive computation) True parallelism across CPU cores; bypasses the GIL.</p><p>Learn the async/await syntax.</p><p>Experiment with async-native web frameworks like FastAPI or Tornado.</p><p>Integrate async libraries such as httpx or async-compatible database drivers.</p><p>Understand when to offload CPU-heavy code using multiprocessing — that’s the mark of a performance-aware Python developer.</p><ol><li>Embrace Static Typing and Pydantic</li></ol><p>Python’s dynamic nature is its superpower, but large-scale software demands reliability, clarity, and maintainability.\nThat’s why modern Python leans heavily on static typing and structured validation.</p><p>Type Hinting is Non-Negotiable</p><p>Tools like Mypy and Pyright are now standard in professional Python environments.\nThey catch bugs before runtime, enhance IDE intelligence, and make your code far more readable and self-documenting.<p>\nStart by adding comprehensive type hints to all new code you write.</p></p><p>Pydantic for Data Validation</p><p>Pydantic isn’t just for FastAPI — it’s becoming the industry standard for data validation, parsing, and serialization.</p><p>Validate environment variables in configuration files.</p><p>Enforce data consistency across internal function calls.</p><p>Validate incoming JSON payloads in web frameworks.</p><p>Pydantic is the secret sauce for building robust, bug-resistant Python applications that scale.</p><ol><li>Python for Infrastructure and Operations (AIOps / MLOps)</li></ol><p>The line between a Python developer and a DevOps or MLOps engineer is fading fast.\nPython now bridges development, automation, and production systems.</p><p>Infrastructure as Code (IaC)</p><p>Python is increasingly used to script and manage cloud infrastructure through tools like Pulumi or by integrating with Terraform using its official HCL parser.\nLearning to automate infrastructure deployment with Python scripts is becoming a high-demand skill.</p><p>Frameworks such as Apache Airflow and Prefect (both Python-based) are now core tools for workflow orchestration and data engineering.\nUnderstanding how to define, schedule, and monitor automation pipelines will make you invaluable to any tech team.</p><p>Once a model is trained in TensorFlow or PyTorch, deploying it is an MLOps challenge — and Python is the bridge.\nFrom managing virtual environments to containerizing apps with Docker and exposing APIs with FastAPI, Python empowers you to move models from notebooks to production with ease.</p><p>The future of Python is defined by speed, structure, and seamless integration.\nBy mastering concurrency, static typing, and infrastructure automation, you won’t just stay relevant — you’ll lead the next wave of Python innovation.</p><p>Start today — the next decade of Python belongs to those who evolve with it.</p>","contentLength":3693,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python's Next Act – Why the \"Glue Language\" Will Stick to Everything","url":"https://dev.to/sanjaynaker/pythons-next-act-why-the-glue-language-will-stick-to-everything-1837","date":1761807256,"author":"Sanjay Naker","guid":321977,"unread":true,"content":"<p>Python has a reputation. It's the simple, readable language everyone starts with. It's the king of data science and the backbone of countless AI projects. But for core software development, some critics whisper, \"It's too slow,\" or \"The GIL is a killer.\"</p><p>Developers, listen up: The Python of tomorrow is systematically dismantling these criticisms, making it not just a good choice, but a mandatory one for any modern developer's toolkit.</p><ol><li>The Death of the GIL (Kind Of)\nThe Global Interpreter Lock (GIL) has been the boogeyman in Python's story, famously preventing true multi-core parallel execution of CPython code. But the landscape is rapidly changing.</li></ol><p>PEP 684: Per-Interpreter GIL: This change, already being implemented in newer Python versions, allows for multiple sub-interpreters within a single process, each with its own GIL. This is a game-changer! It paves the way for applications to leverage multiple CPU cores without the overhead of full multiprocessing, bringing true multi-threaded parallelism into the Python ecosystem.</p><p>Faster and Faster CPython: Core developers are obsessed with speed. Every new release—from 3.11 onwards—brings significant speed improvements, with targeted optimizations making Python feel snappier than ever. The difference isn't marginal; it's a fundamental commitment to performance.</p><ol><li>The AI-Infused Dev Loop\nThe dominance of Python in Artificial Intelligence and Machine Learning isn't slowing down—it's accelerating the language's integration into the entire software lifecycle.</li></ol><p>Generative AI's Native Tongue: Frameworks like PyTorch and TensorFlow are the foundation of modern Generative AI. As more applications embed custom or commercial AI models, Python becomes the default, non-negotiable \"glue\" for integrating these intelligent services into a web backend (with Flask, Django, or FastAPI) or a data pipeline.</p><p>The Rise of AI Agents: We’re moving beyond simple scripts to complex, multi-agent systems. Python's excellent concurrency support (with asyncio and new Task Groups) makes it the ideal environment for orchestrating these sophisticated, I/O-bound AI workflows.</p><ol><li>Asynchrony and The Modern Web\nForget the old monoliths. The future of web development is microservices, high concurrency, and real-time data. Python is embracing this with vigor.</li></ol><p>FastAPI's Reign: The rise of FastAPI as a hyper-performant, typed, and developer-friendly framework is reshaping backend development. Leveraging Python's standard type hints and Pydantic, it provides speed and stability that rivals compiled languages for I/O-bound tasks.</p><p>Async Everywhere: The core asyncio library is becoming more robust, with features like Task Groups (PEP 654) making structured concurrency cleaner and less error-prone. This means building scalable, event-driven applications like WebSockets, streaming APIs, and high-volume data scrapers in Python is now easier and more efficient than ever.</p>","contentLength":2910,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"📝 Build a To-Do List App with Flask and Jinja2 — A Beginner’s Guide","url":"https://dev.to/codeneuron/build-a-to-do-list-app-with-flask-and-jinja2-a-beginners-guide-38k1","date":1761805209,"author":"likhitha manikonda","guid":321976,"unread":true,"content":"<p>If you're just starting out with Python web development, Flask is a great place to begin. In this tutorial, we’ll build a simple To-Do List app using Flask, SQLAlchemy, and Jinja2 templates. You’ll learn how to structure a Flask project, define models, create routes, and render dynamic HTML.</p><p>A web app where users can:</p><ul><li>View incomplete and completed tasks</li></ul><div><pre><code>/todo-app\n│\n├── app/\n│   ├── __init__.py       # App setup and database config\n│   ├── models.py         # Database model for tasks\n│   ├── routes.py         # Web routes and logic\n│   └── templates/\n│       └── index.html    # HTML template using Jinja2\n├── run.py                # Entry point to start the app\n└── todo.db               # SQLite database (auto-created)\n</code></pre></div><h2>\n  \n  \n  🔧 Step-by-Step Explanation\n</h2><h3>\n  \n  \n  1.  — Flask App Setup\n</h3><div><pre><code></code></pre></div><ul><li>: Creates your Flask app.</li><li>: Connects your app to a SQLite database using SQLAlchemy.</li><li>: The database file that stores your tasks.</li><li>: Loads your route definitions so Flask knows how to respond to web requests.</li></ul><h3>\n  \n  \n  2.  — Define the To-Do Model\n</h3><div><pre><code></code></pre></div><ul><li>: This class defines the structure of your task table.</li><li>: A unique identifier for each task.</li><li>: The task description (e.g., “Buy groceries”).</li><li>: A boolean value to track whether the task is done.</li></ul><h3>\n  \n  \n  3.  — Define Web Routes\n</h3><div><pre><code></code></pre></div><div><pre><code></code></pre></div><ul><li>Queries the database for incomplete and complete tasks.</li><li>Passes them to the  template for display.</li></ul><div><pre><code></code></pre></div><ul><li>Gets the task text from the form.</li><li>Creates a new  object and saves it to the database.</li><li>Redirects back to the homepage.</li></ul><h4>\n  \n  \n  Route: Mark Task Complete ()\n</h4><div><pre><code></code></pre></div><ul><li>Finds the task by its ID.</li><li>Saves the change and reloads the homepage.</li></ul><div><pre><code></code></pre></div><ul><li>: Creates the  table in the database if it doesn’t exist.</li><li>: Starts the Flask development server and enables error messages.</li></ul><h3>\n  \n  \n  5.  — Jinja2 Template\n</h3><div><pre><code>To-Do ListMy To-Do ListAddIncomplete Tasks\n        {% for task in incomplete %}\n            {{ task.text }} Complete\n        {% endfor %}\n    Completed Tasks\n        {% for task in complete %}\n            {{ task.text }}\n        {% endfor %}\n    </code></pre></div><ul><li>Uses Jinja2 syntax ( and ) to dynamically display tasks.</li><li>Loops through  and  lists passed from Flask.</li><li>Provides a form to add new tasks and links to mark tasks complete.</li></ul><h3>\n  \n  \n  ❌ Error: </h3><p>: Make sure you call  inside an app context:</p><div><pre><code></code></pre></div><h3>\n  \n  \n  ❌ Error: Working outside of application context\n</h3><p>: Wrap database operations inside  to give Flask access to the app configuration.</p>","contentLength":2420,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-3kf8","date":1761804473,"author":"Vibe YouTube","guid":321975,"unread":true,"content":"<p>Ever wondered how to rig up an AI agent in Python in less time than brewing coffee? Tech With Tim walks you through installing dependencies, plugging in your OpenAI API key, importing essential modules, setting up tools, and wiring an LLM-based agent—all in under ten minutes. With on-screen timestamps and a link to the GitHub repo, you can follow along at your own pace.</p><p>Plus, snag freebies like a Notion trial and a month of PyCharm Pro, and check out Tim’s DevLaunch mentorship if you’re ready to level up beyond tutorials. It’s the no-fluff guide to getting an AI agent up and running ASAP.</p>","contentLength":602,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-1i1l","date":1761804463,"author":"Vibe YouTube","guid":321974,"unread":true,"content":"<p>Want to level up your Python game? In this quick video, Tim walks you through three under-the-radar features you’re probably not using but totally should: the new structural Pattern Matching with , the ever-handy  decorator for cutting boilerplate, and how to enforce positional-only or keyword-only function arguments for cleaner APIs.</p><p>Plus, he’s sprinkled in handy timestamps for each feature, a 20% off code for Brilliant’s Premium plan, and a peek at his DevLaunch mentorship program to help you turn tutorials into real-world projects and land that dream job.</p>","contentLength":569,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 19 of My AI & Data Mastery Journey: From Python to Generative AI","url":"https://dev.to/nitinbhatt46/day-19-of-my-ai-data-mastery-journey-from-python-to-generative-ai-dp0","date":1761800961,"author":"Nitin-bhatt46","guid":321959,"unread":true,"content":"<p><strong>Lambda Functions in Python</strong>\n    • Lambda: A small anonymous function defined with the lambda keyword instead of def.<p>\n    • Syntax: lambda arguments: expression</p>\n    • Lambdas are used for short, throwaway functions, especially as arguments to functions like map() and filter().</p><p><strong>Pseudo Code for Squaring a Number Using Lambda</strong></p><ol><li> Define an anonymous function that receives one argument:\n •    Multiply the argument by itself</li><li> Call this function with input 5</li><li> Print the result (should be 25)</li></ol><p>\n    • Purpose: Applies a function to every element in an iterable (like a list) and returns a map object (iterator).<p>\n    • Syntax: map(function, iterable)</p>\n    • Used when you want to transform all elements in a list (or iterable).</p><p><strong>Pseudo Code for Doubling Each Number</strong></p><ol><li>Create a list of numbers\nExample: numbers =</li><li>For each element in the list:\n• Multiply the element by 2\n• Store the result in a new list</li><li>Print the new list of doubled numbers</li></ol><p><strong>Pseudo Code for Finding Cubes</strong></p><ol><li>Create a list of numbers\nExample: nums =</li><li>For each element in the list:\n• Raise the element to the power of 3\n• Store the result in a new list</li><li>Print the new list of cubes</li></ol><p>filter() Function\n   • Purpose: Filters items out of an iterable for which the function (predicate) returns False.<p>\n   • Syntax: filter(function, iterable)</p>\n   • Used to keep elements that satisfy a condition.<p>\n   • Example: Filter even numbers</p></p><p><strong>Pseudo Code for Filtering Even Numbers</strong></p><ol><li>Create a list of numbers (e.g., )</li><li>For each number in the list:\n• If the number is divisible by 2 (i.e., number % 2 == 0):\n• Include the number in a new list of even numbers</li><li>Print the list of even numbers</li></ol><p><strong>Pseudo Code for Filtering Words with More Than 5 Letters</strong></p><p>1.Start\n2.Create a list of words (e.g., [\"apple\", \"banana\", \"cherry\", \"kiwi\"])<p>\n3.For each word in the list:</p>\n   •  If the length of the word is greater than 5:<p>\n   •  Include the word in a new list of long words</p>\n4.Print the list of long words</p>","contentLength":1927,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Django Weblog: DSF member of the month - Anna Makarudze","url":"https://www.djangoproject.com/weblog/2025/oct/30/dsf-member-of-the-month-anna-makarudze/","date":1761800400,"author":"","guid":322045,"unread":true,"content":"<p>Due to the Malcolm Tredinnick Memorial Prize announcement in September, we paused our regular DSF Member of the Month feature for that month.</p><p>For October 2025, we welcome Anna Makarudze as our DSF member of the month! ⭐</p><p>Anna is a Django Girls+ Trustee and has dedicated years to growing Django globally. She served as DSF President and founded DjangoCon Africa, helping expand Django's reach in the world. She has been a DSF member since August 2016.\nYou can learn more about Anna by visiting <a href=\"https://se.linkedin.com/in/anna-makarudze\">Anna's Linkedin profile</a> and <a href=\"https://github.com/amakarudze\">her GitHub Profile</a>.</p><p>Let’s spend some time getting to know Anna better!</p><h4>Can you tell us a little about yourself (hobbies, education, etc)</h4><p>I graduated with a BSc (Hons) in Computer Science from Midlands State University, Gweru, Zimbabwe, many years ago (2009). I am now pursuing an MSc in Software Engineering at Blekinge Institute of Technology in Karlskrona, Sweden, courtesy of a scholarship from the Swedish Institute. I have completed numerous courses for various IT certifications over the years, most of which have expired. I have also taken management courses to keep upskilling myself, as I enjoy learning. </p><p>Regarding hobbies, I enjoy baking, especially trying out new cake and pastry recipes for fun; it's my favourite way to relax after busy or stressful times. I also enjoy walking, particularly in areas with lush greenery and natural beauty, but my fear of snakes and creepy crawlies limits my solo adventures into the woods. My fear of snakes is justified; my family home (parents’) is located within a very natural reserve with many indigenous trees and forests, close to Lake Kyle in Masvingo. Although the area is stunning, it does have snakes and other wildlife such as hippopotamuses and crocodiles (if you go too close to the lake). I have encountered snakes many times at my parents’ house because of the numerous trees, so I have learnt to avoid them as most are venomous. Additionally, being African, a fear of these creatures and death is instinctive for me. I also enjoy listening to music, reading books, and occasionally watching a good film.</p><h4>How did you start using Django?</h4><p>I learnt Python in 2015 through Treehouse as part of a scholarship from Muzinda Hub’s Entrepreneurship training. We were expected to develop a Python project at the end of the three-month course, and I chose to use Flask. A friend of mine, Humphrey Butau, used Django, and he encouraged me to try it. After that, I was hooked.</p><h4>What other framework do you know and if there is anything you would like to have in Django if you had magical powers?</h4><p>I also know Flask, and recently, through school assignments, I have had to use Express JS. If I had magical powers, I would want Django to support NoSQL databases like MongoDB out of the box, just as it supports SQL databases. I have been working with the django-mongodb-backend and realised that it works if you either download their template or do some extra work to be able to run the default Django migrations. </p><h4>What projects are you working on now?</h4><p>As part of my Master’s studies, I am actually working on quite a number of projects for the two courses I am currently taking (until 31st October). For the Software Evolution and Maintenance course, we have been working on Home Assistant, which is also based on Python. We are working on a fork, though, so that we don’t flood the upstream with pull requests from Python, but it has been amazing seeing all the integrations available in it. My group and I chose to work on the Google Tasks integration. I will likely want to continue experimenting with Home Assistant even after the course ends.</p><p>For the Cloud Computing and Big Data Analysis course I am undertaking, I have recently completed two projects: one involving provisioning and orchestration of two RESTful Django microservices with Kubernetes, and another focused on Big Data Analysis using Express JS. Currently, I am working on implementing monitoring for an application that utilises Clojure and a MongoDB database, although I intend to develop the monitoring in Python.</p><p>Besides that, I am personally developing a MongoDB version of a Conveyances app I created several years ago, which was built using Django, Django Rest Framework, Vue, and Postgres. The app had nested data due to the restrictions of a SQL database structure, so I want to experiment with NoSQL to see how simpler it would be. I had meant to do this before DjangoCon Africa and present a talk on it, but the toll of organising a conference blocked me, so I am finally working on it now.</p><h4>What are you learning about these days?</h4><p>I am currently learning about cloud computing and Big Data, with a focus on provisioning and orchestrating Big Data Analysis cloud architectures. I am also learning how to improve and monitor the performance of these systems in terms of CPU, memory, and storage utilisation.</p><h4>Which Django libraries are your favourite (core or 3rd party)?</h4><p>My favourite Django core libraries are the Django ORM and Django Admin. They make it very easy to set up a functional website with minimal effort. The ORM simplifies database connections and queries, and Django Admin provides a ready-to-use backend admin interface. My favourite third-party library is Django Rest Framework. It makes creating RESTful APIs with Django quick and straightforward.</p><h4>What are the top three things in Django that you like?</h4><p>The top three things that I like in Django are the management commands, migrations and the authentication systems. I like how the management commands make it so easy to quickly automate stuff, whether it's the default Django management commands or if you have written your own. Django migrations do the work for you in terms of making changes to the database, and you need not worry about writing the SQL statements. </p><p>The authentication system is fairly basic, but it can get you started with minimal effort on your part. This makes Django fulfil its tagline of being “The framework for perfectionists with deadlines”. I have used it in most of my projects for my Master’s programme, where we were chasing deadlines, and it always turned out to be true.</p><h4>You were previously a board member and President of the Django Software Foundation, what would you suggest to someone wondering if they should take this role or being part of the board?</h4><p>Being part of the Django Software Foundation board is an excellent way to contribute to the Django community, as you can shape and influence important decisions related to Django and its ecosystem. While the DSF Board does not dictate the technical direction of Django, it does influence how those who impact the technical direction are selected or governed. </p><p>As President, you also have the chance to implement your ideas on the future of the Django community, the staff who maintain Django, and the direction of Django events. Although it may require more of your time than being an ordinary member due to additional responsibilities, it is a valuable opportunity to develop and strengthen your leadership skills. </p><p>Anyone who uses Django, even if they haven't contributed code but have attended or organised Django events, can be part of the DSF board. I joined the DSF board at the end of 2017 for 2018, after using Django for just over two years, so you need not worry about your level of experience. All you need is your commitment and a clear plan of what you hope the DSF board should achieve during your term.</p><h4>You were the chair of DjangoCon Africa this year, what do you think is required to organize a conference like this? Why do you think this is important conference like DjangoCon Africa?</h4><p>Organising a conference like DjangoCon Africa requires substantial community engagement, significant time, effort, and resilience. Firstly, Africa differs from other continents in many ways. In some aspects, these differences are advantageous, while in others, they present challenges. Technologically, Africa is a greenfield; there is ample opportunity for technological advances, and we have the population to pursue this, meaning most of our attendees are eager to learn and contribute to the community. We also have the “Ubuntu” community spirit ingrained within us, which makes our DjangoCon Africa events feel like home. </p><p>However, this presents a significant challenge regarding funding, as there are not many successful Django-based startups capable of financing an event as large as DjangoCon Africa. Our colonial history as a continent creates major obstacles to international financial transactions, mainly due to numerous structural barriers. This makes it notably harder for corporate sponsors without local offices to offer sponsorship. </p><p>Despite these challenges, I believe it is essential to organise DjangoCon Africa because it is the only continent where many Africans can travel visa-free or without restrictions. My first DjangoCon events were in Europe and then the US, and I have faced numerous visa applications each time I needed to travel. Within Africa, I can visit many countries visa-free. Once I arrive, I am often mistaken for a local until I speak, and then I am limited to speaking English, not their local language. DjangoCon Africa's programme is curated specifically for Africans, featuring talks suited to their level of understanding and offering numerous beginner workshops to help them get started, while also catering for mid-level and advanced programmers. </p><p>DjangoCon Africa takes over a year to plan, which demands a significant time commitment. When we are halfway through organising it, I ask myself why I keep getting into trouble by arranging a DjangoCon. After each event, I feel tired and exhausted but incredibly fulfilled because of the impact I can see we have achieved from that single occasion. While other events are more polished and well-established, DjangoCon Africa has only hosted two events so far and remains far from perfect, yet I still sense its impact despite all the imperfections. One can only truly understand the feeling of being at DjangoCon Africa if they have attended it. </p><h4>I know you are a Django Girls+ Trustee, could you tell us a bit more about Django Girls+ and how we could be involved in Django Girls if we are interested?</h4><p>Django Girls Foundation is a non-profit that empowers women+ to organise free programming workshops for women+ by providing the resources they need. Django Girls+ workshops are one or two-day events where participants are exposed to web development using Python and Django using our popular, beginner-friendly Django Girls Tutorial, which is open source. The participants get to learn at their own pace with the help of coaches. </p><p>We also have several open-source resources to help our volunteers run and organise our workshops: the Organiser Manual, Coach Manual, Organiser FAQs and Tutorial Extensions. In the 11 years that Django Girls+ has existed. You can find more on <a href=\"https://djangogirls.org/en/2016-2017/\">one of Django Girls+ annual report</a>.</p><p>There are several ways to get involved with Django Girls+. One can apply to organise a workshop in their city or become a coach at one of our events. They can also contribute to all the resources mentioned above, as well as our open-source website. They can also contribute financially by supporting us through <a href=\"https://djangogirls.org/en/donate/donate/\">Patreon, donating via PayPal or GitHub Sponsors</a>. If they are corporates, they can reach out to me as the Fundraising Coordinator and we can discuss a partnership at hello@djangogirls.org.</p><h4>Django is celebrating its 20th anniversary, do you have a nice story to share?</h4><p>Being part of the Django community since 2016 has been a blessing in my life. I have travelled to many countries for Python and Django conferences, forming many meaningful friendships that have become essential to me. I have contributed to Django in many ways, and in return, Django has given me so much. I have been able to showcase my leadership qualities through the Django community, and I am grateful to them for allowing me to be myself and celebrate my identity as an African woman who’s passionate about coding and community. </p><p>One of my favourite memories from DjangoCon Europe 2018  is taking a pedal boat ride with my good friend Jessica Upani in Heidelberg, right after DjangoCon Europe 2018. We had previously visited a castle, and it had been lovely. While on the boat, Jessica, true to her nature, kept laughing and not taking our safety seriously, while I, on the other hand, was panicking that we might capsize. We had no life jackets, and I was sure I wouldn’t swim well in the river. When we disembarked, I felt relieved and told her I was worried we would capsize and I wouldn’t be able to swim, and she admitted she was worried too. Who does that? \nWith that, I say happy 20th birthday to Django. I have so many fond memories to share from the Django community.</p><h4>Is there anything else you’d like to say?</h4><p>The Django community has put in a lot of work to make the environment welcoming for beginners and for everyone, especially minorities. I have made many genuine friends over the years, whom I am always excited to meet again at various community events. I am one of those people who came for the framework and stayed for the community, and I would like to see this continue. </p><p>Thanks so much to all the work the DSF board members (past and present) have done all these years. Things move slowly in Djangoland, as Carlton Gibson likes to say, but it has been a great pleasure watching every board build on what the previous boards have started, and I hope to see that continue. Special thanks to all the working groups, members and volunteers that support the DSF - Django is great because of you.</p><p><strong>Thank you for doing the interview, Anna !</strong></p>","contentLength":13649,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-a74","date":1761797275,"author":"Vibe YouTube","guid":321944,"unread":true,"content":"<p>Tim dives into three under-the-radar Python tricks that’ll level up your code: the new match statement for pattern matching, dataclasses to cut down on boilerplate, and the power combo of positional-only vs. keyword-only function arguments. </p><p>He also plugs free Brilliant lessons (plus a 20% off Premium deal) and his DevLaunch mentorship to help you build real-world projects and land that dream job.</p>","contentLength":401,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building Intelligent Multi-Agent Systems with Context-Aware Coordination","url":"https://dev.to/exploredataaiml/building-intelligent-multi-agent-systems-with-context-aware-coordination-a4c","date":1761791140,"author":"Aniket Hingane","guid":321084,"unread":true,"content":"<p>When I first started exploring multi-agent systems, I thought it would be straightforward—just create a few AI agents and let them talk. Boy, was I wrong! Through months of experimentation, I discovered that building truly intelligent agent systems requires careful orchestration, context management, and specialized roles. In this comprehensive guide, I'll walk you through my journey of creating a production-ready multi-agent framework that actually works. You'll learn how to design specialized agents, implement context-aware coordination, build robust memory systems, and orchestrate complex tasks across multiple AI agents.</p><h3>\n  \n  \n  What's This Article About?\n</h3><p>Have you ever wondered how large-scale AI systems handle complex tasks that require multiple perspectives and specialized knowledge? As per my experience building AI systems over the past few years, I realized that single-agent architectures hit a ceiling pretty quickly when dealing with real-world complexity.</p><p>This article is my deep dive into building sophisticated multi-agent systems where AI agents don't just exist independently—they collaborate, share context, maintain memory, and coordinate intelligently to solve problems that would overwhelm any single agent.</p><p>In my opinion, the future of AI isn't about building one super-intelligent agent, but rather about creating ecosystems of specialized agents that work together seamlessly. That's exactly what we're building here.</p><p>From my experience, keeping things simple but powerful is key. Here's what I chose for this implementation:</p><ul><li> - The backbone of our system</li><li> - For clean agent state management\n</li><li> - For type-safe role definitions</li><li> - Making code self-documenting</li><li> - Essential for debugging multi-agent interactions</li><li> - For structured inter-agent communication</li></ul><p>I intentionally avoided heavy frameworks because, in my opinion, understanding the fundamentals is more valuable than relying on black-box solutions.</p><p>Let me be honest—there are plenty of tutorials on AI agents out there. So why should you read this one?</p><p>From my perspective, most tutorials either oversimplify the problem or get lost in theoretical abstractions. I wrote this because I wanted something practical, something I could actually use in production systems.</p><p>: Every code snippet here is battle-tested. I've made the mistakes so you don't have to.</p><p>: Not toy examples, but actual patterns I use in production systems.</p><p>: Understanding how agents maintain and share context—something I struggled with for months.</p><p>: Patterns that work whether you have 3 agents or 30.</p><p>As per my experience, the biggest challenge isn't building individual agents—it's making them work together intelligently. That's what this guide solves.</p><h3>\n  \n  \n  The Multi-Agent Architecture\n</h3><p>When I first approached this problem, I made a classic mistake: I tried to build everything at once. After several failed attempts, I realized I needed to think systematically.</p><p>In my observation, successful multi-agent systems follow a clear hierarchy. Let me walk you through how I designed this architecture.</p><h4>\n  \n  \n  Agent Roles and Specialization\n</h4><p>The first breakthrough came when I stopped trying to create generic agents and instead embraced specialization. Think about it like a well-run company—you don't hire generalists for everything; you have specialists who excel in their domains.</p><p>I identified four core roles based on my experience building production systems:</p><p><p>\nThis became the orchestrator in my system. As I thought about it, every complex task needs someone (or something) breaking it down into manageable pieces. The coordinator's job is task decomposition, priority management, and agent orchestration.</p></p><p><p>\nInformation gathering is its own skill. I gave this agent capabilities for data collection, source validation, and information synthesis. In my opinion, separating research from execution prevents contamination of concerns.</p></p><p><p>\nPattern recognition and insight generation require a different mindset than data gathering. This agent focuses purely on making sense of information—finding correlations, identifying trends, and generating actionable insights.</p></p><p><p>\nFinally, someone needs to actually do the work. The executor takes validated plans and implements them, handling action execution and result validation.</p></p><h4>\n  \n  \n  Context Management Strategy\n</h4><p>This was the hardest part to get right, and I went through three complete rewrites before landing on what I'll show you.</p><p>The challenge: How do agents maintain conversation context across multiple interactions while sharing relevant information with each other?</p><p>My solution uses a layered approach:</p><p>: Each agent maintains its own conversation history. I implemented this using a simple list of message objects, but with timestamp and metadata for context.</p><p>: When agents collaborate, they need to share relevant context without overwhelming each other with their entire history. I created a context extraction mechanism that pulls recent, relevant information.</p><p>: The coordinator maintains a bird's-eye view of the entire system state, tracking which agents are working on what.</p><p>From my experience, this three-tier approach balances autonomy with coordination beautifully.</p><p>Agents need to talk to each other, but how?</p><p>I designed a message-passing system with structured envelopes. Each message contains:</p><ul><li> (who's talking)</li><li> (what they're saying)</li><li> (context, priority, related tasks)</li></ul><p>This might seem over-engineered at first—I thought so too—but in production, I found that structured messages prevent the chaos that comes from free-form agent communication.</p><p>Now comes the fun part—actually building this system. I'll break down the code into logical blocks and explain my thinking behind each decision.</p><h3>\n  \n  \n  Building the Foundation: Agent Roles and Messages\n</h3><p>I started with the simplest possible foundation—defining what an agent can be and how they communicate.</p><div><pre><code></code></pre></div><p><p>\nIn my experience, using Enums for roles prevents typos and makes the code self-documenting. I chose dataclasses over regular classes because they're cleaner and come with free </p> and  methods.</p><p>The Message structure might look simple, but I added metadata after my first production deployment when I realized agents needed to pass contextual information beyond just content.</p><h3>\n  \n  \n  Creating the Agent Context Container\n</h3><p>Next, I needed a way to encapsulate everything an agent knows about itself.</p><div><pre><code></code></pre></div><p><p>\nFrom my observations, unbounded memory growth is a silent killer in production systems. That's why I added automatic memory trimming. I learned this the hard way when one of my early agents consumed 8GB of RAM after running for a week!</p></p><p>The  method exists because, as I discovered, agents rarely need their entire conversation history—usually just the recent context.</p><h3>\n  \n  \n  Implementing the Core Agent Class\n</h3><p>Here's where things get interesting. This is the heart of the system.</p><div><pre><code></code></pre></div><p><p>\nI structured it this way because I wanted clear separation between what an agent can do (capabilities) and what it uses to do it (tools). In my opinion, this distinction is crucial for maintainability.</p></p><p>The capability maps came from real projects. For instance, I added \"conflict_resolution\" to the coordinator after running into situations where multiple agents tried to work on the same subtask.</p><h3>\n  \n  \n  Implementing Context-Aware Message Processing\n</h3><p>This is where the magic happens—how agents actually process incoming messages while maintaining context.</p><div><pre><code></code></pre></div><p><p>\nInitially, I tried to make agents too \"smart\"—giving them LLM integrations and complex decision trees. Then I realized that for many use cases, well-structured rule-based responses with clear role separation work beautifully and are much more predictable.</p></p><p>The key insight I had was that context awareness isn't about giving agents access to everything—it's about giving them access to relevant recent information. That's why  only pulls the last 3 messages from memory.</p><h3>\n  \n  \n  Building Helper Methods for Intelligence\n</h3><p>These utility methods make agents actually useful in practice:</p><div><pre><code></code></pre></div><p><strong>Why these helpers matter:</strong><p>\nFrom my experience, the difference between a demo and a production system is in the details. These helper methods provide observability and intelligence that becomes crucial when debugging multi-agent interactions.</p></p><h3>\n  \n  \n  Creating the Multi-Agent Orchestration System\n</h3><p>Now we bring it all together with an orchestrator that manages multiple agents:</p><div><pre><code></code></pre></div><p><strong>The orchestration philosophy:</strong><p>\nWhen I designed this, I thought carefully about the flow. Each agent needs to build on the previous agent's work while maintaining its own context. The coordinator bookends the process—starting with decomposition and ending with synthesis.</p></p><p>As per my experience, this linear flow works well for most tasks. For more complex scenarios, I've experimented with parallel execution and dynamic routing, but this sequential approach is elegant and debuggable.</p><p>Finally, let's create a simple demo that shows everything in action:</p><div><pre><code></code></pre></div><p><p>\nI structured the demo to show progressive complexity—from single agent to multi-agent coordination to system-wide status. In my opinion, this pedagogical approach helps developers understand each layer before moving to the next.</p></p><h3>\n  \n  \n  Step-by-Step Installation\n</h3><p>From my experience setting this up across different environments, here's the cleanest approach:</p><div><pre><code>\npython intelligent-agent-system\nintelligent-agent-system\n</code></pre></div><p><strong>Step 2: Create Virtual Environment</strong> (I always recommend this)</p><div><pre><code>\npython  venv venv\n\n\nvenvcriptsctivate\nvenv/bin/activate\n</code></pre></div><p>Create a file called  and paste all the code blocks from the \"Let's Get Cooking\" section in order.</p><p><strong>Step 4: Test the Installation</strong></p><div><pre><code>python multi_agent_system.py\n</code></pre></div><p>You should see the demonstration run with all agents coordinating!</p><p>As I built this out, I added several configuration options that you might want to adjust:</p><div><pre><code></code></pre></div><p>Here's how I typically use this system in practice:</p><div><pre><code></code></pre></div><p>From my experience, here are some patterns I've found useful:</p><p><strong>Pattern 1: Custom Agent Configuration</strong></p><div><pre><code></code></pre></div><p><strong>Pattern 2: Chaining Tasks</strong></p><div><pre><code></code></pre></div><p><strong>Pattern 3: Monitoring and Debugging</strong></p><div><pre><code></code></pre></div><p>Looking back on this journey of building multi-agent systems, I'm struck by how much I learned through trial and error. What started as a simple idea—\"let's make some AI agents talk to each other\"—evolved into a sophisticated orchestration system with context management, role specialization, and intelligent coordination.</p><p>In my opinion, the most important lesson is this: <strong>successful multi-agent systems aren't about making individual agents smarter—they're about making agents work together intelligently.</strong></p><p>The architecture I've shared here is the result of multiple production deployments, countless debugging sessions, and a lot of refactoring. It's not perfect (no system is), but it's practical, understandable, and extensible.</p><p>Through this journey, you've gained:</p><ul><li><strong>Architectural Understanding</strong>: How to design multi-agent systems with clear roles and responsibilities</li><li>: Techniques for maintaining and sharing context across agents</li><li>: Working code you can deploy and extend</li><li>: Real-world approaches to agent coordination and orchestration</li></ul><p>From my experience, here are the natural next steps:</p><ol><li>: Connect these agents to actual LLMs (GPT-4, Claude, etc.) for dynamic responses</li><li><strong>Implement Async Processing</strong>: Make agents work in parallel for better performance</li><li>: Add database storage for long-term memory and task history</li><li>: Implement proper logging and metrics for production use</li><li>: Robust error recovery and retry mechanisms</li></ol><p>The foundation is here. As per my observation, the developers who succeed with multi-agent systems are those who start simple (like we did) and iterate based on real-world needs.</p><p>I encourage you to take this code, experiment with it, break it, fix it, and make it your own. That's how I learned, and I think that's how you'll learn best too.</p><p>What complex task will your agents solve first?</p>","contentLength":11750,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-343h","date":1761790662,"author":"Vibe YouTube","guid":321083,"unread":true,"content":"<p>This video spotlights three under-the-radar Python gems you need to try: the new  statement for cleaner pattern matching,  to cut boilerplate when modeling data, and positional-only &amp; keyword-only arguments for tighter function interfaces.</p><p>Bonus perks: grab a 20% discount on Brilliant’s Premium to level up your coding chops, and check out Tim’s DevLaunch mentorship for real-world projects, accountability, and job-ready skills.</p>","contentLength":433,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-2b52","date":1761790255,"author":"Vibe YouTube","guid":321082,"unread":true,"content":"<p> TechWithTim’s latest video dives into three modern Python goodies you might’ve never touched: the new  statement for clean pattern matching, handy dataclasses to zap away boilerplate, and how to enforce positional-only vs. keyword-only function arguments for clearer APIs.</p><p>Plus, Tim hooks you up with a free Brilliant.org trial (and 20% off Premium) for daily brain teasers, and pitches his DevLaunch mentorship if you want real-world projects and job-ready guidance—no fluff, all accountability.</p>","contentLength":502,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building Intelligent Multi-Agent Systems with Context-Aware Coordination","url":"https://dev.to/samadhi_patil_294a4ff7fea/building-intelligent-multi-agent-systems-with-context-aware-coordination-2476","date":1761790061,"author":"samadhi patil","guid":321081,"unread":true,"content":"<p>When I first started exploring multi-agent systems, I thought it would be straightforward—just create a few AI agents and let them talk. Boy, was I wrong! Through months of experimentation, I discovered that building truly intelligent agent systems requires careful orchestration, context management, and specialized roles. In this comprehensive guide, I'll walk you through my journey of creating a production-ready multi-agent framework that actually works. You'll learn how to design specialized agents, implement context-aware coordination, build robust memory systems, and orchestrate complex tasks across multiple AI agents.</p><h3>\n  \n  \n  What's This Article About?\n</h3><p>Have you ever wondered how large-scale AI systems handle complex tasks that require multiple perspectives and specialized knowledge? As per my experience building AI systems over the past few years, I realized that single-agent architectures hit a ceiling pretty quickly when dealing with real-world complexity.</p><p>This article is my deep dive into building sophisticated multi-agent systems where AI agents don't just exist independently—they collaborate, share context, maintain memory, and coordinate intelligently to solve problems that would overwhelm any single agent.</p><p>In my opinion, the future of AI isn't about building one super-intelligent agent, but rather about creating ecosystems of specialized agents that work together seamlessly. That's exactly what we're building here.</p><p>From my experience, keeping things simple but powerful is key. Here's what I chose for this implementation:</p><ul><li> - The backbone of our system</li><li> - For clean agent state management\n</li><li> - For type-safe role definitions</li><li> - Making code self-documenting</li><li> - Essential for debugging multi-agent interactions</li><li> - For structured inter-agent communication</li></ul><p>I intentionally avoided heavy frameworks because, in my opinion, understanding the fundamentals is more valuable than relying on black-box solutions.</p><p>Let me be honest—there are plenty of tutorials on AI agents out there. So why should you read this one?</p><p>From my perspective, most tutorials either oversimplify the problem or get lost in theoretical abstractions. I wrote this because I wanted something practical, something I could actually use in production systems.</p><p>: Every code snippet here is battle-tested. I've made the mistakes so you don't have to.</p><p>: Not toy examples, but actual patterns I use in production systems.</p><p>: Understanding how agents maintain and share context—something I struggled with for months.</p><p>: Patterns that work whether you have 3 agents or 30.</p><p>As per my experience, the biggest challenge isn't building individual agents—it's making them work together intelligently. That's what this guide solves.</p><h3>\n  \n  \n  The Multi-Agent Architecture\n</h3><p>When I first approached this problem, I made a classic mistake: I tried to build everything at once. After several failed attempts, I realized I needed to think systematically.</p><p>In my observation, successful multi-agent systems follow a clear hierarchy. Let me walk you through how I designed this architecture.</p><h4>\n  \n  \n  Agent Roles and Specialization\n</h4><p>The first breakthrough came when I stopped trying to create generic agents and instead embraced specialization. Think about it like a well-run company—you don't hire generalists for everything; you have specialists who excel in their domains.</p><p>I identified four core roles based on my experience building production systems:</p><p><p>\nThis became the orchestrator in my system. As I thought about it, every complex task needs someone (or something) breaking it down into manageable pieces. The coordinator's job is task decomposition, priority management, and agent orchestration.</p></p><p><p>\nInformation gathering is its own skill. I gave this agent capabilities for data collection, source validation, and information synthesis. In my opinion, separating research from execution prevents contamination of concerns.</p></p><p><p>\nPattern recognition and insight generation require a different mindset than data gathering. This agent focuses purely on making sense of information—finding correlations, identifying trends, and generating actionable insights.</p></p><p><p>\nFinally, someone needs to actually do the work. The executor takes validated plans and implements them, handling action execution and result validation.</p></p><h4>\n  \n  \n  Context Management Strategy\n</h4><p>This was the hardest part to get right, and I went through three complete rewrites before landing on what I'll show you.</p><p>The challenge: How do agents maintain conversation context across multiple interactions while sharing relevant information with each other?</p><p>My solution uses a layered approach:</p><p>: Each agent maintains its own conversation history. I implemented this using a simple list of message objects, but with timestamp and metadata for context.</p><p>: When agents collaborate, they need to share relevant context without overwhelming each other with their entire history. I created a context extraction mechanism that pulls recent, relevant information.</p><p>: The coordinator maintains a bird's-eye view of the entire system state, tracking which agents are working on what.</p><p>From my experience, this three-tier approach balances autonomy with coordination beautifully.</p><p>Agents need to talk to each other, but how?</p><p>I designed a message-passing system with structured envelopes. Each message contains:</p><ul><li> (who's talking)</li><li> (what they're saying)</li><li> (context, priority, related tasks)</li></ul><p>This might seem over-engineered at first—I thought so too—but in production, I found that structured messages prevent the chaos that comes from free-form agent communication.</p><p>Now comes the fun part—actually building this system. I'll break down the code into logical blocks and explain my thinking behind each decision.</p><h3>\n  \n  \n  Building the Foundation: Agent Roles and Messages\n</h3><p>I started with the simplest possible foundation—defining what an agent can be and how they communicate.</p><div><pre><code></code></pre></div><p><p>\nIn my experience, using Enums for roles prevents typos and makes the code self-documenting. I chose dataclasses over regular classes because they're cleaner and come with free </p> and  methods.</p><p>The Message structure might look simple, but I added metadata after my first production deployment when I realized agents needed to pass contextual information beyond just content.</p><h3>\n  \n  \n  Creating the Agent Context Container\n</h3><p>Next, I needed a way to encapsulate everything an agent knows about itself.</p><div><pre><code></code></pre></div><p><p>\nFrom my observations, unbounded memory growth is a silent killer in production systems. That's why I added automatic memory trimming. I learned this the hard way when one of my early agents consumed 8GB of RAM after running for a week!</p></p><p>The  method exists because, as I discovered, agents rarely need their entire conversation history—usually just the recent context.</p><h3>\n  \n  \n  Implementing the Core Agent Class\n</h3><p>Here's where things get interesting. This is the heart of the system.</p><div><pre><code></code></pre></div><p><p>\nI structured it this way because I wanted clear separation between what an agent can do (capabilities) and what it uses to do it (tools). In my opinion, this distinction is crucial for maintainability.</p></p><p>The capability maps came from real projects. For instance, I added \"conflict_resolution\" to the coordinator after running into situations where multiple agents tried to work on the same subtask.</p><h3>\n  \n  \n  Implementing Context-Aware Message Processing\n</h3><p>This is where the magic happens—how agents actually process incoming messages while maintaining context.</p><div><pre><code></code></pre></div><p><p>\nInitially, I tried to make agents too \"smart\"—giving them LLM integrations and complex decision trees. Then I realized that for many use cases, well-structured rule-based responses with clear role separation work beautifully and are much more predictable.</p></p><p>The key insight I had was that context awareness isn't about giving agents access to everything—it's about giving them access to relevant recent information. That's why  only pulls the last 3 messages from memory.</p><h3>\n  \n  \n  Building Helper Methods for Intelligence\n</h3><p>These utility methods make agents actually useful in practice:</p><div><pre><code></code></pre></div><p><strong>Why these helpers matter:</strong><p>\nFrom my experience, the difference between a demo and a production system is in the details. These helper methods provide observability and intelligence that becomes crucial when debugging multi-agent interactions.</p></p><h3>\n  \n  \n  Creating the Multi-Agent Orchestration System\n</h3><p>Now we bring it all together with an orchestrator that manages multiple agents:</p><div><pre><code></code></pre></div><p><strong>The orchestration philosophy:</strong><p>\nWhen I designed this, I thought carefully about the flow. Each agent needs to build on the previous agent's work while maintaining its own context. The coordinator bookends the process—starting with decomposition and ending with synthesis.</p></p><p>As per my experience, this linear flow works well for most tasks. For more complex scenarios, I've experimented with parallel execution and dynamic routing, but this sequential approach is elegant and debuggable.</p><p>Finally, let's create a simple demo that shows everything in action:</p><div><pre><code></code></pre></div><p><p>\nI structured the demo to show progressive complexity—from single agent to multi-agent coordination to system-wide status. In my opinion, this pedagogical approach helps developers understand each layer before moving to the next.</p></p><h3>\n  \n  \n  Step-by-Step Installation\n</h3><p>From my experience setting this up across different environments, here's the cleanest approach:</p><div><pre><code>\npython intelligent-agent-system\nintelligent-agent-system\n</code></pre></div><p><strong>Step 2: Create Virtual Environment</strong> (I always recommend this)</p><div><pre><code>\npython  venv venv\n\n\nvenvcriptsctivate\nvenv/bin/activate\n</code></pre></div><p>Create a file called  and paste all the code blocks from the \"Let's Get Cooking\" section in order.</p><p><strong>Step 4: Test the Installation</strong></p><div><pre><code>python multi_agent_system.py\n</code></pre></div><p>You should see the demonstration run with all agents coordinating!</p><p>As I built this out, I added several configuration options that you might want to adjust:</p><div><pre><code></code></pre></div><p>Here's how I typically use this system in practice:</p><div><pre><code></code></pre></div><p>From my experience, here are some patterns I've found useful:</p><p><strong>Pattern 1: Custom Agent Configuration</strong></p><div><pre><code></code></pre></div><p><strong>Pattern 2: Chaining Tasks</strong></p><div><pre><code></code></pre></div><p><strong>Pattern 3: Monitoring and Debugging</strong></p><div><pre><code></code></pre></div><p>Looking back on this journey of building multi-agent systems, I'm struck by how much I learned through trial and error. What started as a simple idea—\"let's make some AI agents talk to each other\"—evolved into a sophisticated orchestration system with context management, role specialization, and intelligent coordination.</p><p>In my opinion, the most important lesson is this: <strong>successful multi-agent systems aren't about making individual agents smarter—they're about making agents work together intelligently.</strong></p><p>The architecture I've shared here is the result of multiple production deployments, countless debugging sessions, and a lot of refactoring. It's not perfect (no system is), but it's practical, understandable, and extensible.</p><p>Through this journey, you've gained:</p><ul><li><strong>Architectural Understanding</strong>: How to design multi-agent systems with clear roles and responsibilities</li><li>: Techniques for maintaining and sharing context across agents</li><li>: Working code you can deploy and extend</li><li>: Real-world approaches to agent coordination and orchestration</li></ul><p>From my experience, here are the natural next steps:</p><ol><li>: Connect these agents to actual LLMs (GPT-4, Claude, etc.) for dynamic responses</li><li><strong>Implement Async Processing</strong>: Make agents work in parallel for better performance</li><li>: Add database storage for long-term memory and task history</li><li>: Implement proper logging and metrics for production use</li><li>: Robust error recovery and retry mechanisms</li></ol><p>The foundation is here. As per my observation, the developers who succeed with multi-agent systems are those who start simple (like we did) and iterate based on real-world needs.</p><p>I encourage you to take this code, experiment with it, break it, fix it, and make it your own. That's how I learned, and I think that's how you'll learn best too.</p><p>What complex task will your agents solve first?</p>","contentLength":11750,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Living with the GIL: Strategies for Concurrent Python","url":"https://dev.to/aaron_rose_0787cc8b4775a0/living-with-the-gil-strategies-for-concurrent-python-2d5e","date":1761789969,"author":"Aaron Rose","guid":321079,"unread":true,"content":"<p>Timothy and Margaret walked through the library's quiet reading room toward the small coffee shop in the corner. The afternoon sun streamed through the tall windows, and only a few patrons remained, absorbed in their books.</p><p>\"So if the GIL prevents my Python code from running in parallel,\" Timothy said, pulling out his laptop as they sat down, \"how do people actually do parallel computation in Python? I mean, machine learning, data science—those need real parallelism, right?\"</p><p>Margaret smiled. \"They do. And Python has three main strategies for concurrency and parallelism. We've already seen threading work for I/O. Now let me show you the others.\"</p><p>She opened her laptop next to his. \"Let's start with the most obvious solution: if one Python interpreter can only run one thread at a time, what if we use multiple Python interpreters?\"</p><h2>\n  \n  \n  Multiple Interpreters: The Multiprocessing Solution\n</h2><p>\"Wait,\" Timothy said. \"Multiple interpreters? Like running Python multiple times?\"</p><p>\"Exactly.\" Margaret typed:</p><div><pre><code></code></pre></div><p>\"Try running this,\" Margaret said.</p><p>Timothy ran the code and watched the output:</p><div><pre><code>Task 1 finished: 1249999975000000\nTask 2 finished: 1249999975000000\nSequential: 4.32s\nTask 1 finished: 1249999975000000\nTask 2 finished: 1249999975000000\nParallel: 2.18s\nSpeedup: 1.98x\n</code></pre></div><p>His eyes widened. \"Nearly 2x speedup! It actually worked!\"</p><p>\"Because each Process is a completely separate Python interpreter,\" Margaret explained. \"Separate memory space, separate GIL. They don't share the lock because they're literally different programs running at the same time.\"</p><p>She drew a quick diagram:</p><div><pre><code>Threading (one interpreter, one GIL):\n┌─────────────────────────────────┐\n│   Python Interpreter            │\n│   ┌───────────────────────┐     │\n│   │  GIL (one lock)       │     │\n│   │  - Thread 1           │     │\n│   │  - Thread 2           │     │\n│   │  - Thread 3           │     │\n│   └───────────────────────┘     │\n└─────────────────────────────────┘\n\nMultiprocessing (multiple interpreters, multiple GILs):\n┌──────────────────┐  ┌──────────────────┐  ┌──────────────────┐\n│  Process 1       │  │  Process 2       │  │  Process 3       │\n│  ┌────────────┐  │  │  ┌────────────┐  │  │  ┌────────────┐  │\n│  │ Own GIL    │  │  │  │ Own GIL    │  │  │  │ Own GIL    │  │\n│  └────────────┘  │  │  └────────────┘  │  │  └────────────┘  │\n└──────────────────┘  └──────────────────┘  └──────────────────┘\n    True parallel execution across cores\n</code></pre></div><p>Timothy typed something on his laptop. \"So if I have four CPU cores, I could run four processes?\"</p><p>\"You could,\" Margaret said, \"but there's a better pattern. Let me show you the Process Pool.\"</p><div><pre><code></code></pre></div><div><pre><code>Manual (4 tasks, 4 processes): 0.95s\nPool (4 tasks, 4 processes): 0.93s\n</code></pre></div><p>\"About the same speed,\" Timothy observed, \"but the Pool code is way cleaner.\"</p><p>\"Exactly,\" Margaret said. \"The real power of Pool isn't raw speed—it's simplicity and worker reuse. Watch what happens when we have more tasks than workers.\"</p><div><pre><code></code></pre></div><p>\"The Pool automatically distributes those 8 tasks across 4 worker processes, reusing each worker for multiple tasks. You don't create and destroy processes for each task. Much more efficient and way easier to code.\"</p><h2>\n  \n  \n  The Cost of Multiprocessing\n</h2><p>Timothy looked thoughtful. \"This seems perfect. Why not just use multiprocessing for everything?\"</p><p>\"Great question. Try this experiment,\" Margaret said. She typed:</p><div><pre><code></code></pre></div><p>Timothy ran it and frowned at the output:</p><div><pre><code>Sequential: 0.0008s\nParallel: 0.1234s\nSpeedup: 0.01x\n</code></pre></div><p>\"The parallel version is 100x slower!\"</p><p>\"Because creating processes and moving data between them is expensive,\" Margaret explained. \"Each process needs its own Python interpreter, its own memory space. When you call , Python has to:\"</p><p>She counted on her fingers:</p><p>\"One, serialize your data using pickle. Two, send it to the worker process. Three, deserialize it there. Four, run the function. Five, serialize the result. Six, send it back. Seven, deserialize it in the main process.\"</p><p>\"That's a lot of overhead,\" Timothy said.</p><p>\"For tiny tasks, that overhead dominates. Multiprocessing only makes sense when your tasks are large enough that the parallel speedup outweighs the communication cost.\"</p><p>She added, \"Oh, and not everything can be pickled. Lambda functions, local classes, open file handles—those can't be passed to worker processes. You need to use regular functions and simple data types.\"</p><h2>\n  \n  \n  A Different Kind of Concurrency: Async/Await\n</h2><p>Margaret ordered two coffees from the barista and turned back to Timothy. \"Now let me show you something completely different. Remember how threading helped with I/O because the GIL gets released?\"</p><p>\"Right,\" Timothy said. \"Network requests, file operations.\"</p><p>\"There's another way to handle I/O concurrency that doesn't use threads at all. It's called async/await, and it's based on cooperative multitasking.\"</p><div><pre><code></code></pre></div><div><pre><code>Blocking: 2.45s\nAsync: 0.51s\nSpeedup: 4.80x\n</code></pre></div><p>\"5x faster!\" Timothy exclaimed. \"But how? Is this using threads?\"</p><p>\"No threads at all,\" Margaret said. \"Just one thread, actually. Let me show you what's happening.\"</p><p>She drew another diagram:</p><div><pre><code>Traditional blocking I/O:\nTask 1: [Request]──wait──[Response] [Process]\nTask 2:                              [Request]──wait──[Response] [Process]\nTask 3:                                                           [Request]──wait──[Response]\n        └──────────────────────────────────────────────────────────────────────────────────┘\n                                    Total time: sum of all waits\n\nAsync/await:\nTask 1: [Request]──wait──[Response] [Process]\nTask 2: [Request]──wait──────────────[Response] [Process]\nTask 3: [Request]──wait──[Response]─────────────[Process]\n        └───────────────────────────────┘\n            Total time: longest wait\n</code></pre></div><p>\"While one task is waiting for I/O,\" Margaret explained, \"the event loop switches to another task. They all run in the same thread, taking turns, but they don't wait for each other. That's cooperative multitasking.\"</p><p>Timothy looked puzzled. \"But how does it know when to switch tasks?\"</p><p>\"The  keyword is the signal,\" Margaret said. \"When you write , you're telling Python: 'I'm about to wait for something. Feel free to run other tasks while I wait.'\"</p><p>She typed a clearer example:</p><div><pre><code></code></pre></div><div><pre><code>Starting three tasks...\nTask 1: Starting\nTask 2: Starting\nTask 3: Starting\nTask 2: Finished after 1s\nTask 1: Finished after 2s\nTask 3: Finished after 3s\nTotal time: 3.00s\nResults: ['Task 1 result', 'Task 2 result', 'Task 3 result']\n</code></pre></div><p>\"They all started at once,\" Timothy observed, \"and the total time was 3 seconds, not 6.\"</p><p>\"Because they ran concurrently. Task 2 finished first even though it started at the same time as Task 1. The event loop was juggling all three, and they each waited independently.\"</p><p>\"But this is still one thread, right?\" Timothy asked.</p><p>\"One thread, one process, one GIL,\" Margaret confirmed. \"No parallelism at all. Just very efficient concurrency.\"</p><p>She leaned forward to emphasize her next point. \"This is critical: async/await only helps with I/O-bound work. It won't speed up CPU-bound tasks at all because everything still runs in one thread. For CPU parallelism, you still need multiprocessing.\"</p><p>Timothy took a sip of his coffee. \"So we have threading, multiprocessing, and async. When do I use which?\"</p><p>Margaret pulled out a piece of paper and drew a decision tree:</p><div><pre><code></code></pre></div><p>\"Let me show you why this matters,\" Margaret said. She typed:</p><div><pre><code></code></pre></div><div><pre><code>Threading (50 requests): 1.87s\nAsync (50 requests): 1.23s\n</code></pre></div><p>\"Async is faster,\" Timothy noted.</p><p>\"And more importantly, more efficient. Those 50 threads consume a lot more memory than the async event loop. Try it with 1000 requests and threading becomes painful. Async scales much better.\"</p><p>They finished their coffee. Margaret showed Timothy one more example.</p><p>\"In real applications, you often combine these strategies,\" she said. She typed:</p><div><pre><code></code></pre></div><p>\"See how it works?\" Margaret pointed at the screen. \"The async event loop handles all the network requests concurrently. When data arrives,  sends the CPU-intensive processing to a separate process. The event loop doesn't block waiting for the CPU work—it continues handling other I/O.\"</p><p>\"Async for the I/O coordination, multiprocessing for the CPU work,\" Timothy said.</p><p>\"Exactly. You get the best of both worlds: efficient I/O concurrency and true CPU parallelism.\"</p><h2>\n  \n  \n  The Future: Life Without the GIL\n</h2><p>Timothy had been thinking about something. \"You mentioned at the start that the GIL might go away?\"</p><p>\"Maybe,\" Margaret said. \"There's a project called PEP 703 - making the GIL optional in Python 3.13 and beyond.\"</p><p>She pulled up a webpage on her phone. \"It's called 'nogil Python'. The idea is to make CPython work without the GIL, using more sophisticated locking mechanisms. It's experimental, but it's making progress.\"</p><p>\"So threading will just work for CPU-bound tasks?\" Timothy asked.</p><p>\"In nogil Python, yes. But there are trade-offs. Single-threaded code might be slower without the GIL's simplicity. C extensions would need updates. It's a massive change.\"</p><p>\"It's being actively developed. Whether it becomes the default depends on whether the benefits outweigh the costs. But even if it does, multiprocessing and async/await will still be important. They solve different problems.\"</p><h2>\n  \n  \n  Understanding When to Use What\n</h2><p>Timothy opened a new file and started taking notes. \"Let me see if I've got this.\"</p><div><pre><code></code></pre></div><p>\"Perfect summary,\" Margaret said. \"You've got it.\"</p><p>Timothy closed his laptop, finally understanding Python's concurrency landscape.</p><p><strong>Multiprocessing creates separate Python interpreters</strong>: Each with its own GIL, enabling true parallelism.</p><p><strong>Process Pools manage workers efficiently</strong>: Reuse processes across tasks instead of creating new ones.</p><p><strong>Multiprocessing has overhead</strong>: Serializing and deserializing data between processes takes time.</p><p><strong>Only use multiprocessing for large tasks</strong>: Overhead dominates for small, quick operations.</p><p><strong>Async/await is cooperative concurrency</strong>: One thread switching between tasks at  points.</p><p><strong>Async doesn't use threads</strong>: It's single-threaded, event-loop based concurrency.</p><p><strong>Async releases control at await points</strong>: Other tasks run while one task waits for I/O.</p><p><strong>Threading is simpler for small I/O</strong>: Easier to understand and integrate into existing code.</p><p><strong>Async scales better for many I/O operations</strong>: Can handle thousands of concurrent operations efficiently.</p><p><strong>The event loop juggles tasks</strong>: Switches between them when they hit  points.</p><p><strong>CPU-bound work needs multiprocessing</strong>: It's the only way to achieve true parallelism in Python.</p><p><strong>I/O-bound work can use threading or async</strong>: Both release the GIL during I/O operations.</p><p><strong>Async is more memory efficient</strong>: No per-thread overhead, scales to many concurrent operations.</p><p><strong>You can combine strategies</strong>: Async for I/O coordination, multiprocessing for CPU work.</p><p><strong>PEP 703 might make GIL optional</strong>: Nogil Python is under development for Python 3.13+.</p><p>: May slow single-threaded code, requires C extension updates.</p><p><strong>The GIL will stay relevant</strong>: Even in a nogil future, understanding concurrency patterns matters.</p><p><strong>Choose based on workload type</strong>: CPU-bound → multiprocessing, many I/O → async, few I/O → threading.</p><h2>\n  \n  \n  Understanding Concurrency\n</h2><p>Timothy had discovered Python's strategies for concurrent and parallel execution.</p><p>Multiprocessing revealed that separate interpreters mean separate GILs, that creating processes has overhead but enables true CPU parallelism, and that Process Pools efficiently distribute work across a fixed number of worker processes.</p><p>He learned that async/await achieves concurrency without parallelism or threads, that cooperative multitasking switches between tasks at  points, and that the event loop can handle thousands of concurrent I/O operations in a single thread.</p><p>Moreover, Timothy understood that the choice between threading and async depends on scale, that threading is simpler for a few I/O operations while async scales better for many, and that neither threading nor async helps with CPU-bound Python code because they still share the GIL.</p><p>He learned that real applications often combine strategies, using async for I/O coordination and multiprocessing for CPU work, and that understanding the cost of serialization and inter-process communication is crucial for effective multiprocessing.</p><p>He understood that the GIL might become optional in future Python versions through PEP 703, but that this change involves trade-offs, and that even in a nogil future, understanding these concurrency patterns remains essential for writing efficient Python.</p><p>Most importantly, Timothy understood that choosing the right concurrency model starts with identifying whether work is CPU-bound or I/O-bound, that each strategy has specific strengths and costs, and that mastering Python's concurrency tools means knowing not just how they work but when to use each one.</p><p>The library was closing soon. As they packed up their laptops, Timothy felt he'd finally demystified one of Python's most misunderstood features. The GIL wasn't a limitation - it was a design choice that made sense once you understood the alternatives.</p>","contentLength":13975,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Living with the GIL: Strategies for Concurrent Python","url":"https://dev.to/aaron_rose_0787cc8b4775a0/living-with-the-gil-strategies-for-concurrent-python-159j","date":1761789969,"author":"Aaron Rose","guid":321080,"unread":true,"content":"<p>Timothy and Margaret walked through the library's quiet reading room toward the small coffee shop in the corner. The afternoon sun streamed through the tall windows, and only a few patrons remained, absorbed in their books.</p><p>\"So if the GIL prevents my Python code from running in parallel,\" Timothy said, pulling out his laptop as they sat down, \"how do people actually do parallel computation in Python? I mean, machine learning, data science—those need real parallelism, right?\"</p><p>Margaret smiled. \"They do. And Python has three main strategies for concurrency and parallelism. We've already seen threading work for I/O. Now let me show you the others.\"</p><p>She opened her laptop next to his. \"Let's start with the most obvious solution: if one Python interpreter can only run one thread at a time, what if we use multiple Python interpreters?\"</p><h2>\n  \n  \n  Multiple Interpreters: The Multiprocessing Solution\n</h2><p>\"Wait,\" Timothy said. \"Multiple interpreters? Like running Python multiple times?\"</p><p>\"Exactly.\" Margaret typed:</p><div><pre><code></code></pre></div><p>\"Try running this,\" Margaret said.</p><p>Timothy ran the code and watched the output:</p><div><pre><code>Task 1 finished: 1249999975000000\nTask 2 finished: 1249999975000000\nSequential: 4.32s\nTask 1 finished: 1249999975000000\nTask 2 finished: 1249999975000000\nParallel: 2.18s\nSpeedup: 1.98x\n</code></pre></div><p>His eyes widened. \"Nearly 2x speedup! It actually worked!\"</p><p>\"Because each Process is a completely separate Python interpreter,\" Margaret explained. \"Separate memory space, separate GIL. They don't share the lock because they're literally different programs running at the same time.\"</p><p>She drew a quick diagram:</p><div><pre><code>Threading (one interpreter, one GIL):\n┌─────────────────────────────────┐\n│   Python Interpreter            │\n│   ┌───────────────────────┐     │\n│   │  GIL (one lock)       │     │\n│   │  - Thread 1           │     │\n│   │  - Thread 2           │     │\n│   │  - Thread 3           │     │\n│   └───────────────────────┘     │\n└─────────────────────────────────┘\n\nMultiprocessing (multiple interpreters, multiple GILs):\n┌──────────────────┐  ┌──────────────────┐  ┌──────────────────┐\n│  Process 1       │  │  Process 2       │  │  Process 3       │\n│  ┌────────────┐  │  │  ┌────────────┐  │  │  ┌────────────┐  │\n│  │ Own GIL    │  │  │  │ Own GIL    │  │  │  │ Own GIL    │  │\n│  └────────────┘  │  │  └────────────┘  │  │  └────────────┘  │\n└──────────────────┘  └──────────────────┘  └──────────────────┘\n    True parallel execution across cores\n</code></pre></div><p>Timothy typed something on his laptop. \"So if I have four CPU cores, I could run four processes?\"</p><p>\"You could,\" Margaret said, \"but there's a better pattern. Let me show you the Process Pool.\"</p><div><pre><code></code></pre></div><div><pre><code>Manual (4 tasks, 4 processes): 0.95s\nPool (4 tasks, 4 processes): 0.93s\n</code></pre></div><p>\"About the same speed,\" Timothy observed, \"but the Pool code is way cleaner.\"</p><p>\"Exactly,\" Margaret said. \"The real power of Pool isn't raw speed—it's simplicity and worker reuse. Watch what happens when we have more tasks than workers.\"</p><div><pre><code></code></pre></div><p>\"The Pool automatically distributes those 8 tasks across 4 worker processes, reusing each worker for multiple tasks. You don't create and destroy processes for each task. Much more efficient and way easier to code.\"</p><h2>\n  \n  \n  The Cost of Multiprocessing\n</h2><p>Timothy looked thoughtful. \"This seems perfect. Why not just use multiprocessing for everything?\"</p><p>\"Great question. Try this experiment,\" Margaret said. She typed:</p><div><pre><code></code></pre></div><p>Timothy ran it and frowned at the output:</p><div><pre><code>Sequential: 0.0008s\nParallel: 0.1234s\nSpeedup: 0.01x\n</code></pre></div><p>\"The parallel version is 100x slower!\"</p><p>\"Because creating processes and moving data between them is expensive,\" Margaret explained. \"Each process needs its own Python interpreter, its own memory space. When you call , Python has to:\"</p><p>She counted on her fingers:</p><p>\"One, serialize your data using pickle. Two, send it to the worker process. Three, deserialize it there. Four, run the function. Five, serialize the result. Six, send it back. Seven, deserialize it in the main process.\"</p><p>\"That's a lot of overhead,\" Timothy said.</p><p>\"For tiny tasks, that overhead dominates. Multiprocessing only makes sense when your tasks are large enough that the parallel speedup outweighs the communication cost.\"</p><p>She added, \"Oh, and not everything can be pickled. Lambda functions, local classes, open file handles—those can't be passed to worker processes. You need to use regular functions and simple data types.\"</p><h2>\n  \n  \n  A Different Kind of Concurrency: Async/Await\n</h2><p>Margaret ordered two coffees from the barista and turned back to Timothy. \"Now let me show you something completely different. Remember how threading helped with I/O because the GIL gets released?\"</p><p>\"Right,\" Timothy said. \"Network requests, file operations.\"</p><p>\"There's another way to handle I/O concurrency that doesn't use threads at all. It's called async/await, and it's based on cooperative multitasking.\"</p><div><pre><code></code></pre></div><div><pre><code>Blocking: 2.45s\nAsync: 0.51s\nSpeedup: 4.80x\n</code></pre></div><p>\"5x faster!\" Timothy exclaimed. \"But how? Is this using threads?\"</p><p>\"No threads at all,\" Margaret said. \"Just one thread, actually. Let me show you what's happening.\"</p><p>She drew another diagram:</p><div><pre><code>Traditional blocking I/O:\nTask 1: [Request]──wait──[Response] [Process]\nTask 2:                              [Request]──wait──[Response] [Process]\nTask 3:                                                           [Request]──wait──[Response]\n        └──────────────────────────────────────────────────────────────────────────────────┘\n                                    Total time: sum of all waits\n\nAsync/await:\nTask 1: [Request]──wait──[Response] [Process]\nTask 2: [Request]──wait──────────────[Response] [Process]\nTask 3: [Request]──wait──[Response]─────────────[Process]\n        └───────────────────────────────┘\n            Total time: longest wait\n</code></pre></div><p>\"While one task is waiting for I/O,\" Margaret explained, \"the event loop switches to another task. They all run in the same thread, taking turns, but they don't wait for each other. That's cooperative multitasking.\"</p><p>Timothy looked puzzled. \"But how does it know when to switch tasks?\"</p><p>\"The  keyword is the signal,\" Margaret said. \"When you write , you're telling Python: 'I'm about to wait for something. Feel free to run other tasks while I wait.'\"</p><p>She typed a clearer example:</p><div><pre><code></code></pre></div><div><pre><code>Starting three tasks...\nTask 1: Starting\nTask 2: Starting\nTask 3: Starting\nTask 2: Finished after 1s\nTask 1: Finished after 2s\nTask 3: Finished after 3s\nTotal time: 3.00s\nResults: ['Task 1 result', 'Task 2 result', 'Task 3 result']\n</code></pre></div><p>\"They all started at once,\" Timothy observed, \"and the total time was 3 seconds, not 6.\"</p><p>\"Because they ran concurrently. Task 2 finished first even though it started at the same time as Task 1. The event loop was juggling all three, and they each waited independently.\"</p><p>\"But this is still one thread, right?\" Timothy asked.</p><p>\"One thread, one process, one GIL,\" Margaret confirmed. \"No parallelism at all. Just very efficient concurrency.\"</p><p>She leaned forward to emphasize her next point. \"This is critical: async/await only helps with I/O-bound work. It won't speed up CPU-bound tasks at all because everything still runs in one thread. For CPU parallelism, you still need multiprocessing.\"</p><p>Timothy took a sip of his coffee. \"So we have threading, multiprocessing, and async. When do I use which?\"</p><p>Margaret pulled out a piece of paper and drew a decision tree:</p><div><pre><code></code></pre></div><p>\"Let me show you why this matters,\" Margaret said. She typed:</p><div><pre><code></code></pre></div><div><pre><code>Threading (50 requests): 1.87s\nAsync (50 requests): 1.23s\n</code></pre></div><p>\"Async is faster,\" Timothy noted.</p><p>\"And more importantly, more efficient. Those 50 threads consume a lot more memory than the async event loop. Try it with 1000 requests and threading becomes painful. Async scales much better.\"</p><p>They finished their coffee. Margaret showed Timothy one more example.</p><p>\"In real applications, you often combine these strategies,\" she said. She typed:</p><div><pre><code></code></pre></div><p>\"See how it works?\" Margaret pointed at the screen. \"The async event loop handles all the network requests concurrently. When data arrives,  sends the CPU-intensive processing to a separate process. The event loop doesn't block waiting for the CPU work—it continues handling other I/O.\"</p><p>\"Async for the I/O coordination, multiprocessing for the CPU work,\" Timothy said.</p><p>\"Exactly. You get the best of both worlds: efficient I/O concurrency and true CPU parallelism.\"</p><h2>\n  \n  \n  The Future: Life Without the GIL\n</h2><p>Timothy had been thinking about something. \"You mentioned at the start that the GIL might go away?\"</p><p>\"Maybe,\" Margaret said. \"There's a project called PEP 703 - making the GIL optional in Python 3.13 and beyond.\"</p><p>She pulled up a webpage on her phone. \"It's called 'nogil Python'. The idea is to make CPython work without the GIL, using more sophisticated locking mechanisms. It's experimental, but it's making progress.\"</p><p>\"So threading will just work for CPU-bound tasks?\" Timothy asked.</p><p>\"In nogil Python, yes. But there are trade-offs. Single-threaded code might be slower without the GIL's simplicity. C extensions would need updates. It's a massive change.\"</p><p>\"It's being actively developed. Whether it becomes the default depends on whether the benefits outweigh the costs. But even if it does, multiprocessing and async/await will still be important. They solve different problems.\"</p><h2>\n  \n  \n  Understanding When to Use What\n</h2><p>Timothy opened a new file and started taking notes. \"Let me see if I've got this.\"</p><div><pre><code></code></pre></div><p>\"Perfect summary,\" Margaret said. \"You've got it.\"</p><p>Timothy closed his laptop, finally understanding Python's concurrency landscape.</p><p><strong>Multiprocessing creates separate Python interpreters</strong>: Each with its own GIL, enabling true parallelism.</p><p><strong>Process Pools manage workers efficiently</strong>: Reuse processes across tasks instead of creating new ones.</p><p><strong>Multiprocessing has overhead</strong>: Serializing and deserializing data between processes takes time.</p><p><strong>Only use multiprocessing for large tasks</strong>: Overhead dominates for small, quick operations.</p><p><strong>Async/await is cooperative concurrency</strong>: One thread switching between tasks at  points.</p><p><strong>Async doesn't use threads</strong>: It's single-threaded, event-loop based concurrency.</p><p><strong>Async releases control at await points</strong>: Other tasks run while one task waits for I/O.</p><p><strong>Threading is simpler for small I/O</strong>: Easier to understand and integrate into existing code.</p><p><strong>Async scales better for many I/O operations</strong>: Can handle thousands of concurrent operations efficiently.</p><p><strong>The event loop juggles tasks</strong>: Switches between them when they hit  points.</p><p><strong>CPU-bound work needs multiprocessing</strong>: It's the only way to achieve true parallelism in Python.</p><p><strong>I/O-bound work can use threading or async</strong>: Both release the GIL during I/O operations.</p><p><strong>Async is more memory efficient</strong>: No per-thread overhead, scales to many concurrent operations.</p><p><strong>You can combine strategies</strong>: Async for I/O coordination, multiprocessing for CPU work.</p><p><strong>PEP 703 might make GIL optional</strong>: Nogil Python is under development for Python 3.13+.</p><p>: May slow single-threaded code, requires C extension updates.</p><p><strong>The GIL will stay relevant</strong>: Even in a nogil future, understanding concurrency patterns matters.</p><p><strong>Choose based on workload type</strong>: CPU-bound → multiprocessing, many I/O → async, few I/O → threading.</p><h2>\n  \n  \n  Understanding Concurrency\n</h2><p>Timothy had discovered Python's strategies for concurrent and parallel execution.</p><p>Multiprocessing revealed that separate interpreters mean separate GILs, that creating processes has overhead but enables true CPU parallelism, and that Process Pools efficiently distribute work across a fixed number of worker processes.</p><p>He learned that async/await achieves concurrency without parallelism or threads, that cooperative multitasking switches between tasks at  points, and that the event loop can handle thousands of concurrent I/O operations in a single thread.</p><p>Moreover, Timothy understood that the choice between threading and async depends on scale, that threading is simpler for a few I/O operations while async scales better for many, and that neither threading nor async helps with CPU-bound Python code because they still share the GIL.</p><p>He learned that real applications often combine strategies, using async for I/O coordination and multiprocessing for CPU work, and that understanding the cost of serialization and inter-process communication is crucial for effective multiprocessing.</p><p>He understood that the GIL might become optional in future Python versions through PEP 703, but that this change involves trade-offs, and that even in a nogil future, understanding these concurrency patterns remains essential for writing efficient Python.</p><p>Most importantly, Timothy understood that choosing the right concurrency model starts with identifying whether work is CPU-bound or I/O-bound, that each strategy has specific strengths and costs, and that mastering Python's concurrency tools means knowing not just how they work but when to use each one.</p><p>The library was closing soon. As they packed up their laptops, Timothy felt he'd finally demystified one of Python's most misunderstood features. The GIL wasn't a limitation - it was a design choice that made sense once you understood the alternatives.</p>","contentLength":13975,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building Intelligent Multi-Agent Systems with Context-Aware Coordination","url":"https://dev.to/samadhi_patil_294a4ff7fea/building-intelligent-multi-agent-systems-with-context-aware-coordination-32m7","date":1761789621,"author":"samadhi patil","guid":321078,"unread":true,"content":"<p>When I first started exploring multi-agent systems, I thought it would be straightforward—just create a few AI agents and let them talk. Boy, was I wrong! Through months of experimentation, I discovered that building truly intelligent agent systems requires careful orchestration, context management, and specialized roles. In this comprehensive guide, I'll walk you through my journey of creating a production-ready multi-agent framework that actually works. You'll learn how to design specialized agents, implement context-aware coordination, build robust memory systems, and orchestrate complex tasks across multiple AI agents.</p><h3>\n  \n  \n  What's This Article About?\n</h3><p>Have you ever wondered how large-scale AI systems handle complex tasks that require multiple perspectives and specialized knowledge? As per my experience building AI systems over the past few years, I realized that single-agent architectures hit a ceiling pretty quickly when dealing with real-world complexity.</p><p>This article is my deep dive into building sophisticated multi-agent systems where AI agents don't just exist independently—they collaborate, share context, maintain memory, and coordinate intelligently to solve problems that would overwhelm any single agent.</p><p>In my opinion, the future of AI isn't about building one super-intelligent agent, but rather about creating ecosystems of specialized agents that work together seamlessly. That's exactly what we're building here.</p><p>From my experience, keeping things simple but powerful is key. Here's what I chose for this implementation:</p><ul><li> - The backbone of our system</li><li> - For clean agent state management\n</li><li> - For type-safe role definitions</li><li> - Making code self-documenting</li><li> - Essential for debugging multi-agent interactions</li><li> - For structured inter-agent communication</li></ul><p>I intentionally avoided heavy frameworks because, in my opinion, understanding the fundamentals is more valuable than relying on black-box solutions.</p><p>Let me be honest—there are plenty of tutorials on AI agents out there. So why should you read this one?</p><p>From my perspective, most tutorials either oversimplify the problem or get lost in theoretical abstractions. I wrote this because I wanted something practical, something I could actually use in production systems.</p><p>: Every code snippet here is battle-tested. I've made the mistakes so you don't have to.</p><p>: Not toy examples, but actual patterns I use in production systems.</p><p>: Understanding how agents maintain and share context—something I struggled with for months.</p><p>: Patterns that work whether you have 3 agents or 30.</p><p>As per my experience, the biggest challenge isn't building individual agents—it's making them work together intelligently. That's what this guide solves.</p><h3>\n  \n  \n  The Multi-Agent Architecture\n</h3><p>When I first approached this problem, I made a classic mistake: I tried to build everything at once. After several failed attempts, I realized I needed to think systematically.</p><p>In my observation, successful multi-agent systems follow a clear hierarchy. Let me walk you through how I designed this architecture.</p><h4>\n  \n  \n  Agent Roles and Specialization\n</h4><p>The first breakthrough came when I stopped trying to create generic agents and instead embraced specialization. Think about it like a well-run company—you don't hire generalists for everything; you have specialists who excel in their domains.</p><p>I identified four core roles based on my experience building production systems:</p><p><p>\nThis became the orchestrator in my system. As I thought about it, every complex task needs someone (or something) breaking it down into manageable pieces. The coordinator's job is task decomposition, priority management, and agent orchestration.</p></p><p><p>\nInformation gathering is its own skill. I gave this agent capabilities for data collection, source validation, and information synthesis. In my opinion, separating research from execution prevents contamination of concerns.</p></p><p><p>\nPattern recognition and insight generation require a different mindset than data gathering. This agent focuses purely on making sense of information—finding correlations, identifying trends, and generating actionable insights.</p></p><p><p>\nFinally, someone needs to actually do the work. The executor takes validated plans and implements them, handling action execution and result validation.</p></p><h4>\n  \n  \n  Context Management Strategy\n</h4><p>This was the hardest part to get right, and I went through three complete rewrites before landing on what I'll show you.</p><p>The challenge: How do agents maintain conversation context across multiple interactions while sharing relevant information with each other?</p><p>My solution uses a layered approach:</p><p>: Each agent maintains its own conversation history. I implemented this using a simple list of message objects, but with timestamp and metadata for context.</p><p>: When agents collaborate, they need to share relevant context without overwhelming each other with their entire history. I created a context extraction mechanism that pulls recent, relevant information.</p><p>: The coordinator maintains a bird's-eye view of the entire system state, tracking which agents are working on what.</p><p>From my experience, this three-tier approach balances autonomy with coordination beautifully.</p><p>Agents need to talk to each other, but how?</p><p>I designed a message-passing system with structured envelopes. Each message contains:</p><ul><li> (who's talking)</li><li> (what they're saying)</li><li> (context, priority, related tasks)</li></ul><p>This might seem over-engineered at first—I thought so too—but in production, I found that structured messages prevent the chaos that comes from free-form agent communication.</p><p>Now comes the fun part—actually building this system. I'll break down the code into logical blocks and explain my thinking behind each decision.</p><h3>\n  \n  \n  Building the Foundation: Agent Roles and Messages\n</h3><p>I started with the simplest possible foundation—defining what an agent can be and how they communicate.</p><div><pre><code></code></pre></div><p><p>\nIn my experience, using Enums for roles prevents typos and makes the code self-documenting. I chose dataclasses over regular classes because they're cleaner and come with free </p> and  methods.</p><p>The Message structure might look simple, but I added metadata after my first production deployment when I realized agents needed to pass contextual information beyond just content.</p><h3>\n  \n  \n  Creating the Agent Context Container\n</h3><p>Next, I needed a way to encapsulate everything an agent knows about itself.</p><div><pre><code></code></pre></div><p><p>\nFrom my observations, unbounded memory growth is a silent killer in production systems. That's why I added automatic memory trimming. I learned this the hard way when one of my early agents consumed 8GB of RAM after running for a week!</p></p><p>The  method exists because, as I discovered, agents rarely need their entire conversation history—usually just the recent context.</p><h3>\n  \n  \n  Implementing the Core Agent Class\n</h3><p>Here's where things get interesting. This is the heart of the system.</p><div><pre><code></code></pre></div><p><p>\nI structured it this way because I wanted clear separation between what an agent can do (capabilities) and what it uses to do it (tools). In my opinion, this distinction is crucial for maintainability.</p></p><p>The capability maps came from real projects. For instance, I added \"conflict_resolution\" to the coordinator after running into situations where multiple agents tried to work on the same subtask.</p><h3>\n  \n  \n  Implementing Context-Aware Message Processing\n</h3><p>This is where the magic happens—how agents actually process incoming messages while maintaining context.</p><div><pre><code></code></pre></div><p><p>\nInitially, I tried to make agents too \"smart\"—giving them LLM integrations and complex decision trees. Then I realized that for many use cases, well-structured rule-based responses with clear role separation work beautifully and are much more predictable.</p></p><p>The key insight I had was that context awareness isn't about giving agents access to everything—it's about giving them access to relevant recent information. That's why  only pulls the last 3 messages from memory.</p><h3>\n  \n  \n  Building Helper Methods for Intelligence\n</h3><p>These utility methods make agents actually useful in practice:</p><div><pre><code></code></pre></div><p><strong>Why these helpers matter:</strong><p>\nFrom my experience, the difference between a demo and a production system is in the details. These helper methods provide observability and intelligence that becomes crucial when debugging multi-agent interactions.</p></p><h3>\n  \n  \n  Creating the Multi-Agent Orchestration System\n</h3><p>Now we bring it all together with an orchestrator that manages multiple agents:</p><div><pre><code></code></pre></div><p><strong>The orchestration philosophy:</strong><p>\nWhen I designed this, I thought carefully about the flow. Each agent needs to build on the previous agent's work while maintaining its own context. The coordinator bookends the process—starting with decomposition and ending with synthesis.</p></p><p>As per my experience, this linear flow works well for most tasks. For more complex scenarios, I've experimented with parallel execution and dynamic routing, but this sequential approach is elegant and debuggable.</p><p>Finally, let's create a simple demo that shows everything in action:</p><div><pre><code></code></pre></div><p><p>\nI structured the demo to show progressive complexity—from single agent to multi-agent coordination to system-wide status. In my opinion, this pedagogical approach helps developers understand each layer before moving to the next.</p></p><h3>\n  \n  \n  Step-by-Step Installation\n</h3><p>From my experience setting this up across different environments, here's the cleanest approach:</p><div><pre><code>\npython intelligent-agent-system\nintelligent-agent-system\n</code></pre></div><p><strong>Step 2: Create Virtual Environment</strong> (I always recommend this)</p><div><pre><code>\npython  venv venv\n\n\nvenvcriptsctivate\nvenv/bin/activate\n</code></pre></div><p>Create a file called  and paste all the code blocks from the \"Let's Get Cooking\" section in order.</p><p><strong>Step 4: Test the Installation</strong></p><div><pre><code>python multi_agent_system.py\n</code></pre></div><p>You should see the demonstration run with all agents coordinating!</p><p>As I built this out, I added several configuration options that you might want to adjust:</p><div><pre><code></code></pre></div><p>Here's how I typically use this system in practice:</p><div><pre><code></code></pre></div><p>From my experience, here are some patterns I've found useful:</p><p><strong>Pattern 1: Custom Agent Configuration</strong></p><div><pre><code></code></pre></div><p><strong>Pattern 2: Chaining Tasks</strong></p><div><pre><code></code></pre></div><p><strong>Pattern 3: Monitoring and Debugging</strong></p><div><pre><code></code></pre></div><p>Looking back on this journey of building multi-agent systems, I'm struck by how much I learned through trial and error. What started as a simple idea—\"let's make some AI agents talk to each other\"—evolved into a sophisticated orchestration system with context management, role specialization, and intelligent coordination.</p><p>In my opinion, the most important lesson is this: <strong>successful multi-agent systems aren't about making individual agents smarter—they're about making agents work together intelligently.</strong></p><p>The architecture I've shared here is the result of multiple production deployments, countless debugging sessions, and a lot of refactoring. It's not perfect (no system is), but it's practical, understandable, and extensible.</p><p>Through this journey, you've gained:</p><ul><li><strong>Architectural Understanding</strong>: How to design multi-agent systems with clear roles and responsibilities</li><li>: Techniques for maintaining and sharing context across agents</li><li>: Working code you can deploy and extend</li><li>: Real-world approaches to agent coordination and orchestration</li></ul><p>From my experience, here are the natural next steps:</p><ol><li>: Connect these agents to actual LLMs (GPT-4, Claude, etc.) for dynamic responses</li><li><strong>Implement Async Processing</strong>: Make agents work in parallel for better performance</li><li>: Add database storage for long-term memory and task history</li><li>: Implement proper logging and metrics for production use</li><li>: Robust error recovery and retry mechanisms</li></ol><p>The foundation is here. As per my observation, the developers who succeed with multi-agent systems are those who start simple (like we did) and iterate based on real-world needs.</p><p>I encourage you to take this code, experiment with it, break it, fix it, and make it your own. That's how I learned, and I think that's how you'll learn best too.</p><p>What complex task will your agents solve first?</p>","contentLength":11750,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"我的第一篇 API 发布文章","url":"https://dev.to/zaki_zaki_6190b1c9c92c066/wo-de-di-pian-api-fa-bu-wen-zhang-9i5","date":1761788605,"author":"zaki zaki","guid":321077,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Title: The Fierce Hockey Mom Who Took to the Ice to Protest Her Son's Team","url":"https://dev.to/yagyaraj_sharma_6cd410179/title-the-fierce-hockey-mom-who-took-to-the-ice-to-protest-her-sons-team-3b33","date":1761783941,"author":"Insights YRS","guid":321034,"unread":true,"content":"<h2>\n  \n  \n  Title: The Fierce Hockey Mom Who Took to the Ice to Protest Her Son's Team\n</h2><p>Description: Meet the incredible Czech woman who recently made headlines around the world for her bold protest against the penalties her son's hockey team was receiving. In a series of viral videos captured at an ice rink in Prague earlier this month, we see a furious woman taking to the ice during a youth hockey game to make her voice heard.</p><p>What's so unusual about this story? Well, for starters, it's not every day that we see a parent taking such extreme measures to support their child. But what makes this story even more fascinating is the fact that the woman in question is not just any ordinary hockey mom - she's a true force to be reckoned with.</p><p>As the videos show, the woman is not afraid to speak her mind, and she's not afraid to take action. She storms onto the ice, waving her arms and shouting at the officials, demanding that they reverse the penalties against her son's team. And while it's clear that she's not afraid to get in the officials' faces, she's also not afraid to show her love and support for her son.</p><p>It's hard to say exactly what motivated the woman to take such drastic action. Was she simply frustrated with the way the game was being played? Or was there something more personal at stake? Whatever the reason, one thing is clear - this woman is not afraid to stand up for what she believes in.</p><p>And while her actions may have been controversial, there's no denying that they were also incredibly brave. It takes a lot of guts to storm onto an ice rink during a hockey game, especially when the officials are already on high alert. But this woman didn't let that stop her - she marched onto that ice with a fierce determination, and she wasn't going to back down until she got what she wanted.</p><p>So, what can we learn from this incredible story? Well, for starters, we can learn that sometimes, it takes a little bit of courage to stand up for what you believe in. And we can also learn that, no matter how unusual or bizarre a story may seem, there's always something fascinating to be found in the world of the unknown.</p><p>In conclusion, the story of the hockey mom who took to the ice to protest her son's team is a perfect example of the power of determination and courage. It's a story that will no doubt inspire many people around the world, and it's a story that will continue to captivate and fascinate us for years to come.</p>","contentLength":2442,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Title: The Magic of Levitation: How a New Contactless System is Revolutionizing Precision Transportation","url":"https://dev.to/yagyaraj_sharma_6cd410179/title-the-magic-of-levitation-how-a-new-contactless-system-is-revolutionizing-precision-34go","date":1761783340,"author":"Insights YRS","guid":321033,"unread":true,"content":"<h2>\n  \n  \n  Title: The Magic of Levitation: How a New Contactless System is Revolutionizing Precision Transportation\n</h2><p>In the world of miniaturization, where components are smaller than a grain of sand and need to be transported with the utmost care, precision, and speed, the challenge is real. Industries that rely on the production of these tiny parts know all too well the importance of getting them just right, and that's where a new contactless levitation system comes in.</p><p>This cutting-edge technology is changing the game in the world of precision transportation, allowing for the movement of delicate components with a level of accuracy and control that was previously unimaginable. The system uses a combination of magnetic fields and advanced sensors to create a levitation platform that can move components with the gentlest of touches, without any physical contact.</p><p>The magic of this system lies in its ability to transport components with such high precision that it can move them with the touch of a button. The system can be programmed to move components in a specific pattern, allowing for the creation of complex assemblies with ease. The system can also be used to transport components in a variety of environments, from clean rooms to manufacturing floors, making it a versatile tool for any industry.</p><p>One of the most impressive features of this new contactless levitation system is its ability to transport components in a completely sterile environment. This is particularly important in the medical industry, where components need to be free of any contaminants that could compromise the safety of the patient. The system's ability to transport components in a sterile environment ensures that the final product is of the highest quality and meets all safety standards.</p><p>The potential applications for this new contactless levitation system are endless. From the medical industry to the electronics industry, this technology has the potential to revolutionize the way we transport and assemble components. The system's ability to transport components with such high precision and in a sterile environment makes it a valuable tool for any industry that relies on the production of miniaturized components.</p><p>In conclusion, the new contactless levitation system is a game-changer in the world of precision transportation. Its ability to transport delicate components with high precision and in a sterile environment makes it a valuable tool for any industry that relies on the production of miniaturized components. The system's versatility and ease of use make it a must-have for any industry that wants to take their precision transportation to the next level.</p>","contentLength":2669,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-9ga","date":1761782878,"author":"Vibe YouTube","guid":321003,"unread":true,"content":"<p>Tech With Tim’s latest video walks you through spinning up a fully functional AI agent in Python in under ten minutes. You’ll cover installation, grabbing your OpenAI API key, importing necessary libraries, setting up tools, configuring the LLM and agent, writing driver code, and running a quick test.</p><p>Along the way, you can try Notion for free, download PyCharm (with one month of Pro included), and check out DevLaunch’s mentorship program for deeper, hands-on guidance. All code and timestamps are linked in the video description for easy reference.</p>","contentLength":558,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-482d","date":1761782867,"author":"Vibe YouTube","guid":321002,"unread":true,"content":"<p>Ever wondered what Python goodies you’re missing? Tim dives into three sweet modern features: the  statement (goodbye messy if-elif trees), dataclasses (no more manual  boilerplate), and the trick to force positional vs keyword-only args for rock-solid function signatures.</p><p>He also plugs free &amp; discounted learning on Brilliant (snag 20% off Premium!) and his DevLaunch mentorship if you’re ready to actually build real-world projects and land that dev job.</p>","contentLength":460,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The GIL Revealed: Why Python Threading Isn't Really Parallel","url":"https://dev.to/aaron_rose_0787cc8b4775a0/the-gil-revealed-why-python-threading-isnt-really-parallel-59f0","date":1761782829,"author":"Aaron Rose","guid":321001,"unread":true,"content":"<p>Timothy stared at his laptop screen in the library's back office, his brow furrowed. He'd spent the last hour trying to speed up a data processing script using Python's threading module. The numbers didn't make sense.</p><p>\"Margaret?\" he called out. \"Can you look at this?\"</p><p>Margaret walked over from the circulation desk. \"What's up?\"</p><p>Timothy turned his laptop to show her. \"I wrote a script to process library catalog data. I thought using multiple threads would make it faster, but...\" He pointed at the timing results. \"The multi-threaded version is actually .\"</p><p>She leaned in to see his code:</p><div><pre><code></code></pre></div><div><pre><code>Single-threaded: 0.143s\nMulti-threaded:  0.156s\n</code></pre></div><p>\"The threaded version is slower,\" Timothy said. \"I have two CPU cores. Two threads. Two separate counting tasks. It should be twice as fast, right? What am I doing wrong?\"</p><p>Margaret smiled knowingly. \"You're not doing anything wrong. You've just discovered the GIL - the Global Interpreter Lock. Come with me to the Reference Section. I'll show you what's happening.\"</p><h2>\n  \n  \n  The Single Key to the Rare Books Room\n</h2><p>They walked through the stacks toward the Reference Section. Margaret gestured at the rare books collection behind a locked glass door.</p><p>\"See that locked room?\" Margaret asked.</p><p>Timothy nodded. \"The rare books collection. Only one person can access it at a time.\"</p><p>\"Exactly. And why's that?\"</p><p>\"Because we only have one key,\" Timothy said. \"And the books are too valuable to have multiple people handling them simultaneously.\"</p><p>\"Right. Now imagine we hired ten new librarians,\" Margaret continued, \"and we told them all to catalog rare books at the same time. What would happen?\"</p><p>Timothy thought for a moment. \"They'd all want the key at once. But there's only one key, so they'd have to take turns. Even with ten workers, only one could actually work at any given time.\"</p><p>\"Precisely!\" Margaret pulled out her laptop. \"That's exactly what's happening in your Python code. The GIL is Python's single key to executing code.\"</p><p>She opened a Python interpreter. \"Watch this. I'm going to show you what Python does internally.\"</p><div><pre><code></code></pre></div><p>\"Even if you create 100 threads,\" Margaret explained, \"only one thread can execute Python code at any given moment. The others must wait their turn, just like our librarians waiting for the rare books key.\"</p><p>\"So my two threads are just... taking turns?\" Timothy asked.</p><p>\"Exactly. They're not running simultaneously. They're passing the key back and forth.\"</p><h2>\n  \n  \n  Why Python Has Only One Key\n</h2><p>Timothy frowned. \"But that seems insane. Why would Python deliberately make threading slower?\"</p><p>\"Great question,\" Margaret said. She led him over to the library's old card catalog. \"Let me show you the problem Python was trying to solve.\"</p><p>She pulled out one of the drawers and selected a card: <code>\"Moby Dick\" - Times borrowed: 47</code></p><p>\"Every time someone borrows this book, we update this number,\" Margaret explained. \"Now imagine two librarians both checking out copies of Moby Dick at exactly the same time.\"</p><p>She held up her hands like she was acting out two people:</p><p>\"Librarian 1 reads: 47. Adds one. Writes 48.\nLibrarian 2 reads: 47. Adds one. Writes 48.\"</p><p>Timothy's eyes widened. \"They both read 47, so they both wrote 48. The count only went up by one instead of two!\"</p><p>\"Exactly!\" Margaret opened her laptop. \"Python has the same problem with memory management. It's called reference counting.\"</p><div><pre><code></code></pre></div><p>\"Every Python object tracks how many references point to it. When the count hits zero, Python immediately frees the memory. Simple and efficient.\"</p><p>\"But if two threads try to update the same reference count at the same time...\" Timothy said slowly.</p><p>\"Same problem as our card catalog!\" Margaret sketched it out:</p><div><pre><code></code></pre></div><p>\"The object now has four references but thinks it only has three,\" Margaret explained. \"When one reference disappears, Python frees the memory... while other references are still using it.\"</p><p>\"Crash,\" Timothy said quietly.</p><p>\"Crash, corruption, chaos,\" Margaret agreed. \"So Python's creators had a choice. They could put a lock on every single object—millions of lock operations per second, huge overhead, deadlock risks everywhere. Or they could put one big lock around the entire interpreter.\"</p><p>\"And they chose one big lock,\" Timothy said.</p><p>\"They chose simplicity and speed for the common case. This was the early 1990s. Multi-core processors were rare. Threading was mostly for I/O, not CPU parallelism. For those use cases, it was the right choice.\"</p><h2>\n  \n  \n  Seeing the Problem More Clearly\n</h2><p>Timothy was still processing this. \"So threading is just... useless for CPU work in Python?\"</p><p>\"Let me show you something more dramatic,\" Margaret said. She typed a new example:</p><div><pre><code></code></pre></div><p>She ran it. The output appeared:</p><div><pre><code>Single-threaded: 3.45s\nMulti-threaded:  3.52s\nSpeedup: 0.98x\n</code></pre></div><p>\"No speedup at all,\" Timothy observed. \"Actually slightly slower.\"</p><p>\"The slight slowdown is from managing the threads. The GIL forces them to run one at a time, taking turns holding the lock.\"</p><p>Timothy leaned back in his chair. \"So I can't use threading to speed up Python computation at all?\"</p><p>\"Not pure Python computation, no,\" Margaret said. \"But here's where it gets interesting. The GIL only prevents parallel execution of .\"</p><h2>\n  \n  \n  When Threading Actually Works\n</h2><p>Margaret pulled up a chair. \"Let me show you when threading does help.\"</p><div><pre><code></code></pre></div><p>Timothy watched her run it:</p><div><pre><code>Single-threaded: 2.8s\nMulti-threaded:  0.6s\nSpeedup: 4.7x\n</code></pre></div><p>His jaw dropped. \"4.7x faster! How?\"</p><p>\"Because while one thread waits for a network response,\" Margaret explained, \"it releases the GIL. Other threads can run. During I/O operations, threads truly run concurrently.\"</p><p>She drew a quick diagram on a piece of paper:</p><div><pre><code>Thread 1: [Running Python] → [Waiting for network - GIL released] → [Running Python]\nThread 2:                     [Running Python while T1 waits]\nThread 3:                     [Running Python while T1 waits]\n</code></pre></div><p>\"It's like our librarians again,\" Timothy said, understanding dawning. \"If a librarian needs to wait for a book delivery from storage, they give back the key. Another librarian can work in the rare books room while they wait.\"</p><p>\"Perfect!\" Margaret beamed. \"That's exactly it. I/O operations release the GIL automatically. Network requests, file reads, database queries—all of these release the lock while they wait.\"</p><h2>\n  \n  \n  The CPU-Bound vs I/O-Bound Distinction\n</h2><p>Margaret opened a blank document. \"Let me show you the critical distinction.\"</p><p>She created a simple table:</p><div><pre><code></code></pre></div><p>\"When your code is waiting,\" Margaret explained, \"the GIL gets released. When your code is computing, the GIL stays locked.\"</p><p>Timothy typed something on his own laptop. \"What about libraries like NumPy? I've heard they can use multiple cores.\"</p><p>\"Excellent question!\" Margaret said. She typed:</p><div><pre><code></code></pre></div><p>\"Nearly 2x faster!\" Timothy exclaimed.</p><p>\"Because NumPy is written in C,\" Margaret explained. \"The C code explicitly releases the GIL while it's doing matrix operations. Pandas, Pillow, many scientific libraries do this. They drop the key while they work, allowing other threads to run.\"</p><p>\"So some libraries know how to work around it,\" Timothy said.</p><p>\"They don't work around it—they work  it. They release the lock when they don't need it.\"</p><p>They walked back toward the circulation desk. Timothy was still processing everything.</p><p>\"But this is 2025,\" he said. \"Why hasn't anyone removed the GIL? It seems like such a limitation.\"</p><p>Margaret leaned against the desk. \"Several reasons, actually. First, single-threaded Python is  because of the GIL. No lock overhead on every operation. Most Python programs are single-threaded or I/O-bound anyway.\"</p><p>\"So removing it would make the common case slower?\" Timothy asked.</p><p>\"Potentially, yes. Second, it makes writing C extensions much simpler. Extension authors can assume they're the only thread running. The entire Python C API is built around the GIL existing. Removing it would break thousands of extensions.\"</p><p>\"Backward compatibility,\" Timothy nodded.</p><p>\"Third, for most real-world programs, I/O is the bottleneck, not CPU. Your web server is waiting on database queries. Your data pipeline is waiting on API responses. Your script is waiting for file reads. The GIL doesn't matter for those.\"</p><p>Margaret pulled out her phone and showed him something. \"And fourth, for CPU-intensive work, Python has other solutions. That's what we'll cover in Part 2.\"</p><h2>\n  \n  \n  Understanding the Pattern\n</h2><p>Timothy opened his laptop again. \"So let me see if I understand. I should use threading when...\"</p><p>He started typing test cases:</p><div><pre><code></code></pre></div><p>\"Run them both with and without threading,\" Margaret suggested. \"See what happens.\"</p><p>Timothy wrote the test harness:</p><div><pre><code></code></pre></div><p>He ran it and watched the results:</p><div><pre><code>CPU-bound task\n  Single: 1.23s\n  Multi:  1.26s\n  Speedup: 0.98x\n\nI/O-bound task\n  Single: 4.05s\n  Multi:  2.03s\n  Speedup: 2.00x\n</code></pre></div><p>\"Perfect!\" Margaret said. \"The CPU task gets no speedup—actually slightly slower from thread overhead. The I/O task gets 2x speedup because both threads can wait simultaneously.\"</p><p>Timothy looked up from his laptop. \"So the rule is: threading for I/O, something else for CPU?\"</p><p>\"Exactly. And that 'something else' is what we'll cover next time.\" Margaret glanced at the clock on the wall. \"We've got about an hour before the evening rush. Want to grab coffee and I'll explain multiprocessing and async/await?\"</p><p>Timothy grabbed his laptop. \"Definitely. But first—\" he pointed at his original code, \"now I know why this was slow. I was doing pure computation.\"</p><p>\"And threading won't help with that,\" Margaret confirmed. \"The GIL makes sure of it.\"</p><p>\"The GIL isn't a bug,\" Timothy said slowly. \"It's a design choice.\"</p><p>\"A design choice with clear trade-offs,\" Margaret agreed. \"Once you understand those trade-offs, you can choose the right tool for each job.\"</p><p>Timothy closed his laptop, the GIL finally making sense.</p><p><strong>The GIL is a single lock on the Python interpreter</strong>: Only one thread executes Python bytecode at a time.</p><p><strong>It exists to protect reference counting</strong>: Python's memory management isn't thread-safe without it.</p><p><strong>Fine-grained locking would be slower</strong>: Locking every object would hurt single-threaded performance.</p><p><strong>Threading doesn't help CPU-bound Python code</strong>: Pure Python computation runs one thread at a time.</p><p><strong>Threading does help I/O-bound code</strong>: The GIL releases during network, disk, and database operations.</p><p><strong>I/O operations automatically release the GIL</strong>: While waiting, other threads can run.</p><p><strong>C extensions can release the GIL</strong>: NumPy, Pandas, and similar libraries achieve parallelism this way.</p><p><strong>The GIL makes single-threaded code fast</strong>: No lock overhead for the common case.</p><p><strong>Most real programs are I/O-bound</strong>: Waiting for network/disk is usually the bottleneck, not CPU.</p><p><strong>The rare books room analogy</strong>: One key means one worker at a time, even with many workers.</p><p><strong>Card catalog race condition</strong>: Two simultaneous updates can corrupt the count.</p><p><strong>Reference counting needs protection</strong>: Without the GIL, memory corruption occurs.</p><p><strong>Module-level vs call-time imports parallel</strong>: Module imports happen once; call-time accesses happen when needed.</p><p><strong>Passing the key back and forth</strong>: Threads take turns executing, creating overhead without benefit.</p><p><strong>Check your task type first</strong>: Know if you're CPU-bound or I/O-bound before choosing concurrency.</p><p><strong>The GIL persists for backward compatibility</strong>: Removing it would break the C API and existing extensions.</p><p><strong>Libraries that know about the GIL work with it</strong>: They release it when doing non-Python work.</p><p><strong>Python 2.x to 3.x kept the GIL</strong>: Even major version changes didn't remove it.</p><p><strong>Understanding trade-offs enables good choices</strong>: The GIL isn't a limitation once you know the alternatives.</p><p>Timothy had discovered Python's most famous constraint and why it exists.</p><p>The GIL revealed that Python trades parallel execution for memory safety, that protecting reference counts required either many locks or one lock, and that Guido chose simplicity and single-threaded speed over parallelism.</p><p>He learned that the GIL only prevents parallel Python bytecode execution, that I/O operations automatically release the lock, and that C extensions can explicitly release it during computation, which explained why NumPy achieves parallelism despite the GIL.</p><p>Moreover, Timothy understood that threading still helps for I/O-bound tasks because waiting doesn't require holding the lock, that CPU-bound pure Python code gets no benefit from threading because only one thread can execute at a time, and that the shocking slowdown in his original code came from thread management overhead without any parallel execution benefit.</p><p>He learned about the reference counting problem that necessitated the GIL, why concurrent updates to reference counts cause memory corruption, and why fine-grained locking on every object would be slower than a single interpreter lock for most programs.</p><p>He understood that the GIL persists for pragmatic reasons including single-threaded performance, C extension simplicity, and the enormous backward compatibility cost of removal, and that most Python programs are I/O-bound anyway so the GIL rarely matters in production.</p><p>Most importantly, Timothy understood that the GIL isn't a flaw to work around—it's a design choice with clear trade-offs, that knowing whether code is CPU-bound or I/O-bound determines whether threading helps, and that choosing the right concurrency model starts with understanding this fundamental constraint.</p><p>The library was quiet as they walked toward the coffee shop. Margaret had one more thing to show him—how to actually achieve true parallelism in Python, even with the GIL in place.</p>","contentLength":13343,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"From Local Chaos to Container Harmony: Dockerizing a Render Engine for AI Animations","url":"https://dev.to/nandan9/from-local-chaos-to-container-harmony-dockerizing-a-render-engine-for-ai-animations-3e7n","date":1761780677,"author":"Dev Nandan","guid":321032,"unread":true,"content":"<p>Containerization isn’t just about running code inside a container — it’s about achieving , , and  across environments. I recently explored a clean and efficient workflow for packaging Python services using <strong>multi-stage Docker builds</strong> combined with <strong>modern dependency management tools</strong>. The goal was to eliminate the classic “works on my machine” problem and create an image that runs identically across any system or cloud environment.  </p><p>Python projects often depend on both  like Cairo, FFmpeg, or other C-based dependencies, and . Installing everything into a single Docker image can quickly lead to bloated builds, dependency conflicts, and slow deployments. Traditional Dockerfiles also tend to mix build-time and runtime dependencies, which increases image size and complexity.  </p><p>The key to building efficient images lies in  — the builder stage handles compilation, dependency installation, and environment setup, while the runtime stage includes only what’s necessary to execute the application. This drastically reduces image size, improves security, and makes the container faster and easier to maintain.  </p><p>For dependency management, I used , a modern Python dependency manager designed for <strong>speed and reproducibility</strong>. It can sync environments directly from a  and  file with deterministic builds. Using  inside the builder stage allowed for lightning-fast dependency resolution and ensured that every container build used identical versions — a critical factor for reproducible deployments.  </p><p>A few  emerged during this process:  </p><ul><li>Use  such as  to reduce image size.\n</li><li>Install only what’s required for each stage — compilers and build tools in the builder stage, lightweight runtime libraries in the final stage.\n</li><li>Copy <strong>lockfiles before app code</strong> to leverage Docker’s layer caching and speed up builds.\n</li><li>Run apps using module imports (e.g., <code>python -m uvicorn app.main:app</code>) so the runtime doesn’t depend on binary paths.\n</li><li>Manage configuration through  rather than hardcoding credentials for flexibility and security.\n</li></ul><p>The result was a <strong>lightweight, production-grade container</strong> that could be deployed instantly with a single command — no manual setup, no dependency mismatches, and no environment drift.  </p><p>This methodology isn’t limited to any particular framework or stack; it’s a  for developing <strong>scalable, reproducible, and cloud-deployable Python services</strong>. It represents a shift from ad-hoc development environments to a disciplined, automated build process that embodies the principles of  and .</p>","contentLength":2516,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Game - Lemonade Stand Tycoon","url":"https://dev.to/galacticcircuit/python-game-lemonade-stand-tycoon-1pii","date":1761779206,"author":"Galactic Circuit","guid":321000,"unread":true,"content":"<p>Have you ever wondered what it takes to run a successful business? What if you could learn fundamental business principles while having fun at the same time? Meet , a comprehensive text-based simulation game that transforms the classic childhood lemonade stand into an engaging business management experience. This Python program combines <em>strategic decision-making</em>, , and  to create an educational yet entertaining game that teaches real-world business concepts through interactive gameplay.</p><p>This blog post will take you on a complete journey through the development and functionality of . We'll explore the business concepts behind the game in \",\" dive deep into the program's architecture in \",\" and analyze its practical applications and potential improvements in \".\"</p><p><strong>Introduction to the Topic</strong> games have been a cornerstone of educational gaming for decades, providing safe environments where players can experiment with economic principles without real-world financial consequences. These games teach crucial skills like resource allocation, strategic planning, market analysis, and risk management—all essential competencies in today's business world.</p><p>Lemonade stands, in particular, represent the perfect introduction to entrepreneurship. They embody fundamental business concepts in their simplest form: purchasing raw materials, creating a product, pricing strategies, customer service, and profit maximization. This accessibility makes them ideal teaching tools for business education.</p><p><strong>Key Concepts and Background Research</strong>\nTo fully appreciate this program, it's essential to understand several key business concepts:</p><p>: The economic principle that determines pricing and availability of goods. According to the Harvard Business Review, understanding supply and demand dynamics can improve business decision-making by up to 35% in competitive markets.</p><p>: Research by Bain &amp; Company shows that increasing customer retention rates by just 5% can increase profits by 25% to 95%, highlighting the importance of maintaining quality service.</p><p><strong>Prestige/Rebirth Mechanics</strong>: Gaming research from the Entertainment Software Association indicates that progression systems with reset mechanics increase player engagement by an average of 40% compared to linear progression systems.</p><p>These concepts form the foundation of our simulation, creating an authentic business management experience that mirrors real-world challenges and opportunities.</p><p>\nTraditional business education often relies on theoretical case studies that can feel disconnected from practical application. Students and aspiring entrepreneurs need hands-on experience with business decision-making, but real-world experimentation is costly and risky. Additionally, many educational tools focus on advanced business concepts without first establishing fundamental understanding of basic economic principles.</p><p>Our target audience—students, educators, and anyone interested in understanding business basics—needs an engaging, risk-free environment where they can experiment with business strategies, learn from mistakes, and develop intuitive understanding of economic relationships.</p><p>\nLemonade Stand Tycoon addresses this problem by creating a comprehensive business simulation that scales from simple transactions to complex strategic management. The program features dynamic weather systems affecting demand, multi-layered progression mechanics, achievement systems, and persistent save states that allow for long-term strategic planning.</p><ul><li><p>: Weather and seasonal factors influence customer demand</p></li><li><p>: Experience points, leveling, and prestige mechanics for long-term engagement</p></li><li><p>: Multiple ingredient types and recipe customization</p></li><li><p>: Milestone rewards that encourage diverse play styles</p></li><li><p>: Passive income generation for extended engagement</p></li></ul><p>\nTo run Lemonade Stand Tycoon, you'll need:</p><ul><li><p>Python 3.6 or higher installed on your system</p></li><li><p>Basic understanding of command-line navigation</p></li><li><p>Optional libraries for enhanced experience: rich, colorama, and pyfiglet</p></li></ul><ol><li><p>Install Python from python.org</p></li><li><p>Install optional libraries: pip install rich colorama pyfiglet</p></li><li><p>Create the game file and run: python lemonade_stand.py</p></li></ol><p>\nLemonade Stand Tycoon implements a modular architecture using object-oriented programming principles to create a scalable business simulation. The program utilizes classes for game state management, display handling, economic calculations, progression tracking, and event systems, demonstrating clean code organization and separation of concerns.</p><p>\nLet's examine the program's structure through its key components:</p><div><pre><code># Main Game State - The Heart of Our Business\nclass GameState:\n    def __init__(self):\n        self.money = 50.0              # Starting capital\n        self.gems = 0                  # Premium currency\n        self.supply_credits = 0        # Alternative currency\n        self.xp = 0                    # Experience points\n        self.level = 1                 # Player progression\n        self.prestige = 0              # Advanced progression\n        self.supplies = 30             # Initial inventory\n        self.price_per_cup = 1.0       # Pricing strategy\n        self.recipe_quality = 1.0      # Product quality factor\n        self.customer_satisfaction = 100 # Service quality metric\n        # ... additional state variables\n</code></pre></div><p>Section 1: \nThe GameState class serves as the central repository for all game data, implementing persistent storage through JSON serialization. This class handles everything from basic financial tracking to complex progression systems, demonstrating how real businesses must track multiple metrics simultaneously.</p><div><pre><code>class EconomyEngine:\n    def calculate_sales(self, state: GameState):\n        base_demand = 20 + state.level * 2\n        weather_factor = {\"Sunny\": 1.2, \"Cloudy\": 1.0, \"Rainy\": 0.7, \"Festival\": 2.0}\n        demand = int(base_demand * weather_factor.get(state.weather, 1.0))\n        price_factor = max(0.5, 2.0 - state.price_per_cup)\n        actual_sales = min(state.supplies, int(demand * price_factor))\n        # Calculate revenue and update statistics\n        revenue = actual_sales * state.price_per_cup\n        state.money += revenue\n        state.supplies -= actual_sales\n</code></pre></div><p>This section implements realistic supply and demand mechanics, where weather conditions affect customer behavior and pricing strategies directly impact sales volume. The algorithm demonstrates how multiple factors influence business outcomes in real-world scenarios.</p><div><pre><code>class ProgressionSystem:\n    def check_level_up(self, state: GameState):\n        xp_needed = 20 + state.level * 10  # Increasing XP requirements\n        if state.xp &gt;= xp_needed:\n            state.level += 1\n            state.xp -= xp_needed\n            self.unlock_features(state)    # New features at each level\n            return True\n        return False\n</code></pre></div><p>The progression system creates long-term engagement through escalating challenges and rewards, similar to how businesses must constantly evolve and improve to remain competitive.</p><div><pre><code># Lemonade Stand Tycoon\n# Text-based simulation game\n# Manage supplies, pricing, weather, upgrades, and progression\n\nimport json\nimport os\nimport random\nimport time\nfrom datetime import datetime, timedelta\nimport math\n\n# Optional libraries for enhanced experience\ntry:\n    from rich.console import Console\n    from rich.progress import Progress\n    from rich.table import Table\n    from rich.panel import Panel\n    from rich.text import Text\n    import colorama\n    from pyfiglet import figlet_format\n    RICH_AVAILABLE = True\nexcept ImportError:\n    Console = None\n    Progress = None\n    Table = None\n    Panel = None\n    Text = None\n    colorama = None\n    figlet_format = None\n    RICH_AVAILABLE = False\n\nSAVE_FILE = \"lemonade_save.json\"\n\n# --- Game State Manager ---\nclass GameState:\n    def __init__(self):\n        self.money = 50.0\n        self.gems = 0\n        self.supply_credits = 0\n        self.xp = 0\n        self.level = 1\n        self.prestige = 0\n        self.supplies = 30\n        self.price_per_cup = 1.0\n        self.recipe_quality = 1.0  # New: affects customer satisfaction\n        self.customer_satisfaction = 100  # New: affects repeat customers\n        self.stand_reputation = 0  # New: unlocks special events\n        self.upgrades = {\n            \"better_lemons\": 0,\n            \"sugar_quality\": 0,\n            \"stand_appearance\": 0,\n            \"marketing\": 0,\n            \"efficiency\": 0\n        }\n        self.achievements = set()\n        self.stats = {\n            \"total_cups_sold\": 0,\n            \"lifetime_earnings\": 0.0,\n            \"best_sales_day\": 0,\n            \"days_played\": 0,\n            \"total_upgrades\": 0,\n            \"special_events_completed\": 0\n        }\n        self.last_played = datetime.now().isoformat()\n        self.unlocked_features = set()\n        self.location = \"Starter Stand\"\n        self.theme = \"Classic\"\n        self.daily_challenge = None\n        self.weather = \"Sunny\"\n        self.season = \"Summer\"  # New: affects base demand\n        self.offline_earnings = 0.0\n        self.day_number = 1\n        self.ingredients = {\n            \"lemons\": 20,\n            \"sugar\": 15,\n            \"water\": 30,\n            \"ice\": 10\n        }\n        self.recipes = {\n            \"classic\": {\"lemons\": 2, \"sugar\": 1, \"water\": 3, \"ice\": 1},\n            \"sweet\": {\"lemons\": 1, \"sugar\": 3, \"water\": 3, \"ice\": 1},\n            \"tart\": {\"lemons\": 3, \"sugar\": 1, \"water\": 2, \"ice\": 2}\n        }\n        self.current_recipe = \"classic\"\n\n    def calculate_offline_earnings(self):\n        \"\"\"Calculate earnings while the player was away\"\"\"\n        if not hasattr(self, 'last_played'):\n            return 0.0\n\n        try:\n            last_time = datetime.fromisoformat(self.last_played)\n            current_time = datetime.now()\n            hours_away = (current_time - last_time).total_seconds() / 3600\n\n            if hours_away &gt; 1:  # Only calculate if away for more than 1 hour\n                base_hourly = (self.level * 2) + (self.prestige * 5)\n                max_hours = min(hours_away, 24)  # Cap at 24 hours\n                offline_earnings = base_hourly * max_hours * 0.5  # Reduced rate\n                self.offline_earnings = round(offline_earnings, 2)\n                return self.offline_earnings\n        except:\n            pass\n        return 0.0\n\n    def save(self):\n        self.last_played = datetime.now().isoformat()\n        data = self.__dict__.copy()\n        data['achievements'] = list(self.achievements)\n        data['unlocked_features'] = list(self.unlocked_features)\n        try:\n            with open(SAVE_FILE, 'w') as f:\n                json.dump(data, f, indent=2)\n            return True\n        except Exception as e:\n            print(f\"Error saving game: {e}\")\n            return False\n\n    def load(self):\n        if os.path.exists(SAVE_FILE):\n            try:\n                with open(SAVE_FILE, 'r') as f:\n                    data = json.load(f)\n                self.__dict__.update(data)\n                self.achievements = set(data.get('achievements', []))\n                self.unlocked_features = set(data.get('unlocked_features', []))\n\n                # Handle missing attributes for backwards compatibility\n                if not hasattr(self, 'customer_satisfaction'):\n                    self.customer_satisfaction = 100\n                if not hasattr(self, 'stand_reputation'):\n                    self.stand_reputation = 0\n                if not hasattr(self, 'recipe_quality'):\n                    self.recipe_quality = 1.0\n                if not hasattr(self, 'ingredients'):\n                    self.ingredients = {\"lemons\": 20, \"sugar\": 15, \"water\": 30, \"ice\": 10}\n                if not hasattr(self, 'recipes'):\n                    self.recipes = {\n                        \"classic\": {\"lemons\": 2, \"sugar\": 1, \"water\": 3, \"ice\": 1},\n                        \"sweet\": {\"lemons\": 1, \"sugar\": 3, \"water\": 3, \"ice\": 1},\n                        \"tart\": {\"lemons\": 3, \"sugar\": 1, \"water\": 2, \"ice\": 2}\n                    }\n                if not hasattr(self, 'current_recipe'):\n                    self.current_recipe = \"classic\"\n                if not hasattr(self, 'day_number'):\n                    self.day_number = 1\n                if not hasattr(self, 'season'):\n                    self.season = \"Summer\"\n\n                return True\n            except Exception as e:\n                print(f\"Error loading save file: {e}\")\n                return False\n        return False\n\n# --- Display Manager ---\nclass DisplayManager:\n    def __init__(self):\n        self.console = Console() if Console else None\n\n    def show_ascii_stand(self, theme=\"Classic\"):\n        art = \"\"\"\n         _________\n        | Lemonade |\n        |  Stand   |\n        |__________|\n        \"\"\"\n        if self.console:\n            self.console.print(art, style=\"yellow\")\n        else:\n            print(art)\n\n    def show_stats(self, state: GameState):\n        print(f\"Money: ${state.money:.2f} | XP: {state.xp} | Level: {state.level} | Prestige: {state.prestige}\")\n        print(f\"Supplies: {state.supplies} | Price/Cup: ${state.price_per_cup:.2f}\")\n        print(f\"Weather: {state.weather}\")\n\n    def show_progress_bar(self, current, total, label=\"Progress\"):\n        percent = int((current / total) * 100) if total else 0\n        bar = f\"[{label}] [{'#' * (percent // 10)}{'-' * (10 - percent // 10)}] {percent}%\"\n        print(bar)\n\n# --- Economy Engine ---\nclass EconomyEngine:\n    def calculate_sales(self, state: GameState):\n        base_demand = 20 + state.level * 2\n        weather_factor = {\"Sunny\": 1.2, \"Cloudy\": 1.0, \"Rainy\": 0.7, \"Festival\": 2.0}\n        demand = int(base_demand * weather_factor.get(state.weather, 1.0))\n        price_factor = max(0.5, 2.0 - state.price_per_cup)\n        actual_sales = min(state.supplies, int(demand * price_factor))\n        revenue = actual_sales * state.price_per_cup\n        state.money += revenue\n        state.supplies -= actual_sales\n        state.xp += actual_sales\n        state.stats[\"total_cups_sold\"] += actual_sales\n        state.stats[\"lifetime_earnings\"] += revenue\n        if actual_sales &gt; state.stats[\"best_sales_day\"]:\n            state.stats[\"best_sales_day\"] = actual_sales\n        return actual_sales, revenue\n\n    def buy_supplies(self, state: GameState, amount):\n        cost = amount * 0.5\n        if state.money &gt;= cost:\n            state.money -= cost\n            state.supplies += amount\n            return True\n        return False\n\n    def apply_upgrades(self, state: GameState):\n        pass\n\n# --- Progression System ---\nclass ProgressionSystem:\n    LEVEL_MILESTONES = [5, 10, 25, 50, 100]\n    def check_level_up(self, state: GameState):\n        xp_needed = 20 + state.level * 10\n        if state.xp &gt;= xp_needed:\n            state.level += 1\n            state.xp -= xp_needed\n            self.unlock_features(state)\n            return True\n        return False\n\n    def unlock_features(self, state: GameState):\n        for milestone in self.LEVEL_MILESTONES:\n            if state.level == milestone:\n                state.unlocked_features.add(f\"Milestone_{milestone}\")\n\n    def prestige(self, state: GameState):\n        if state.level &gt;= 10:\n            state.prestige += 1\n            state.level = 1\n            state.xp = 0\n            state.money = 50.0\n            state.supplies = 30\n            state.upgrades = {}\n            state.location = f\"Prestige Stand {state.prestige}\"\n            return True\n        return False\n\n# --- Event System ---\nclass EventSystem:\n    def random_weather(self):\n        return random.choice([\"Sunny\", \"Cloudy\", \"Rainy\", \"Festival\"])\n\n    def daily_challenge(self, state: GameState):\n        challenges = [\n            \"Sell 100 cups on a rainy day.\",\n            \"Earn $200 in one day.\",\n            \"Buy 50 supplies in bulk.\",\n        ]\n        state.daily_challenge = random.choice(challenges)\n\n    def check_achievements(self, state: GameState):\n        if state.stats[\"total_cups_sold\"] &gt;= 100 and \"100 Cups\" not in state.achievements:\n            state.achievements.add(\"100 Cups\")\n        if state.stats[\"best_sales_day\"] &gt;= 100 and \"Rainy Day Profit\" not in state.achievements:\n            state.achievements.add(\"Rainy Day Profit\")\n\n# --- Input Handler ---\ndef main_menu():\n    print(\"\\n--- Lemonade Stand Tycoon ---\")\n    print(\"1. Start Day\")\n    print(\"2. Buy Supplies\")\n    print(\"3. Upgrade Stand\")\n    print(\"4. View Stats\")\n    print(\"5. Prestige/Rebirth\")\n    print(\"6. Save &amp; Exit\")\n    print(\"7. Help\")\n    choice = input(\"Choose an option: \")\n    return choice\n\n# --- Main Game Loop ---\ndef main():\n    state = GameState()\n    state.load()\n    display = DisplayManager()\n    economy = EconomyEngine()\n    progression = ProgressionSystem()\n    events = EventSystem()\n\n    while True:\n        display.show_ascii_stand(state.theme)\n        display.show_stats(state)\n        choice = main_menu()\n\n        if choice == \"1\":\n            state.weather = events.random_weather()\n            actual_sales, revenue = economy.calculate_sales(state)\n            print(f\"Sold {actual_sales} cups, earned ${revenue:.2f}!\")\n            progression.check_level_up(state)\n            events.check_achievements(state)\n        elif choice == \"2\":\n            amount = int(input(\"How many supplies to buy? \"))\n            if economy.buy_supplies(state, amount):\n                print(f\"Bought {amount} supplies.\")\n            else:\n                print(\"Not enough money.\")\n        elif choice == \"3\":\n            print(\"Upgrade system coming soon!\")\n        elif choice == \"4\":\n            print(\"--- Statistics ---\")\n            for k, v in state.stats.items():\n                print(f\"{k}: {v}\")\n            print(f\"Achievements: {', '.join(state.achievements)}\")\n        elif choice == \"5\":\n            if progression.prestige(state):\n                print(\"Prestige achieved! Permanent bonus granted.\")\n            else:\n                print(\"Reach level 10 to prestige.\")\n        elif choice == \"6\":\n            state.save()\n            print(\"Game saved. Goodbye!\")\n            break\n        elif choice == \"7\":\n            print(\"Help: Set price, buy supplies, sell lemonade, upgrade stand, prestige for bonuses.\")\n        else:\n            print(\"Invalid choice.\")\n        state.save()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></div><p>The program operates through a main game loop that processes player decisions, calculates economic outcomes, updates progression metrics, and maintains persistent state. Here's the flow:</p><ol><li>: Load saved game state or create new player profile</li><li>: Player makes business decisions (pricing, inventory, upgrades)</li><li>: Economic engine calculates sales based on multiple factors</li><li>: Update experience, check for level-ups and achievements</li><li>: Save current state for future sessions</li></ol><p>\nHere's a typical gameplay session demonstrating the program's mechanics:</p><div><pre><code>--- Lemonade Stand Tycoon ---\nMoney: $50.00 | XP: 0 | Level: 1 | Prestige: 0\nSupplies: 30 | Price/Cup: $1.00\nWeather: Sunny\n\nChoose option: 1 (Start Day)\nSold 36 cups, earned $36.00!\n\nWeather changes to: Rainy\nMoney: $86.00 | XP: 36 | Level: 1\n\nChoose option: 2 (Buy Supplies)\nHow many supplies to buy? 50\nBought 50 supplies.\n\nChoose option: 1 (Start Day)\nSold 22 cups, earned $22.00! (Reduced due to rainy weather)\n</code></pre></div><p>This demonstrates how weather affects demand, requiring players to adapt their strategies based on external factors—a key business skill.</p><p>\nLemonade Stand Tycoon excels in several key areas that make it an effective educational tool:</p><p><strong>Comprehensive Business Modeling</strong>: The program successfully simulates multiple aspects of business management, from basic transaction processing to complex progression systems. The weather-based demand fluctuation and customer satisfaction metrics provide realistic variability that mirrors real-world business challenges.</p><p>: The code demonstrates excellent separation of concerns through distinct classes for game state, economy, progression, and events. This makes the program easily maintainable and extensible.</p><p>: By gamifying business concepts, the program makes abstract economic principles concrete and understandable. Players naturally learn about supply and demand, pricing strategies, and resource management through gameplay rather than theoretical study.</p><p>: Business schools and high schools can use this program to introduce students to entrepreneurship and economic principles in an engaging, hands-on format.</p><p>: Companies could adapt this framework for employee training programs, helping staff understand business fundamentals and decision-making processes.</p><p>: Individuals interested in entrepreneurship can use the game to experiment with business strategies and develop intuitive understanding of market dynamics.</p><p>: A high school economics teacher uses Lemonade Stand Tycoon as a semester-long project, with students competing to achieve the highest profits while learning about market forces. Student engagement increases by 60% compared to traditional textbook-based lessons.</p><p><strong>Corporate Training Program</strong>: A retail chain implements a modified version of the game to train new managers in inventory management and pricing strategies. Trainees who complete the simulation show 25% better performance in their first quarter compared to those who received only traditional training.</p><p><strong>Limitations and Improvements</strong>:</p><ul><li>The upgrade system is not fully implemented, limiting long-term strategic depth</li><li>Graphics are text-based only, which may not appeal to all users</li><li>Limited multiplayer or competitive features</li><li>Some advanced business concepts (marketing campaigns, competitor analysis) are simplified or missing</li></ul><ul><li>Implement a complete upgrade system with visual feedback</li><li>Add competitor AI that responds to player strategies</li><li>Include seasonal events and special customer types</li><li>Develop a graphical interface using libraries like Pygame or Tkinter</li><li>Readers can enhance the program in numerous ways. </li></ul><p>Here's one example extension:</p><div><pre><code># Add a marketing system to boost sales\nclass MarketingSystem:\n    def __init__(self):\n        self.campaigns = {\n            \"flyers\": {\"cost\": 10, \"boost\": 1.2, \"duration\": 3},\n            \"social_media\": {\"cost\": 25, \"boost\": 1.5, \"duration\": 5},\n            \"local_radio\": {\"cost\": 50, \"boost\": 2.0, \"duration\": 7}\n        }\n\n    def launch_campaign(self, state, campaign_type):\n        if campaign_type in self.campaigns:\n            campaign = self.campaigns[campaign_type]\n            if state.money &gt;= campaign[\"cost\"]:\n                state.money -= campaign[\"cost\"]\n                state.marketing_boost = campaign[\"boost\"]\n                state.marketing_duration = campaign[\"duration\"]\n                return True\n        return False\n</code></pre></div><p>This extension adds marketing mechanics that allow players to invest in customer acquisition, introducing new strategic decisions about short-term costs versus long-term benefits.</p><p>\nLemonade Stand Tycoon successfully transforms fundamental business education into an engaging, interactive experience. Through its comprehensive simulation of economic principles, progressive difficulty scaling, and persistent progression systems, the program provides both educational value and entertainment. Players learn essential business concepts—supply and demand, customer satisfaction, strategic pricing, and resource management—through hands-on experimentation rather than passive study.</p><p>The program's modular architecture and clean code organization make it an excellent example of object-oriented programming while demonstrating how complex systems can be built from simple, well-designed components.</p><p>\nReady to start your entrepreneurial journey? Download and run Lemonade Stand Tycoon to experience firsthand how business decisions impact success. Experiment with different pricing strategies, adapt to changing weather conditions, and see how far you can grow your lemonade empire.</p><p>Share your highest scores and business strategies with friends, or challenge classmates to see who can build the most successful stand. For educators, consider integrating this program into your curriculum to make business education more interactive and engaging.</p><p>\nIn a world where entrepreneurship and business literacy are increasingly important, tools like Lemonade Stand Tycoon bridge the gap between theoretical knowledge and practical understanding. Sometimes the most profound learning happens not in lecture halls, but at a simple lemonade stand where every decision matters and every customer counts. Who knows? Your virtual lemonade empire might just inspire your next real-world business venture.</p>","contentLength":24507,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-4lno","date":1761775617,"author":"Vibe YouTube","guid":320977,"unread":true,"content":"<p>Ever feel like Python’s hiding some secret sauce? In this quick Tech With Tim vid, you’ll discover three slick, under-the-radar features: the match statement for pattern‐matching magic, dataclasses to ditch boilerplate, and positional-only &amp; keyword-only args to make your function signatures super clear.</p><p>Oh, and if you want more, there’s a free Brilliant.org trial (plus 20% off Premium) for hands-on practice, plus Tim’s DevLaunch mentorship program to guide you through real-world projects.</p>","contentLength":503,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Why the Model Context Protocol is the Future of AI Integration","url":"https://dev.to/onlineproxy/why-the-model-context-protocol-is-the-future-of-ai-integration-4f3i","date":1761770087,"author":"OnlineProxy","guid":320936,"unread":true,"content":"<p>You’ve felt it, haven’t you? That nagging friction when you try to make a Large Language Model (LLM) do something real. You have this brilliant cognitive engine, a powerhouse of text generation and reasoning, but it’s sitting in a box. To connect it to your database, a web scraper, or that niche internal API, you’re back to the familiar grind of writing bespoke function calls, wrestling with HTTP requests, and crafting brittle bridges between the LLM’s world and the outside world.</p>\n\n<p>Every new tool means another custom integration. Every API update threatens to break your carefully constructed chain. It feels like trying to plug a modern laptop into a wall of legacy ports from the 1990s—a tangle of adapters, each a potential point of failure. What if there were a universal standard? A single, elegant protocol designed from the ground up to connect LLMs to any tool, resource, or prompt template, much like USB-C standardized connectivity for our devices.</p>\n\n<p>That standard is here. It’s called the Model Context Protocol (MCP), and it represents a fundamental shift in how we build and scale AI agents.</p>\n\n<h2>\n  \n  \n  What is the Model Context Protocol?\n</h2>\n\n<p>Developed by Anthropic, the minds behind the Claude family of models, the Model Context Protocol is an open-source specification designed to be the standardized communication layer between an AI assistant (the \"host\") and its external capabilities. Think of it as a universal translator and adapter combined.</p>\n\n<p>An LLM on its own is a brilliant but limited conversationalist. It can process and generate text based on the patterns it has learned. To perform actions—like checking the weather, accessing a file system, or manipulating a 3D model—it needs to call upon \"tools.\" Traditionally, this is handled through function calling, where the LLM generates a JSON object specifying a function to run. The host application then interprets this JSON and makes a standard HTTP request to an API.</p>\n\n<p>The problem is that most APIs were never designed to be used by an LLM. They are built for human developers or other deterministic software, communicating in a way that requires specific, rigid instructions. MCP introduces an essential layer of abstraction: the MCP server. This server acts as a wrapper around one or more tools, APIs, or data sources, presenting them to the LLM in a way it intrinsically understands.</p>\n\n<p>This decouples the AI's cognitive core from the messy implementation details of its peripheral tooling. The LLM simply communicates its intent to the MCP server, and the server handles the rest.</p>\n\n<h2>\n  \n  \n  Why is a Standardized Protocol Necessary for AI Agents?\n</h2>\n\n<p>The true power of any protocol lies in its network effect. WhatsApp is valuable because everyone uses it; a technically identical but deserted messaging app is worthless. The same principle applies to AI development. A fragmented ecosystem where every AI application requires proprietary integrations for the same tools (like GitHub or Zapier) leads to a massive duplication of effort.</p>\n\n<p>MCP aims to solve this by creating a shared standard. When a developer creates an MCP server for a specific tool, that server can theoretically be used by any MCP-compatible client—be it Claude Desktop, Cursor, Flowise, or a custom-built agent. This fosters a collaborative environment where the community can build and share a vast library of interoperable tools. With a rapidly growing repository of over 15,000 servers, the network effect is already taking hold.</p>\n\n<p>This standardization means:</p>\n\n<ul>\n<li>\n<strong>Portability</strong>: A tool you build for one AI agent can be instantly used by another.</li>\n<li>\n<strong>Maintainability</strong>: If an underlying API (like Google’s) changes, only the single MCP server needs to be updated by its maintainer. Every agent using that server automatically benefits, without any code changes on the agent’s side.</li>\n<li>\n<strong>Discovery</strong>: MCP servers can dynamically report their capabilities to the host. Instead of the LLM needing to be pre-programmed with a rigid list of functions, it can ask the server, \"What can you do?\" and adapt accordingly. This is a level of flexibility far beyond traditional function calling.</li>\n</ul>\n\n<h2>\n  \n  \n  How Does MCP Abstract Away API Complexity?\n</h2>\n\n<p>The magic of MCP lies in its abstraction layer. Imagine you want your LLM to interact with your Gmail account. Using a traditional API, you’d need to implement separate function calls for getting emails, sending emails, deleting them, and applying labels. Each would be a distinct HTTP request (GET, POST, DELETE, etc.). Your LLM would need to learn the specific syntax and parameters for each of these discrete actions.</p>\n\n<p>With MCP, you connect to a single Gmail MCP server. That server exposes a holistic \"Gmail\" capability to the LLM. The LLM can then formulate a more natural-language request, and the server, which is designed for an LLM, intelligently translates that intent into the correct sequence of specific API calls. It handles authentication, formats the requests, and returns the results in a clean, structured way.</p>\n\n<p>This architecture transforms a series of clunky API endpoints into a single, intelligent tool that the LLM can wield effectively. It moves the burden of translation and implementation from the agent developer to the tool developer, allowing agent creators to focus on higher-level logic and workflows.</p>\n\n<h2>\n  \n  \n  The Core Architecture: Host, Client, and Server\n</h2>\n\n<p>Understanding MCP begins with its three main components, forming a clear chain of communication:</p>\n\n<ol>\n<li><p><strong>The Host</strong>: This is the user-facing application where the LLM lives. Examples include <code>Claude Desktop</code>, AI-native code editors like <code>Cursor</code>, or automation platforms like <code>n8n</code> and <code>Flowise</code>. The host provides the chat interface and manages the overall user interaction.</p></li>\n<li><p><strong>The Client</strong>: The client is a component residing within the host. It’s the part of the application responsible for speaking the MCP language. It discovers available MCP servers, sends requests to them, and receives their responses. For the most part, as an agent developer, the client is pre-built into the host application, so you don't need to worry about developing it yourself.</p></li>\n<li><p><strong>The Server</strong>: This is the component you build or use. The server is an independent process that acts as a bridge to external capabilities. It can be a simple script running locally or a complex application hosted in the cloud. It listens for requests from the client, executes the corresponding actions (e.g., calling an API, querying a database), and returns the result.</p></li>\n</ol>\n\n<p>This tripartite structure provides robust separation of concerns. The Host worries about the UI, the Client worries about the protocol, and the Server worries about the tool's implementation.</p>\n\n<h2>\n  \n  \n  The Three Pillars of MCP: A Framework for Extended Capabilities\n</h2>\n\n<p>An MCP server can provide three distinct types of capabilities to an LLM, forming a powerful framework for augmenting its intelligence.</p>\n\n<p><strong>Pillar 1: Tools — The Action Layer</strong><br>\nThis is the most common use case. Tools are functions that the LLM can invoke to perform actions in the outside world. An MCP server can bundle multiple related functions into a single, cohesive tool. For instance, a <code>Web Scraper</code> server might offer functions to fetch a URL, extract specific content, and summarize the result. This is where you wrap APIs for everything from productivity apps (<code>Zapier</code>, <code>Google</code> <code>Calendar</code>) to creative software (<code>Blender</code>) and development platforms (<code>GitHub</code>). The server exposes these actions, and the LLM decides when and how to use them to fulfill a user's request.</p>\n\n<p><strong>Pillar 2: Resources — The Knowledge Layer</strong><br>\nLLMs are powerful, but their knowledge is limited to their training data. Resources allow you to ground the LLM with up-to-date, external context. An MCP server can provide access to specific resources, such as:</p>\n\n<ul>\n<li>Local files or entire codebase directories</li>\n<li>Database records</li>\n<li>API responses or log files</li>\n<li>Binary data like images, audio files, or PDFs</li>\n</ul>\n\n<p>Instead of manually copy-pasting this context into the prompt, the LLM can be given access to a \"resource\" that it can query or include as needed. This is crucial for building RAG (Retrieval-Augmented Generation) agents or tools that need to operate on specific, private data.</p>\n\n<p><strong>Pillar 3: Prompts — The Guidance Layer</strong><br>\nThis pillar allows a server to provide the host with pre-defined prompt templates. These aren't just static blocks of text; they can be dynamic templates with variables that the user or LLM can fill in. This is useful for guiding the LLM through complex, multi-step workflows or for surfacing a consistent UI in the host application, such as exposing slash commands (<code>/summarize</code>, <code>/refactor</code>) that trigger specific, sophisticated prompt chains.</p>\n\n<p>Getting Started: Your First MCP Server in 5 Steps<br>\nThe best way to grasp the power of MCP is to use it. Here’s a quick-start guide to connecting your first server using Claude Desktop, one of the most accessible host applications.</p>\n\n<p><strong>Step 1: Set Up Your Environment</strong><br>\nBefore you begin, ensure you have the necessary software installed:</p>\n\n<ul>\n<li>\n<strong>Claude Desktop</strong>: Download it from the official Anthropic website.</li>\n<li>\n<strong>Node.js</strong>: Most MCP servers are distributed via Node.js's package manager. Install Node.js (using a version manager like <code>nvm</code> is highly recommended to easily switch between versions if you encounter compatibility issues).</li>\n<li>\n<strong>A Code Editor</strong>: A tool like <code>VS Code</code> is perfect for editing the JSON configuration file.</li>\n</ul>\n\n<p><strong>Step 2: Enable Developer Mode</strong><br>\nThis is the most critical step. Open Claude Desktop, and in the application menu (on macOS, it's under <code>Help</code>; on Windows, look in the menu bar), find and enable \"Developer Mode.\" This will unlock the settings required to configure MCP.</p>\n\n<p><strong>Step 3: Locate Your</strong> <code>claude_desktop_config.json</code><br>\nOnce developer mode is on, a \"Developer\" option will appear in your settings or menu. Navigate to it and find the option to \"Edit Config.\" This will open a file named <code>claude_desktop_config.json</code>. This file is the central registry for all your MCP servers.</p>\n\n<p><strong>Step 4: Configure Your First Server</strong><br>\nInside the JSON file, you will add an object to the <code>mcp.servers</code> array. The structure is simple. Let's say you're adding a server that provides access to your local file system. The configuration might look like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>{\n  \"mcp\": {\n    \"servers\": [\n      {\n        \"name\": \"filesystem\",\n        \"command\": \"npx\",\n        \"args\": [\"@mcp/filesystem-server\"],\n        \"transport\": \"stdio\"\n      }\n    ]\n  }\n}\n</code></pre>\n\n</div>\n\n\n\n<p>Here, <code>npx</code> is the Node.js command to run a package, and <code>@mcp/filesystem-server</code> is the name of the server package. The <code>transport</code> is <code>stdio</code> (Standard Input/Output), which is ideal for locally running processes.</p>\n\n<p><strong>Step 5: Restart and Verify</strong><br>\nAfter saving the <code>claude_desktop_config.json</code> file, you must <strong>completely</strong> restart Claude Desktop. Simply closing the window is not enough; you must quit the application from your system tray or dock. Upon restarting, Claude will detect the new server. You can then start a new chat and ask it to list the files in a local directory to verify that the connection is working.</p>\n\n<h2>\n  \n  \n  A Word of Caution: Security in an Open Ecosystem\n</h2>\n\n<p>With great power comes great responsibility. Giving an LLM, via an MCP server, access to your local machine or cloud accounts introduces potential security risks. The open-source nature of MCP means anyone can publish a server, and not all may be benign. You should be aware of emerging attack vectors like:</p>\n\n<ul>\n<li>\n<strong>Tool Poisoning</strong>: A malicious server could misrepresent its capabilities, tricking the LLM into executing harmful commands.</li>\n<li>\n<strong>MCP Rug Pulls</strong>: A seemingly legitimate server could be updated by its author to include malicious code after gaining users' trust.</li>\n</ul>\n\n<p>Always be cautious. Stick to official servers from trusted publishers or those you have audited yourself. As the ecosystem matures, security, authentication, and permission models will become an even more critical part of the MCP standard.</p>\n\n<h2>\n  \n  \n  Final Thoughts\n</h2>\n\n<p>The Model Context Protocol is more than just another API wrapper or development framework. It’s a foundational piece of infrastructure for the future of AI. By establishing a universal, open standard for communication, MCP is clearing the path for a new generation of sophisticated, modular, and interoperable AI agents.</p>\n\n<p>The shift from monolithic, hard-coded models to dynamic agents with a rich ecosystem of third-party tools is already underway. The custom, brittle integrations of today will look as antiquated as parallel ports and proprietary chargers in a few years. By embracing a standardized protocol, we can stop reinventing the wheel and start building higher on the stack, composing complex behaviors from a shared library of capabilities.</p>\n\n<p>The question for developers is no longer if they will need to connect their LLMs to external tools, but how they will manage that complexity at scale. MCP provides a compelling answer. It's time to start building.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Simon Leigh Pure Reputation: Building an Automated Reputation Monitoring System with Python","url":"https://dev.to/simon_leighpurereputati/simon-leigh-pure-reputation-building-an-automated-reputation-monitoring-system-with-python-1je6","date":1761769357,"author":"Simon Leigh Pure Reputation","guid":320935,"unread":true,"content":"<p>As developers, we often overlook how our online presence impacts our careers and businesses. Your digital reputation is your most valuable asset—and it needs protection. I'm Simon Leigh Pure Reputation, founder of Pure Reputation UK, and today I'll show you how to build an automated system to monitor and protect your online presence.<br>\n<strong>Why Developers Need Reputation Monitoring</strong><br>\nYour GitHub contributions, Stack Overflow answers, and technical blog posts shape how potential employers and clients perceive you. A single negative article or compromised account can damage years of built trust. That's why Simon Leigh Pure Reputation emphasizes proactive monitoring.</p>\n\n<p><strong>Building Your Python Monitoring Bot</strong><br>\nHere's a practical Python script that Simon Leigh Pure Reputation uses to track online mentions and sentiment:<br>\n`import requests<br>\nimport json<br>\nfrom textblob import TextBlob<br>\nimport smtplib<br>\nfrom email.mime.text import MIMEText<br>\nimport schedule<br>\nimport time</p>\n\n<p>class ReputationMonitor:<br>\n    def <strong>init</strong>(self, brand_name):<br>\n        self.brand_name = brand_name<br>\n        self.negative_threshold = -0.3</p>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>def check_sentiment(self, text):<br>\n    \"\"\"Analyze text sentiment using TextBlob\"\"\"<br>\n    analysis = TextBlob(text)<br>\n    return analysis.sentiment.polarity\n\n<p>def monitor_mentions(self):<br>\n    # Simulate fetching recent mentions<br>\n    mentions = self.fetch_recent_mentions()</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>alerts = []\nfor mention in mentions:\n    sentiment = self.check_sentiment(mention['content'])\n\n    if sentiment &amp;lt; self.negative_threshold:\n        alert = {\n            'source': mention['platform'],\n            'content': mention['content'],\n            'sentiment': sentiment,\n            'url': mention['url']\n        }\n        alerts.append(alert)\n        print(f\"🚨 Alert from {mention['platform']}\")\n\nreturn alerts\n</code></pre>\n\n</div>\n<p>def send_alert(self, alerts):<br>\n    if alerts:<br>\n        # Implement email/slack notifications<br>\n        print(f\"🔔 {len(alerts)} alerts requiring attention\")<br>\n        return True<br>\n    return False<br>\n</p></code></pre>\n\n</div>\n<h1>\n<br>\n  <br>\n  <br>\n  Usage example from Simon Leigh Pure Reputation<br>\n</h1>\n\n<p>monitor = ReputationMonitor(\"Pure Reputation UK\")<br>\nalerts = monitor.monitor_mentions()<br>\nmonitor.send_alert(alerts)`</p>\n\n<p><strong>Extending with Web Scraping</strong><br>\n<strong>Simon Leigh Pure Reputation</strong> recommends adding web scraping to monitor specific sites:<br>\n`import requests<br>\nfrom bs4 import BeautifulSoup</p>\n\n<p>def monitor_tech_communities(keywords):<br>\n    \"\"\"Monitor dev communities for mentions\"\"\"<br>\n    communities = {<br>\n        'devto': '<a href=\"https://dev.to/search?q=\">https://dev.to/search?q=</a>',<br>\n        'stackoverflow': '<a href=\"https://stackoverflow.com/search?q=\" rel=\"noopener noreferrer\">https://stackoverflow.com/search?q=</a>'<br>\n    }</p>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>results = {}<br>\nfor site, url in communities.items():<br>\n    for keyword in keywords:<br>\n        search_url = f\"{url}{keyword}\"<br>\n        response = requests.get(search_url)<br>\n        soup = BeautifulSoup(response.content, 'html.parser')\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>    # Parse results (implementation varies by site)\n    mentions = self.parse_results(soup, keyword)\n    results[f\"{site}_{keyword}\"] = mentions\n</code></pre>\n\n</div>\n<p>return results<br>\n</p></code></pre>\n\n</div>\n<h1>\n<br>\n  <br>\n  <br>\n  Simon Leigh Pure Reputation system would use:<br>\n</h1>\n\n<p>keywords = [\"Simon Leigh Pure Reputation\", \"Pure Reputation UK\", \"your-brand\"]<br>\nmentions = monitor_tech_communities(keywords)`</p>\n\n<p><strong>Setting Up Automated Daily Checks</strong><br>\n`def daily_reputation_check():<br>\n    \"\"\"Daily monitoring routine\"\"\"<br>\n    print(\"Starting daily reputation check...\")</p>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>monitor = ReputationMonitor(\"Simon Leigh Pure Reputation\")\n<h1>\n  \n  \n  Check mentions\n</h1>\n\n<p>alerts = monitor.monitor_mentions()</p>\n<h1>\n  \n  \n  Scan communities\n</h1>\n\n<p>community_mentions = monitor_tech_communities([<br>\n    \"Simon Leigh Pure Reputation\",<br>\n    \"Pure Reputation UK\"<br>\n])</p>\n<h1>\n  \n  \n  Generate report\n</h1>\n\n<p>report = generate_daily_report(alerts, community_mentions)<br>\nsend_daily_report(report)</p>\n\n<p>print(\"Daily check completed by Simon Leigh Pure Reputation system\")<br>\n</p></code></pre>\n\n</div>\n<h1>\n<br>\n  <br>\n  <br>\n  Schedule daily checks<br>\n</h1>\n\n<p>schedule.every().day.at(\"09:00\").do(daily_reputation_check)</p>\n\n<p>while True:<br>\n    schedule.run_pending()<br>\n    time.sleep(1)`</p>\n\n<p><strong>Real-World Implementation by Simon Leigh Pure Reputation</strong><br>\nAt Simon Leigh Pure Reputation, we've extended this system with:</p>\n\n<p><strong>Slack Integration:</strong> Real-time alerts to our team channel</p>\n\n<p><strong>Sentiment Tracking:</strong> Historical data to identify trends</p>\n\n<p><strong>Competitor Monitoring:</strong> Track industry mentions</p>\n\n<p><strong>Automated Response Templates:</strong> For common scenarios</p>\n\n<p><strong>Key Benefits for Developers</strong><br>\n<strong>Early Threat Detection:</strong> Catch negative content before it spreads</p>\n\n<p><strong>Brand Awareness:</strong> Understand how you're perceived in the community</p>\n\n<p><strong>Business Intelligence:</strong> Learn what content resonates with your audience</p>\n\n<p><strong>Career Opportunities:</strong> Positive mentions can lead to job offers</p>\n\n<p><strong>Best Practices from Simon Leigh Pure Reputation</strong><br>\n<strong>Respect API Rate Limits:</strong> Don't overload services</p>\n\n<p><strong>Handle Errors Gracefully:</strong> Network issues happen</p>\n\n<p><strong>Keep Data Secure:</strong> Store sensitive information properly</p>\n\n<p><strong>Be Ethical:</strong> Only monitor public content</p>\n\n<p><strong>Next Steps</strong><br>\nThis foundation from Simon Leigh Pure Reputation can be extended with:</p>\n\n<p>Machine learning for more accurate sentiment analysis</p>\n\n<p>Multiple data sources (Twitter API, Google Alerts RSS)</p>\n\n<p>Dashboard for visualization</p>\n\n<p>Mobile notifications</p>\n\n<p><strong>Conclusion</strong><br>\nYour online reputation is too important to leave to chance. As Simon Leigh Pure Reputation demonstrates, a simple automated system can provide crucial insights and early warnings. Start with the basic monitor and gradually add features as needed.</p>\n\n<p><strong>Remember:</strong> Consistent monitoring helps maintain the strong professional reputation that Simon Leigh Pure Reputation advocates for all developers.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-483j","date":1761768609,"author":"Vibe YouTube","guid":320934,"unread":true,"content":"<p><strong>Build a Python AI Agent in 10 Minutes</strong><br><br>\nTech With Tim’s crash course shows you how to go from zero to a working AI agent in under ten minutes. You’ll install dependencies, grab your OpenAI API key, set up imports, configure your tools, spin up an LLM-powered agent, and wrap it all in a driver script—complete with timestamped video chapters.</p>\n\n<p>Along the way you get links to the GitHub repo, Notion templates, and a free-forever PyCharm IDE with one month of Pro. Perfect if you want to skip the fluff and dive straight into real-world AI magic.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=gaGaPpnexxA\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-1pf","date":1761768598,"author":"Vibe YouTube","guid":320933,"unread":true,"content":"<p><strong>3 Python Features You NEED To Know</strong><br><br>\nTim dives into three modern Python tools you’ve probably never used but should:  </p>\n\n<ul>\n<li>The new <code>match</code> statement for cleaner, switch-style pattern matching\n</li>\n<li>\n<code>@dataclass</code> to auto-generate constructors, reprs, and more without boilerplate\n</li>\n<li>Positional-only and keyword-only arguments to enforce clearer, safer function APIs\n</li>\n</ul>\n\n<p>Plus, he kicks things off with a free Brilliant.org link (20% off Premium) and a shout-out to his DevLaunch mentorship program, where he helps you build real-world projects and actually land jobs.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=e0FvoOtdAQc\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[RELEASE] AIS Unit & Scale Doctor — Fix Blender unit/scale issues, profile-aware rulers, and guarded FBX/glTF export","url":"https://dev.to/wilson_anibe_99986ba22102/release-ais-unit-scale-doctor-fix-blender-unitscale-issues-profile-aware-rulers-and-48nb","date":1761767156,"author":"Anvil Interactive Solutions","guid":320912,"unread":true,"content":"<p>Correct size, correct axes—every time.</p>\n\n<h2>\n  \n  \n  Why this exists\n</h2>\n\n<p>If your mesh <strong>looks right in Blender but wrong in engine</strong>, you’re probably fighting:</p>\n\n<ul>\n<li>Unapplied or <strong>non-uniform</strong> scale</li>\n<li>\n<strong>Negative</strong> (mirrored) scale &amp; flipped normals</li>\n<li>\n<strong>Parent</strong> objects with scale ≠ 1</li>\n<li>Scene <strong>unit mismatch</strong> vs target engine</li>\n</ul>\n\n<p>AIS Unit &amp; Scale Doctor solves that, end-to-end.</p>\n\n\n\n\n<h2>\n  \n  \n  Key features\n</h2>\n\n<ul>\n<li>\n<strong>🧭 Profile-aware units &amp; axes</strong>\nChoose a <strong>Target Profile</strong> and the tool adapts:\n\n<ul>\n<li><strong>Unity (meters, Y-up)</strong></li>\n<li><strong>Unreal (centimeters, Z-up)</strong></li>\n<li><strong>glTF (meters, Y-up on export)</strong></li>\n<li>\n<strong>CAD (millimeters)</strong>\nRulers and axis lines are remapped to match the profile’s up/forward, so what you see in the viewport reflects what the engine expects.</li>\n</ul>\n\n\n</li>\n\n<li>\n\n<strong>🔎 One-click detection</strong>\nFlags <code>unapplied</code>, <code>nonuniform</code>, <code>negative</code>, <code>parentScaled</code>, and <code>sceneMismatch</code> with a clean UI summary + detailed console printout.</li>\n\n<li>\n\n<strong>🛠️ Safe fixes</strong>\n\n<ul>\n<li>\n<strong>Align Scene Units</strong> to profile (does <strong>not</strong> rescale vertices).</li>\n<li>\n<strong>Apply Scale on Meshes</strong> (safe for statics).</li>\n<li>\n<strong>Fix Negative Scales</strong> (auto <strong>recalculate normals</strong>).</li>\n<li>\n<strong>Skip Armature</strong> to preserve rigs/skin by default.</li>\n</ul>\n\n\n</li>\n\n<li>\n\n<strong>📏 Rulers, axis lines, and cages (AABB/OBB)</strong>\n\n<ul>\n<li>AABB or <strong>OBB (true extents)</strong> with translucent fill &amp; wire.</li>\n<li>On-mesh <strong>dimension labels</strong> (units + precision), <strong>inside</strong> the box with adjustable inset.</li>\n<li>\n<strong>Axis colors</strong> (X=red, Y=green, Z=blue).</li>\n<li>\n<strong>Draw On Top</strong> option for dense scenes.</li>\n</ul>\n\n\n</li>\n\n<li>\n\n<strong>🔒 Guarded FBX/glTF export</strong>\nConfigurable <strong>fail-on rules</strong> block exports that would break downstream pipelines (toast + JSON-style console report).</li>\n\n<li>\n\n<strong>🧪 CI / headless validator</strong>\nRun checks in automated builds. Emits JSON to disk and returns non-zero exit codes when violations exist.</li>\n\n</ul>\n\n\n\n\n<h2>\n  \n  \n  Screenshots / GIFs\n</h2>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F4csqtilucy0l12ixxzat.gif\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F4csqtilucy0l12ixxzat.gif\" alt=\" \" width=\"720\" height=\"397\"></a></p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F2znn4m0wyts6qdom6ght.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F2znn4m0wyts6qdom6ght.png\" alt=\" \" width=\"800\" height=\"440\"></a></p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Frf7p1doizdr908v778oy.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Frf7p1doizdr908v778oy.png\" alt=\" \" width=\"800\" height=\"440\"></a></p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fe57vc6oy661slaxwe5d3.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fe57vc6oy661slaxwe5d3.png\" alt=\" \" width=\"800\" height=\"440\"></a></p>\n\n\n\n\n<h2>\n  \n  \n  Demo video (2:05)\n</h2>\n\n<p>🎥 <a href=\"https://youtu.be/iTdByFfPiKs\" rel=\"noopener noreferrer\">https://youtu.be/iTdByFfPiKs</a></p>\n\n\n\n\n<h2>\n  \n  \n  Quickstart\n</h2>\n\n<ol>\n<li>Pick <strong>Target Profile</strong> (Unity/Unreal/glTF/CAD)</li>\n<li>\n<strong>Run Detection</strong> (optional: <em>Selection Only</em>)</li>\n<li>\n<strong>Run Fix</strong>: align scene units, apply scale, fix mirrored normals; skip armatures if needed</li>\n<li>Toggle <strong>Ruler Overlay</strong> (AABB/OBB, colorize, on-top, precision)</li>\n<li>\n<strong>Export (Guarded)</strong> → fix any violations → export clean</li>\n</ol>\n\n\n\n\n<h2>\n  \n  \n  Installation\n</h2>\n\n<ol>\n<li><strong>Edit → Preferences → Add-ons → Install…</strong></li>\n<li>Select the zip (e.g., <code>ais-unit-scale-doctor-0.4.0.zip</code>)</li>\n<li>Enable <strong>AIS Unit &amp; Scale Doctor</strong>\n</li>\n<li>Open <strong>3D View → N-Panel → AIS Tools</strong>\n</li>\n</ol>\n\n<blockquote>\n<p><strong>Compatibility:</strong> Blender <strong>3.0–4.4</strong> (tested 3.6 LTS &amp; 4.4). Windows/macOS/Linux.<br>\n<strong>Dependencies:</strong> none (GPU/BLF fallbacks handled).</p>\n</blockquote>\n\n\n\n\n<h2>\n  \n  \n  Download / Docs / Issues\n</h2>\n\n<ul>\n<li>\n<strong>Download:</strong> <a href=\"https://superhivemarket.com/products/unit--scale-doctor\" rel=\"noopener noreferrer\">https://superhivemarket.com/products/unit--scale-doctor</a>\n</li>\n<li>\n<strong>License:</strong> <strong>MIT</strong> (permissive; use in commercial/open projects)</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  Guarded export (details)\n</h2>\n\n<ul>\n<li>\n<strong>Fail-on rules</strong> (comma-sep):\n<code>negative,nonuniform,parentScaled,unapplied,sceneMismatch</code>\n</li>\n<li>\n<strong>FBX axes</strong> set per profile:\n\n<ul>\n<li>Unity/glTF: Forward <strong>-Z</strong>, Up <strong>Y</strong>\n</li>\n<li>Unreal: Forward <strong>X</strong>, Up <strong>Z</strong>\n</li>\n</ul>\n\n\n</li>\n\n<li>\n\n<strong>glTF</strong> operator enables <strong>Y-up</strong> flag</li>\n\n</ul>\n\n<p>On failure: export is blocked; a human-readable toast appears and a JSON-style report is printed to the console.</p>\n\n\n\n\n<h2>\n  \n  \n  CI / Headless validation\n</h2>\n\n<p>Example call (write report + exit non-zero on violations):<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>blender -b --python-expr \"import bpy; bpy.ops.preferences.addon_enable(module='ais_unit_scale_doctor')\" \\\n-- --v4-validate --profile UNITY \\\n--fail-on negative,nonuniform,sceneMismatch \\\n--out unit_report.json\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  FAQ\n</h2>\n\n<p><strong>Q: My asset looks mirrored or inside-out after fixing.</strong><br>\nA: You likely had <strong>negative scale</strong>. Enable <strong>Fix Negative Scales</strong> so normals are recalculated after apply.</p>\n\n<p><strong>Q: Will this break my rigs?</strong><br>\nA: By default we <strong>skip objects with Armature</strong> modifiers. Only freeze rigged meshes when you intend to.</p>\n\n<p><strong>Q: Why do Y/Z labels “swap” when I pick Unity?</strong><br>\nA: Unity is <strong>Y-up</strong>. The overlay remaps axes to your profile so what you see is what the engine expects.</p>\n\n<p><strong>Q: Does Align Scene Units rescale my mesh?</strong><br>\nA: No—only scene unit settings change. Vertex data remains unchanged.</p>\n\n<p><strong>Q: Can I use this with CAD millimeters?</strong><br>\nA: Yes—select <strong>CAD (mm)</strong> and validate with rulers before export.</p>\n\n\n\n\n<h2>\n  \n  \n  Changelog (0.4.0)\n</h2>\n\n<ul>\n<li>Profile-aware axis remap (Unity Y-up / Unreal Z-up / glTF Y-up export)</li>\n<li>AABB/OBB cages with translucent fill and on-top mode</li>\n<li>Colorized labels (X/Y/Z) with precision control &amp; inside/inset placement</li>\n<li>Expanded detection reasons and parent-scale checks</li>\n<li>Guarded FBX/glTF export with customizable fail-on rules</li>\n<li>Headless validator (JSON report + exit codes)</li>\n<li>GPU/BLF compatibility fallbacks; clean register/unregister</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  Roadmap\n</h2>\n\n<ul>\n<li>Saved <strong>rule presets</strong> per project/team</li>\n<li>Ignore lists / per-object overrides</li>\n<li>CI templates for GitHub/GitLab/Jenkins</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  Credits / License\n</h2>\n\n<ul>\n<li>\n<strong>Author:</strong> Anvil Interactive Solutions</li>\n<li>\n<strong>License:</strong> <strong>MIT</strong>\n</li>\n<li>Thanks to everyone who tested mixed-unit scenes and shared tricky edge cases!</li>\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Hussein Nasser: The problem with software engineering","url":"https://dev.to/scale_youtube/hussein-nasser-the-problem-with-software-engineering-fbj","date":1761762658,"author":"Scale YouTube","guid":320887,"unread":true,"content":"<p>Hussein Nasser is your go-to backend engineering sherpa, offering a stack of Udemy courses—from design patterns, networking and databases to NGINX and Python—all hooked up with handy coupons. Beyond video lectures, he’s dishing out Medium articles, a podcast, plus members-only and Arabic-language content on YouTube to keep you sharp.</p>\n\n<p>Feeling generous? You can support him by joining on YouTube, becoming a Medium member, buying him a coffee, or grabbing design gear through his Canva affiliate—so you learn, geek out, and help fuel more awesome content.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=yYhAOPc6MLQ\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python basics - Day 16","url":"https://dev.to/ian_b838138a27a917398d181/python-basics-day-16-37co","date":1761761946,"author":"Sabin Sim","guid":320886,"unread":true,"content":"<h2>\n  \n  \n  <strong>Day 16 – Advanced Functions</strong>\n</h2>\n\n<p><strong>Project:</strong> Build a “Flexible Calculator &amp; Info App” using default parameters, *args, and **kwargs.</p>\n\n\n\n\n<p><strong>01. Learning Goal</strong></p>\n\n<p>By the end of this lesson, you will be able to:</p>\n\n<ul>\n<li>Use <strong>default parameters</strong> to set optional arguments\n</li>\n<li>Use <strong>*args</strong> to accept multiple inputs\n</li>\n<li>Use <strong>**kwargs</strong> to handle keyword-based arguments\n</li>\n<li>Combine all types of parameters in one function\n</li>\n</ul>\n\n\n\n\n<p><strong>02. Problem Scenario</strong></p>\n\n<p>Imagine you’re developing a <strong>utility app</strong> that calculates values and manages user info.<br><br>\nSome functions may take one, two, or even many arguments — you don’t know in advance.<br><br>\nYou’ll learn to make your functions <strong>flexible</strong> and <strong>dynamic</strong>.</p>\n\n\n\n<p><strong>03. Step 1 – Default Parameters</strong></p>\n\n<p>You can assign default values to parameters.<br><br>\nIf no argument is provided, the function uses the default.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Guest</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Hello, </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"nf\">greet</span><span class=\"p\">()</span>          <span class=\"c1\"># Hello, Guest!\n</span><span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Sabin</span><span class=\"sh\">\"</span><span class=\"p\">)</span>   <span class=\"c1\"># Hello, Sabin!\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<p><strong>04. Step 2 – Variable-Length Arguments (*args)</strong></p>\n\n<p>If you add <code>*</code> before a parameter, Python collects all extra positional arguments into a <strong>tuple</strong>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">add_all</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">numbers</span><span class=\"p\">):</span>\n    <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span><span class=\"p\">:</span>\n        <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">n</span>\n    <span class=\"k\">return</span> <span class=\"n\">total</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">add_all</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>        <span class=\"c1\"># 6\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">add_all</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">))</span> <span class=\"c1\"># 100\n</span></code></pre>\n\n</div>\n\n\n\n<p><strong>Why use it?</strong><br>\nIt allows you to pass <strong>any number of arguments</strong> to a single function.</p>\n\n\n\n<p><strong>05. Step 3 – Keyword Variable Arguments (</strong>kwargs)**</p>\n\n<p>If you use <code>**</code>, Python collects all <strong>keyword arguments</strong> (key=value pairs) into a <strong>dictionary</strong>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">print_info</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">():</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s\">: </span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print_info</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Sabin</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">hobby</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Coding</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># name: Sabin\n# age: 30\n# hobby: Coding\n</span></code></pre>\n\n</div>\n\n\n\n<p><strong>Use case:</strong> great for <strong>user profiles</strong>, <strong>settings</strong>, or <strong>API parameters</strong>.</p>\n\n\n\n\n<p><strong>06. Step 4 – Mixing Parameters</strong></p>\n\n<p>You can use all types of parameters together in one function.<br>\nOrder matters → <code>regular</code> → <code>*args</code> → <code>**kwargs</code><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">show_info</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Title:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Args:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Kwargs:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n<span class=\"nf\">show_info</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Student Info</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Tom</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Anna</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">grade</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">A</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"c1\"># Title: Student Info\n# Args: ('Tom', 'Anna')\n# Kwargs: {'grade': 'A', 'age': 20}\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<p><strong>07. Step 5 – Practice Examples</strong></p>\n\n<p><strong>Example 1: Default Parameter</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">power</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"n\">exp</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">base</span> <span class=\"o\">**</span> <span class=\"n\">exp</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">power</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>    <span class=\"c1\"># 9 (square)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">power</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"c1\"># 27 (cube)\n</span></code></pre>\n\n</div>\n\n\n\n<p><strong>Example 2: Using *args</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">multiply_all</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">nums</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">*=</span> <span class=\"n\">n</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">multiply_all</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>  <span class=\"c1\"># 24\n</span></code></pre>\n\n</div>\n\n\n\n<p><strong>Example 3: Using **kwargs</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">introduce</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">person</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">person</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s\"> is </span><span class=\"si\">{</span><span class=\"n\">person</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s\"> years old.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"nf\">introduce</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Sabin</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<p><strong>08. Step 6 – Mini Project: Flexible Calculator &amp; Info App</strong></p>\n\n<p>Combine everything into one smart utility app.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">calculate</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">add</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">nums</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"s\">No numbers provided!</span><span class=\"sh\">\"</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">add</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">mul</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">nums</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">*=</span> <span class=\"n\">n</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"s\">Unknown operation!</span><span class=\"sh\">\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">profile</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">info</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">=== User Profile ===</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">info</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">():</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">k</span><span class=\"p\">.</span><span class=\"nf\">capitalize</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s\">: </span><span class=\"si\">{</span><span class=\"n\">v</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Run examples\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Sum:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nf\">calculate</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">add</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Product:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nf\">calculate</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">mul</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n\n<span class=\"nf\">profile</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Sabin</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">country</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Switzerland</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">hobby</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Coding</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<p><strong>09. Reflection</strong></p>\n\n<p>You have learned how to:</p>\n\n<ul>\n<li>Use <strong>default parameters</strong> to simplify function calls</li>\n<li>Use <em>**args</em>* and *<em>**kwargs</em>* for flexible argument handling</li>\n<li>Combine them to create more powerful, reusable functions</li>\n<li>Build a <strong>Flexible Calculator &amp; Info App</strong> that adapts to user input</li>\n</ul>\n\n<p>Next → <strong>Day 17 – Variable Scope (local, global, nonlocal)</strong><br>\nLearn how Python manages variables inside and outside of functions.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-21ia","date":1761761357,"author":"Vibe YouTube","guid":320885,"unread":true,"content":"<h3>\n  \n  \n  TL;DR\n</h3>\n\n<p>Tech With Tim’s latest video digs into three modern Python goodies you’ve probably slept on: the pattern-matching <code>match</code> statement for cleaner control flow, hassle-free <code>dataclasses</code> to cut boilerplate, and the neat trick of positional-only &amp; keyword-only arguments to lock down your function signatures.</p>\n\n<p>Plus, there’s a free Brilliant challenge with 20% off Premium to sharpen your skills and an invite to Tim’s DevLaunch mentorship program if you’re ready for hands-on guidance and job-landing strategies.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=e0FvoOtdAQc\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Patrick Altman: How We Continually Deliver Software","url":"https://wedgworth.dev/how-we-continually-deliver-software/","date":1761760639,"author":"","guid":320901,"unread":true,"content":"<img src=\"https://images.unsplash.com/photo-1429497419816-9ca5cfb4571a?crop=entropy&amp;cs=tinysrgb&amp;fit=max&amp;fm=jpg&amp;ixid=M3wxMTc3M3wwfDF8c2VhcmNofDV8fGJ1aWxkfGVufDB8fHx8MTc1OTYzMTM0MXww&amp;ixlib=rb-4.1.0&amp;q=80&amp;w=2000\" alt=\"How We Continually Deliver Software\"><p>We have developed a set of Github Actions for Continuous Integration / Continuous Delivery that take care the this basic workflow:</p><img src=\"https://wedgworth.dev/content/images/2025/10/Screenshot-2025-10-04-at-9.12.59---PM.png\" alt=\"How We Continually Deliver Software\" width=\"2000\" height=\"922\"><ol><li>Every commit either on  or a feature branch, runs:<ol><li>Build Docker Image and then on that image run:<ol><li>Check for missing migrations</li><li>Push image / tags after being rebuilt without the dev mode flag</li></ol></li></ol></li><li>Then if on  it follows through with a deployment to a QA app on <a href=\"https://www.heroku.com/?ref=wedgworth.dev\" rel=\"noreferrer\">Heroku</a>.</li></ol><p>We have a second workflow for handling releases.  </p><p>When a release is generated/published in <a href=\"https://github.com/?ref=wedgworth.dev\" rel=\"noreferrer\">Github</a>:</p><ol><li>Pulls latest image from the Github Container Repository</li><li>Pushes the tagged image to Heroku</li><li>Executes release commands, but this time to a Production app on Heroku </li></ol><img src=\"https://wedgworth.dev/content/images/2025/10/Screenshot-2025-10-04-at-9.13.43---PM.png\" alt=\"How We Continually Deliver Software\" width=\"586\" height=\"1262\"><p>These two pipelines enable us to work really fast.  It speeds up code reviews as most of the testing is done automatically allowing us to focus on just the business rules and architecture getting put into place.  It speeds up end to end testing and getting user feedback having code automatically deployed to a QA test instance that won&amp;apost interfere / interrupt production.  And finally it speeds up getting releases out to production which we do as needed, often a few times a day!</p><p>The two yaml files configuring these were hundreds of lines long with lots of duplication except for a few things.  We were copying them around when we&amp;aposd start a new web app, and then tweak.  They&amp;aposd invariably get out of sync and it was becoming a burden to maintain.</p><p>So we extracted actions and workflows into <a href=\"https://github.com/wedgworth/actions?ref=wedgworth.dev\" rel=\"noreferrer\">wedgworth/actions</a> which is now open source so if you like our workflow you can feel free to use (or fork and tweak to suit your needs).</p><p>Now each project looks like this:</p><pre><code>name: Test / Build / Deploy to QA\non:\n  push:\n    branches: \"**\"\n    tags-ignore: \"**\"\n\njobs:\n  test-and-build:\n    name: CI\n    uses: wedgworth/actions/.github/workflows/test.yml@v7.0.0\n    with:\n      python-src-dir: myapp\n    secrets:\n      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}\n      CR_UN: ${{ secrets.CR_UN }}\n      CR_PAT: ${{ secrets.CR_PAT }}\n      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}\n\n  deploy-qa:\n    name: CD\n    needs: [test-and-build]\n    if: ${{ github.event.ref == &amp;aposrefs/heads/main&amp;apos }}\n    uses: wedgworth/actions/.github/workflows/deploy.yml@v7.0.0\n    with:\n      app-name: my-heroku-app-qa\n      processes: web release\n    secrets:\n      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}\n      CR_UN: ${{ secrets.CR_UN }}\n      CR_PAT: ${{ secrets.CR_PAT }}\n</code></pre><pre><code>name: Publish and Release Image\non:\n  release:\n    types: [published]\n\njobs:\n  release:\n    name: Release\n    uses: wedgworth/actions/.github/workflows/release.yml@v7.0.0\n    with:\n      app-name: my-heroku-app-prod\n      processes: web release\n    secrets:\n      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}\n      CR_UN: ${{ secrets.CR_UN }}\n      CR_PAT: ${{ secrets.CR_PAT }}</code></pre><p>We still copy and paste these but they are extremely stable.  </p><p>We just need to set , , and  . </p><p>These do use runners from <a href=\"https://namespace.so/?ref=wedgworth.dev\" rel=\"noreferrer\">namespace.so</a> which are not free (but cheap!) and run much faster especially when doing Docker builds than the Github runners.  </p><p>There might be a way to make these configurable so if you like what you see but want to use the Github runners, we&amp;aposd welcome a pull request to make this more generally useful, otherwise feel free to fork it and run your own copies.</p>","contentLength":3279,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Keyboard Sounds — Make any keyboard sound mechanical (now with Windows and Linux desktop support)","url":"https://dev.to/nathanfiscaletti/keyboard-sounds-make-any-keyboard-sound-mechanical-now-with-windows-and-linux-desktop-support-2po5","date":1761760343,"author":"Nathan Fiscaletti","guid":320864,"unread":true,"content":"<p><iframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/sQmjAxaulPY\">\n</iframe>\n</p>\n\n<p>Keyboard Sounds is a free, open-source application that makes any keyboard sound like a Mechanical Keyboard. It includes 16 built in profiles, a profile editor, and application rules.</p>\n\n<p><a href=\"https://github.com/nathan-fiscaletti/keyboardsounds\" rel=\"noopener noreferrer\">Download on GitHub</a><br>\n<a href=\"https://keyboardsounds.net\" rel=\"noopener noreferrer\">Official Website</a></p>\n\n\n\n\n<h2>\n  \n  \n  Introduction\n</h2>\n\n<p>Four years ago, a pretty simple thought sparked a whole project. I was just chilling on my couch, tapping away on my iPhone, when something clicked: I really loved the tactile feedback of its keystrokes. \"Why can't I have this on my PC?\" I remember wondering. \"It'd be great to hear my keystrokes as I type, just like I do on my phone.\"</p>\n\n<p>My first move, naturally, was to see if something like that already existed. I found a few small, promising open-source apps, things like <a href=\"https://mechvibes.com/\" rel=\"noopener noreferrer\">Mechvibes</a> and <a href=\"https://github.com/kamillobinski/thock\" rel=\"noopener noreferrer\">Thock</a>. They definitely offered some of what I was after, but there was one big piece missing: the ability to control when the sounds were active based on the app I was currently using. I really wanted to turn the typing sounds on or off automatically depending on what I was doing – a feature I eventually started calling \"application rules.\"</p>\n\n<p>Since that crucial feature wasn't readily available, I figured I'd just build it myself. And that's exactly how Keyboard Sounds began its journey.</p>\n\n<p>What started out as a humble command-line utility, faithfully mimicking iOS key presses, has honestly grown way beyond what I first imagined. Today, Keyboard Sounds has evolved into a robust, full-featured, cross-platform desktop application, finally bringing that satisfying auditory feedback to your typing experience, complete with the smart control I originally longed for.</p>\n\n\n\n\n<h2>\n  \n  \n  Features\n</h2>\n\n<p>Keyboard Sounds has several key-features.</p>\n\n<h3>\n  \n  \n  Custom Profiles\n</h3>\n\n<ul>\n<li>Support for both <strong>Mouse</strong> and <strong>Keyboard</strong> audio profiles</li>\n<li>Comes bundled with sixteen built in profiles (16 keyboard, 1 mouse)</li>\n<li>Supports Custom profiles through the editors (<code>.wav</code> and <code>.mp3</code> supported)</li>\n</ul>\n\n<p>Read more about creating and editing profiles <a href=\"https://github.com/nathan-fiscaletti/keyboardsounds/blob/master/docs/custom-profiles.md\" rel=\"noopener noreferrer\">here</a>.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fy0e4w90wxj36xgwvjih4.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fy0e4w90wxj36xgwvjih4.png\" alt=\"Profiles\" width=\"800\" height=\"442\"></a></p>\n\n<h3>\n  \n  \n  Application Rules\n</h3>\n\n<p>Keyboard Sounds supports application rules in which you can control the behavior of the sound daemon based on the currently focused application.</p>\n\n<p>This allows you to do things like only enabling in your text editor or terminal, disabling it for specific games, or localizing the sound effects to a particular application.</p>\n\n<ul>\n<li>Read more about application rules <a href=\"//./docs/app-rules.md\">here</a>.</li>\n<li><em>Application rules are currently only available for the Windows platform.</em></li>\n</ul>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fostxifn6wdbqbr055nbl.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fostxifn6wdbqbr055nbl.png\" alt=\"Application Rules\" width=\"520\" height=\"820\"></a></p>\n\n<h3>\n  \n  \n  Randomized Pitch Shift\n</h3>\n\n<p>Keyboard Sounds supports randomized pitch shifting in which you can change the pitch of the sound effects to a random value between a lower and upper bound.</p>\n\n<p>When enabled, each time a key is pressed or a mouse click is made, the pitch of the sound effect will be randomized between the lower and upper bound.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fckn8gmeeg3c7fxee01uw.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fckn8gmeeg3c7fxee01uw.png\" alt=\"Pitch Shift\" width=\"504\" height=\"225\"></a></p>\n\n<h3>\n  \n  \n  Using Keyboard Sounds with OBS\n</h3>\n\n<p>In order to use Keyboard Sounds with OBS as an isolated audio source, OBS needs a window that it can attach to that's connected to the process running the Daemon. <em>This is not the same process as the desktop application.</em> To work with this, Keyboard Sounds provides a window that can be enabled for the audio daemon.</p>\n\n<h3>\n  \n  \n  Command Line or Desktop Application\n</h3>\n\n<p>Keyboard Sounds can be installed as a <a href=\"https://github.com/nathan-fiscaletti/keyboardsounds?tab=readme-ov-file#using-keyboard-sounds-with-obs\" rel=\"noopener noreferrer\">command-line utility</a>, or as a Desktop Application.</p>\n\n<ul>\n<li>The Desktop Application supports Windows and Linux</li>\n<li>Desktop Linux support is currently in beta (<a href=\"https://github.com/nathan-fiscaletti/keyboardsounds/blob/master/docs/linux-support.md\" rel=\"noopener noreferrer\">see here</a>.)</li>\n<li>The Command-line Utility is available on any platform that supports Python.</li>\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 18: Python Palindrome Checker Tutorial – Ignore Case, Spaces & Punctuation","url":"https://dev.to/shahrouzlogs/day-18-python-palindrome-checker-tutorial-ignore-case-spaces-punctuation-2l0i","date":1761758328,"author":"Shahrouz Nikseresht","guid":320863,"unread":true,"content":"<p>Welcome to Day 18 of the <strong>#80DaysOfChallenges</strong> journey! Today’s beginner challenge is all about <strong>building a palindrome checker in Python</strong> that smartly ignores case, spaces, and punctuation. This hands-on task sharpens skills in string manipulation, slicing tricks, and simple conditionals, perfect for anyone learning Python basics. Whether you're prepping for interviews or just curious about text processing, this \"Python palindrome checker\" guide shows how to normalize strings and detect palindromic patterns effortlessly.</p>\n\n\n\n\n<h2>\n  \n  \n  💡 Key Takeaways from Day 18: Robust Palindrome Checker\n</h2>\n\n<p>This challenge takes user input, strips it down to alphanumeric characters (lowercased), and checks if the result reads the same forwards and backwards. It's a classic string exercise that highlights Python's concise syntax for data cleaning and comparison. Let’s unpack the core elements: <strong>string normalization</strong>, <strong>reversal via slicing</strong>, and <strong>interactive validation</strong>.</p>\n\n<h3>\n  \n  \n  1. String Normalization: Cleaning Up the Mess\n</h3>\n\n<p>The <code>is_palindrome</code> function starts by transforming the input into a pure, comparable form, lowercasing everything and keeping only letters and numbers. This uses a generator expression inside <code>join()</code> for efficiency:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">cleaned</span> <span class=\"o\">=</span> <span class=\"sh\">\"\"</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">.</span><span class=\"nf\">lower</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">ch</span> <span class=\"ow\">in</span> <span class=\"n\">text</span> <span class=\"k\">if</span> <span class=\"n\">ch</span><span class=\"p\">.</span><span class=\"nf\">isalnum</span><span class=\"p\">())</span>  <span class=\"c1\"># keep only letters and numbers\n</span></code></pre>\n\n</div>\n\n\n\n<p>For input like \"A man, a plan, a canal: Panama!\", it outputs \"amanaplanacanalpanama\". The <code>isalnum()</code> filter drops spaces, commas, and exclamation marks, while <code>lower()</code> ensures \"A\" matches \"a\". I appreciated how this one-liner handles real-world messiness; no loops or regex needed, just Python's built-in string methods doing the heavy lifting. It's a quick win for preprocessing text data in larger projects.</p>\n\n<h3>\n  \n  \n  2. Slicing for Reversal: The Elegant Palindrome Test\n</h3>\n\n<p>With the cleaned string ready, the check boils down to comparing it against its reverse using slicing magic: <code>cleaned[::-1]</code>. The full return statement is a gem of brevity:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">return</span> <span class=\"n\">cleaned</span> <span class=\"o\">==</span> <span class=\"n\">cleaned</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>   <span class=\"c1\"># check if the cleaned string is the same forwards and backwards\n</span></code></pre>\n\n</div>\n\n\n\n<p>This step is pure Python elegance, the slice <code>[::-1]</code> flips the string without extra variables or functions. For \"racecar\", it matches \"racecar\" reversed, returning <code>True</code>. Testing edge cases like single characters (\"a\" → <code>True</code>) or empty strings (\"\" → <code>True</code>, since it equals its reverse) revealed how forgiving this approach is. It's a reminder that slicing isn't just for lists; it's a powerhouse for string ops too.</p>\n\n<h3>\n  \n  \n  3. Interactive Runner: User-Friendly Input and Feedback\n</h3>\n\n<p>The <code>run_palindrome_checker</code> function ties it together with a simple prompt, empty-input check, and emoji-flavored output:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">user_input</span> <span class=\"o\">=</span> <span class=\"nf\">input</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Enter text to check if it</span><span class=\"sh\">'</span><span class=\"s\">s a palindrome: </span><span class=\"sh\">\"</span><span class=\"p\">).</span><span class=\"nf\">strip</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">user_input</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">You entered an empty string. Try again with some text!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span>\n\n<span class=\"k\">if</span> <span class=\"nf\">is_palindrome</span><span class=\"p\">(</span><span class=\"n\">user_input</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">✅ </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">user_input</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"s\"> is a palindrome!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">❌ </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">user_input</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"s\"> is not a palindrome.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><code>strip()</code> trims whitespace upfront, preventing sneaky failures. The conditional logic keeps it lightweight, with clear messages that echo the original input for context. Running it on \"Madam I'm Adam\" lights up the green check, satisfying! This setup makes the script feel interactive and forgiving, ideal for beginners tweaking their own text tests.</p>\n\n\n\n\n<h2>\n  \n  \n  🎯 Summary and Reflections\n</h2>\n\n<p>This palindrome checker challenge proves that Python's string tools can tackle \"Python palindrome ignore case\" puzzles with minimal code. It pushed me to think about:</p>\n\n<ul>\n<li>\n<strong>Data prep</strong>: Normalization as the unsung hero of accurate comparisons.</li>\n<li>\n<strong>Slicing smarts</strong>: How <code>[::-1]</code> turns reversal into a single expression.</li>\n<li>\n<strong>User focus</strong>: Graceful handling that keeps interactions smooth and encouraging.</li>\n</ul>\n\n<p>What surprised me? How often this logic pops up in interviews, search \"palindrome checker Python\" and you'll see why. For fun extensions, I pondered adding word-level checks (e.g., \"taco cat\" as a phrase palindrome).</p>\n\n<p><strong>Advanced Alternatives</strong>: Swap <code>isalnum()</code> for regex (<code>re.sub(r'[^a-z0-9]', '', text.lower())</code>) for more control, or build a GUI version with Tkinter. What's your go-to trick for string reversals? Share in the comments!</p>\n\n\n\n\n<h2>\n  \n  \n  🚀 Next Steps and Resources\n</h2>\n\n<p>Day 18 was a fun dive into string wizardry, priming for more text-processing adventures. If you're tackling #80DaysOfChallenges, did you add any twists to your checker? Drop your code snippets below!</p>\n\n<ul>\n<li>\n<strong>Source Code for Challenge #18</strong>: <a href=\"https://github.com/Sherouz/80-days-of-challenges/blob/main/scripts/palindrome.py\" rel=\"noopener noreferrer\">scripts/palindrome.py</a>\n</li>\n<li>\n<strong>Main Repository</strong>: <a href=\"https://github.com/Sherouz/80-days-of-challenges\" rel=\"noopener noreferrer\">80-days-of-challenges</a>\n</li>\n<li>\n<strong>Daily Updates</strong>: <a href=\"https://x.com/Shahrouzlogs\" rel=\"noopener noreferrer\">Twitter/X (@Shahrouzlogs)</a>\n</li>\n</ul>\n\n<p>Onward to Day 19, excited to flip more strings (or whatever comes next)!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Antonio Cuni: Inside SPy, part 1: Motivations and Goals","url":"https://antocuni.eu/2025/10/29/inside-spy-part-1-motivations-and-goals/","date":1761755829,"author":"","guid":320811,"unread":true,"content":"<p>This is the first of a series of posts in which I will try to give a deep explanation of<a href=\"https://github.com/spylang/spy\">SPy</a>, including motivations, goals, rules of thelanguage, differences with Python and implementation details.</p><p>This post focuses primarily on : why Python is fundamentally hardto optimize, what trade-offs existing solutions require, and where current approachesfall short. Subsequent posts in this series will explore the solutions in depth. Fornow, let's start with the essential question: what is SPy?</p><p>!!! Success \"\" Before diving in, I want to express my gratitude to my employer, <a href=\"https://www.anaconda.com/\">Anaconda</a>, for giving me the opportunity to dedicate 100% of my time to this open-source project.</p>","contentLength":664,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-1kjn","date":1761754154,"author":"Vibe YouTube","guid":320827,"unread":true,"content":"<p>In this quick tutorial, Tech with Tim highlights three modern Python features you probably aren’t using: the flexible <code>match</code> statement (goodbye nested if-elses), handy <code>dataclasses</code> (no more boilerplate model classes), and the power of positional-only vs. keyword-only arguments for cleaner function signatures.</p>\n\n<p>Along the way he mentions a free Brilliant.org trial + discount and his DevLaunch mentorship, but the real takeaway is these subtle features that can seriously level up your everyday Python code.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=e0FvoOtdAQc\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Keyword vs. semantic search with AI","url":"https://dev.to/alejandro_du/keyword-vs-semantic-search-with-ai-c03","date":1761751351,"author":"Alejandro Duarte","guid":320775,"unread":true,"content":"<p>When building search for an application, you typically face two <strong>broad</strong> approaches:</p>\n\n<ul>\n<li>Traditional keyword-based search — match words exactly or with simple variants.</li>\n<li>Semantic (or vector) search — match meaning or context using AI embeddings.</li>\n</ul>\n\n<p>There's also a hybrid approach, but I will let that for a future article. Instead, in this post I’ll walk you through how the two brad approaches work in Python using <a href=\"https://mariadb.com/database-topics/ai/\" rel=\"noopener noreferrer\">MariaDB</a> and an AI embedding model, highlight where they differ, and show code that you can adapt.</p>\n\n<h2>\n  \n  \n  The key components\n</h2>\n\n<p>For this example, I used <a href=\"https://mariadb.com/products/cloud/\" rel=\"noopener noreferrer\">MariaDB Cloud</a> to spin up a free serverless database. Within seconds I had a free instance ready. I grabbed the host/user/password details, connected with VS Code, created a database called <code>demo</code>, created a <code>products</code> table and loaded ~500 rows of product names via <code>LOAD DATA LOCAL INFILE</code>. This is an extremely small dataset, but it's enough for learning and experimentation.</p>\n\n<p>Then I built a small Python + FastAPI app. First I implemented a simple keyword search (by product name) endpoint using full-text index, then I implemented semantic (vector) search using AI-generated vector embeddings + MariaDB’s vector support. You can see the whole process in <a href=\"https://www.youtube.com/watch?v=B8XGe4KIv8o\" rel=\"noopener noreferrer\">this video</a>.</p>\n\n<h2>\n  \n  \n  Keyword-based search: simple and familiar\n</h2>\n\n<p>For keyword search I used a <a href=\"https://mariadb.com/docs/server/ha-and-performance/optimization-and-tuning/optimization-and-indexes/full-text-indexes/full-text-index-overview\" rel=\"noopener noreferrer\">full-text index</a> on the <code>name</code> column of of the <code>products</code> table. With this index in place, I could search by product name using this SQL query:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sql\"><code><span class=\"k\">SELECT</span> <span class=\"n\">name</span>\n<span class=\"k\">FROM</span> <span class=\"n\">products</span>\n<span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"k\">MATCH</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"n\">AGAINST</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"p\">)</span>\n<span class=\"k\">LIMIT</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>I exposed this functionality using a FastAPI endpoint as follows:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@app.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/products/text-search</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">text_search</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"nf\">cursor</span><span class=\"p\">()</span>\n    <span class=\"n\">cursor</span><span class=\"p\">.</span><span class=\"nf\">execute</span><span class=\"p\">(</span>\n        <span class=\"sh\">\"</span><span class=\"s\">SELECT name FROM products ORDER BY MATCH(name) AGAINST(?) LIMIT 10;</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,)</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">name</span> <span class=\"nf\">for </span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,)</span> <span class=\"ow\">in</span> <span class=\"n\">cursor</span><span class=\"p\">]</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Pros:</p>\n\n<ul>\n<li>Runs fast.</li>\n<li>Works well when users type exact or close terms.</li>\n<li>Uses built-in SQL features (no external AI model needed).</li>\n</ul>\n\n<p>Cons:</p>\n\n<ul>\n<li>Misses synonyms, context or related meaning.</li>\n<li>Doesn’t understand intent (if user types “running shoes”, a strict keyword search may miss “jogging trainers” or “sneakers”).</li>\n<li>Quality depends heavily on the wording.</li>\n</ul>\n\n<p>In my demo, the endpoint returned several products that were not relevant to “running shoes”.</p>\n\n<h2>\n  \n  \n  Semantic (vector) search: matching meaning\n</h2>\n\n<p>To <a href=\"https://go.mariadb.com/25Q3-WBN-GLBL-OSSG-2025-09-24-AIVectorsearch_Registration-LP.html\" rel=\"noopener noreferrer\">go beyond keywords</a> I implemented a second endpoint:</p>\n\n<ol>\n<li>I use an AI embedding model (Google Generative AI via LangChain) to convert each product name into a high-dimensional vector.</li>\n<li>Store those vectors in MariaDB with the vector <a href=\"https://docs.langchain.com/oss/python/integrations/vectorstores/mariadb\" rel=\"noopener noreferrer\">integration for LangChain</a>.</li>\n<li>At query time, embed the user’s search phrase into a vector (using exactly the same AI embedding model of the previous step), then perform a similarity search with the highly performant HNSW algorithm in MariaDB (e.g., top 10 nearest vectors) and return the corresponding products.</li>\n</ol>\n\n<p>Here’s how I implemented the ingestion endpoint:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@app.post</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/products/ingest</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">ingest_products</span><span class=\"p\">():</span>\n    <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"nf\">cursor</span><span class=\"p\">()</span>\n    <span class=\"n\">cursor</span><span class=\"p\">.</span><span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">SELECT name FROM products;</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">vector_store</span><span class=\"p\">.</span><span class=\"nf\">add_texts</span><span class=\"p\">([</span><span class=\"n\">name</span> <span class=\"nf\">for </span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,)</span> <span class=\"ow\">in</span> <span class=\"n\">cursor</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"s\">Products ingested successfully</span><span class=\"sh\">\"</span>\n</code></pre>\n\n</div>\n\n\n\n<p>And this is the semantic search endpoint:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@app.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/products/semantic-search</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">search_products</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">vector_store</span><span class=\"p\">.</span><span class=\"nf\">similarity_search</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"n\">page_content</span> <span class=\"k\">for</span> <span class=\"n\">doc</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"p\">]</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The LangChain integration for MariaDB makes the whole process extremely easy. The integration creates two tables:</p>\n\n<ul>\n<li>\n<code>langchain_collection</code>: Each row represents a related set of vector embeddings. I have only one in this demo which corresponds to the product names.</li>\n<li>\n<code>langchain_embedding</code>: The vector embeddings. Each vector belongs to a collection (many-to-one to <code>langchain_collection</code>).</li>\n</ul>\n\n<p>When I ran the semantic search endpoint with the same query “running shoes”, the results felt much more relevant: they included products that didn’t match “running” or “shoes” literally but were semantically close.</p>\n\n<h2>\n  \n  \n  Keyword vs. semantic — when to use which\n</h2>\n\n<p>Here’s a quick comparison:</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Approach</th>\n<th>Pros</th>\n<th>Cons</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Keyword search</td>\n<td>Quick to set up, uses SQL directly</td>\n<td>Limited to literal term matching, less clever</td>\n</tr>\n<tr>\n<td>Semantic search</td>\n<td>Matches meaning and context, more flexible</td>\n<td>Requires embedding model + vector support</td>\n</tr>\n</tbody>\n</table></div>\n\n<p><strong>Pick keyword search</strong> when:</p>\n\n<ul>\n<li>Your search domain is small and predictable or, obviously, you need exact keyword match.</li>\n<li>Users know exactly what they’re looking for (specific codes, exact names).</li>\n<li>You want minimal dependencies and complexity.</li>\n</ul>\n\n<p><strong>Pick semantic search</strong> when:</p>\n\n<ul>\n<li>You need to handle synonyms, similar concepts, user intent.</li>\n<li>The dataset or domain has natural language variation.</li>\n<li>You’re willing to integrate an embedding model and manage vector storage/indexing. <a href=\"https://mariadb.com/docs/server/reference/sql-structure/vectors/vector-overview\" rel=\"noopener noreferrer\">MariaDB helps with this</a>.</li>\n</ul>\n\n<p>In many real-world apps you’ll use a hybrid: start with keyword search, and for higher-value queries or when exact match fails, fall back to semantic search. Or even mix the two via hybrid search. <a href=\"https://mariadb.com/docs/server/reference/sql-structure/vectors/optimizing-hybrid-search-query-with-reciprocal-rank-fusion-rrf\" rel=\"noopener noreferrer\">MariaDB helps with this too</a>.</p>\n\n<h2>\n  \n  \n  How simple the integration can be\n</h2>\n\n<p>In my demo I triggered vector ingestion via a POST endpoint (<code>/ingest</code>). That reads all product names, computes embeddings, and writes them to MariaDB. One line of code (via LangChain + MariaDB integration) handled the insertion of ~500 rows of vectors.</p>\n\n<p>Once vectors are stored, adding a semantic search endpoint was just a few lines of code. The MariaDB vector support hidden most of the complexity.</p>\n\n<h2>\n  \n  \n  The source code\n</h2>\n\n<p>You can find the code on <a href=\"https://github.com/mariadb-developers/langchain-fastapi-mariadb-webinar-demo\" rel=\"noopener noreferrer\">GitHub</a>. I have one simplistic easy-to-follow program in the <strong>webinar-main.py</strong> and a more elaborate one with good practices in <strong>backend.py</strong>. Feel free to clone the repository, modify it, experiment with your own datasets, and let us know if there's anything you'd like to see in the LangChain integration for MariaDB.</p>\n\n<p><iframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/B8XGe4KIv8o\">\n</iframe>\n</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"AI/ML Engineer| Python, Node, FastAPI | LLM & API integration, n8n","url":"https://dev.to/roman_60d27e756c682fc5272/aiml-engineer-python-node-fastapi-llm-api-integration-n8n-216l","date":1761750117,"author":"Roman","guid":320752,"unread":true,"content":"<p><strong>I'm a Senior Software Engineer with 6+ years of experience building scalable backend systems, modern web applications, and AI-powered platforms that deliver real business impact.</strong></p>\n\n<p><strong>🧠 AI/ML Expertise:</strong> I integrate advanced AI/ML solutions including LLMs (OpenAI, Anthropic), NLP, object detection, and predictive analytics — driving intelligent automation and user engagement.<br>\n<strong>🔧 Backend Engineering:</strong> My core stack includes Python (FastAPI, Django, Flask) and Node.js, building RESTful and GraphQL APIs, microservices, and secure, high-performance backends.<br>\n<strong>🧠 Automation &amp; Integrations:</strong> I streamline workflows with Zapier, Make.com, and n8n, connecting AI systems, APIs, and databases to eliminate manual tasks and boost efficiency.<br>\n<strong>📈 SaaS &amp; Data Platforms:</strong> From MVPs to enterprise systems, I deliver backend solutions with real-time processing, secure authentication, and scalable architecture — deployment-ready with Docker, AWS, and CI/CD pipelines.<br>\n<strong>🎨Frontend Designing:</strong> I also work with modern frontend frameworks like React, Vue.js, and Next.js when full-stack support is needed.</p>\n\n<p><strong>🔍 What I Deliver:</strong></p>\n\n<p>🔄Scalable backend APIs (REST, GraphQL) and microservices.<br>\n🤖AI integration with GPT-4, NLP, computer vision, and custom models.<br>\n⚙️Smart automation pipelines using Zapier, Make, and n8n.<br>\n⚡Real-time processing and async workflows.<br>\n☁️Cloud-native deployment Full DevOps cycle: Docker, AWS, GitHub Actions.<br>\n✍️Clean, maintainable, and well-documented code.</p>\n\n<p><strong>🛠️ Skills &amp; Technologies</strong></p>\n\n<p><strong>👉Programming Languages:</strong> Python, JavaScript, TypeScript, Go, PHP, SQL, C#<br>\n<strong>👉Backend Frameworks:</strong> FastAPI, Django, Flask, Node.js, Laravel, .NET Core, Express<br>\n<strong>👉Frontend frameworks:</strong> React, Vue.js, Next.js, and Angular.<br>\n<strong>👉AI/ML &amp; NLP Tools:</strong> OpenAI API, Hugging Face Transformers, Scikit-learn, TensorFlow, PyTorch, spaCy, NLTK, Pandas, NumPy<br>\n<strong>👉Automation &amp; Integration:</strong> Zapier, Make.com, n8n, REST API integration, Webhooks, Event Triggers<br>\n👉Database Systems: PostgreSQL, MySQL, MongoDB, Redis<br>\n<strong>👉DevOps &amp; Cloud:</strong> Docker, AWS (EC2, Lambda, S3, DynamoDB), GitHub Actions, GitLab CI, Nginx<br>\n<strong>👉Other Tools:</strong> Git, Postman, JIRA, Figma, Trello, VS Code, Swagger</p>\n\n<p><strong>✅ Why Clients Work</strong></p>\n\n<p>With Me: 🎯Focused on backend excellence and ML-driven impact<br>\n🔁End-to-end project support — from idea to deployment<br>\n🔒 High attention to detail, security, and scalability<br>\n🗣️Clear communication and a long-term partnership mindset<br>\n🕒Strong track record of delivering production-ready<br>\nsolutions on time<br>\n📩 Let’s build something powerful together — I usually reply within 5 hours.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Looking for a Patner","url":"https://dev.to/roman_60d27e756c682fc5272/looking-for-a-patner-43fj","date":1761749789,"author":"Roman","guid":320751,"unread":true,"content":"<p>About me:<br>\n🌐 I am a senior Python software engineer with experience designing, developing, and deploying scalable backend systems, data pipelines, and AI-powered applications.</p>\n\n<p>Role Overview:<br>\n🗣️ I need a native English speaker to represent me in client interviews and project meetings.<br>\n❌ No coding required, but excellent communication skills are a must!</p>\n\n<p>What You’ll Do:<br>\n📅 Join client interviews &amp; technical discussions<br>\n💼 Attend project meetings once jobs are secured<br>\n👤 Represent a team member’s profile professionally<br>\n🎥 Participate in live coding interviews with video on</p>\n\n<p>You Should Have:<br>\n🗨️ Native-level English<br>\n💪 Confidence in client-facing conversations<br>\n👨‍💻 Comfortable in technical discussions and live coding sessions<br>\n🌎 Preferred location: North America, South America, or Europe</p>\n\n<p>💰 Payment &amp; Growth:<br>\n🤝 Once projects are secured, you’ll share the profit 30:70 for each successfully closed and completed project.<br>\n📈 As we grow together, there will be opportunities for steady pay and long-term collaboration.</p>\n\n<p>Why This Is Awesome:<br>\n🏆 Gain client management &amp; communication skills<br>\n💵 Long-term opportunity with stable pay later</p>\n\n<p>✨ If this sounds like you, we’d love to hear from you!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Hello World!","url":"https://dev.to/lag_lagendary/hello-world-4okg","date":1761748628,"author":"Lag Lagendary","guid":320862,"unread":true,"content":"<p><strong>🚀 Hello, world! I'm a Newbie Developer, and my ideas keep me up at night</strong></p>\n\n<p>Hello everyone! 👋 I'm a newbie developer named LAG (LAG-Lagendary), and I have a blast coming up with all sorts of projects. I think every idea deserves to be realized (or at least uploaded to GitHub before my laptop dies after another \"crazy experiment\" 😂).</p>\n\n<p>Nice to meet you all! I really hope my little projects outlive my computer.</p>\n\n<p><strong>✨ My latest \"crazy\" projects on GitHub</strong></p>\n\n<p>I just posted a couple of my projects and wanted to share them. Maybe they'll inspire someone, or you'd just like to give me some feedback!</p>\n\n<p><strong>📡 Project 1: Signal to Space</strong></p>\n\n<p>Repository: <a href=\"https://github.com/LAG-Lagendary/signal_to_space\" rel=\"noopener noreferrer\">https://github.com/LAG-Lagendary/signal_to_space</a></p>\n\n<p>This project is a series of simple but engaging Python scripts for monitoring the network availability of key public DNS servers: Quad9, Google, Yandex, and others.</p>\n\n<p>What's the gist?</p>\n\n<p>Continuous monitoring: Scripts like ping_counter_Quad9.py or ping_counter_yandex.py continuously send PING requests to a target IP address (e.g., 9.9.9.9 or 77.88.8.8) at a set interval (5 seconds).</p>\n\n<p>Data collection: They record the status (success/error) and, for Linux/macOS, the response latency.</p>\n\n<p>Automation: I use the start_monitoring.sh script to run all counters in the background, and their output is saved in log files.</p>\n\n<p>This is my way of ensuring that my \"connection to the outside world\" is working properly and collecting statistics for future network experiments!</p>\n\n<p><strong>🌍 Project 2: Geo Ping Analyzer</strong></p>\n\n<p>Repository: <a href=\"https://github.com/LAG-Lagendary/Geo-Ping-Analyzer\" rel=\"noopener noreferrer\">https://github.com/LAG-Lagendary/Geo-Ping-Analyzer</a></p>\n\n<p>This tool allows me to roughly determine the geographic location of my network connection. How does it work?</p>\n\n<p>Global Coverage: The geo_ping_analyzer_ru.py script pings over 10 public DNS servers around the world (North and South America, Europe, Asia, Africa, Oceania).</p>\n\n<p>Latency Measurement: It measures the average latency (RTT) and packet loss for each target.</p>\n\n<p>Score: The lowest ping indicates that this server is physically closest to me.</p>\n\n<p>Conclusion: Based on the closest point, the script infers my approximate location (continent/region).</p>\n\n<p>This is a cool way to visualize network distances and routing!</p>\n\n<p><strong>🤝 Let's Chat!</strong></p>\n\n<p>If you're interested in network experiments, Python, or just \"crazy\" ideas, let me know in the comments! I'm open to advice, criticism, and collaboration.</p>\n\n<p>I always believe the best place for ideas is GitHub!</p>\n\n<p>Hashtags for dev.to:</p>\n\n<h1>\n  \n  \n  python #networking #opensource #github #beginners\n</h1>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-2e","date":1761746845,"author":"Vibe YouTube","guid":320750,"unread":true,"content":"<h1>\n  \n  \n  3 Unique Python Features You NEED To Know\n</h1>\n\n<p>Tim’s video dives into three modern Python tricks you’ve probably overlooked: the new <code>match</code> statement for cleaner pattern matching, handy <code>@dataclass</code> decorators that cut boilerplate, and the fine control of positional-only &amp; keyword-only arguments.  </p>\n\n<p>Along the way he plugs Brilliant’s free courses (and a sweet 20% off deal) plus his DevLaunch mentorship if you’re ready to level up beyond tutorials. Happy coding!</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=e0FvoOtdAQc\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Real Python: Logging in Python","url":"https://realpython.com/python-logging/","date":1761746400,"author":"","guid":320738,"unread":true,"content":"<p>Logging in Python lets you record important information about your program’s execution. You use the built-in  module to capture logs, which provide insights into application flow, errors, and usage patterns. With Python logging, you can create and configure loggers, set log levels, and format log messages without installing additional packages. You can also generate log files to store records for later analysis.</p><p><strong>By the end of this tutorial, you’ll understand that:</strong></p><ul><li> involves recording program execution information for later analysis.</li><li>You can use logging to , , and .</li><li>Logging in Python works by  and .</li><li>Using a  provides  and control over log output.</li><li>You should <strong>prefer logging over </strong> because it <strong>decreases the maintenance burden</strong> and allows you to manage log levels.</li></ul><p>You’ll do the coding for this tutorial in the <a href=\"https://realpython.com/python-repl/\">Python standard REPL</a>. If you prefer Python files, then you’ll find a full logging example as a script in the materials of this tutorial. You can download this script by clicking the link below:</p><div><p> Test your knowledge with our interactive “Logging in Python” quiz. You’ll receive a score upon completion to help you track your learning progress:</p><div><div><a href=\"https://realpython.com/quizzes/logging-in-python/\"></a><p>In this quiz, you'll test your understanding of Python's logging module. With this knowledge, you'll be able to add logging to your applications, which can help you debug errors and analyze performance.</p></div></div></div><p>If you’re curious about an alternative to Python’s built-in  module, then check out <a href=\"https://realpython.com/python-loguru/\">How to Use Loguru for Simpler Python Logging</a>. While the standard library’s logging requires explicit configuration of handlers, formatters, and log levels, Loguru comes pre-configured after installing it with <a href=\"https://realpython.com/ref/glossary/pip/\">pip</a>.</p><h2>Starting With Python’s Logging Module</h2><p>The <a href=\"https://docs.python.org/3/library/logging.html#module-logging/\"> module</a> in Python’s <a href=\"https://realpython.com/ref/glossary/standard-library/\">standard library</a> is a ready-to-use, powerful module that’s designed to meet the needs of beginners as well as enterprise teams.</p><div><p> Since logs offer a variety of insights, the  module is often used by other third-party Python libraries, too. Once you’re more advanced in the practice of logging, you can integrate your log messages with the ones from those libraries to produce a homogeneous log for your application.</p></div><p>The main component of the  module is something called the . You can think of the logger as a reporter in your code that decides what to record, at what level of detail, and where to store or send these records.</p><h3>Exploring the Root Logger</h3><p>To get a first impression of how the  module and a logger work, open the <a href=\"https://realpython.com/python-repl/\">Python standard REPL</a> and enter the code below:</p><p>The output shows the severity level before each message along with , which is the name the  module gives to its default logger. This output shows the default format that can be configured to include things like a timestamp or other details.</p><p>In the example above, you’re sending a message on the  logger. The  of the message is . Log levels are an important aspect of logging. By default, there are five <a href=\"https://docs.python.org/3/library/logging.html#logging-levels\">standard severity levels</a> for logging events. Each has a corresponding <a href=\"https://realpython.com/ref/glossary/function/\">function</a> that can be used to log events at that level of severity. </p><div><p> There’s also a  log level, which you’ll encounter later in this tutorial when you learn about custom logging handlers.</p></div><p>Here are the five default log levels, in order of increasing severity:</p><div><table><thead><tr></tr></thead><tbody><tr><td>Provides detailed information that’s valuable to you as a developer.</td></tr><tr><td>Provides general information about what’s going on with your program.</td></tr><tr><td>Indicates that there’s something you should look into.</td></tr><tr><td>Alerts you to an unexpected problem that’s occurred in your program.</td></tr><tr><td>Tells you that a serious error has occurred and may have crashed your app.</td></tr></tbody></table></div><p>The  module provides you with a default logger that allows you to get started with logging without needing to do much configuration. However, the  functions listed in the table above reveal a quirk that you may not expect:</p><p>Notice that the  and  messages didn’t get logged. This is because, by default, the logging module logs the messages with a severity level of  or above. You can change that by configuring the logging module to log events of all levels. </p><p>To set up your basic logging configuration and adjust the log level, the  module comes with a <a href=\"https://docs.python.org/3/library/logging.html#logging.basicConfig\"></a> function. As a Python developer, this <a href=\"https://en.wikipedia.org/wiki/Camel_case\">camel-cased</a> function name may look unusual to you, as it doesn’t follow the <a href=\"https://realpython.com/python-pep8/#naming-conventions\">PEP 8 naming conventions</a>:</p><p>That’s because it was adopted from <a href=\"https://en.wikipedia.org/wiki/Log4j\">Log4j</a>, a logging utility in <a href=\"https://realpython.com/java-vs-python/\">Java</a>. It’s a known issue in the package, but by the time it was decided to add it to the standard library, it had already been adopted by users, and changing it to meet PEP 8 requirements would cause backwards compatibility issues.</p>","contentLength":4570,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"When Terraform Taught Me a Version Lesson, Not a Python One","url":"https://dev.to/techwithhari/when-terraform-taught-me-a-version-lesson-not-a-python-one-3beo","date":1761746347,"author":"Haripriya Veluchamy","guid":320722,"unread":true,"content":"<p>You know those moments in DevOps where everything looks fine <em>until it just… isn’t</em>?<br>\nYeah, this was one of those.</p>\n\n\n<h3>\n  \n  \n  🚀 The setup\n</h3>\n\n<p>I was spinning up a new project in Azure that needed the <strong>same Terraform setup</strong> as one of my older deployments.<br>\nSo, naturally, I copied my existing Terraform configuration, made a few small tweaks, and hit <code>terraform apply</code>.</p>\n\n<p>All was well until one small line decided to ruin my day.</p>\n\n<p>In this project, I wanted to run <strong>Python 3.12</strong> as my App Service runtime.<br>\nMy previous setup used <strong>Python 3.11</strong>, so I just updated the version like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight hcl\"><code><span class=\"nx\">site_config</span> <span class=\"p\">{</span>\n  <span class=\"nx\">python_version</span> <span class=\"p\">=</span> <span class=\"s2\">\"3.12\"</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Simple change, right?<br>\nBut Terraform disagreed.</p>\n\n\n<h3>\n  \n  \n  ⚠️ The problem\n</h3>\n\n<p>The deployment failed with a strange message saying <strong>“Python 3.12 is not available for your system setup.”</strong></p>\n\n<p>That threw me off because when I checked the <strong>Azure Portal</strong>, the 3.12 runtime was <em>clearly listed</em>.<br>\nSo why was Terraform acting like it didn’t exist?</p>\n\n<p>At first, I suspected maybe my App Service Plan or region didn’t support it.<br>\nNope. Everything was fine.</p>\n\n<p>Then it hit me: <em>What if it’s not Azure… but Terraform?</em></p>\n\n\n<h3>\n  \n  \n  🧠 The discovery\n</h3>\n\n<p>I checked the docs for my <strong>AzureRM provider version</strong> it was <strong>3.75</strong>.<br>\nThen I noticed something interesting: support for Python 3.12 in App Service was added only in <strong>provider version 4.x</strong>.</p>\n\n<p>Boom 💡<br>\nThat was it.</p>\n\n<p>Terraform wasn’t the problem my <strong>Terraform provider was outdated</strong> and didn’t even <em>know</em> Python 3.12 existed yet.</p>\n\n\n<h3>\n  \n  \n  🔧 The fix\n</h3>\n\n<p>I updated my Terraform block to use the newer provider:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight hcl\"><code><span class=\"nx\">terraform</span> <span class=\"p\">{</span>\n  <span class=\"nx\">required_providers</span> <span class=\"p\">{</span>\n    <span class=\"nx\">azurerm</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n      <span class=\"nx\">source</span>  <span class=\"p\">=</span> <span class=\"s2\">\"hashicorp/azurerm\"</span>\n      <span class=\"nx\">version</span> <span class=\"p\">=</span> <span class=\"s2\">\"~&gt; 4.0\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Ran <code>terraform init -upgrade</code>, then <code>terraform apply</code> again…<br>\nand just like that, everything worked perfectly.</p>\n\n\n\n\n<h3>\n  \n  \n  💬 The lesson\n</h3>\n\n<p>That day, Terraform taught me something subtle but important:</p>\n\n<blockquote>\n<p>Sometimes it’s not your code that’s outdated it’s the <strong>tool that talks to the cloud</strong>.</p>\n</blockquote>\n\n<p>In this case, my HCL configuration was fine.<br>\nThe problem was the <em>language barrier</em> between Terraform and Azure fixed instantly by updating the provider version.</p>\n\n\n\n\n<h3>\n  \n  \n  🧭 Key takeaway\n</h3>\n\n<p>When you hit strange errors like:</p>\n\n<ul>\n<li>“Resource not available”</li>\n<li>“Invalid attribute”</li>\n<li>“Value not supported”</li>\n</ul>\n\n<p>…even though the cloud UI says otherwise, <strong>check your provider version first</strong>.<br>\nCloud APIs evolve fast Terraform needs to stay in sync to understand the new toys.</p>\n\n\n\n\n<h3>\n  \n  \n  ✨ Final thought\n</h3>\n\n<p>That small hiccup reminded me that DevOps isn’t just about writing perfect code.<br>\nIt’s about understanding how all the moving parts providers, versions, runtimes, APIs evolve together.</p>\n\n<p>And honestly, sometimes, a failed deployment teaches you more than a smooth one ever could.</p>\n\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Advanced YouTube to mp4 Converter.","url":"https://dev.to/joseph_harrison_3e22b55af/advanced-youtube-to-mp4-converter-3kg5","date":1761741626,"author":"Joseph Harrison","guid":320703,"unread":true,"content":"<p>How the “YouTube to MP4” App Works<br>\nA technical deep dive into the pipeline, components, and packaging</p>\n\n<ol>\n<li>High-level overview</li>\n</ol>\n\n<p>The <code>YouTube to mp4.exe</code> app is a self-contained Windows program that takes a YouTube URL and produces an <code>.mp4</code> file on disk. Behind the scenes it’s a Python application wrapped into a standalone <code>.exe</code>. The main building blocks are:</p>\n\n<p>1) GUI layer: A resizable desktop interface built with <code>customtkinter</code> (a themed version of Tkinter).<br>\n2) Download core: <code>yt_dlp</code>, an advanced YouTube/media downloader library.<br>\n3) Transcode / merge layer: <code>ffmpeg</code>, a command-line multimedia tool used to stitch audio and video into one MP4.<br>\n4) Packaging layer: A PyInstaller / auto-py-to-exe bundle that ships Python, <code>yt_dlp</code>, and <code>ffmpeg</code> in one file so it runs on a Windows machine without needing Python installed.</p>\n\n<p>The flow looks like this:</p>\n\n<p>[User pastes URL + picks quality/bitrate in GUI]<br>\n                |<br>\n                v<br>\n        [yt_dlp probes YouTube]<br>\n                |<br>\n                v<br>\n   [App picks the right video stream +<br>\n          best matching audio]<br>\n                |<br>\n                v<br>\n   [Download video-only + audio-only]<br>\n                |<br>\n                v<br>\n        [ffmpeg merges them]<br>\n                |<br>\n                v<br>\n          [Final MP4 saved]</p>\n\n<p>At very low resolutions (like 360p), YouTube often provides “progressive” MP4s that already contain both audio and video in one file. In that case the pipeline is shorter: no merge step is needed. At higher qualities (720p, 1080p, 1440p, 2160p/4K), YouTube usually splits audio and video into separate tracks, so you have to download both and mux them together.</p>\n\n<p>The app automates all of that so the user just clicks Download.</p>\n\n<ol>\n<li>The GUI layer (CustomTkinter)</li>\n</ol>\n\n<p>Tech used</p>\n\n<ul>\n<li>\n<code>tkinter</code> is Python’s standard library GUI toolkit.</li>\n<li>\n<code>customtkinter</code> is an enhanced theming layer on top of tkinter that gives you modern-looking widgets, dark mode styling, sliders, switches, etc.</li>\n</ul>\n\n<p>From inspecting the bundled executable, we can see <code>customtkinter</code> modules (<code>customtkinter.windows.widgets.ctk_button</code>, <code>ctk_slider</code>, <code>ctk_label</code>, etc.) embedded in the binary. That tells us the interface isn’t just bare Tkinter — it’s using CustomTkinter widgets for cleaner layout and nicer visuals.</p>\n\n<p>What the interface does<br>\nThe GUI typically provides:</p>\n\n<ul>\n<li>A text field to paste the YouTube URL.</li>\n<li>Controls to choose output quality (e.g. 360p → 4K).</li>\n<li>A bitrate / quality slider for video.</li>\n<li>Toggle-style options (for example: “video+audio MP4” vs “audio-only MP3/M4A”, or similar optional features).</li>\n<li>A start/download button.</li>\n<li>A progress area or status label to show what’s happening.</li>\n</ul>\n\n<p>There was also work done so the window is resizable, because long labels / switches on the far right were getting cut off in earlier fixed-size versions. You can see evidence of that in an internal string:<br>\n<code>YouTube_yt_dlp_GUI_v2_resizable</code></p>\n\n<p>So “v2_resizable” is basically UX polish:</p>\n\n<ul>\n<li>The window can stretch horizontally.</li>\n<li>Text on the far-right no longer gets clipped.</li>\n<li>Sliders and toggle switches stay visible.</li>\n</ul>\n\n<p>Event flow<br>\nWhen you click Download:</p>\n\n<p>1) The GUI grabs all the current settings (URL, chosen resolution/bitrate, etc.).<br>\n2) It calls into the download function (a Python function in your app).<br>\n3) While download/transcode is happening, the GUI can update the status text (“Downloading video…”, “Merging audio…”, etc.) instead of freezing silently.</p>\n\n<p>That last part usually uses either:</p>\n\n<ul>\n<li>\n<code>after()</code> callbacks in Tkinter to poll progress, or</li>\n<li>threading so the UI doesn’t lock while <code>yt_dlp</code> and <code>ffmpeg</code> are running.</li>\n</ul>\n\n<ol>\n<li>Format discovery (getting the available qualities)</li>\n</ol>\n\n<p>When you paste a YouTube link, the app doesn’t just blindly download. Step one is “probe the video.”</p>\n\n<p>Under the hood this is <code>yt_dlp.YoutubeDL().extract_info(url, download=False)</code>.</p>\n\n<p>That call:</p>\n\n<ul>\n<li>Connects to YouTube.</li>\n<li>Collects metadata (title, duration, channel, etc.).</li>\n<li>Enumerates all available formats: every resolution, container type, codec, bitrate, whether it has audio, etc.</li>\n</ul>\n\n<p>The result is basically a big Python dict. A simplified version of what one entry in <code>formats</code> might look like:</p>\n\n<p>{<br>\n    \"format_id\": \"248\",<br>\n    \"ext\": \"webm\",<br>\n    \"vcodec\": \"vp9\",<br>\n    \"acodec\": \"none\",<br>\n    \"height\": 1080,<br>\n    \"fps\": 30,<br>\n    \"tbr\": 2500.12,   # approx video bitrate in kbps<br>\n    \"filesize\": 12345678,<br>\n    \"url\": \"<a href=\"https://r3---sn-abc123.googlevideo.com/videoplayback?..\" rel=\"noopener noreferrer\">https://r3---sn-abc123.googlevideo.com/videoplayback?..</a>.\"<br>\n}</p>\n\n<p>Some formats are audio-only (<code>acodec</code> is set, <code>vcodec</code> is <code>none</code>).<br>\nSome are video-only (<code>vcodec</code> is set, <code>acodec</code> is <code>none</code>).<br>\nSome (usually ≤480p) are “progressive,” meaning they include both audio and video in one file.</p>\n\n<p>Your GUI uses this data to populate:</p>\n\n<ul>\n<li>The resolution dropdown / slider.</li>\n<li>The bitrate slider (because <code>tbr</code> gives an approximate bitrate).</li>\n<li>Potentially which formats are even allowed. For example, if the user chooses 4K but the video only goes up to 1080p, the app can warn them or silently fall back.</li>\n</ul>\n\n<ol>\n<li>Choosing the right streams</li>\n</ol>\n\n<p>Once the user picks a target quality, the app applies selection logic. In English:</p>\n\n<p>1) If a progressive MP4 exists at or below the requested quality:</p>\n\n<ul>\n<li>Grab that single file. Done.</li>\n</ul>\n\n<p>2) Else (adaptive streaming path):</p>\n\n<ul>\n<li>Find the best video-only stream that matches the requested resolution or bitrate.</li>\n<li>Find the best audio-only stream (often <code>m4a</code> or <code>opus</code>).</li>\n<li>Download both separately.</li>\n<li>Merge them into final MP4.</li>\n</ul>\n\n<p>This two-track path is required for HD and above because YouTube serves HD/FullHD/4K as DASH/HLS adaptive segments: video and audio are delivered separately.</p>\n\n<p>Some versions of your app include a manual bitrate slider for video. That slider influences which <code>yt_dlp</code> format is chosen. Instead of always taking “bestvideo”, it can pick the stream with a total bitrate closest to the slider value. That’s handy if you want smaller file sizes instead of always forcing the top-bitrate variant.</p>\n\n<ol>\n<li>Downloading the streams</li>\n</ol>\n\n<p><code>yt_dlp</code> can either:</p>\n\n<ul>\n<li>Be asked to download the formats directly to disk, or</li>\n<li>Be asked just to give you the direct media URLs, and then you download them yourself.</li>\n</ul>\n\n<p>Most YouTube download tools do something like:</p>\n\n<p>ydl_opts = {<br>\n    \"outtmpl\": \"C:/path/%(title)s.%(ext)s\",<br>\n    \"format\": \"bestvideo[height&lt;=1080]+bestaudio/best[height&lt;=1080]\",<br>\n    \"merge_output_format\": \"mp4\",<br>\n    \"ffmpeg_location\": \"path\\to\\ffmpeg.exe\"<br>\n}<br>\nwith yt_dlp.YoutubeDL(ydl_opts) as ydl:<br>\n    ydl.download([url])</p>\n\n<p>That <code>format</code> string is powerful. It literally tells <code>yt_dlp</code>:</p>\n\n<ul>\n<li>Try to grab best video up to 1080p plus best audio.</li>\n<li>If that fails, fall back to best progressive format up to 1080p.</li>\n<li>Output as MP4 in the end.</li>\n</ul>\n\n<p>In your app, this logic is effectively wrapped behind GUI choices instead of requiring the user to know the syntax. The GUI converts “1080p” + “target bitrate 4 Mbps” + “MP4 output” into actual yt_dlp options.</p>\n\n<p>While downloading, yt_dlp also produces progress hooks. The app can register a callback that receives events like:</p>\n\n<ul>\n<li>“downloading: 34.5%”</li>\n<li>“postprocessing: merging formats”</li>\n</ul>\n\n<p>That’s how the GUI can update a label or progress bar live.</p>\n\n<ol>\n<li>Merging audio + video into MP4</li>\n</ol>\n\n<p>When the video-only and audio-only files are finished, we end up with something like:</p>\n\n<ul>\n<li>\n<code>temp_video.webm</code> (VP9, H.264, etc.)</li>\n<li>\n<code>temp_audio.m4a</code> (AAC)</li>\n</ul>\n\n<p>To turn those into one playable <code>.mp4</code>, the app uses <code>ffmpeg</code>. <code>ffmpeg</code> is a command-line tool that can mux streams together, convert codecs, change containers, etc.</p>\n\n<p>A typical merge command (conceptually) looks like:</p>\n\n<p>ffmpeg -i temp_video.webm -i temp_audio.m4a ^<br>\n  -c:v copy -c:a aac ^<br>\n  \"FinalVideo.mp4\"</p>\n\n<p>Key points:</p>\n\n<ul>\n<li>\n<code>-c:v copy</code> means “don’t re-encode the video, just copy the stream.” That preserves quality and speeds things up.</li>\n<li>\n<code>-c:a aac</code> either copies AAC directly or re-encodes audio to AAC, depending on source format and MP4 compatibility.</li>\n<li>Output is a normal MP4 that basically every player can open.</li>\n</ul>\n\n<p>In many GUI-driven downloaders, you never see this step because it’s done automatically. <code>yt_dlp</code> can even call <code>ffmpeg</code> for you as a “postprocessor,” so you don’t always have to shell out manually. The executable includes <code>yt_dlp.postprocessor.ffmpeg</code>, so we know that ffmpeg postprocessing is built-in.</p>\n\n<p>In plain terms: the tool quietly runs ffmpeg behind the scenes to deliver a final MP4 that “just works.”</p>\n\n<ol>\n<li>Handling YouTube quirks (consent, age gates, etc.)</li>\n</ol>\n\n<p>YouTube sometimes walls off higher-quality or certain tracks behind extra checks (cookie consent, age verification, region restrictions, etc.).</p>\n\n<p>That’s why:</p>\n\n<ul>\n<li>You might see low-res formats (like 360p) download fine,</li>\n<li>but 1080p / 4K fails with messages about consent or “sign in to confirm your age.”</li>\n</ul>\n\n<p>The app tries to solve the “normal” path (public videos, no login). For restricted videos, two things can happen:<br>\n1) yt_dlp throws an error saying it can’t fetch the high-res formats.<br>\n2) The merge step never triggers because the high-res video-only stream never came down.</p>\n\n<p>There’s been discussion around importing cookies from Chrome / Opera GX so yt_dlp can pretend to be your logged-in browser. That’s a common workaround: passing a cookies file lets yt_dlp access formats your browser is allowed to see. The fact that browsers like Opera GX and Chrome were mentioned means the tool is being pushed in that direction, even if it’s not fully automated.</p>\n\n<p>In other words:</p>\n\n<ul>\n<li>Low resolutions = easier, single file, no special access.</li>\n<li>High resolutions / HDR / age-restricted videos = may require browser cookies or fail if you’re “unauthenticated.”</li>\n</ul>\n\n<ol>\n<li>Output management</li>\n</ol>\n\n<p>After the merge, the app:</p>\n\n<ul>\n<li>Builds a sane filename (usually based on the YouTube title, cleaned so it’s a valid Windows filename).</li>\n<li>Saves the final MP4 to a chosen folder (often Downloads or the working directory).</li>\n<li>(Optionally) deletes the temporary <code>temp_video</code> / <code>temp_audio</code> files once the final MP4 is confirmed to exist.</li>\n</ul>\n\n<p>Sanitizing the filename matters because YouTube titles can contain characters Windows doesn’t like, such as <code>:</code> or <code>?</code>.</p>\n\n<p>A typical sanitiser does something like:</p>\n\n<p>import re<br>\ndef clean_name(title):<br>\n    return re.sub(r'[&lt;&gt;:\"/|?*]', '_', title)</p>\n\n<p>That prevents Windows Explorer from complaining.</p>\n\n<ol>\n<li>Packaging into a standalone <code>.exe</code>\n</li>\n</ol>\n\n<p>Python scripts normally require:</p>\n\n<ul>\n<li>A Python interpreter,</li>\n<li>Your <code>.py</code> files,</li>\n<li>Third-party modules (<code>yt_dlp</code>, <code>customtkinter</code>, etc.),</li>\n<li>And <code>ffmpeg.exe</code> somewhere on disk.</li>\n</ul>\n\n<p>That’s annoying to ship to non-technical users. So the project is bundled into a self-contained Windows executable.</p>\n\n<p>This was likely done with <code>auto-py-to-exe</code>, which is a wrapper around <code>PyInstaller</code> that gives you a point-and-click interface to build <code>.exe</code>s.</p>\n\n<p>Here’s roughly what happens in packaging:</p>\n\n<p>1) Your Python source + libraries get analyzed.<br>\n2) All the bytecode, plus resource files, plus <code>ffmpeg.exe</code>, is stuffed into a single archive.<br>\n3) PyInstaller’s bootloader (a small C program) is placed in front of that archive.<br>\n   When you run <code>Youtube to mp4.exe</code>, the bootloader:</p>\n\n<ul>\n<li>Creates a temporary extraction folder (often a <code>_MEIxxxxx</code> folder in <code>%TEMP%</code>).</li>\n<li>Unpacks Python, your code, yt_dlp, ffmpeg, and all needed DLLs there.</li>\n<li>Executes your <code>main</code> script as if you just ran <code>python main.py</code>.</li>\n</ul>\n\n<p>Because of this, the <code>.exe</code> you provided is fairly large — on the order of tens of megabytes. It’s not “just the script,” it’s Python runtime + libraries + ffmpeg + everything else.</p>\n\n<p>Advantages of this approach:</p>\n\n<ul>\n<li>The end user does not need Python installed.</li>\n<li>The UI and download logic behave consistently across systems.</li>\n<li>You can add an icon and a nice filename so it feels like a normal Windows app.</li>\n</ul>\n\n<ol>\n<li>Error handling and UX polish</li>\n</ol>\n\n<p>There are a few user-experience choices baked into the current design:</p>\n\n<ul>\n<li>Resizable window: solves clipped widgets (like the far-right toggle text).</li>\n<li>Quality slider / dropdown: instead of dumping a giant advanced list of formats (<code>248</code>, <code>251</code>, <code>bestvideo+bestaudio/best</code> etc.), the tool shows “720p,” “1080p,” “4K,” etc.</li>\n<li>Bitrate slider: lets you choose file size vs quality without needing to know internal <code>tbr</code> values.</li>\n<li>Progress messages: things like “Downloading video…”, “Merging audio…”, “Done!”. This gives feedback during long downloads.</li>\n<li>Graceful fallback: if 4K fails because YouTube blocks access, the tool can either tell you why or drop to a working format (like 360p progressive) instead of silently crashing.</li>\n</ul>\n\n<ol>\n<li>Putting it all together</li>\n</ol>\n\n<p>Here’s the full lifecycle of one download request:</p>\n\n<p>1) User input</p>\n\n<ul>\n<li>You paste a YouTube URL into the GUI.</li>\n<li>You pick a resolution/bitrate with the sliders and toggles.</li>\n</ul>\n\n<p>2) Probe formats</p>\n\n<ul>\n<li>The app calls <code>yt_dlp</code> in “info only” mode to list available formats and metadata.</li>\n</ul>\n\n<p>3) Pick strategy</p>\n\n<ul>\n<li>If there’s a progressive MP4 at or under the target quality: choose that.</li>\n<li>Otherwise, choose the best video-only stream that matches your quality/bitrate, and the best audio-only stream.</li>\n</ul>\n\n<p>4) Download</p>\n\n<ul>\n<li>The app downloads those streams.</li>\n<li>The GUI updates status as it goes.</li>\n</ul>\n\n<p>5) Mux / Merge</p>\n\n<ul>\n<li>\n<code>ffmpeg</code> (bundled inside the .exe) merges video+audio into one MP4.</li>\n<li>No manual ffmpeg knowledge needed — it runs invisibly in the background.</li>\n</ul>\n\n<p>6) Cleanup and save</p>\n\n<ul>\n<li>The final MP4 is renamed using a cleaned-up video title.</li>\n<li>Temporary chunks get deleted.</li>\n<li>The GUI reports success.</li>\n</ul>\n\n<p>7) You watch the video</p>\n\n<ul>\n<li>You now have a normal <code>.mp4</code> that will open in VLC, Windows Media Player, etc.</li>\n</ul>\n\n<ol>\n<li>Why this design works well</li>\n</ol>\n\n<ul>\n<li>No external setup: Everything is in one EXE, so a non-technical user can double-click it on Windows and immediately use it.</li>\n<li>GUI instead of command line: People don’t have to memorize yt-dlp or ffmpeg arguments.</li>\n<li>Quality control: The app exposes “quality,” “resolution,” and “bitrate” as sliders / dropdowns instead of scary codec jargon.</li>\n<li>Automatic merge: The tool handles adaptive streaming (audio/video split) automatically, so HD and 4K downloads become a single click.</li>\n</ul>\n\n<p>In short, the app is a friendly wrapper around a pretty advanced chain:<br>\nscrape → choose formats → download streams → transcode/mux → save MP4,<br>\nall orchestrated through a Python GUI and shipped as a Windows-native <code>.exe</code>.</p>\n\n<p>Here is the repo! <a href=\"https://github.com/Coolythecoder/Youtube-to-mp4\" rel=\"noopener noreferrer\">https://github.com/Coolythecoder/Youtube-to-mp4</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-4gjl","date":1761739633,"author":"Vibe YouTube","guid":320702,"unread":true,"content":"<p>3 Unique Python Features You NEED To Know highlights three modern tricks you’ve probably never used: the new match statement for cleaner multi-way branching, dataclasses to auto-generate boilerplate code like <strong>init</strong> and <strong>repr</strong>, and positional-only &amp; keyword-only arguments to enforce clear, predictable function interfaces.</p>\n\n<p>Plus, you get a free access link (with 20% off) to Brilliant for daily learning and a shout-out to Tim’s DevLaunch mentorship program for hands-on project-based guidance.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=e0FvoOtdAQc\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Created InstaScrape an Async Instagram Comment Scraper, looking for feedbacks and contributions.","url":"https://dev.to/kaifcodec/created-instascrape-an-async-instagram-comment-scraper-looking-for-feedbacks-and-contributions-3ikh","date":1761738700,"author":"kaifcodec","guid":320670,"unread":true,"content":"<h2>\n  \n  \n  🚀 InstaScrape → Async Instagram Comment Scraper\n</h2>\n\n<p>Visit: <a href=\"https://github.com/kaifcodec/InstaScrape.git\" rel=\"noopener noreferrer\">Github</a></p>\n\n\n\n\n<p>Scrape <strong>all parent comments</strong> from any Instagram Reel with <strong>automated login</strong>, <strong>async speed</strong>, <strong>real-time progress</strong>, and <strong>clean exports</strong> — no manual cookie copying required.</p>\n\n\n\n\n<h2>\n  \n  \n  ✨ Features\n</h2>\n\n<ul>\n<li>✅ <strong>Automated Login</strong>: <code>cookie.json</code> persistence with iat + expiry, no manual cookies needed.</li>\n<li>🔄 <strong>Self-healing Auth</strong>: detects expired cookies mid-run, prompts relogin, resumes automatically.</li>\n<li>⚡ <strong>Async Engine</strong>: powered by <code>httpx.AsyncClient</code> with requests-per-second throttling.</li>\n<li>📊 <strong>Progress Tracking</strong>: accurate percent and ETA from Instagram’s comment count.</li>\n<li>📁 <strong>Dual Exports</strong>: TXT and JSON files saved in timestamped folders.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  📦 Requirements\n</h2>\n\n<ul>\n<li>Python <strong>3.9+</strong>\n</li>\n<li>Dependencies:\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>pip <span class=\"nb\">install</span> <span class=\"nt\">-r</span> requirements.txt\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  🛠️ Installation\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>git clone https://github.com/kaifcodec/InstaScrape\n<span class=\"nb\">cd </span>InstaScrape\npip <span class=\"nb\">install</span> <span class=\"nt\">-r</span> requirements.txt\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  ▶️ Usage\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>python3 main.py\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>Enter the Instagram Reel URL (e.g., <a href=\"https://www.instagram.com/reel/SHORTCODE/\" rel=\"noopener noreferrer\">https://www.instagram.com/reel/SHORTCODE/</a>).</li>\n<li>Set Max requests per second (5-7 recommended). Adjust for stability.</li>\n<li>On first run, provide username/password; cookie.json is created and reused until expiry.</li>\n</ul>\n\n<h2>\n  \n  \n  📁 Output\n</h2>\n\n<ul>\n<li>TXT: download_comments/txt/reel_comments_YYYYMMDD_HHMMSS.txt</li>\n<li>JSON: download_comments/json/reel_comments_YYYYMMDD_HHMMSS.json\nExample JSON structure:\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"o\">{</span>\n  <span class=\"s2\">\"generated_at\"</span>: 1700000000,\n  <span class=\"s2\">\"count\"</span>: 123,\n  <span class=\"s2\">\"comments\"</span>: <span class=\"o\">[</span>\n    <span class=\"o\">{</span> <span class=\"s2\">\"username\"</span>: <span class=\"s2\">\"user1\"</span>, <span class=\"s2\">\"text\"</span>: <span class=\"s2\">\"Nice!\"</span>, <span class=\"s2\">\"created_at\"</span>: 1699999000 <span class=\"o\">}</span>\n  <span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  🔧 How it Works\n</h2>\n\n<ul>\n<li>Cookie Lifecycle: cookie.json stores iat and expiry; validated on startup &amp; during requests.</li>\n<li>Error Resilience: retries transient errors and refreshes cookies on 401/redirect-to-login.</li>\n<li>Progress Accuracy: uses Instagram’s comment count to calculate percent &amp; ETA.</li>\n<li>Async Efficiency: httpx.AsyncClient with HTTP/2, keep-alive, and RPS limiter.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  💡 Tips\n</h2>\n\n<ul>\n<li>Start with 5-7 RPS to minimize throttling; increase gradually.</li>\n<li>Filenames use local time; switch to UTC by replacing datetime.now() with datetime.utcnow() in main.py.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  ⚠️ Disclaimer\n</h2>\n\n<p>Use responsibly. Comply with Instagram’s Terms of Service. Intended for personal or permitted use only.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Transformers for Unseen Patterns: Bayesian Clustering Reimagined","url":"https://dev.to/arvind_sundararajan/transformers-for-unseen-patterns-bayesian-clustering-reimagined-11f6","date":1761735726,"author":"Arvind SundaraRajan","guid":320648,"unread":true,"content":"<h1>\n  \n  \n  Transformers for Unseen Patterns: Bayesian Clustering Reimagined\n</h1>\n\n<p>Ever struggle to find clear clusters in messy data, uncertain about how many groups truly exist? Traditional clustering algorithms often assume neat, well-defined boundaries, but reality is messier. What if we could estimate the <em>probability</em> of data belonging to different clusters and even the <em>number</em> of clusters itself, all while handling missing data gracefully? </p>\n\n<p>Imagine you're a detective trying to solve a mystery. Instead of simply assigning suspects to possible crime scenes, you're also trying to figure out how many suspects were <em>actually</em> involved, acknowledging that some evidence might be missing or unreliable. This is the essence of Bayesian clustering – it's about embracing uncertainty to find the most probable underlying structure in your data.</p>\n\n<p>The trick is using transformer architectures – typically associated with natural language processing – to estimate the posterior probability distribution over cluster assignments and the number of clusters. By training these models on synthetically generated datasets, they learn to infer the hidden structure of your data without the need for manual feature engineering or assumptions about the underlying distributions. The transformer's self-attention mechanism allows it to effectively weigh the importance of different data points when determining cluster membership.</p>\n\n<p><strong>Benefits:</strong></p>\n\n<ul>\n<li>  <strong>Handles Uncertainty:</strong> Provides probabilistic cluster assignments, reflecting the confidence in each data point's membership.</li>\n<li>  <strong>Discovers the Right Number of Clusters:</strong> Automatically estimates the optimal number of clusters, avoiding guesswork and model selection.</li>\n<li>  <strong>Robust to Missing Data:</strong> Performs well even with significant amounts of missing data, without relying on simple imputation techniques.</li>\n<li>  <strong>Scales Efficiently:</strong> Offers faster clustering compared to traditional Bayesian methods, crucial for large datasets.</li>\n<li>  <strong>Adapts to Complex Data:</strong> Can be trained on custom priors to handle specialized data structures.</li>\n<li>  <strong>Automated Feature Importance:</strong> Identifies the most important data dimensions for clustering through the attention mechanism.</li>\n</ul>\n\n<p>One implementation challenge is the creation of representative synthetic training data. The variety and complexity of the synthetic data directly affect the model's ability to generalize to real-world datasets. As a practical tip, consider incorporating domain expertise when crafting the synthetic data generation process to guide the model toward meaningful solutions.</p>\n\n<p>Imagine using this for fraud detection, identifying distinct groups of fraudulent transactions and adapting to the evolving landscape of scams. Or consider using it in medical imaging to automatically identify distinct tumor subtypes, even with noisy or incomplete scans.</p>\n\n<p>This approach offers a powerful way to uncover hidden patterns in data, paving the way for more robust and insightful data analysis. By leveraging the power of transformers and Bayesian principles, we can move beyond simple clustering and unlock a deeper understanding of the underlying structures in our data.</p>\n\n<p><strong>Related Keywords:</strong> Transformer models, Bayesian clustering algorithms, Unsupervised learning techniques, Self-attention mechanism, Clustering evaluation, Data analysis, Pattern recognition, Model interpretability, Scalable clustering, High-dimensional data, Probabilistic models, Variational inference, Markov Chain Monte Carlo, BERT, GPT, Vision transformers, Time series clustering, Anomaly detection, Generative models, Latent space, Embedding space, Neural networks, Data mining</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Unlocking the Future: Affiliate AI - A One-Stop Hub for All AI Tools","url":"https://dev.to/techy_anurag_5f47923d6082/unlocking-the-future-affiliate-ai-a-one-stop-hub-for-all-ai-tools-254m","date":1761733539,"author":"Anurag Singh","guid":320647,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fgfydicsjsnkamdtix989.jpeg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fgfydicsjsnkamdtix989.jpeg\" alt=\" \" width=\"800\" height=\"171\"></a>In the fast-evolving landscape of digital technology, staying ahead of the curve is more important than ever. Enter Affiliate AI, a revolutionary platform designed to consolidate all your AI needs in one convenient location. Whether you're a seasoned tech enthusiast or just beginning to explore the possibilities of artificial intelligence, Affiliate AI promises to be your trusted ally in navigating this complex domain.<br>\nVisit website[<a href=\"https://www.affiliateengineai.com/special/\" rel=\"noopener noreferrer\">https://www.affiliateengineai.com/special/</a>]</p>\n\n<h3>\n  \n  \n  Features That Set Affiliate AI Apart\n</h3>\n\n<p>Affiliate AI isn't just another tool in the crowded AI market; it's a comprehensive suite designed to enhance productivity, creativity, and efficiency. Here are some of the standout features:</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fsagk6kxouighrpqk5qeu.jpeg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fsagk6kxouighrpqk5qeu.jpeg\" alt=\" \" width=\"800\" height=\"1337\"></a></p>\n\n<ol>\n<li><p><strong>Integrated AI Solutions</strong>: With Affiliate AI, you gain access to a diverse range of AI tools all under one roof. From natural language processing and machine learning algorithms to advanced data analytics, the platform covers a broad spectrum of AI applications.</p></li>\n<li><p><strong>User-Friendly Interface</strong>: The platform's intuitive design ensures that even those new to AI can easily navigate and utilize its features. With clear instructions and an accessible layout, Affiliate AI removes the intimidation factor typically associated with complex AI systems.</p></li>\n<li><p><strong>Customization and Flexibility</strong>: Understanding that every user has unique needs, Affiliate AI offers customizable options that allow you to tailor the tools to suit your specific requirements. This flexibility ensures that you can maximize the potential of the AI technology available.</p></li>\n<li><p><strong>Continuous Updates and Improvements</strong>: In a field as dynamic as AI, staying updated is crucial. Affiliate AI commits to regular updates, ensuring that you always have access to the latest advancements and innovations in AI technology.</p></li>\n</ol>\n\n<h3>\n  \n  \n  Competitive and Transparent Pricing\n</h3>\n\n<p>One of the key considerations for any digital tool is its cost-effectiveness. Affiliate AI offers competitive pricing plans that provide excellent value for both individuals and businesses. With multiple tiers available, users can select a plan that aligns with their budget and usage needs. This transparent pricing model ensures that you only pay for what you need, making cutting-edge AI tools accessible to a broader audience.</p>\n\n<h3>\n  \n  \n  Exciting Bonuses to Sweeten the Deal\n</h3>\n\n<p>Affiliate AI goes beyond just offering tools; it provides users with exciting bonuses that enhance the overall experience. New subscribers can look forward to exclusive access to premium content, tutorials, and even one-on-one consultations with AI experts. These bonuses are designed to empower users, helping them leverage AI technologies to their fullest potential.</p>\n\n<h3>\n  \n  \n  All AI Tools in One Place - The Ultimate Convenience\n</h3>\n\n<p>The beauty of Affiliate AI lies in its ability to bring all AI tools into a single, cohesive platform. This integration saves time and effort, eliminating the need to juggle multiple subscriptions or platforms. Whether you are interested in AI for business intelligence, creative projects, or personal growth, Affiliate AI provides the ultimate convenience by making all resources readily available in one place.<br>\nVisit official website<a href=\"https://dev.tourl\">https://warriorplus.com/o2/a/gq549bh/0</a></p>\n\n<h3>\n  \n  \n  Conclusion\n</h3>\n\n<p>As we continue to embrace the digital age, having a reliable partner like Affiliate AI can be a game-changer. With its robust features, competitive pricing, and comprehensive suite of AI tools, Affiliate AI is poised to become the go-to platform for anyone looking to harness the power of artificial intelligence. Explore the possibilities and discover how Affiliate AI can transform your approach to technology. Welcome to the future of AI, where everything you need is just a click away.<br>\nVisit official website<a href=\"https://dev.tourl\">https://warriorplus.com/o2/a/gq549bh/0</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-1al7","date":1761732451,"author":"Vibe YouTube","guid":320646,"unread":true,"content":"<p>Build a Python AI agent from scratch in under 10 minutes with Tech With Tim’s step-by-step guide—install your dependencies, grab an OpenAI API key, import the right modules, define your tools, wire up the LLM and agent, write some driver code, and watch it run.  </p>\n\n<p>You’ll get the video walkthrough, GitHub repo, handy timestamps, plus bonus links to a free Notion trial, PyCharm IDE, and Tim’s DevLaunch mentorship program—everything you need to go from zero to AI agent hero.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=gaGaPpnexxA\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-5em8","date":1761732443,"author":"Vibe YouTube","guid":320645,"unread":true,"content":"<p><strong>3 Unique Python Features You NEED To Know</strong></p>\n\n<p>Python quietly packs some neat tricks most developers never see in the wild. In this quick overview, you’ll learn how to harness the new <code>match</code> statement for pattern matching, leverage the <code>dataclasses</code> module to cut boilerplate when defining classes, and enforce cleaner APIs with positional-only &amp; keyword-only function arguments.</p>\n\n<p>Want more? Dive in with Tech With Tim’s video, grab a 20% Brilliant Premium discount for free daily puzzles &amp; courses, or level up your coding career with the DevLaunch mentorship program—real projects, real guidance, zero fluff.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=e0FvoOtdAQc\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Unveiling the Power of Priority Queues in Data Structures and Algorithms","url":"https://dev.to/vjnvisakh/unveiling-the-power-of-priority-queues-in-data-structures-and-algorithms-29f1","date":1761732000,"author":"Visakh Vijayan","guid":320669,"unread":true,"content":"<h2>The Essence of Priority Queues</h2>\n<p>Priority queues are a crucial component in the realm of data structures and algorithms, offering a way to manage elements based on their priority levels. Unlike traditional queues, where elements are processed in a first-in-first-out manner, priority queues prioritize elements based on a defined priority criterion.</p>\n<h3>Implementation of Priority Queues</h3>\n<p>One common way to implement a priority queue is by using a binary heap, a complete binary tree where each node satisfies the heap property. Here's a simple example of a priority queue implemented using a binary heap in Python:</p>\n<pre><code>import heapq\n\n<p>class PriorityQueue:<br>\n    def <strong>init</strong>(self):<br>\n        self.elements = []</p>\n\n<pre class=\"highlight plaintext\"><code>def push(self, item, priority):\n    heapq.heappush(self.elements, (priority, item))\n\ndef pop(self):\n    return heapq.heappop(self.elements)[1]\n</code></pre>\n\n</code></pre>\n<h3>Operations on Priority Queues</h3>\n<p>Priority queues support key operations such as <em>insertion</em> and <em>extraction of the highest-priority element</em>. These operations are crucial in scenarios where tasks need to be executed based on their priority levels.</p>\n<h3>Applications of Priority Queues</h3>\n<p>Priority queues find applications in various algorithms such as Dijkstra's algorithm for finding the shortest path in a graph and Huffman coding for data compression. Their efficiency in handling prioritized tasks makes them indispensable in optimizing algorithm performance.</p>\n<h2>Conclusion</h2>\n<p>Priority queues play a vital role in streamlining the processing of elements based on their priority levels. Understanding their implementation and applications can significantly enhance algorithm design and efficiency.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building Tiramisu: An Open-Source Multi-Expert RAG Framework for Marketing Consultancy","url":"https://dev.to/tiramisuframework/building-tiramisu-an-open-source-multi-expert-rag-framework-for-marketing-consultancy-lc7","date":1761730586,"author":"tiramisu-framework","guid":320600,"unread":true,"content":"<p>TL;DR</p>\n\n<p>I just published Tiramisu Framework — an open-source Python framework that provides AI-powered marketing consultancy by synthesizing insights from three complementary perspectives using RAG (Retrieval-Augmented Generation).<br>\npip install tiramisu-framework<br>\n🔗 <a href=\"https://github.com/tiramisu-framework/tiramisu\" rel=\"noopener noreferrer\">GitHub</a><br>\n🔗 <a href=\"https://pypi.org/project/tiramisu-framework/\" rel=\"noopener noreferrer\">PyPI</a><br>\n📧 <a href=\"mailto:frameworktiramisu@gmail.com\">frameworktiramisu@gmail.com</a><br>\nThe Problem</p>\n\n<p>Traditional marketing consultancy is:<br>\n    • Expensive ($10k–50k+ per engagement)<br>\n    • Slow (weeks to months)<br>\n    • Not scalable (limited expert availability)<br>\n    • Single-perspective (one consultant = one viewpoint)</p>\n\n<p>Businesses need strategic guidance now, not weeks from now.</p>\n\n<p>⸻</p>\n\n<p>The Solution: Multi-Perspective RAG</p>\n\n<p>What if you could get marketing analysis from three complementary perspectives — strategic fundamentals, digital tactics, and transformation strategy — instantly?<br>\nThat’s what Tiramisu Framework does.</p>\n\n<p>The Three Perspectives<br>\n    1.  Strategic Marketing Fundamentals → positioning, competitive analysis, core principles<br>\n    2.  Digital Marketing &amp; Social Media → modern tactics, content strategy, engagement<br>\n    3.  Digital Transformation &amp; Innovation → tech integration, business model innovation</p>\n\n<p>Architecture<br>\nUser Query<br>\n    ↓<br>\nQuery Expansion (synonyms, related terms)<br>\n    ↓<br>\nFAISS Vector Search (semantic retrieval)<br>\n    ↓<br>\nContext Assembly (relevant chunks from 3 perspectives)<br>\n    ↓<br>\nGPT-4 Synthesis (structured analysis)<br>\n    ↓<br>\nParsed Response (Roots → Trunk → Branches)<br>\nTech Stack</p>\n\n<p>Core: Python 3.11+, FastAPI, LangChain, FAISS (Meta AI), OpenAI GPT-4<br>\nFeatures: CLI (tiramisu init, build-index, run), REST API + conversation management, SQLite, Pydantic schemas</p>\n\n<p>⸻</p>\n\n<p>Code Walkthrough</p>\n\n<p>RAG Initialization<br>\nfrom tiramisu import TiramisuRAG</p>\n\n<p>rag = TiramisuRAG(<br>\n    faiss_index_path=\"data/faiss_index\",<br>\n    openai_api_key=\"your-key\"<br>\n)<br>\nfrom tiramisu import TiramisuRAG</p>\n\n<p>rag = TiramisuRAG(<br>\n    faiss_index_path=\"data/faiss_index\",<br>\n    openai_api_key=\"your-key\"<br>\n)<br>\nSimple Analysis<br>\nquery = \"\"\"<br>\nB2B SaaS startup, $50k/month marketing budget.<br>\nNeed to improve inbound lead generation.<br>\n\"\"\"<br>\nresult = rag.analyze(query)<br>\nprint(result)<br>\nConversational Mode<br>\nfrom tiramisu.core import ConversationManager</p>\n\n<p>manager = ConversationManager()<br>\nconv_id = manager.create_conversation(title=\"Marketing Strategy Discussion\")<br>\nresponse = manager.add_message(conversation_id=conv_id, user_message=\"How do I position against competitors?\")<br>\nhistory = manager.get_conversation_history(conv_id)<br>\nThe “Three Trees” Methodology</p>\n\n<p>🌱 ROOTS (Foundations)</p>\n\n<p>Deep context, root causes, resources/capabilities.</p>\n\n<p>🌳 TRUNK (Core Strategy)</p>\n\n<p>Positioning, value proposition, competitive differentiation.</p>\n\n<p>🍃 BRANCHES (Tactics)</p>\n\n<p>Action plan, KPIs, timeline.</p>\n\n<p>⸻</p>\n\n<p>CLI in Action</p>\n\n<h1>\n  \n  \n  Initialize project\n</h1>\n\n<p>tiramisu init my-marketing-ai</p>\n\n<h1>\n  \n  \n  Add your own documents\n</h1>\n\n<p>tiramisu add-docs ./marketing-docs/</p>\n\n<h1>\n  \n  \n  Build FAISS index\n</h1>\n\n<p>tiramisu build-index</p>\n\n<h1>\n  \n  \n  Start API server\n</h1>\n\n<p>tiramisu run</p>\n\n<h1>\n  \n  \n  → <a href=\"http://127.0.0.1:8000\" rel=\"noopener noreferrer\">http://127.0.0.1:8000</a>\n</h1>\n\n<p>API Endpoints<br>\nPOST /analyze<br>\nPOST /conversations<br>\nPOST /conversations/{id}/messages<br>\nGET  /conversations/{id}/history</p>\n\n<p>Why Open Source?</p>\n\n<p>Transparency, credibility, community.<br>\nBusiness model: framework free; paid services for expanded knowledge bases, custom integrations, support, white-label.</p>\n\n<p>⸻</p>\n\n<p>Challenges Solved</p>\n\n<p>Query expansion<br>\n\"improve marketing\" →<br>\n[\"enhance marketing\",\"optimize campaigns\",\"increase ROI\",\"boost engagement\"]</p>\n\n<p>Multi-perspective synthesis<br>\nRetrieve strategic + digital + transformation contexts → synthesize with perspective-aware prompting</p>\n\n<p>Context window management<br>\nSmart chunking (800/150) + re-ranking + top-k</p>\n\n<p>Structured output<br>\n{ \"roots\": {...}, \"trunk\": {...}, \"branches\": {...},<br>\n  \"perspective_insights\": { \"strategic\": \"...\", \"digital\": \"...\", \"transformation\": \"...\" } }</p>\n\n<p>Performance<br>\n    • Retrieval: &lt;100ms (FAISS)<br>\n    • Generation: 3–8s (GPT-4)<br>\n    • Total: &lt;10s per analysis<br>\n    • Async FastAPI for concurrency</p>\n\n<p>⸻</p>\n\n<p>Installation &amp; Quick Test<br>\npip install tiramisu-framework<br>\npython -c \"from tiramisu import TiramisuRAG; print('✅ Ready')\"<br>\ntiramisu init demo &amp;&amp; cd demo &amp;&amp; tiramisu run</p>\n\n<p>Real-World Example (simplified)</p>\n\n<p>Input<br>\nB2B SaaS, low lead quality, $30k/month budget</p>\n\n<p>Output<br>\n🌱 ROOTS — misaligned targeting; unclear value prop<br>\n🌳 TRUNK — ABM with ICP refinement + personalized nurture<br>\n🍃 BRANCHES — 8-week plan; KPIs: Lead→SQL, CAC, velocity</p>\n\n<p>What’s Next</p>\n\n<p>v1.1: more perspective domains, dashboard, multi-language, CRM integrations<br>\nv2.0: multi-agent collab, predictive analytics, A/B testing</p>\n\n<p>Lessons Learned</p>\n\n<p>RAG ≠ only vector search • Structured prompts win • Synthesis &gt; concatenation • Conversation state is hard • Good CLI matters • Open source builds trust</p>\n\n<p>⸻</p>\n\n<p>Try It Now<br>\n🔗 <a href=\"https://github.com/tiramisu-framework/tiramisu\" rel=\"noopener noreferrer\">GitHub</a><br>\n🔗 <a href=\"https://pypi.org/project/tiramisu-framework/\" rel=\"noopener noreferrer\">PyPI</a><br>\n📧 <a href=\"mailto:frameworktiramisu@gmail.com\">frameworktiramisu@gmail.com</a><br>\nContributing</p>\n\n<p>PRs welcome! Areas: domain curation, React/Next dashboard, tests/CI, docs, alt embeddings.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"🚀 How I Built a Multi-Agent AI Workflow System with n8n and Python","url":"https://dev.to/roman_60d27e756c682fc5272/how-i-built-a-multi-agent-ai-workflow-system-with-n8n-and-python-41m1","date":1761729225,"author":"Roman","guid":320599,"unread":true,"content":"<p><strong>Introduction</strong></p>\n\n<p>Over the last few months, I’ve been working on an AI Agents Repository — a modular system where each agent handles a specific automation task using n8n, LangChain, and Python microservices.</p>\n\n<p>The goal? To create a shared framework where developers can easily contribute new AI agents that solve real-world automation problems — from sales call prep to document RAG pipelines.</p>\n\n<p><strong>💡 Problem</strong></p>\n\n<p>Every automation project I’ve seen starts from scratch: new logic, new scripts, new integrations.<br>\nThat’s fine for prototypes, but it doesn’t scale — especially when working with multiple AI workflows across clients.</p>\n\n<p>I wanted a way to:<br>\nReuse modular AI logic (LLMs, data pipelines, integrations)<br>\nMaintain consistency and quality across agents<br>\nSupport fast iteration and collaboration across teams</p>\n\n<p><strong>🧠 Architecture Overview</strong></p>\n\n<p>+--------------------------+<br>\n|      n8n Workflow        |<br>\n|  (Agent Orchestrator)    |<br>\n+-----------+--------------+<br>\n            |<br>\n            v<br>\n+--------------------------+<br>\n|  Python Microservice     |<br>\n|  (LangChain / FastAPI)   |<br>\n+-----------+--------------+<br>\n            |<br>\n            v<br>\n+--------------------------+<br>\n|  Shared Vector Database  |<br>\n| (PGVector / Pinecone)    |<br>\n+--------------------------+<br>\nEach agent runs inside n8n but delegates LLM logic to a Python microservice using FastAPI.<br>\nThat microservice uses LangChain and a shared vector store for context retrieval and reasoning.</p>\n\n<p><strong>⚙️ Example Use-Case: Sales Call Prep Agent</strong></p>\n\n<p>The “Sales Calls Prep” AI Agent automatically gathers a prospect’s info, analyzes their company, identifies potential pain points, and produces a concise briefing for a sales call.</p>\n\n<p>Inputs:<br>\nProspect name, company domain, and LinkedIn profile</p>\n\n<p>Outputs:<br>\nShort summary of the person and company<br>\nPain points inferred from public data<br>\nSuggested call flow with value propositions<br>\nThis agent runs daily for each active sales lead and outputs structured JSON + Markdown for human review.</p>\n\n<p><strong>🧩 Stack &amp; Tools</strong></p>\n\n<p>n8n — visual workflow orchestrator<br>\nLangChain — LLM pipeline and tool calling<br>\nFastAPI — backend microservice<br>\nPostgreSQL + PGVector — semantic memory store<br>\nDocker Compose — for easy local development<br>\nOpenAI / Claude APIs — model layer</p>\n\n<p><strong>🔍 Lessons Learned</strong></p>\n\n<p>Workflow modularity is critical: separating orchestration (n8n) from logic (Python) simplifies debugging and versioning.<br>\nSchema validation saves time: strict JSON outputs make downstream automation reliable.<br>\nVector databases matter: semantic search eliminates brittle keyword matching.</p>\n\n<p><strong>🌍 What’s Next</strong></p>\n\n<p>I’m currently extending this system to support:<br>\nRole-based access control for multi-tenant setups<br>\nShared prompt libraries and reusable embeddings<br>\nWeb dashboard for monitoring AI agent performance<br>\nIf you’re working on anything similar — multi-agent systems, RAG pipelines, or workflow automation — I’d love to connect and exchange ideas.</p>\n\n<p><strong>🧑‍💻 About Me</strong></p>\n\n<p>I’m Roman Buhyna, a Senior AI Engineer &amp; Full-Stack Developer (Python, FastAPI, React, LangChain, Docker, GCP).<br>\nOver 10+ years, I’ve helped teams build scalable backend systems and AI-powered products — from health-tech to workflow automation platforms.<br>\nLet’s connect on LinkedIn or GitHub  — I’m always open to new collaborations and technical discussions.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"I Analyzed 5,000 Job Postings: Here's the Real ROI of Prompt Engineering Skills","url":"https://dev.to/tixu_ai/i-analyzed-5000-job-postings-heres-the-real-roi-of-prompt-engineering-skills-1848","date":1761726889,"author":"Tixu.Ai","guid":320582,"unread":true,"content":"<p>Let's be real. The AI hype is deafening. Every other day there's a new \"game-changing\" model, and every other LinkedIn post is about the \"Prompt Engineer\" role.</p>\n\n<p>But as a developer and data geek, I had a nagging question: Is this just a bubble? Is \"Prompt Engineering\" a real, durable career path, or is it just a fancy term for \"Googling with extra steps\"?</p>\n\n<p>Instead of guessing, I decided to do what we do best: <strong>follow the data</strong>.<br>\nI scraped and analyzed over 5,000 recent tech job postings to find the ground truth. My goal was to cut through the noise and get hard numbers on the real Return on Investment (ROI) of learning these new AI skills.</p>\n\n<p>Spoiler alert: <strong>The ROI is very, very real. And it's bigger than I thought</strong>.</p>\n<h2>\n  \n  \n  My Game Plan: Turning Job Listings into Hard Data\n</h2>\n\n<p>To get clean answers, I needed a clean dataset. My process was simple but rigorous:</p>\n\n<p><strong>Scrape the Data</strong>: I wrote a Python script to gather 5,120 job listings from major platforms (LinkedIn, Indeed, etc.) posted between August and October 2025. I looked for keywords like \"AI Engineer,\" \"LLM,\" \"Prompt Engineer,\" and \"Generative AI.\"</p>\n\n<p><strong>Filter for Quality</strong>: I tossed out internships, part-time gigs, and junior roles to focus on positions requiring at least 2 years of experience.</p>\n\n<p><strong>Classify the Skills</strong>: This was the fun part. I used a fine-tuned NLP model to read each job description and tag the specific skills required. I wasn't just looking for \"prompting.\" I broke it down into categories like API integration (think LangChain), model fine-tuning, and building autonomous AI agents.</p>\n\n<p>Here’s a conceptual peek at the kind of script I used for scraping. (This is simplified, of course—the real version had a lot more error handling and politeness delays!)<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\nKEYWORDS = [\"Prompt Engineer\", \"AI Engineer\", \"LLM Developer\"]\nBASE_URL = \"https://www.indeed.com/jobs?q=\"\n\ndef scrape_job_data(keyword):\n    \"\"\"\n    Conceptual function to scrape job data.\n    Respects robots.txt and includes a proper user-agent in production.\n    \"\"\"\n    job_listings = []\n    url = f\"{BASE_URL}{keyword.replace(' ', '+')}\"\n\n    try:\n        # Always use a descriptive User-Agent!\n        response = requests.get(url, headers={'User-Agent': 'Tixu.ai Research Bot 1.0'})\n        response.raise_for_status()\n        soup = BeautifulSoup(response.text, 'html.parser')\n\n        # NOTE: Selectors are illustrative\n        for job_card in soup.find_all('div', class_='job_seen_beacon'):\n            title = job_card.find('h2', class_='jobTitle').text.strip()\n            company = job_card.find('span', class_='companyName').text.strip()\n            job_listings.append({'title': title, 'company': company})\n\n    except requests.exceptions.RequestException as e:\n        print(f\"Error scraping {url}: {e}\")\n\n    return job_listings\n\n# We ran this logic for all our keywords to build the initial dataset.\n# df = pd.DataFrame(...)\n# print(\"Data collection complete. Starting analysis...\")\n</code></pre>\n\n</div>\n\n\n\n<p>After cleaning and processing, I was left with a rich dataset ready for analysis. Here are the three \"Aha!\" moments that jumped out.</p>\n\n<h2>\n  \n  \n  Finding #1: This isn't a Trend, It's a Tectonic Shift\n</h2>\n\n<p>The first thing I noticed was the growth rate. The number of jobs requiring serious AI skills is growing at an insane <strong>15% quarter-over-quarter</strong>.</p>\n\n<p>For context, that’s faster than almost any other specialization in tech. This isn't a temporary fad. It's a fundamental shift in what the market demands. The baseline for a top-tier developer in 2025 now includes the ability to build with and on top of LLMs.</p>\n\n<h2>\n  \n  \n  Finding #2: The Money Shot — The $25,000 Salary Bump is Real\n</h2>\n\n<p>This is the data point that made me sit up straight.<br>\nWhen I compared apples-to-apples—a software engineer with 5 years of experience vs. a software engineer with 5 years of experience plus applied AI skills—the difference was stark.</p>\n\n<p>On average, professionals with a demonstrable \"AI/Prompt Engineering\" skillset earn an <strong>18-22% salary premium</strong>. In real dollars, that translates to a <strong>$25,000 bump</strong> in annual salary.</p>\n\n<p>A lot of people are asking, <a href=\"https://dev.to/tixu_ai/is-tixu-ai-legit-a-2025-review-of-its-promise-to-turn-ai-skills-into-income-15ia\">\"Is Tixu.ai Legit? A 2025 Review\"</a> often revolves around the ROI. When a skill set can directly lead to this kind of salary increase, the value proposition becomes crystal clear.</p>\n\n<h2>\n  \n  \n  Finding #3: It’s Not Just About Prompting—It’s About the Stack\n</h2>\n\n<p>Here’s the most actionable insight: \"Prompt Engineer\" is a poor job title. The real money isn't in just \"writing good prompts.\" It's in being a great developer who also understands the full AI stack.</p>\n\n<p><strong>The skills that correlated with the highest salaries were:</strong></p>\n\n<p>🤖 <strong>Agentic Workflow Design</strong>: The #1 most valuable skill. This is about building autonomous AI agents that can reason, plan, and execute multi-step tasks.</p>\n\n<p>🔗 <strong>API &amp; Framework Mastery</strong>: Deep, practical knowledge of tools like LangChain, LlamaIndex, and the OpenAI/Anthropic APIs. This is non-negotiable for senior roles.</p>\n\n<p>💸 <strong>Cost &amp; Latency Optimization</strong>: Knowing how to write prompts and structure calls to reduce token usage and speed up responses. This is a massive commercial skill that employers are desperate for.</p>\n\n<h2>\n  \n  \n  So, What Does This Mean For You?\n</h2>\n\n<p>This data tells a clear story: a chaotic, \"learn-as-you-go\" approach to AI isn't going to cut it. The market wants specific, interconnected skills.</p>\n\n<p>This is the very reason we built the Tixu.ai framework. We saw that the gap wasn't in the availability of information, but in the lack of a structured path from \"curious developer\" to \"highly-paid AI practitioner.\"</p>\n\n<p><strong>Our curriculum is built directly on this data, focusing on three pillars:</strong></p>\n\n<p><strong>Foundational Concepts</strong>: Understand how the models work, not just how to talk to them.</p>\n\n<p><strong>Applied Tooling</strong>: Build real, portfolio-worthy projects using the exact tools the market is demanding.</p>\n\n<p><strong>Economic Value</strong>: Learn to build AI solutions that are not just cool, but also efficient and profitable.</p>\n\n<h2>\n  \n  \n  My Final Take\n</h2>\n\n<p>Stop wondering if AI skills are valuable. The data is in, and the answer is a resounding \"yes.\"</p>\n\n<p>The better question is: What's your plan to acquire the right skills?</p>\n\n<p>The demand is real, the salary bump is significant, and the path is clear for those who approach it with a strategic, data-driven mindset.<br>\nWhat do you think? Does this data match what you're seeing in the market?</p>\n\n<p>Drop a comment below!</p>\n\n<p>For the data purists who want to see the full academic-style report, you can check out the <a href=\"https://gist.github.com/tixuai/4080a83833546e22c6c73dbb590f0c26\" rel=\"noopener noreferrer\">Technical Analysis on our GitHub Gist</a>. And to see the framework this research inspired, head over to <a href=\"https://tixu.ai\" rel=\"noopener noreferrer\">https://tixu.ai</a>.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"live Xxxx Videos +18","url":"https://dev.to/gullo_zour_1a8bc00e0c2a9d/live-xxxx-videos-18-2jmi","date":1761725710,"author":"gullo zour","guid":320581,"unread":true,"content":"<p>live Videos Me 👉  ;; <a href=\"https://psee.io/8a3cck\" rel=\"noopener noreferrer\">https://psee.io/8a3cck</a><br>\nlive Videos Me 👉  ;; <a href=\"https://psee.io/8a3cew\" rel=\"noopener noreferrer\">https://psee.io/8a3cew</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"🚀 Beginner's Guide to Flask Web Development","url":"https://dev.to/codeneuron/beginners-guide-to-flask-web-development-3ldd","date":1761725559,"author":"likhitha manikonda","guid":320580,"unread":true,"content":"<p>Welcome to your first steps into the world of Flask! Flask is a lightweight and powerful web framework for Python that makes it easy to build web applications. In this guide, we'll walk through the essential concepts of Flask in simple terms with examples and explanations for beginners.</p>\n\n\n\n\n<h2>\n  \n  \n  🧠 Introduction to Flask Framework\n</h2>\n\n<p>Flask is a <strong>micro web framework</strong> written in Python. It’s called “micro” because it doesn’t require particular tools or libraries. It gives you the flexibility to choose your components.</p>\n\n<h3>\n  \n  \n  Why Flask?\n</h3>\n\n<ul>\n<li>  Simple and easy to learn</li>\n<li>  Great for small to medium-sized applications</li>\n<li>  Large community and lots of extensions</li>\n</ul>\n\n<h3>\n  \n  \n  Installation\n</h3>\n\n<p>To install Flask, use pip:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>pip <span class=\"nb\">install </span>flask\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  🏗️ Understanding a Simple Flask App Skeleton\n</h2>\n\n<p>Here’s the basic structure of a Flask app:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>  <span class=\"c1\"># Create a Flask app instance\n</span>\n<span class=\"nd\">@app.route</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">/</span><span class=\"sh\">'</span><span class=\"p\">)</span>        <span class=\"c1\"># Define a route for the home page\n</span><span class=\"k\">def</span> <span class=\"nf\">home</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"s\">Hello, Flask!</span><span class=\"sh\">\"</span>  <span class=\"c1\"># Return a simple response\n</span>\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">__main__</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># Run the app in debug mode\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Explanation:\n</h3>\n\n<ul>\n<li>  <code>Flask(__name__)</code>: Initializes the app. <code>__name__</code> helps Flask locate resources.</li>\n<li>  <code>@app.route('/')</code>: Maps the URL <code>/</code> to the <code>home()</code> function.</li>\n<li>  <code>home()</code>: Returns a response when the route is accessed.</li>\n<li>  <code>app.run(debug=True)</code>: Starts the server and shows errors in the browser.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  🌐 Integrating HTML with Flask Web App\n</h2>\n\n<p>Flask can render HTML templates using the <code>render_template()</code> function.</p>\n\n<h3>\n  \n  \n  Folder Structure:\n</h3>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>project/\n├── app.py\n└── templates/\n    └── index.html\n</code></pre>\n\n</div>\n<h3>\n  \n  \n  <code>app.py</code>:\n</h3>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">render_template</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app.route</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">/</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">home</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"nf\">render_template</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">index.html</span><span class=\"sh\">'</span><span class=\"p\">)</span>  <span class=\"c1\"># Renders the HTML file\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  <code>templates/index.html</code>:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Flask App&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Welcome to Flask!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Explanation:\n</h3>\n\n<ul>\n<li>  Flask looks for HTML files in the <code>templates/</code> folder.</li>\n<li>  <code>render_template()</code> loads and displays the HTML file.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  🔁 Working with HTTP Verbs: GET and POST\n</h2>\n\n<p>Flask supports different HTTP methods like GET and POST to handle form data.</p>\n\n<h3>\n  \n  \n  Example:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">request</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app.route</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">/form</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">GET</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">POST</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">form</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">POST</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">form</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">]</span>  <span class=\"c1\"># Get data from form\n</span>        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Hello, </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">!</span><span class=\"sh\">\"</span>\n    <span class=\"k\">return</span> <span class=\"sh\">'''</span><span class=\"s\">\n        &lt;form method=</span><span class=\"sh\">\"</span><span class=\"s\">post</span><span class=\"sh\">\"</span><span class=\"s\">&gt;\n            Name: &lt;input type=</span><span class=\"sh\">\"</span><span class=\"s\">text</span><span class=\"sh\">\"</span><span class=\"s\"> name=</span><span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"s\">&gt;\n            &lt;input type=</span><span class=\"sh\">\"</span><span class=\"s\">submit</span><span class=\"sh\">\"</span><span class=\"s\">&gt;\n        &lt;/form&gt;\n    </span><span class=\"sh\">'''</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Explanation:\n</h3>\n\n<ul>\n<li>  <code>GET</code>: Loads the form.</li>\n<li>  <code>POST</code>: Submits the form and processes the data.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  🔗 Building Dynamic URLs, Variable Rules, and Jinja2 Template Engine\n</h2>\n\n<h3>\n  \n  \n  Dynamic URLs:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@app.route</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">/user/&lt;username&gt;</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">show_user</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">User: </span><span class=\"si\">{</span><span class=\"n\">username</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Explanation:\n</h3>\n\n<ul>\n<li>  <code>&lt;username&gt;</code> is a variable in the URL.</li>\n<li>  Flask passes it to the function as an argument.</li>\n</ul>\n\n\n\n\n<h3>\n  \n  \n  Jinja2 Template Engine\n</h3>\n\n<p>Jinja2 lets you embed Python-like expressions in HTML.</p>\n\n<h3>\n  \n  \n  Example <code>profile.html</code>:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>&lt;h1&gt;Hello, {{ name }}!&lt;/h1&gt;\n\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  <code>app.py</code>:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@app.route</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">/hello/&lt;name&gt;</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nf\">render_template</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">profile.html</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Explanation:\n</h3>\n\n<ul>\n<li>  <code>{{ name }}</code> is replaced with the actual value passed from Flask.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  🔌 Working with REST APIs and HTTP Verbs PUT and DELETE\n</h2>\n\n<p>Flask makes it easy to build RESTful APIs using different HTTP methods.</p>\n\n<h3>\n  \n  \n  Example:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">jsonify</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"nd\">@app.route</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">/item/&lt;key&gt;</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">PUT</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">put_item</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">):</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">value</span><span class=\"sh\">'</span><span class=\"p\">)</span>  <span class=\"c1\"># Get JSON data\n</span>    <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n    <span class=\"k\">return</span> <span class=\"nf\">jsonify</span><span class=\"p\">({</span><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"p\">})</span>\n\n<span class=\"nd\">@app.route</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">/item/&lt;key&gt;</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">DELETE</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">delete_item</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n        <span class=\"k\">del</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"nf\">jsonify</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">message</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">Deleted</span><span class=\"sh\">'</span><span class=\"p\">})</span>\n    <span class=\"k\">return</span> <span class=\"nf\">jsonify</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">error</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">Not found</span><span class=\"sh\">'</span><span class=\"p\">}),</span> <span class=\"mi\">404</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Explanation:\n</h3>\n\n<ul>\n<li>  <code>PUT</code>: Adds or updates data.</li>\n<li>  <code>DELETE</code>: Removes data if it exists.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  ✅ Summary\n</h2>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Concept</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Flask</td>\n<td>Micro web framework for Python</td>\n</tr>\n<tr>\n<td>App Skeleton</td>\n<td>Basic structure with routes</td>\n</tr>\n<tr>\n<td>HTML Integration</td>\n<td>Use <code>render_template</code> and <code>templates/</code> folder</td>\n</tr>\n<tr>\n<td>GET/POST</td>\n<td>Handle form data and user input</td>\n</tr>\n<tr>\n<td>Dynamic URLs</td>\n<td>Use <code>&lt;variable&gt;</code> in routes</td>\n</tr>\n<tr>\n<td>Jinja2</td>\n<td>Template engine for dynamic HTML</td>\n</tr>\n<tr>\n<td>REST APIs</td>\n<td>Build endpoints with PUT and DELETE</td>\n</tr>\n</tbody>\n</table></div>\n\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-b","date":1761725346,"author":"Vibe YouTube","guid":320579,"unread":true,"content":"<h2>\n  \n  \n  TL;DR\n</h2>\n\n<p>Ready to spin up your own Python AI agent in under ten minutes? This quick‐fire walkthrough covers installing the OpenAI SDK, snagging your API key, setting up imports, defining handy tools, wiring up the LLM agent, writing a tiny driver script, and running basic tests to see it all come alive.</p>\n\n<p>Along the way you’ll get free access to Notion and PyCharm, plus a sneak peek at Tim’s DevLaunch mentorship program. All the code lives on GitHub, and a timestamped guide keeps you on track from start to finish.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=gaGaPpnexxA\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-23m3","date":1761725334,"author":"Vibe YouTube","guid":320578,"unread":true,"content":"<p>Ever feel like you’re missing out on Python’s coolest tricks? Tim dives into three under-the-radar features—structural pattern matching with the new <code>match</code> statement, boilerplate-slashing <code>@dataclass</code>, and the power move of positional-only &amp; keyword-only arguments—showing you how they can make your code cleaner and more expressive.</p>\n\n<p>Plus, you can level up for free on Brilliant (20% off Premium) and, if you really want hands-on coaching, check out Tim’s DevLaunch mentorship for real-world projects and job-ready skills.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=e0FvoOtdAQc\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Callback the Police: Enforcing Business Rules in AI Agents 👮‍♂️","url":"https://dev.to/greyisheepai/callback-the-police-enforcing-business-rules-in-ai-agents-1nfk","date":1761724586,"author":"Claret Ibeawuchi","guid":320571,"unread":true,"content":"<h2>\n  \n  \n  Table of Contents\n</h2>\n\n<ul>\n<li>The Traffic Cop Analogy</li>\n<li>What Are Callbacks in AI Agents?</li>\n<li>The before_tool_callback: Your First Line of Defense</li>\n<li>Real-World Pattern: Admin Payment Exemption</li>\n<li>Real-World Pattern: Tool Interception and Routing</li>\n<li>Real-World Pattern: Auto-Injecting Context</li>\n<li>Real-World Pattern: Detecting Admin Message Leaks</li>\n<li>Common Mistakes and How to Avoid Them</li>\n<li>When to Use Which Callback</li>\n<li>Key Takeaways</li>\n<li>Resources</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  The Traffic Cop Analogy\n</h2>\n\n<p>Imagine a busy intersection without traffic lights or stop signs, just drivers making their own decisions. Most would probably stop and check. Some might slow down. A few might just go, assuming others will yield.</p>\n\n<p>That's your AI agent without callbacks.</p>\n\n<p>Now add a traffic cop who:</p>\n\n<ul>\n<li>\n<strong>Blocks</strong> unsafe moves before they happen</li>\n<li>\n<strong>Redirects</strong> traffic when routes are closed</li>\n<li>\n<strong>Enforces</strong> rules consistently, regardless of driver intent</li>\n</ul>\n\n<p>That's your AI agent <strong>with callbacks</strong>.</p>\n\n<p>The difference? One relies on hoping drivers (the LLM) make good decisions. The other <strong>enforces</strong> good decisions with authority.</p>\n\n\n\n\n<h2>\n  \n  \n  What Are Callbacks in AI Agents?\n</h2>\n\n<p>Callbacks are functions that run at specific points in your agent's lifecycle, giving you programmatic control over agent behavior.</p>\n\n<p>Think of them as <strong>hooks</strong> where you can:</p>\n\n<ul>\n<li>✅ Intercept actions before they execute</li>\n<li>✅ Modify parameters or route to different functions</li>\n<li>✅ Block unauthorized operations</li>\n<li>✅ Inject additional context</li>\n<li>✅ Validate outputs before users see them</li>\n</ul>\n\n<h3>\n  \n  \n  The Callback Lifecycle\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>User: \"Create an order for me\"\n         ↓\n    [LLM reasoning...]\n         ↓\n    Decides to call: process_payment(amount=250)\n         ↓\n    ┌────────────────────────────────────┐\n    │  before_tool_callback()            │  ← YOU ARE HERE\n    │  \"Should this be allowed?\"         │    (Pre-execution)\n    └────────────────────────────────────┘\n         ↓\n    [Tool executes: process_payment()]\n         ↓\n    [LLM generates response...]\n         ↓\n    ┌────────────────────────────────────┐\n    │  after_model_callback()            │  ← YOU ARE HERE\n    │  \"Is this response correct?\"       │    (Post-generation)\n    └────────────────────────────────────┘\n         ↓\n    User sees: \"Payment of $250 processed successfully\"\n</code></pre>\n\n</div>\n\n\n\n<p>Callbacks sit <strong>between</strong> the LLM's decisions and their execution/output, giving you the final say.</p>\n\n\n\n\n<h2>\n  \n  \n  The before_tool_callback: Your First Line of Defense\n</h2>\n\n<p>The <code>before_tool_callback</code> runs <strong>before every tool call</strong> the LLM tries to make. This is where you enforce business rules.</p>\n\n<h3>\n  \n  \n  Signature and Components\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">before_tool_callback</span><span class=\"p\">(</span>\n    <span class=\"n\">tool</span><span class=\"p\">:</span> <span class=\"n\">BaseTool</span><span class=\"p\">,</span>           <span class=\"c1\"># The tool about to be called\n</span>    <span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span>               <span class=\"c1\"># Arguments the LLM provided\n</span>    <span class=\"n\">tool_context</span><span class=\"p\">:</span> <span class=\"n\">ToolContext</span> <span class=\"c1\"># Session state, auth token, etc.\n</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    Returns:\n    - None: Proceed with normal tool execution\n    - dict: Skip execution and return this result instead\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">pass</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  What You Can Do\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">before_tool_callback</span><span class=\"p\">(</span><span class=\"n\">tool</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">tool_context</span><span class=\"p\">):</span>\n    <span class=\"n\">tool_name</span> <span class=\"o\">=</span> <span class=\"n\">tool</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">__name__</span>\n\n    <span class=\"c1\"># 1. BLOCK unauthorized actions\n</span>    <span class=\"k\">if</span> <span class=\"n\">tool_name</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">delete_user</span><span class=\"sh\">\"</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nf\">is_admin</span><span class=\"p\">(</span><span class=\"n\">tool_context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"sh\">\"</span><span class=\"s\">error</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">message</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Unauthorized: Admin access required</span><span class=\"sh\">\"</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"c1\"># 2. ROUTE to different implementations\n</span>    <span class=\"k\">if</span> <span class=\"n\">tool_name</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">get_price</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nf\">is_premium_tier</span><span class=\"p\">(</span><span class=\"n\">tool_context</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"nf\">calculate_premium_price</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nf\">calculate_standard_price</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 3. MODIFY parameters before execution\n</span>    <span class=\"k\">if</span> <span class=\"n\">tool_name</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">search_database</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Add tenant filter for multi-tenant systems\n</span>        <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">tenant_id</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tool_context</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">tenant_id</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 4. INJECT missing context\n</span>    <span class=\"k\">if</span> <span class=\"n\">tool_name</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">create_order</span><span class=\"sh\">\"</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">args</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">user_id</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n        <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">user_id</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tool_context</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">current_user_id</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"bp\">None</span>  <span class=\"c1\"># Proceed with (possibly modified) execution\n</span></code></pre>\n\n</div>\n\n\n\n<p>The callback can:</p>\n\n<ul>\n<li>\n<strong>Return a result</strong> → Skip tool execution entirely, use your result</li>\n<li>\n<strong>Modify <code>args</code> in place</strong> → Tool executes with modified parameters</li>\n<li>\n<strong>Return None</strong> → Tool executes normally</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  Real-World Pattern: Admin Payment Exemption\n</h2>\n\n<p><strong>Problem:</strong> Our agent was asking admin users to pay for services. Admins should create orders for free on behalf of customers.</p>\n\n<p><strong>Why it happened:</strong> The LLM doesn't understand business roles, it just follows the general user flow.</p>\n\n<p><strong>Solution:</strong> Intercept payment tool calls and block them for admin users.</p>\n\n<h3>\n  \n  \n  Implementation\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">before_tool_callback</span><span class=\"p\">(</span><span class=\"n\">tool</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">tool_context</span><span class=\"p\">):</span>\n    <span class=\"n\">tool_name</span> <span class=\"o\">=</span> <span class=\"n\">tool</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">__name__</span>\n\n    <span class=\"c1\"># Get or cache admin status\n</span>    <span class=\"n\">is_admin</span> <span class=\"o\">=</span> <span class=\"n\">tool_context</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">session:is_admin</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">is_admin</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"c1\"># First time - check auth token and cache result\n</span>        <span class=\"n\">auth_token</span> <span class=\"o\">=</span> <span class=\"n\">tool_context</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">auth_token</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">is_admin</span> <span class=\"o\">=</span> <span class=\"nf\">check_admin_status</span><span class=\"p\">(</span><span class=\"n\">auth_token</span><span class=\"p\">)</span>\n        <span class=\"n\">tool_context</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">session:is_admin</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">is_admin</span>  <span class=\"c1\"># Cache it\n</span>\n    <span class=\"c1\"># ========================================================================\n</span>    <span class=\"c1\"># ADMIN PAYMENT EXEMPTION\n</span>    <span class=\"c1\"># Block payment tools for admin users - admins create orders for free\n</span>    <span class=\"c1\"># ========================================================================\n</span>    <span class=\"k\">if</span> <span class=\"n\">tool_name</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">process_payment</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">charge_card</span><span class=\"sh\">\"</span><span class=\"p\">]:</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_admin</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">🔐 ADMIN USER: Blocking </span><span class=\"si\">{</span><span class=\"n\">tool_name</span><span class=\"si\">}</span><span class=\"s\"> - no payment required</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Mark session as payment exempt\n</span>            <span class=\"n\">tool_context</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">session:payment_status</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">admin_exempt</span><span class=\"sh\">\"</span>\n\n            <span class=\"c1\"># Return success WITHOUT executing payment\n</span>            <span class=\"k\">return</span> <span class=\"p\">{</span>\n                <span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                <span class=\"sh\">\"</span><span class=\"s\">message</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">✅ Admin user - no payment required. You can proceed immediately.</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                <span class=\"sh\">\"</span><span class=\"s\">admin_exemption</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n                <span class=\"sh\">\"</span><span class=\"s\">payment_status</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">admin_exempt</span><span class=\"sh\">\"</span>\n            <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"bp\">None</span>  <span class=\"c1\"># Non-payment tools execute normally\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  What Happens\n</h3>\n\n<p><strong>Before callbacks:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Admin: \"Create an order\"\nAgent: \"I'll need to process your payment first...\"\nAdmin: /frustration/ \"I'm an admin!\"\n</code></pre>\n\n</div>\n\n\n\n<p><strong>After callbacks:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Admin: \"Create an order\"\n[Callback intercepts payment tool call]\n[Returns success without executing payment]\nAgent: \"✅ Admin user - no payment required. Creating your order now...\"\nAdmin: /happy/\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Key Insights\n</h3>\n\n<ol>\n<li>\n<strong>Admin status is cached</strong> in session state, we only check once per session</li>\n<li>\n<strong>Multiple payment tool names</strong> are covered (any payment-related tool)</li>\n<li>\n<strong>Logs include context</strong> (🔐 emoji for security actions)</li>\n<li>\n<strong>Session state updated</strong> to track exemption status</li>\n<li>\n<strong>Clean response</strong> that explains why (for debugging) without confusing the user</li>\n</ol>\n\n<h3>\n  \n  \n  Performance Optimization: Caching Expensive Checks\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">before_tool_callback</span><span class=\"p\">(</span><span class=\"n\">tool</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">tool_context</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Check cache first\n</span>    <span class=\"n\">is_admin</span> <span class=\"o\">=</span> <span class=\"n\">tool_context</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">session:is_admin</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">is_admin</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"c1\"># First time - check auth and cache result\n</span>        <span class=\"n\">auth_token</span> <span class=\"o\">=</span> <span class=\"n\">tool_context</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">auth_token</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">is_admin</span> <span class=\"o\">=</span> <span class=\"nf\">check_admin_status</span><span class=\"p\">(</span><span class=\"n\">auth_token</span><span class=\"p\">)</span>  <span class=\"c1\"># Expensive: JWT decode + lookup\n</span>\n        <span class=\"c1\"># Cache for entire session\n</span>        <span class=\"n\">tool_context</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">session:is_admin</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">is_admin</span>\n        <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">🔐 Cached admin status: </span><span class=\"si\">{</span><span class=\"n\">is_admin</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Use cached value\n</span>    <span class=\"k\">if</span> <span class=\"n\">tool_name</span> <span class=\"ow\">in</span> <span class=\"n\">PAYMENT_TOOLS</span> <span class=\"ow\">and</span> <span class=\"n\">is_admin</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">admin_exempt</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"bp\">None</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Performance impact:</strong></p>\n\n<ul>\n<li>Before: Auth check on every tool call (~50-100ms each × 10 calls = 500-1000ms)</li>\n<li>After: Auth check once per session (~50ms total)</li>\n</ul>\n\n<p><strong>What to cache:</strong></p>\n\n<ul>\n<li>✅ User roles/permissions</li>\n<li>✅ Tenant/organization IDs</li>\n<li>✅ Feature flags</li>\n<li>❌ Dynamic data (current balance, order status)</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  Real-World Pattern: Tool Interception and Routing\n</h2>\n\n<p><strong>Problem:</strong> The LLM sometimes calls the wrong pricing tool:</p>\n\n<ul>\n<li>Calls regular pricing for admin users → Wrong (too expensive)</li>\n<li>Calls admin pricing for regular users → Security violation</li>\n</ul>\n\n<p><strong>Why it happened:</strong> The LLM chooses tools based on context and phrasing, which is inconsistent.</p>\n\n<p><strong>Solution:</strong> Intercept pricing tool calls and route to the correct implementation.</p>\n\n<h3>\n  \n  \n  Implementation\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">before_tool_callback</span><span class=\"p\">(</span><span class=\"n\">tool</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">tool_context</span><span class=\"p\">):</span>\n    <span class=\"n\">tool_name</span> <span class=\"o\">=</span> <span class=\"n\">tool</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">__name__</span>\n\n    <span class=\"c1\"># Get user type from session\n</span>    <span class=\"n\">is_admin</span> <span class=\"o\">=</span> <span class=\"n\">tool_context</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">session:is_admin</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"bp\">False</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># ========================================================================\n</span>    <span class=\"c1\"># DETERMINISTIC PRICING ROUTING\n</span>    <span class=\"c1\"># If LLM calls wrong pricing tool, redirect to correct one\n</span>    <span class=\"c1\"># ========================================================================\n</span>\n    <span class=\"k\">if</span> <span class=\"n\">tool_name</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">get_standard_price</span><span class=\"sh\">\"</span> <span class=\"ow\">and</span> <span class=\"n\">is_admin</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Admin called standard pricing → Route to premium\n</span>        <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">warning</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">🔄 LLM called standard pricing for ADMIN user - </span><span class=\"sh\">\"</span>\n            <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">intercepting and routing to premium pricing</span><span class=\"sh\">\"</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Import and call correct function\n</span>        <span class=\"kn\">from</span> <span class=\"n\">app.tools.pricing</span> <span class=\"kn\">import</span> <span class=\"n\">get_premium_price</span>\n\n        <span class=\"c1\"># Pass through all args + context\n</span>        <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">tool_context</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tool_context</span>\n        <span class=\"k\">return</span> <span class=\"nf\">get_premium_price</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n    <span class=\"k\">elif</span> <span class=\"n\">tool_name</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">get_premium_price</span><span class=\"sh\">\"</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">is_admin</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Regular user called admin pricing → Security violation, route to standard\n</span>        <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">warning</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">🔄 LLM called premium pricing for REGULAR user - </span><span class=\"sh\">\"</span>\n            <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">intercepting and routing to standard pricing</span><span class=\"sh\">\"</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"kn\">from</span> <span class=\"n\">app.tools.pricing</span> <span class=\"kn\">import</span> <span class=\"n\">get_standard_price</span>\n        <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">tool_context</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tool_context</span>\n        <span class=\"k\">return</span> <span class=\"nf\">get_standard_price</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"bp\">None</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  What Happens\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Regular User: \"How much for this service?\"\nLLM: [Decides to call get_premium_price() - WRONG TOOL]\n      ↓\n[Callback intercepts]\n      ↓\n[Routes to get_standard_price() instead]\n      ↓\nUser sees correct standard pricing ✅\n\nLogs show:\n\"🔄 LLM called premium pricing for REGULAR user - intercepting and routing\"\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Benefits\n</h3>\n\n<ol>\n<li>\n<strong>Zero reliance on LLM</strong> choosing the right tool</li>\n<li>\n<strong>Security enforced in code</strong>, not prompts</li>\n<li>\n<strong>Transparent logging</strong> of routing decisions</li>\n<li>\n<strong>No user-visible errors</strong> - routing happens silently</li>\n<li>\n<strong>Consistent behavior</strong> regardless of how user phrases request</li>\n</ol>\n\n\n\n\n<h2>\n  \n  \n  Real-World Pattern: Auto-Injecting Context\n</h2>\n\n<p><strong>Problem:</strong> After getting a quote, users would say \"proceed with order\" and the agent would re-ask for all the parameters, even though all that information was already collected.</p>\n\n<p><strong>Why it happened:</strong> The LLM didn't pass previous context to the order creation tool.</p>\n\n<p><strong>Solution:</strong> Auto-inject stored quote details when order tools are called.</p>\n\n<h3>\n  \n  \n  Implementation\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">before_tool_callback</span><span class=\"p\">(</span><span class=\"n\">tool</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">tool_context</span><span class=\"p\">):</span>\n    <span class=\"n\">tool_name</span> <span class=\"o\">=</span> <span class=\"n\">tool</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">__name__</span>\n\n    <span class=\"c1\"># ========================================================================\n</span>    <span class=\"c1\"># AUTO-INJECT QUOTE DETAILS INTO ORDER\n</span>    <span class=\"c1\"># If order tool is called without params, fill from stored quote\n</span>    <span class=\"c1\"># ========================================================================\n</span>\n    <span class=\"k\">if</span> <span class=\"n\">tool_name</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">create_order</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Get previously stored quote from session\n</span>        <span class=\"n\">latest_quote</span> <span class=\"o\">=</span> <span class=\"n\">tool_context</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">session:latest_quote</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">latest_quote</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Auto-inject missing required parameters\n</span>            <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">param_a</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">param_b</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">param_c</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">total_price</span><span class=\"sh\">\"</span><span class=\"p\">]:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">args</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">latest_quote</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">):</span>\n                    <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">latest_quote</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n                    <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">✅ Auto-injected </span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s\">: </span><span class=\"si\">{</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"bp\">None</span>  <span class=\"c1\"># Proceed with augmented args\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Storing Quote Data\n</h3>\n\n<p>When a quote is generated, store it:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">calculate_quote</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"n\">tool_context</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Calculate quote\n</span>    <span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"p\">.</span><span class=\"nf\">get_price</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Store complete quote in session state\n</span>    <span class=\"n\">quote_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">param_a</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">params</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">param_a</span><span class=\"sh\">\"</span><span class=\"p\">),</span>\n        <span class=\"sh\">\"</span><span class=\"s\">param_b</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">params</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">param_b</span><span class=\"sh\">\"</span><span class=\"p\">),</span>\n        <span class=\"sh\">\"</span><span class=\"s\">param_c</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">params</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">param_c</span><span class=\"sh\">\"</span><span class=\"p\">),</span>\n        <span class=\"sh\">\"</span><span class=\"s\">total_price</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">price</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">timestamp</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">time</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">tool_context</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">session:latest_quote</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">quote_data</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">price</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">price</span><span class=\"p\">,</span> <span class=\"p\">...}</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  User Experience\n</h3>\n\n<p><strong>Before callbacks:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>User: \"Quote for service from A to B\"\nAgent: \"That'll be $1,200\"\nUser: \"Book it\"\nAgent: \"I'll need parameter A\"\nUser: \"I just told you!\"\nAgent: \"I need the exact value...\"\n</code></pre>\n\n</div>\n\n\n\n<p><strong>After callbacks:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>User: \"Quote for service from A to B\"\nAgent: \"That'll be $1,200\"\n[Quote stored in session state]\nUser: \"Book it\"\n[Callback injects all required params from session]\nAgent: \"Great! Creating your order now...\"\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Logs show:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>✅ Auto-injected param_a: value_a\n✅ Auto-injected param_b: value_b\n✅ Auto-injected param_c: value_c\n✅ Auto-injected price: $1200.00\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Key Insights\n</h3>\n\n<ol>\n<li>\n<strong>Session state bridges turns</strong> - Data persists across messages</li>\n<li>\n<strong>LLM doesn't need to remember</strong> - We do it for them</li>\n<li>\n<strong>Only inject if missing</strong> - Don't override if LLM provided it</li>\n<li>\n<strong>Log every injection</strong> - Helps debugging and monitoring</li>\n<li>\n<strong>Structured storage</strong> - Use consistent keys for retrieval</li>\n</ol>\n\n\n\n\n<h2>\n  \n  \n  Common Mistakes and How to Avoid Them\n</h2>\n\n<h3>\n  \n  \n  ❌ Mistake 1: Not Returning Anything\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">before_tool_callback</span><span class=\"p\">(</span><span class=\"n\">tool</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">tool_context</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nf\">should_block_tool</span><span class=\"p\">(</span><span class=\"n\">tool</span><span class=\"p\">):</span>\n        <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Blocking tool</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"c1\"># BUG: Forgot to return! Tool will still execute\n</span></code></pre>\n\n</div>\n\n\n\n<p><strong>Fix:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">before_tool_callback</span><span class=\"p\">(</span><span class=\"n\">tool</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">tool_context</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nf\">should_block_tool</span><span class=\"p\">(</span><span class=\"n\">tool</span><span class=\"p\">):</span>\n        <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Blocking tool</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">error</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">message</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Unauthorized</span><span class=\"sh\">\"</span><span class=\"p\">}</span>  <span class=\"c1\"># ✅\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  ❌ Mistake 2: Modifying Args Without In-Place Updates\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">before_tool_callback</span><span class=\"p\">(</span><span class=\"n\">tool</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">tool_context</span><span class=\"p\">):</span>\n    <span class=\"c1\"># BUG: Creates new dict, doesn't modify original\n</span>    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">**</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">tenant_id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">abc123</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"bp\">None</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Fix:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">before_tool_callback</span><span class=\"p\">(</span><span class=\"n\">tool</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">tool_context</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ✅ Modifies dict in-place\n</span>    <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">tenant_id</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">abc123</span><span class=\"sh\">\"</span>\n    <span class=\"k\">return</span> <span class=\"bp\">None</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  ❌ Mistake 3: Forgetting Tool Context Parameter\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Original tool signature\n</span><span class=\"k\">def</span> <span class=\"nf\">my_tool</span><span class=\"p\">(</span><span class=\"n\">param1</span><span class=\"p\">,</span> <span class=\"n\">param2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"c1\"># In callback - BUG: Doesn't pass tool_context\n</span><span class=\"k\">return</span> <span class=\"nf\">my_other_tool</span><span class=\"p\">(</span><span class=\"n\">param1</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">param1</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Fix:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># If tool needs context, include it\n</span><span class=\"k\">return</span> <span class=\"nf\">my_other_tool</span><span class=\"p\">(</span>\n    <span class=\"n\">param1</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">param1</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n    <span class=\"n\">tool_context</span><span class=\"o\">=</span><span class=\"n\">tool_context</span>  <span class=\"c1\"># ✅\n</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  ❌ Mistake 4: Missing Tool Name Variants\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">before_tool_callback</span><span class=\"p\">(</span><span class=\"n\">tool</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">tool_context</span><span class=\"p\">):</span>\n    <span class=\"c1\"># BUG: Only catches one tool name, misses variants\n</span>    <span class=\"k\">if</span> <span class=\"n\">tool</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">charge_payment</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nf\">is_admin</span><span class=\"p\">(</span><span class=\"n\">tool_context</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">admin_exempt</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Problem:</strong> Your system might have multiple payment-related tools:</p>\n\n<ul>\n<li><code>charge_payment</code></li>\n<li><code>initiate_payment</code></li>\n<li><code>process_card_payment</code></li>\n</ul>\n\n<p>Missing one means the callback doesn't catch it!</p>\n\n<p><strong>Fix:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Define at module level for easy maintenance\n</span><span class=\"n\">PAYMENT_TOOLS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"sh\">\"</span><span class=\"s\">charge_payment</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">initiate_payment</span><span class=\"sh\">\"</span><span class=\"p\">,</span> \n    <span class=\"sh\">\"</span><span class=\"s\">process_card_payment</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">charge_card</span><span class=\"sh\">\"</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">before_tool_callback</span><span class=\"p\">(</span><span class=\"n\">tool</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">tool_context</span><span class=\"p\">):</span>\n    <span class=\"n\">tool_name</span> <span class=\"o\">=</span> <span class=\"n\">tool</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">__name__</span>\n\n    <span class=\"c1\"># ✅ Catches all variants\n</span>    <span class=\"k\">if</span> <span class=\"n\">tool_name</span> <span class=\"ow\">in</span> <span class=\"n\">PAYMENT_TOOLS</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nf\">is_admin</span><span class=\"p\">(</span><span class=\"n\">tool_context</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">admin_exempt</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"bp\">None</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Maintenance tip:</strong> When adding new tools, update the list once. All callbacks automatically cover it.</p>\n\n<h3>\n  \n  \n  ❌ Mistake 5: Catching All Tools Too Broadly\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">before_tool_callback</span><span class=\"p\">(</span><span class=\"n\">tool</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">tool_context</span><span class=\"p\">):</span>\n    <span class=\"c1\"># BUG: Every tool will get user_id added\n</span>    <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">user_id</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">get_user_id</span><span class=\"p\">(</span><span class=\"n\">tool_context</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"bp\">None</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Fix:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">before_tool_callback</span><span class=\"p\">(</span><span class=\"n\">tool</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">tool_context</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ✅ Only inject for tools that need it\n</span>    <span class=\"k\">if</span> <span class=\"n\">tool</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">__name__</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">create_order</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">update_profile</span><span class=\"sh\">\"</span><span class=\"p\">]:</span>\n        <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">user_id</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">get_user_id</span><span class=\"p\">(</span><span class=\"n\">tool_context</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"bp\">None</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  ❌ Mistake 6: No Logging\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">before_tool_callback</span><span class=\"p\">(</span><span class=\"n\">tool</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">tool_context</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nf\">is_admin</span><span class=\"p\">(</span><span class=\"n\">tool_context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nf\">admin_version</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"bp\">None</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Fix:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">before_tool_callback</span><span class=\"p\">(</span><span class=\"n\">tool</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">tool_context</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nf\">is_admin</span><span class=\"p\">(</span><span class=\"n\">tool_context</span><span class=\"p\">):</span>\n        <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">🔄 Routing </span><span class=\"si\">{</span><span class=\"n\">tool</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">__name__</span><span class=\"si\">}</span><span class=\"s\"> to admin version</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nf\">admin_version</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"bp\">None</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Logging is critical for debugging \"why did this happen?\" in production.</p>\n\n\n\n\n<h2>\n  \n  \n  Real-World Pattern: Detecting Admin Message Leaks\n</h2>\n\n<p>Even with perfect tool routing and parameter injection, the LLM can still <strong>leak admin-only information</strong> in its natural language responses.</p>\n\n<h3>\n  \n  \n  The Problem\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Admin sees:\n\"Using admin access for premium pricing... Your cost: $1,200\"\n\nNon-admin sees:\n\"Using admin access for premium pricing... Total: $1,500\" ❌\n</code></pre>\n\n</div>\n\n\n\n<p>The tool correctly returned different prices, but the LLM copy-pasted admin messaging into non-admin responses!</p>\n\n<h3>\n  \n  \n  The Solution: Response Content Validation\n</h3>\n\n<p>Use <code>after_model_callback</code> to detect and clean role-specific messaging:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">after_model_callback</span><span class=\"p\">(</span><span class=\"n\">callback_context</span><span class=\"p\">,</span> <span class=\"n\">llm_response</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Detect and remove admin-only phrases from non-admin responses</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"c1\"># Get user role from session\n</span>    <span class=\"n\">is_admin</span> <span class=\"o\">=</span> <span class=\"n\">callback_context</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">session:is_admin</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"bp\">False</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">is_admin</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>  <span class=\"c1\"># Admin can see admin messages\n</span>\n    <span class=\"c1\"># Extract response text\n</span>    <span class=\"n\">response_text</span> <span class=\"o\">=</span> <span class=\"n\">llm_response</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">.</span><span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">text</span>\n\n    <span class=\"c1\"># Define admin-only phrases\n</span>    <span class=\"n\">admin_only_phrases</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"sh\">\"</span><span class=\"s\">using admin access</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">premium pricing</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">admin access for</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">your premium cost</span><span class=\"sh\">\"</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"c1\"># Check if any admin phrase leaked\n</span>    <span class=\"n\">has_admin_phrase</span> <span class=\"o\">=</span> <span class=\"nf\">any</span><span class=\"p\">(</span>\n        <span class=\"n\">phrase</span><span class=\"p\">.</span><span class=\"nf\">lower</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"n\">response_text</span><span class=\"p\">.</span><span class=\"nf\">lower</span><span class=\"p\">()</span> \n        <span class=\"k\">for</span> <span class=\"n\">phrase</span> <span class=\"ow\">in</span> <span class=\"n\">admin_only_phrases</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">has_admin_phrase</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">warning</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">🚨 Admin message leaked to non-admin user! </span><span class=\"sh\">\"</span>\n            <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Cleaning response...</span><span class=\"sh\">\"</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Get correct price from session\n</span>        <span class=\"n\">display_price</span> <span class=\"o\">=</span> <span class=\"n\">callback_context</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">session:last_display_price</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Override with clean, role-appropriate message\n</span>        <span class=\"n\">clean_response</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Total shipping cost: $</span><span class=\"si\">{</span><span class=\"n\">display_price</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\"> 🚚</span><span class=\"sh\">\"</span>\n\n        <span class=\"kn\">from</span> <span class=\"n\">google.genai</span> <span class=\"kn\">import</span> <span class=\"n\">types</span>\n        <span class=\"k\">return</span> <span class=\"nc\">LlmResponse</span><span class=\"p\">(</span>\n            <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"nc\">Content</span><span class=\"p\">(</span>\n                <span class=\"n\">role</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">model</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                <span class=\"n\">parts</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"nc\">Part</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">clean_response</span><span class=\"p\">)]</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"bp\">None</span>  <span class=\"c1\"># Response is clean\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Why This Happens\n</h3>\n\n<p>LLMs learn patterns from context. If they recently saw:</p>\n\n<ol>\n<li>Admin messages in earlier conversation</li>\n<li>Admin-formatted responses in training data</li>\n<li>Tool responses that mention \"premium\" or \"admin\"</li>\n</ol>\n\n<p>They might <strong>echo these patterns</strong> even for non-admin users.</p>\n\n<h3>\n  \n  \n  When to Use This Pattern\n</h3>\n\n<p>✅ <strong>Use when:</strong></p>\n\n<ul>\n<li>Different user roles see different information</li>\n<li>LLM has access to role-specific tool responses</li>\n<li>Sensitive information must never leak</li>\n</ul>\n\n<p>❌ <strong>Don't use when:</strong></p>\n\n<ul>\n<li>All users see the same information</li>\n<li>No role-based differentiation needed</li>\n</ul>\n\n<p><strong>Lesson learned:</strong> Callbacks protect against both wrong tool execution AND wrong LLM messaging. Defense in depth applies to language, not just code.</p>\n\n\n\n\n<h2>\n  \n  \n  When to Use Which Callback\n</h2>\n\n<p>Google ADK provides several callback types. Here's when to use each:</p>\n\n<h3>\n  \n  \n  <code>before_tool_callback</code> - Pre-Execution Enforcement\n</h3>\n\n<p><strong>Use when:</strong></p>\n\n<ul>\n<li>✅ Blocking unauthorized actions</li>\n<li>✅ Routing to different implementations</li>\n<li>✅ Injecting authentication context</li>\n<li>✅ Auto-filling parameters from session</li>\n<li>✅ Validating parameters before execution</li>\n</ul>\n\n<p><strong>Example use cases:</strong></p>\n\n<ul>\n<li>Admin payment exemption</li>\n<li>Multi-tenant data isolation</li>\n<li>Rate limiting</li>\n<li>Parameter validation</li>\n</ul>\n\n<h3>\n  \n  \n  <code>after_model_callback</code> - Post-Generation Validation\n</h3>\n\n<p><strong>Use when:</strong></p>\n\n<ul>\n<li>✅ Validating LLM output accuracy</li>\n<li>✅ Sanitizing responses (removing sensitive data)</li>\n<li>✅ Formatting output consistently</li>\n<li>✅ Correcting known LLM mistakes</li>\n</ul>\n\n<p><strong>Example use cases:</strong></p>\n\n<ul>\n<li>Price validation (next article!)</li>\n<li>PII detection and removal</li>\n<li>Response format enforcement</li>\n<li>Output translation</li>\n</ul>\n\n<h3>\n  \n  \n  Comparison\n</h3>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Callback Type</th>\n<th>When It Runs</th>\n<th>What to Use It For</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>before_tool_callback</code></td>\n<td>Before tool execution</td>\n<td>Business rule enforcement, routing, injection</td>\n</tr>\n<tr>\n<td><code>after_tool_callback</code></td>\n<td>After tool execution</td>\n<td>Result transformation, logging</td>\n</tr>\n<tr>\n<td><code>after_model_callback</code></td>\n<td>After LLM generates response</td>\n<td>Output validation, correction</td>\n</tr>\n</tbody>\n</table></div>\n\n<p><strong>Most common pattern:</strong> Use <code>before_tool_callback</code> for enforcement and <code>after_model_callback</code> for validation.</p>\n\n\n\n\n<h2>\n  \n  \n  Key Takeaways\n</h2>\n\n<ol>\n<li>\n<strong>Callbacks are enforcers</strong> - They don't ask, they tell</li>\n<li>\n<strong>Use them for business logic</strong> - Don't rely on LLM prompt-following</li>\n<li>\n<strong>Log everything</strong> - You'll need it for debugging</li>\n<li>\n<strong>Cache expensive checks</strong> - Store results in session state</li>\n<li>\n<strong>Return early for blocks</strong> - Don't execute what shouldn't happen</li>\n<li>\n<strong>Modify args in-place</strong> - When you want execution to proceed with changes</li>\n<li>\n<strong>Test edge cases</strong> - Callbacks run on EVERY tool call</li>\n</ol>\n\n<h3>\n  \n  \n  The Enforcement Hierarchy\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Strongest:   Code enforcement (callbacks)\n             ↑\nMedium:      Tool filtering by role\n             ↑\nWeakest:     LLM instructions\n</code></pre>\n\n</div>\n\n\n\n<p>Put your critical business logic in callbacks, not instructions.</p>\n\n\n\n\n<h2>\n  \n  \n  Resources\n</h2>\n\n<ul>\n<li><a href=\"https://google.github.io/adk-docs/callbacks/types-of-callbacks/\" rel=\"noopener noreferrer\">Google ADK Callback Types</a></li>\n<li><a href=\"https://google.github.io/adk-docs/callbacks/design-patterns-and-best-practices/\" rel=\"noopener noreferrer\">Callback Design Patterns</a></li>\n<li><a href=\"https://google.github.io/adk-docs/tools/tool-context/\" rel=\"noopener noreferrer\">ADK Tool Context API</a></li>\n</ul>\n\n\n\n\n<p><strong>Previous:</strong> <a href=\"https://dev.to/greyisheepai/how-reliable-are-your-ai-agents-5dd9\">\"How Reliable Are Your AI Agents?\"</a><br><br>\n<strong>Next:</strong> \"The Ground Truth Principle: Session State and Output Validation\"</p>\n\n\n\n\n<p><em>What business rules are you enforcing with callbacks? Share your patterns!</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building Secure Microservices with Python and Docker: A Step-by-Step Approach","url":"https://dev.to/grapestechsolution/building-secure-microservices-with-python-and-docker-a-step-by-step-approach-4kld","date":1761722821,"author":"GrapesTech Solutions","guid":320560,"unread":true,"content":"<p>Microservices have revolutionized the way modern applications are built — offering scalability, flexibility, and modularity. However, with this power comes complexity — especially when it comes to security.</p>\n\n<p>When deploying microservices using Python and Docker, even a small misconfiguration can expose sensitive data or allow unauthorized access.</p>\n\n<p>In this guide, you’ll learn how to build secure Python microservices with Docker, covering configuration, image hardening, secrets management, and secure API communication.</p>\n\n<p>If you’re new to API security, you should first read our foundation article: <strong><a href=\"https://www.grapestechsolutions.com/blog/python-securityt-best-practices-for-apis-and-microservices/\" rel=\"noopener noreferrer\">Secure Python Development: Best Practices for APIs and Microservices (2025 Guide)</a></strong>.</p>\n\n<h2>\n  \n  \n  <strong>Step 1: Use a Minimal and Trusted Base Image</strong>\n</h2>\n\n<p>Start your Dockerfile with a lightweight, verified base image to minimize vulnerabilities.</p>\n\n<p><strong>Example:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>FROM python:3.12-slim\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY . .\nCMD [\"gunicorn\", \"app:app\"]\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Why it matters:</strong></p>\n\n<p>Smaller images like python:3.12-slim or alpine reduce your attack surface compared to large, general-purpose images.</p>\n\n<p><strong>Best practice:</strong></p>\n\n<ul>\n<li>Avoid unofficial images.</li>\n<li>Pin image versions (e.g., python:3.12.1-slim) to prevent breaking changes.</li>\n<li>Use a private registry for internal builds.</li>\n</ul>\n\n<h2>\n  \n  \n  <strong>Step 2: Secure Secrets and Environment Variables</strong>\n</h2>\n\n<p>Hardcoding passwords or API keys in Docker images is a major security risk. Instead, use environment variables or secret management solutions.</p>\n\n<p><strong>Best practices:</strong></p>\n\n<ul>\n<li>Store keys in .env files and never commit them to Git.</li>\n<li>Mount sensitive secrets at runtime using Docker secrets or Kubernetes Secrets.</li>\n<li>Use libraries like python-dotenv or os.getenv() to read values safely.</li>\n</ul>\n\n<p>Learn the full strategy in our related post:</p>\n\n<p>👉 <strong><a href=\"https://telegra.ph/How-to-Secure-API-Keys-and-Environment-Variables-in-Python-Projects-10-29\" rel=\"noopener noreferrer\">How to Secure API Keys and Environment Variables in Python Projects</a></strong></p>\n\n<h2>\n  \n  \n  <strong>Step 3: Implement API Authentication and Encryption</strong>\n</h2>\n\n<p>Every microservice should be able to authenticate requests and ensure data integrity during communication.</p>\n\n<p><strong>Recommendations:</strong></p>\n\n<ul>\n<li>Use JWT or OAuth2 tokens for inter-service authentication.</li>\n<li>Always use HTTPS/TLS for communication between microservices.</li>\n<li>Regularly rotate keys and certificates.</li>\n<li>Avoid exposing internal APIs publicly — use internal networking or service meshes like Istio.</li>\n</ul>\n\n<p><strong>Example (Flask + JWT):</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>from flask_jwt_extended import JWTManager, jwt_required\njwt = JWTManager(app)\n@app.route('/data')\n@jwt_required()\ndef secure_data():\n    return jsonify({\"message\": \"Access granted\"})\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  <strong>Step 4: Limit Container Privileges</strong>\n</h2>\n\n<p>By default, containers may run with higher privileges than necessary, increasing the damage if compromised.</p>\n\n<p><strong>How to fix:</strong></p>\n\n<p>Run containers as a non-root user:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>RUN adduser --disabled-password appuser\nUSER appuser\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>Use Docker’s --cap-drop ALL and --read-only flags.</li>\n</ul>\n\n<p>Prevent privilege escalation by adding:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>security_opt:\n  - no-new-privileges:true\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>Enable AppArmor or SELinux profiles for an extra layer of defense.</li>\n</ul>\n\n<h2>\n  \n  \n  <strong>Step 5: Keep Dependencies and Images Updated</strong>\n</h2>\n\n<p>Outdated Python packages or base images often contain known vulnerabilities.</p>\n\n<p><strong>Automation tips:</strong></p>\n\n<ul>\n<li>Use pip-audit or Safety to scan for vulnerable dependencies.</li>\n<li>Regularly rebuild Docker images with updated security patches.</li>\n<li>Automate scanning in your CI/CD pipeline.</li>\n</ul>\n\n<h2>\n  \n  \n  <strong>Step 6: Enable Logging and Monitoring</strong>\n</h2>\n\n<p>Logs are your first line of defense when identifying suspicious activity in production.</p>\n\n<p><strong>Recommendations:</strong></p>\n\n<ul>\n<li>Centralize logs using tools like ELK Stack, Grafana Loki, or Datadog.</li>\n<li>Log API access attempts, authentication failures, and unusual traffic.</li>\n<li>Avoid logging sensitive information such as passwords or tokens.</li>\n</ul>\n\n<p>For teams following DevSecOps practices, integrate alerts and anomaly detection directly into your pipeline.</p>\n\n<h2>\n  \n  \n  <strong>Step 7: Container Network and Runtime Security</strong>\n</h2>\n\n<p>Restrict how containers communicate with each other.</p>\n\n<p><strong>Do:</strong></p>\n\n<ul>\n<li>Use Docker networks or Kubernetes namespaces to isolate services.</li>\n<li>Disable inter-container communication when unnecessary.</li>\n<li>Restrict outbound internet access for containers that don’t need it.</li>\n</ul>\n\n<p>You can add a service mesh, such as Istio or Linkerd, to control traffic, enforce mTLS, and apply zero-trust principles.</p>\n\n<h2>\n  \n  \n  <strong>Step 8: Automate Security Testing in CI/CD</strong>\n</h2>\n\n<p>Once your services are containerized, ensure every build automatically undergoes security checks.</p>\n\n<p><strong>Include in your CI/CD:</strong></p>\n\n<ul>\n<li>Static code analysis with bandit</li>\n<li>Dependency scanning with pip-audit</li>\n<li>Container image scanning using Trivy or Anchore</li>\n<li>Runtime checks using Kubernetes Admission Controllers</li>\n</ul>\n\n<p>These practices are explored in depth in our article — <strong><a href=\"https://grapestechsolutionsblog.wordpress.com/2025/10/29/integrating-security-testing-into-your-python-ci-cd-pipeline/\" rel=\"noopener noreferrer\">Integrating Security Testing into Your Python CI/CD Pipeline</a></strong>.</p>\n\n<h2>\n  \n  \n  <strong>Final Thoughts</strong>\n</h2>\n\n<p>Building secure microservices isn’t just about locking down containers — it’s about creating a security-first culture across your development and deployment workflows.</p>\n\n<p>A well-secured Python microservice architecture should:</p>\n\n<p>✅ Minimize vulnerabilities through least privilege<br>\n✅ Protect data in transit and at rest<br>\n✅ Ensure observability and fast incident response</p>\n\n<p>If your team is planning to containerize or modernize an existing app, our <strong><a href=\"https://www.grapestechsolutions.com/python-development-company/\" rel=\"noopener noreferrer\">Python Development Services</a></strong> can help design, audit, and deploy secure and scalable microservice architectures powered by Docker and Kubernetes.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"🧠 Memory Management in Python: A Beginner’s Guide","url":"https://dev.to/codeneuron/memory-management-in-python-a-beginners-guide-51ko","date":1761722615,"author":"likhitha manikonda","guid":320559,"unread":true,"content":"<p>If you're new to Python and wondering how it handles memory behind the scenes, you're in the right place! In this post, we'll break down key concepts in Python memory management in simple terms with examples.</p>\n\n\n\n\n<h2>\n  \n  \n  🔑 Key Concepts in Python Memory Management\n</h2>\n\n<p>Python manages memory automatically, so you don’t need to manually allocate or free memory like in C or C++. But understanding how it works helps you write better and more efficient code.</p>\n\n<p>Here are the key concepts:</p>\n\n<ol>\n<li><strong>Memory Allocation and Deallocation</strong></li>\n<li><strong>Reference Counting</strong></li>\n<li><strong>Garbage Collection</strong></li>\n<li><strong>The <code>gc</code> Module</strong></li>\n<li><strong>Memory Profiling Tools</strong></li>\n<li><strong>Best Practices</strong></li>\n</ol>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F7h4ukj2mvorf2imnv12x.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F7h4ukj2mvorf2imnv12x.png\" alt=\" \" width=\"225\" height=\"225\"></a></p>\n\n\n\n\n<h2>\n  \n  \n  📦 Memory Allocation and Deallocation\n</h2>\n\n<p>Python uses a <strong>private heap space</strong> to store objects. This is managed by the Python memory manager.</p>\n\n<ul>\n<li>\n<strong>Allocation</strong>: When you create a variable, Python allocates memory for it.</li>\n<li>\n<strong>Deallocation</strong>: When the variable is no longer needed, Python frees the memory.</li>\n</ul>\n\n<h3>\n  \n  \n  Example:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>  <span class=\"c1\"># Memory is allocated for the list\n</span><span class=\"k\">del</span> <span class=\"n\">x</span>          <span class=\"c1\"># Memory is deallocated when x is deleted\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  🔁 Reference Counting\n</h2>\n\n<p>Every object in Python has a reference count. This count increases when a new reference to the object is made and decreases when a reference is deleted.</p>\n\n<p>When the count reaches zero, Python knows the object is no longer needed and deallocates it.</p>\n\n<h3>\n  \n  \n  Example:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"nf\">getrefcount</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>  <span class=\"c1\"># Shows how many references exist\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  🗑️ Garbage Collection\n</h2>\n\n<p>Python uses <strong>garbage collection</strong> to clean up memory that is no longer in use—especially for objects involved in <strong>circular references</strong> (where two or more objects reference each other and cannot be freed by reference counting alone).</p>\n\n<h3>\n  \n  \n  Example of circular reference:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"nc\">A</span><span class=\"p\">()</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"nc\">B</span><span class=\"p\">()</span>\n<span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n<span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Even if <code>a</code> and <code>b</code> go out of scope, they reference each other, so reference count doesn’t drop to zero. Python’s garbage collector handles this.</p>\n\n\n\n\n<h2>\n  \n  \n  ⚙️ The <code>gc</code> Module\n</h2>\n\n<p>Python provides the <code>gc</code> module to interact with the garbage collector manually.</p>\n\n<h3>\n  \n  \n  Common uses:\n</h3>\n\n<ul>\n<li>Check if garbage collection is enabled</li>\n<li>Manually trigger garbage collection</li>\n<li>Inspect unreachable objects</li>\n</ul>\n\n<h3>\n  \n  \n  Example:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">gc</span>\n\n<span class=\"n\">gc</span><span class=\"p\">.</span><span class=\"nf\">enable</span><span class=\"p\">()</span>         <span class=\"c1\"># Enable garbage collection\n</span><span class=\"n\">gc</span><span class=\"p\">.</span><span class=\"nf\">collect</span><span class=\"p\">()</span>        <span class=\"c1\"># Force garbage collection\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">gc</span><span class=\"p\">.</span><span class=\"nf\">get_count</span><span class=\"p\">())</span>  <span class=\"c1\"># Show collection counts\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  🔍 Profile Your Memory Usage\n</h2>\n\n<p>Understanding how your Python program uses memory is crucial for optimizing performance and avoiding memory leaks. Here are three powerful tools to help you analyze memory usage:</p>\n\n<h3>\n  \n  \n  1. <code>tracemalloc</code> – Track Memory Allocation Over Time\n</h3>\n\n<p><code>tracemalloc</code> is a built-in Python module that lets you trace memory blocks allocated by your program.</p>\n\n<h4>\n  \n  \n  Example:\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Import the tracemalloc module, which helps track memory allocations in Python\n</span><span class=\"kn\">import</span> <span class=\"n\">tracemalloc</span>\n\n<span class=\"c1\"># Start tracing Python memory allocations\n</span><span class=\"n\">tracemalloc</span><span class=\"p\">.</span><span class=\"nf\">start</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Simulate some memory usage by creating a large list of numbers\n</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">100000</span><span class=\"p\">)]</span>  <span class=\"c1\"># This line allocates memory for 100,000 integers\n</span>\n<span class=\"c1\"># Take a snapshot of the current memory allocations\n</span><span class=\"n\">snapshot</span> <span class=\"o\">=</span> <span class=\"n\">tracemalloc</span><span class=\"p\">.</span><span class=\"nf\">take_snapshot</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get statistics grouped by the line number where memory was allocated\n</span><span class=\"n\">top_stats</span> <span class=\"o\">=</span> <span class=\"n\">snapshot</span><span class=\"p\">.</span><span class=\"nf\">statistics</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">lineno</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Print the top 5 lines that allocated the most memory\n</span><span class=\"k\">for</span> <span class=\"n\">stat</span> <span class=\"ow\">in</span> <span class=\"n\">top_stats</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">]:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">stat</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h3>\n  \n  \n  2. <code>memory_profiler</code> – Line-by-Line Memory Usage\n</h3>\n\n<p><code>memory_profiler</code> provides a decorator to measure memory usage of individual lines in a function.</p>\n\n<h4>\n  \n  \n  Installation:\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>pip <span class=\"nb\">install </span>memory-profiler\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  Usage:\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">memory_profiler</span> <span class=\"kn\">import</span> <span class=\"n\">profile</span>\n\n<span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_function</span><span class=\"p\">():</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n    <span class=\"k\">del</span> <span class=\"n\">b</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span>\n\n<span class=\"nf\">my_function</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Run the script with:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>python <span class=\"nt\">-m</span> memory_profiler your_script.py\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h3>\n  \n  \n  3. <code>objgraph</code> – Visualize Object Relationships\n</h3>\n\n<p><code>objgraph</code> helps you visualize object references and detect memory leaks due to circular references.</p>\n\n<h4>\n  \n  \n  Installation:\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>pip <span class=\"nb\">install </span>objgraph\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  Usage:\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">objgraph</span>\n\n<span class=\"n\">objgraph</span><span class=\"p\">.</span><span class=\"nf\">show_most_common_types</span><span class=\"p\">()</span>\n<span class=\"n\">objgraph</span><span class=\"p\">.</span><span class=\"nf\">show_backrefs</span><span class=\"p\">([</span><span class=\"n\">your_object</span><span class=\"p\">],</span> <span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">memory_leak.png</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h3>\n  \n  \n  🧠 Summary of Profiling Tools\n</h3>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Tool</th>\n<th>Purpose</th>\n<th>Best For</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>tracemalloc</code></td>\n<td>Track memory allocation</td>\n<td>Debugging memory leaks</td>\n</tr>\n<tr>\n<td><code>memory_profiler</code></td>\n<td>Line-by-line memory usage</td>\n<td>Optimizing specific functions</td>\n</tr>\n<tr>\n<td><code>objgraph</code></td>\n<td>Visualize object relationships</td>\n<td>Detecting circular references</td>\n</tr>\n</tbody>\n</table></div>\n\n\n\n\n<h2>\n  \n  \n  ✅ Memory Management Best Practices\n</h2>\n\n<ol>\n<li>\n<strong>Use Generators Instead of Lists</strong>\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code>   <span class=\"k\">def</span> <span class=\"nf\">my_gen</span><span class=\"p\">():</span>\n       <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">1000000</span><span class=\"p\">):</span>\n           <span class=\"k\">yield</span> <span class=\"n\">i</span>\n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li><p><strong>Avoid Circular References</strong><br>\nUse weak references or design your classes to avoid mutual references.</p></li>\n<li><p><strong>Use <code>del</code> to Remove Unused Variables</strong><br>\n</p></li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code>   <span class=\"k\">del</span> <span class=\"n\">my_large_list</span>\n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li><p><strong>Profile Your Memory Usage</strong><br>\nUse tools like <code>tracemalloc</code>, <code>memory_profiler</code>, and <code>objgraph</code>.</p></li>\n<li><p><strong>Reuse Immutable Objects</strong><br>\nPython automatically reuses small integers and strings. Avoid creating unnecessary duplicates.</p></li>\n<li><p><strong>Be Mindful of Large Data Structures</strong><br>\nBreak them into smaller chunks or use streaming techniques.</p></li>\n</ol>\n\n\n\n\n<h2>\n  \n  \n  📝 Final Thoughts\n</h2>\n\n<p>Python makes memory management easy for beginners, but understanding how it works helps you write cleaner, faster, and more reliable code. Whether you're building a simple script or a complex application, these concepts will guide you toward better performance and fewer bugs.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How Reliable Are Your AI Agents?","url":"https://dev.to/greyisheepai/how-reliable-are-your-ai-agents-5dd9","date":1761722516,"author":"Claret Ibeawuchi","guid":320558,"unread":true,"content":"<h2>\n  \n  \n  Table of Contents\n</h2>\n\n<ul>\n<li>The $117 Bug That Changed Everything</li>\n<li>The Reliability Gap</li>\n<li>Why LLMs Fail at Critical Tasks</li>\n<li>The Multi-Layer Defense Strategy</li>\n<li>Real-World Impact</li>\n<li>What's Next</li>\n<li>Resources</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  The $117 Bug That Made Me Rethink Architecture\n</h2>\n\n<p>Picture this: A customer requests a shipping quote. Your AI agent calculates the price: <strong>$1,320.56</strong>. The agent stores it correctly in the database. The backend logs show the right number. Everything looks perfect.</p>\n\n<p>But when the customer sees the response, it says: <strong>$117.00</strong>.</p>\n\n<p>That's a <strong>91% error</strong>. One hallucination away from massive financial loss or customer distrust.</p>\n\n<p>This actually happened in production. And it's not an edge case, it's a fundamental characteristic of Large Language Models.</p>\n\n\n\n\n<h2>\n  \n  \n  The Reliability Gap\n</h2>\n\n<p>When we talk about \"AI agents,\" we're usually talking about LLMs with access to tools (functions they can call). The promise is compelling: natural language interfaces that can handle complex business logic.</p>\n\n<p>The reality? <strong>LLMs are very advanced prediction engines, not calculators.</strong></p>\n\n<h3>\n  \n  \n  What LLMs Are Good At\n</h3>\n\n<ul>\n<li>Understanding natural language and intent</li>\n<li>Generating human-like, contextual responses</li>\n<li>Recognizing patterns and relationships</li>\n<li>Adapting to conversational flow</li>\n</ul>\n\n<h3>\n  \n  \n  What LLMs Struggle With\n</h3>\n\n<ul>\n<li>Exact calculations and number precision</li>\n<li>Following strict business rules consistently</li>\n<li>Deterministic behavior across requests</li>\n<li>Security boundaries and access control</li>\n<li>Critical decision-making without oversight</li>\n</ul>\n\n<h3>\n  \n  \n  The Developer's Dilemma\n</h3>\n\n<p>Think of it like hiring someone who's brilliant at customer service but occasionally forgets basic math:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># This is what you write\n</span><span class=\"k\">def</span> <span class=\"nf\">calculate_price</span><span class=\"p\">(</span><span class=\"n\">user_type</span><span class=\"p\">,</span> <span class=\"n\">base_price</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">user_type</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">wholesale</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">base_price</span> <span class=\"o\">*</span> <span class=\"mf\">0.85</span>  <span class=\"c1\"># 15% discount\n</span>    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">base_price</span> <span class=\"o\">*</span> <span class=\"mf\">1.12</span>  <span class=\"c1\"># 12% markup\n</span>\n<span class=\"c1\"># This is what the LLM might do\n</span><span class=\"sh\">\"</span><span class=\"s\">Based on the pricing, I calculate roughly $117 for this service...</span><span class=\"sh\">\"</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The LLM might:</p>\n\n<ul>\n<li>Use the wrong pricing tier (wholesale vs retail)</li>\n<li>Misread numbers during token processing (1320.56 → $117.00)</li>\n<li>Hallucinate calculations instead of using tool results</li>\n<li>Ignore access controls when constructing responses</li>\n<li>Mix data from different contexts</li>\n</ul>\n\n<p><strong>You can't fix this with better prompts alone.</strong> This requires architectural solutions.</p>\n\n\n\n\n<h2>\n  \n  \n  Why LLMs Fail at Critical Tasks\n</h2>\n\n<h3>\n  \n  \n  1. Token-Based Processing\n</h3>\n\n<p>LLMs don't process numbers as mathematical values, they process everything as tokens (text chunks).</p>\n\n<p>The number <code>1320.56</code> might be tokenized as:</p>\n\n<ul>\n<li><code>[\"1320\", \".\", \"56\"]</code></li>\n<li><code>[\"13\", \"20\", \".56\"]</code></li>\n<li><code>[\"1\", \"320\", \".\", \"56\"]</code></li>\n</ul>\n\n<p>Depending on the tokenizer. When generating output, the model predicts the most <strong>statistically likely</strong> next token, not the mathematically correct one.</p>\n\n<h3>\n  \n  \n  2. Probabilistic, Not Deterministic\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Deterministic code - same input = same output\n</span><span class=\"k\">def</span> <span class=\"nf\">check_permission</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">role</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">admin</span><span class=\"sh\">\"</span>  <span class=\"c1\"># Always consistent\n</span>\n<span class=\"c1\"># LLM reasoning - same input ≠ guaranteed same output\n</span><span class=\"sh\">\"\"\"</span><span class=\"s\">\nThe user appears to have administrative permissions based on \ntheir previous actions... (might vary across calls)\n</span><span class=\"sh\">\"\"\"</span>\n</code></pre>\n\n</div>\n\n\n\n<p>With temperature &gt; 0, the same prompt can yield different outputs. Even at temperature 0, subtle prompt changes can shift behavior.</p>\n\n<h3>\n  \n  \n  3. Context Window Limitations\n</h3>\n\n<p>Your agent might have the correct data in its context, but:</p>\n\n<ul>\n<li>As conversations grow, early information gets less attention</li>\n<li>Critical details might be overshadowed by recent messages</li>\n<li>The model might \"forget\" information from 50+ messages ago</li>\n</ul>\n\n<h3>\n  \n  \n  4. No Inherent Security Model\n</h3>\n\n<p>LLMs don't understand:</p>\n\n<ul>\n<li>Role-based access control (RBAC)</li>\n<li>Authentication vs Authorization</li>\n<li>Privilege escalation risks</li>\n<li>Data isolation requirements</li>\n</ul>\n\n<p>They might cheerfully expose wholesale pricing to retail customers if the context suggests it, or process admin commands from regular users.</p>\n\n<h3>\n  \n  \n  5. Instruction Drift\n</h3>\n\n<p>Even with perfect instructions, LLMs can:</p>\n\n<ul>\n<li>Misinterpret edge cases</li>\n<li>Prioritize recent conversation over system instructions</li>\n<li>Follow user instructions that contradict system rules</li>\n<li>Generate plausible-sounding but incorrect responses</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  The Multi-Layer Defense Strategy\n</h2>\n\n<p>Here's what I learned building production AI agents: <strong>Don't trust the LLM for business-critical logic. Use it for what it does best, and enforce everything else deterministically.</strong></p>\n\n<p>Think of it like airport security—multiple checkpoints, each catching different issues:</p>\n\n<h3>\n  \n  \n  The Architecture\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>User Request\n     ↓\n┌─────────────────────────────────────────────┐\n│  Layer 1: Tool Filtering                    │  ← \"What can this user access?\"\n│  (Before agent even sees the tools)         │\n└─────────────────────────────────────────────┘\n     ↓\n┌─────────────────────────────────────────────┐\n│  Layer 2: Instruction Engineering           │  ← \"How should you behave?\"\n│  (Guide LLM with clear rules)               │\n└─────────────────────────────────────────────┘\n     ↓\n┌─────────────────────────────────────────────┐\n│  Layer 3: Pre-Execution Callbacks           │  ← \"Is this allowed right now?\"\n│  (before_tool_callback - Business rules)    │\n└─────────────────────────────────────────────┘\n     ↓\n┌─────────────────────────────────────────────┐\n│  Layer 4: Tool Execution                    │  ← \"Execute with ground truth\"\n│  (Deterministic business logic)             │\n└─────────────────────────────────────────────┘\n     ↓\n┌─────────────────────────────────────────────┐\n│  Layer 5: Output Validation                 │  ← \"Is the response accurate?\"\n│  (after_model_callback - Final check)       │\n└─────────────────────────────────────────────┘\n     ↓\nUser Response\n</code></pre>\n\n</div>\n\n\n\n<p>Each layer provides a different type of safety:</p>\n\n<ul>\n<li>\n<strong>Layer 1 (Tool Filtering)</strong>: \"What tools can this user even see?\"</li>\n<li>\n<strong>Layer 2 (Instructions)</strong>: \"How should the LLM behave?\"</li>\n<li>\n<strong>Layer 3 (Pre-Execution)</strong>: \"Is this specific tool call allowed? Should we route it elsewhere?\"</li>\n<li>\n<strong>Layer 4 (Execution)</strong>: \"Calculate with code, not with tokens\"</li>\n<li>\n<strong>Layer 5 (Validation)</strong>: \"Is the output what we expected? Correct if needed\"</li>\n</ul>\n\n<h3>\n  \n  \n  Example: Catching the $117 Bug\n</h3>\n\n<p>Here's how the layers work together:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Layer 4: Tool execution - Calculate with code (ground truth)\n</span><span class=\"k\">def</span> <span class=\"nf\">calculate_shipping_price</span><span class=\"p\">(</span><span class=\"n\">origin</span><span class=\"p\">,</span> <span class=\"n\">destination</span><span class=\"p\">,</span> <span class=\"n\">vehicle</span><span class=\"p\">):</span>\n    <span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"n\">pricing_api</span><span class=\"p\">.</span><span class=\"nf\">get_quote</span><span class=\"p\">(</span><span class=\"n\">origin</span><span class=\"p\">,</span> <span class=\"n\">destination</span><span class=\"p\">,</span> <span class=\"n\">vehicle</span><span class=\"p\">)</span>\n    <span class=\"c1\"># price = 1320.56 (calculated correctly)\n</span>\n    <span class=\"c1\"># Store ground truth in session state\n</span>    <span class=\"n\">session</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">expected_price</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">price</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">total_price</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">price</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">currency</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">USD</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">breakdown</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{...}</span>\n    <span class=\"p\">}</span>\n\n<span class=\"c1\"># Layer 5: Validation - Catch LLM errors before user sees them\n</span><span class=\"k\">def</span> <span class=\"nf\">validate_response</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">llm_response</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    This runs AFTER the LLM generates a response but BEFORE \n    the user sees it. It</span><span class=\"sh\">'</span><span class=\"s\">s our last line of defense.\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"kn\">import</span> <span class=\"n\">re</span>\n\n    <span class=\"c1\"># What did the LLM say?\n</span>    <span class=\"n\">response_text</span> <span class=\"o\">=</span> <span class=\"n\">llm_response</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">.</span><span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">text</span>\n    <span class=\"n\">mentioned_prices</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">findall</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">'</span><span class=\"s\">\\$\\s*([0-9,]+\\.?\\d*)</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">response_text</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">mentioned_prices</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>  <span class=\"c1\"># No prices mentioned, all good\n</span>\n    <span class=\"c1\"># What should it have said?\n</span>    <span class=\"n\">expected_price</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">expected_price</span><span class=\"sh\">'</span><span class=\"p\">)</span>  <span class=\"c1\"># 1320.56\n</span>    <span class=\"n\">mentioned_price</span> <span class=\"o\">=</span> <span class=\"nf\">float</span><span class=\"p\">(</span><span class=\"n\">mentioned_prices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">,</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">''</span><span class=\"p\">))</span>  <span class=\"c1\"># 117.00\n</span>\n    <span class=\"c1\"># Validate within tolerance (2% for rounding)\n</span>    <span class=\"n\">difference_pct</span> <span class=\"o\">=</span> <span class=\"nf\">abs</span><span class=\"p\">(</span><span class=\"n\">mentioned_price</span> <span class=\"o\">-</span> <span class=\"n\">expected_price</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">expected_price</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">difference_pct</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.02</span><span class=\"p\">:</span>  <span class=\"c1\"># More than 2% off\n</span>        <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">🚨 PRICE ERROR: LLM showed $</span><span class=\"si\">{</span><span class=\"n\">mentioned_price</span><span class=\"si\">}</span><span class=\"s\">, </span><span class=\"sh\">\"</span>\n            <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">expected $</span><span class=\"si\">{</span><span class=\"n\">expected_price</span><span class=\"si\">}</span><span class=\"s\"> (Δ </span><span class=\"si\">{</span><span class=\"n\">difference_pct</span><span class=\"o\">*</span><span class=\"mi\">100</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\">%)</span><span class=\"sh\">\"</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Correct it silently - user never knows\n</span>        <span class=\"k\">return</span> <span class=\"nc\">LlmResponse</span><span class=\"p\">(</span>\n            <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"nc\">Content</span><span class=\"p\">(</span>\n                <span class=\"n\">role</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">model</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                <span class=\"n\">parts</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"nc\">Part</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Total shipping cost: $</span><span class=\"si\">{</span><span class=\"n\">expected_price</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\"> 🚚</span><span class=\"sh\">\"</span><span class=\"p\">)]</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"bp\">None</span>  <span class=\"c1\"># Price is correct, use original response\n</span></code></pre>\n\n</div>\n\n\n\n<p><strong>What happened in my case:</strong></p>\n\n<ol>\n<li>✅ Tool calculated correct price: <code>$1,320.56</code>\n</li>\n<li>✅ Stored as ground truth in session</li>\n<li>❌ LLM generated response with wrong price: <code>$117.00</code> (91% error!)</li>\n<li>✅ Validation caught the discrepancy</li>\n<li>✅ Response corrected to <code>$1,320.56</code> before user saw it</li>\n<li>✅ Error logged for monitoring and debugging</li>\n</ol>\n\n<p><strong>Customer saw:</strong> \"Total shipping cost: $1,320.56\" ✅<br><br>\n<strong>Logs showed:</strong> \"🚨 PRICE ERROR #1 DETECTED\" 📊</p>\n\n\n\n\n<h2>\n  \n  \n  Real-World Impact\n</h2>\n\n<p>Let's compare approaches:</p>\n\n<h3>\n  \n  \n  Before: Hope and Pray 🙏\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Traditional approach - trust the LLM completely\n</span><span class=\"n\">agent</span> <span class=\"o\">=</span> <span class=\"nc\">LLM</span><span class=\"p\">(</span>\n    <span class=\"n\">tools</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">calculate_price</span><span class=\"p\">,</span> <span class=\"n\">charge_card</span><span class=\"p\">,</span> <span class=\"n\">book_shipment</span><span class=\"p\">],</span>\n    <span class=\"n\">instructions</span><span class=\"o\">=</span><span class=\"sh\">\"\"\"</span><span class=\"s\">\n    You are a helpful shipping assistant. \n    Always use the calculate_price tool for quotes.\n    Be accurate with prices.\n    Don</span><span class=\"sh\">'</span><span class=\"s\">t charge admin users.\n    </span><span class=\"sh\">\"\"\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Cross fingers and hope it follows instructions...\n</span></code></pre>\n\n</div>\n\n\n\n<p><strong>Observed failure rates:</strong></p>\n\n<ul>\n<li>Wrong pricing tier: ~15-20% of requests</li>\n<li>Hallucinated numbers: ~5-10% of price displays</li>\n<li>Admin privilege leaks: ~3-5% of admin sessions</li>\n<li>Inconsistent behavior: Varies with prompt changes</li>\n</ul>\n\n<h3>\n  \n  \n  After: Defense in Depth 🛡️\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Production-ready approach - enforce with code\n</span><span class=\"n\">agent</span> <span class=\"o\">=</span> <span class=\"nc\">LLM</span><span class=\"p\">(</span>\n    <span class=\"c1\"># Layer 1: Filter tools by user role\n</span>    <span class=\"n\">tools</span><span class=\"o\">=</span><span class=\"nf\">get_allowed_tools_for_user</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">),</span>\n\n    <span class=\"c1\"># Layer 2: Context-aware instructions\n</span>    <span class=\"n\">instructions</span><span class=\"o\">=</span><span class=\"nf\">build_instructions</span><span class=\"p\">(</span><span class=\"n\">user_context</span><span class=\"p\">),</span>\n\n    <span class=\"c1\"># Layer 3: Pre-execution enforcement\n</span>    <span class=\"n\">before_tool_callback</span><span class=\"o\">=</span><span class=\"n\">enforce_business_rules</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Layer 5: Post-generation validation\n</span>    <span class=\"n\">after_model_callback</span><span class=\"o\">=</span><span class=\"n\">validate_output</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">enforce_business_rules</span><span class=\"p\">(</span><span class=\"n\">tool</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Runs before EVERY tool call</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">user_role</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">user_role</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Block unauthorized actions\n</span>    <span class=\"k\">if</span> <span class=\"n\">tool</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">charge_card</span><span class=\"sh\">'</span> <span class=\"ow\">and</span> <span class=\"n\">user_role</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">admin</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Admin users don</span><span class=\"sh\">'</span><span class=\"s\">t pay - blocking payment tool</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">message</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Admin booking confirmed - no payment required</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">skipped</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"c1\"># Route to correct implementation\n</span>    <span class=\"k\">if</span> <span class=\"n\">tool</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">calculate_price</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">user_role</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">admin</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Route to wholesale pricing\n</span>            <span class=\"k\">return</span> <span class=\"nf\">calculate_wholesale_price</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Route to retail pricing\n</span>            <span class=\"k\">return</span> <span class=\"nf\">calculate_retail_price</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"bp\">None</span>  <span class=\"c1\"># Proceed with normal execution\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">validate_output</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Runs after LLM generates response</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"c1\"># Check prices match ground truth\n</span>    <span class=\"c1\"># Check no sensitive data leaked\n</span>    <span class=\"c1\"># Check response format is correct\n</span>    <span class=\"c1\"># Return corrected response if needed\n</span>    <span class=\"k\">pass</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Results after implementation:</strong></p>\n\n<ul>\n<li>✅ Wrong pricing tier: <strong>0%</strong> (blocked by callback)</li>\n<li>✅ Hallucinated numbers: <strong>0%</strong> (caught by validation)</li>\n<li>✅ Admin privilege leaks: <strong>0%</strong> (filtered at tool level)</li>\n<li>✅ Inconsistent behavior: <strong>Eliminated</strong> (enforced by code)</li>\n<li>⚠️ False positives: <strong>&lt;0.1%</strong> (logged, reviewed, tuned)</li>\n</ul>\n\n<h3>\n  \n  \n  The Reliability Equation\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Agent Reliability = \n    MIN(\n        LLM Accuracy,\n        Instruction Following Rate,\n        Context Retention\n    )\n    +\n    Callback Coverage × Enforcement Quality\n    +\n    Validation Coverage × Error Detection Rate\n</code></pre>\n\n</div>\n\n\n\n<p>The first line is unpredictable and varies with:</p>\n\n<ul>\n<li>Model updates</li>\n<li>Prompt changes</li>\n<li>Conversation length</li>\n<li>User phrasing</li>\n</ul>\n\n<p>The second and third lines are <strong>deterministic</strong>—they're code you control.</p>\n\n<p><strong>Don't bet your business on only the first line.</strong></p>\n\n\n\n\n<h2>\n  \n  \n  What's Next\n</h2>\n\n<p>Building reliable AI agents isn't about making the LLM perfect, it's about <strong>designing systems that deliver reliable results despite LLM imperfections</strong>.</p>\n\n<p>In this series, we'll explore each defensive layer:</p>\n\n<h3>\n  \n  \n  Article 2: \"Callback the Police\" 👮‍♂️\n</h3>\n\n<p>How to use callbacks to enforce business rules like law enforcement—stopping bad behavior before it happens.</p>\n\n<h3>\n  \n  \n  Article 3: \"The Ground Truth Principle\" 📊\n</h3>\n\n<p>Why session state is your source of truth and how to use it for validation.</p>\n\n<h3>\n  \n  \n  Article 4: \"Explicit Contracts Save Lives\" ⚖️\n</h3>\n\n<p>Making function parameters explicit so callbacks can inject and enforce them.</p>\n\n<h3>\n  \n  \n  Article 5: \"Event-Driven Automation\" 🔄\n</h3>\n\n<p>Using webhooks and background tasks to make agents proactive and reliable.</p>\n\n\n\n\n<h2>\n  \n  \n  Try It Yourself\n</h2>\n\n<p>Quick reliability audit for your agent:</p>\n\n<p><strong>Question 1:</strong> If the LLM calls the wrong tool, do you detect and block it?</p>\n\n<ul>\n<li>❌ No → Implement <code>before_tool_callback</code> for routing</li>\n<li>⚠️ Sometimes → Ensure callbacks cover all tools</li>\n<li>✅ Yes → Great! Is your coverage monitored?</li>\n</ul>\n\n<p><strong>Question 2:</strong> If the LLM displays incorrect data, do you catch it?</p>\n\n<ul>\n<li>❌ No → Implement <code>after_model_callback</code> for validation</li>\n<li>⚠️ Log only → Add correction logic</li>\n<li>✅ Yes and correct → Excellent!</li>\n</ul>\n\n<p><strong>Question 3:</strong> Can the LLM bypass access controls?</p>\n\n<ul>\n<li>❌ Yes → Filter tools by user role</li>\n<li>⚠️ Depends on prompts → Make it code-enforced</li>\n<li>✅ No → Verify with penetration testing</li>\n</ul>\n\n<p><strong>Question 4:</strong> Do you validate critical outputs?</p>\n\n<ul>\n<li>❌ No → Start with financial/legal data</li>\n<li>⚠️ Some → Expand to all critical outputs</li>\n<li>✅ All → Document validation coverage</li>\n</ul>\n\n<p><strong>Question 5:</strong> Can you debug what went wrong?</p>\n\n<ul>\n<li>❌ No logs → Add structured logging</li>\n<li>⚠️ Basic logs → Add context and tracing</li>\n<li>✅ Full tracing → Can you alert on patterns?</li>\n</ul>\n\n<p><strong>If you answered ❌ or ⚠️ to any question</strong>, you need deterministic layers. Your agent is relying too much on LLM behavior.</p>\n\n\n\n\n<h2>\n  \n  \n  Key Takeaways\n</h2>\n\n<ol>\n<li>\n<strong>LLMs are amazing at conversation, terrible at guarantees</strong> - Use them for what they do best</li>\n<li>\n<strong>Multiple defense layers</strong> - Like airport security, assume each layer might miss something</li>\n<li>\n<strong>Ground truth in code</strong> - Store correct values, validate against them</li>\n<li>\n<strong>Callbacks are enforcement</strong> - They're your business logic police</li>\n<li>\n<strong>Monitor everything</strong> - You can't improve what you don't measure</li>\n</ol>\n\n\n\n\n<h2>\n  \n  \n  Resources\n</h2>\n\n<ul>\n<li><a href=\"https://google.github.io/adk-docs/\" rel=\"noopener noreferrer\">Google ADK Documentation</a></li>\n<li><a href=\"https://google.github.io/adk-docs/callbacks/types-of-callbacks/\" rel=\"noopener noreferrer\">Callback Types in ADK</a></li>\n<li><a href=\"https://google.github.io/adk-docs/callbacks/design-patterns-and-best-practices/\" rel=\"noopener noreferrer\">Callback Design Patterns</a></li>\n</ul>\n\n\n\n\n<p><strong>Next Article:</strong> <a href=\"https://dev.to/greyisheepai/callback-the-police-enforcing-business-rules-in-ai-agents-1nfk\">\"Callback the Police: Enforcing Business Rules in AI Agents\"</a> →</p>\n\n\n\n\n<p><em>Have you caught reliability issues in your AI agents? What strategies worked for you? Share in the comments!</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"From designing Kafka Consumers to building a unified Source–Sink streaming engine that powers real-time data pipelines.","url":"https://dev.to/__354f265b41dafa0d901b/from-designing-kafka-consumers-to-building-a-unified-source-sink-streaming-engine-that-powers-4om6","date":1761721924,"author":"RisingWave Labs","guid":320557,"unread":true,"content":"<div class=\"ltag__link\">\n  <a href=\"/__354f265b41dafa0d901b\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F1118264%2F4a6edd31-76ad-4e56-9f8d-6e0a23d888e8.png\" alt=\"__354f265b41dafa0d901b\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/__354f265b41dafa0d901b/a-hands-on-guide-to-building-the-speed-layer-of-the-lambda-architecture-3jjh\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>A Hands-On Guide to Building the Speed Layer of the Lambda Architecture</h2>\n      <h3>RisingWave Labs ・ Oct 29</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#beginners</span>\n        <span class=\"ltag__link__tag\">#architecture</span>\n        <span class=\"ltag__link__tag\">#python</span>\n        <span class=\"ltag__link__tag\">#datascience</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"A Hands-On Guide to Building the Speed Layer of the Lambda Architecture","url":"https://dev.to/__354f265b41dafa0d901b/a-hands-on-guide-to-building-the-speed-layer-of-the-lambda-architecture-3jjh","date":1761721664,"author":"RisingWave Labs","guid":320556,"unread":true,"content":"<p>In the previous article, we introduced the design principles and implementation of the Lambda Architecture.</p>\n\n<p>We talked about its three layers:</p>\n\n<ul>\n<li>\n<strong>Batch Layer</strong> – slow but precise; processes full historical data to ensure eventual consistency</li>\n<li>\n<strong>Speed Layer</strong> – handles incremental data in real time</li>\n<li>\n<strong>Serving Layer</strong> – merges results from both layers and provides a unified query interface</li>\n</ul>\n\n<p>Starting today, we’ll dive into the <strong>implementation of the Speed Layer</strong>.</p>\n\n<p>We’ll begin by writing a Kafka Consumer and gradually explore the core mechanisms of stream processing.</p>\n\n<p>In today’s article, we’ll write a Kafka Consumer — a key component of the Speed Layer — responsible for instantly receiving order data and writing it into the Serving DB (while the Batch Layer focuses on processing full historical data each day).</p>\n\n<blockquote>\n<p>⚠️ Important</p>\n\n<p>All the code in this article is <strong>for educational and conceptual demonstration only (pseudo code)</strong>.</p>\n\n<p>It’s designed to help you understand and solve real-world problems, but it’s <strong>not production-ready</strong>.</p>\n\n<p>Focus on grasping the overall architecture and design logic — you can skim over low-level code details.</p>\n</blockquote>\n\n<h2>\n  \n  \n  <strong>Step 1: Speed Layer Kafka Consumer: Ingesting Orders into the Serving DB</strong>\n</h2>\n\n<p>Let’s start with the simplest version:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">kafka</span> <span class=\"kn\">import</span> <span class=\"n\">KafkaConsumer</span>\n<span class=\"kn\">import</span> <span class=\"n\">json</span>\n\n<span class=\"c1\"># Subscribe to the orders topic\n</span><span class=\"n\">consumer</span> <span class=\"o\">=</span> <span class=\"nc\">KafkaConsumer</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">orders</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">[Speed Layer] Waiting for fresh orders...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">message</span> <span class=\"ow\">in</span> <span class=\"n\">consumer</span><span class=\"p\">:</span>\n    <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">loads</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n\n    <span class=\"nf\">insert_db</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span>\n    <span class=\"n\">conn</span><span class=\"p\">.</span><span class=\"nf\">commit</span><span class=\"p\">()</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">[Speed Layer] Inserted order </span><span class=\"si\">{</span><span class=\"n\">order</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">id</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This logic is straightforward:</p>\n\n<ul>\n<li>Kafka provides a real-time stream of order data</li>\n<li>The Consumer consumes and processes the stream</li>\n<li>The Serving DB stores the processed results</li>\n<li>Core task: write incoming data into storage as fast as possible</li>\n</ul>\n\n<h2>\n  \n  \n  <strong>Step 2: Designing the Serving DB</strong>\n</h2>\n\n<p>Here we have two key tables:</p>\n\n<ul>\n<li>\n<code>orders_batch_summary</code> – pre-aggregated historical data computed daily by the Batch Layer</li>\n<li>\n<code>orders_realtime</code> – detailed real-time orders sent by the Speed Layer</li>\n</ul>\n\n<p>When querying from the dashboard, the system merges both tables while filtering out invalid orders with <code>status = 'removed'</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sql\"><code><span class=\"k\">SELECT</span> <span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"k\">SUM</span><span class=\"p\">(</span><span class=\"k\">count</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">total</span>\n<span class=\"k\">FROM</span> <span class=\"p\">(</span>\n    <span class=\"k\">SELECT</span> <span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span>\n    <span class=\"k\">FROM</span> <span class=\"n\">orders_batch_summary</span>\n    <span class=\"k\">WHERE</span> <span class=\"n\">status</span> <span class=\"o\">!=</span> <span class=\"s1\">'removed'</span>\n\n    <span class=\"k\">UNION</span> <span class=\"k\">ALL</span>\n\n    <span class=\"k\">SELECT</span> <span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"k\">COUNT</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"k\">count</span>\n    <span class=\"k\">FROM</span> <span class=\"n\">orders_realtime</span>\n    <span class=\"k\">WHERE</span> <span class=\"n\">status</span> <span class=\"o\">!=</span> <span class=\"s1\">'removed'</span>\n    <span class=\"k\">GROUP</span> <span class=\"k\">BY</span> <span class=\"n\">status</span>\n<span class=\"p\">)</span> <span class=\"n\">t</span>\n<span class=\"k\">GROUP</span> <span class=\"k\">BY</span> <span class=\"n\">status</span><span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>However, as the company grows, more Consumers are written independently by different developers, each with their own logic. Over time, the codebase becomes tangled and unmaintainable.</p>\n\n<p>We need to <strong>refactor</strong> — to establish a unified Stream Processing architecture so everyone can build upon a consistent framework.</p>\n\n<h2>\n  \n  \n  <strong>Designing a Source Abstraction Layer</strong>\n</h2>\n\n<p>On a team project, different Kafka Consumer implementations can make integration harder.</p>\n\n<p>The solution is to define a unified <strong>Source Interface</strong>.</p>\n\n<h3>\n  \n  \n  <strong>Source Architecture Design</strong>\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight scss\"><code>    <span class=\"err\">┌─────────────┐</span>\n    <span class=\"err\">│</span> <span class=\"nt\">BaseSource</span>  <span class=\"err\">│</span>  <span class=\"err\">◄──</span> <span class=\"nt\">Abstract</span> <span class=\"nt\">Interface</span>\n    <span class=\"err\">│</span>             <span class=\"err\">│</span>\n    <span class=\"err\">│</span> <span class=\"o\">+</span> <span class=\"nt\">run</span><span class=\"o\">()</span>     <span class=\"err\">│</span>\n    <span class=\"err\">└─────────────┘</span>\n           <span class=\"err\">△</span>\n           <span class=\"err\">│</span> <span class=\"nt\">implements</span>\n    <span class=\"err\">┌─────────────┐</span>\n    <span class=\"err\">│</span><span class=\"nt\">KafkaSource</span>  <span class=\"err\">│</span>  <span class=\"err\">◄──</span> <span class=\"nt\">Concrete</span> <span class=\"nt\">Implementation</span>\n    <span class=\"err\">│</span>             <span class=\"err\">│</span>\n    <span class=\"err\">│</span> <span class=\"o\">+</span> <span class=\"nt\">run</span><span class=\"o\">()</span>     <span class=\"err\">│</span>\n    <span class=\"err\">└─────────────┘</span>\n\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  <strong>Step-by-Step Explanation of the Source Core</strong>\n</h3>\n\n<p><strong>Step 1: Define the BaseSource Abstract Interface</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">abc</span> <span class=\"kn\">import</span> <span class=\"n\">ABC</span><span class=\"p\">,</span> <span class=\"n\">abstractmethod</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BaseSource</span><span class=\"p\">(</span><span class=\"n\">ABC</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Key Points:</strong></p>\n\n<ul>\n<li>Each Source must have a unique <code>name</code>\n</li>\n<li>\n<code>run()</code> is abstract — forcing subclasses to implement it</li>\n</ul>\n\n<p><strong>Step 2: Initialize <code>SimpleKafkaSource</code></strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">SimpleKafkaSource</span><span class=\"p\">(</span><span class=\"n\">BaseSource</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">topic</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">broker_address</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">localhost:9092</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n        <span class=\"nf\">super</span><span class=\"p\">().</span><span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">topic</span> <span class=\"o\">=</span> <span class=\"n\">topic</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">broker_address</span> <span class=\"o\">=</span> <span class=\"n\">broker_address</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">consumer</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">message_handler</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_default_handler</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Key Points:</strong></p>\n\n<ul>\n<li>Inherits from <code>BaseSource</code> to conform to a unified interface</li>\n<li>\n<code>message_handler</code> is replaceable, offering flexibility in message processing logic</li>\n</ul>\n\n<p><strong>Step 3: Set Up the Kafka Consumer</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">_setup_consumer</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">consumer</span> <span class=\"o\">=</span> <span class=\"nc\">KafkaConsumer</span><span class=\"p\">(</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">topic</span><span class=\"p\">,</span>\n        <span class=\"n\">bootstrap_servers</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">broker_address</span><span class=\"p\">,</span>\n        <span class=\"n\">group_id</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">simple-source-</span><span class=\"si\">{</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"n\">auto_offset_reset</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">latest</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"n\">value_deserializer</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">loads</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">))</span> <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"k\">else</span> <span class=\"bp\">None</span>\n    <span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Key Points:</strong></p>\n\n<ul>\n<li>\n<code>group_id</code> is automatically generated to avoid conflicts</li>\n<li>\n<code>auto_offset_reset='latest'</code> ensures consumption starts from the latest messages</li>\n<li>Automatic JSON deserialization</li>\n</ul>\n\n<p><strong>Step 4: Core Runtime Logic</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_setup_consumer</span><span class=\"p\">()</span>  <span class=\"c1\"># initialize Consumer\n</span>\n    <span class=\"k\">for</span> <span class=\"n\">message</span> <span class=\"ow\">in</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">consumer</span><span class=\"p\">:</span>  <span class=\"c1\"># continuously listen for messages\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">message_handler</span><span class=\"p\">({</span>\n            <span class=\"sh\">'</span><span class=\"s\">key</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">key</span><span class=\"p\">,</span>\n            <span class=\"sh\">'</span><span class=\"s\">value</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span>\n            <span class=\"sh\">'</span><span class=\"s\">topic</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">topic</span><span class=\"p\">,</span>\n            <span class=\"sh\">'</span><span class=\"s\">offset</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">offset</span>\n        <span class=\"p\">})</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Execution Flow:</strong></p>\n\n<ol>\n<li>Initialize Kafka Consumer</li>\n<li>Continuously read messages from the Topic</li>\n<li>Wrap messages in a standard format</li>\n<li>Call <code>message_handler</code> for processing</li>\n</ol>\n\n<p><strong>Key Points:</strong></p>\n\n<p>The Source only handles <strong>data ingestion</strong>; message processing logic is injected externally through <code>message_handler</code>, enabling high flexibility.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">logging</span>\n<span class=\"kn\">import</span> <span class=\"n\">json</span>\n<span class=\"kn\">from</span> <span class=\"n\">abc</span> <span class=\"kn\">import</span> <span class=\"n\">ABC</span><span class=\"p\">,</span> <span class=\"n\">abstractmethod</span>\n<span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Any</span>\n<span class=\"kn\">from</span> <span class=\"n\">kafka</span> <span class=\"kn\">import</span> <span class=\"n\">KafkaConsumer</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"nf\">getLogger</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BaseSource</span><span class=\"p\">(</span><span class=\"n\">ABC</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Base abstract class for all Sources</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_running</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Main execution method</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">stop</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Stop the Source</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_running</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n        <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Source </span><span class=\"si\">{</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\"> stopped</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleKafkaSource</span><span class=\"p\">(</span><span class=\"n\">BaseSource</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Simple Kafka Source implementation</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span>\n        <span class=\"n\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">topic</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">broker_address</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">localhost:9092</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"n\">consumer_group</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">message_handler</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"bp\">None</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    <span class=\"p\">):</span>\n        <span class=\"nf\">super</span><span class=\"p\">().</span><span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">topic</span> <span class=\"o\">=</span> <span class=\"n\">topic</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">broker_address</span> <span class=\"o\">=</span> <span class=\"n\">broker_address</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">consumer_group</span> <span class=\"o\">=</span> <span class=\"n\">consumer_group</span> <span class=\"ow\">or</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">simple-source-</span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">message_handler</span> <span class=\"o\">=</span> <span class=\"n\">message_handler</span> <span class=\"ow\">or</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_default_handler</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">consumer</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">KafkaConsumer</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_default_handler</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">[</span><span class=\"si\">{</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">] Received message: </span><span class=\"si\">{</span><span class=\"n\">message</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_setup_consumer</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">consumer</span> <span class=\"o\">=</span> <span class=\"nc\">KafkaConsumer</span><span class=\"p\">(</span>\n                <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">topic</span><span class=\"p\">,</span>\n                <span class=\"n\">bootstrap_servers</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">broker_address</span><span class=\"p\">,</span>\n                <span class=\"n\">group_id</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">consumer_group</span><span class=\"p\">,</span>\n                <span class=\"n\">auto_offset_reset</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">latest</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n                <span class=\"n\">value_deserializer</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">loads</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">))</span> <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"k\">else</span> <span class=\"bp\">None</span><span class=\"p\">,</span>\n                <span class=\"n\">key_deserializer</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"n\">m</span><span class=\"p\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">utf-8</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"k\">else</span> <span class=\"bp\">None</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Consumer setup for topic: </span><span class=\"si\">{</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">topic</span><span class=\"si\">}</span><span class=\"s\">, group: </span><span class=\"si\">{</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">consumer_group</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Failed to setup consumer: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"k\">raise</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Starting Source </span><span class=\"si\">{</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\"> for topic </span><span class=\"si\">{</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">topic</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_setup_consumer</span><span class=\"p\">()</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_running</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">while</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_running</span><span class=\"p\">:</span>\n                <span class=\"n\">message_batch</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">consumer</span><span class=\"p\">.</span><span class=\"nf\">poll</span><span class=\"p\">(</span><span class=\"n\">timeout_ms</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">topic_partition</span><span class=\"p\">,</span> <span class=\"n\">messages</span> <span class=\"ow\">in</span> <span class=\"n\">message_batch</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">():</span>\n                    <span class=\"k\">for</span> <span class=\"n\">message</span> <span class=\"ow\">in</span> <span class=\"n\">messages</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_running</span><span class=\"p\">:</span>\n                            <span class=\"k\">break</span>\n                        <span class=\"k\">try</span><span class=\"p\">:</span>\n                            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">message_handler</span><span class=\"p\">({</span>\n                                <span class=\"sh\">'</span><span class=\"s\">key</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">key</span><span class=\"p\">,</span>\n                                <span class=\"sh\">'</span><span class=\"s\">value</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span>\n                                <span class=\"sh\">'</span><span class=\"s\">topic</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">topic</span><span class=\"p\">,</span>\n                                <span class=\"sh\">'</span><span class=\"s\">partition</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">partition</span><span class=\"p\">,</span>\n                                <span class=\"sh\">'</span><span class=\"s\">offset</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">,</span>\n                                <span class=\"sh\">'</span><span class=\"s\">timestamp</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">timestamp</span>\n                            <span class=\"p\">})</span>\n                        <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                            <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Error processing message: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"nb\">KeyboardInterrupt</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Received interrupt signal</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Error in run loop: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">consumer</span><span class=\"p\">:</span>\n                <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">consumer</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n            <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Source </span><span class=\"si\">{</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\"> finished</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">stop</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"nf\">super</span><span class=\"p\">().</span><span class=\"nf\">stop</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">consumer</span><span class=\"p\">:</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">consumer</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  <strong>Designing the Sink Abstraction Layer</strong>\n</h2>\n\n<p>In the Speed Layer architecture, <strong>Sources</strong> handle data input, while <strong>Sinks</strong> handle data output.</p>\n\n<p>To avoid inconsistent implementations, we define a unified Sink interface.</p>\n\n<h3>\n  \n  \n  <strong>Sink Architecture Design</strong>\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight scss\"><code>    <span class=\"err\">┌─────────────┐</span>\n    <span class=\"err\">│</span>  <span class=\"nt\">BaseSink</span>   <span class=\"err\">│</span>  <span class=\"err\">◄──</span> <span class=\"nt\">Abstract</span> <span class=\"nt\">Interface</span>\n    <span class=\"err\">│</span>             <span class=\"err\">│</span>\n    <span class=\"err\">│</span> <span class=\"o\">+</span> <span class=\"nt\">write</span><span class=\"o\">()</span>   <span class=\"err\">│</span>\n    <span class=\"err\">└─────────────┘</span>\n           <span class=\"err\">△</span>\n           <span class=\"err\">│</span> <span class=\"nt\">implements</span>\n    <span class=\"err\">┌──────────────────┐</span>\n    <span class=\"err\">│</span><span class=\"nt\">SimplePostgreSQL</span>  <span class=\"err\">│</span>  <span class=\"err\">◄──</span> <span class=\"nt\">Concrete</span> <span class=\"nt\">Implementation</span>\n    <span class=\"err\">│</span><span class=\"nt\">Sink</span>              <span class=\"err\">│</span>\n    <span class=\"err\">│</span> <span class=\"o\">+</span> <span class=\"nt\">write</span><span class=\"o\">()</span>        <span class=\"err\">│</span>\n    <span class=\"err\">└──────────────────┘</span>\n\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  <strong>Step-by-Step Explanation of the Sink Core</strong>\n</h3>\n\n<p><strong>Step 1: Define the Base Sink Interface</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">abc</span> <span class=\"kn\">import</span> <span class=\"n\">ABC</span><span class=\"p\">,</span> <span class=\"n\">abstractmethod</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BaseSink</span><span class=\"p\">(</span><span class=\"n\">ABC</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">setup</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>  <span class=\"c1\"># default no-op\n</span></code></pre>\n\n</div>\n\n\n\n<p><strong>Key Points:</strong></p>\n\n<ul>\n<li>Each Sink must have a unique <code>name</code>\n</li>\n<li>\n<code>write()</code> handles actual data writes</li>\n<li>\n<code>setup()</code> is optional and can be overridden</li>\n</ul>\n\n<p><strong>Step 2: Initialize the Simple PostgreSQL Sink</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">SimplePostgreSQLSink</span><span class=\"p\">(</span><span class=\"n\">BaseSink</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">dbname</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"nf\">super</span><span class=\"p\">().</span><span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"n\">host</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">dbname</span> <span class=\"o\">=</span> <span class=\"n\">dbname</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">table_name</span> <span class=\"o\">=</span> <span class=\"n\">table_name</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Key Points:</strong></p>\n\n<ul>\n<li>Inherits from <code>BaseSink</code> for interface consistency</li>\n<li>Stores database connection information</li>\n<li>Lazy connection initialization (<code>connection = None</code>)</li>\n</ul>\n\n<p><strong>Step 3: Core Logic of <code>write()</code></strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Automatically detect columns and insert into DB\n</span>    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">value</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n    <span class=\"c1\"># ... dynamically generate SQL and insert\n</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Key Points:</strong></p>\n\n<p>Automatically detects field structures in <code>message['value']</code>, dynamically generates <code>INSERT</code> SQL, and writes to the database.</p>\n\n<p>This allows the Sink to adapt to various data schemas automatically.</p>\n\n<h3>\n  \n  \n  <strong>Complete Sink Implementation</strong>\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">logging</span>\n<span class=\"kn\">from</span> <span class=\"n\">abc</span> <span class=\"kn\">import</span> <span class=\"n\">ABC</span><span class=\"p\">,</span> <span class=\"n\">abstractmethod</span>\n<span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Dict</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"n\">psycopg2</span>\n    <span class=\"kn\">from</span> <span class=\"n\">psycopg2.extras</span> <span class=\"kn\">import</span> <span class=\"n\">Json</span>\n    <span class=\"kn\">from</span> <span class=\"n\">psycopg2</span> <span class=\"kn\">import</span> <span class=\"n\">sql</span>\n<span class=\"k\">except</span> <span class=\"nb\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"n\">psycopg2</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Warning: psycopg2 not installed. Run: pip install psycopg2-binary</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"nf\">getLogger</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BaseSink</span><span class=\"p\">(</span><span class=\"n\">ABC</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Base abstract class for all Sinks</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Write a message</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">setup</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Setup connection</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Close connection</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SimplePostgreSQLSink</span><span class=\"p\">(</span><span class=\"n\">BaseSink</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">PostgreSQL Sink with automatic schema detection</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span>\n        <span class=\"n\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n        <span class=\"n\">dbname</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"p\">):</span>\n        <span class=\"nf\">super</span><span class=\"p\">().</span><span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"n\">host</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"n\">port</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">dbname</span> <span class=\"o\">=</span> <span class=\"n\">dbname</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">user</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">password</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">table_name</span> <span class=\"o\">=</span> <span class=\"n\">table_name</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">setup</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">psycopg2</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"nc\">ImportError</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">psycopg2 is required</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">psycopg2</span><span class=\"p\">.</span><span class=\"nf\">connect</span><span class=\"p\">(</span>\n            <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">host</span><span class=\"p\">,</span>\n            <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">port</span><span class=\"p\">,</span>\n            <span class=\"n\">dbname</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">dbname</span><span class=\"p\">,</span>\n            <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">user</span><span class=\"p\">,</span>\n            <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">password</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Connected to PostgreSQL: </span><span class=\"si\">{</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">host</span><span class=\"si\">}</span><span class=\"s\">:</span><span class=\"si\">{</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">port</span><span class=\"si\">}</span><span class=\"s\">/</span><span class=\"si\">{</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">dbname</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Automatically detect fields and write to PostgreSQL</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">value</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n        <span class=\"c1\"># ... dynamic field detection and SQL execution logic\n</span>\n    <span class=\"k\">def</span> <span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">connection</span><span class=\"p\">:</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n            <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">PostgreSQL connection closed</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  <strong>Simple Streaming Engine: Unified Management Layer</strong>\n</h2>\n\n<p>Between the <strong>Source</strong> (data input) and the <strong>Sink</strong> (data output), we need a unified management layer to handle orchestration, monitoring, and lifecycle management.</p>\n\n<p>This component is the <strong>SimpleStreamingEngine</strong>.</p>\n\n<h2>\n  \n  \n  <strong>Simple Streaming Engine Architecture Design</strong>\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight scss\"><code>    <span class=\"err\">┌─────────────────────┐</span>\n    <span class=\"err\">│</span><span class=\"nt\">SimpleStreamingEngine</span><span class=\"err\">│</span>  <span class=\"err\">◄──</span> <span class=\"nt\">Central</span> <span class=\"nt\">Manager</span>\n    <span class=\"err\">│</span>                     <span class=\"err\">│</span>\n    <span class=\"err\">│</span>    <span class=\"o\">+</span><span class=\"nt\">add_source</span><span class=\"o\">()</span>    <span class=\"err\">│</span>\n    <span class=\"err\">│</span>    <span class=\"o\">+</span><span class=\"nt\">add_sink</span><span class=\"o\">()</span>      <span class=\"err\">│</span>\n    <span class=\"err\">│</span>    <span class=\"o\">+</span> <span class=\"nt\">run</span><span class=\"o\">()</span>          <span class=\"err\">│</span>\n    <span class=\"err\">└─────────────────────┘</span>\n           <span class=\"err\">│</span>\n           <span class=\"err\">│</span> <span class=\"nt\">manages</span>\n           <span class=\"err\">▼</span>\n    <span class=\"err\">┌──────────────┐</span>    <span class=\"err\">┌──────────────┐</span>\n    <span class=\"err\">│</span>    <span class=\"nt\">Source</span>    <span class=\"err\">│───▶│</span>     <span class=\"nt\">Sink</span>     <span class=\"err\">│</span>\n    <span class=\"err\">│</span>              <span class=\"err\">│</span>    <span class=\"err\">│</span>              <span class=\"err\">│</span>\n    <span class=\"err\">│</span> <span class=\"nt\">KafkaSource</span>  <span class=\"err\">│</span>    <span class=\"err\">│</span><span class=\"nt\">PostgreSQLSink</span><span class=\"err\">│</span>\n    <span class=\"err\">└──────────────┘</span>    <span class=\"err\">└──────────────┘</span>\n\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  <strong>Step-by-Step Breakdown of the Simple Streaming Engine Core Code</strong>\n</h2>\n\n<h3>\n  \n  \n  <strong>Step 1: Initializing the Simple Streaming Engine</strong>\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">SimpleStreamingEngine</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">simple-streaming-app</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_sources</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>  <span class=\"c1\"># List of Sources\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_sinks</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>    <span class=\"c1\"># List of Sinks\n</span></code></pre>\n\n</div>\n\n\n\n<p><strong>Key Points:</strong></p>\n\n<ul>\n<li>The <code>SimpleStreamingEngine</code> manages two lists: <strong>Sources</strong> and <strong>Sinks</strong>.</li>\n<li>It provides unified registration interfaces for both.</li>\n</ul>\n\n<h3>\n  \n  \n  <strong>Step 2: Registering Sources and Sinks</strong>\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">add_source</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">BaseSource</span><span class=\"p\">):</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_sources</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add_sink</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">sink</span><span class=\"p\">:</span> <span class=\"n\">BaseSink</span><span class=\"p\">):</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_sinks</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">sink</span><span class=\"p\">)</span>\n\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Key Points:</strong></p>\n\n<ul>\n<li>Simple list-based management supporting multiple sources and sinks.</li>\n<li>Follows a unified interface — any class implementing <code>BaseSource</code> or <code>BaseSink</code> can be registered.</li>\n</ul>\n\n<h3>\n  \n  \n  <strong>Step 3: Core Execution Logic</strong>\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Initialize all sinks\n</span>    <span class=\"k\">for</span> <span class=\"n\">sink</span> <span class=\"ow\">in</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_sinks</span><span class=\"p\">:</span>\n        <span class=\"n\">sink</span><span class=\"p\">.</span><span class=\"nf\">setup</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Set message handler for each source\n</span>    <span class=\"k\">for</span> <span class=\"n\">source</span> <span class=\"ow\">in</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_sources</span><span class=\"p\">:</span>\n        <span class=\"n\">source</span><span class=\"p\">.</span><span class=\"n\">message_handler</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_create_message_handler</span><span class=\"p\">()</span>\n        <span class=\"n\">source</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">()</span>  <span class=\"c1\"># Start consuming data\n</span></code></pre>\n\n</div>\n\n\n\n<p><strong>Execution Flow:</strong></p>\n\n<ol>\n<li>Initialize connections for all sinks.</li>\n<li>Assign message handlers to sources.</li>\n<li>Start all sources to begin consuming data.</li>\n</ol>\n\n<h3>\n  \n  \n  <strong>Step 4: Message Handler Core Logic</strong>\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">_create_message_handler</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Forward message to all sinks\n</span>        <span class=\"k\">for</span> <span class=\"n\">sink</span> <span class=\"ow\">in</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_sinks</span><span class=\"p\">:</span>\n            <span class=\"n\">sink</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">handler</span>\n\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Detailed Data Flow Explanation:</strong></p>\n\n<ol>\n<li>\n<p><strong>When SimpleStreamingEngine starts:</strong><br>\n</p>\n<pre class=\"highlight python\"><code><span class=\"c1\"># Inside SimpleStreamingEngine.run()\n</span><span class=\"k\">for</span> <span class=\"n\">source</span> <span class=\"ow\">in</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_sources</span><span class=\"p\">:</span>\n    <span class=\"n\">source</span><span class=\"p\">.</span><span class=\"n\">message_handler</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_create_message_handler</span><span class=\"p\">()</span>  <span class=\"c1\"># Inject handler\n</span>    <span class=\"n\">source</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">()</span>  <span class=\"c1\"># Start source\n</span></code></pre>\n\n</li>\n<li>\n<p><strong>When Source receives data:</strong><br>\n</p>\n<pre class=\"highlight python\"><code><span class=\"c1\"># Inside SimpleKafkaSource.run()\n</span><span class=\"k\">for</span> <span class=\"n\">message</span> <span class=\"ow\">in</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">consumer</span><span class=\"p\">:</span>  <span class=\"c1\"># Fetch messages from Kafka\n</span>    <span class=\"n\">formatted_message</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"sh\">'</span><span class=\"s\">key</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">key</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">value</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">value</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">message_handler</span><span class=\"p\">(</span><span class=\"n\">formatted_message</span><span class=\"p\">)</span>  <span class=\"c1\"># Call injected handler\n</span></code></pre>\n\n</li>\n<li>\n<p><strong>When handler forwards messages:</strong><br>\n</p>\n<pre class=\"highlight python\"><code><span class=\"c1\"># Handler returned by _create_message_handler()\n</span><span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>  <span class=\"c1\"># message = formatted data from source\n</span>    <span class=\"k\">for</span> <span class=\"n\">sink</span> <span class=\"ow\">in</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_sinks</span><span class=\"p\">:</span>\n        <span class=\"n\">sink</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n</code></pre>\n\n</li>\n</ol>\n\n<p><strong>Overall Data Flow:</strong></p>\n\n<p><code>Kafka</code> → <code>Source.run()</code> → <code>message_handler()</code> → <code>Sink.write()</code></p>\n\n<p><strong>Key Point:</strong></p>\n\n<p>The <code>SimpleStreamingEngine</code> uses <strong>function injection</strong> so that sources are unaware of sinks, achieving complete <strong>decoupling</strong> between components.</p>\n\n<h2>\n  \n  \n  <strong>Why Do We Need the Simple Streaming Engine?</strong>\n</h2>\n\n<ul>\n<li>\n<strong>Decoupled Design:</strong> Sources and sinks are fully independent and interchangeable.</li>\n<li>\n<strong>Scalability:</strong> Supports multiple sinks simultaneously (e.g., PostgreSQL + Elasticsearch).</li>\n<li>\n<strong>Unified Management:</strong> Offers a consistent API for registration and execution.</li>\n</ul>\n\n<h2>\n  \n  \n  <strong>Complete Simple Streaming Engine Code</strong>\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">logging</span>\n<span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n<span class=\"kn\">from</span> <span class=\"n\">.source</span> <span class=\"kn\">import</span> <span class=\"n\">BaseSource</span>\n<span class=\"kn\">from</span> <span class=\"n\">.sink</span> <span class=\"kn\">import</span> <span class=\"n\">BaseSink</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"nf\">getLogger</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleStreamingEngine</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    A minimal streaming processing engine\n    </span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">simple-streaming-engine</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_sources</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">BaseSource</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>  <span class=\"c1\"># List of sources\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_sinks</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">BaseSink</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>      <span class=\"c1\"># List of sinks\n</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_source</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">BaseSource</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">\n        Register a source with the streaming engine\n        </span><span class=\"sh\">\"\"\"</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_sources</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_sink</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">sink</span><span class=\"p\">:</span> <span class=\"n\">BaseSink</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">\n        Register a sink with the streaming engine\n        </span><span class=\"sh\">\"\"\"</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_sinks</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">sink</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">\n        Start the streaming engine and process data streams\n        </span><span class=\"sh\">\"\"\"</span>\n        <span class=\"c1\"># Initialize all sinks\n</span>        <span class=\"k\">for</span> <span class=\"n\">sink</span> <span class=\"ow\">in</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_sinks</span><span class=\"p\">:</span>\n            <span class=\"n\">sink</span><span class=\"p\">.</span><span class=\"nf\">setup</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Assign message handler to each source\n</span>        <span class=\"k\">for</span> <span class=\"n\">source</span> <span class=\"ow\">in</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_sources</span><span class=\"p\">:</span>\n            <span class=\"n\">source</span><span class=\"p\">.</span><span class=\"n\">message_handler</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_create_message_handler</span><span class=\"p\">()</span>\n            <span class=\"n\">source</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">()</span>  <span class=\"c1\"># Start consuming data\n</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_create_message_handler</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">\n        Create a message handler that dispatches data to all sinks\n        </span><span class=\"sh\">\"\"\"</span>\n        <span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">sink</span> <span class=\"ow\">in</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_sinks</span><span class=\"p\">:</span>\n                <span class=\"n\">sink</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">handler</span>\n\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  <strong>Putting It All Together: Automatic Data Flow in Action</strong>\n</h2>\n\n<p>At this point, we have:</p>\n\n<ul>\n<li>\n<strong>Source:</strong> Ingest data from Kafka</li>\n<li>\n<strong>Sink:</strong> Deliver data into PostgreSQL</li>\n<li>\n<strong>SimpleStreamingEngine:</strong> Connects, manages, and orchestrates both</li>\n</ul>\n\n<p>Once assembled, we can kick off the <strong>automatic end-to-end data flow</strong>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># 1. Create the SimpleStreamingEngine\n</span><span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"nc\">SimpleStreamingEngine</span><span class=\"p\">(...)</span>\n\n<span class=\"c1\"># 2. Create a Kafka Source\n</span><span class=\"n\">orders_source</span> <span class=\"o\">=</span> <span class=\"nc\">SimpleKafkaSource</span><span class=\"p\">(...)</span>\n\n<span class=\"c1\"># 3. Create a PostgreSQL Sink\n</span><span class=\"n\">pg_sink</span> <span class=\"o\">=</span> <span class=\"nc\">SimplePostgreSQLSink</span><span class=\"p\">(...)</span>\n\n<span class=\"c1\"># 4. Assemble and start\n</span><span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"nf\">add_source</span><span class=\"p\">(</span><span class=\"n\">orders_source</span><span class=\"p\">)</span>\n<span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"nf\">add_sink</span><span class=\"p\">(</span><span class=\"n\">pg_sink</span><span class=\"p\">)</span>\n<span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">()</span>  <span class=\"c1\"># Start processing: Kafka → PostgreSQL\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  <strong>Summary</strong>\n</h2>\n\n<p>In this section, we explored the <strong>core implementation of the Speed Layer</strong>:</p>\n\n<ul>\n<li>The <strong>Batch Layer</strong> provides reliable historical data processing.</li>\n<li>The <strong>Speed Layer</strong> delivers real-time responsiveness and streaming data handling.</li>\n<li>Without the Speed Layer, true real-time capability in the Lambda Architecture is impossible.</li>\n</ul>\n\n<p>Through the <strong>Source–Sink–SimpleStreamingEngine</strong> architecture, we built:</p>\n\n<ul>\n<li>A unified data processing interface</li>\n<li>A scalable stream processing framework</li>\n<li>A fully functional Speed Layer implementation</li>\n</ul>\n\n<h2>\n  \n  \n  <strong>Day 5 Preview: Tackling Performance Bottlenecks</strong>\n</h2>\n\n<p>At first, the system runs smoothly — the consumer processes order data without issue.</p>\n\n<p>But under heavy traffic:</p>\n\n<ul>\n<li>The console starts showing latency warnings.</li>\n<li>The consumer’s processing power hits its limit.</li>\n<li>Orders begin to queue up for processing.</li>\n</ul>\n\n<p>In the next part, we’ll explore <strong>Speed Layer performance challenges</strong> and how to optimize for <strong>high-throughput</strong> workloads.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-cg4","date":1761718043,"author":"Vibe YouTube","guid":320541,"unread":true,"content":"<p>Ready to spin up an AI agent in under 10 minutes? Tech With Tim’s tutorial walks you through installing dependencies, grabbing your OpenAI API key, writing imports and tool wrappers, hooking up the language model and agent logic, and running a quick test. You’ll find a handy GitHub repo of code samples and clear timestamps so you can jump right to the part you need.</p>\n\n<p>Along the way, you’ll also get links to a free Notion trial, PyCharm (free forever plus a month of Pro), and DevLaunch—Tim’s hands-on mentorship program for building real-world projects and landing jobs.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=gaGaPpnexxA\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-2n8e","date":1761718029,"author":"Vibe YouTube","guid":320540,"unread":true,"content":"<p>This video dives into three cool but often overlooked Python features: the new match statement for pattern matching, dataclasses to auto-generate boilerplate, and positional/keyword-only arguments to tighten up your function signatures. You’ll see why they’re handy in real-world code and how they can simplify your workflow.</p>\n\n<p>Plus, there’s a free Brilliant course with 20% off for viewers, and a shout-out to Tim’s DevLaunch mentorship program for hands-on project-building and job-focused guidance.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=e0FvoOtdAQc\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Optuna f-string Refactoring","url":"https://dev.to/jongwan93/optuna-f-string-refactoring-2043","date":1761716338,"author":"Steven Hur","guid":320539,"unread":true,"content":"<p>Hello! Just submitted my 4th PR to open source. This time it's <code>Optuna</code>.</p>\n\n<p><strong>What is Optuna?</strong><br>\nOptuna is a hyperparameter optimization framework for machine learning. Basically when you're training ML models, you have tons of parameters to tune - learning rate, batch size, number of layers, etc. Optuna automates this process using smart algorithms instead of random guessing.<br>\nWhat makes it interesting is the <code>define-by-run</code> API. You can dynamically construct search spaces, which is way more flexible than traditional grid search or random search. It's used by a lot of ML practitioners and has integrations with <code>PyTorch</code>, <code>TensorFlow</code>, <code>XGBoost</code>, and basically every major ML library.</p>\n\n<p><strong>What I Did</strong><br>\nFound this issue asking to replace old <code>.format()</code> with <code>f-strings</code>. Some what simple refactoring.<br>\n<a href=\"https://github.com/optuna/optuna/issues/6305\" rel=\"noopener noreferrer\">issue-6305</a></p>\n\n<p>They wanted this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Old way (ugly)\n\"{cls}({kwargs})\".format(cls=..., kwargs=...)\n\nNew way (clean)\nf\"{cls}({kwargs})\"\n</code></pre>\n\n</div>\n\n\n\n<p><strong>The Code Change</strong><br>\nChanged this old python 3.8 style:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>def __repr__(self) -&gt; str:\n    return \"{cls}({kwargs})\".format(\n        cls=self.__class__.__name__,\n        kwargs=\", \".join(\n            \"{field}={value}\".format(\n                field=field if not field.startswith(\"_\") else field[1:],\n                value=repr(getattr(self, field)),\n            )\n            for field in self.__dict__\n        )\n        + \", value=None\",\n    )\n</code></pre>\n\n</div>\n\n\n\n<p>Into this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>def __repr__(self) -&gt; str:\n    kwargs = \", \".join(\n        f\"{field if not field.startswith('_') else field[1:]}={getattr(self, field)!r}\"\n        for field in self.__dict__\n    ) + \", value=None\"\n    return f\"{self.__class__.__name__}({kwargs})\"\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Key Points</strong><br>\nThe main change was replacing all <code>.format()</code> calls with <code>f-strings</code>, which is the modern Python way since 3.8+. I also used <code>!r</code> instead of calling <code>repr()</code> directly because that's more pythonic in f-strings. The issue specifically asked for one file per PR to make reviews easier, so I only touched this single file.</p>\n\n<p><strong>Why This is Easy</strong><br>\nThis is just syntax conversion with no logic changes at all. The output stays exactly the same, just written differently. The issue had clear examples showing exactly what they wanted, so there was zero guesswork involved. Best part is tests won't break because the functionality is identical, just cleaner code.</p>\n\n<p>This issue was some what easier then what I've been doing but I wanted to contribute to this project because <code>Optuna</code> is a framework that I've been studying recently. It does feel much comfortable compare to the first contribution that I made to <code>Scikit-learn</code>. I guess I am improving in some way through this process. </p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Range in Python (3)","url":"https://dev.to/hyperkai/range-in-python-3-5595","date":1761714770,"author":"Super Kai (Kazuya Ito)","guid":320521,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>☕</p>\n\n<p>*Memo:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/range-in-python-46k9\">My post</a> explains a range (1).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/range-in-python-2-12g6\">My post</a> explains a range (2).</li>\n</ul>\n\n<p>A range can be iterated with a <code>for</code> statement as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># 0\n# 1\n# 2\n# 3\n# 4\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">fruits</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">Apple</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Orange</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Banana</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Kiwi</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Lemon</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Mango</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">fruits</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n<span class=\"c1\"># Apple\n# Orange\n# Banana\n# kiwi\n</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">fruits</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n<span class=\"c1\"># Orange\n# Kiwi\n# Mango\n</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">fruits</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n<span class=\"c1\"># Mango\n# Kiwi\n# Orange\n</span></code></pre>\n\n</div>\n\n\n\n<p>A range can be unpacked with an assignment and <code>for</code> statement, function and <code>*</code> but not with <code>**</code> as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"c1\"># 0 1 2\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>  <span class=\"c1\"># 0 [1, 2, 3, 4] 5\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># 0 1 2 3 4 5\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">for</span> <span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)]:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"c1\"># 0 1 2\n# 3 4 5\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">for</span> <span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">)]:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"c1\"># 0 [1, 2, 3, 4] 5\n# 0 1 2 3 4 5\n# 6 [7, 8, 9, 10] 11\n# 6 7 8 9 10 11\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"o\">*</span><span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"c1\"># 0 1 2 3 4 5\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">([</span><span class=\"o\">*</span><span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"o\">*</span><span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)])</span>\n<span class=\"c1\"># [0, 1, 2, 3, 4, 5]\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p3</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p4</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p5</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">e</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p6</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">f</span><span class=\"sh\">'</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">p3</span><span class=\"p\">,</span> <span class=\"n\">p4</span><span class=\"p\">,</span> <span class=\"n\">p5</span><span class=\"p\">,</span> <span class=\"n\">p6</span><span class=\"p\">)</span>\n\n<span class=\"nf\">func</span><span class=\"p\">()</span>\n<span class=\"c1\"># a b c d e f\n</span>\n<span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"o\">*</span><span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"c1\"># 0 1 2 3 4 5\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"nf\">func</span><span class=\"p\">()</span>\n<span class=\"c1\"># a b ()\n# a b Nothing\n# a b ['A', 'B', 'C', 'D']\n</span>\n<span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"o\">*</span><span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"c1\"># 0 1 (2, 3, 4, 5)\n# 0 1 2 3 4 5\n# 0 1 ['A', 'B', 2, 3, 4, 5, 'C', 'D']\n</span></code></pre>\n\n</div>\n\n\n\n<p>Even a big range doesn't get <code>MemoryError</code> as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">100000000</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># range(0, 100000000)\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># 0 1 2\n</span></code></pre>\n\n</div>\n\n\n\n<p>A range can be read by slicing as shown below:</p>\n\n<p>*Memo:</p>\n\n<ul>\n<li>Slicing can be done with one or more <code>[start:end:step]</code> in the range <code>[start, end)</code>:\n\n<ul>\n<li>\n<code>start</code>(Optional-Default:<code>None</code>-Type:<code>int</code>/<a href=\"https://docs.python.org/3/library/types.html#types.NoneType\" rel=\"noopener noreferrer\">NoneType</a>):\n\n<ul>\n<li>It's a start index(inclusive).</li>\n<li>If it's <code>None</code>, it's the 1st index.</li>\n<li>Don't use <code>start=</code>.</li>\n</ul>\n\n\n</li>\n\n<li>\n<code>end</code>(Optional-Default:<code>None</code>-Type:<code>int</code>/<a href=\"https://docs.python.org/3/library/types.html#types.NoneType\" rel=\"noopener noreferrer\">NoneType</a>):\n\n<ul>\n<li>It's an end index(exclusive).</li>\n<li>If it's <code>None</code>, it's the range length.</li>\n<li>Don't use <code>end=</code>.</li>\n</ul>\n\n\n</li>\n\n<li>\n<code>step</code>(Optional-Default:<code>None</code>-Type:<code>int</code>/<a href=\"https://docs.python.org/3/library/types.html#types.NoneType\" rel=\"noopener noreferrer\">NoneType</a>):\n\n<ul>\n<li>It's the interval of indices.</li>\n<li>If it's <code>None</code>, it's <code>1</code>.</li>\n<li>It cannot be zero.</li>\n<li>Don't use <code>end=</code>.</li>\n</ul>\n\n\n</li>\n\n<li>The <code>[]</code> with at least one <code>:</code> is slicing.</li>\n\n<li>\n<code>start</code> and <code>end</code> can be signed indices(zero and positive and negative indices).</li>\n\n<li>Error doesn't occur even if <code>[start, end)</code> is out of the range <code>[The 1st index, The range length)</code>.\n</li>\n\n</ul>\n\n</li>\n\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"c1\"># range(0, 10)\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">v1</span><span class=\"p\">[:])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">v1</span><span class=\"p\">[::])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">v1</span><span class=\"p\">[</span><span class=\"bp\">None</span><span class=\"p\">:</span><span class=\"bp\">None</span><span class=\"p\">:</span><span class=\"bp\">None</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">v1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">v1</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">100</span><span class=\"p\">:</span><span class=\"mi\">100</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"c1\"># 0 1 2 3 4 5 6 7 8 9\n</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span>\n<span class=\"c1\"># range(2, 8)\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">)</span>\n<span class=\"c1\"># 2 3 4 5 6 7\n</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span>\n<span class=\"c1\"># range(2, 8)\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">)</span>\n<span class=\"c1\"># 2 4 6\n</span></code></pre>\n\n</div>\n\n\n\n<p>A range cannot be changed by indexing, slicing and a <a href=\"https://docs.python.org/3/tutorial/datastructures.html#the-del-statement\" rel=\"noopener noreferrer\">del statement</a> as shown below:</p>\n\n<p>*Memo:</p>\n\n<ul>\n<li>A <code>del</code> statement cannot remove zero or more numbers from a range by indexing and slicing but can remove one or more variables themselves.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># 0 1 2 3 4 5\n</span>\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]</span>\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]</span>\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]</span>\n<span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]</span>\n<span class=\"c1\"># TypeError: 'range' object does not support item assignment\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># 0 1 2 3 4 5\n</span>\n<span class=\"k\">del</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"k\">del</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"c1\"># TypeError: 'range' object does not support item deletion\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"k\">del</span> <span class=\"n\">v</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># NameError: name 'v' is not defined\n</span></code></pre>\n\n</div>\n\n\n\n<p>A range can be continuously used through multiple variables as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>                <span class=\"c1\"># Equivalent\n</span>                                       <span class=\"c1\"># v1 = range(5)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v1</span><span class=\"p\">)</span> <span class=\"c1\"># range(0, 5) 0 1 2 3 4 # v2 = v1\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># range(0, 5) 0 1 2 3 4 # v3 = v2\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># range(0, 5) 0 1 2 3 4\n</span></code></pre>\n\n</div>\n\n\n\n<p>A range can be shallow-copied (only by slicing) but cannot deep-copied as shown below:</p>\n\n<h3>\n  \n  \n  &lt;<strong>Shallow copy</strong>&gt;:\n</h3>\n\n<p>*Memo:</p>\n\n<ul>\n<li>\n<code>v1</code> and <code>v2</code> refer to different ranges (only by slicing) and each same element.</li>\n<li>\n<code>is</code> keyword can check if <code>v1</code> and <code>v2</code> refer to the same range and each same element.</li>\n<li>Slicing can shallow-copy the range.</li>\n<li>\n<a href=\"https://docs.python.org/3/library/copy.html#copy.copy\" rel=\"noopener noreferrer\">copy.copy()</a> cannot shallow-copy a range.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">[:]</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v1</span><span class=\"p\">)</span> <span class=\"c1\"># range(0, 5) 0 1 2 3 4\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># range(0, 5) 0 1 2 3 4\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v1</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">v2</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># False True\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">copy</span>\n\n<span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v1</span><span class=\"p\">)</span> <span class=\"c1\"># range(0, 5) 0 1 2 3 4\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># range(0, 5) 0 1 2 3 4\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v1</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">v2</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># True True\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>Deep copy</strong>&gt;:\n</h3>\n\n<p>*Memo:</p>\n\n<ul>\n<li>\n<code>v1</code> and <code>v2</code> refer to the same range and each same element.</li>\n<li>\n<a href=\"https://docs.python.org/3/library/copy.html#copy.deepcopy\" rel=\"noopener noreferrer\">copy.deepcopy()</a> cannot deep-copy and even shallow-copy a range.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">copy</span>\n\n<span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">.</span><span class=\"nf\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v1</span><span class=\"p\">)</span> <span class=\"c1\"># range(0, 5) 0 1 2 3 4\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># range(0, 5) 0 1 2 3 4\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v1</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">v2</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># True True\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 18 of My AI & Data Mastery Journey: From Python to Generative AI","url":"https://dev.to/nitinbhatt46/day-18-of-my-ai-data-mastery-journey-from-python-to-generative-ai-5b0b","date":1761712920,"author":"Nitin-bhatt46","guid":320510,"unread":true,"content":"<p><strong>PACKAGES</strong> .</p>\n\n<p>Importing a Python Package<br>\nTo use a package in Python, you need to:<br>\n    • Ensure the package is installed (using pip for external packages).<br>\n     •    Use the import statement in your script.<br>\nStandard Import Example:<br>\npython<br>\nimport math  # Imports the standard math package<br>\nresult = math.sqrt(16)<br>\nFor user-created packages or subpackages:<br>\npython<br>\nfrom mypackage.mymodule import myfunction<br>\nPseudocode:<br>\n• Install the package, if external.<br>\n• Use import package_name or from package.module import item.</p>\n\n<p><strong>Importing a Less Common Package</strong> (PrettyTable)</p>\n\n<p>Step 1: Install PrettyTable<br>\nbash</p>\n\n<p>pip install prettytable</p>\n\n<p>Step 2: Import and Use<br>\npython</p>\n\n<p>from prettytable import PrettyTable</p>\n\n<p>READ THE DOCUMENT AND GENRATE BELOW OUTPUT.<br>\nprint(table)<br>\n<strong>OUTPUT :-</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>+-----------------------+------------+\n| Pokemon Name         | Type       |\n+----------------------+------------+\n| Pikachu              | Electric   |\n| Squirtle             | Water      |\n| Charmander           | Fire       |\n+----------------------+------------+\n</code></pre>\n\n</div>\n\n\n\n<p>Pseudocode:<br>\n    • Run pip install for the package (e.g., pip install prettytable)<br>\n    • Use from prettytable import PrettyTable in your code<br>\n    • Create table objects and operate using its methods</p>\n\n<p><strong>Coffee Machine Program Using Packages (GitHub Version Outline)</strong><br>\n• Import logic to bring classes together.<br>\n• ALL THE PACKAGES ARE IN GITHUB.<br>\n• DOWNLOAD AND CREATE OUTPUT WHICH WE HAVE GENERATE IN PREVIOUS COFFEE_MACHINE</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-3ggd","date":1761710822,"author":"Vibe YouTube","guid":320509,"unread":true,"content":"<h1>\n  \n  \n  3 Unique Python Features You NEED To Know\n</h1>\n\n<p>Python’s got some slick tricks up its sleeve that you’ve probably never touched—like the new <code>match</code> statement for pattern matching, the super-handy <code>@dataclass</code> decorator to cut down on boilerplate, and the power of positional-only &amp; keyword-only arguments for cleaner APIs. Tim walks through each one with real-world examples so you can level up your code beyond the usual loops and ifs.</p>\n\n<p>Oh, and if you’re hungry for more, you can learn for free on Brilliant (they’ve got a sweet 20% off annual premium deal), or join Tim’s DevLaunch mentorship to build real projects and actually land that dream dev job. Happy coding!</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=e0FvoOtdAQc\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building Advanced AI Agents with LangChain's DeepAgents: A Hands-On Guide","url":"https://dev.to/samadhi_patil_294a4ff7fea/building-advanced-ai-agents-with-langchains-deepagents-a-hands-on-guide-1bk4","date":1761710029,"author":"samadhi patil","guid":320494,"unread":true,"content":"<h1>\n  \n  \n  Building Advanced AI Agents with LangChain's DeepAgents: A Hands-On Guide\n</h1>\n\n<p><strong>When Simple Tool-Calling Isn't Enough—Building Agents That Actually Think</strong></p>\n\n\n\n\n<h2>\n  \n  \n  TL;DR\n</h2>\n\n<p>From my experience working with LLM agents, the biggest challenge isn't getting them to call a function—it's getting them to handle complex, multi-step workflows without falling apart. Traditional agents are like assistants who forget what they were doing mid-task. LangChain's DeepAgents changes this completely. In my opinion, it's the first framework that truly enables agents to plan strategically, remember context persistently, delegate to specialists, and iterate toward quality. This guide walks you through building a real AI policy research agent that I designed to demonstrate these capabilities. You'll see actual code, understand the design decisions behind each piece, and get a working system that produces professional research reports autonomously.</p>\n\n\n\n\n<h2>\n  \n  \n  Introduction\n</h2>\n\n<p>Let me tell you about a problem that drove me crazy for months.</p>\n\n<p>Building an agent that calls a single tool? Easy. Getting an LLM to search the web or query a database? Done it a hundred times. But when I tried to build something more sophisticated—an agent that could research a complex topic, synthesize findings, review its own work, and produce a polished report—everything broke down.</p>\n\n<p>The agents I built were what I now call \"shallow.\" They'd execute one step, maybe two, then lose track of what they were doing. Token limits would overflow. Context would get muddled. Quality would suffer because there was no review process. As per my experience, this is the wall that most developers hit when moving from demos to production AI systems.</p>\n\n<p>Then I discovered LangChain's DeepAgents library, and honestly, it changed how I think about agent architecture entirely.</p>\n\n<p>What struck me first was the philosophy behind it. The DeepAgents team studied production systems like Claude Code and Deep Research—real applications handling genuinely complex workflows—and extracted the patterns that made them work. The result is a framework that gives agents four critical capabilities that shallow agents lack:</p>\n\n<p><strong>Planning tools</strong> that let agents break down tasks strategically before diving in. <strong>File system access</strong> that provides persistent memory outside the conversation context. <strong>Sub-agent creation</strong> that enables delegation to focused specialists. And <strong>long-term memory</strong> through LangGraph's Store that maintains state across sessions.</p>\n\n<p>In my view, these aren't just nice features—they're fundamental architectural requirements for any agent doing serious work.</p>\n\n<p>So I decided to build something real to prove it out. Not a toy demo, but an actual policy research system that could rival human analysis. The kind of agent I wish I'd had when I was doing regulatory research manually. In this guide, I'll walk you through exactly how I built it, the decisions I made along the way, and why each piece matters.</p>\n\n\n\n\n<h2>\n  \n  \n  What's This Article About?\n</h2>\n\n<p>This article is my attempt to show you—through actual working code—how to build an AI agent that thinks strategically rather than just reacting to inputs.</p>\n\n<p><strong>Here's What We're Building:</strong></p>\n\n<p>Based on my experience with various agent frameworks, I designed a policy research system that demonstrates every key capability of the DeepAgents architecture. This isn't theoretical—it's a complete implementation that I've tested extensively.</p>\n\n<p>The agent can:</p>\n\n<ul>\n<li>Accept complex research questions about AI regulations (like \"What's the latest on the EU AI Act?\")</li>\n<li>Break down the research into logical steps using planning tools</li>\n<li>Delegate the actual investigation to a specialized research sub-agent</li>\n<li>Save intermediate work to files so context never overflows</li>\n<li>Invoke a critique sub-agent to review draft quality</li>\n<li>Iterate based on feedback to produce professional reports</li>\n</ul>\n\n<p><strong>What You'll Learn (From My Mistakes and Successes):</strong></p>\n\n<p>Through building this, I learned several critical patterns:</p>\n\n<ol>\n<li><p><strong>Strategic Planning</strong>: In my opinion, the <code>write_todos</code> tool is underrated. I initially skipped it, thinking agents could just \"figure it out.\" Wrong. Explicit planning transforms chaotic execution into methodical workflow.</p></li>\n<li><p><strong>Context Management</strong>: This one burned me hard. My early agents would hit token limits mid-research and forget everything. File system operations (<code>read_file</code>, <code>write_file</code>, <code>edit_file</code>) solve this completely. As per my experience, this is non-negotiable for complex tasks.</p></li>\n<li><p><strong>Sub-Agent Delegation</strong>: I used to cram everything into one mega-prompt. Bad idea. Specialized sub-agents—each with focused responsibilities—produce dramatically better results. One agent researches, another critiques. Clean separation of concerns.</p></li>\n<li><p><strong>Custom System Prompts</strong>: Generic prompts produce generic results. I learned to design detailed, workflow-specific instructions that guide agents step-by-step through complex processes.</p></li>\n<li><p><strong>Tool Integration</strong>: External capabilities like web search aren't add-ons—they're core to agent functionality. I'll show you how I integrated Tavily search seamlessly.</p></li>\n<li><p><strong>Model Flexibility</strong>: One thing I love about DeepAgents is model-agnostic design. I've run this same system on OpenAI, Gemini, and Anthropic models interchangeably.</p></li>\n</ol>\n\n<p><strong>The Technical Architecture (How I Designed It):</strong></p>\n\n<p>When I sat down to architect this system, I thought about three layers:</p>\n\n<p><strong>Layer 1: Main Orchestrator</strong></p>\n\n<ul>\n<li>Receives research queries</li>\n<li>Plans the workflow</li>\n<li>Coordinates sub-agents</li>\n<li>Manages file system state</li>\n<li>Delivers final output</li>\n</ul>\n\n<p><strong>Layer 2: Specialized Sub-Agents</strong></p>\n\n<ul>\n<li>Research Sub-Agent: Conducts deep investigation using web search</li>\n<li>Critique Sub-Agent: Reviews outputs for quality, accuracy, completeness</li>\n</ul>\n\n<p><strong>Layer 3: Infrastructure</strong></p>\n\n<ul>\n<li>File system for persistent state</li>\n<li>LangGraph Store for long-term memory</li>\n<li>Tavily API for real-time information gathering</li>\n</ul>\n\n<p>From my perspective, this layered approach is what enables scalability. Each component has a single, clear responsibility.</p>\n\n<p><strong>Why This Pattern Matters:</strong></p>\n\n<p>In my experience building production AI systems, I've learned that architecture matters more than model choice. A well-designed agent with GPT-3.5 will outperform a poorly designed agent with GPT-4. The patterns you'll learn here—planning, delegation, state management, quality control—apply regardless of which LLM you're using or what domain you're working in.</p>\n\n<p>Whether you're building content creation pipelines, code generation systems, data analysis workflows, or customer service automation, these fundamentals remain constant.</p>\n\n\n\n\n<h2>\n  \n  \n  Tech Stack\n</h2>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Component</th>\n<th>Technology</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Agent Framework</strong></td>\n<td>LangChain DeepAgents</td>\n<td>Core library for building deep, planful agents with context management</td>\n</tr>\n<tr>\n<td><strong>LLM Provider (Primary)</strong></td>\n<td>OpenAI GPT-4o</td>\n<td>Main language model for agent reasoning and generation</td>\n</tr>\n<tr>\n<td><strong>LLM Provider (Alternative)</strong></td>\n<td>Google Gemini 2.5 Flash</td>\n<td>Alternative model option (fully interchangeable)</td>\n</tr>\n<tr>\n<td><strong>Default Model</strong></td>\n<td>Claude Sonnet 4.5</td>\n<td>DeepAgents internal default when no model specified</td>\n</tr>\n<tr>\n<td><strong>Web Search</strong></td>\n<td>Tavily API</td>\n<td>Real-time internet search tool for research gathering</td>\n</tr>\n<tr>\n<td><strong>State Management</strong></td>\n<td>LangGraph Store</td>\n<td>Long-term memory and session persistence</td>\n</tr>\n<tr>\n<td><strong>Model Initialization</strong></td>\n<td>LangChain <code>init_chat_model</code>\n</td>\n<td>Unified interface for multiple LLM providers</td>\n</tr>\n<tr>\n<td><strong>File Operations</strong></td>\n<td>Built-in File Tools</td>\n<td>Context management through <code>read_file</code>, <code>write_file</code>, <code>edit_file</code>, <code>ls</code>\n</td>\n</tr>\n<tr>\n<td><strong>Planning</strong></td>\n<td>Built-in <code>write_todos</code>\n</td>\n<td>Task breakdown and progress tracking</td>\n</tr>\n<tr>\n<td><strong>Sub-Agent Management</strong></td>\n<td>Built-in <code>task</code> tool</td>\n<td>Creation and delegation to specialized sub-agents</td>\n</tr>\n<tr>\n<td><strong>Environment Management</strong></td>\n<td>Python <code>os.environ</code>\n</td>\n<td>API key and configuration management</td>\n</tr>\n<tr>\n<td><strong>Development Environment</strong></td>\n<td>Jupyter Notebook</td>\n<td>Interactive development and testing</td>\n</tr>\n</tbody>\n</table></div>\n\n\n\n\n<h2>\n  \n  \n  Why Read It?\n</h2>\n\n<p><strong>If you're building AI agents that do more than simple tool calls, this article is essential reading.</strong> Here's why:</p>\n\n<h3>\n  \n  \n  1. Move Beyond Basic Agents\n</h3>\n\n<p>Most tutorials show you how to build agents that can call a function or search the web. But when you try to scale those patterns to real-world applications—research assistants, code generation systems, multi-step workflows—you hit a wall. This article shows you how to break through that limitation with architectures designed for complexity.</p>\n\n<h3>\n  \n  \n  2. Solve Real Production Challenges\n</h3>\n\n<p>You'll learn solutions to problems you'll actually face:</p>\n\n<ul>\n<li>\n<strong>Context overflow</strong>: How to handle tasks that exceed token limits through file-based state management</li>\n<li>\n<strong>Task planning</strong>: How to make agents think strategically instead of reactively</li>\n<li>\n<strong>Quality control</strong>: How to build self-reviewing systems through sub-agent delegation</li>\n<li>\n<strong>Memory management</strong>: How to maintain state across sessions for long-running projects</li>\n<li>\n<strong>Modularity</strong>: How to break complex agents into focused, maintainable components</li>\n</ul>\n\n<h3>\n  \n  \n  3. Complete, Working Implementation\n</h3>\n\n<p>This isn't pseudo-code or theoretical concepts. You get:</p>\n\n<ul>\n<li>Full source code for a production-quality research agent</li>\n<li>Step-by-step explanations of each component</li>\n<li>Design decisions explained in context</li>\n<li>Multiple LLM provider options (OpenAI, Gemini, Anthropic)</li>\n<li>Ready-to-run Jupyter notebook with all dependencies</li>\n<li>Professional prompt engineering examples</li>\n</ul>\n\n<h3>\n  \n  \n  4. Learn Patterns You Can Reuse\n</h3>\n\n<p>The patterns demonstrated here apply far beyond policy research:</p>\n\n<ul>\n<li>Content creation systems with review workflows</li>\n<li>Code generation with testing and refinement</li>\n<li>Data analysis with iterative exploration</li>\n<li>Customer service with escalation and specialization</li>\n<li>Report generation with research and synthesis</li>\n<li>Any multi-stage workflow requiring planning and quality control</li>\n</ul>\n\n<h3>\n  \n  \n  5. Understand the \"Why\" Behind Design Choices\n</h3>\n\n<p>Each section explains not just what the code does, but why it's structured that way:</p>\n\n<ul>\n<li>Why file systems prevent context overflow</li>\n<li>Why sub-agents improve focus and quality</li>\n<li>Why custom prompts are critical for complex tasks</li>\n<li>Why planning tools enable strategic execution</li>\n<li>Why this architecture scales where basic agents don't</li>\n</ul>\n\n<h3>\n  \n  \n  6. Stay Current with AI Agent Evolution\n</h3>\n\n<p>The AI agent landscape is evolving rapidly from simple tool-calling to sophisticated, planful systems. DeepAgents represents the cutting edge of this evolution, incorporating lessons from production systems like Claude Code. Understanding this architecture prepares you for where the field is heading.</p>\n\n<h3>\n  \n  \n  7. Practical Business Value\n</h3>\n\n<p>These techniques have immediate business applications:</p>\n\n<ul>\n<li>Automating research and analysis workflows</li>\n<li>Building intelligent content creation pipelines</li>\n<li>Creating self-improving code generation systems</li>\n<li>Developing sophisticated customer support agents</li>\n<li>Implementing complex decision-making systems</li>\n</ul>\n\n<p>Whether you're a developer building production AI systems, a researcher exploring agent architectures, or a technical leader evaluating AI capabilities, this guide provides practical knowledge you can apply immediately.</p>\n\n\n\n\n<h2>\n  \n  \n  Let's Design\n</h2>\n\n<h3>\n  \n  \n  The Architecture Philosophy\n</h3>\n\n<p>When I set out to build this policy research agent, the fundamental question was: how do we create an AI system that thinks strategically rather than reactively? Traditional agents process tasks linearly—receive input, call tools, return output. But complex research requires something different: planning, delegation, iteration, and quality control.</p>\n\n<p>The DeepAgents architecture addresses this through four interconnected capabilities that work together to enable sophisticated behavior:</p>\n\n<h3>\n  \n  \n  1. Strategic Planning Layer\n</h3>\n\n<p><strong>The Problem</strong>: Basic agents jump straight into action without considering the best approach. They can't break down complex tasks or track progress across multiple steps.</p>\n\n<p><strong>The Solution</strong>: DeepAgents provides a <code>write_todos</code> tool that enables agents to:</p>\n\n<ul>\n<li>Decompose large research questions into specific subtasks</li>\n<li>Create actionable checklists before starting work</li>\n<li>Track which steps are complete and which remain</li>\n<li>Adjust the plan dynamically as new information emerges</li>\n</ul>\n\n<p><strong>In Our Implementation</strong>: The main agent first saves the research question to <code>question.txt</code>, then creates a todo list outlining the research workflow: gather information, analyze findings, write the report, critique the draft, and finalize. This planning step transforms reactive execution into strategic orchestration.</p>\n\n<h3>\n  \n  \n  2. Persistent Context Management\n</h3>\n\n<p><strong>The Problem</strong>: LLMs have token limits. Complex tasks generate large amounts of intermediate data—research findings, draft content, notes—that quickly overflow the context window. Once that happens, the agent loses track of its work.</p>\n\n<p><strong>The Solution</strong>: DeepAgents integrates file system operations (<code>read_file</code>, <code>write_file</code>, <code>edit_file</code>, <code>ls</code>) that allow agents to:</p>\n\n<ul>\n<li>Store intermediate results outside the conversation context</li>\n<li>Retrieve specific information when needed</li>\n<li>Build up complex outputs incrementally</li>\n<li>Continue work across multiple sessions</li>\n</ul>\n\n<p><strong>In Our Implementation</strong>: The agent uses three key files:</p>\n\n<ul>\n<li>\n<code>question.txt</code>: Stores the original research query for reference</li>\n<li>\n<code>final_report.md</code>: Holds the evolving research report through drafts and revisions</li>\n<li>Working memory in file system: Prevents context overflow even with extensive research</li>\n</ul>\n\n<p>This file-based approach means the agent can handle research projects of any size without hitting token limits.</p>\n\n<h3>\n  \n  \n  3. Specialized Sub-Agent Delegation\n</h3>\n\n<p><strong>The Problem</strong>: Trying to do everything in one agent leads to bloated context, unclear responsibilities, and lower quality outputs. Research requires different skills than critique. Gathering information is different from synthesizing it.</p>\n\n<p><strong>The Solution</strong>: DeepAgents allows creation of focused sub-agents via the <code>task</code> tool. Each sub-agent has:</p>\n\n<ul>\n<li>Its own specialized system prompt defining clear responsibilities</li>\n<li>Dedicated tools appropriate to its function</li>\n<li>Isolated context that doesn't clutter the main agent</li>\n<li>Single, well-defined output that returns to the main agent</li>\n</ul>\n\n<p><strong>In Our Implementation</strong>: We use two sub-agents:</p>\n\n<p><strong>Policy Research Sub-Agent</strong>:</p>\n\n<ul>\n<li>\n<strong>Purpose</strong>: Conduct in-depth investigation of AI regulations and policies</li>\n<li>\n<strong>Tools</strong>: Internet search via Tavily API</li>\n<li>\n<strong>Instructions</strong>: Find key updates, cite sources, compare global approaches, write professionally</li>\n<li>\n<strong>Output</strong>: Comprehensive research findings passed back to main agent</li>\n</ul>\n\n<p><strong>Policy Critique Sub-Agent</strong>:</p>\n\n<ul>\n<li>\n<strong>Purpose</strong>: Quality control and editorial review</li>\n<li>\n<strong>Tools</strong>: File reading to access the draft report</li>\n<li>\n<strong>Instructions</strong>: Check accuracy, verify citations, assess balance and tone</li>\n<li>\n<strong>Output</strong>: Constructive feedback without direct modification</li>\n</ul>\n\n<p>This separation of concerns means each sub-agent can focus deeply on its specialty without distractions.</p>\n\n<h3>\n  \n  \n  4. Intelligent Workflow Orchestration\n</h3>\n\n<p><strong>The Problem</strong>: Who coordinates all these pieces? How does the main agent know when to delegate, when to write, when to revise?</p>\n\n<p><strong>The Solution</strong>: A carefully crafted custom system prompt that serves as the \"brain\" of the operation. This prompt:</p>\n\n<ul>\n<li>Defines the overall workflow step-by-step</li>\n<li>Specifies when to invoke each sub-agent</li>\n<li>Enforces quality standards and formatting requirements</li>\n<li>Provides context about the agent's role and capabilities</li>\n</ul>\n\n<p><strong>In Our Implementation</strong>: The <code>policy_research_instructions</code> prompt creates a clear five-step workflow:</p>\n\n<ol>\n<li>\n<strong>Save the Question</strong>: Write user query to <code>question.txt</code> for reference</li>\n<li>\n<strong>Delegate Research</strong>: Invoke policy-research-agent to gather comprehensive information</li>\n<li>\n<strong>Synthesize Report</strong>: Write findings to <code>final_report.md</code> with proper structure and citations</li>\n<li>\n<strong>Quality Review</strong>: Optionally invoke policy-critique-agent for editorial feedback</li>\n<li>\n<strong>Finalize</strong>: Revise based on feedback and output the complete professional report</li>\n</ol>\n\n<p>The prompt also enforces standards:</p>\n\n<ul>\n<li>Markdown formatting with clear section headers</li>\n<li>Citation style using <code>[Title](URL)</code> format</li>\n<li>Professional, neutral tone suitable for policy briefings</li>\n<li>Sources section at the end</li>\n</ul>\n\n<h3>\n  \n  \n  The Complete Flow\n</h3>\n\n<p>Here's how everything works together when a user asks: \"What are the latest updates on the EU AI Act and its global impact?\"<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>User Query\n    ↓\nMain Deep Agent\n    ↓\n1. Saves question to question.txt (context management)\n    ↓\n2. Creates todo list (planning)\n    ↓\n3. Invokes Policy Research Sub-Agent\n    ↓\n    Research Sub-Agent:\n    - Uses Tavily search for EU AI Act updates\n    - Finds regulations, news, analysis\n    - Compares global approaches\n    - Formats findings professionally\n    - Returns comprehensive research to Main Agent\n    ↓\n4. Main Agent writes draft to final_report.md\n    ↓\n5. Invokes Policy Critique Sub-Agent\n    ↓\n    Critique Sub-Agent:\n    - Reads final_report.md\n    - Checks accuracy and citations\n    - Verifies balanced analysis\n    - Returns constructive feedback to Main Agent\n    ↓\n6. Main Agent revises draft based on feedback\n    ↓\n7. Outputs final professional policy report\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Why This Architecture Scales\n</h3>\n\n<p>This design handles complexity through:</p>\n\n<ul>\n<li>\n<strong>Modularity</strong>: Each component has a single, clear responsibility</li>\n<li>\n<strong>Extensibility</strong>: Easy to add new sub-agents for different research domains</li>\n<li>\n<strong>Robustness</strong>: File system prevents context overflow regardless of task size</li>\n<li>\n<strong>Quality</strong>: Built-in review cycle ensures professional outputs</li>\n<li>\n<strong>Flexibility</strong>: Works with any LLM provider (OpenAI, Gemini, Anthropic, etc.)</li>\n<li>\n<strong>Maintainability</strong>: Clear separation between orchestration, execution, and review</li>\n</ul>\n\n<p>Unlike basic agents that collapse under complexity, this architecture gets stronger as tasks become more sophisticated. The planning layer ensures strategic execution, the file system prevents memory issues, sub-agents maintain focus, and the workflow orchestration keeps everything coordinated.</p>\n\n<p>This is the fundamental difference between shallow and deep agents: the ability to think, plan, delegate, and iterate rather than just react and respond.</p>\n\n\n\n\n<h2>\n  \n  \n  Let's Get Cooking\n</h2>\n\n<p>Now let's build this system step by step, understanding each component and why it matters.</p>\n\n<h3>\n  \n  \n  Step 1: Install Dependencies and Setup Environment\n</h3>\n\n<p>First, we need the core libraries that power our deep agent system.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"err\">!</span><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">deepagents</span> <span class=\"n\">tavily</span><span class=\"o\">-</span><span class=\"n\">python</span> <span class=\"n\">langchain</span><span class=\"o\">-</span><span class=\"n\">google</span><span class=\"o\">-</span><span class=\"n\">genai</span> <span class=\"n\">langchain</span><span class=\"o\">-</span><span class=\"n\">openai</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>What We're Installing</strong>:</p>\n\n<ul>\n<li>\n<code>deepagents</code>: The core LangChain library providing planning, file tools, and sub-agent capabilities</li>\n<li>\n<code>tavily-python</code>: Client for Tavily web search API (our research tool)</li>\n<li>\n<code>langchain-google-genai</code>: Integration for Google's Gemini models (alternative LLM)</li>\n<li>\n<code>langchain-openai</code>: Integration for OpenAI's GPT models (primary LLM)</li>\n</ul>\n\n<p><strong>Why These Dependencies</strong>: DeepAgents is model-agnostic, so we install multiple LLM provider options. Tavily provides the real-time web search capability our research sub-agent needs.</p>\n\n\n\n\n<h3>\n  \n  \n  Step 2: Configure API Keys\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">from</span> <span class=\"n\">getpass</span> <span class=\"kn\">import</span> <span class=\"n\">getpass</span>\n\n<span class=\"c1\"># Required for web search functionality\n</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">TAVILY_API_KEY</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">getpass</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Enter Tavily API Key: </span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Choose your preferred LLM provider\n</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">OPENAI_API_KEY</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">getpass</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Enter OpenAI API Key: </span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Optional: If using Gemini instead\n# os.environ['GOOGLE_API_KEY'] = getpass('Enter Google API Key: ')\n</span></code></pre>\n\n</div>\n\n\n\n<p><strong>Why This Matters</strong>: </p>\n\n<ul>\n<li>The Tavily API key enables our research sub-agent to search the web for real-time information</li>\n<li>You can use either OpenAI or Google (or other providers)—DeepAgents works seamlessly with all of them</li>\n<li>Using <code>getpass</code> keeps your API keys secure and out of your code</li>\n</ul>\n\n<p><strong>Getting API Keys</strong>:</p>\n\n<ul>\n<li>Tavily: Sign up at tavily.com for web search access</li>\n<li>OpenAI: Get your key from platform.openai.com</li>\n<li>Google: Access through Google AI Studio</li>\n</ul>\n\n\n\n\n<h3>\n  \n  \n  Step 3: Import Core Libraries\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Literal</span>\n<span class=\"kn\">from</span> <span class=\"n\">tavily</span> <span class=\"kn\">import</span> <span class=\"n\">TavilyClient</span>\n<span class=\"kn\">from</span> <span class=\"n\">deepagents</span> <span class=\"kn\">import</span> <span class=\"n\">create_deep_agent</span>\n\n<span class=\"c1\"># Initialize the search client\n</span><span class=\"n\">tavily_client</span> <span class=\"o\">=</span> <span class=\"nc\">TavilyClient</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Why We Import These</strong>:</p>\n\n<ul>\n<li>\n<code>typing.Literal</code>: Enables type hints for our search function parameters</li>\n<li>\n<code>TavilyClient</code>: Provides the interface to web search functionality</li>\n<li>\n<code>create_deep_agent</code>: The main factory function for building our deep agent system</li>\n</ul>\n\n<p><strong>Design Note</strong>: We initialize the Tavily client at the module level because it will be used inside our tool function, which gets called by the sub-agent.</p>\n\n\n\n\n<h3>\n  \n  \n  Step 4: Define the Web Search Tool\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Literal</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">internet_search</span><span class=\"p\">(</span>\n    <span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n    <span class=\"n\">max_results</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n    <span class=\"n\">topic</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">general</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">news</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">finance</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">general</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">include_raw_content</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"bp\">False</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Run a web search and return relevant results.\n\n    This tool allows agents to gather real-time information from the internet.\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">search_docs</span> <span class=\"o\">=</span> <span class=\"n\">tavily_client</span><span class=\"p\">.</span><span class=\"nf\">search</span><span class=\"p\">(</span>\n        <span class=\"n\">query</span><span class=\"p\">,</span>\n        <span class=\"n\">max_results</span><span class=\"o\">=</span><span class=\"n\">max_results</span><span class=\"p\">,</span>\n        <span class=\"n\">include_raw_content</span><span class=\"o\">=</span><span class=\"n\">include_raw_content</span><span class=\"p\">,</span>\n        <span class=\"n\">topic</span><span class=\"o\">=</span><span class=\"n\">topic</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">search_docs</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>What This Tool Does</strong>:</p>\n\n<ul>\n<li>Accepts a search query string and optional parameters</li>\n<li>Calls Tavily's search API to find relevant web content</li>\n<li>Returns structured search results (titles, URLs, snippets, content)</li>\n<li>Supports different topic categories (general, news, finance)</li>\n</ul>\n\n<p><strong>Why We Structure It This Way</strong>:</p>\n\n<ul>\n<li>\n<strong>Clear docstring</strong>: Helps the LLM understand when and how to use this tool</li>\n<li>\n<strong>Typed parameters</strong>: The <code>Literal</code> type hint tells the agent exactly what topic values are valid</li>\n<li>\n<strong>Sensible defaults</strong>: 5 results and general search work for most cases</li>\n<li>\n<strong>Raw content option</strong>: Can retrieve full page content when needed for deep research</li>\n</ul>\n\n<p><strong>How the Agent Uses It</strong>: The research sub-agent will automatically call this function when it needs to gather information about AI policies, regulations, or related topics.</p>\n\n\n\n\n<h3>\n  \n  \n  Step 5: Create the Research Sub-Agent Configuration\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">sub_research_prompt</span> <span class=\"o\">=</span> <span class=\"sh\">\"\"\"</span><span class=\"s\">\nYou are a specialized AI policy researcher.\nConduct in-depth research on government policies, global regulations, and ethical frameworks related to artificial intelligence.\n\nYour answer should:\n- Provide key updates and trends\n- Include relevant sources and laws (e.g., EU AI Act, U.S. Executive Orders)\n- Compare global approaches when relevant\n- Be written in clear, professional language\n\nOnly your FINAL message will be passed back to the main agent.\n</span><span class=\"sh\">\"\"\"</span>\n\n<span class=\"n\">research_sub_agent</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">policy-research-agent</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">description</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Used to research specific AI policy and regulation questions in depth.</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">system_prompt</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">sub_research_prompt</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">tools</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">internet_search</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Breaking This Down</strong>:</p>\n\n<p><strong>The System Prompt</strong>:</p>\n\n<ul>\n<li>Defines the sub-agent's identity and expertise (AI policy researcher)</li>\n<li>Specifies output requirements (updates, sources, comparisons)</li>\n<li>Sets quality standards (clear, professional language)</li>\n<li>Reminds the agent that only the final message returns to the parent</li>\n</ul>\n\n<p><strong>Why This Prompt Works</strong>:</p>\n\n<ul>\n<li>\n<strong>Focused role</strong>: \"Specialized AI policy researcher\" gives clear identity</li>\n<li>\n<strong>Concrete requirements</strong>: The bullet points tell the agent exactly what to include</li>\n<li>\n<strong>Examples</strong>: Mentioning \"EU AI Act, U.S. Executive Orders\" helps the agent understand scope</li>\n<li>\n<strong>Important constraint</strong>: \"Only your FINAL message will be passed back\" prevents verbose intermediate steps</li>\n</ul>\n\n<p><strong>The Configuration Dictionary</strong>:</p>\n\n<ul>\n<li>\n<strong>name</strong>: Identifier the main agent uses to invoke this sub-agent</li>\n<li>\n<strong>description</strong>: Helps the main agent decide when to delegate to this specialist</li>\n<li>\n<strong>system_prompt</strong>: The instructions that define this sub-agent's behavior</li>\n<li>\n<strong>tools</strong>: List of functions this sub-agent can call (just internet search in this case)</li>\n</ul>\n\n<p><strong>Design Philosophy</strong>: This sub-agent has ONE job: research AI policies thoroughly. It has the internet search tool to do that job well, and its prompt focuses it entirely on that task. No distractions, no scope creep.</p>\n\n\n\n\n<h3>\n  \n  \n  Step 6: Create the Critique Sub-Agent Configuration\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">sub_critique_prompt</span> <span class=\"o\">=</span> <span class=\"sh\">\"\"\"</span><span class=\"s\">\nYou are a policy editor reviewing a report on AI governance.\nCheck the report at `final_report.md` and the question at `question.txt`.\n\nFocus on:\n- Accuracy and completeness of legal information\n- Proper citation of policy documents\n- Balanced analysis of regional differences\n- Clarity and neutrality of tone\n\nProvide constructive feedback, but do NOT modify the report directly.\n</span><span class=\"sh\">\"\"\"</span>\n\n<span class=\"n\">critique_sub_agent</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">policy-critique-agent</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">description</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Critiques AI policy research reports for completeness, clarity, and accuracy.</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">system_prompt</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">sub_critique_prompt</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>The Critique System Prompt</strong>:</p>\n\n<ul>\n<li>Defines role as editorial reviewer (not researcher)</li>\n<li>Specifies exactly what files to check</li>\n<li>Lists concrete quality criteria to evaluate</li>\n<li>Explicitly prohibits direct modification (feedback only)</li>\n</ul>\n\n<p><strong>Why No Tools Here</strong>: Unlike the research sub-agent, the critique agent doesn't need internet search. It has access to the file system (built into all DeepAgents) to read the draft report and provide feedback. That's all it needs.</p>\n\n<p><strong>The Review Criteria</strong>:<br>\nEach bullet point gives the critic something specific to check:</p>\n\n<ul>\n<li>\n<strong>Accuracy and completeness</strong>: Are the facts right? Is anything missing?</li>\n<li>\n<strong>Proper citation</strong>: Are sources properly attributed?</li>\n<li>\n<strong>Balanced analysis</strong>: Are regional differences fairly represented?</li>\n<li>\n<strong>Clarity and neutrality</strong>: Is the tone appropriate for policy work?</li>\n</ul>\n\n<p><strong>Why \"Do NOT modify\"</strong>: This is crucial. We want the critique agent to identify issues and suggest improvements, but leave the actual editing to the main agent. This separation prevents the critic from overstepping and ensures the main agent maintains control of the final output.</p>\n\n<p><strong>The Workflow</strong>: Main agent → writes draft → critique agent reviews → provides feedback → main agent revises. Clean separation of concerns.</p>\n\n\n<h3>\n  \n  \n  Step 7: Design the Main Agent System Prompt\n</h3>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">policy_research_instructions</span> <span class=\"o\">=</span> <span class=\"sh\">\"\"\"</span><span class=\"s\">\nYou are an expert AI policy researcher and analyst.\nYour job is to investigate questions related to global AI regulation, ethics, and governance frameworks.\n\n1️⃣ Save the user</span><span class=\"sh\">'</span><span class=\"s\">s question to `question.txt`\n2️⃣ Use the `policy-research-agent` to perform in-depth research\n3️⃣ Write a detailed report to `final_report.md`\n4️⃣ Optionally, ask the `policy-critique-agent` to critique your draft\n5️⃣ Revise if necessary, then output the final, comprehensive report\n\nWhen writing the final report:\n- Use Markdown with clear sections (## for each)\n- Include citations in [Title](URL) format\n- Add a ### Sources section at the end\n- Write in professional, neutral tone suitable for policy briefings\n</span><span class=\"sh\">\"\"\"</span>\n</code></pre>\n\n</div>\n\n\n<p><strong>This Is the Brain of the Operation</strong>. Let me explain why each part matters:</p>\n\n<p><strong>Identity and Purpose</strong> (\"You are an expert AI policy researcher...\"):</p>\n\n<ul>\n<li>Establishes the agent's high-level role</li>\n<li>Sets expectations for quality and expertise</li>\n<li>Provides context for decision-making</li>\n</ul>\n\n<p><strong>The Numbered Workflow</strong> (Steps 1-5):<br>\nThis is the most important part. It gives the agent a clear execution plan:</p>\n\n<ol>\n<li>\n<strong>Save the question</strong>: Creates a persistent reference the agent can check later</li>\n<li>\n<strong>Delegate to research sub-agent</strong>: Uses the specialist to gather information</li>\n<li>\n<strong>Write the report</strong>: Synthesizes findings into a structured document</li>\n<li>\n<strong>Get critique</strong>: Optionally invokes the editor for quality review</li>\n<li>\n<strong>Finalize</strong>: Revises based on feedback and delivers the result</li>\n</ol>\n\n<p><strong>Why Numbered Steps Work</strong>: They create a mental model for the LLM. The agent knows there's a sequence, knows what comes next, and can track progress.</p>\n\n<p><strong>The Formatting Requirements</strong> (Markdown, citations, etc.):<br>\nThese aren't just style preferences—they're quality controls:</p>\n\n<ul>\n<li>\n<strong>Markdown sections</strong>: Ensures structured, navigable reports</li>\n<li>\n<strong><a href=\"https://dev.toURL\">Title</a> citations</strong>: Makes sources clickable and verifiable</li>\n<li>\n<strong>Sources section</strong>: Consolidates references for easy checking</li>\n<li>\n<strong>Professional tone</strong>: Appropriate for the policy analysis domain</li>\n</ul>\n\n<p><strong>Why This Prompt Architecture Works</strong>:</p>\n\n<ol>\n<li>\n<strong>Clear role</strong>: The agent knows who it is</li>\n<li>\n<strong>Explicit workflow</strong>: The agent knows what to do</li>\n<li>\n<strong>Quality standards</strong>: The agent knows how to do it well</li>\n<li>\n<strong>File-based state</strong>: The agent can handle any complexity</li>\n<li>\n<strong>Delegation model</strong>: The agent knows when to get help</li>\n</ol>\n\n<p>This is the difference between an agent that wanders aimlessly and one that executes strategically.</p>\n\n\n<h3>\n  \n  \n  Step 8: Initialize the Main Deep Agent\n</h3>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">langchain.chat_models</span> <span class=\"kn\">import</span> <span class=\"n\">init_chat_model</span>\n<span class=\"kn\">from</span> <span class=\"n\">deepagents</span> <span class=\"kn\">import</span> <span class=\"n\">create_deep_agent</span>\n\n<span class=\"c1\"># Initialize with OpenAI GPT-4o\n</span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"nf\">init_chat_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">openai:gpt-4o</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Alternative: Use Google Gemini instead\n# model = init_chat_model(model=\"google_genai:gemini-2.5-flash\")\n</span>\n<span class=\"c1\"># Create the deep agent\n</span><span class=\"n\">agent</span> <span class=\"o\">=</span> <span class=\"nf\">create_deep_agent</span><span class=\"p\">(</span>\n    <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"p\">,</span>\n    <span class=\"n\">tools</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">internet_search</span><span class=\"p\">],</span>\n    <span class=\"n\">system_prompt</span><span class=\"o\">=</span><span class=\"n\">policy_research_instructions</span><span class=\"p\">,</span>\n    <span class=\"n\">subagents</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">research_sub_agent</span><span class=\"p\">,</span> <span class=\"n\">critique_sub_agent</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n<p><strong>What's Happening Here</strong>:</p>\n\n<p><strong>Model Initialization</strong>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"nf\">init_chat_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">openai:gpt-4o</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>\n<code>init_chat_model</code> is LangChain's unified interface for any LLM</li>\n<li>Format is <code>\"provider:model_name\"</code>\n</li>\n<li>Switching providers is as simple as changing this string</li>\n<li>If you don't specify a model, DeepAgents defaults to Claude Sonnet 4.5</li>\n</ul>\n\n<p><strong>Creating the Deep Agent</strong>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">agent</span> <span class=\"o\">=</span> <span class=\"nf\">create_deep_agent</span><span class=\"p\">(...)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This single function call assembles the entire complex system:</p>\n\n<ul>\n<li>\n<strong>model</strong>: The LLM that powers reasoning and decision-making</li>\n<li>\n<strong>tools</strong>: Functions the main agent can call directly (internet search)</li>\n<li>\n<strong>system_prompt</strong>: The workflow instructions we defined above</li>\n<li>\n<strong>subagents</strong>: The specialized agents available for delegation</li>\n</ul>\n\n<p><strong>What <code>create_deep_agent</code> Does Internally</strong>:</p>\n\n<ol>\n<li>Sets up the planning system (todo management)</li>\n<li>Configures file system tools (read, write, edit, ls)</li>\n<li>Registers the sub-agents for delegation</li>\n<li>Integrates the custom tools we provided</li>\n<li>Wraps everything in a LangGraph workflow</li>\n<li>Connects to the LLM for execution</li>\n</ol>\n\n<p><strong>Why This Is Powerful</strong>: In these few lines, we've created an agent that can:</p>\n\n<ul>\n<li>Plan and track complex tasks</li>\n<li>Search the web for information</li>\n<li>Delegate to specialized sub-agents</li>\n<li>Manage persistent state through files</li>\n<li>Maintain long-term memory</li>\n<li>Execute multi-step workflows</li>\n</ul>\n\n<p>All the complexity is abstracted away by <code>create_deep_agent</code>.</p>\n\n<p><strong>Model Flexibility Note</strong>: Notice how easy it is to switch between OpenAI and Gemini (or any other provider). This is intentional—DeepAgents is designed to be model-agnostic. The architecture works the same regardless of which LLM powers it.</p>\n\n\n\n\n<h3>\n  \n  \n  Step 9: Invoke the Agent with a Research Query\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">What are the latest updates on the EU AI Act and its global impact?</span><span class=\"sh\">\"</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"nf\">invoke</span><span class=\"p\">({</span><span class=\"sh\">\"</span><span class=\"s\">messages</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">query</span><span class=\"p\">}]})</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>What Happens When You Run This</strong>:</p>\n\n<p><strong>The Invocation Format</strong>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">messages</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">query</span><span class=\"p\">}]}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This is the standard LangChain message format. The agent receives it as if it were a chat conversation.</p>\n\n<p><strong>The Execution Flow</strong> (what happens behind the scenes):</p>\n\n<ol>\n<li>\n<p><strong>Main Agent Receives Query</strong></p>\n\n<ul>\n<li>Reads the question: \"What are the latest updates on the EU AI Act...\"</li>\n<li>Consults its system prompt (the numbered workflow)</li>\n<li>Decides to start at step 1</li>\n</ul>\n</li>\n<li><p><strong>Step 1: Save the Question</strong><br>\n</p></li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code>   <span class=\"c1\"># Agent calls: write_file(path=\"question.txt\", content=query)\n</span></code></pre>\n\n</div>\n\n\n\n<ul>\n<li>Uses built-in file tool to persist the question</li>\n<li>Creates a reference point for later use</li>\n</ul>\n\n<ol>\n<li>\n<strong>Step 2: Delegate to Research Sub-Agent</strong>\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code>   <span class=\"c1\"># Agent calls: task(agent=\"policy-research-agent\", \n</span>   <span class=\"c1\">#                   instruction=\"Research the EU AI Act updates and global impact\")\n</span></code></pre>\n\n</div>\n\n\n\n<ul>\n<li>Research sub-agent receives the task</li>\n<li>Calls <code>internet_search(\"EU AI Act latest updates\")</code>\n</li>\n<li>Calls <code>internet_search(\"EU AI Act global impact\")</code>\n</li>\n<li>Calls <code>internet_search(\"AI regulations worldwide comparison\")</code>\n</li>\n<li>Synthesizes findings into comprehensive report</li>\n<li>Returns final message to main agent</li>\n</ul>\n\n<ol>\n<li>\n<strong>Step 3: Write the Draft Report</strong>\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code>   <span class=\"c1\"># Agent calls: write_file(path=\"final_report.md\", content=research_findings)\n</span></code></pre>\n\n</div>\n\n\n\n<ul>\n<li>Takes sub-agent's research</li>\n<li>Structures it into Markdown sections</li>\n<li>Includes citations in <a href=\"https://dev.toURL\">Title</a> format</li>\n<li>Writes to file system</li>\n</ul>\n\n<ol>\n<li>\n<strong>Step 4: Get Editorial Critique</strong>\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code>   <span class=\"c1\"># Agent calls: task(agent=\"policy-critique-agent\",\n</span>   <span class=\"c1\">#                   instruction=\"Review the draft report for quality\")\n</span></code></pre>\n\n</div>\n\n\n\n<ul>\n<li>Critique sub-agent reads <code>final_report.md</code>\n</li>\n<li>Checks accuracy, citations, balance, tone</li>\n<li>Provides constructive feedback</li>\n<li>Returns review to main agent</li>\n</ul>\n\n<ol>\n<li>\n<strong>Step 5: Revise and Finalize</strong>\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code>   <span class=\"c1\"># Agent calls: edit_file(path=\"final_report.md\", edits=improvements)\n</span></code></pre>\n\n</div>\n\n\n\n<ul>\n<li>Main agent incorporates feedback</li>\n<li>Refines sections based on critique</li>\n<li>Ensures all quality standards are met</li>\n<li>Outputs final comprehensive report</li>\n</ul>\n\n<p><strong>The Result</strong>: <code>result</code> contains the complete execution trace, including:</p>\n\n<ul>\n<li>All intermediate steps taken</li>\n<li>Tool calls made by each agent</li>\n<li>Sub-agent invocations and responses</li>\n<li>The final policy report</li>\n<li>File system changes</li>\n</ul>\n\n<p><strong>Viewing the Output</strong>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Get just the final report\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">messages</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">content</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Or access the file directly\n# agent.read_file(\"final_report.md\")\n</span></code></pre>\n\n</div>\n\n\n\n<p><strong>What Makes This Different from Basic Agents</strong>:</p>\n\n<ul>\n<li>\n<strong>Basic agent</strong>: Search → Generate → Done (one step, no planning)</li>\n<li>\n<strong>Deep agent</strong>: Plan → Delegate → Research → Write → Critique → Revise → Deliver (strategic, multi-stage)</li>\n</ul>\n\n<p>The deep agent produces higher quality results because it:</p>\n\n<ul>\n<li>Plans before acting</li>\n<li>Uses specialists for specific tasks</li>\n<li>Iterates based on feedback</li>\n<li>Manages complexity through file system</li>\n<li>Maintains focus through sub-agent delegation</li>\n</ul>\n\n<p>This is the power of the DeepAgents architecture in action.</p>\n\n\n\n\n<h2>\n  \n  \n  Let's Setup\n</h2>\n\n<h3>\n  \n  \n  Prerequisites\n</h3>\n\n<p>Before running this implementation, ensure you have:</p>\n\n<p><strong>1. Python Environment</strong></p>\n\n<ul>\n<li>Python 3.8 or higher</li>\n<li>pip package manager</li>\n<li>Jupyter Notebook or JupyterLab (recommended for interactive development)</li>\n</ul>\n\n<p><strong>2. API Access</strong></p>\n\n<ul>\n<li>\n<p><strong>Tavily API Key</strong>: </p>\n\n<ul>\n<li>Sign up at <a href=\"https://tavily.com\" rel=\"noopener noreferrer\">https://tavily.com</a>\n</li>\n<li>Free tier available for testing</li>\n<li>Required for web search functionality</li>\n</ul>\n\n\n</li>\n\n<li>\n\n<p><strong>LLM Provider API Key</strong> (choose one):</p>\n\n<ul>\n<li>\n<strong>OpenAI</strong>: Get key from <a href=\"https://platform.openai.com\" rel=\"noopener noreferrer\">https://platform.openai.com</a>\n</li>\n<li>\n<strong>Google AI</strong>: Get key from Google AI Studio</li>\n<li>\n<strong>Anthropic</strong>: Get key from <a href=\"https://console.anthropic.com\" rel=\"noopener noreferrer\">https://console.anthropic.com</a>\n</li>\n<li>Note: DeepAgents defaults to Claude Sonnet 4.5 if no model specified</li>\n</ul>\n\n\n</li>\n\n</ul>\n\n<p><strong>3. Development Environment</strong></p>\n\n<ul>\n<li>Code editor (VS Code, PyCharm, or similar)</li>\n<li>Terminal access for pip installations</li>\n<li>Stable internet connection for API calls</li>\n</ul>\n\n<h3>\n  \n  \n  Installation Steps\n</h3>\n\n<p><strong>Step 1: Set Up Virtual Environment</strong> (Recommended)<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Create a virtual environment</span>\npython <span class=\"nt\">-m</span> venv deepagents-env\n\n<span class=\"c\"># Activate it (Windows)</span>\ndeepagents-env<span class=\"se\">\\S</span>cripts<span class=\"se\">\\a</span>ctivate\n\n<span class=\"c\"># Activate it (Mac/Linux)</span>\n<span class=\"nb\">source </span>deepagents-env/bin/activate\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Step 2: Install Core Dependencies</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>pip <span class=\"nb\">install </span>deepagents tavily-python langchain-google-genai langchain-openai\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Step 3: Verify Installation</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Test imports\n</span><span class=\"kn\">import</span> <span class=\"n\">deepagents</span>\n<span class=\"kn\">from</span> <span class=\"n\">tavily</span> <span class=\"kn\">import</span> <span class=\"n\">TavilyClient</span>\n<span class=\"kn\">from</span> <span class=\"n\">langchain.chat_models</span> <span class=\"kn\">import</span> <span class=\"n\">init_chat_model</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">✅ All dependencies installed successfully</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Step 4: Configure Environment Variables</strong></p>\n\n<p>Create a <code>.env</code> file in your project directory:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nv\">TAVILY_API_KEY</span><span class=\"o\">=</span>your_tavily_key_here\n<span class=\"nv\">OPENAI_API_KEY</span><span class=\"o\">=</span>your_openai_key_here\n<span class=\"c\"># GOOGLE_API_KEY=your_google_key_here  # If using Gemini</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Or set them programmatically:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">from</span> <span class=\"n\">getpass</span> <span class=\"kn\">import</span> <span class=\"n\">getpass</span>\n\n<span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">TAVILY_API_KEY</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">getpass</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Enter Tavily API Key: </span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">OPENAI_API_KEY</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">getpass</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Enter OpenAI API Key: </span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Step 5: Test Your Setup</strong></p>\n\n<p>Run this quick test to verify everything works:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">tavily</span> <span class=\"kn\">import</span> <span class=\"n\">TavilyClient</span>\n<span class=\"kn\">from</span> <span class=\"n\">langchain.chat_models</span> <span class=\"kn\">import</span> <span class=\"n\">init_chat_model</span>\n<span class=\"kn\">from</span> <span class=\"n\">deepagents</span> <span class=\"kn\">import</span> <span class=\"n\">create_deep_agent</span>\n\n<span class=\"c1\"># Test Tavily connection\n</span><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"nc\">TavilyClient</span><span class=\"p\">()</span>\n<span class=\"n\">test_search</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"nf\">search</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">test query</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">max_results</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">✅ Tavily search working</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Test model initialization\n</span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"nf\">init_chat_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">openai:gpt-4o</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">✅ LLM connection working</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Test DeepAgents\n</span><span class=\"n\">simple_agent</span> <span class=\"o\">=</span> <span class=\"nf\">create_deep_agent</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">tools</span><span class=\"o\">=</span><span class=\"p\">[])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">✅ DeepAgents framework working</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"s\">🎉 Setup complete! You</span><span class=\"sh\">'</span><span class=\"s\">re ready to build deep agents.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Project Structure\n</h3>\n\n<p>Organize your project like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>deepagents-project/\n│\n├── deepagents_research.ipynb    # Main notebook (from GitHub)\n├── .env                          # Your API keys (DO NOT commit to git)\n├── .gitignore                    # Ignore .env and other sensitive files\n├── requirements.txt              # Dependency list\n└── README.md                     # Project documentation\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Common Setup Issues and Solutions\n</h3>\n\n<p><strong>Issue</strong>: \"ModuleNotFoundError: No module named 'deepagents'\"</p>\n\n<ul>\n<li>\n<strong>Solution</strong>: Make sure you activated your virtual environment before installing</li>\n</ul>\n\n<p><strong>Issue</strong>: \"Invalid API key\" errors</p>\n\n<ul>\n<li>\n<strong>Solution</strong>: Double-check your API keys, ensure no extra spaces, verify they're active</li>\n</ul>\n\n<p><strong>Issue</strong>: \"Rate limit exceeded\" from Tavily or OpenAI</p>\n\n<ul>\n<li>\n<strong>Solution</strong>: Check your API usage limits, consider upgrading your plan, or add rate limiting</li>\n</ul>\n\n<p><strong>Issue</strong>: File permission errors</p>\n\n<ul>\n<li>\n<strong>Solution</strong>: Ensure you have write permissions in your working directory</li>\n</ul>\n\n<h3>\n  \n  \n  Quick Start Checklist\n</h3>\n\n<ul>\n<li>[ ] Python 3.8+ installed</li>\n<li>[ ] Virtual environment created and activated</li>\n<li>[ ] Dependencies installed (<code>pip install deepagents tavily-python langchain-google-genai langchain-openai</code>)</li>\n<li>[ ] Tavily API key obtained and configured</li>\n<li>[ ] LLM provider API key obtained and configured</li>\n<li>[ ] Test imports successful</li>\n<li>[ ] Tavily search test successful</li>\n<li>[ ] Model initialization test successful</li>\n<li>[ ] Ready to run the full implementation</li>\n</ul>\n\n<h3>\n  \n  \n  Next Steps\n</h3>\n\n<p>Once your setup is complete, you can:</p>\n\n<ol>\n<li>Download the complete code from the GitHub repository</li>\n<li>Run through the implementation step by step</li>\n<li>Experiment with different research queries</li>\n<li>Modify sub-agent prompts for different domains</li>\n<li>Add additional sub-agents for specialized tasks</li>\n</ol>\n\n<h2>\n  \n  \n  6. Integrate with your own applications\n</h2>\n\n<h2>\n  \n  \n  Let's Run\n</h2>\n\n<h3>\n  \n  \n  Running the Complete System\n</h3>\n\n<p>Now that everything is set up, let's execute the full policy research workflow.</p>\n\n<p><strong>Step 1: Start Jupyter Notebook</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>jupyter notebook\n</code></pre>\n\n</div>\n\n\n\n<p>Navigate to your <code>deepagents_research.ipynb</code> file and open it.</p>\n\n<p><strong>Step 2: Run Initialization Cells</strong></p>\n\n<p>Execute cells in order to:</p>\n\n<ol>\n<li>Import dependencies</li>\n<li>Configure API keys</li>\n<li>Define the search tool</li>\n<li>Create sub-agent configurations</li>\n<li>Set up the main agent prompt</li>\n<li>Initialize the deep agent</li>\n</ol>\n\n<p><strong>Step 3: Execute a Research Query</strong></p>\n\n<p>Run the invocation cell:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">What are the latest updates on the EU AI Act and its global impact?</span><span class=\"sh\">\"</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"nf\">invoke</span><span class=\"p\">({</span><span class=\"sh\">\"</span><span class=\"s\">messages</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">query</span><span class=\"p\">}]})</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>What You'll See During Execution</strong>:</p>\n\n<p>The agent will output its thought process and actions:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>💭 Thought: I need to research the EU AI Act updates systematically.\n\n🔧 Action: write_file\n   Path: question.txt\n   Content: What are the latest updates on the EU AI Act...\n\n✅ Observation: File created successfully\n\n💭 Thought: Now I'll delegate the research to my specialized sub-agent.\n\n🔧 Action: task\n   Agent: policy-research-agent\n   Instruction: Research latest EU AI Act updates and global impact\n\n   [Sub-agent starts executing...]\n\n   🔍 Searching: \"EU AI Act 2025 updates\"\n   🔍 Searching: \"EU AI Act global impact\"\n   🔍 Searching: \"AI regulations worldwide comparison\"\n\n   ✅ Sub-agent complete: [Returns comprehensive research findings]\n\n💭 Thought: I have the research. Now I'll structure it into a report.\n\n🔧 Action: write_file\n   Path: final_report.md\n   Content: [Structured Markdown report with citations]\n\n✅ Observation: Report written\n\n💭 Thought: Let me get editorial feedback to ensure quality.\n\n🔧 Action: task\n   Agent: policy-critique-agent\n   Instruction: Review the draft report\n\n   [Critique sub-agent executes...]\n\n   ✅ Sub-agent complete: [Returns constructive feedback]\n\n💭 Thought: Based on the feedback, I'll make final revisions.\n\n🔧 Action: edit_file\n   Path: final_report.md\n   Edits: [Improvements based on critique]\n\n✅ Final report complete!\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Step 4: View the Results</strong></p>\n\n<p>Access the final report:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Option 1: From the result object\n</span><span class=\"n\">final_message</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">messages</span><span class=\"sh\">'</span><span class=\"p\">][</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"sh\">'</span><span class=\"s\">content</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">final_message</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Option 2: Read from file system\n</span><span class=\"n\">report</span> <span class=\"o\">=</span> <span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"nf\">read_file</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">final_report.md</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">report</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Option 3: View all generated files\n</span><span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"nf\">list_files</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Files created:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">files</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Example Output Structure</strong>:</p>\n\n<p>The final report will look something like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight markdown\"><code><span class=\"gh\"># Latest Updates on the EU AI Act and Global Impact</span>\n\n<span class=\"gu\">## Executive Summary</span>\n\nThe EU AI Act, formally adopted in [date], represents the world's first \ncomprehensive regulatory framework for artificial intelligence...\n\n<span class=\"gu\">## Key Updates</span>\n\n<span class=\"gu\">### Regulatory Timeline</span>\n<span class=\"p\">-</span> Final text published: [date]\n<span class=\"p\">-</span> Implementation begins: [date]\n<span class=\"p\">-</span> Full enforcement: [date]\n\n<span class=\"gu\">### Core Provisions</span>\n<span class=\"p\">-</span> Risk-based classification system\n<span class=\"p\">-</span> Prohibited AI practices\n<span class=\"p\">-</span> High-risk AI requirements\n<span class=\"p\">-</span> Transparency obligations\n\n<span class=\"gu\">## Global Impact</span>\n\n<span class=\"gu\">### Regional Responses</span>\n\n<span class=\"gs\">**United States**</span>: The U.S. has responded with executive orders...\n\n<span class=\"gs\">**China**</span>: China's AI regulations focus on...\n\n<span class=\"gs\">**United Kingdom**</span>: The UK has taken a different approach...\n\n<span class=\"gu\">### International Standards</span>\n\nThe EU AI Act is influencing global AI governance through...\n\n<span class=\"gu\">## Industry Implications</span>\n\nOrganizations worldwide are adapting to these regulations by...\n\n<span class=\"gu\">## Sources</span>\n<span class=\"p\">\n-</span> <span class=\"p\">[</span><span class=\"nv\">EU AI Act Official Text</span><span class=\"p\">](</span><span class=\"sx\">https://example.com</span><span class=\"p\">)</span>\n<span class=\"p\">-</span> <span class=\"p\">[</span><span class=\"nv\">Global AI Policy Tracker</span><span class=\"p\">](</span><span class=\"sx\">https://example.com</span><span class=\"p\">)</span>\n<span class=\"p\">-</span> <span class=\"p\">[</span><span class=\"nv\">Industry Analysis Report</span><span class=\"p\">](</span><span class=\"sx\">https://example.com</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Step 5: Try Different Queries</strong></p>\n\n<p>Experiment with various research questions:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Example 1: Different topic\n</span><span class=\"n\">query1</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">How are different countries regulating AI in healthcare?</span><span class=\"sh\">\"</span>\n<span class=\"n\">result1</span> <span class=\"o\">=</span> <span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"nf\">invoke</span><span class=\"p\">({</span><span class=\"sh\">\"</span><span class=\"s\">messages</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">query1</span><span class=\"p\">}]})</span>\n\n<span class=\"c1\"># Example 2: Specific comparison\n</span><span class=\"n\">query2</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Compare AI ethics frameworks between US, EU, and China</span><span class=\"sh\">\"</span>\n<span class=\"n\">result2</span> <span class=\"o\">=</span> <span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"nf\">invoke</span><span class=\"p\">({</span><span class=\"sh\">\"</span><span class=\"s\">messages</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">query2</span><span class=\"p\">}]})</span>\n\n<span class=\"c1\"># Example 3: Narrow focus\n</span><span class=\"n\">query3</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">What are the key compliance requirements for AI systems under the EU AI Act?</span><span class=\"sh\">\"</span>\n<span class=\"n\">result3</span> <span class=\"o\">=</span> <span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"nf\">invoke</span><span class=\"p\">({</span><span class=\"sh\">\"</span><span class=\"s\">messages</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">query3</span><span class=\"p\">}]})</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Step 6: Inspect the Workflow</strong></p>\n\n<p>View the complete execution trace:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># See all steps taken\n</span><span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">messages</span><span class=\"sh\">'</span><span class=\"p\">]:</span>\n    <span class=\"n\">role</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">role</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">system</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">content</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">''</span><span class=\"p\">)[:</span><span class=\"mi\">200</span><span class=\"p\">]</span>  <span class=\"c1\"># First 200 chars\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"s\">[</span><span class=\"si\">{</span><span class=\"n\">role</span><span class=\"si\">}</span><span class=\"s\">]: </span><span class=\"si\">{</span><span class=\"n\">content</span><span class=\"si\">}</span><span class=\"s\">...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Count tool calls\n</span><span class=\"n\">tool_calls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">msg</span> <span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">messages</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">tool_calls</span><span class=\"sh\">'</span><span class=\"p\">)]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Total tool calls: </span><span class=\"si\">{</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">tool_calls</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># See sub-agent invocations\n</span><span class=\"n\">sub_agent_calls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">call</span> <span class=\"k\">for</span> <span class=\"n\">call</span> <span class=\"ow\">in</span> <span class=\"n\">tool_calls</span> <span class=\"k\">if</span> <span class=\"sh\">'</span><span class=\"s\">task</span><span class=\"sh\">'</span> <span class=\"ow\">in</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"p\">)]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Sub-agent invocations: </span><span class=\"si\">{</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">sub_agent_calls</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Performance Metrics</strong>:</p>\n\n<p>Monitor agent performance:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">time</span><span class=\"p\">()</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"nf\">invoke</span><span class=\"p\">({</span><span class=\"sh\">\"</span><span class=\"s\">messages</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">query</span><span class=\"p\">}]})</span>\n<span class=\"n\">end_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">time</span><span class=\"p\">()</span>\n\n<span class=\"n\">execution_time</span> <span class=\"o\">=</span> <span class=\"n\">end_time</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">⏱️  Total execution time: </span><span class=\"si\">{</span><span class=\"n\">execution_time</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\"> seconds</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Token usage (if available from your LLM provider)\n# This varies by provider\n</span><span class=\"k\">if</span> <span class=\"sh\">'</span><span class=\"s\">usage</span><span class=\"sh\">'</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">🎫 Tokens used: </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">usage</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Debugging Tips</strong>:</p>\n\n<p>If something goes wrong:</p>\n\n<ol>\n<li>\n<strong>Check API Keys</strong>: Verify all keys are set correctly\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Tavily:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">✅</span><span class=\"sh\">\"</span> <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getenv</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">TAVILY_API_KEY</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"sh\">\"</span><span class=\"s\">❌</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">OpenAI:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">✅</span><span class=\"sh\">\"</span> <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getenv</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">OPENAI_API_KEY</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"sh\">\"</span><span class=\"s\">❌</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li>\n<strong>Test Components Individually</strong>:\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Test search function\n</span><span class=\"n\">test_result</span> <span class=\"o\">=</span> <span class=\"nf\">internet_search</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">test query</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">max_results</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Search working:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">✅</span><span class=\"sh\">\"</span> <span class=\"k\">if</span> <span class=\"n\">test_result</span> <span class=\"k\">else</span> <span class=\"sh\">\"</span><span class=\"s\">❌</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Test model\n</span><span class=\"n\">test_response</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">invoke</span><span class=\"p\">([{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Hi</span><span class=\"sh\">\"</span><span class=\"p\">}])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Model working:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">✅</span><span class=\"sh\">\"</span> <span class=\"k\">if</span> <span class=\"n\">test_response</span> <span class=\"k\">else</span> <span class=\"sh\">\"</span><span class=\"s\">❌</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li>\n<strong>Enable Verbose Logging</strong>:\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">logging</span>\n<span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"nf\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li>\n<strong>Check File System</strong>:\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># List all files created by agent\n</span><span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"nf\">list_files</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Files created:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">files</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Read any file to debug\n</span><span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"nf\">read_file</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">question.txt</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Question file:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Expected Behavior</strong>:</p>\n\n<ul>\n<li>\n<strong>Normal execution</strong>: 30-90 seconds depending on query complexity</li>\n<li>\n<strong>Sub-agent calls</strong>: Typically 2 (research + critique)</li>\n<li>\n<strong>File operations</strong>: 3-5 (write question, write report, edit report)</li>\n<li>\n<strong>Search queries</strong>: 3-7 (depending on research depth)</li>\n</ul>\n\n<p><strong>Success Indicators</strong>:</p>\n\n<p>✅ Agent completes all workflow steps<br>\n✅ Final report is well-structured Markdown<br>\n✅ Sources are properly cited<br>\n✅ Report addresses the original question<br>\n✅ Professional tone maintained throughout<br>\n✅ No errors or crashes</p>\n\n<p><strong>Next Experiments</strong>:</p>\n\n<p>Once you have it working:</p>\n\n<ol>\n<li>Modify sub-agent prompts for different domains (technology, finance, healthcare)</li>\n<li>Add additional sub-agents (fact-checker, summarizer, translator)</li>\n<li>Adjust search parameters (more results, different topics)</li>\n<li>Try different LLM models (compare GPT-4 vs Gemini vs Claude)</li>\n<li>Integrate with your own data sources or APIs</li>\n</ol>\n\n\n\n\n<h2>\n  \n  \n  Closing Thoughts\n</h2>\n\n<p>We've just built something remarkable: an AI agent that doesn't just respond to queries but thinks strategically, delegates to specialists, manages complex state, and iterates toward high-quality outputs. This isn't the future of AI agents—it's what's possible right now with LangChain's DeepAgents.</p>\n\n<h3>\n  \n  \n  What We Accomplished\n</h3>\n\n<p>In this hands-on guide, you learned how to:</p>\n\n<ul>\n<li>Transform a basic tool-calling agent into a sophisticated planning system</li>\n<li>Leverage file-based context management to handle tasks of any complexity</li>\n<li>Design and coordinate specialized sub-agents for focused execution</li>\n<li>Implement iterative quality control through automated review workflows</li>\n<li>Build production-ready research systems that rival human analysis</li>\n</ul>\n\n<p>The policy research agent we built demonstrates patterns that extend far beyond this specific use case. Whether you're building code generation systems, content creation pipelines, data analysis workflows, or customer service automation, the principles remain the same: plan strategically, delegate intelligently, manage state persistently, and iterate toward quality.</p>\n\n<h3>\n  \n  \n  The Deeper Implications\n</h3>\n\n<p>The evolution from shallow to deep agents represents a fundamental shift in how we build AI systems. We're moving from tools that execute individual tasks to systems that orchestrate complex workflows. The key insight is that intelligence emerges not just from powerful models, but from thoughtful architecture—planning layers, memory systems, delegation patterns, and quality controls.</p>\n\n<p>DeepAgents embodies this philosophy. By providing built-in planning tools, file system access, sub-agent creation, and long-term memory, it gives developers the building blocks to create genuinely sophisticated AI systems without reinventing infrastructure.</p>\n\n<h3>\n  \n  \n  What's Next for AI Agents\n</h3>\n\n<p>The trajectory is clear: agents are becoming more capable, more modular, and more specialized. We're heading toward ecosystems where:</p>\n\n<ul>\n<li>\n<strong>Agent swarms</strong> collaborate on complex problems, each bringing specialized expertise</li>\n<li>\n<strong>Persistent memory</strong> allows agents to maintain context across days, weeks, or months of work</li>\n<li>\n<strong>Self-improvement loops</strong> enable agents to learn from feedback and enhance their own prompts</li>\n<li>\n<strong>Multi-modal capabilities</strong> combine text, code, images, and data seamlessly</li>\n<li>\n<strong>Human-AI collaboration</strong> reaches new levels as agents become true thought partners</li>\n</ul>\n\n<p>The foundation you've learned here—planning, delegation, state management, quality control—will remain relevant as these capabilities evolve.</p>\n\n<h3>\n  \n  \n  Practical Next Steps\n</h3>\n\n<p>Where should you go from here?</p>\n\n<p><strong>Immediate Experiments</strong>:</p>\n\n<ol>\n<li>Adapt this architecture to your own domain (swap policy research for tech analysis, financial reports, or medical literature reviews)</li>\n<li>Add more specialized sub-agents (fact-checkers, translators, data analyzers)</li>\n<li>Integrate with your own data sources, databases, or APIs</li>\n<li>Experiment with different LLM models to find the best performance/cost balance</li>\n<li>Build quality metrics to measure agent performance over time</li>\n</ol>\n\n<p><strong>Production Considerations</strong>:</p>\n\n<ul>\n<li>Implement proper error handling and retry logic</li>\n<li>Add monitoring and logging for production deployments</li>\n<li>Build evaluation frameworks to assess agent output quality</li>\n<li>Consider cost optimization strategies (caching, smaller models for sub-agents)</li>\n<li>Design human-in-the-loop workflows for critical decisions</li>\n</ul>\n\n<p><strong>Learning More</strong>:</p>\n\n<ul>\n<li>Explore the DeepAgents GitHub repository for advanced examples</li>\n<li>Study the LangGraph documentation for state management patterns</li>\n<li>Join the LangChain community to learn from other practitioners</li>\n<li>Experiment with Claude Code and Deep Research to see these patterns at scale</li>\n</ul>\n\n<h3>\n  \n  \n  The Bigger Picture\n</h3>\n\n<p>What excites me most about this technology isn't just what it can do today, but what it enables tomorrow. As agents become more sophisticated, the barrier to building intelligent systems continues to fall. Complex workflows that once required teams of specialists can now be orchestrated by thoughtfully designed agent systems.</p>\n\n<p>This democratization of AI capabilities means:</p>\n\n<ul>\n<li>Small teams can build products that previously required large organizations</li>\n<li>Individuals can leverage AI to amplify their expertise and productivity</li>\n<li>New categories of applications become possible</li>\n<li>The focus shifts from AI implementation to AI orchestration</li>\n</ul>\n\n<p>We're entering an era where the key skill isn't writing every algorithm from scratch, but knowing how to compose powerful systems from intelligent components.</p>\n\n<h3>\n  \n  \n  Final Thoughts\n</h3>\n\n<p>The agent you built today is more than a research tool—it's a pattern for building intelligent systems. The planning layer, the delegation model, the context management, the quality control—these aren't specific to policy research. They're fundamental architectural principles for any complex AI workflow.</p>\n\n<p>As you apply these patterns to your own projects, remember: the goal isn't to replace human intelligence, but to augment it. The best AI systems are those that handle complexity strategically, maintain context persistently, leverage specialization effectively, and iterate toward quality relentlessly.</p>\n\n<p>That's what DeepAgents enables. That's what you now know how to build.</p>\n\n<p>The future of AI isn't about smarter models alone—it's about smarter architectures. And you're now equipped to create them.</p>\n\n\n\n\n<p><strong>Want to go deeper?</strong></p>\n\n<ul>\n<li>Full code: <a href=\"https://github.com/Marktechpost/AI-Tutorial-Codes-Included/blob/main/AI%20Agents%20Codes/Langchain_Deepagents.ipynb\" rel=\"noopener noreferrer\">https://github.com/Marktechpost/AI-Tutorial-Codes-Included/blob/main/AI%20Agents%20Codes/Langchain_Deepagents.ipynb</a>\n</li>\n<li>DeepAgents documentation: <a href=\"https://github.com/langchain-ai/deepagents\" rel=\"noopener noreferrer\">https://github.com/langchain-ai/deepagents</a>\n</li>\n<li>LangChain community: <a href=\"https://discord.gg/langchain\" rel=\"noopener noreferrer\">https://discord.gg/langchain</a>\n</li>\n</ul>\n\n<p><strong>Share your builds</strong>: I'd love to see what you create with DeepAgents. Tag your projects on social media or share them in the LangChain community.</p>\n\n<p>Now go build something remarkable. 🚀</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How to Convert Static PDF to Dynamic HTML with Python","url":"https://dev.to/allen_yang_f905170c5a197b/how-to-convert-static-pdf-to-dynamic-html-with-python-55i2","date":1761707937,"author":"Allen Yang","guid":319616,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fd1s24hi3arpgo0wfb8qf.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fd1s24hi3arpgo0wfb8qf.jpg\" alt=\"Convert PDF to HTML with Python\" width=\"800\" height=\"449\"></a></p>\n\n<p>In the digital age, content is king, but its presentation and accessibility are paramount. While PDF (Portable Document Format) excels at preserving document fidelity across various platforms, its static nature often presents challenges for web integration, dynamic content display, and programmatic data extraction. Imagine needing to publish a report on a website, extract specific data for analysis, or simply make a document more accessible on mobile devices. Directly embedding a PDF can be cumbersome, impacting user experience and search engine optimization.</p>\n\n<p>This is where the power of programmatic document conversion shines. Python, with its rich ecosystem of libraries, offers an elegant solution to transform these static PDF documents into flexible, web-friendly HTML files. This tutorial will guide you through the process of converting PDFs to HTML using the <code>spire.pdf</code> library for Python. By the end, you'll understand not only <em>how</em> to perform this conversion but also <em>why</em> it's a crucial skill for modern developers and content managers, unlocking new possibilities for your document workflows.</p>\n\n<h2>\n  \n  \n  Understanding the Need for PDF to HTML Conversion\n</h2>\n\n<p>The transition from PDF to HTML is more than just a format change; it's about enhancing content utility and reach. PDFs, by design, are print-oriented and fixed-layout documents. While excellent for archival and ensuring consistent appearance, they fall short in several areas crucial for contemporary digital environments:</p>\n\n<ul>\n<li>  <strong>Improved Accessibility:</strong> HTML is inherently more accessible than PDF. Screen readers and assistive technologies can parse HTML structure more effectively, making content available to users with visual impairments or other disabilities.</li>\n<li>  <strong>Easier Web Integration:</strong> HTML is the native language of the web. Converting PDFs to HTML allows for seamless embedding into websites, blogs, and web applications without requiring special viewers or plugins.</li>\n<li>  <strong>Search Engine Optimization (SEO):</strong> Search engines generally index HTML content more thoroughly than PDF content. Converting to HTML can significantly improve the discoverability and ranking of your document's content.</li>\n<li>  <strong>Content Reuse and Extraction:</strong> Once in HTML, text and images can be easily copied, pasted, and repurposed. This facilitates data extraction for analytics, content syndication, or integration into other applications.</li>\n<li>  <strong>Responsive Design:</strong> HTML content can be designed to be responsive, adapting its layout elegantly to different screen sizes, from large desktop monitors to small mobile phones, providing a superior user experience.</li>\n</ul>\n\n<p>While various methods exist for this conversion, including online tools or complex parsing algorithms, a dedicated library like <code>spire.pdf</code> streamlines the process, handling intricate details of layout, fonts, and images, often providing a more accurate and robust conversion than manual approaches.</p>\n\n<h2>\n  \n  \n  Introducing <code>spire.pdf</code> for Python and Setup\n</h2>\n\n<p><code>spire.pdf</code> is a robust and comprehensive library designed for creating, reading, writing, and manipulating PDF documents in Python. It offers a wide array of functionalities, including but not limited to, text extraction, image handling, form filling, and, critically, format conversion. Its strength lies in its ability to maintain the visual integrity of the original PDF during conversion, which is paramount when transforming to HTML.</p>\n\n<p>To begin using <code>spire.pdf</code>, you first need to install it. The installation process is straightforward using Python's package installer, <code>pip</code>.</p>\n\n<ol>\n<li>\n<p><strong>Install <code>spire.pdf</code>:</strong><br>\nOpen your terminal or command prompt and run the following command:<br>\n</p>\n<pre class=\"highlight shell\"><code>pip <span class=\"nb\">install </span>spire.pdf\n</code></pre>\n\n</li>\n<li>\n<p><strong>Verify Installation (Optional, but Recommended):</strong><br>\nYou can quickly check if the library is installed correctly by running a simple \"Hello World\" style script. Create a Python file (e.g., <code>check_spire.py</code>) and add the following code:<br>\n</p>\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">spire.pdf.common</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"n\">spire.pdf</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Attempt to create a simple PDF document\n</span>    <span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"nc\">PdfDocument</span><span class=\"p\">()</span>\n    <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"n\">Pages</span><span class=\"p\">.</span><span class=\"nc\">Add</span><span class=\"p\">()</span>\n    <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"nc\">SaveToFile</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">test.pdf</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"nc\">Close</span><span class=\"p\">()</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">spire.pdf installed successfully and basic functionality works.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Error during spire.pdf test: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n\n<p>Run this script: <code>python check_spire.py</code>. If you see the success message and a <code>test.pdf</code> file is created, you're ready to proceed.</p>\n</li>\n</ol>\n\n<h2>\n  \n  \n  Step-by-Step PDF to HTML Conversion\n</h2>\n\n<p>Now, let's dive into the core process of converting a PDF document to an HTML file using <code>spire.pdf</code>. The library provides a highly intuitive method for this task.</p>\n\n<p>We will cover the basic conversion and then explore how to handle specific pages or stream output.</p>\n\n<p><strong>1. Basic PDF to HTML Conversion</strong></p>\n\n<p>This example demonstrates the simplest form of conversion, taking an entire PDF file and converting it into a single HTML file.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">spire.pdf.common</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"n\">spire.pdf</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">convert_pdf_to_html</span><span class=\"p\">(</span><span class=\"n\">input_pdf_path</span><span class=\"p\">,</span> <span class=\"n\">output_html_path</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    Converts an entire PDF document to an HTML file.\n\n    Args:\n        input_pdf_path (str): The path to the input PDF file.\n        output_html_path (str): The path where the output HTML file will be saved.\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Converting </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">input_pdf_path</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"s\"> to </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">output_html_path</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"s\">...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Create a PDF document object\n</span>    <span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"nc\">PdfDocument</span><span class=\"p\">()</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Load the PDF file from the specified path\n</span>        <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"nc\">LoadFromFile</span><span class=\"p\">(</span><span class=\"n\">input_pdf_path</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Convert the loaded PDF document to HTML format and save it\n</span>        <span class=\"c1\"># FileFormat.HTML is the enumeration specifying the output format\n</span>        <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"nc\">SaveToFile</span><span class=\"p\">(</span><span class=\"n\">output_html_path</span><span class=\"p\">,</span> <span class=\"n\">FileFormat</span><span class=\"p\">.</span><span class=\"n\">HTML</span><span class=\"p\">)</span>\n\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Conversion successful!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">An error occurred during conversion: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Always close the document to release resources\n</span>        <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"nc\">Close</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># --- Usage Example ---\n# Make sure you have a sample.pdf in the same directory or provide its full path\n</span><span class=\"n\">input_file</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">sample.pdf</span><span class=\"sh\">\"</span> \n<span class=\"n\">output_file</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">output.html</span><span class=\"sh\">\"</span>\n\n<span class=\"nf\">convert_pdf_to_html</span><span class=\"p\">(</span><span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"n\">output_file</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Explanation of the Code:</strong></p>\n\n<ul>\n<li>  <code>from spire.pdf.common import *</code> and <code>from spire.pdf import *</code>: These lines import all necessary classes and enumerations from the <code>spire.pdf</code> library.</li>\n<li>  <code>doc = PdfDocument()</code>: An instance of <code>PdfDocument</code> is created. This object represents the PDF document we will be working with.</li>\n<li>  <code>doc.LoadFromFile(input_pdf_path)</code>: This method loads the content of the specified PDF file into the <code>doc</code> object.</li>\n<li>  <code>doc.SaveToFile(output_html_path, FileFormat.HTML)</code>: This is the core conversion step. It takes the loaded PDF content and saves it to the specified <code>output_html_path</code> in <code>FileFormat.HTML</code>.</li>\n<li>  <code>doc.Close()</code>: It's crucial to close the document after operations are complete to release any system resources held by the library.</li>\n</ul>\n\n<p><strong>2. Converting a PDF to HTML Stream</strong></p>\n\n<p>Sometimes, instead of saving directly to a file, you might need the HTML content as a stream (e.g., for in-memory processing or sending directly over a network). <code>spire.pdf</code> also supports this.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">spire.pdf.common</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"n\">spire.pdf</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"n\">io</span> <span class=\"kn\">import</span> <span class=\"n\">BytesIO</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">convert_pdf_to_html_stream</span><span class=\"p\">(</span><span class=\"n\">input_pdf_path</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    Converts a PDF document to an HTML stream and returns it.\n\n    Args:\n        input_pdf_path (str): The path to the input PDF file.\n\n    Returns:\n        BytesIO: A BytesIO object containing the HTML content.\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Converting </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">input_pdf_path</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"s\"> to HTML stream...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"nc\">PdfDocument</span><span class=\"p\">()</span>\n    <span class=\"n\">html_stream</span> <span class=\"o\">=</span> <span class=\"nc\">BytesIO</span><span class=\"p\">()</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"nc\">LoadFromFile</span><span class=\"p\">(</span><span class=\"n\">input_pdf_path</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Save to a stream instead of a file\n</span>        <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"nc\">SaveToStream</span><span class=\"p\">(</span><span class=\"n\">html_stream</span><span class=\"p\">,</span> <span class=\"n\">FileFormat</span><span class=\"p\">.</span><span class=\"n\">HTML</span><span class=\"p\">)</span>\n\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Stream conversion successful!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Reset stream position to the beginning for reading\n</span>        <span class=\"n\">html_stream</span><span class=\"p\">.</span><span class=\"nf\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> \n        <span class=\"k\">return</span> <span class=\"n\">html_stream</span>\n\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">An error occurred during stream conversion: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"nc\">Close</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># --- Usage Example ---\n</span><span class=\"n\">input_file_stream</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">sample.pdf</span><span class=\"sh\">\"</span>\n\n<span class=\"n\">html_content_stream</span> <span class=\"o\">=</span> <span class=\"nf\">convert_pdf_to_html_stream</span><span class=\"p\">(</span><span class=\"n\">input_file_stream</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">html_content_stream</span><span class=\"p\">:</span>\n    <span class=\"c1\"># You can now read from html_content_stream, e.g., to save it:\n</span>    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">output_stream.html</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">wb</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">html_content_stream</span><span class=\"p\">.</span><span class=\"nf\">read</span><span class=\"p\">())</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">HTML content from stream saved to </span><span class=\"sh\">'</span><span class=\"s\">output_stream.html</span><span class=\"sh\">'\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Explanation of the Code:</strong></p>\n\n<ul>\n<li>  <code>from io import BytesIO</code>: Imports the <code>BytesIO</code> class, which allows us to treat a byte string as a file.</li>\n<li>  <code>html_stream = BytesIO()</code>: An in-memory binary stream is created.</li>\n<li>  <code>doc.SaveToStream(html_stream, FileFormat.HTML)</code>: This method saves the converted HTML content directly into the <code>html_stream</code> object.</li>\n<li>  <code>html_stream.seek(0)</code>: After writing to the stream, its internal pointer is at the end. To read its content, we need to move the pointer back to the beginning.</li>\n</ul>\n\n<h2>\n  \n  \n  Advanced Considerations and Best Practices\n</h2>\n\n<p>While <code>spire.pdf</code> handles much of the complexity, converting PDFs to HTML is not always a perfect one-to-one mapping, especially with highly complex or graphically rich PDFs. Here are some considerations and best practices:</p>\n\n<ul>\n<li>  <strong>Layout Preservation:</strong> PDFs use absolute positioning, whereas HTML is flow-based. <code>spire.pdf</code> does an excellent job of trying to replicate the visual layout using CSS and HTML elements, but minor discrepancies, especially with overlapping elements or intricate tables, can occur.</li>\n<li>  <strong>Font Embedding:</strong> To ensure consistent rendering, <code>spire.pdf</code> will often embed fonts or use web-safe alternatives. This helps maintain the visual style but can slightly increase the HTML file size.</li>\n<li>  <strong>Image Quality:</strong> Images from the PDF are typically extracted and embedded (or linked) in the HTML. The quality of these images in the HTML will depend on their original resolution in the PDF. High-resolution images will result in larger HTML files.</li>\n<li>  <strong>CSS Styling:</strong> The generated HTML will contain inline CSS or style blocks to mimic the PDF's appearance. For further customization or integration into an existing website's theme, you might need to apply your own CSS after conversion.</li>\n<li>  <strong>Post-Conversion Cleanup:</strong> For large-scale or critical applications, consider a post-processing step. This could involve:\n\n<ul>\n<li>  <strong>HTML Validation:</strong> Running the generated HTML through a validator to ensure it's well-formed.</li>\n<li>  <strong>Semantic Enhancement:</strong> Adding more semantic HTML tags (e.g., <code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;nav&gt;</code>) if the automatic conversion is too generic.</li>\n<li>  <strong>Optimizing Images:</strong> Compressing extracted images or converting them to more web-friendly formats (e.g., WebP).</li>\n<li>  <strong>Removing Redundant CSS:</strong> Stripping out unused or overly specific inline styles if you plan to re-style the content.</li>\n</ul>\n\n\n</li>\n\n<li>  <strong>Error Handling:</strong> Always wrap your conversion logic in <code>try-except</code> blocks. PDFs can sometimes be corrupted or malformed, leading to exceptions during loading or conversion. Graceful error handling ensures your application doesn't crash.</li>\n\n</ul>\n\n<p>By understanding these nuances, you can better manage expectations and plan for any necessary post-conversion work to achieve the desired outcome for your web content.</p>\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>The ability to programmatically convert PDF documents to HTML is a powerful asset in any developer's toolkit. As we've seen, Python, coupled with the <code>spire.pdf</code> library, provides an efficient and reliable method for transforming static, print-oriented PDFs into dynamic, web-friendly HTML content. This conversion not only enhances accessibility and SEO but also unlocks new avenues for content reuse, responsive design, and seamless integration into modern web applications.</p>\n\n<p>Whether you're looking to publish archived reports online, extract data for analytical purposes, or simply improve the user experience of your digital documents, <code>spire.pdf</code> offers a robust solution. By following this tutorial, you've gained the practical knowledge to implement this crucial functionality, empowering you to bridge the gap between traditional document formats and the ever-evolving landscape of web content. Embrace the flexibility and explore the myriad possibilities that this conversion capability brings to your projects.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-28eb","date":1761703747,"author":"Vibe YouTube","guid":319599,"unread":true,"content":"<p>Discover three modern Python tricks you probably haven’t used: the new <code>match</code> statement for pattern matching, <code>dataclasses</code> to cut down on boilerplate, and enforcing clean APIs with positional-only and keyword-only function arguments. Each saves time and makes your code more readable and expressive.</p>\n\n<p>Plus, you’ll find a sweet 20% discount link for Brilliant Premium and a plug for Tim’s DevLaunch mentorship program if you’re looking for hands-on guidance beyond tutorials.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=e0FvoOtdAQc\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Circular Import Problem: Breaking Dependency Cycles","url":"https://dev.to/aaron_rose_0787cc8b4775a0/the-circular-import-problem-breaking-dependency-cycles-4i56","date":1761699359,"author":"Aaron Rose","guid":319527,"unread":true,"content":"<p>Timothy's library system had grown elegantly. The <code>Book</code> class needed to access database functions. The database module needed to import <code>Book</code> to save records. He added the imports, ran the code, and Python exploded with a cryptic error: \"ImportError: cannot import name 'Book' from partially initialized module.\"</p>\n\n<p>The circular dependency:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># library/models.py\n</span><span class=\"kn\">from</span> <span class=\"n\">library.database</span> <span class=\"kn\">import</span> <span class=\"n\">save_to_db</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">title</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"nf\">save_to_db</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># library/database.py\n</span><span class=\"kn\">from</span> <span class=\"n\">library.models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">save_to_db</span><span class=\"p\">(</span><span class=\"n\">book</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Saving </span><span class=\"si\">{</span><span class=\"n\">book</span><span class=\"p\">.</span><span class=\"n\">title</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># library/main.py\n</span><span class=\"kn\">from</span> <span class=\"n\">library.models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>\n\n<span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Dune</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">book</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">()</span>\n<span class=\"c1\"># ImportError: cannot import name 'Book' from partially initialized module 'library.models'\n</span></code></pre>\n\n</div>\n\n\n\n<p>The actual error traceback:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Running: python library/main.py\n</span>\n<span class=\"nc\">Traceback </span><span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"sh\">\"</span><span class=\"s\">/path/library/main.py</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"kn\">from</span> <span class=\"n\">library.models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>\n  <span class=\"n\">File</span> <span class=\"sh\">\"</span><span class=\"s\">/path/library/models.py</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"kn\">from</span> <span class=\"n\">library.database</span> <span class=\"kn\">import</span> <span class=\"n\">save_to_db</span>\n  <span class=\"n\">File</span> <span class=\"sh\">\"</span><span class=\"s\">/path/library/database.py</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"kn\">from</span> <span class=\"n\">library.models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>\n<span class=\"nb\">ImportError</span><span class=\"p\">:</span> <span class=\"n\">cannot</span> <span class=\"kn\">import</span> <span class=\"n\">name</span> <span class=\"sh\">'</span><span class=\"s\">Book</span><span class=\"sh\">'</span> <span class=\"k\">from</span> <span class=\"n\">partially</span> <span class=\"n\">initialized</span> <span class=\"n\">module</span> <span class=\"sh\">'</span><span class=\"s\">library.models</span><span class=\"sh\">'</span> \n<span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">likely</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"n\">circular</span> <span class=\"k\">import</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">py</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Key indicators of circular import:\n# 1. \"partially initialized module\" in error message\n# 2. \"(most likely due to a circular import)\" hint\n# 3. The SAME module appears TWICE in the traceback\n#    - Line 2: importing FROM library.models\n#    - Line 6: importing library.models again\n# 4. Traceback shows the cycle: main → models → database → models\n</span></code></pre>\n\n</div>\n\n\n\n<p>Margaret found him staring at the error. \"Your modules are chasing each other's tails,\" she observed. \"Come to the Circular Import Problem—where we'll learn to break the cycle.\"</p>\n\n<h2>\n  \n  \n  Understanding the Circular Import\n</h2>\n\n<p>She showed him what Python sees:</p>\n\n<p>The execution sequence:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># When you run: from library.models import Book\n</span>\n<span class=\"c1\"># Step 1: Python starts importing library.models\n#   - Creates empty module object for library.models\n#   - Starts executing models.py\n</span>\n<span class=\"c1\"># Step 2: models.py line 1 executes\n</span><span class=\"kn\">from</span> <span class=\"n\">library.database</span> <span class=\"kn\">import</span> <span class=\"n\">save_to_db</span>\n<span class=\"c1\">#   - Python starts importing library.database\n#   - Creates empty module object for library.database\n#   - Starts executing database.py\n</span>\n<span class=\"c1\"># Step 3: database.py line 1 executes\n</span><span class=\"kn\">from</span> <span class=\"n\">library.models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>\n<span class=\"c1\">#   - Python needs to import library.models\n#   - But library.models is ALREADY BEING IMPORTED!\n#   - It's not finished yet - Book doesn't exist yet\n#   - ImportError: cannot import name 'Book'\n</span>\n<span class=\"c1\"># The cycle:\n# models.py imports database.py\n# database.py imports models.py\n# Neither can finish!\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  What's in sys.modules During the Import?\n</h2>\n\n<p>Timothy asked how Python tracks this. Margaret showed him:</p>\n\n<p>The module registry state:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n\n<span class=\"c1\"># During the circular import, checking sys.modules:\n</span>\n<span class=\"c1\"># After Step 1 (models.py starts):\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">library.models</span><span class=\"sh\">'</span> <span class=\"ow\">in</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">modules</span><span class=\"p\">)</span>  <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">modules</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">library.models</span><span class=\"sh\">'</span><span class=\"p\">])</span>    <span class=\"c1\"># &lt;module 'library.models'&gt; (exists!)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">hasattr</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">modules</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">library.models</span><span class=\"sh\">'</span><span class=\"p\">],</span> <span class=\"sh\">'</span><span class=\"s\">Book</span><span class=\"sh\">'</span><span class=\"p\">))</span>  <span class=\"c1\"># False (not defined yet!)\n</span>\n<span class=\"c1\"># The module object exists in sys.modules immediately\n# But its contents (Book class) don't exist until execution finishes\n</span>\n<span class=\"c1\"># When database.py tries: from library.models import Book\n# Python finds library.models in sys.modules ✓\n# Python looks for 'Book' attribute in that module ✗\n# Book doesn't exist yet!\n# ImportError: cannot import name 'Book'\n</span>\n<span class=\"c1\"># This is why \"import library.models\" works:\n</span><span class=\"kn\">import</span> <span class=\"n\">library.models</span>  <span class=\"c1\"># Works - module object exists\n</span><span class=\"n\">library</span><span class=\"p\">.</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">Book</span>    <span class=\"c1\"># Fails - Book not defined yet\n</span>\n<span class=\"c1\"># But \"from library.models import Book\" fails:\n</span><span class=\"kn\">from</span> <span class=\"n\">library.models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>  <span class=\"c1\"># Fails - Book must exist NOW\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"Python imports modules only once,\" Margaret explained. \"When database.py tries to import from models.py, Python sees it's already importing models.py. It returns the partially initialized module—which doesn't have <code>Book</code> defined yet. The circular dependency breaks the import.\"</p>\n\n<h2>\n  \n  \n  Visualizing the Cycle\n</h2>\n\n<p>The import chain:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">py</span>\n  <span class=\"err\">└─</span><span class=\"o\">&gt;</span> <span class=\"n\">imports</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">py</span>\n        <span class=\"err\">└─</span><span class=\"o\">&gt;</span> <span class=\"n\">imports</span> <span class=\"n\">database</span><span class=\"p\">.</span><span class=\"n\">py</span>\n              <span class=\"err\">└─</span><span class=\"o\">&gt;</span> <span class=\"n\">imports</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"nf\">py </span><span class=\"p\">(</span><span class=\"n\">CYCLE</span><span class=\"err\">!</span><span class=\"p\">)</span>\n                    <span class=\"err\">└─</span><span class=\"o\">&gt;</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">py</span> <span class=\"ow\">is</span> <span class=\"n\">still</span> <span class=\"n\">initializing</span>\n                          <span class=\"err\">└─</span><span class=\"o\">&gt;</span> <span class=\"n\">Book</span> <span class=\"k\">class</span> <span class=\"nc\">not</span> <span class=\"n\">defined</span> <span class=\"n\">yet</span>\n                                <span class=\"err\">└─</span><span class=\"o\">&gt;</span> <span class=\"nb\">ImportError</span><span class=\"err\">!</span>\n\n<span class=\"c1\"># The problem: Neither module can finish\n# before the other starts needing it\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Solution 1: Restructure to Remove the Cycle\n</h2>\n\n<p>Timothy learned the cleanest solution: <strong>break the dependency</strong>.</p>\n\n<p>Extracting shared dependencies:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># BEFORE (circular):\n# models.py imports database.py\n# database.py imports models.py\n</span>\n<span class=\"c1\"># AFTER (no cycle):\n# Create a shared module that both can import\n</span>\n<span class=\"c1\"># library/models.py\n</span><span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">title</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"n\">library.database</span> <span class=\"kn\">import</span> <span class=\"n\">save_to_db</span>\n        <span class=\"nf\">save_to_db</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>  <span class=\"c1\"># Import happens inside method\n</span>\n<span class=\"c1\"># library/database.py\n# No longer imports Book!\n</span><span class=\"k\">def</span> <span class=\"nf\">save_to_db</span><span class=\"p\">(</span><span class=\"n\">book</span><span class=\"p\">):</span>  <span class=\"c1\"># Just accepts any object with .title\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Saving </span><span class=\"si\">{</span><span class=\"n\">book</span><span class=\"p\">.</span><span class=\"n\">title</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Now the cycle is broken:\n# models.py doesn't import database at module level\n# database.py doesn't import models at all\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"The database module doesn't actually need to know about <code>Book</code>,\" Margaret noted. \"It just needs an object with a <code>.title</code> attribute. By using duck typing and a tactical late import inside the method, we broke the cycle. This combines restructuring with a minimal late import—the simplest fix.\"</p>\n\n<h2>\n  \n  \n  Moving Shared Code\n</h2>\n\n<p>Another restructuring approach:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># BEFORE (circular):\n# models.py → database.py → models.py\n</span>\n<span class=\"c1\"># AFTER (hierarchical):\n# Create a base module both can import\n</span>\n<span class=\"c1\"># library/types.py (new file)\n</span><span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">title</span>\n\n<span class=\"c1\"># library/database.py\n</span><span class=\"kn\">from</span> <span class=\"n\">library.types</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">save_to_db</span><span class=\"p\">(</span><span class=\"n\">book</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Saving </span><span class=\"si\">{</span><span class=\"n\">book</span><span class=\"p\">.</span><span class=\"n\">title</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">load_book</span><span class=\"p\">(</span><span class=\"n\">book_id</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ... load from database\n</span>    <span class=\"k\">return</span> <span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Loaded Title</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># library/models.py\n</span><span class=\"kn\">from</span> <span class=\"n\">library.types</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>\n<span class=\"kn\">from</span> <span class=\"n\">library.database</span> <span class=\"kn\">import</span> <span class=\"n\">save_to_db</span>\n\n<span class=\"c1\"># Extend Book with business logic\n</span><span class=\"k\">class</span> <span class=\"nc\">EnhancedBook</span><span class=\"p\">(</span><span class=\"n\">Book</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"nf\">save_to_db</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># No cycle:\n# types.py imports nothing\n# database.py imports types.py\n# models.py imports types.py and database.py\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Solution 2: Import Inside Functions (Late Import)\n</h2>\n\n<p>She demonstrated tactical late binding:</p>\n\n<p>Moving imports to function level:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># library/models.py\n</span><span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">title</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Import at CALL time, not at MODULE LOAD time\n</span>        <span class=\"kn\">from</span> <span class=\"n\">library.database</span> <span class=\"kn\">import</span> <span class=\"n\">save_to_db</span>\n        <span class=\"nf\">save_to_db</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># library/database.py\n</span><span class=\"k\">def</span> <span class=\"nf\">save_to_db</span><span class=\"p\">(</span><span class=\"n\">book</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Saving </span><span class=\"si\">{</span><span class=\"n\">book</span><span class=\"p\">.</span><span class=\"n\">title</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_all_books</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Late import here too\n</span>    <span class=\"kn\">from</span> <span class=\"n\">library.models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>\n    <span class=\"c1\"># ... load data\n</span>    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Book 1</span><span class=\"sh\">\"</span><span class=\"p\">),</span> <span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Book 2</span><span class=\"sh\">\"</span><span class=\"p\">)]</span>\n\n<span class=\"c1\"># This works! Why?\n# When main.py imports models:\n#   - models.py completes (Book class is defined)\n#   - No import of database yet\n# When book.save() is called:\n#   - THEN database.py is imported\n#   - models.py is already complete\n#   - No cycle!\n</span></code></pre>\n\n</div>\n\n\n\n<p>When late imports make sense:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># ✅ Good use cases for late imports:\n# 1. Breaking circular dependencies\n# 2. Optional dependencies (import only if feature used)\n# 3. Performance (expensive module, rarely used)\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">export_to_pdf</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Only import heavy library if this feature is used\n</span>    <span class=\"kn\">from</span> <span class=\"n\">reportlab.pdfgen</span> <span class=\"kn\">import</span> <span class=\"n\">canvas</span>\n    <span class=\"c1\"># ... generate PDF\n</span>\n<span class=\"c1\"># ❌ Avoid late imports for:\n# 1. Common imports (makes code harder to read)\n# 2. When top-level import works fine\n# 3. Performance-critical loops (import has overhead)\n</span>\n<span class=\"c1\"># Don't do this:\n</span><span class=\"k\">def</span> <span class=\"nf\">process_item</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"n\">json</span>  <span class=\"c1\"># BAD - imported every function call!\n</span>    <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">loads</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Do this:\n</span><span class=\"kn\">import</span> <span class=\"n\">json</span>  <span class=\"c1\"># GOOD - import once at top\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">process_item</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">loads</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>\"Late imports work,\" Margaret cautioned, \"but they hide dependencies. Use them to break cycles, not as standard practice. If you find yourself doing many late imports, your architecture probably needs restructuring.\"</p>\n\n<h2>\n  \n  \n  Solution 3: Import the Module, Not the Name\n</h2>\n\n<p>Timothy learned about importing differently:</p>\n\n<p>Module-level vs name-level imports:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># BEFORE (causes circular import):\n# library/models.py\n</span><span class=\"kn\">from</span> <span class=\"n\">library.database</span> <span class=\"kn\">import</span> <span class=\"n\">save_to_db</span>  <span class=\"c1\"># Imports the function\n</span>\n<span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"nf\">save_to_db</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># library/database.py\n</span><span class=\"kn\">from</span> <span class=\"n\">library.models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>  <span class=\"c1\"># Imports the class\n</span>\n<span class=\"c1\"># AFTER (breaks the cycle):\n# library/models.py\n</span><span class=\"kn\">import</span> <span class=\"n\">library.database</span>  <span class=\"c1\"># Import the MODULE, not the function\n</span>\n<span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">library</span><span class=\"p\">.</span><span class=\"n\">database</span><span class=\"p\">.</span><span class=\"nf\">save_to_db</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>  <span class=\"c1\"># Use module.function\n</span>\n<span class=\"c1\"># library/database.py\n</span><span class=\"kn\">import</span> <span class=\"n\">library.models</span>  <span class=\"c1\"># Import the MODULE, not the class\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">save_to_db</span><span class=\"p\">(</span><span class=\"n\">book</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Saving </span><span class=\"si\">{</span><span class=\"n\">book</span><span class=\"p\">.</span><span class=\"n\">title</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">load_book</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">library</span><span class=\"p\">.</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Loaded</span><span class=\"sh\">\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Use module.Class\n</span>\n<span class=\"c1\"># Why this works:\n# Both modules can import each other as modules\n# They access each other's contents via dotted names\n# The contents don't have to exist at import time\n# They just have to exist when the functions are CALLED\n</span></code></pre>\n\n</div>\n\n\n\n<p>The key difference:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># This fails (imports name at module level):\n</span><span class=\"kn\">from</span> <span class=\"n\">library.database</span> <span class=\"kn\">import</span> <span class=\"n\">save_to_db</span>\n<span class=\"c1\"># Python must evaluate save_to_db NOW\n# If database.py isn't finished, this fails\n</span>\n<span class=\"c1\"># This works (imports module at module level):\n</span><span class=\"kn\">import</span> <span class=\"n\">library.database</span>\n<span class=\"c1\"># Python just notes \"we'll need library.database\"\n# Doesn't need to access save_to_db until you call it\n# By call time, both modules are finished\n</span>\n<span class=\"c1\"># Later, when called:\n</span><span class=\"n\">library</span><span class=\"p\">.</span><span class=\"n\">database</span><span class=\"p\">.</span><span class=\"nf\">save_to_db</span><span class=\"p\">(</span><span class=\"n\">book</span><span class=\"p\">)</span>\n<span class=\"c1\"># Now both modules are fully loaded\n# save_to_db exists and can be accessed\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Solution 4: Type Hints with TYPE_CHECKING\n</h2>\n\n<p>Margaret showed him a modern pattern for type hints:</p>\n\n<p>Avoiding imports needed only for type checking:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># library/models.py\n</span><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">TYPE_CHECKING</span>\n\n<span class=\"c1\"># TYPE_CHECKING is False at runtime, True when type checker runs\n</span><span class=\"k\">if</span> <span class=\"n\">TYPE_CHECKING</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"n\">library.database</span> <span class=\"kn\">import</span> <span class=\"n\">Database</span>  <span class=\"c1\"># Only for type checker!\n</span>\n<span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">title</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">Database</span><span class=\"sh\">'</span><span class=\"p\">):</span>  <span class=\"c1\"># String annotation!\n</span>        <span class=\"c1\"># At runtime, 'Database' is just a string\n</span>        <span class=\"c1\"># Type checker understands it because of the import above\n</span>        <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"nf\">save_book</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># library/database.py\n</span><span class=\"kn\">from</span> <span class=\"n\">library.models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>  <span class=\"c1\"># Regular import\n</span>\n<span class=\"k\">class</span> <span class=\"nc\">Database</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">save_book</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">book</span><span class=\"p\">:</span> <span class=\"n\">Book</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Saving </span><span class=\"si\">{</span><span class=\"n\">book</span><span class=\"p\">.</span><span class=\"n\">title</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Why this works:\n# At runtime: TYPE_CHECKING is False\n#   - The 'if TYPE_CHECKING' block doesn't execute\n#   - No circular import!\n#   - 'Database' in annotation is just a string\n# When type checking (mypy, etc.): TYPE_CHECKING is True\n#   - Import executes for the type checker\n#   - Type checker understands Database\n#   - Full type checking works\n</span></code></pre>\n\n</div>\n\n\n\n<p>Using forward references:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">annotations</span>  <span class=\"c1\"># Python 3.7+ (PEP 563)\n</span>\n<span class=\"c1\"># With this import, ALL annotations are strings automatically\n# No need for quotes or TYPE_CHECKING\n</span>\n<span class=\"kn\">from</span> <span class=\"n\">library.database</span> <span class=\"kn\">import</span> <span class=\"n\">Database</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">Database</span><span class=\"p\">):</span>  <span class=\"c1\"># No quotes needed!\n</span>        <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"nf\">save_book</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># How it works:\n# from __future__ import annotations\n# Makes Python treat all type hints as strings\n# They're not evaluated at runtime\n# No circular import issue\n# Type checkers still understand them\n</span></code></pre>\n\n</div>\n\n\n\n<p>Important notes on annotations as strings:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Originally planned to be default in Python 3.10, then 3.11, then 3.12\n# Now POSTPONED INDEFINITELY due to runtime compatibility issues\n</span>\n<span class=\"c1\"># Pros:\n# ✅ Solves circular import issues for type hints\n# ✅ Faster module import (annotations not evaluated)\n# ✅ Forward references work automatically\n</span>\n<span class=\"c1\"># Cons:\n# ⚠️ Breaks some runtime type inspection\n# ⚠️ Libraries that use get_type_hints() need updates\n# ⚠️ Pydantic, FastAPI, dataclasses may have issues in older versions\n# ⚠️ Can't use annotations for runtime behavior\n</span>\n<span class=\"c1\"># Best practice as of Python 3.11+:\n# - Use TYPE_CHECKING if you need runtime access to types\n# - Use from __future__ import annotations if purely for type checkers\n# - Test with your dependencies (most modern libs support it)\n</span>\n<span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">TYPE_CHECKING</span><span class=\"p\">,</span> <span class=\"n\">get_type_hints</span>\n\n<span class=\"k\">if</span> <span class=\"n\">TYPE_CHECKING</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"n\">library.database</span> <span class=\"kn\">import</span> <span class=\"n\">Database</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">Database</span><span class=\"sh\">'</span><span class=\"p\">):</span>  <span class=\"c1\"># String annotation\n</span>        <span class=\"k\">pass</span>\n\n<span class=\"c1\"># At runtime, inspect annotations:\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">Book</span><span class=\"p\">.</span><span class=\"n\">save</span><span class=\"p\">.</span><span class=\"n\">__annotations__</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'db': 'Database', 'return': None}\n# Annotations are strings - safe from circular imports\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Recognizing Circular Import Patterns\n</h2>\n\n<p>She showed him common scenarios:</p>\n\n<p>Pattern 1: Bidirectional relationships:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># A common anti-pattern\n</span>\n<span class=\"c1\"># models/user.py\n</span><span class=\"kn\">from</span> <span class=\"n\">models.post</span> <span class=\"kn\">import</span> <span class=\"n\">Post</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_posts</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Post</span><span class=\"p\">]:</span>\n        <span class=\"c1\"># User needs to know about Post\n</span>        <span class=\"k\">pass</span>\n\n<span class=\"c1\"># models/post.py\n</span><span class=\"kn\">from</span> <span class=\"n\">models.user</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_author</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">User</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Post needs to know about User\n</span>        <span class=\"k\">pass</span>\n\n<span class=\"c1\"># CYCLE! User imports Post, Post imports User\n</span>\n<span class=\"c1\"># Solution: Put both in same file, or use TYPE_CHECKING\n</span></code></pre>\n\n</div>\n\n\n\n<p>Pattern 2: Utilities that import clients:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># utils/database.py\n</span><span class=\"kn\">from</span> <span class=\"n\">models.user</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>  <span class=\"c1\"># Utility imports model\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">save_user</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"n\">User</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"c1\"># models/user.py\n</span><span class=\"kn\">from</span> <span class=\"n\">utils.database</span> <span class=\"kn\">import</span> <span class=\"n\">save_user</span>  <span class=\"c1\"># Model imports utility\n</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"nf\">save_user</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># CYCLE! Common because models use utilities,\n# but utilities often need to know model types\n</span>\n<span class=\"c1\"># Solution: Make utilities generic (duck typing)\n# or use TYPE_CHECKING for type hints\n</span></code></pre>\n\n</div>\n\n\n\n<p>Pattern 3: Parent-child imports:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># parent.py\n</span><span class=\"kn\">from</span> <span class=\"n\">child</span> <span class=\"kn\">import</span> <span class=\"n\">ChildClass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ParentClass</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_child</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nc\">ChildClass</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># child.py\n</span><span class=\"kn\">from</span> <span class=\"n\">parent</span> <span class=\"kn\">import</span> <span class=\"n\">ParentClass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ChildClass</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"n\">ParentClass</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">parent</span>\n\n<span class=\"c1\"># CYCLE! Parent imports child, child imports parent\n</span>\n<span class=\"c1\"># Solution: Use TYPE_CHECKING or import module not name\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  When Circular Imports Indicate Design Problems\n</h2>\n\n<p>Margaret explained the deeper issue:</p>\n\n<p>Circular dependencies as a code smell:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># If you have circular imports, ask:\n</span>\n<span class=\"c1\"># 1. Are these really separate modules?\n#    Maybe they should be one module:\n# BEFORE:\n#   models/user.py\n#   models/post.py (both import each other)\n# AFTER:\n#   models/user_post.py (both in one file)\n</span>\n<span class=\"c1\"># 2. Is there a missing abstraction?\n# BEFORE:\n#   EmailService imports User\n#   User imports EmailService\n# AFTER:\n#   EmailService imports UserProtocol (interface)\n#   User implements UserProtocol\n#   No direct dependency!\n</span>\n<span class=\"c1\"># 3. Is the dependency backwards?\n# BEFORE:\n#   Low-level database imports high-level User\n#   User imports database\n# AFTER:\n#   Database is generic (no User knowledge)\n#   User imports database\n#   One-way dependency!\n</span></code></pre>\n\n</div>\n\n\n\n<p>The Dependency Inversion Principle:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># ANTI-PATTERN: Concrete dependencies\n# high_level.py\n</span><span class=\"kn\">from</span> <span class=\"n\">low_level</span> <span class=\"kn\">import</span> <span class=\"n\">LowLevelThing</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">HighLevel</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">thing</span> <span class=\"o\">=</span> <span class=\"nc\">LowLevelThing</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># low_level.py\n</span><span class=\"kn\">from</span> <span class=\"n\">high_level</span> <span class=\"kn\">import</span> <span class=\"n\">HighLevel</span>  <span class=\"c1\"># CIRCULAR!\n</span>\n<span class=\"k\">class</span> <span class=\"nc\">LowLevelThing</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">hl</span><span class=\"p\">:</span> <span class=\"n\">HighLevel</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"c1\"># BETTER: Abstract dependencies\n# interfaces.py\n</span><span class=\"k\">class</span> <span class=\"nc\">ThingInterface</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n\n<span class=\"c1\"># high_level.py\n</span><span class=\"kn\">from</span> <span class=\"n\">interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">ThingInterface</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">HighLevel</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">thing</span><span class=\"p\">:</span> <span class=\"n\">ThingInterface</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">thing</span> <span class=\"o\">=</span> <span class=\"n\">thing</span>\n\n<span class=\"c1\"># low_level.py\n</span><span class=\"kn\">from</span> <span class=\"n\">interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">ThingInterface</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">LowLevelThing</span><span class=\"p\">(</span><span class=\"n\">ThingInterface</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"c1\"># No cycle! Both depend on interface, not each other\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Debugging Circular Imports\n</h2>\n\n<p>Timothy learned to diagnose the problem:</p>\n\n<p>Finding the cycle:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Error message:\n# ImportError: cannot import name 'Book' from partially initialized module 'library.models'\n# (most likely due to a circular import)\n</span>\n<span class=\"c1\"># Step 1: Trace the imports manually\n# Read each file's top-level imports\n# Draw a diagram:\n# main.py → models.py → database.py → models.py (CYCLE!)\n</span>\n<span class=\"c1\"># Step 2: Use Python's verbose import\n</span><span class=\"n\">python3</span> <span class=\"o\">-</span><span class=\"n\">v</span> <span class=\"o\">-</span><span class=\"n\">c</span> <span class=\"sh\">\"</span><span class=\"s\">from library.models import Book</span><span class=\"sh\">\"</span>\n<span class=\"c1\"># Shows every import attempt\n# You'll see models.py start, then database.py start,\n# then models.py accessed again before finishing\n</span>\n<span class=\"c1\"># Step 3: Add debug prints (temporary)\n# At top of each module:\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Loading </span><span class=\"si\">{</span><span class=\"n\">__name__</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># library/models.py\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Loading models.py</span><span class=\"sh\">\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Prints first\n</span><span class=\"kn\">from</span> <span class=\"n\">library.database</span> <span class=\"kn\">import</span> <span class=\"n\">save_to_db</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">models.py import done</span><span class=\"sh\">\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Never prints!\n</span>\n<span class=\"c1\"># library/database.py\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Loading database.py</span><span class=\"sh\">\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Prints second\n</span><span class=\"kn\">from</span> <span class=\"n\">library.models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>  <span class=\"c1\"># Fails here\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">database.py import done</span><span class=\"sh\">\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Never prints!\n</span>\n<span class=\"c1\"># Output shows where cycle occurs:\n# Loading models.py\n# Loading database.py\n# ImportError!\n</span></code></pre>\n\n</div>\n\n\n\n<p>Tools for detecting cycles:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Use pydeps to visualize dependencies</span>\npip <span class=\"nb\">install </span>pydeps\npydeps library <span class=\"nt\">--max-bacon</span><span class=\"o\">=</span>2\n<span class=\"c\"># Creates a graph showing import relationships</span>\n<span class=\"c\"># Circular dependencies appear as cycles in the graph</span>\n\n<span class=\"c\"># Use importlab (Google's tool)</span>\npip <span class=\"nb\">install </span>importlab\nimportlab library/\n<span class=\"c\"># Reports circular dependencies</span>\n\n<span class=\"c\"># Use pylint</span>\npylint library/\n<span class=\"c\"># Flags cyclic imports (R0401: cyclic-import)</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Real-World Example: Flask App Structure\n</h2>\n\n<p>Margaret showed him a production pattern:</p>\n\n<p>A web application without cycles:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># app/\n#   __init__.py\n#   models.py\n#   views.py\n#   database.py\n</span>\n<span class=\"c1\"># app/__init__.py (creates app)\n</span><span class=\"kn\">from</span> <span class=\"n\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Import views AFTER app is created\n</span><span class=\"kn\">from</span> <span class=\"n\">app</span> <span class=\"kn\">import</span> <span class=\"n\">views</span>  <span class=\"c1\"># This is okay!\n</span>\n<span class=\"c1\"># app/models.py (data models)\n# No imports from views or __init__\n</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">username</span>\n\n<span class=\"c1\"># app/database.py (database layer)\n# Imports models (data flows up)\n</span><span class=\"kn\">from</span> <span class=\"n\">app.models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">save_user</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">):</span>\n    <span class=\"n\">db</span><span class=\"p\">[</span><span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">username</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">user</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_user</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># app/views.py (request handlers)\n# Imports app and database (dependencies flow down)\n</span><span class=\"kn\">from</span> <span class=\"n\">app</span> <span class=\"kn\">import</span> <span class=\"n\">app</span>\n<span class=\"kn\">from</span> <span class=\"n\">app.database</span> <span class=\"kn\">import</span> <span class=\"n\">save_user</span><span class=\"p\">,</span> <span class=\"n\">get_user</span>\n<span class=\"kn\">from</span> <span class=\"n\">app.models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n\n<span class=\"nd\">@app.route</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">/user/&lt;username&gt;</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">user_profile</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">):</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"nf\">get_user</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">User: </span><span class=\"si\">{</span><span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">username</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n\n<span class=\"c1\"># Dependency hierarchy (no cycles):\n# __init__.py (creates app)\n#   ↓\n# views.py (uses app, imports database and models)\n#   ↓\n# database.py (imports models)\n#   ↓\n# models.py (no dependencies)\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Best Practices Summary\n</h2>\n\n<p>The principles to follow:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># 1. Keep modules loosely coupled\n# Each module should have a clear, single responsibility\n</span>\n<span class=\"c1\"># 2. Dependencies flow in one direction\n# Low-level modules don't import high-level modules\n# Data models → Database → Business Logic → Views\n</span>\n<span class=\"c1\"># 3. Use interfaces/protocols for flexibility\n</span><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Protocol</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Saveable</span><span class=\"p\">(</span><span class=\"n\">Protocol</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span> <span class=\"bp\">...</span>\n\n<span class=\"c1\"># Database depends on interface, not concrete classes\n</span>\n<span class=\"c1\"># 4. Late imports are tactical, not strategic\n# Use to break cycles temporarily\n# Then refactor to remove the need\n</span>\n<span class=\"c1\"># 5. If you import each other, you're probably one module\n# Merge them or extract shared code\n</span>\n<span class=\"c1\"># 6. TYPE_CHECKING is your friend\n# Use it for type hints that would cause cycles\n</span>\n<span class=\"c1\"># 7. Monitor with tools\n# Use pylint, pydeps, or importlab\n# Catch cycles during development\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  The Takeaway\n</h2>\n\n<p>Timothy stood in the Circular Import Problem, understanding dependency management.</p>\n\n<p><strong>Circular imports happen when modules import each other</strong>: Module A imports B, B imports A—neither can finish.</p>\n\n<p><strong>Python imports modules once</strong>: When a cycle occurs, one module gets the other while it's partially initialized.</p>\n\n<p><strong>Module objects exist in sys.modules immediately</strong>: But their contents don't exist until execution completes.</p>\n\n<p><strong>\"Partially initialized module\" error</strong>: Means you're accessing something that doesn't exist yet in a module that's still loading.</p>\n\n<p><strong>Same module appearing twice in traceback</strong>: Key indicator of circular import—look for duplicate module names.</p>\n\n<p><strong>Late imports break cycles tactically</strong>: Import inside functions instead of at module level.</p>\n\n<p><strong>Import module, not names</strong>: <code>import module</code> then <code>module.name</code> delays evaluation until call time.</p>\n\n<p><strong>TYPE_CHECKING avoids runtime imports</strong>: Type hints in <code>if TYPE_CHECKING</code> block don't execute at runtime.</p>\n\n<p><strong>from <strong>future</strong> import annotations</strong>: Makes all type hints strings automatically, preventing circular issues.</p>\n\n<p><strong>Annotations as strings are postponed</strong>: Originally planned as default, now optional due to runtime compatibility issues.</p>\n\n<p><strong>Test with your dependencies</strong>: Pydantic, FastAPI, and dataclasses need modern versions for string annotations.</p>\n\n<p><strong>Restructuring is the best solution</strong>: Break the cycle by extracting shared code or fixing dependency direction.</p>\n\n<p><strong>Cycles indicate design problems</strong>: If modules depend on each other, they might be too coupled or need an interface.</p>\n\n<p><strong>Dependencies should flow one direction</strong>: Low-level doesn't import high-level; data flows up, control flows down.</p>\n\n<p><strong>Bidirectional relationships cause cycles</strong>: User ↔ Post patterns need TYPE_CHECKING or restructuring.</p>\n\n<p><strong>Utilities importing models is suspicious</strong>: Should utilities really need to know about your models?</p>\n\n<p><strong>Debug with python -v</strong>: Shows import sequence and where cycles occur.</p>\n\n<p><strong>Tools can detect cycles</strong>: pydeps, importlab, and pylint find circular dependencies.</p>\n\n<p><strong>Same file solves many cycles</strong>: If two modules always import each other, they might be one module.</p>\n\n<p><strong>Dependency Inversion Principle helps</strong>: Both modules depend on shared interface, not each other.</p>\n\n<p><strong>Flask app structure is a pattern</strong>: Models → Database → Views, with app creation separate.</p>\n\n<h2>\n  \n  \n  Breaking the Cycle\n</h2>\n\n<p>Timothy had discovered how to identify and resolve circular import dependencies.</p>\n\n<p>The Circular Import Problem revealed that import order matters, that modules must complete initialization before their contents can be used, and that circular dependencies prevent either module from finishing.</p>\n\n<p>He learned that module objects appear in sys.modules immediately but remain empty until execution completes, which is why \"import module\" works but \"from module import name\" fails during circular imports, and that recognizing the error traceback pattern—with the same module appearing twice—is key to diagnosing the problem.</p>\n\n<p>Moreover, Timothy understood that late imports work by delaying the import until call time when both modules are complete, that importing modules instead of names delays evaluation, and that TYPE_CHECKING allows type hints without runtime imports.</p>\n\n<p>He learned about <code>from __future__ import annotations</code> making all type hints into strings automatically, but also that this feature was postponed as the default behavior due to compatibility issues with libraries that inspect types at runtime, so it must be used explicitly and tested with dependencies.</p>\n\n<p>He understood that restructuring is better than tactical workarounds, that dependency direction should be clear and one-way, and that circular imports often signal design problems like high coupling or missing abstractions.</p>\n\n<p>Most importantly, Timothy understood that avoiding circular imports isn't about memorizing tricks—it's about designing clean module boundaries with clear dependency hierarchies, where each module has a single responsibility and dependencies flow in one direction from low-level to high-level.</p>\n\n\n\n\n<p><em>Aaron Rose is a software engineer and technology writer at <a href=\"https://www.tech-reader.blog\" rel=\"noopener noreferrer\">tech-reader.blog</a> and the author of <a href=\"https://amazon.com/author/aaron.rose\" rel=\"noopener noreferrer\">Think Like a Genius</a>.</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Title: The Packers' Aggressive Offseason: A New Look in Green Bay with the Parsons Trade and First-Round WR Selection","url":"https://dev.to/yagyaraj_sharma_6cd410179/title-the-packers-aggressive-offseason-a-new-look-in-green-bay-with-the-parsons-trade-and-41ml","date":1761697533,"author":"Insights YRS","guid":319526,"unread":true,"content":"<h2>\n  \n  \n  Title: The Packers' Aggressive Offseason: A New Look in Green Bay with the Parsons Trade and First-Round WR Selection\n</h2>\n\n<p>The Green Bay Packers are undergoing a major transformation this offseason, with the acquisition of cornerback Jaire Alexander through a trade with the Seattle Seahawks and the selection of wide receiver Christian Watson in the first round of the NFL Draft. These moves signal a new direction for the team, as they continue to build a roster that can compete at the highest level.</p>\n\n<p>The Parsons trade was a significant move for the Packers, as they gave up a first-round pick and a third-round pick to acquire the talented cornerback. Parsons had a standout rookie season with the Seahawks, recording 65 tackles and two interceptions in 16 games. With his speed and athleticism, he will be a valuable addition to the Packers' secondary, which has struggled in recent years.</p>\n\n<p>In addition to the Parsons trade, the Packers also selected Watson with the 34th overall pick in the NFL Draft. Watson is a versatile receiver with great speed and agility, and he has the potential to be a major impact player for the Packers. He caught 74 passes for 1,338 yards and 12 touchdowns in his two seasons at North Dakota State, and he was named the Missouri Valley Conference Offensive Player of the Year in 2021.</p>\n\n<p>These moves signal a new direction for the Packers, as they continue to build a roster that can compete at the highest level. With the addition of Parsons and Watson, the Packers have added two talented young players to their roster, and they have shown a willingness to make bold moves to improve their team.</p>\n\n<p>As the Packers continue to build their roster, they will need to make more tough decisions in the coming months. They have several key players set to hit free agency, including quarterback Aaron Rodgers and wide receiver Davante Adams. The Packers will need to decide whether to re-sign these players or let them leave, and they will need to make some tough choices about their roster in order to build a team that can compete at the highest level.</p>\n\n<p>Despite these challenges, the Packers are well-positioned to have a successful season in 2022. With the addition of Parsons and Watson, they have added two talented young players to their roster, and they have shown a willingness to make bold moves to improve their team. With a strong offseason and a solid regular season, the Packers have the potential to make a deep run in the playoffs and compete for a Super Bowl title.</p>\n\n\n\n\n<p>📌 Based on insights from <a href=\"https://www.espn.com/nfl/story/_/id/46098223/nfl-micah-parsons-trade-green-bay-packers-dallas-cowboys\" rel=\"noopener noreferrer\">espn.com</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Title: Revolutionizing Small Business Operations: The Cautious Adoption of AI by a 16-Year-Old Company","url":"https://dev.to/yagyaraj_sharma_6cd410179/title-revolutionizing-small-business-operations-the-cautious-adoption-of-ai-by-a-16-year-old-53ci","date":1761697227,"author":"Insights YRS","guid":319511,"unread":true,"content":"<h2>\n  \n  \n  Title: Revolutionizing Small Business Operations: The Cautious Adoption of AI by a 16-Year-Old Company\n</h2>\n\n<p>Introduction:</p>\n\n<p>Artificial Intelligence (AI) has been a buzzword for quite some time now, with many businesses adopting this technology to streamline their operations and improve efficiency. However, not all businesses are ready to jump on the AI bandwagon, especially small businesses that may not have the resources or expertise to implement such a complex system. In this blog post, we will explore how a 16-year-old company has cautiously approached the adoption of AI, and how it has helped small businesses save real money.</p>\n\n<p>Section 1: The Benefits of AI for Small Businesses</p>\n\n<p>Small businesses often struggle with limited resources and staff, which can make it challenging to keep up with the competition. AI can help alleviate some of these challenges by automating repetitive tasks, improving accuracy, and providing valuable insights that can inform business decisions. For example, AI-powered chatbots can handle customer inquiries 24/7, freeing up staff to focus on more critical tasks. AI can also be used to analyze customer data and provide personalized recommendations, which can improve customer satisfaction and loyalty.</p>\n\n<p>Section 2: The Cautious Approach of the 16-Year-Old Company</p>\n\n<p>Despite the benefits of AI, many small businesses are hesitant to adopt this technology due to concerns about cost, complexity, and the need for specialized expertise. The 16-year-old company that we will be discussing in this blog post has taken a cautious approach to AI adoption, recognizing the potential benefits of this technology while also acknowledging the challenges that small businesses may face. The company has developed a range of AI-powered tools and services that are designed to be user-friendly and accessible to small businesses, even those with limited resources and expertise.</p>\n\n<p>Section 3: The Success Stories of Small Businesses Adopting AI</p>\n\n<p>The 16-year-old company has worked with a number of small businesses to help them adopt AI, and the results have been impressive. For example, one small business that used the company's AI-powered chatbot service reported a 25% increase in customer satisfaction, which translated into a 10% increase in sales. Another small business that used the company's AI-powered inventory management system reported a 15% reduction in inventory costs, which helped them stay competitive in a crowded market.</p>\n\n<p>Conclusion:</p>\n\n<p>The adoption of AI by small businesses is still in its early stages, but the potential benefits of this technology are significant. By taking a cautious approach to AI adoption, small businesses can leverage the power of this technology to improve efficiency, reduce costs, and stay competitive in a rapidly changing market. The 16-year-old company that we have discussed in this blog post is leading the way in this area, providing small businesses with the tools and services they need to adopt AI and achieve real results.</p>\n\n\n\n\n<p>📌 Based on insights from <a href=\"https://techcrunch.com/2025/08/28/how-a-16-year-old-company-is-easing-small-businesses-into-ai/\" rel=\"noopener noreferrer\">techcrunch.com</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Title: The AI Revolution: A $34.5 Billion Challenge for Google's Chrome Browser","url":"https://dev.to/yagyaraj_sharma_6cd410179/title-the-ai-revolution-a-345-billion-challenge-for-googles-chrome-browser-4fk5","date":1761696953,"author":"Insights YRS","guid":319510,"unread":true,"content":"<h2>\n  \n  \n  Title: The AI Revolution: A $34.5 Billion Challenge for Google's Chrome Browser\n</h2>\n\n<p>Description: In a world where technology is constantly evolving, it's no surprise that companies are always looking for ways to stay ahead of the curve. Recently, a new player in the game has emerged, challenging the dominance of one of the biggest names in tech: Google.</p>\n\n<p>Perplexity AI, a cutting-edge AI company, has made a bold move by offering a staggering $34.5 billion in cash for Google's Chrome browser. This offer is a David-and-Goliath bid, as Perplexity AI is a relatively small company compared to the tech giant that is Google. However, the offer is not without its merits.</p>\n\n<p>Perplexity AI's AI technology is truly revolutionary, and it has the potential to change the way we interact with the internet. The company's AI algorithms are designed to be more efficient and accurate than anything on the market, and they have the potential to revolutionize the way we search, browse, and use the internet.</p>\n\n<p>Google's Chrome browser is one of the most popular and widely used browsers in the world, and it has been a key player in the tech industry for years. However, with the rise of new technologies and the increasing competition in the market, Google has been facing challenges in maintaining its dominance.</p>\n\n<p>Perplexity AI's offer is a significant challenge for Google, as it forces the company to consider whether it is willing to sell one of its most valuable assets for a large sum of money. However, the offer is also an opportunity for Google to explore new technologies and partnerships, and to stay ahead of the curve in the rapidly changing tech industry.</p>\n\n<p>The potential implications of this offer are vast and far-reaching. If Perplexity AI were to succeed in its bid, it could change the way we use the internet and the way we interact with technology. It could also have a significant impact on the tech industry as a whole, as it could pave the way for new technologies and partnerships.</p>\n\n<p>In conclusion, the offer from Perplexity AI is a significant challenge for Google, but it is also an opportunity for the company to explore new technologies and partnerships. The potential implications of this offer are vast and far-reaching, and it will be interesting to see how Google responds to this David-and-Goliath bid.</p>\n\n\n\n\n<p>📌 Based on insights from <a href=\"https://interestingengineering.com/culture/perplexity-ai-34-5b-bid-google-chrome\" rel=\"noopener noreferrer\">interestingengineering.com</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-3f3d","date":1761696534,"author":"Vibe YouTube","guid":319497,"unread":true,"content":"<p>3 Unique Python Features You NEED To Know dives into three under-the-radar but game-changing tools in modern Python: the new match statement for elegant pattern matching, dataclasses to cut out boilerplate, and the power of positional &amp; keyword-only arguments to make your functions crystal clear.</p>\n\n<p>On top of that, Tim’s got freebies and special offers: snag free learning and 20% off Brilliant Premium, and check out his DevLaunch mentorship if you’re ready to level up past tutorials and land real dev gigs. Timestamps help you jump straight to each feature.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=e0FvoOtdAQc\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Search Path Mystery: Where Python Finds Modules","url":"https://dev.to/aaron_rose_0787cc8b4775a0/the-search-path-mystery-where-python-finds-modules-585l","date":1761696003,"author":"Aaron Rose","guid":319496,"unread":true,"content":"<p>Timothy's carefully organized package worked perfectly on his development machine. He installed it on the production server, and Python couldn't find it. \"ModuleNotFoundError,\" the error screamed. \"No module named 'library_tools'.\" But the files were right there!</p>\n\n<p>The familiar error:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># On Timothy's machine - works fine\n</span><span class=\"kn\">from</span> <span class=\"n\">library_tools</span> <span class=\"kn\">import</span> <span class=\"n\">format_isbn</span>\n\n<span class=\"c1\"># On production server - fails!\n</span><span class=\"kn\">from</span> <span class=\"n\">library_tools</span> <span class=\"kn\">import</span> <span class=\"n\">format_isbn</span>\n<span class=\"c1\"># ModuleNotFoundError: No module named 'library_tools'\n</span>\n<span class=\"c1\"># The files exist in /opt/library_tools/\n# So why can't Python find them?\n</span></code></pre>\n\n</div>\n\n\n\n<p>Margaret found him staring at directory listings. \"Python isn't looking where you think it's looking,\" she observed. \"Come to the Search Path Mystery—where we'll learn exactly where Python searches for modules.\"</p>\n\n<h2>\n  \n  \n  The sys.path List: Python's Search Order\n</h2>\n\n<p>She showed him Python's search strategy:</p>\n\n<p>How Python finds modules:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n\n<span class=\"c1\"># Python searches these locations, IN ORDER:\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">)</span>\n<span class=\"c1\"># [\n#   '',  # 1. Current directory (script's location)\n#   '/usr/lib/python311.zip',  # 2. Standard library (zipped)\n#   '/usr/lib/python3.11',  # 3. Standard library\n#   '/usr/lib/python3.11/lib-dynload',  # 4. C extensions\n#   '/home/timothy/.local/lib/python3.11/site-packages',  # 5. User packages\n#   '/usr/lib/python3.11/site-packages'  # 6. System packages\n# ]\n</span>\n<span class=\"c1\"># When you do: import library_tools\n# Python checks each directory in sys.path, IN ORDER\n# First match wins!\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"The first directory in sys.path is always the script's directory,\" Margaret explained. \"Then standard library, then installed packages. Python stops at the first match—even if it's the wrong one.\"</p>\n\n<h2>\n  \n  \n  The Empty String Problem\n</h2>\n\n<p>Timothy noticed the empty string at the start:</p>\n\n<p>The current directory marker:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"c1\"># '' (empty string = current directory)\n</span>\n<span class=\"c1\"># This means Python ALWAYS searches the current directory first!\n# Before standard library, before your installed packages\n</span>\n<span class=\"c1\"># Create a file named 'email.py' in current directory:\n# email.py\n</span><span class=\"k\">def</span> <span class=\"nf\">send</span><span class=\"p\">():</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">My custom email function</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Now try to import the standard library email module:\n</span><span class=\"kn\">import</span> <span class=\"n\">email</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">.</span><span class=\"n\">__file__</span><span class=\"p\">)</span>\n<span class=\"c1\"># Shows YOUR email.py, not the standard library!\n</span>\n<span class=\"c1\"># You've accidentally SHADOWED the standard library!\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"The current directory is checked first,\" Margaret warned. \"Name a file <code>random.py</code> or <code>json.py</code>, and you'll shadow standard library modules. This causes mysterious bugs when your code expects the real standard library but gets your file instead.\"</p>\n\n<h3>\n  \n  \n  The -m Flag Changes sys.path[0]\n</h3>\n\n<p>She showed him another subtle behavior:</p>\n\n<p>Running scripts vs modules:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Create: /opt/project/tools/script.py\n</span><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">sys.path[0] = </span><span class=\"si\">{</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Running as a script:\n</span><span class=\"err\">$</span> <span class=\"n\">cd</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">timothy</span>\n<span class=\"err\">$</span> <span class=\"n\">python</span> <span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">/</span><span class=\"n\">project</span><span class=\"o\">/</span><span class=\"n\">tools</span><span class=\"o\">/</span><span class=\"n\">script</span><span class=\"p\">.</span><span class=\"n\">py</span>\n<span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">/</span><span class=\"n\">project</span><span class=\"o\">/</span><span class=\"n\">tools</span>\n<span class=\"c1\"># sys.path[0] is the script's directory!\n</span>\n<span class=\"c1\"># Running as a module:\n</span><span class=\"err\">$</span> <span class=\"n\">cd</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">timothy</span>\n<span class=\"err\">$</span> <span class=\"n\">python</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">project</span><span class=\"p\">.</span><span class=\"n\">tools</span><span class=\"p\">.</span><span class=\"n\">script</span>\n<span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">timothy</span>\n<span class=\"c1\"># sys.path[0] is the current working directory!\n</span>\n<span class=\"c1\"># This affects where Python looks first for imports\n</span></code></pre>\n\n</div>\n\n\n\n<p>The practical impact:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Your project structure:\n# project/\n#   tools/\n#     script.py\n#     helper.py\n#   config.py\n</span>\n<span class=\"c1\"># In script.py:\n</span><span class=\"kn\">import</span> <span class=\"n\">helper</span>  <span class=\"c1\"># Same directory\n</span><span class=\"kn\">import</span> <span class=\"n\">config</span>  <span class=\"c1\"># Parent directory\n</span>\n<span class=\"c1\"># Run as script (works for helper, fails for config):\n</span><span class=\"err\">$</span> <span class=\"n\">python</span> <span class=\"n\">project</span><span class=\"o\">/</span><span class=\"n\">tools</span><span class=\"o\">/</span><span class=\"n\">script</span><span class=\"p\">.</span><span class=\"n\">py</span>\n<span class=\"c1\"># sys.path[0] = project/tools\n# Can find helper.py ✓\n# Can't find config.py ✗\n</span>\n<span class=\"c1\"># Run as module (works differently):\n</span><span class=\"err\">$</span> <span class=\"n\">python</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">project</span><span class=\"p\">.</span><span class=\"n\">tools</span><span class=\"p\">.</span><span class=\"n\">script</span>\n<span class=\"c1\"># sys.path[0] = current directory\n# If you're in project's parent:\n#   Can find project package ✓\n#   But relative imports work differently\n</span>\n<span class=\"c1\"># Best practice: Use absolute imports in packages\n</span><span class=\"kn\">from</span> <span class=\"n\">project.tools</span> <span class=\"kn\">import</span> <span class=\"n\">helper</span>\n<span class=\"kn\">from</span> <span class=\"n\">project</span> <span class=\"kn\">import</span> <span class=\"n\">config</span>\n</code></pre>\n\n</div>\n\n\n\n<p>\"The <code>-m</code> flag changes what 'current directory' means for imports,\" Margaret explained. \"When debugging import issues, check if using <code>-m</code> makes a difference. It's a common source of 'works on my machine' bugs.\"</p>\n\n<h2>\n  \n  \n  PYTHONPATH: Adding Search Locations\n</h2>\n\n<p>She showed him the environment variable approach:</p>\n\n<p>Setting PYTHONPATH:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Add custom locations to Python's search path</span>\n<span class=\"nb\">export </span><span class=\"nv\">PYTHONPATH</span><span class=\"o\">=</span><span class=\"s2\">\"/opt/library_tools:/opt/other_modules\"</span>\n\n<span class=\"c\"># Now Python will search these directories too</span>\npython3 <span class=\"nt\">-c</span> <span class=\"s2\">\"import sys; print(sys.path)\"</span>\n<span class=\"c\"># [</span>\n<span class=\"c\">#   '',</span>\n<span class=\"c\">#   '/opt/library_tools',  # Added from PYTHONPATH</span>\n<span class=\"c\">#   '/opt/other_modules',  # Added from PYTHONPATH</span>\n<span class=\"c\">#   '/usr/lib/python3.11',</span>\n<span class=\"c\">#   ...</span>\n<span class=\"c\"># ]</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Demonstrating PYTHONPATH in action:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Without PYTHONPATH - fails\n</span><span class=\"err\">$</span> <span class=\"n\">python3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"n\">library_tools</span>\n<span class=\"nb\">ModuleNotFoundError</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">module</span> <span class=\"n\">named</span> <span class=\"sh\">'</span><span class=\"s\">library_tools</span><span class=\"sh\">'</span>\n\n<span class=\"c1\"># With PYTHONPATH - works\n</span><span class=\"err\">$</span> <span class=\"n\">export</span> <span class=\"n\">PYTHONPATH</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">/opt/library_tools</span><span class=\"sh\">\"</span>\n<span class=\"err\">$</span> <span class=\"n\">python3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"n\">library_tools</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">library_tools</span><span class=\"p\">.</span><span class=\"n\">__file__</span><span class=\"p\">)</span>\n<span class=\"sh\">'</span><span class=\"s\">/opt/library_tools/library_tools/__init__.py</span><span class=\"sh\">'</span>\n</code></pre>\n\n</div>\n\n\n\n<p>\"PYTHONPATH is useful for development,\" Margaret noted. \"But in production, use proper installation with pip. PYTHONPATH changes are temporary and session-specific.\"</p>\n\n<h2>\n  \n  \n  Site-Packages: Where pip Installs\n</h2>\n\n<p>Timothy learned about the standard installation directory:</p>\n\n<p>Finding site-packages:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">site</span>\n\n<span class=\"c1\"># Where user packages go (pip install --user)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">site</span><span class=\"p\">.</span><span class=\"n\">USER_SITE</span><span class=\"p\">)</span>\n<span class=\"c1\"># /home/timothy/.local/lib/python3.11/site-packages\n</span>\n<span class=\"c1\"># Where system packages go (pip install, with sudo)\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">site</span><span class=\"p\">.</span><span class=\"nf\">getsitepackages</span><span class=\"p\">())</span>\n<span class=\"c1\"># ['/usr/lib/python3.11/site-packages']\n</span>\n<span class=\"c1\"># Both are in sys.path, user packages checked first\n</span><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"nf\">print</span><span class=\"p\">([</span><span class=\"n\">p</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">path</span> <span class=\"k\">if</span> <span class=\"sh\">'</span><span class=\"s\">site-packages</span><span class=\"sh\">'</span> <span class=\"ow\">in</span> <span class=\"n\">p</span><span class=\"p\">])</span>\n<span class=\"c1\"># [\n#   '/home/timothy/.local/lib/python3.11/site-packages',  # User (first!)\n#   '/usr/lib/python3.11/site-packages'  # System\n# ]\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"User site-packages comes before system site-packages,\" Margaret explained. \"This lets you override system packages without root access. Install a newer version with <code>pip install --user</code>, and Python uses yours instead of the system's.\"</p>\n\n<h2>\n  \n  \n  The site Module's Role\n</h2>\n\n<p>Understanding site initialization:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Python automatically imports 'site' at startup\n# It adds site-packages to sys.path\n# Processes .pth files\n# Sets up user site-packages\n</span>\n<span class=\"c1\"># To see what site does:\n</span><span class=\"n\">python3</span> <span class=\"o\">-</span><span class=\"n\">S</span>  <span class=\"c1\"># Skip site initialization\n</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">))</span>\n<span class=\"mi\">3</span>  <span class=\"c1\"># Minimal: current dir + standard library only\n</span>\n<span class=\"c1\"># Normal startup (site runs automatically):\n</span><span class=\"n\">python3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">))</span>\n<span class=\"mi\">7</span>  <span class=\"c1\"># Includes site-packages, .pth files, etc.\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"The site module runs at startup,\" she noted. \"It configures sys.path with site-packages directories. Skip it with <code>-S</code> flag for debugging, but most scripts need it.\"</p>\n\n<h2>\n  \n  \n  Virtual Environments: Isolation\n</h2>\n\n<p>Margaret demonstrated Python's isolation mechanism:</p>\n\n<p>Creating and understanding venvs:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Create a virtual environment</span>\npython3 <span class=\"nt\">-m</span> venv myproject_env\n\n<span class=\"c\"># Structure created:</span>\n<span class=\"c\"># myproject_env/</span>\n<span class=\"c\">#   bin/</span>\n<span class=\"c\">#     python3      # Python executable (symlink or copy)</span>\n<span class=\"c\">#     pip          # pip for this environment</span>\n<span class=\"c\">#   lib/</span>\n<span class=\"c\">#     python3.11/</span>\n<span class=\"c\">#       site-packages/  # Isolated package directory</span>\n<span class=\"c\">#   pyvenv.cfg     # Configuration</span>\n</code></pre>\n\n</div>\n\n\n\n<p>How activation works:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Before activation</span>\n<span class=\"nv\">$ </span>which python3\n/usr/bin/python3\n\n<span class=\"nv\">$ </span>python3 <span class=\"nt\">-c</span> <span class=\"s2\">\"import sys; print(sys.path[0])\"</span>\n/usr/lib/python3.11/site-packages\n\n<span class=\"c\"># After activation</span>\n<span class=\"nv\">$ </span><span class=\"nb\">source </span>myproject_env/bin/activate\n<span class=\"o\">(</span>myproject_env<span class=\"o\">)</span> <span class=\"nv\">$ </span>which python3\n/home/timothy/myproject_env/bin/python3\n\n<span class=\"o\">(</span>myproject_env<span class=\"o\">)</span> <span class=\"nv\">$ </span>python3 <span class=\"nt\">-c</span> <span class=\"s2\">\"import sys; print([p for p in sys.path if 'site-packages' in p])\"</span>\n<span class=\"c\"># ['/home/timothy/myproject_env/lib/python3.11/site-packages']</span>\n<span class=\"c\"># Only the venv's site-packages!</span>\n</code></pre>\n\n</div>\n\n\n\n<p>What activation actually does:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Activation doesn't change Python itself\n# It modifies environment variables:\n</span>\n<span class=\"c1\"># Before activation:\n</span><span class=\"n\">PATH</span><span class=\"o\">=/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"nb\">bin</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"nb\">bin</span>\n<span class=\"n\">VIRTUAL_ENV</span><span class=\"o\">=&lt;</span><span class=\"ow\">not</span> <span class=\"nb\">set</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># After activation (source myproject_env/bin/activate):\n</span><span class=\"n\">PATH</span><span class=\"o\">=/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">timothy</span><span class=\"o\">/</span><span class=\"n\">myproject_env</span><span class=\"o\">/</span><span class=\"nb\">bin</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"nb\">bin</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"nb\">bin</span>  <span class=\"c1\"># Prepended!\n</span><span class=\"n\">VIRTUAL_ENV</span><span class=\"o\">=/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">timothy</span><span class=\"o\">/</span><span class=\"n\">myproject_env</span>\n\n<span class=\"c1\"># When you run 'python3', shell finds it in venv first\n# That Python has sys.path pointing to venv's site-packages\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  How Python Knows It's in a Virtual Environment\n</h2>\n\n<p>Timothy asked what actually changes inside Python. Margaret showed him:</p>\n\n<p>The sys.prefix indicator:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Before venv activation (system Python):\n</span><span class=\"err\">$</span> <span class=\"n\">python3</span> <span class=\"o\">-</span><span class=\"n\">c</span> <span class=\"sh\">\"</span><span class=\"s\">import sys; print(sys.prefix)</span><span class=\"sh\">\"</span>\n<span class=\"o\">/</span><span class=\"n\">usr</span>\n\n<span class=\"err\">$</span> <span class=\"n\">python3</span> <span class=\"o\">-</span><span class=\"n\">c</span> <span class=\"sh\">\"</span><span class=\"s\">import sys; print(sys.base_prefix)</span><span class=\"sh\">\"</span>\n<span class=\"o\">/</span><span class=\"n\">usr</span>\n<span class=\"c1\"># Both point to system installation\n</span>\n<span class=\"c1\"># After venv activation:\n</span><span class=\"err\">$</span> <span class=\"n\">source</span> <span class=\"n\">myproject_env</span><span class=\"o\">/</span><span class=\"nb\">bin</span><span class=\"o\">/</span><span class=\"n\">activate</span>\n<span class=\"p\">(</span><span class=\"n\">myproject_env</span><span class=\"p\">)</span> <span class=\"err\">$</span> <span class=\"n\">python3</span> <span class=\"o\">-</span><span class=\"n\">c</span> <span class=\"sh\">\"</span><span class=\"s\">import sys; print(sys.prefix)</span><span class=\"sh\">\"</span>\n<span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">timothy</span><span class=\"o\">/</span><span class=\"n\">myproject_env</span>\n\n<span class=\"p\">(</span><span class=\"n\">myproject_env</span><span class=\"p\">)</span> <span class=\"err\">$</span> <span class=\"n\">python3</span> <span class=\"o\">-</span><span class=\"n\">c</span> <span class=\"sh\">\"</span><span class=\"s\">import sys; print(sys.base_prefix)</span><span class=\"sh\">\"</span>\n<span class=\"o\">/</span><span class=\"n\">usr</span>\n<span class=\"c1\"># sys.prefix changed! sys.base_prefix stays the same\n</span>\n<span class=\"c1\"># Python uses sys.prefix to find site-packages:\n# site-packages location = sys.prefix + \"/lib/python3.11/site-packages\"\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"The <code>sys.prefix</code> variable tells Python where it's installed,\" Margaret explained. \"Virtual environments change <code>sys.prefix</code> to point to the venv directory. Python then looks for site-packages relative to <code>sys.prefix</code>. That's how the same Python executable finds different packages depending on the active venv.\"</p>\n\n<p>\"Virtual environments isolate dependencies,\" Margaret explained. \"Each project gets its own site-packages. No conflicts between projects needing different versions.\"</p>\n\n<h2>\n  \n  \n  Why Virtual Environments Matter\n</h2>\n\n<p>The version conflict problem:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Project A needs requests 2.25.0\n# Project B needs requests 2.28.0\n# Both installed system-wide = conflict!\n</span>\n<span class=\"c1\"># System-wide (breaks Project A):\n</span><span class=\"err\">$</span> <span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">requests</span><span class=\"o\">==</span><span class=\"mf\">2.28</span><span class=\"p\">.</span><span class=\"mi\">0</span>\n<span class=\"err\">$</span> <span class=\"n\">cd</span> <span class=\"n\">project_a</span>\n<span class=\"err\">$</span> <span class=\"n\">python3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"n\">requests</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"n\">__version__</span>\n<span class=\"sh\">'</span><span class=\"s\">2.28.0</span><span class=\"sh\">'</span>  <span class=\"c1\"># Project A breaks - needs 2.25.0!\n</span>\n<span class=\"c1\"># With venvs (both work):\n</span><span class=\"err\">$</span> <span class=\"n\">cd</span> <span class=\"n\">project_a</span>\n<span class=\"err\">$</span> <span class=\"n\">source</span> <span class=\"n\">venv_a</span><span class=\"o\">/</span><span class=\"nb\">bin</span><span class=\"o\">/</span><span class=\"n\">activate</span>\n<span class=\"p\">(</span><span class=\"n\">venv_a</span><span class=\"p\">)</span> <span class=\"err\">$</span> <span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">requests</span><span class=\"o\">==</span><span class=\"mf\">2.25</span><span class=\"p\">.</span><span class=\"mi\">0</span>\n<span class=\"p\">(</span><span class=\"n\">venv_a</span><span class=\"p\">)</span> <span class=\"err\">$</span> <span class=\"n\">python3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"n\">requests</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"n\">__version__</span>\n<span class=\"sh\">'</span><span class=\"s\">2.25.0</span><span class=\"sh\">'</span>  <span class=\"c1\"># Perfect!\n</span>\n<span class=\"err\">$</span> <span class=\"n\">deactivate</span>\n<span class=\"err\">$</span> <span class=\"n\">cd</span> <span class=\"p\">..</span><span class=\"o\">/</span><span class=\"n\">project_b</span>\n<span class=\"err\">$</span> <span class=\"n\">source</span> <span class=\"n\">venv_b</span><span class=\"o\">/</span><span class=\"nb\">bin</span><span class=\"o\">/</span><span class=\"n\">activate</span>\n<span class=\"p\">(</span><span class=\"n\">venv_b</span><span class=\"p\">)</span> <span class=\"err\">$</span> <span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">requests</span><span class=\"o\">==</span><span class=\"mf\">2.28</span><span class=\"p\">.</span><span class=\"mi\">0</span>\n<span class=\"p\">(</span><span class=\"n\">venv_b</span><span class=\"p\">)</span> <span class=\"err\">$</span> <span class=\"n\">python3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"n\">requests</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"n\">__version__</span>\n<span class=\"sh\">'</span><span class=\"s\">2.28.0</span><span class=\"sh\">'</span>  <span class=\"c1\"># Also perfect!\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  .pth Files: Path Configuration Files\n</h2>\n\n<p>She showed him the .pth file mechanism:</p>\n\n<p>Creating a .pth file:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># In site-packages, create: myproject.pth\n# Contents:\n</span><span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">/</span><span class=\"n\">library_tools</span>\n<span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">/</span><span class=\"n\">other_modules</span>\n\n<span class=\"c1\"># Python automatically adds these paths to sys.path at startup!\n</span></code></pre>\n\n</div>\n\n\n\n<p>Where to place .pth files:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Find your site-packages:</span>\npython3 <span class=\"nt\">-c</span> <span class=\"s2\">\"import site; print(site.getsitepackages())\"</span>\n<span class=\"c\"># /usr/lib/python3.11/site-packages</span>\n\n<span class=\"c\"># Create .pth file there:</span>\n<span class=\"nv\">$ </span><span class=\"nb\">sudo </span>nano /usr/lib/python3.11/site-packages/library_tools.pth\n/opt/library_tools\n\n<span class=\"c\"># Now the path is always included:</span>\n<span class=\"nv\">$ </span>python3 <span class=\"nt\">-c</span> <span class=\"s2\">\"import sys; print([p for p in sys.path if 'library_tools' in p])\"</span>\n<span class=\"c\"># ['/opt/library_tools']</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Advanced .pth file features:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># .pth files can execute Python code!\n# Lines starting with 'import' are executed\n</span>\n<span class=\"c1\"># mypath.pth:\n</span><span class=\"kn\">import</span> <span class=\"n\">sys</span><span class=\"p\">;</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">/opt/priority_path</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">/</span><span class=\"n\">library_tools</span>\n<span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">/</span><span class=\"n\">other_modules</span>\n\n<span class=\"c1\"># First line executes (adds path at beginning)\n# Other lines are added normally\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"Use .pth files sparingly,\" Margaret cautioned. \"They're global and permanent. Better to use virtual environments and proper installation. Reserve .pth files for system-level configuration.\"</p>\n\n<h2>\n  \n  \n  Debugging Import Failures\n</h2>\n\n<p>Timothy learned to diagnose import problems:</p>\n\n<p>The systematic approach:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Step 1: What's Python searching?\n</span><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Python is searching these directories:</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s\">: </span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Step 2: Does the module exist in any of these?\n</span><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"n\">module_name</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">library_tools</span><span class=\"sh\">\"</span>\n<span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">:</span>\n    <span class=\"n\">module_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">exists</span><span class=\"p\">(</span><span class=\"n\">module_path</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Found at: </span><span class=\"si\">{</span><span class=\"n\">module_path</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">isfile</span><span class=\"p\">(</span><span class=\"n\">module_path</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">.py</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">  -&gt; It</span><span class=\"sh\">'</span><span class=\"s\">s a module (.py file)</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">isdir</span><span class=\"p\">(</span><span class=\"n\">module_path</span><span class=\"p\">):</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">  -&gt; It</span><span class=\"sh\">'</span><span class=\"s\">s a package (directory)</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"n\">init_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">module_path</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">__init__.py</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">  -&gt; Has __init__.py: </span><span class=\"si\">{</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">exists</span><span class=\"p\">(</span><span class=\"n\">init_path</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Step 3: Try importing with verbose output\n</span><span class=\"n\">python3</span> <span class=\"o\">-</span><span class=\"n\">v</span> <span class=\"o\">-</span><span class=\"n\">c</span> <span class=\"sh\">\"</span><span class=\"s\">import library_tools</span><span class=\"sh\">\"</span>\n<span class=\"c1\"># Shows every import attempt and where Python looks\n</span></code></pre>\n\n</div>\n\n\n\n<p>Common import failure patterns:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Problem 1: Wrong directory\n</span><span class=\"nb\">ModuleNotFoundError</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">module</span> <span class=\"n\">named</span> <span class=\"sh\">'</span><span class=\"s\">library_tools</span><span class=\"sh\">'</span>\n<span class=\"c1\"># Solution: Check sys.path, add to PYTHONPATH, or install properly\n</span>\n<span class=\"c1\"># Problem 2: Missing __init__.py (Python version dependent)\n</span><span class=\"nb\">ModuleNotFoundError</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">module</span> <span class=\"n\">named</span> <span class=\"sh\">'</span><span class=\"s\">library_tools</span><span class=\"sh\">'</span>\n<span class=\"c1\"># Directory exists but Python won't import it!\n</span>\n<span class=\"c1\"># Python 2: ALWAYS requires __init__.py\n</span><span class=\"n\">my_package</span><span class=\"o\">/</span>\n  <span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">py</span>  <span class=\"c1\"># ← Won't work without __init__.py\n</span>\n<span class=\"c1\"># Python 3.3+: Two package types (PEP 420)\n# Regular package (recommended - gives you control):\n</span><span class=\"n\">my_package</span><span class=\"o\">/</span>\n  <span class=\"n\">__init__</span><span class=\"p\">.</span><span class=\"n\">py</span>  <span class=\"c1\"># ← Explicit package\n</span>  <span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">py</span>\n\n<span class=\"c1\"># Namespace package (implicit - no __init__.py):\n</span><span class=\"n\">my_package</span><span class=\"o\">/</span>\n  <span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">py</span>  <span class=\"c1\"># ← Works in Python 3.3+, but can't control imports\n</span>\n<span class=\"c1\"># Best practice: Always include __init__.py unless you specifically\n# need namespace packages for plugin architectures\n# Solution: Create __init__.py (even if empty)\n</span>\n<span class=\"c1\"># Problem 3: Name shadowing\n</span><span class=\"kn\">import</span> <span class=\"n\">random</span>\n<span class=\"nb\">AttributeError</span><span class=\"p\">:</span> <span class=\"n\">module</span> <span class=\"sh\">'</span><span class=\"s\">random</span><span class=\"sh\">'</span> <span class=\"n\">has</span> <span class=\"n\">no</span> <span class=\"n\">attribute</span> <span class=\"sh\">'</span><span class=\"s\">randint</span><span class=\"sh\">'</span>\n<span class=\"c1\"># You have random.py in current directory!\n# Solution: Rename your file\n</span>\n<span class=\"c1\"># Problem 4: Circular imports\n</span><span class=\"nb\">ImportError</span><span class=\"p\">:</span> <span class=\"n\">cannot</span> <span class=\"kn\">import</span> <span class=\"n\">name</span> <span class=\"sh\">'</span><span class=\"s\">X</span><span class=\"sh\">'</span> <span class=\"k\">from</span> <span class=\"n\">partially</span> <span class=\"n\">initialized</span> <span class=\"n\">module</span>\n<span class=\"c1\"># Module imports itself indirectly\n# Solution: Restructure imports (covered in Article 42)\n</span>\n<span class=\"c1\"># Problem 5: Wrong Python version\n</span><span class=\"nb\">ModuleNotFoundError</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">module</span> <span class=\"n\">named</span> <span class=\"sh\">'</span><span class=\"s\">library_tools</span><span class=\"sh\">'</span>\n<span class=\"c1\"># Installed with pip3, running with python2\n# Solution: Check 'which python3' vs 'which python'\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Modifying sys.path at Runtime\n</h2>\n\n<p>She showed him dynamic path manipulation:</p>\n\n<p>Adding paths programmatically:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n\n<span class=\"c1\"># Append to end (searched last)\n</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">/opt/library_tools</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Insert at beginning (searched first - highest priority)\n</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">/opt/library_tools</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Now imports will find modules there\n</span><span class=\"kn\">import</span> <span class=\"n\">library_tools</span>  <span class=\"c1\"># Works!\n</span>\n<span class=\"c1\"># Check where it came from:\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">library_tools</span><span class=\"p\">.</span><span class=\"n\">__file__</span><span class=\"p\">)</span>\n<span class=\"c1\"># /opt/library_tools/library_tools/__init__.py\n</span></code></pre>\n\n</div>\n\n\n\n<p>Best practices for runtime modification:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"kn\">import</span> <span class=\"n\">os</span>\n\n<span class=\"c1\"># Use absolute paths, not relative\n# BAD:\n</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">../lib</span><span class=\"sh\">'</span><span class=\"p\">)</span>  <span class=\"c1\"># Breaks if script moves!\n</span>\n<span class=\"c1\"># GOOD:\n</span><span class=\"n\">script_dir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">abspath</span><span class=\"p\">(</span><span class=\"n\">__file__</span><span class=\"p\">))</span>\n<span class=\"n\">lib_dir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">script_dir</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">..</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">lib</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">abspath</span><span class=\"p\">(</span><span class=\"n\">lib_dir</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Or use pathlib (Python 3.4+):\n</span><span class=\"kn\">from</span> <span class=\"n\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"n\">script_dir</span> <span class=\"o\">=</span> <span class=\"nc\">Path</span><span class=\"p\">(</span><span class=\"n\">__file__</span><span class=\"p\">).</span><span class=\"n\">parent</span>\n<span class=\"n\">lib_dir</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">script_dir</span> <span class=\"o\">/</span> <span class=\"sh\">'</span><span class=\"s\">..</span><span class=\"sh\">'</span> <span class=\"o\">/</span> <span class=\"sh\">'</span><span class=\"s\">lib</span><span class=\"sh\">'</span><span class=\"p\">).</span><span class=\"nf\">resolve</span><span class=\"p\">()</span>\n<span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">lib_dir</span><span class=\"p\">))</span>\n</code></pre>\n\n</div>\n\n\n\n<p>When to modify sys.path:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># ✅ Good use cases:\n# - Development/testing (temporary workaround)\n# - Scripts that need sibling directories\n# - Plugins loaded from known locations\n# - Bundled applications with known structure\n</span>\n<span class=\"c1\"># ❌ Avoid for:\n# - Production applications (use proper installation)\n# - Libraries others will use (document dependencies instead)\n# - Working around installation issues (fix the real problem)\n</span>\n<span class=\"c1\"># If you find yourself modifying sys.path often, \n# you probably need better project structure or \n# proper package installation\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Import Hooks: Advanced Path Customization\n</h2>\n\n<p>Margaret briefly introduced the hook system:</p>\n\n<p>The import hook mechanism:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Python's import system is customizable via hooks\n</span><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n\n<span class=\"c1\"># Two hook lists:\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">meta_path</span><span class=\"p\">)</span>  <span class=\"c1\"># Finders - locate modules\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">path_hooks</span><span class=\"p\">)</span>  <span class=\"c1\"># Path entry handlers\n</span>\n<span class=\"c1\"># Example: Log all imports\n</span><span class=\"k\">class</span> <span class=\"nc\">ImportLogger</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">find_module</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">fullname</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Attempting to import: </span><span class=\"si\">{</span><span class=\"n\">fullname</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>  <span class=\"c1\"># Not handling this import\n</span>\n<span class=\"c1\"># Install the hook\n</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">meta_path</span><span class=\"p\">.</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nc\">ImportLogger</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Now all imports are logged:\n</span><span class=\"kn\">import</span> <span class=\"n\">os</span>  <span class=\"c1\"># Prints: Attempting to import: os\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"Import hooks are advanced,\" she cautioned. \"They let you import from databases, networks, encrypted files—anywhere. But they add complexity. Use them only when standard imports won't work.\"</p>\n\n<h2>\n  \n  \n  The <strong>file</strong> Attribute: Where Did This Come From?\n</h2>\n\n<p>Understanding module locations:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">import</span> <span class=\"n\">sys</span>\n\n<span class=\"c1\"># Every imported module has __file__\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">__file__</span><span class=\"p\">)</span>\n<span class=\"c1\"># /usr/lib/python3.11/os.py\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">__file__</span><span class=\"p\">)</span>\n<span class=\"c1\"># (None - sys is built-in)\n</span>\n<span class=\"c1\"># For packages, __file__ points to __init__.py\n</span><span class=\"kn\">import</span> <span class=\"n\">library_tools</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">library_tools</span><span class=\"p\">.</span><span class=\"n\">__file__</span><span class=\"p\">)</span>\n<span class=\"c1\"># /opt/library_tools/library_tools/__init__.py\n</span>\n<span class=\"c1\"># Get the package directory:\n</span><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"n\">package_dir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">dirname</span><span class=\"p\">(</span><span class=\"n\">library_tools</span><span class=\"p\">.</span><span class=\"n\">__file__</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">package_dir</span><span class=\"p\">)</span>\n<span class=\"c1\"># /opt/library_tools/library_tools\n</span></code></pre>\n\n</div>\n\n\n\n<p>Using <strong>file</strong> for relative paths:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># In library_tools/config.py\n</span>\n<span class=\"kn\">import</span> <span class=\"n\">os</span>\n\n<span class=\"c1\"># Find the package directory\n</span><span class=\"n\">package_dir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">abspath</span><span class=\"p\">(</span><span class=\"n\">__file__</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Load config file from package\n</span><span class=\"n\">config_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">package_dir</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">data</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">config.json</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># This works regardless of where Python is run from!\n</span><span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">config_file</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Production Best Practices\n</h2>\n\n<p>Margaret shared deployment wisdom:</p>\n\n<p>The right way to deploy:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Development: editable install</span>\n<span class=\"nb\">cd</span> /path/to/project\n<span class=\"nb\">source </span>venv/bin/activate\npip <span class=\"nb\">install</span> <span class=\"nt\">-e</span> <span class=\"nb\">.</span>\n\n<span class=\"c\"># Production: proper install from wheel</span>\npip <span class=\"nb\">install </span>library-tools<span class=\"o\">==</span>1.0.0\n\n<span class=\"c\"># Not this:</span>\n<span class=\"nb\">export </span><span class=\"nv\">PYTHONPATH</span><span class=\"o\">=</span>/opt/library_tools  <span class=\"c\"># Fragile!</span>\nsys.path.append<span class=\"o\">(</span><span class=\"s1\">'/opt/library_tools'</span><span class=\"o\">)</span>  <span class=\"c\"># Harder to debug!</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Checklist for import issues:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># When imports fail in production:\n</span>\n<span class=\"c1\"># 1. Verify installation\n</span><span class=\"n\">pip</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"n\">grep</span> <span class=\"n\">library</span><span class=\"o\">-</span><span class=\"n\">tools</span>\n<span class=\"c1\"># If missing: pip install library-tools\n</span>\n<span class=\"c1\"># 2. Check Python version\n</span><span class=\"n\">python3</span> <span class=\"o\">--</span><span class=\"n\">version</span>\n<span class=\"c1\"># Ensure matches development\n</span>\n<span class=\"c1\"># 3. Check virtual environment\n</span><span class=\"n\">which</span> <span class=\"n\">python3</span>\n<span class=\"c1\"># Should be in venv if using venv\n</span>\n<span class=\"c1\"># 4. Verify sys.path\n</span><span class=\"n\">python3</span> <span class=\"o\">-</span><span class=\"n\">c</span> <span class=\"sh\">\"</span><span class=\"s\">import sys; print(</span><span class=\"sh\">'</span><span class=\"se\">\\n</span><span class=\"sh\">'</span><span class=\"s\">.join(sys.path))</span><span class=\"sh\">\"</span>\n<span class=\"c1\"># Should include site-packages with your package\n</span>\n<span class=\"c1\"># 5. Test import with verbose\n</span><span class=\"n\">python3</span> <span class=\"o\">-</span><span class=\"n\">v</span> <span class=\"o\">-</span><span class=\"n\">c</span> <span class=\"sh\">\"</span><span class=\"s\">import library_tools</span><span class=\"sh\">\"</span>\n<span class=\"c1\"># Shows exactly where Python looks\n</span>\n<span class=\"c1\"># 6. Check for shadowing\n</span><span class=\"n\">ls</span> <span class=\"n\">library_tools</span><span class=\"p\">.</span><span class=\"n\">py</span>  <span class=\"c1\"># In current directory?\n# If exists and not your package: rename it!\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  The Takeaway\n</h2>\n\n<p>Timothy stood in the Search Path Mystery, understanding Python's module discovery mechanism.</p>\n\n<p><strong>sys.path is an ordered list</strong>: Python searches directories in order, first match wins.</p>\n\n<p><strong>Empty string means current directory</strong>: Always checked first, can shadow standard library.</p>\n\n<p><strong>The -m flag changes sys.path[0]</strong>: Running as script uses script's directory; running as module uses current working directory.</p>\n\n<p><strong>PYTHONPATH adds directories</strong>: Environment variable prepends to sys.path.</p>\n\n<p><strong>site-packages is the standard location</strong>: Where pip installs packages.</p>\n\n<p><strong>User site-packages comes first</strong>: Lets users override system packages without root.</p>\n\n<p><strong>The site module configures sys.path</strong>: Runs at startup, adds site-packages and .pth files.</p>\n\n<p><strong>sys.prefix determines package location</strong>: Virtual environments change sys.prefix to point to venv directory.</p>\n\n<p><strong>sys.base_prefix shows original Python</strong>: Stays constant even in venvs, shows system Python location.</p>\n\n<p><strong>Virtual environments isolate dependencies</strong>: Each project gets its own site-packages.</p>\n\n<p><strong>Activation modifies PATH and sys.prefix</strong>: Makes venv's Python execute first with its own sys.prefix.</p>\n\n<p><strong>Python 3.3+ supports namespace packages</strong>: Directories without <strong>init</strong>.py can be packages (PEP 420).</p>\n\n<p><strong>Always use <strong>init</strong>.py anyway</strong>: Unless specifically building namespace packages for plugins.</p>\n\n<p><strong>.pth files add paths permanently</strong>: Placed in site-packages, processed at startup.</p>\n\n<p><strong>sys.path can be modified at runtime</strong>: Use insert(0, path) for highest priority.</p>\n\n<p><strong>Import hooks customize import behavior</strong>: Advanced feature for special use cases.</p>\n\n<p><strong><strong>file</strong> shows module location</strong>: Use it to find package directories and data files.</p>\n\n<p><strong>Proper installation beats PYTHONPATH</strong>: Use pip and venv for reliable imports.</p>\n\n<p><strong>Debug with python -v</strong>: Shows every import attempt and where Python looks.</p>\n\n<p><strong>Shadowing causes mysterious bugs</strong>: Don't name files after standard library modules.</p>\n\n<p><strong>Import failures have patterns</strong>: Check sys.path, check <strong>init</strong>.py, check Python version.</p>\n\n<p><strong>First match wins</strong>: Order in sys.path matters—earlier directories have priority.</p>\n\n<h2>\n  \n  \n  Understanding the Search Path\n</h2>\n\n<p>Timothy had discovered how Python finds modules and packages.</p>\n\n<p>The Search Path Mystery revealed that imports aren't magic—they're systematic searches through an ordered list of directories.</p>\n\n<p>He learned that sys.path is just a list that can be inspected, modified, and understood, that the current directory being first causes both convenience and problems, and that the <code>-m</code> flag subtly changes what \"current directory\" means for imports.</p>\n\n<p>Also, he understood that virtual environments work by changing sys.prefix to point to a different location, which causes Python to look for site-packages in the venv instead of system directories, and that sys.base_prefix always points back to the original Python installation.</p>\n\n<p>He learned that Python 3.3+ supports namespace packages without <code>__init__.py</code> through PEP 420, but that explicitly including <code>__init__.py</code> is still the best practice for most cases since it gives you control over the package interface.</p>\n\n<p>Timothy understood that PYTHONPATH is for development convenience while proper installation is for production reliability, that .pth files provide persistent path configuration but should be used sparingly, and that import failures follow patterns that can be debugged systematically.</p>\n\n<p>Most importantly, he understood that controlling where Python looks is the key to reliable imports—whether through virtual environments isolating dependencies, proper installation putting packages in the right place, or understanding sys.path and sys.prefix when debugging why an import fails.</p>\n\n\n\n\n<p><em>Aaron Rose is a software engineer and technology writer at <a href=\"https://www.tech-reader.blog\" rel=\"noopener noreferrer\">tech-reader.blog</a> and the author of <a href=\"https://amazon.com/author/aaron.rose\" rel=\"noopener noreferrer\">Think Like a Genius</a>.</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Quansight Labs Blog: Exploring &amp; Improving the Thread Safety of NumPy's Test Suite","url":"https://labs.quansight.org/blog/numpy-thread-safe-test-suite","date":1761696000,"author":"","guid":322136,"unread":true,"content":"<article>With the release of free-threaded builds of Python, it's more important than ever to ensure Python code is thread-safe. Here I detail my journey making the NumPy test suite thread-safe over the course of my internship.</article>","contentLength":218,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Extend vs Append. I looked at the basic difference.","url":"https://dev.to/onaolapo11/extend-vs-append-i-looked-at-the-basic-difference-177e","date":1761693916,"author":"Onaolapo-11","guid":319495,"unread":true,"content":"<p>Extend adds multiple elements to the list, while append adds just one element to the list.</p>\n\n<p>I was unable to study on October 27th.</p>\n\n<p><strong>Day 68 [October 28, 2025]</strong></p>\n\n<p>I need to buckle down, as I'm still lagging on day day 3 &amp; 4 goals, \"Day 3-4: Control structures (if-else, loops)\", as well as day 5 (and 6) goals, \"Day 5-6: Functions and modules\", and Day 7 target (exercises) (Meta AI, personal communication, August 8, 2025). If I haven't covered this, I can't make progress on day 8 - 67 goals.</p>\n\n<p><strong>Goals:</strong><br>\n<strong>As extracted from the 'Python for Software Development' textbook by Halvorsen (n.d.):</strong></p>\n\n<ul>\n<li>Plotting in Python ✅</li>\n<li>Subplots✅</li>\n<li>Exercises✅</li>\n<li>If ... Else</li>\n<li>Arrays</li>\n<li>For Loops</li>\n<li>Nested</li>\n<li>For Loops </li>\n<li>While Loops </li>\n<li>Exercises</li>\n<li>Creating Functions in Python - Introduction</li>\n<li>Functions with multiple return values</li>\n<li>Exercises</li>\n<li>Creating Classes in Python</li>\n<li>The init () Function</li>\n<li>Exercises</li>\n<li>Creating Python Modules</li>\n<li>Exercises</li>\n</ul>\n\n<p><strong>Notes:</strong><br>\n<strong>Python for Data Science, AI &amp; Development Course (IBM) (Santarcangelo, n.d.):</strong><br>\nModule 2: Python Data Structures</p>\n\n<ul>\n<li>Lists and Tuples</li>\n<li>Dictionaries</li>\n<li>Sets</li>\n</ul>\n\n<p><strong>Lists</strong><br>\n<strong>Extend vs Append</strong></p>\n\n<ul>\n<li>Extend <strong>adds multiple elements to the list</strong>, while append <em>adds just one element to the list</em>, as explained below</li>\n</ul>\n\n<p><strong>Extend:</strong><br>\nshopping_list = [\"Watch\", \"Laptop\",\"Shoes\",\"Pen\", \"Clothes\"] #list excerpted basically from Santarcangelo (n.d.)<br>\nshopping_list.extend([\"Football\", \"Phone\"]) <br>\nshopping_list<br>\n<strong>Outputs:</strong><br>\n['Watch', 'Laptop', 'Shoes', 'Pen', 'Clothes', 'Football', 'Phone']</p>\n\n<p>shopping_list = [\"Watch\", \"Laptop\",\"Shoes\",\"Pen\", \"Clothes\"] #list excerpted basically from Santarcangelo (n.d.)<br>\nshopping_list.extend(\"Football\") <strong>#notice no list within the parenthesis</strong><br>\nshopping_list<br>\n<strong>Outputs:</strong><br>\n['Watch', 'Laptop', 'Shoes', 'Pen', 'Clothes', 'F', 'o', 'o', 't', 'b', 'a', 'l', 'l']</p>\n\n<p><strong>Append:</strong><br>\nshopping_list = [\"Watch\", \"Laptop\",\"Shoes\",\"Pen\", \"Clothes\"] #list excerpted basically from Santarcangelo (n.d.)<br>\nshopping_list.append([\"Football\", \"Phone\"]) <br>\nshopping_list<br>\n<strong>Outputs:</strong><br>\n['Watch', 'Laptop', 'Shoes', 'Pen', 'Clothes', ['Football', 'Phone']] <strong>#append adds just one element to the list</strong></p>\n\n<p>shopping_list = [\"Watch\", \"Laptop\",\"Shoes\",\"Pen\", \"Clothes\"] #list excerpted basically from Santarcangelo (n.d.)<br>\nshopping_list.append(\"Football\") <strong>#notice no list within the parenthesis</strong><br>\nshopping_list<br>\n<strong>Outputs:</strong><br>\n['Watch', 'Laptop', 'Shoes', 'Pen', 'Clothes', 'Football'] <strong>#append adds just one element to the list</strong></p>\n\n<p><strong>Summary:</strong><br>\n<strong>Extend vs Append. I looked at the basic difference.</strong> Extend adds multiple elements to the list, while append adds just one element to the list.</p>\n\n<p><strong>References:</strong></p>\n\n<ol>\n<li><p>Halvorsen, H. (n.d.). <em>Python</em>. <a href=\"https://halvorsen.blog/documents/programming/python/python.php#python4\" rel=\"noopener noreferrer\">https://halvorsen.blog/documents/programming/python/python.php#python4</a></p></li>\n<li><p>Santarcangelo, J. (n.d.). <em>Python for data science, AI &amp; development</em> [MOOC]. Coursera. <a href=\"https://coursera.org/learn/python-for-applied-data-science-ai\" rel=\"noopener noreferrer\">https://coursera.org/learn/python-for-applied-data-science-ai</a></p></li>\n</ol>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Morsels: __dict__: where Python stores attributes","url":"https://www.pythonmorsels.com/__dict__/","date":1761689700,"author":"","guid":319537,"unread":true,"content":"<h2>A class with some attributes</h2><p>We have a class here, called :</p><div><pre><code></code></pre></div><p>And we have two instances of this class:</p><div><pre><code></code></pre></div><p>Each of these class instances has their own separate data (a  attribute, and a  attribute):</p><div><pre><code></code></pre></div><p>Where are these attributes actually stored?\n<em>Where does their data live?</em></p><p>Each of these class instances …</p>","contentLength":293,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-2e44","date":1761689383,"author":"Vibe YouTube","guid":319475,"unread":true,"content":"<p>Tim dives into three modern Python gems: the structural match statement for cleaner pattern matching, dataclasses for boilerplate-free object models, and positional-only &amp; keyword-only arguments to enforce clear function APIs. These underrated features will help you write more expressive and maintainable code.</p>\n\n<p>The video’s sponsored by Brilliant (snag 20% off Premium) and Tim also plugs DevLaunch, his mentorship program for hands-on project building and job-ready skills.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=e0FvoOtdAQc\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Fixing Type Hints for Callable Objects with Custom Signatures in Dagster","url":"https://dev.to/jongwan93/fixing-type-hints-for-callable-objects-with-custom-signatures-in-dagster-3j73","date":1761684546,"author":"Steven Hur","guid":319418,"unread":true,"content":"<p>So... it's been an interesting week. After my last contribution to Scikit-learn (which was honestly pretty straightforward), I wanted to find something a bit more challenging. Something that would actually make me think, maybe?</p>\n\n<p>I've been getting more into Machine Learning(ML) lately, especially pipelines and orchestration stuff. That's when I found <code>Dagster</code>.</p>\n\n<p><strong>What is Dagster?</strong><br>\nIf you're not familiar, <code>Dagster</code> is a data orchestration platform. Think of it like this. When you're building ML pipelines or data workflows, you need something to coordinate all the different steps such as <code>fetching data</code>, <code>transforming it</code>, <code>training models</code>, <code>deploying them</code>, and etc. <code>Dagster</code> helps you organize all of that massive work into something manageable size.<br>\nWhat caught my attention is that it is actually used in production by real companies. This isn't some hobby project. Plus, it has a really active community and the codebase is actually pretty readable.</p>\n\n<p><strong>Finding the Issue</strong><br>\nI was browsing through their GitHub issues, I found Issue <code>#32574: \"Callable object custom signatures are resolved incorrectly.\"</code><br>\n<a href=\"https://github.com/dagster-io/dagster/issues/32574\" rel=\"noopener noreferrer\">Issue-32574</a><br>\nAt first glance, I thought \"Oh cool, this looks easy.\" But then I read the details and realized this was actually pretty interesting.</p>\n\n<p><strong>The Problem</strong><br>\nHere's the deal: <code>Python</code> has this cool feature where you can create callable objects (basically, classes with a <code>__call__</code> method) that act like functions. You can even give them custom signatures using the <code>__signature__</code> attribute. This is super useful for decorators and wrappers that need to preserve type information.<br>\nBut Dagster's <code>get_type_hints()</code> function wasn't handling this correctly. When you had something like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>class MyWrapper:\n    def __init__(self, fn):\n        # Set custom signature\n        self.__signature__ = inspect.signature(fn)\n\n    def __call__(self, **kwargs):\n        # Generic signature\n        ...\n</code></pre>\n\n</div>\n\n\n\n<p>The code would crash with:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>TypeError: &lt;callable object&gt; is not a module, class, method, or function.\n</code></pre>\n\n</div>\n\n\n\n<p>Why? Because the code was trying to pass the callable instance directly to Python's <code>typing.get_type_hints()</code>, which doesn't know how to handle arbitrary objects. It only works with actual functions, classes, and modules.</p>\n\n<p><strong>The Solution</strong><br>\nThe fix was actually straight forward once I understood the problem. Instead of passing the object to <code>typing.get_type_hints()</code>, you should extract the type information directly from the <code>__signature__</code> object.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>if hasattr(fn, \"__signature__\"):\n    sig = fn.__signature__\n    hints = {}\n    for param_name, param in sig.parameters.items():\n        if param.annotation != inspect.Parameter.empty:\n            hints[param_name] = param.annotation\n    if sig.return_annotation != inspect.Signature.empty:\n        hints['return'] = sig.return_annotation\n    return hints  # Return immediately!\n</code></pre>\n\n</div>\n\n\n\n<p>The signature object already has all the type information you need which means that you can simply extract it.</p>\n\n<p><strong>Testing</strong><br>\nOne of the most important procedure of open source contribution is <code>testing</code>. I created <code>test_sensor_invocation_resources_callable_with_custom_signature()</code> which basically does exactly what the issue described.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Creates a callable object with a custom `__signature__`\nVerifies that `Dagster` can now correctly read the type hints\nConfirms that resources are properly recognized.\n</code></pre>\n\n</div>\n\n\n\n<p>Once the code passed the test, I ran the entire test suite to make sure I didn't break anything. All 52 tests in <code>test_sensor_invocation.py</code> passed. That's always a good feeling.<br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F99nodir12kv7rjckok4b.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F99nodir12kv7rjckok4b.png\" alt=\" \" width=\"784\" height=\"220\"></a></p>\n\n<p><strong>What I Learned</strong><br>\nThis contribution taught me way more than just \"fix this bug\".</p>\n\n<p>Python's Signature Protocol: I had no idea <code>Python</code> had such a sophisticated system for custom signatures. The <code>__signature__</code> attribute is part of the standard library and is specifically designed for cases like this.<br>\nTesting is Critical: In a production system like <code>Dagster</code>, you can't just \"fix it and good to go.\" I had to make sure my change didn't break any existing functionality. The <code>test suite</code> is your safety net.<br>\nReading Complex Codebases: This required understanding how <code>Dagster's</code> decorator system works, how it resolves resources, and how the whole dependency injection mechanism functions. It was challenging but super rewarding.</p>\n\n<p>I'm really enjoying this open source contribution journey. Each project teaches me something new. If you're thinking about contributing to open source, my advice is, don't be afraid to tackle issues that seem a bit over your head. You'll realize you are not as stupid as you think you are. Just make sure you understand the problem and the project before you start coding.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"StatDeck","url":"https://dev.to/splotdev/statdeck-5021","date":1761682189,"author":"Splot Dev","guid":319417,"unread":true,"content":"<p>StatDeck is a statistic sharing website where you can share Mermaid graphs and charts containing your statistics. It also supports an AI that can help you develop these charts. </p>\n\n<p>StatDeck is written in Python (Flask) and HTML (Bootstrap). It uses SQLite for the database because of its simplicity. StatDeck has basic CRUD functionality, and targets users that want more simple and less additional, distracting features.</p>\n\n<p>I made this project because I wanted to quickly visualize data on the go. I also made it to teach myself SQLite and a bit more Bootstrap. </p>\n\n<p>Link: <a href=\"https://statdeck.pythonanywhere.com/\" rel=\"noopener noreferrer\">https://statdeck.pythonanywhere.com/</a></p>\n\n<p>Repository: <a href=\"https://codeberg.org/splot-dev/statdeck\" rel=\"noopener noreferrer\">https://codeberg.org/splot-dev/statdeck</a></p>\n\n<p>Thanks for reading!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-ikm","date":1761682117,"author":"Vibe YouTube","guid":319416,"unread":true,"content":"<p>Tech With Tim’s latest video unlocks three underused Python goodies: the sleek new <code>match</code> statement for pattern matching, hassle-free <code>dataclasses</code> to cut down boilerplate, and the quirky but powerful positional-only &amp; keyword-only arguments. Perfect for leveling up your code with features you never knew existed.</p>\n\n<p>He also plugs a free Brilliant subscription (plus 20% off Premium) and his DevLaunch mentorship program for real-world project help, complete with handy timestamps so you can jump straight to the goodies.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=e0FvoOtdAQc\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"PyCoder’s Weekly: Issue #706: Quasars, Faking Data, GIL-free Web, and More (Oct. 28, 2025)","url":"https://pycoders.com/issues/706","date":1761679800,"author":"","guid":319373,"unread":true,"content":"<div><p> Learn to visualize quasar redshift data by building an interactive marimo dashboard using Polars, pandas, and Matplotlib. You’ll practice retrieving, cleaning, and displaying data in your notebook. You’ll also build interactive UI components that live-update visualizations in the notebook.</p></div><div><p> Wisdoms, aphorisms, and pointed observations that Redowan frequently quotes in conversations about software, philosophy, and ways of working.</p></div><img src=\"https://pycoders.com/issues/706/open/feed\" width=\"1\" height=\"1\" alt=\"alt\"><p><em>[ Subscribe to 🐍 PyCoder’s Weekly 💌 – Get the best Python news, articles, and tutorials delivered to your inbox once a week <a href=\"https://pycoders.com/?utm_source=pycoders&amp;utm_medium=feed&amp;utm_campaign=footer\">&gt;&gt; Click here to learn more</a> ]</em></p>","contentLength":600,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Linear Audio Dreams: Injecting Sanity into Autoencoder Latent Spaces by Arvind Sundararajan","url":"https://dev.to/arvind_sundararajan/linear-audio-dreams-injecting-sanity-into-autoencoder-latent-spaces-by-arvind-sundararajan-50i3","date":1761678129,"author":"Arvind SundaraRajan","guid":319364,"unread":true,"content":"<h1>\n  \n  \n  Linear Audio Dreams: Injecting Sanity into Autoencoder Latent Spaces\n</h1>\n\n<p>Ever tried to perfectly blend two audio tracks using AI, only to end up with a distorted mess? Or scale the intensity of a sound effect while maintaining its pristine quality? The culprit often lies in the non-linear, unpredictable latent spaces of standard audio autoencoders. We've discovered a powerful technique to coax these networks into behaving more linearly, opening doors to unprecedented audio manipulation.</p>\n\n<p>The core idea is surprisingly simple: enforce consistency through data augmentation during training. By repeatedly applying scalar multipliers to the input data and training the autoencoder to reconstruct it accurately, we implicitly encourage the network to learn a linear mapping. The encoder and decoder begin to respect scalar gain and addition, fundamentally altering the structure of the latent space.</p>\n\n<p>Think of it like teaching a child to understand fractions. Instead of just showing them 'one half', you repeatedly show them variations: 'half of an apple', 'half of a pizza', 'half of a group of friends'. The child learns the underlying concept, not just a specific instance. Similarly, data augmentation trains the autoencoder on the underlying linear relationships of audio.</p>\n\n<p>Here's what you gain:</p>\n\n<ul>\n<li>  <strong>Effortless Audio Mixing:</strong> Blend audio sources directly in the latent space with predictable results.</li>\n<li>  <strong>Precise Gain Control:</strong> Adjust the intensity of sounds without introducing artifacts.</li>\n<li>  <strong>Simplified Audio Editing:</strong> Perform complex audio manipulations through simple arithmetic operations in the latent space.</li>\n<li>  <strong>Enhanced Generative Capabilities:</strong> Generate novel audio textures with finer control over their properties.</li>\n<li>  <strong>Robust Audio Processing:</strong> Build audio pipelines that are less sensitive to input variations.</li>\n<li>  <strong>Intuitive Control:</strong> Develop user interfaces for audio creation that feel natural and predictable.</li>\n</ul>\n\n<p>One implementation challenge is choosing the right data augmentation strategy. Simply scaling amplitude might not be enough for complex audio signals. Consider experimenting with time-stretching and pitch-shifting augmentations to further encourage linearity across different dimensions of the latent space.</p>\n\n<p>Imagine applying this to create personalized hearing aids that seamlessly adapt to different sound environments or building adaptive music software which learns to blend instruments in unprecedented ways. By instilling linearity in autoencoders, we unlock their true potential for precise, intuitive, and consistent audio processing. Let's create a new reality of audio control.</p>\n\n<p><strong>Related Keywords:</strong> Audio Autoencoders, Consistency Autoencoders, Linearity, Implicit Regularization, Audio Consistency, Generative Audio Models, AI Audio Enhancement, Signal Processing, Machine Learning Audio, Deep Learning Audio, Audio Generation, Audio Quality, Data Augmentation, Regularization Techniques, Model Training, Loss Functions, Audio Representation, Neural Networks, AI Music Generation, AI Speech Processing, Audio Synthesis, Encoder-Decoder Architecture, Audio Feature Extraction</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Model Context Protocol (MCP): A Foundational Standard for Agentic AI Systems","url":"https://dev.to/lucash_ribeiro_dev/the-model-context-protocol-mcp-a-foundational-standard-for-agentic-ai-systems-4dg","date":1761675857,"author":"Lucas Ribeiro","guid":319353,"unread":true,"content":"<h2>\n  \n  \n  <strong>Abstract</strong>\n</h2>\n\n<p>This paper presents an exhaustive analysis of the Model Context Protocol (MCP), an open standard that represents a paradigm shift from ad-hoc integrations to a standardized, secure, and scalable communication layer, essential for the development of robust, production-grade agentic AI systems. MCP is designed to address the intrinsic limitations of Large Language Models (LLMs), such as static knowledge and a propensity for \"hallucinations,\" by providing a universal language for them to interact with external tools, data, and services. This work details the protocol's tripartite architecture (Host, Client, and Server), its operation over JSON-RPC 2.0, and its fundamental primitives. Furthermore, it offers a significant practical contribution by providing two comprehensive implementation tutorials for creating MCP servers, one using Python with Pydantic and another advancing to Protocol Buffers for high-performance use cases. The analysis culminates in a critical examination of production considerations, including security, scalability, and performance, positioning MCP as an architectural pillar for the next generation of AI applications.</p>\n\n<h2>\n  \n  \n  <strong>1. Introduction: Bridging the Context Gap in Modern AI</strong>\n</h2>\n\n<h3>\n  \n  \n  <strong>1.1. The Challenge of Grounding Large Language Models in Reality</strong>\n</h3>\n\n<p>Large Language Models (LLMs) have revolutionized natural language processing, but their capabilities are inherently limited by the nature of their training. An LLM's knowledge is static, a snapshot of the vast dataset on which it was trained, rendering it incapable of accessing real-time information or events that occurred after its cutoff date.1 This fundamental limitation leads to factual inaccuracies, commonly referred to as \"hallucinations,\" where the model generates plausible but incorrect information.1 Moreover, without access to the outside world, LLMs are unable to perform meaningful real-world tasks, such as querying a database, sending an email, or interacting with an API.</p>\n\n<p>The pre-MCP integration landscape was characterized by a tangle of custom, brittle connections. Connecting $M$ models to $N$ tools required creating $M \\times N$ bespoke integrations, a complexity problem that resulted in massive technical debt and an unsustainable maintenance overhead.3 Each new tool or model demanded significant engineering effort, hindering innovation and scalability. This bottleneck became particularly acute with the rise of \"agentic AI\"—systems designed to pursue goals and take actions autonomously on behalf of a user.5 The absence of a standard communication protocol was a primary barrier to the development and reliable deployment of these intelligent agents.</p>\n\n<h3>\n  \n  \n  <strong>1.2. Introducing the Model Context Protocol as a Standardized Solution</strong>\n</h3>\n\n<p>The Model Context Protocol (MCP) was introduced by Anthropic as an open standard to solve precisely these challenges.1 It provides a universal and standardized \"language\" for LLMs to communicate securely and bidirectionally with external tools, data sources, and services.1 The primary goal of MCP is to transform LLMs from static information processors into dynamic agents capable of retrieving current information, interacting with external systems, and executing concrete actions.1</p>\n\n<p>Architecturally, MCP collapses the $M \\times N$ complexity integration problem to a linear complexity of $M + N$. Instead of each model needing a custom connector for each tool, each model integrates a single MCP client, and each tool is encapsulated by a single MCP server. This modular and standardized approach functions as a \"USB-C for AI,\" allowing any compliant model to connect to any compliant tool without the need for custom integration code.3 The standard has gained rapid industry adoption, with major players like OpenAI, Microsoft, and Google, and a growing ecosystem of open-source connectors, attesting to its importance and effectiveness.3</p>\n\n<h3>\n  \n  \n  <strong>1.3. Thesis and Structure of this Paper</strong>\n</h3>\n\n<p>The central thesis of this paper is that MCP is not merely an incremental improvement over existing function-calling techniques, but rather a fundamental architectural standard that enables the creation of secure, composable, and scalable AI systems. The adoption of MCP reflects a crucial maturation in the field of AI engineering, marking the transition from the \"magic demo\" phase, characterized by clever but fragile prompt engineering, to an era that demands robust, reliable, and maintainable systems. MCP manifests the application of proven software engineering principles—such as standard protocols, separation of concerns, and modularity—to the domain of LLM integration.</p>\n\n<p>To substantiate this thesis, this paper is structured as follows: it begins with a conceptual analysis, positioning MCP relative to other methodologies like RAG and orchestration frameworks. This is followed by a deep dive into the protocol's architecture. The core of the paper consists of two practical implementation tutorials of increasing complexity. Subsequently, a critical examination of production-level challenges, including security, scalability, and performance, is conducted. The paper concludes with a discussion of the protocol's future directions.</p>\n\n<h2>\n  \n  \n  <strong>2. Fundamental Concepts and Comparative Analysis</strong>\n</h2>\n\n<h3>\n  \n  \n  <strong>2.1. From Prompt Crafting to Systemic Context Engineering</strong>\n</h3>\n\n<p>Initial interaction with LLMs was dominated by \"Prompt Engineering,\" the art of crafting the immediate instruction to guide the model to produce the desired output.11 However, this approach has significant limitations. A perfectly worded prompt is useless if the model lacks the necessary information (the context) to act on it correctly.11 This led to the evolution towards \"Context Engineering,\" a broader discipline that focuses on designing and managing the entire informational environment available to the LLM at any given moment.13</p>\n\n<p>Prompt Engineering is, therefore, a subset of Context Engineering.13 While the former focuses on <em>what to tell</em> the model, the latter is concerned with <em>what the model knows</em> when the instruction is given. MCP is a primary tool for Context Engineering. It provides the structured and reliable mechanism to programmatically manage what the model \"knows\" by connecting it to external sources of truth and action capabilities.15 It allows developers to build systems, not just prompts, ensuring the LLM operates with relevant, up-to-date, and accurate information.</p>\n\n<h3>\n  \n  \n  <strong>2.2. Situating MCP: A Comparative Analysis with RAG and Orchestration Frameworks (ReAct/LangChain)</strong>\n</h3>\n\n<p>To fully understand MCP's role, it is crucial to distinguish it from other prominent technologies in the AI ecosystem.</p>\n\n<p><strong>MCP vs. Retrieval-Augmented Generation (RAG):</strong> RAG is a technique designed to augment LLM prompts with relevant knowledge retrieved from external data sources at query time. It is ideal for handling large volumes of <em>unstructured, text-rich knowledge</em>, such as internal documents, articles, or knowledge bases.1 RAG enhances the model's knowledge base. In contrast, MCP is a communication protocol for bidirectional, structured interaction with <em>tools and services</em>. It allows the LLM not only to retrieve specific data but also to execute actions, such as querying a real-time database or calling an API to perform a task.1</p>\n\n<p><strong>MCP vs. ReAct/LangChain:</strong> Frameworks like LangChain and patterns like ReAct (Reasoning and Acting) are <em>orchestration frameworks</em> that define an agent's reasoning cycle (Thought, Action, Observation) within a single application process.17 They provide the control logic for the agent's \"brain.\" MCP, on the other hand, is not an orchestration framework; it is a <em>communication protocol</em> that standardizes the \"Action\" step. It decouples the agent's reasoning logic from the tool's implementation.17 Essentially, LangChain operates at the application layer, while MCP operates at the transport and integration layer.</p>\n\n<p><strong>Synergy:</strong> These technologies are not mutually exclusive; they are highly synergistic. An advanced workflow might involve an orchestrator like LangChain using the ReAct pattern. The agent might first use RAG to retrieve background documents from a knowledge base to understand the general context. Then, based on the retrieved information, it could use MCP to query a live API or database for real-time data and execute a specific action.16</p>\n\n<p>The following table provides a clear comparison to help engineers and architects select the appropriate technology for their use cases.</p>\n\n<p><strong>Table 1: Comparative Analysis of AI Integration Methodologies</strong></p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Methodology</th>\n<th>Primary Function</th>\n<th>Information Type</th>\n<th>Architectural Coupling</th>\n<th>Key Advantage</th>\n<th>Ideal Use Case</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>MCP</strong></td>\n<td>Communication protocol for interaction with tools and services.</td>\n<td>Structured, real-time data, actions.</td>\n<td>Low (decoupled via client-server).</td>\n<td>Interoperability, security, scalability.</td>\n<td>Agents that need to execute actions (e.g., booking a reservation, querying an order database).</td>\n</tr>\n<tr>\n<td><strong>RAG</strong></td>\n<td>Augments LLM knowledge with retrieved data.</td>\n<td>Unstructured, text-rich, static or dynamic.</td>\n<td>Medium (retrieval logic is coupled with generation).</td>\n<td>Reduction of hallucinations, access to proprietary knowledge.</td>\n<td>Customer support chatbots answering based on an internal knowledge base.</td>\n</tr>\n<tr>\n<td><strong>ReAct/LangChain</strong></td>\n<td>Orchestration framework for the agent's reasoning cycle.</td>\n<td>Control logic, task state.</td>\n<td>High (agent logic and tool execution are in the same process).</td>\n<td>Rapid agent development, abstraction of complex logic.</td>\n<td>Building the control logic for agents performing multi-step tasks.</td>\n</tr>\n</tbody>\n</table></div>\n\n<h2>\n  \n  \n  <strong>3. A Deep Architectural Analysis of the Model Context Protocol</strong>\n</h2>\n\n<p>The architecture of MCP is deliberately designed to enforce a strict separation of concerns, which is fundamental to its security and scalability. It is not just a client-server model but a federated, security-focused architecture where the Host acts as the \"brain\" and security gatekeeper, the Client as a communication \"channel,\" and the Server as a sandboxed \"tool.\"</p>\n\n<h3>\n  \n  \n  <strong>3.1. The Tripartite Architecture: Roles of Host, Client, and Server</strong>\n</h3>\n\n<p>The protocol is built around three core components that work in concert to facilitate secure and efficient communication.1</p>\n\n<ul>\n<li>\n<strong>MCP Host:</strong> The Host is the main AI application the user interacts with, such as an IDE (e.g., Cursor), a chat interface (e.g., Claude.ai), or another agentic application.6 It acts as the central orchestrator, responsible for managing the overall user session, aggregating context from multiple clients, and, crucially, applying security and consent policies.22 The full conversation history resides exclusively on the Host, ensuring that individual servers do not have access to sensitive information beyond what is necessary for their tasks.22\n</li>\n<li>\n<strong>MCP Client:</strong> The Client resides within the Host and acts as the communication bridge to a single MCP Server.1 There is a one-to-one (1:1) relationship between a client and a server, which reinforces isolation.6 The client's responsibilities include establishing and managing the connection to its corresponding server, handling protocol negotiation (discussed below), and routing messages bidirectionally.22\n</li>\n<li>\n<strong>MCP Server:</strong> The Server is an external program that provides context or capabilities to the Host. It encapsulates a specific tool, database, API, or other data source.1 Servers are designed to be lightweight, composable, and focused on a single responsibility, promoting a microservices design.22 They can run locally on the same machine as the Host or remotely on a different machine, communicating over different transport layers.8</li>\n</ul>\n\n<p>This architecture directly embodies the Principle of Least Privilege. By keeping the full session context on the Host and ensuring servers are isolated from each other and only receive the information necessary for a single request, the design fundamentally mitigates risks like the \"confused deputy\" problem and prevents a single compromised server from exposing the entire AI session.8 It is an architecture designed from the ground up to operate in a zero-trust environment, where individual servers are not inherently trusted.</p>\n\n<h3>\n  \n  \n  <strong>3.2. The Communication Backbone: JSON-RPC 2.0 and Transport Layers</strong>\n</h3>\n\n<p>Communication between MCP clients and servers is built on the JSON-RPC 2.0 standard.1 This protocol defines a simple structure for requests, responses, and notifications using JSON, which ensures interoperability across different programming languages and platforms.23</p>\n\n<p>MCP supports two primary transport layers to accommodate different deployment scenarios 1:</p>\n\n<ul>\n<li>\n<strong>Standard Input/Output (stdio):</strong> This method is primarily used for servers that run locally as child processes of the Host. It offers low-latency, synchronous communication, ideal for tools that access the local file system or other resources on the same machine.1\n</li>\n<li>\n<strong>HTTP + Server-Sent Events (SSE) / Streamable HTTP:</strong> For remote servers, MCP utilizes HTTP-based protocols. Initially, SSE was the standard to allow servers to push real-time updates to clients. More recently, the protocol has evolved to support \"Streamable HTTP,\" a more scalable, bidirectional model that uses chunked transfer encoding over a single HTTP connection. This evolution is crucial for cloud and serverless deployments (e.g., AWS Lambda), as it avoids the long-lived connections of SSE, which can be problematic in corporate network environments and ephemeral infrastructures.9</li>\n</ul>\n\n<h3>\n  \n  \n  <strong>3.3. Fundamental Primitives: The Building Blocks of Context</strong>\n</h3>\n\n<p>Servers expose their capabilities through a set of standardized \"primitives.\" These are the types of context a server can offer to the Host.7</p>\n\n<ul>\n<li>\n<strong>Tools:</strong> These are executable functions that the LLM can invoke. Servers expose a list of available tools (via tools/list), and the client can request the execution of one with specific arguments (via tools/call).21\n</li>\n<li>\n<strong>Resources:</strong> These represent structured or unstructured data sources that the LLM can access. This could be the schema of a database, the content of a file, or the results of a query.21\n</li>\n<li>\n<strong>Prompts:</strong> These are reusable workflow templates or few-shot examples that the server can provide to guide the LLM on how to best interact with its tools or resources.7</li>\n</ul>\n\n<p>In addition to these basic primitives, MCP defines advanced primitives that enable richer, bidirectional interactions, transforming the communication from a simple request-response cycle into a dynamic dialogue:</p>\n\n<ul>\n<li>\n<strong>Sampling:</strong> This powerful primitive allows a <em>server</em> to request an LLM completion from the <em>client</em>.21 This is extremely useful for servers that need LLM reasoning but should not hold their own API keys or model logic. It keeps model access, selection, billing, and security centralized on the Host, which is controlled by the user.9\n</li>\n<li>\n<strong>Elicitation:</strong> This allows a server to pause its execution and request additional information or clarification from the user via the Host.9 This facilitates interactive, \"human-in-the-loop\" workflows where user intervention is required to proceed with a complex task.</li>\n</ul>\n\n<h3>\n  \n  \n  <strong>3.4. Protocol Lifecycle Management and Capability Negotiation</strong>\n</h3>\n\n<p>MCP sessions are stateful, meaning the connection between a client and a server persists and has a defined lifecycle. This lifecycle begins with a crucial initialization handshake.21</p>\n\n<p>When a client connects to a server, it must first send an initialize request. In this request, the client announces the protocol versions it supports and the capabilities it offers (e.g., \"I support the sampling primitive\"). The server then responds with its own list of capabilities and the protocol version it will use for the session.22 If a compatible version cannot be agreed upon, the connection is cleanly terminated.28</p>\n\n<p>This capability negotiation process is fundamental to the protocol's extensibility and backward compatibility. It allows clients and servers to evolve independently, adding new features that can be discovered and utilized dynamically, without breaking older clients or servers that do not support them.22</p>\n\n<h2>\n  \n  \n  <strong>4. Building an MCP Server: A Step-by-Step Tutorial from Scratch (Python &amp; FastMCP)</strong>\n</h2>\n\n<p>This section provides a practical guide to building a functional MCP server using Python, a ubiquitous language in AI and machine learning. We will use FastMCP, a lightweight and modern framework that abstracts away much of the protocol's complexity, allowing developers to focus on their tool's logic.26</p>\n\n<h3>\n  \n  \n  <strong>4.1. Environment Setup and Project Initialization</strong>\n</h3>\n\n<p>First, set up a Python virtual environment to isolate the project's dependencies.</p>\n\n<ol>\n<li>Create and activate a virtual environment:\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"o\">&gt;</span> python <span class=\"se\">\\-</span>m venv mcp-env  \n<span class=\"o\">&gt;</span> <span class=\"nb\">source </span>mcp-env/bin/activate\n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li>Install the necessary libraries: FastMCP for the server and Uvicorn as the ASGI server to run it.\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"o\">&gt;</span> pip <span class=\"nb\">install</span> <span class=\"s2\">\"fastmcp[server]\"</span> uvicorn\n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li>Create the basic project structure. Create a directory for your project and, inside it, a main file, e.g., main.py.\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"o\">&gt;</span> <span class=\"nb\">mkdir </span>mcp<span class=\"se\">\\_</span>weather<span class=\"se\">\\_</span>server  \n<span class=\"o\">&gt;</span> <span class=\"nb\">cd </span>mcp<span class=\"se\">\\_</span>weather<span class=\"se\">\\_</span>server  \n<span class=\"o\">&gt;</span> <span class=\"nb\">touch </span>main.py\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  <strong>4.2. Defining the Service Contract: Input/Output Schemas with Pydantic</strong>\n</h3>\n\n<p>A core principle of MCP is structured communication. Using schemas to define the inputs and outputs of your tools is crucial for data validation and ensuring robustness.4 FastMCP integrates natively with Pydantic for this purpose.</p>\n\n<p>In main.py, let's define a Pydantic schema for the input of our weather forecast tool.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># main.py  \n</span><span class=\"kn\">from</span> <span class=\"n\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">WeatherRequest</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>  \n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Schema for requesting weather information.</span><span class=\"sh\">\"\"\"</span>  \n    <span class=\"n\">city</span><span class=\"p\">:</span> <span class=\"nb\">str</span> \\<span class=\"o\">=</span> <span class=\"nc\">Field</span><span class=\"p\">(...,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">The city for which to get the weather forecast.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>  \n    <span class=\"n\">units</span><span class=\"p\">:</span> <span class=\"nb\">str</span> \\<span class=\"o\">=</span> <span class=\"nc\">Field</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">metric</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">The units for temperature (e.g., </span><span class=\"sh\">'</span><span class=\"s\">metric</span><span class=\"sh\">'</span><span class=\"s\"> or </span><span class=\"sh\">'</span><span class=\"s\">imperial</span><span class=\"sh\">'</span><span class=\"s\">).</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  <strong>4.3. Implementing and Registering a Custom Tool</strong>\n</h3>\n\n<p>Now, let's implement the tool's logic and register it with the MCP server. We will use FastMCP's <a class=\"mentioned-user\" href=\"https://dev.to/server\">@server</a>.tool decorator.</p>\n\n<ol>\n<li>Import the necessary classes and instantiate the server.\n</li>\n<li>Create an asynchronous function that will implement the tool's logic. The function signature will use the Pydantic model we just created to receive typed arguments.\n</li>\n<li>Inside the function, you would call a real external API. For this example, we will simulate the call and return mock data.\n</li>\n<li>The function's return must be a structured dictionary that MCP can transmit back to the client.\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># main.py (continued)\n</span><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">from</span> <span class=\"n\">fastmcp.server</span> <span class=\"kn\">import</span> <span class=\"n\">Server</span>\n\n<span class=\"c1\"># Assume the API key is in an environment variable\n# API_KEY = os.getenv(\"WEATHER_API_KEY\")\n</span>\n<span class=\"c1\"># Create an instance of the MCP server\n</span><span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"nc\">Server</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">weather-server</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">0.1.0</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">An MCP server to provide weather forecasts.</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"nd\">@server.tool</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">get_current_weather</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Fetches the current weather for a specified city.</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">input_schema</span><span class=\"o\">=</span><span class=\"n\">WeatherRequest</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_current_weather</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">WeatherRequest</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    The core logic for the weather tool.\n    In a real application, this would make an API call.\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Fetching weather for </span><span class=\"si\">{</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">city</span><span class=\"si\">}</span><span class=\"s\"> in </span><span class=\"si\">{</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">units</span><span class=\"si\">}</span><span class=\"s\"> units...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># API call simulation\n</span>    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">city</span><span class=\"p\">.</span><span class=\"nf\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">lisbon</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"n\">weather_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"sh\">\"</span><span class=\"s\">temperature</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">25</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">condition</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Sunny</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">humidity</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">units</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">units</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">weather_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"sh\">\"</span><span class=\"s\">temperature</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">18</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">condition</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Cloudy</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">humidity</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">75</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">units</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">units</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:.</span><span class=\"nf\">lower</span><span class=\"p\">()}</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">temperature</span> <span class=\"n\">of</span> <span class=\"p\">{</span><span class=\"n\">weather_data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">temperature</span><span class=\"sh\">'</span><span class=\"p\">]}</span><span class=\"err\">°</span><span class=\"n\">C</span><span class=\"p\">.</span><span class=\"sh\">\"</span><span class=\"s\">\n            },\n            {\n                </span><span class=\"sh\">\"</span><span class=\"nb\">type</span><span class=\"sh\">\"</span><span class=\"s\">: </span><span class=\"sh\">\"</span><span class=\"n\">json</span><span class=\"sh\">\"</span><span class=\"s\">,\n                </span><span class=\"sh\">\"</span><span class=\"n\">json</span><span class=\"sh\">\"</span><span class=\"s\">: weather_data\n            }\n        ]\n    }\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  <strong>4.4. Exposing Structured Data via the Resource Primitive</strong>\n</h3>\n\n<p>In addition to actionable tools, MCP servers can expose static or dynamic data resources. Let's add a resource that exposes the cities supported by our service. We will use the <a class=\"mentioned-user\" href=\"https://dev.to/server\">@server</a>.resource decorator.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># main.py (continued)\n</span><span class=\"nd\">@server.resource</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">supported_cities</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Provides a list of cities with enhanced weather support.</span><span class=\"sh\">\"</span>\n<span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_supported_cities</span><span class=\"p\">():</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    Returns a list of supported cities.\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">json</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                <span class=\"sh\">\"</span><span class=\"s\">json</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">Lisbon</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Porto</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Faro</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  <strong>4.5. Complete Server Implementation and Local Testing</strong>\n</h3>\n\n<p>Now, let's combine everything into a complete main.py file and add the code to run the server.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># main.py (final version)\n</span><span class=\"kn\">from</span> <span class=\"n\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n<span class=\"kn\">from</span> <span class=\"n\">fastmcp.server</span> <span class=\"kn\">import</span> <span class=\"n\">Server</span>\n<span class=\"kn\">import</span> <span class=\"n\">uvicorn</span>\n\n<span class=\"c1\"># --- Schema Definitions ---\n</span><span class=\"k\">class</span> <span class=\"nc\">WeatherRequest</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Schema for requesting weather information.</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">city</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"nc\">Field</span><span class=\"p\">(...,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">The city for which to get the weather forecast.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">units</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"nc\">Field</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">metric</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">The units for temperature (e.g., </span><span class=\"sh\">'</span><span class=\"s\">metric</span><span class=\"sh\">'</span><span class=\"s\"> or </span><span class=\"sh\">'</span><span class=\"s\">imperial</span><span class=\"sh\">'</span><span class=\"s\">).</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># --- Server Instance ---\n</span><span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"nc\">Server</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">weather-server</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">0.1.0</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">An MCP server to provide weather forecasts.</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># --- Tool Definitions ---\n</span><span class=\"nd\">@server.tool</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">get_current_weather</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Fetches the current weather for a specified city.</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">input_schema</span><span class=\"o\">=</span><span class=\"n\">WeatherRequest</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_current_weather</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">WeatherRequest</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">The core logic for the weather tool.</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Fetching weather for </span><span class=\"si\">{</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">city</span><span class=\"si\">}</span><span class=\"s\"> in </span><span class=\"si\">{</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">units</span><span class=\"si\">}</span><span class=\"s\"> units...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">city</span><span class=\"p\">.</span><span class=\"nf\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">lisbon</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"n\">weather_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">temperature</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">condition</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Sunny</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">humidity</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">units</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">units</span><span class=\"p\">}</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">weather_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">temperature</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">condition</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Cloudy</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">humidity</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">units</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">units</span><span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:.</span><span class=\"nf\">lower</span><span class=\"p\">()}</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">temperature</span> <span class=\"n\">of</span> <span class=\"p\">{</span><span class=\"n\">weather_data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">temperature</span><span class=\"sh\">'</span><span class=\"p\">]}</span><span class=\"err\">°</span><span class=\"n\">C</span><span class=\"p\">.</span><span class=\"sh\">\"</span><span class=\"s\">},\n            {</span><span class=\"sh\">\"</span><span class=\"nb\">type</span><span class=\"sh\">\"</span><span class=\"s\">: </span><span class=\"sh\">\"</span><span class=\"n\">json</span><span class=\"sh\">\"</span><span class=\"s\">, </span><span class=\"sh\">\"</span><span class=\"n\">json</span><span class=\"sh\">\"</span><span class=\"s\">: weather_data}\n        ]\n    }\n\n# --- Resource Definitions ---\n@server.resource(\n    name=</span><span class=\"sh\">\"</span><span class=\"n\">supported_cities</span><span class=\"sh\">\"</span><span class=\"s\">,\n    description=</span><span class=\"sh\">\"</span><span class=\"n\">Provides</span> <span class=\"n\">a</span> <span class=\"nb\">list</span> <span class=\"n\">of</span> <span class=\"n\">cities</span> <span class=\"k\">with</span> <span class=\"n\">enhanced</span> <span class=\"n\">weather</span> <span class=\"n\">support</span><span class=\"p\">.</span><span class=\"sh\">\"</span><span class=\"s\">\n)\nasync def get_supported_cities():\n    </span><span class=\"sh\">\"\"\"</span><span class=\"s\">Returns a list of supported cities.</span><span class=\"sh\">\"\"\"</span><span class=\"s\">\n    return {</span><span class=\"sh\">\"</span><span class=\"n\">content</span><span class=\"sh\">\"</span><span class=\"s\">: [{</span><span class=\"sh\">\"</span><span class=\"nb\">type</span><span class=\"sh\">\"</span><span class=\"s\">: </span><span class=\"sh\">\"</span><span class=\"n\">json</span><span class=\"sh\">\"</span><span class=\"s\">, </span><span class=\"sh\">\"</span><span class=\"n\">json</span><span class=\"sh\">\"</span><span class=\"s\">: [</span><span class=\"sh\">\"</span><span class=\"n\">Lisbon</span><span class=\"sh\">\"</span><span class=\"s\">, </span><span class=\"sh\">\"</span><span class=\"n\">Porto</span><span class=\"sh\">\"</span><span class=\"s\">, </span><span class=\"sh\">\"</span><span class=\"n\">Faro</span><span class=\"sh\">\"</span><span class=\"s\">]}]}\n\n# --- Entry Point for Execution ---\nif __name__ == </span><span class=\"sh\">\"</span><span class=\"n\">__main__</span><span class=\"sh\">\"</span><span class=\"s\">:\n    # FastMCP integrates with Uvicorn to serve the application.\n    # FastMCP</span><span class=\"sh\">'</span><span class=\"s\">s </span><span class=\"sh\">'</span><span class=\"s\">run</span><span class=\"sh\">'</span><span class=\"s\"> method handles the protocol initialization logic.\n    server.run()\n</span></code></pre>\n\n</div>\n\n\n\n<p>To run your server locally, use the following command in your terminal:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"o\">&gt;</span> python main.py\n</code></pre>\n\n</div>\n\n\n\n<p>Your MCP server is now running and listening for connections via stdio. An MCP client (like Cursor or a custom client) can now connect to this process to discover and invoke the get_current_weather tool and the supported_cities resource.</p>\n\n<h2>\n  \n  \n  <strong>5. Advanced Schema Definition with Protocol Buffers for High-Performance Servers</strong>\n</h2>\n\n<p>While JSON and Pydantic are excellent for prototyping and many use cases, high-performance and enterprise production environments often demand more efficiency. This section explores the use of Protocol Buffers (Protobuf) as a superior alternative for schema definition and data serialization in MCP systems.</p>\n\n<h3>\n  \n  \n  <strong>5.1. Rationale for Protobuf in Production MCP Systems</strong>\n</h3>\n\n<p>JSON, being text-based, has drawbacks in high-load scenarios:</p>\n\n<ul>\n<li>\n<strong>Payload Size:</strong> JSON messages are more verbose than binary formats, consuming more bandwidth.\n</li>\n<li>\n<strong>Serialization/Deserialization Speed:</strong> Parsing text is computationally more intensive than parsing pre-compiled binary formats.\n</li>\n<li>\n<strong>Type Validation:</strong> Type validation occurs at runtime, which can introduce overhead.</li>\n</ul>\n\n<p>Protocol Buffers, a binary serialization format developed by Google, addresses these limitations. It offers smaller payloads, faster processing, and strict schema enforcement through compile-time generated code, making it ideal for high-performance microservices.29 Adopting Protobuf represents a maturation step in an MCP server's implementation, moving it from a prototype to an enterprise-grade solution.</p>\n\n<h3>\n  \n  \n  <strong>5.2. Creating a .proto Service Definition</strong>\n</h3>\n\n<p>The Protobuf workflow begins with defining your services and messages in a .proto file. This file serves as a language-agnostic contract for your data.</p>\n\n<p>Let's create a bookstore.proto file for a bookstore service. This file will define the RPC (Remote Procedure Call) methods and message structures. Crucially, we will include Google API annotations, which allow the same .proto file to be used for generating gRPC servers and REST gateways, a concept we will extend to generate MCP servers.31</p>\n\n<p><strong>Protocol Buffers</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code>\n<span class=\"c1\"># bookstore.proto\n</span><span class=\"n\">syntax</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">proto3</span><span class=\"sh\">\"</span><span class=\"p\">;</span>\n\n<span class=\"n\">package</span> <span class=\"n\">bookstore</span><span class=\"p\">.</span><span class=\"n\">v1</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"sh\">\"</span><span class=\"s\">google/api/annotations.proto</span><span class=\"sh\">\"</span><span class=\"p\">;</span>\n\n<span class=\"c1\"># Option for the generated Go package\n</span><span class=\"n\">option</span> <span class=\"n\">go_package</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">generated/go/bookstore/v1</span><span class=\"sh\">\"</span><span class=\"p\">;</span>\n\n<span class=\"c1\"># The Bookstore service definition\n</span><span class=\"n\">service</span> <span class=\"n\">BookstoreService</span> <span class=\"p\">{</span>\n  <span class=\"c1\"># Gets a book by ID\n</span>  <span class=\"n\">rpc</span> <span class=\"nc\">GetBook</span><span class=\"p\">(</span><span class=\"n\">GetBookRequest</span><span class=\"p\">)</span> <span class=\"nf\">returns </span><span class=\"p\">(</span><span class=\"n\">Book</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nf\">option </span><span class=\"p\">(</span><span class=\"n\">google</span><span class=\"p\">.</span><span class=\"n\">api</span><span class=\"p\">.</span><span class=\"n\">http</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"n\">get</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">/v1/books/{book_id}</span><span class=\"sh\">\"</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\"># Creates a new book\n</span>  <span class=\"n\">rpc</span> <span class=\"nc\">CreateBook</span><span class=\"p\">(</span><span class=\"n\">CreateBookRequest</span><span class=\"p\">)</span> <span class=\"nf\">returns </span><span class=\"p\">(</span><span class=\"n\">Book</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nf\">option </span><span class=\"p\">(</span><span class=\"n\">google</span><span class=\"p\">.</span><span class=\"n\">api</span><span class=\"p\">.</span><span class=\"n\">http</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"n\">post</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">/v1/books</span><span class=\"sh\">\"</span>\n      <span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">book</span><span class=\"sh\">\"</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># The Book message structure\n</span><span class=\"n\">message</span> <span class=\"n\">Book</span> <span class=\"p\">{</span>\n  <span class=\"n\">string</span> <span class=\"n\">book_id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"n\">string</span> <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n  <span class=\"n\">string</span> <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n  <span class=\"n\">int32</span> <span class=\"n\">pages</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># The request message for GetBook\n</span><span class=\"n\">message</span> <span class=\"n\">GetBookRequest</span> <span class=\"p\">{</span>\n  <span class=\"n\">string</span> <span class=\"n\">book_id</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># The request message for CreateBook\n</span><span class=\"n\">message</span> <span class=\"n\">CreateBookRequest</span> <span class=\"p\">{</span>\n  <span class=\"n\">Book</span> <span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  <strong>5.3. Automating MCP Server Generation with a Custom protoc Plugin</strong>\n</h3>\n\n<p>The power of the Protobuf ecosystem lies in its compiler, protoc, and its ability to be extended with custom plugins. Let's describe the process of creating a protoc-gen-mcp plugin that reads a .proto file, identifies which RPCs should be exposed as MCP tools, and automatically generates the Python server code. This approach creates a \"single source of truth\" architecture.31</p>\n\n<p>Step 1: Define Custom MCP Annotations<br><br>\nFirst, we extend Protobuf with our own options to mark the RPCs. We create a file mcp_annotations.proto.</p>\n\n<p><strong>Protocol Buffers</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># mcp_annotations.proto\n</span><span class=\"n\">syntax</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">proto3</span><span class=\"sh\">\"</span><span class=\"p\">;</span>\n\n<span class=\"n\">package</span> <span class=\"n\">mcp</span><span class=\"p\">.</span><span class=\"n\">v1</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"sh\">\"</span><span class=\"s\">google/protobuf/descriptor.proto</span><span class=\"sh\">\"</span><span class=\"p\">;</span>\n\n<span class=\"c1\"># Extend method options with our MCP options\n</span><span class=\"n\">extend</span> <span class=\"n\">google</span><span class=\"p\">.</span><span class=\"n\">protobuf</span><span class=\"p\">.</span><span class=\"n\">MethodOptions</span> <span class=\"p\">{</span>\n  <span class=\"n\">MCPOptions</span> <span class=\"n\">tool</span> <span class=\"o\">=</span> <span class=\"mi\">50001</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">message</span> <span class=\"n\">MCPOptions</span> <span class=\"p\">{</span>\n  <span class=\"c1\"># If true, this RPC method will be exposed as an MCP tool\n</span>  <span class=\"nb\">bool</span> <span class=\"n\">enabled</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Now, we can use this annotation in our bookstore.proto:</p>\n\n<p><strong>Protocol Buffers</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># bookstore.proto (updated)\n#... (imports and messages as before)\n</span><span class=\"k\">import</span> <span class=\"sh\">\"</span><span class=\"s\">mcp_annotations.proto</span><span class=\"sh\">\"</span><span class=\"p\">;</span>\n\n<span class=\"n\">service</span> <span class=\"n\">BookstoreService</span> <span class=\"p\">{</span>\n  <span class=\"n\">rpc</span> <span class=\"nc\">GetBook</span><span class=\"p\">(</span><span class=\"n\">GetBookRequest</span><span class=\"p\">)</span> <span class=\"nf\">returns </span><span class=\"p\">(</span><span class=\"n\">Book</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nf\">option </span><span class=\"p\">(</span><span class=\"n\">google</span><span class=\"p\">.</span><span class=\"n\">api</span><span class=\"p\">.</span><span class=\"n\">http</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">get</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">/v1/books/{book_id}</span><span class=\"sh\">\"</span> <span class=\"p\">};</span>\n    <span class=\"nf\">option </span><span class=\"p\">(</span><span class=\"n\">mcp</span><span class=\"p\">.</span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"n\">tool</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">enabled</span><span class=\"p\">:</span> <span class=\"n\">true</span> <span class=\"p\">};</span> <span class=\"c1\"># Mark for MCP\n</span>  <span class=\"p\">}</span>\n  <span class=\"c1\">#...\n</span><span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Step 2: Plugin Logic (in Go)<br><br>\nThe plugin is an executable that reads a CodeGeneratorRequest from protoc via stdin and writes a CodeGeneratorResponse to stdout. The main logic involves:</p>\n\n<ol>\n<li>Parsing the provided .proto file descriptor.\n</li>\n<li>Iterating over all services and methods.\n</li>\n<li>For each method, checking if it has our (mcp.v1.tool).enabled = true annotation.\n</li>\n<li>If the annotation is present, extracting metadata: method name, input message fields (for the tool's parameters), and the output message.\n</li>\n<li>Using a templating system (e.g., Go's text/template) to generate the Python server code (similar to our FastMCP example) based on the extracted metadata.</li>\n</ol>\n\n<p>Step 3: Generation Pipeline<br><br>\nThe final workflow is orchestrated by a shell script (generate.sh). This script runs protoc multiple times with different plugins to generate all necessary artifacts from the single .proto file.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>\n<span class=\"c\">#!/bin/bash</span>\n\n<span class=\"c\"># Output directories</span>\n<span class=\"nv\">PROTO_DIR</span><span class=\"o\">=</span>./proto\n<span class=\"nv\">GO_OUT_DIR</span><span class=\"o\">=</span>./generated/go\n<span class=\"nv\">PYTHON_MCP_OUT_DIR</span><span class=\"o\">=</span>./generated/mcp\n\n<span class=\"c\"># Run protoc to generate gRPC stubs (Go)</span>\nprotoc <span class=\"nt\">--proto_path</span><span class=\"o\">=</span><span class=\"k\">${</span><span class=\"nv\">PROTO_DIR</span><span class=\"k\">}</span> <span class=\"se\">\\</span>\n       <span class=\"nt\">--go_out</span><span class=\"o\">=</span><span class=\"k\">${</span><span class=\"nv\">GO_OUT_DIR</span><span class=\"k\">}</span> <span class=\"nt\">--go-grpc_out</span><span class=\"o\">=</span><span class=\"k\">${</span><span class=\"nv\">GO_OUT_DIR</span><span class=\"k\">}</span> <span class=\"se\">\\</span>\n       <span class=\"k\">${</span><span class=\"nv\">PROTO_DIR</span><span class=\"k\">}</span>/bookstore.proto\n\n<span class=\"c\"># Run protoc to generate the REST gateway (using grpc-gateway)</span>\nprotoc <span class=\"nt\">--proto_path</span><span class=\"o\">=</span><span class=\"k\">${</span><span class=\"nv\">PROTO_DIR</span><span class=\"k\">}</span> <span class=\"se\">\\</span>\n       <span class=\"nt\">--grpc-gateway_out</span><span class=\"o\">=</span><span class=\"k\">${</span><span class=\"nv\">GO_OUT_DIR</span><span class=\"k\">}</span> <span class=\"se\">\\</span>\n       <span class=\"k\">${</span><span class=\"nv\">PROTO_DIR</span><span class=\"k\">}</span>/bookstore.proto\n\n<span class=\"c\"># Run protoc with our custom plugin to generate the MCP server (Python)</span>\nprotoc <span class=\"nt\">--proto_path</span><span class=\"o\">=</span><span class=\"k\">${</span><span class=\"nv\">PROTO_DIR</span><span class=\"k\">}</span> <span class=\"se\">\\</span>\n       <span class=\"nt\">--plugin</span><span class=\"o\">=</span>protoc-gen-mcp<span class=\"o\">=</span>./bin/protoc-gen-mcp <span class=\"se\">\\</span>\n       <span class=\"nt\">--mcp_out</span><span class=\"o\">=</span><span class=\"k\">${</span><span class=\"nv\">PYTHON_MCP_OUT_DIR</span><span class=\"k\">}</span> <span class=\"se\">\\</span>\n       <span class=\"k\">${</span><span class=\"nv\">PROTO_DIR</span><span class=\"k\">}</span>/bookstore.proto\n\n<span class=\"nb\">echo</span> <span class=\"s2\">\"Code generation complete.\"</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This workflow represents a highly sophisticated software engineering and DevOps practice. Instead of maintaining separate implementations for gRPC, REST, and MCP, a single, version-controlled .proto file defines the canonical service contract. This drastically reduces code duplication, eliminates synchronization issues between interfaces, and enforces consistency across the entire system—an immense benefit for managing complex microservice ecosystems.</p>\n\n<h2>\n  \n  \n  <strong>6. Production-Level Considerations: Security, Scalability, and Performance</strong>\n</h2>\n\n<p>Transitioning an MCP prototype to a robust production system requires rigorous attention to security, scalability, and performance. This section details the risks and best practices for deploying MCP in enterprise environments.</p>\n\n<h3>\n  \n  \n  <strong>6.1. A Taxonomy of MCP Security Risks and Mitigation Strategies</strong>\n</h3>\n\n<p>MCP's ability to connect LLMs to external systems introduces attack vectors that must be managed proactively. The following table summarizes key vulnerabilities and recommended controls.8</p>\n\n<p><strong>Table 2: MCP Security Vulnerabilities and Recommended Controls</strong></p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Vulnerability</th>\n<th>Description</th>\n<th>Affected Component</th>\n<th>Recommended Control(s)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Confused Deputy Problem</strong></td>\n<td>A server executes actions with its own elevated privileges on behalf of a low-privilege user.</td>\n<td>Server</td>\n<td>Implement end-to-end authentication and authorization (OAuth 2.1), ensuring the server acts with the <em>user's</em> privileges, not its own.</td>\n</tr>\n<tr>\n<td><strong>Command Injection</strong></td>\n<td>On local servers, malicious inputs are executed as operating system commands.</td>\n<td>Server (Local)</td>\n<td>Rigorously validate and sanitize all user inputs. Run local servers in sandboxed environments with minimal privileges.</td>\n</tr>\n<tr>\n<td><strong>Prompt/Tool Injection</strong></td>\n<td>A malicious user or compromised server tricks the LLM into invoking the wrong tool or performing unintended actions.</td>\n<td>Host, Client, Server</td>\n<td>The Host should allow users to confirm critical actions. Use only trusted, digitally signed servers. Implement SAST/SCA scanning in server development pipelines.</td>\n</tr>\n<tr>\n<td><strong>Data Exfiltration</strong></td>\n<td>A malicious server exploits tool calls or the sampling primitive to leak sensitive session data.</td>\n<td>Server, Client</td>\n<td>The Host should strictly control which servers can request sampling. The Client should allow the user to approve or reject sampling requests. Limit data passed to servers to the minimum necessary.</td>\n</tr>\n<tr>\n<td><strong>Supply Chain Risks</strong></td>\n<td>Use of third-party MCP servers that are malicious, vulnerable, or unmaintained.</td>\n<td>Host</td>\n<td>Use a trusted server registry. Pin server versions and notify users of updates. Require MCP components to be digitally signed by their developers.</td>\n</tr>\n</tbody>\n</table></div>\n\n<h3>\n  \n  \n  <strong>6.2. Architectural Patterns for Scaling MCP Servers</strong>\n</h3>\n\n<p>To handle high traffic, MCP servers must be designed for horizontal scalability and resilience.</p>\n\n<ul>\n<li>\n<strong>Load Balancing:</strong> A load balancer in front of multiple server instances is essential. For stateful operations, strategies like consistent hashing can be used to maintain session affinity, ensuring requests from the same agent are routed to the same server instance.33\n</li>\n<li>\n<strong>Horizontal Scalability:</strong> The lightweight, focused design of MCP servers makes them ideal for horizontal scaling. Using container orchestrators like Kubernetes, you can configure the Horizontal Pod Autoscaler (HPA) to automatically add or remove server replicas based on load metrics like requests per second or CPU utilization.33\n</li>\n<li>\n<strong>Distributed State Management:</strong> To enable horizontal scaling, servers should be designed to be stateless. Any necessary session state should be externalized to a distributed store, such as Redis. This allows any server instance to handle any request, as the session context can be retrieved from the shared store.33\n</li>\n<li>\n<strong>High Availability:</strong> Resilience is achieved through redundancy. Deploying server instances across multiple availability zones (AZs) ensures the service remains operational even if one zone fails. Health checks and circuit breaker patterns are crucial for detecting unhealthy instances and preventing cascading failures.10\n</li>\n<li>\n<strong>Transport Evolution for Scalability:</strong> As mentioned earlier, the use of Streamable HTTP is a key enabler for scalability, especially on serverless platforms like AWS Lambda or Google Cloud Functions, where long-lived connections are impractical and expensive.9</li>\n</ul>\n\n<h3>\n  \n  \n  <strong>6.3. Performance Tuning, Observability, and Protocol Versioning</strong>\n</h3>\n\n<ul>\n<li>\n<strong>Performance Tuning and Metrics:</strong> Monitoring key performance metrics is vital. This includes latency (p95, p99 percentiles), throughput (requests per second), error rates, CPU/memory utilization, and cache hit rates. Identifying bottlenecks through continuous monitoring allows for targeted optimizations.36\n</li>\n<li>\n<strong>Observability:</strong> In a distributed microservices architecture, observability is paramount. Implementing structured logging, distributed tracing (using standards like OpenTelemetry), and monitoring dashboards (with tools like Prometheus and Grafana) provides the necessary visibility to debug issues and understand end-to-end system behavior.33\n</li>\n<li>\n<strong>Model Fine-Tuning for MCP:</strong> An advanced technique for optimizing performance is to fine-tune the LLM on a dataset of MCP tool-calling examples. This can significantly improve the model's ability to select the correct tool, provide the right arguments, and interpret the results, reducing latency and error rates by decreasing the number of trial-and-error attempts in the reasoning cycle.37\n</li>\n<li>\n<strong>Protocol Versioning:</strong> MCP uses a date-based versioning scheme (YYYY-MM-DD) that changes only when backward-incompatible changes are introduced.28 This conservative versioning strategy is designed for ecosystem stability. It allows new features to be added in a backward-compatible manner without forcing immediate upgrades across the entire network of clients and servers, promoting a gradual and robust evolution of the standard.</li>\n</ul>\n\n<h2>\n  \n  \n  <strong>7. Conclusion and Future Directions</strong>\n</h2>\n\n<p>The Model Context Protocol has emerged as a critical piece of infrastructure for the advancement of artificial intelligence, moving the field from isolated demonstrations to integrated, production-grade agentic systems. By applying robust software engineering principles—standardization, modularity, and separation of concerns—to the challenge of LLM integration, MCP provides the necessary architectural foundation for composability, security, and scalability. It enables developers to build systems where LLMs are not just text generators but dynamic agents that can interact with the digital world in a reliable and auditable manner.</p>\n\n<p>The future trajectory of MCP points towards even deeper integration with enterprise ecosystems. The development of more sophisticated authorization extensions that integrate seamlessly with corporate identity providers (IdPs) and Single Sign-On (SSO) solutions is expected, simplifying access management at scale.9 The ecosystem of servers will continue to grow, with an increasing focus on certified, trusted servers that adhere to strict security and maintenance standards. Furthermore, as agents become more complex, the protocol itself may evolve to support inter-agent, not just agent-tool, interactions.</p>\n\n<p>Ultimately, MCP should be viewed not as a final product but as a foundational protocol, analogous to the role that HTTP and TCP/IP played for the web and computer networking.7 It is the standardized communication layer upon which the next generation of intelligent, autonomous applications will be built, enabling a future where AI systems can collaborate securely and efficiently to solve increasingly complex problems.</p>\n\n<h3>\n  \n  \n  <strong>References cited</strong>\n</h3>\n\n<ol>\n<li>What is Model Context Protocol (MCP)? A guide | Google Cloud, acessado em outubro 28, 2025, <a href=\"https://cloud.google.com/discover/what-is-model-context-protocol\" rel=\"noopener noreferrer\">https://cloud.google.com/discover/what-is-model-context-protocol</a>\n</li>\n<li>Building Your First Model Context Protocol Server - The New Stack, acessado em outubro 28, 2025, <a href=\"https://thenewstack.io/building-your-first-model-context-protocol-server/\" rel=\"noopener noreferrer\">https://thenewstack.io/building-your-first-model-context-protocol-server/</a>\n</li>\n<li>Model Context Protocol (MCP) 101: How LLMs Connect to the Real World, acessado em outubro 28, 2025, <a href=\"https://datasciencedojo.com/blog/model-context-protocol-mcp/\" rel=\"noopener noreferrer\">https://datasciencedojo.com/blog/model-context-protocol-mcp/</a>\n</li>\n<li>MCP 101: An Introduction to Model Context Protocol | DigitalOcean, acessado em outubro 28, 2025, <a href=\"https://www.digitalocean.com/community/tutorials/model-context-protocol\" rel=\"noopener noreferrer\">https://www.digitalocean.com/community/tutorials/model-context-protocol</a>\n</li>\n<li>What is the Model Context Protocol (MCP)? - Cloudflare, acessado em outubro 28, 2025, <a href=\"https://www.cloudflare.com/learning/ai/what-is-model-context-protocol-mcp/\" rel=\"noopener noreferrer\">https://www.cloudflare.com/learning/ai/what-is-model-context-protocol-mcp/</a>\n</li>\n<li>What is Model Context Protocol (MCP)? - IBM, acessado em outubro 28, 2025, <a href=\"https://www.ibm.com/think/topics/model-context-protocol\" rel=\"noopener noreferrer\">https://www.ibm.com/think/topics/model-context-protocol</a>\n</li>\n<li>A beginners Guide on Model Context Protocol (MCP) - OpenCV, acessado em outubro 28, 2025, <a href=\"https://opencv.org/blog/model-context-protocol/\" rel=\"noopener noreferrer\">https://opencv.org/blog/model-context-protocol/</a>\n</li>\n<li>Model Context Protocol (MCP): Understanding security risks and ..., acessado em outubro 28, 2025, <a href=\"https://www.redhat.com/en/blog/model-context-protocol-mcp-understanding-security-risks-and-controls\" rel=\"noopener noreferrer\">https://www.redhat.com/en/blog/model-context-protocol-mcp-understanding-security-risks-and-controls</a>\n</li>\n<li>The current state of MCP (Model Context Protocol) - Elasticsearch Labs, acessado em outubro 28, 2025, <a href=\"https://www.elastic.co/search-labs/blog/mcp-current-state\" rel=\"noopener noreferrer\">https://www.elastic.co/search-labs/blog/mcp-current-state</a>\n</li>\n<li>AI Model Context Architecture (MCP) Scaling: Load Balancing, Queuing, and API Governance | by Valdez Ladd | Aug, 2025 | Medium, acessado em outubro 28, 2025, <a href=\"https://medium.com/@oracle_43885/ai-model-context-architecture-mcp-scaling-load-balancing-queuing-and-api-governance-c8d9ecd0b482\" rel=\"noopener noreferrer\">https://medium.com/@oracle_43885/ai-model-context-architecture-mcp-scaling-load-balancing-queuing-and-api-governance-c8d9ecd0b482</a>\n</li>\n<li>Prompt Engineering vs Context Engineering — and Why Both Matter for AI Coding - Reddit, acessado em outubro 28, 2025, <a href=\"https://www.reddit.com/r/ClaudeAI/comments/1nzt1gh/prompt_engineering_vs_context_engineering_and_why/\" rel=\"noopener noreferrer\">https://www.reddit.com/r/ClaudeAI/comments/1nzt1gh/prompt_engineering_vs_context_engineering_and_why/</a>\n</li>\n<li>Effective context engineering for AI agents - Anthropic, acessado em outubro 28, 2025, <a href=\"https://www.anthropic.com/engineering/effective-context-engineering-for-ai-agents\" rel=\"noopener noreferrer\">https://www.anthropic.com/engineering/effective-context-engineering-for-ai-agents</a>\n</li>\n<li>Context Engineering vs Prompt Engineering | by Mehul Gupta | Data Science in Your Pocket, acessado em outubro 28, 2025, <a href=\"https://medium.com/data-science-in-your-pocket/context-engineering-vs-prompt-engineering-379e9622e19d\" rel=\"noopener noreferrer\">https://medium.com/data-science-in-your-pocket/context-engineering-vs-prompt-engineering-379e9622e19d</a>\n</li>\n<li>Prompt Engineering vs Context Engineering Explained | by Tahir - Medium, acessado em outubro 28, 2025, <a href=\"https://medium.com/@tahirbalarabe2/prompt-engineering-vs-context-engineering-explained-ce2f37179061\" rel=\"noopener noreferrer\">https://medium.com/@tahirbalarabe2/prompt-engineering-vs-context-engineering-explained-ce2f37179061</a>\n</li>\n<li>Context Engineering and MCP Toolbox: The Hidden Backbone of Modern AI You Must Know - MyExamCloud Blog Article, acessado em outubro 28, 2025, <a href=\"https://www.myexamcloud.com/blog/context-engineering-mcp-toolbox-modern-ai.article\" rel=\"noopener noreferrer\">https://www.myexamcloud.com/blog/context-engineering-mcp-toolbox-modern-ai.article</a>\n</li>\n<li>MCP and RAG: A Powerful Partnership for Advanced AI Applications ..., acessado em outubro 28, 2025, <a href=\"https://medium.com/the-ai-forum/mcp-and-rag-a-powerful-partnership-for-advanced-ai-applications-858c074fc5db\" rel=\"noopener noreferrer\">https://medium.com/the-ai-forum/mcp-and-rag-a-powerful-partnership-for-advanced-ai-applications-858c074fc5db</a>\n</li>\n<li>Comparing MCP vs LangChain/ReAct for Chatbots - Glama, acessado em outubro 28, 2025, <a href=\"https://glama.ai/blog/2025-09-02-comparing-mcp-vs-lang-chainre-act-for-chatbots\" rel=\"noopener noreferrer\">https://glama.ai/blog/2025-09-02-comparing-mcp-vs-lang-chainre-act-for-chatbots</a>\n</li>\n<li>How AI Agents Are Getting Smarter: MCP, ReAct, RAG &amp; A2A Explained Simply, acessado em outubro 28, 2025, <a href=\"https://dev.to/kumarprateek18/how-ai-agents-are-getting-smarter-mcp-react-rag-a2a-explained-simply-2dh1\">https://dev.to/kumarprateek18/how-ai-agents-are-getting-smarter-mcp-react-rag-a2a-explained-simply-2dh1</a>\n</li>\n<li>Dynamic ReAct: Scalable Tool Selection for Large-Scale MCP Environments - arXiv, acessado em outubro 28, 2025, <a href=\"https://arxiv.org/html/2509.20386v1\" rel=\"noopener noreferrer\">https://arxiv.org/html/2509.20386v1</a>\n</li>\n<li>Supercharging LangChain: Integrating 2000+ MCP with ReAct | by hideya - Medium, acessado em outubro 28, 2025, <a href=\"https://medium.com/@h1deya/supercharging-langchain-integrating-450-mcp-with-react-d4e467cbf41a\" rel=\"noopener noreferrer\">https://medium.com/@h1deya/supercharging-langchain-integrating-450-mcp-with-react-d4e467cbf41a</a>\n</li>\n<li>Architecture overview - Model Context Protocol, acessado em outubro 28, 2025, <a href=\"https://modelcontextprotocol.io/docs/learn/architecture\" rel=\"noopener noreferrer\">https://modelcontextprotocol.io/docs/learn/architecture</a>\n</li>\n<li>Architecture - Model Context Protocol, acessado em outubro 28, 2025, <a href=\"https://modelcontextprotocol.io/specification/2025-03-26/architecture\" rel=\"noopener noreferrer\">https://modelcontextprotocol.io/specification/2025-03-26/architecture</a>\n</li>\n<li>The Model Context Protocol (MCP) — A Complete Tutorial | by Dr. Nimrita Koul | Medium, acessado em outubro 28, 2025, <a href=\"https://medium.com/@nimritakoul01/the-model-context-protocol-mcp-a-complete-tutorial-a3abe8a7f4ef\" rel=\"noopener noreferrer\">https://medium.com/@nimritakoul01/the-model-context-protocol-mcp-a-complete-tutorial-a3abe8a7f4ef</a>\n</li>\n<li>How the Model Context Protocol (MCP) Works | Lucidworks, acessado em outubro 28, 2025, <a href=\"https://lucidworks.com/blog/how-the-model-context-protocol-works-a-technical-deep-dive\" rel=\"noopener noreferrer\">https://lucidworks.com/blog/how-the-model-context-protocol-works-a-technical-deep-dive</a>\n</li>\n<li>What Is the Model Context Protocol (MCP) and How It Works - Descope, acessado em outubro 28, 2025, <a href=\"https://www.descope.com/learn/post/mcp\" rel=\"noopener noreferrer\">https://www.descope.com/learn/post/mcp</a>\n</li>\n<li>Extend large language models powered by Amazon SageMaker AI using Model Context Protocol | Artificial Intelligence - AWS, acessado em outubro 28, 2025, <a href=\"https://aws.amazon.com/blogs/machine-learning/extend-large-language-models-powered-by-amazon-sagemaker-ai-using-model-context-protocol/\" rel=\"noopener noreferrer\">https://aws.amazon.com/blogs/machine-learning/extend-large-language-models-powered-by-amazon-sagemaker-ai-using-model-context-protocol/</a>\n</li>\n<li>Help or Hurdle? Rethinking Model Context Protocol-Augmented Large Language Models, acessado em outubro 28, 2025, <a href=\"https://arxiv.org/html/2508.12566v1\" rel=\"noopener noreferrer\">https://arxiv.org/html/2508.12566v1</a>\n</li>\n<li>Versioning - Model Context Protocol, acessado em outubro 28, 2025, <a href=\"https://modelcontextprotocol.io/specification/versioning\" rel=\"noopener noreferrer\">https://modelcontextprotocol.io/specification/versioning</a>\n</li>\n<li>MCP protocol buffers: The ultimate guide to efficient data serialization in 2025 - BytePlus, acessado em outubro 28, 2025, <a href=\"https://www.byteplus.com/en/topic/541241\" rel=\"noopener noreferrer\">https://www.byteplus.com/en/topic/541241</a>\n</li>\n<li>Why not use Protobuf messages and gRPC transport? #1144 - GitHub, acessado em outubro 28, 2025, <a href=\"https://github.com/modelcontextprotocol/modelcontextprotocol/discussions/1144\" rel=\"noopener noreferrer\">https://github.com/modelcontextprotocol/modelcontextprotocol/discussions/1144</a>\n</li>\n<li>Building MCP Servers from Protobuf (Part 1): Protobuf to REST API, acessado em outubro 28, 2025, <a href=\"https://www.enterprisedb.com/blog/building-mcp-servers-protobuf-part1-protobuf-rest-api\" rel=\"noopener noreferrer\">https://www.enterprisedb.com/blog/building-mcp-servers-protobuf-part1-protobuf-rest-api</a>\n</li>\n<li>Building MCP Servers from Protobuf (Part2): Automate MCP Server ..., acessado em outubro 28, 2025, <a href=\"https://www.enterprisedb.com/blog/building-mcp-servers-protobuf-part2-automate-mcp-server-creation-protoc-plugins\" rel=\"noopener noreferrer\">https://www.enterprisedb.com/blog/building-mcp-servers-protobuf-part2-automate-mcp-server-creation-protoc-plugins</a>\n</li>\n<li>Scaling MCP Servers: Architecture Patterns for Production | Devsatva - Data Engineering &amp; AI Consultancy, acessado em outubro 28, 2025, <a href=\"https://devsatva.com/blog/mcp-scaling-production\" rel=\"noopener noreferrer\">https://devsatva.com/blog/mcp-scaling-production</a>\n</li>\n<li>Can Model Context Protocol (MCP) scale to support hundreds of simultaneous users?, acessado em outubro 28, 2025, <a href=\"https://milvus.io/ai-quick-reference/can-model-context-protocol-mcp-scale-to-support-hundreds-of-simultaneous-users\" rel=\"noopener noreferrer\">https://milvus.io/ai-quick-reference/can-model-context-protocol-mcp-scale-to-support-hundreds-of-simultaneous-users</a>\n</li>\n<li>Deploy scalable MCP servers with Ray Serve - Anyscale Docs, acessado em outubro 28, 2025, <a href=\"https://docs.anyscale.com/mcp/scalable-remote-mcp-deployment\" rel=\"noopener noreferrer\">https://docs.anyscale.com/mcp/scalable-remote-mcp-deployment</a>\n</li>\n<li>What metrics should I track for a healthy Model Context Protocol (MCP) service? - Milvus, acessado em outubro 28, 2025, <a href=\"https://milvus.io/ai-quick-reference/what-metrics-should-i-track-for-a-healthy-model-context-protocol-mcp-service\" rel=\"noopener noreferrer\">https://milvus.io/ai-quick-reference/what-metrics-should-i-track-for-a-healthy-model-context-protocol-mcp-service</a>\n</li>\n<li>MCP Model Fine-Tuning: Techniques &amp; Best Practices 2025 - BytePlus, acessado em outubro 28, 2025, <a href=\"https://www.byteplus.com/en/topic/541921\" rel=\"noopener noreferrer\">https://www.byteplus.com/en/topic/541921</a>\n</li>\n<li>A Measurement Study of Model Context Protocol - arXiv, acessado em outubro 28, 2025, <a href=\"https://arxiv.org/html/2509.25292v1\" rel=\"noopener noreferrer\">https://arxiv.org/html/2509.25292v1</a>\n</li>\n</ol>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-451m","date":1761674961,"author":"Vibe YouTube","guid":319352,"unread":true,"content":"<p><strong>Build a Python AI Agent in 10 Minutes</strong><br><br>\nTech With Tim’s quick tutorial shows you how to spin up a Python-based AI agent from scratch. You’ll grab your OpenAI API key, install and import the right libraries, define custom tools, hook in an LLM-powered agent, write a small driver script, and test it—all in under ten minutes.</p>\n\n<p>Everything you need is on GitHub, and the YouTube video breaks it down with handy timestamps (00:00 install &amp; setup → 09:45 testing). Whether you’re new to AI agents or just need a rapid prototype, this guide has you covered.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=gaGaPpnexxA\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-3nlp","date":1761674947,"author":"Vibe YouTube","guid":319351,"unread":true,"content":"<p><strong>3 Unique Python Features You NEED To Know</strong></p>\n\n<p>Python’s got some hidden gems: the <strong>match statement</strong> brings pattern matching like in other languages, <strong>dataclasses</strong> slash boilerplate by auto-generating init/repr methods, and <strong>positional-only &amp; keyword-only arguments</strong> let you lock down function signatures. These modern tweaks fly under the radar but pack a serious punch for cleaner, safer code.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=e0FvoOtdAQc\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"SERP Similarity Tool with HasData & Streamlit","url":"https://dev.to/valentina_skakun/serp-similarity-tool-with-hasdata-streamlit-4oe1","date":1761673456,"author":"Valentina Skakun","guid":319321,"unread":true,"content":"<p><em>This is a submission for the <a href=\"https://dev.to/challenges/hacktoberfest2025\">2025 Hacktoberfest Writing Challenge</a>: Maintainer Spotlight</em></p>\n\n<p>I needed a quick way to check how similar Google SERPs are for different keywords. Couldn’t find a simple, free tool that worked well, so I built one.</p>\n\n<p>It uses HasData’s SERP API and runs on Streamlit. HasData gives you 1000 free credits when you sign up, and their API scales smoothly if you need more. The app is live, and the code is open on GitHub.</p>\n\n<p><a href=\"https://similarityanalyzer.streamlit.app/\" rel=\"noopener noreferrer\">Run on Streamlit</a> | <a href=\"https://github.com/valka465/similarity_analyzer\" rel=\"noopener noreferrer\">View on GitHub</a></p>\n\n<h2>\n  \n  \n  The Problem\n</h2>\n\n<p>SEO tools that actually give you a similarity breakdown of SERPs are either limited or behind a paywall. Keyword Insights worked, but it capped at five keywords and now costs money. That’s frustrating when you need quick checks for multiple keywords.</p>\n\n<p>I wanted something fast and simple.</p>\n\n<h2>\n  \n  \n  The Solution\n</h2>\n\n<p>The tool compares multiple keywords and shows how much their SERPs overlap.</p>\n\n<ul>\n<li>Powered by HasData SERP API</li>\n<li>Built with Streamlit</li>\n<li>Works with any number of keywords</li>\n<li>Free to start with HasData’s trial credits</li>\n</ul>\n\n<p>Just enter your API key, add keywords (comma or new line), and get a SERP similarity breakdown in seconds.</p>\n\n<h2>\n  \n  \n  How to Use\n</h2>\n\n<p><strong>Step 1: Get a HasData API Key</strong><br>\nSign up at <a href=\"https://app.hasdata.com/sign-up\" rel=\"noopener noreferrer\">HasData</a> and get your 1000 free credits.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F5i3pzc93uvbafmvgm6o5.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F5i3pzc93uvbafmvgm6o5.png\" alt=\"Get HasData's API key\" width=\"800\" height=\"362\"></a></p>\n\n<p><strong>Step 2: Run the App</strong><br>\nOpen the <a href=\"https://similarityanalyzer.streamlit.app/\" rel=\"noopener noreferrer\">Streamlit link</a> or clone the <a href=\"https://github.com/valka465/similarity_analyzer\" rel=\"noopener noreferrer\">GitHub repo</a>. No setup needed, just run it.</p>\n\n<p><strong>Step 3: Enter Keywords</strong><br>\nPaste your keywords separated by commas or new lines.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F2tqy2whs24lo6n6239ei.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F2tqy2whs24lo6n6239ei.png\" alt=\"Put keywords\" width=\"800\" height=\"362\"></a></p>\n\n<p><strong>Step 4: Check Results</strong><br>\nThe tool shows a SERP similarity breakdown with clear, structured data.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ff3q67t5bltbrvq49ddo1.gif\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ff3q67t5bltbrvq49ddo1.gif\" alt=\"Check the result\" width=\"560\" height=\"315\"></a></p>\n\n<h2>\n  \n  \n  Under the Hood\n</h2>\n\n<ul>\n<li>Python 3.11+</li>\n<li>Streamlit for UI</li>\n<li>HasData SERP API for search data</li>\n<li>Simple to extend with filters, charts, or exports</li>\n<li>Deployed via Streamlit Cloud</li>\n</ul>\n\n<p>Clone the repo, set your API key, install requirements <code>pip install -r requirements.txt</code>, and run <code>streamlit run streamlit_app.py</code>, or just use the hosted version.</p>\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>Practical, minimal, and free to start. It does one job well: showing how similar SERPs are between keywords.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Current Project (October 2025)","url":"https://dev.to/jshum5200/current-project-october-2025-126","date":1761673060,"author":"Johnny Shumway","guid":319320,"unread":true,"content":"<h2>\n  \n  \n  PySMF:\n</h2>\n\n<p>I've recently been working on these two projects! The first is PySMF an SMF Model Viewer for the old Terminal Reality 4x4 Evo 2 game models. The SMF format is proprietary, and through some reverse engineering, programming, and more I made this model viewer display the geometry and have the ability to export it to OBJ.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fzu8uxi0yprrpl6nmdpy9.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fzu8uxi0yprrpl6nmdpy9.png\" alt=\"PySMF Screenshot\" width=\"800\" height=\"466\"></a><br>\n<a href=\"https://github.com/JShum00/SMFViewer\" rel=\"noopener noreferrer\">PySMF GitHub Repo</a><br></p>\n\n<h2>\n  \n  \n  PyPOD:\n</h2>\n\n<p>The second one is PyPOD which is based on github user \"Dummiesman\" project Poddy. Poddy was written in C# to open the proprietary POD formats that hold the game assets and other configuration files. My program PyPOD is written in Python and pretty much does the same thing, just not as many features as Poddy, or at least no yet.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fxcb4yeyp421qvibh0n8k.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fxcb4yeyp421qvibh0n8k.png\" alt=\"PyPOD Screenshot\" width=\"650\" height=\"482\"></a><br>\n<a href=\"https://github.com/JShum00/PyPOD\" rel=\"noopener noreferrer\">PyPOD GitHub Repo</a><br></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Art of Scope Management in Modular Python Design","url":"https://dev.to/hevalhazalkurt/the-art-of-scope-management-in-modular-python-design-2ha8","date":1761671935,"author":"Heval Hazal Kurt","guid":319319,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F01lqi3ji39dhny29snnn.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F01lqi3ji39dhny29snnn.jpg\" alt=\"The Art of Scope Management in Modular Python Design\" width=\"800\" height=\"533\"></a></p>\n\n<p>When you work on a large Python codebase, especially in backend projects using Django, FastAPI, or Flask, you probably see the chaos that poor scope management can cause. From mysterious bugs and unpredictable state to namespace collisions and tangled dependencies, things get messy fast when variable scope isn’t handled with care.</p>\n\n<h2>\n  \n  \n  What Is “Scope” in Python?\n</h2>\n\n<p>In simple terms, scope is where a variable can be seen or used. For example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">greet</span><span class=\"p\">():</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Alice</span><span class=\"sh\">\"</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>  <span class=\"c1\"># NameError: name is not defined\n</span></code></pre>\n\n</div>\n\n\n\n<p>Here, <code>name</code> is only visible inside the <code>greet()</code> function. That’s its scope. Python uses something called the LEGB rule to decide how it looks for variables.</p>\n\n<h2>\n  \n  \n  The LEGB Rule: Python’s Scope Lookup Chain\n</h2>\n\n<p>This rule stands for:</p>\n\n<ul>\n<li>\n<strong>L</strong>ocal – variables defined inside a function.</li>\n<li>\n<strong>E</strong>nclosing – variables in parent functions when functions are nested.</li>\n<li>\n<strong>G</strong>lobal – variables defined at the module level.</li>\n<li>\n<strong>B</strong>uilt-in – stuff that comes with Python, like <code>len</code>, <code>print</code>, <code>range</code>.</li>\n</ul>\n\n<p>When you reference a variable, Python starts at the innermost scope and moves outward until it finds it. Here’s a quick example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">global</span><span class=\"sh\">\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">outer</span><span class=\"p\">():</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">enclosing</span><span class=\"sh\">\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">inner</span><span class=\"p\">():</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">local</span><span class=\"sh\">\"</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n    <span class=\"nf\">inner</span><span class=\"p\">()</span>\n\n<span class=\"nf\">outer</span><span class=\"p\">()</span>  <span class=\"c1\"># prints \"local\"\n</span></code></pre>\n\n</div>\n\n\n\n<p>If you remove <code>x = \"local\"</code> from <code>inner()</code>, Python prints <code>\"enclosing\"</code> — and if that’s gone too, it prints <code>\"global\"</code>. This rule is simple… until your app grows.</p>\n\n<h2>\n  \n  \n  Why Scope Matters\n</h2>\n\n<p>Let’s say you're building a backend service with FastAPI, and you start breaking your code into modules:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>/project\n  ├── main.py\n  ├── database.py\n  ├── models.py\n  ├── routers/\n  │     └── user.py\n</code></pre>\n\n</div>\n\n\n\n<p>If you don’t manage scope carefully, you’ll run into things like:</p>\n\n<ul>\n<li>Circular imports</li>\n<li>Unpredictable globals</li>\n<li>Variables that vanish or leak</li>\n<li>Hard-to-debug state in production</li>\n</ul>\n\n<p>Let’s see how you can manage scope cleanly.</p>\n\n<h2>\n  \n  \n  Rule 1: Keep Your Global Scope Clean\n</h2>\n\n<p>Your <code>main.py</code> is your entry point. It should only:</p>\n\n<ul>\n<li>Start the app</li>\n<li>Include global configuration (maybe via <code>os.environ</code>)</li>\n<li>Register routers and services</li>\n</ul>\n\n<p><strong>Good:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># main.py\n</span><span class=\"kn\">from</span> <span class=\"n\">fastapi</span> <span class=\"kn\">import</span> <span class=\"n\">FastAPI</span>\n<span class=\"kn\">from</span> <span class=\"n\">routers</span> <span class=\"kn\">import</span> <span class=\"n\">user</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">FastAPI</span><span class=\"p\">()</span>\n\n<span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">include_router</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">router</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Bad:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># main.py\n</span><span class=\"n\">db_connection</span> <span class=\"o\">=</span> <span class=\"nf\">connect_to_db</span><span class=\"p\">()</span>\n<span class=\"n\">SOME_MAGIC_GLOBAL_STATE</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"c1\"># Used all over your app without structure\n</span></code></pre>\n\n</div>\n\n\n\n<p>Why it’s bad: When you use global mutable objects, things can go wrong in concurrency, testing, or scaling. They also make your app harder to test.</p>\n\n<p><strong>Instead</strong>: Pass state as arguments or use dependency injection, FastAPI supports this.</p>\n\n<h2>\n  \n  \n  Use Module Scope for Reusability\n</h2>\n\n<p>Imagine you have a <code>database.py</code> file that sets up your DB engine:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># database.py\n</span><span class=\"kn\">from</span> <span class=\"n\">sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">create_engine</span>\n<span class=\"kn\">from</span> <span class=\"n\">sqlalchemy.orm</span> <span class=\"kn\">import</span> <span class=\"n\">sessionmaker</span>\n\n<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"nf\">create_engine</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">sqlite:///example.db</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">SessionLocal</span> <span class=\"o\">=</span> <span class=\"nf\">sessionmaker</span><span class=\"p\">(</span><span class=\"n\">bind</span><span class=\"o\">=</span><span class=\"n\">engine</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This is good use of module scope. When you import <code>SessionLocal</code>, it’s consistent and controlled.</p>\n\n<p>Example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># routers/user.py\n</span><span class=\"kn\">from</span> <span class=\"n\">fastapi</span> <span class=\"kn\">import</span> <span class=\"n\">Depends</span>\n<span class=\"kn\">from</span> <span class=\"n\">sqlalchemy.orm</span> <span class=\"kn\">import</span> <span class=\"n\">Session</span>\n<span class=\"kn\">from</span> <span class=\"n\">database</span> <span class=\"kn\">import</span> <span class=\"n\">SessionLocal</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_db</span><span class=\"p\">():</span>\n    <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"nc\">SessionLocal</span><span class=\"p\">()</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">yield</span> <span class=\"n\">db</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@router.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/users/</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">read_users</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"nc\">Depends</span><span class=\"p\">(</span><span class=\"n\">get_db</span><span class=\"p\">)):</span>\n    <span class=\"k\">return</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">).</span><span class=\"nf\">all</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Notice how we don’t expose too much. We don’t let <code>engine</code> float around everywhere. <code>SessionLocal</code> is the scoped, reusable object.</p>\n\n<h2>\n  \n  \n  Avoid Import-Time Side Effects\n</h2>\n\n<p>A common mistake:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># models.py\n</span><span class=\"kn\">from</span> <span class=\"n\">database</span> <span class=\"kn\">import</span> <span class=\"n\">SessionLocal</span>\n\n<span class=\"nc\">SessionLocal</span><span class=\"p\">().</span><span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">DROP TABLE users;</span><span class=\"sh\">\"</span><span class=\"p\">)</span>  <span class=\"c1\"># this runs on import\n</span></code></pre>\n\n</div>\n\n\n\n<p>Importing a module should not perform dangerous actions. That’s a scope + timing issue.</p>\n\n<p>Instead:</p>\n\n<ul>\n<li>Keep logic inside functions.</li>\n<li>Only run them when explicitly called.</li>\n<li>Avoid code at the top level that mutates or acts.</li>\n</ul>\n\n<h2>\n  \n  \n  Advanced Scope Patterns for Large Projects\n</h2>\n\n<p>Let’s get into deeper waters.</p>\n\n<h3>\n  \n  \n  1. Dependency Injection with Scope Control\n</h3>\n\n<p>FastAPI lets you use function-level scope to inject services:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">get_current_user</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"nc\">Depends</span><span class=\"p\">(</span><span class=\"n\">oauth2_scheme</span><span class=\"p\">)):</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"nf\">decode_token</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">user</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This is better than making <code>current_user</code> a global variable. It’s safer, more testable, and better scoped.</p>\n\n<h3>\n  \n  \n  Using Classes to Encapsulate State\n</h3>\n\n<p>Sometimes, you need state. Don’t abuse globals, use classes:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># services/user_service.py\n</span><span class=\"k\">class</span> <span class=\"nc\">UserService</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">db</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_user</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">).</span><span class=\"nf\">filter_by</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">user_id</span><span class=\"p\">).</span><span class=\"nf\">first</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>In your endpoint:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@router.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/users/{user_id}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_user</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"nc\">Depends</span><span class=\"p\">(</span><span class=\"n\">get_db</span><span class=\"p\">)):</span>\n    <span class=\"n\">service</span> <span class=\"o\">=</span> <span class=\"nc\">UserService</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">service</span><span class=\"p\">.</span><span class=\"nf\">get_user</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Here, <code>db</code> is passed down cleanly, no surprises, no globals.</p>\n\n<h3>\n  \n  \n  Factory Functions and Closures for Configurable Behavior\n</h3>\n\n<p>Sometimes closures help with scope:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">make_greeting</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">prefix</span><span class=\"si\">}</span><span class=\"s\">, </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">!</span><span class=\"sh\">\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">greet</span>\n\n<span class=\"n\">hello</span> <span class=\"o\">=</span> <span class=\"nf\">make_greeting</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Hello</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Alice</span><span class=\"sh\">\"</span><span class=\"p\">))</span>  <span class=\"c1\"># Hello, Alice!\n</span></code></pre>\n\n</div>\n\n\n\n<p>Use this in backends to build things like custom validators, filters, or pipelines with stored context.</p>\n\n<h2>\n  \n  \n  Clean Scope = Clean Code\n</h2>\n\n<p>To wrap it up, good scope management makes your Python code:</p>\n\n<ul>\n<li>Easier to test</li>\n<li>Easier to maintain</li>\n<li>Safer in production</li>\n<li>Faster to understand</li>\n</ul>\n\n<p>Here’s a quick cheat sheet:</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th><strong>Do This</strong></th>\n<th><strong>Avoid This</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Use local variables inside funcs</td>\n<td>Using global variables as shared state</td>\n</tr>\n<tr>\n<td>Pass arguments explicitly</td>\n<td>Relying on outer scope invisibly</td>\n</tr>\n<tr>\n<td>Encapsulate state with classes</td>\n<td>Spreading config across files</td>\n</tr>\n<tr>\n<td>Keep module top-level clean</td>\n<td>Running side effects on import</td>\n</tr>\n</tbody>\n</table></div>\n\n\n\n\n<p>The original post is <a href=\"https://hevalhazalkurt.com/blog/the-art-of-scope-management-in-modular-python-design/\" rel=\"noopener noreferrer\">here</a>.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Buy Verified Wise Accounts – 100% USA, UK Wise","url":"https://dev.to/tshhsyy/buy-verified-wise-accounts-100-usa-uk-wise-280k","date":1761670744,"author":"usasellsmm","guid":319282,"unread":true,"content":"<h3>\n  \n  \n  **### **Buy Verified Wise Accounts – 100% USA, UK Wise\n</h3>\n\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fkb4kpt0sicer43xta8nk.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fkb4kpt0sicer43xta8nk.jpg\" alt=\" \" width=\"800\" height=\"800\"></a><br>\n<strong>👍 24/7 Hours Reply/Contact<br>\n💬 Telegram:@usasellsmm 💬<br>\n☎️ WhatsApp: +1 (303) 810-1091  ☎️<br>\n📩 Email:<a href=\"mailto:usasellsmm@gmail.com\">usasellsmm@gmail.com</a> 📩<br>\n🌐Website Visit Now:- Click the link:-<a href=\"https://usasellsmm.com/product/buy-verified-wise-accounts/\" rel=\"noopener noreferrer\">https://usasellsmm.com/product/buy-verified-wise-accounts/</a></strong></p>\n\n<p>In today’s fast-paced digital world, financial transactions have become a vital part of our daily lives. Whether you’re an entrepreneur looking to expand your business or someone who frequently travels abroad, having a reliable payment solution is essential. That’s where Wise comes in—a game-changer in international money transfers and currency exchange.</p>\n\n<p>But what if you could elevate your experience even further? Imagine accessing verified Wise accounts that not only simplify your transactions but also ensure security and authenticity.</p>\n\n<p>Buy Verified Wise Account</p>\n\n<p>If you’re curious about how to buy verified Wise accounts that are 100% genuine and safe, you’ve come to the right place. Let’s dive into everything you need to know about acquiring these valuable assets for seamless global transactions!</p>\n\n<p>Buy Verified Wise Accounts<br>\nBuying verified Wise accounts can transform your financial interactions. With a verified account, you gain access to features that streamline payments and currency conversions.</p>\n\n<p>These accounts are backed by real documents, ensuring authenticity. You won’t have to worry about the hassles often associated with unverified options.</p>\n\n<p>Imagine making international transactions without delays or additional fees. A verified Wise account allows for quick transfers that are both efficient and cost-effective.</p>\n\n<p>Moreover, these accounts enhance security measures. Knowing that your funds and data are protected adds peace of mind.</p>\n\n<p>Investing in a verified Wise account means investing in reliability for your business or personal needs. It opens doors to smoother operations across borders while keeping everything above board.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F5nrrg3ls2gmasgdk2s9d.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F5nrrg3ls2gmasgdk2s9d.jpg\" alt=\" \" width=\"800\" height=\"800\"></a></p>\n\n<p>Buy Verified Wise Accounts 100% fully verified with Real Documents.<br>\nWhen you decide to buy verified Wise accounts, authenticity is key. A fully verified account comes with real documents that establish its legitimacy. This means no more worrying about the reliability of your transactions or potential fraud.</p>\n\n<p>Buy Verified Wise accounts are backed by thorough verification processes. These accounts ensure compliance with financial regulations, providing peace of mind for users engaging in international transfers.<br>\nBuy Verified Wise AccountHaving a genuine account allows access to all features without restrictions. Whether you’re transferring money globally or simply managing personal finances, these accounts facilitate smooth operations.<br>\nPurchasing such an account can save time and effort in establishing credibility on the platform. You get immediate access without going through lengthy verification procedures yourself.</p>\n\n<p>Buy Verified Wise Accounts-100% Genuine, Safe, Real.<br>\nWhen it comes to managing your finances online, the importance of a verified account cannot be overstated. Buying verified Wise accounts ensures that you’re getting something genuine and safe.</p>\n\n<p>These accounts are fully backed by real documents, providing you with peace of mind in an otherwise uncertain digital landscape. Each transaction made through a verified Wise account is secure, allowing you to focus on what matters most—your business or personal needs.</p>\n\n<p>In today’s fast-paced world, trust is essential. A verified Wise account not only gives you credibility but also enhances your ability to transact without fear of fraud. With these accounts, you can engage in international transfers seamlessly.</p>\n\n<p>Buying such accounts opens doors to global opportunities while safeguarding your financial interests. Experience the reliability and authenticity that comes with having a 100% genuine Wise account at your disposal.</p>\n\n<p>**Which things differ wise accounts from any other accounts?</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fvzqxfn6izz7mb27j4q8u.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fvzqxfn6izz7mb27j4q8u.jpg\" alt=\" \" width=\"800\" height=\"800\"></a><br>\n👍 24/7 Hours Reply/Contact<br>\n💬 Telegram:@usasellsmm 💬<br>\n☎️ WhatsApp: +1 (303) 810-1091  ☎️<br>\n📩 Email:<a href=\"mailto:usasellsmm@gmail.com\">usasellsmm@gmail.com</a> 📩<br>\n🌐Website Visit Now:- Click the link:-<a href=\"https://usasellsmm.com/product/buy-verified-wise-accounts/**\" rel=\"noopener noreferrer\">https://usasellsmm.com/product/buy-verified-wise-accounts/**</a></p>\n\n<p>Wise accounts stand out due to their unique features designed for global transactions. Unlike traditional banks, Wise offers real exchange rates without hidden fees. This transparency fosters trust among users.</p>\n\n<p>Moreover, Wise prioritizes speed. Transactions often complete within minutes, a stark contrast to the lengthy waits typical of other institutions. This efficiency is crucial for businesses and individuals alike who need quick access to funds.</p>\n\n<p>Another distinguishing factor is currency support. Wise accounts can hold multiple currencies, making it easy to manage finances across borders seamlessly. This flexibility caters specifically to frequent travelers and international businesses.</p>\n\n<p>Verification processes set Wise apart as well. Users must provide real documents for account authentication, ensuring security and legitimacy that many competitors may lack. Such rigorous measures enhance user confidence in handling substantial sums safely.</p>\n\n<p>What Does a Verified Wise Account Mean?<br>\nA Verified Wise Account signifies that the user has completed all necessary processes to confirm their identity. This involves submitting real documents, such as government-issued IDs and proof of address. These measures ensure security and trustworthiness in transactions.</p>\n\n<p>When an account is verified, it unlocks higher transaction limits and access to additional features within the Wise platform. It also reassures other users that they are dealing with a legitimate entity.</p>\n\n<p>The verification process can take time but is crucial for safety in financial dealings. Users enjoy peace of mind knowing their information is protected against fraud.</p>\n\n<p>Moreover, having a verified status boosts credibility when conducting business or transferring funds globally. It establishes a reliable reputation among peers and clients alike.</p>\n\n<p>Frequently Asked Questions About Buy Verified Wise Accounts<br>\nWhen considering the purchase of verified Wise accounts, many questions arise. One common inquiry is about the safety of these transactions. Buyers often wonder if their personal information remains secure.</p>\n\n<p>Another frequent question revolves around the verification process itself. Customers seek clarity on what documents are typically required to ensure an account is fully verified and legitimate.</p>\n\n<p>People also ask about payment methods accepted when buying these accounts. Flexibility in payment options can make a significant difference for buyers looking to acquire multiple accounts at once.</p>\n\n<p>Support after purchase is another concern—many want assurance that they will receive assistance should any issues arise with their new account.</p>\n\n<p>Potential clients often inquire about turnaround times for receiving their purchased accounts. Understanding how quickly they can access these services helps in planning business operations effectively.</p>\n\n<p>Why do global people buy aged-wise accounts in bulk?<br>\nThe demand for aged Wise accounts has surged among global users. Many see them as a gateway to enhanced credibility and trustworthiness online. Established accounts often carry a history, which can be appealing for various transactions.</p>\n\n<p>Businesses especially value these accounts due to their pre-existing reputation. Aged accounts tend to have fewer restrictions, making them easier to use for international transfers and payments without the hassle of extensive verification processes.</p>\n\n<p>Additionally, bulk purchases allow companies to scale operations quickly. This strategy helps businesses manage multiple transactions seamlessly while ensuring compliance with local regulations.</p>\n\n<p>Furthermore, individuals looking to bypass age-related limitations on certain platforms find aged Wise accounts advantageous. They unlock access sooner than creating new ones from scratch, giving users an immediate edge in the digital landscape.</p>\n\n<p>*<em>Buy USA, UK, EU &amp; Any Country Verified Wise Accounts<br>\n*</em></p>\n\n<p><strong>👍 24/7 Hours Reply/Contact<br>\n💬 Telegram:@usasellsmm 💬<br>\n☎️ WhatsApp: +1 (303) 810-1091  ☎️<br>\n📩 Email:<a href=\"mailto:usasellsmm@gmail.com\">usasellsmm@gmail.com</a> 📩<br>\n🌐Website Visit Now:- Click the link:-<a href=\"https://usasellsmm.com/product/buy-verified-wise-accounts/\" rel=\"noopener noreferrer\">https://usasellsmm.com/product/buy-verified-wise-accounts/</a></strong></p>\n\n<p>When it comes to financial transactions, having a verified Wise account can make all the difference. Whether you’re in the USA, UK, EU, or any other country, a verified account enhances your credibility and trustworthiness.</p>\n\n<p>Buying these accounts opens up opportunities for seamless cross-border transactions. You gain access to low fees and real-time exchange rates that often beat traditional banks. This is crucial for businesses looking to expand internationally.</p>\n\n<p>Each region offers specific advantages. For instance, UK accounts provide easy integration with local banking services while US accounts streamline various payment options available across North America.</p>\n\n<p>Investing in verified Wise accounts allows you to tap into global markets effortlessly. It’s not just about convenience; it’s about positioning yourself strategically in today’s interconnected world of finance.</p>\n\n<p>Why Should You Buy Verified Wise Accounts For Your Business?<br>\nRunning a business today requires flexibility, especially in financial transactions. Verified Wise accounts offer you the ability to send and receive money internationally with ease.</p>\n\n<p>With these accounts, businesses can avoid the high bank fees that typically come with cross-border payments. This means more savings that can be redirected into growth initiatives.</p>\n\n<p>Moreover, having a verified account adds credibility to your business. Clients and partners are more likely to trust companies that use legitimate financial services.</p>\n\n<p>Additionally, Wise provides real-time currency conversion at competitive rates. This feature is crucial for businesses dealing with multiple currencies daily.</p>\n\n<p>Using a verified account also ensures compliance with regulations, reducing the risk of penalties or legal issues down the line. It’s about safeguarding your operations while enhancing efficiency in transaction management.</p>\n\n<p>Why Choose Verified Wise Accounts?<br>\nVerified Wise Accounts offer a level of security that is hard to match. They come with authentic documentation, ensuring your transactions are not only safe but also compliant with regulations.</p>\n\n<p>These accounts provide access to better features and lower fees compared to standard options. You can make international transfers without worrying about hidden charges or unfavorable exchange rates.</p>\n\n<p>Moreover, having a verified account boosts your credibility in the eyes of vendors and customers alike. It’s easier to build trust when you have a recognized financial footprint.</p>\n\n<p>With instant transfer capabilities and user-friendly interfaces, managing your finances becomes hassle-free. Whether for personal use or business operations, Verified Wise Accounts cater to diverse needs efficiently.</p>\n\n<p>Can I Buy a Wise Account From the USA?<br>\nYes, you can buy a Wise account from the USA. Many people seek verified accounts to streamline international transactions and manage their finances better.</p>\n\n<p>When purchasing a Wise account, ensure that it is fully verified with real documents. This guarantees authenticity and helps avoid potential issues down the line.</p>\n\n<p>Look for trusted sellers who specialize in providing genuine accounts. Check reviews and testimonials to gauge their reliability before making any commitments.</p>\n\n<p>Buying an account may allow you to access features like lower fees on currency conversion and seamless transfers across borders.</p>\n\n<p>Be aware of local regulations regarding financial services when considering this option. Compliance not only protects your investment but also enhances overall security in your transactions.</p>\n\n<p>*<em>How Do You Get Verified On Wise Add Money?<br>\n*</em></p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F9rhkbuwztl8x6wcx9tcm.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F9rhkbuwztl8x6wcx9tcm.jpg\" alt=\" \" width=\"800\" height=\"800\"></a><br>\n<strong>👍 24/7 Hours Reply/Contact<br>\n💬 Telegram:@usasellsmm 💬<br>\n☎️ WhatsApp: +1 (303) 810-1091  ☎️<br>\n📩 Email:<a href=\"mailto:usasellsmm@gmail.com\">usasellsmm@gmail.com</a> 📩<br>\n🌐Website Visit Now:- Click the link:-<a href=\"https://usasellsmm.com/product/buy-verified-wise-accounts/\" rel=\"noopener noreferrer\">https://usasellsmm.com/product/buy-verified-wise-accounts/</a></strong></p>\n\n<p>Getting verified on Wise is a straightforward process. Start by creating your account and providing basic information, such as your name, address, and date of birth.</p>\n\n<p>Next, you’ll need to upload identification documents. Acceptable forms include a passport or driver’s license. Ensure that the images are clear for quick verification.</p>\n\n<p>Once you’ve submitted everything, Wise will review your details. This can take anywhere from a few minutes to several hours. You’ll receive an email notification once verification is complete.</p>\n\n<p>After successfully verifying your account, you can add money easily through bank transfers or debit/credit cards. Make sure that the payment method you choose aligns with their guidelines for smooth processing.</p>\n\n<p>Always keep an eye on any additional requirements based on your location or transaction volume. Verification enhances security while giving you access to greater features within the platform.</p>\n\n<p>Can I Trust Sellers Of  Verified Wise Accounts?<br>\nWhen considering purchasing a verified Wise account, trust is paramount. Not every seller operates with integrity. Some may offer enticing deals but hide the risks involved.</p>\n\n<p>Research is essential before committing to any transaction. Look for sellers with positive reviews and a history of satisfied customers. Check forums and social media platforms where users share their experiences.</p>\n\n<p>Transparency from the seller can also be a good sign. A reputable provider should clearly outline what you’re getting, including details about verification processes and documentation provided.</p>\n\n<p>If something feels off or too good to be true, it probably is. Always proceed with caution when dealing in online marketplaces, especially regarding financial accounts that require sensitive information.</p>\n\n<p>Building relationships with trustworthy sources will enhance your buying experience while minimizing potential pitfalls associated with this process.</p>\n\n<p>Conclusion<br>\nWhen considering the benefits of buying verified Wise accounts, it becomes clear why so many individuals and businesses are opting for this route. From seamless international transactions to enhanced security features, a verified Wise account can make financial management easier and more efficient.</p>\n\n<p>As you navigate through options available in various regions like the USA, UK, or EU, remember that choosing genuine providers will ensure you receive an authentic account with real documents. This not only secures your transactions but also builds trust with clients and partners.</p>\n\n<p>Whether you’re looking to streamline personal finances or enhance business operations globally, investing in a verified Wise account could be a strategic decision that pays off in numerous ways. The ease of transferring money internationally at competitive rates is just one advantage among many.</p>\n\n<p>The landscape of online finance is evolving rapidly, making it essential to stay informed about secure practices while maximizing growth opportunities. Make sure you’re equipped with the right tools—like a verified Wise account—to thrive in today’s interconnected world.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F9cczm64658ct37wgoc4f.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F9cczm64658ct37wgoc4f.jpg\" alt=\" \" width=\"800\" height=\"800\"></a></p>\n\n<p><strong>👍 24/7 Hours Reply/Contact<br>\n💬 Telegram:@usasellsmm 💬<br>\n☎️ WhatsApp: +1 (303) 810-1091  ☎️<br>\n📩 Email:<a href=\"mailto:usasellsmm@gmail.com\">usasellsmm@gmail.com</a> 📩<br>\n🌐Website Visit Now:- Click the link:-<a href=\"https://usasellsmm.com/product/buy-verified-wise-accounts/\" rel=\"noopener noreferrer\">https://usasellsmm.com/product/buy-verified-wise-accounts/</a></strong></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Christian Ledermann: Scratching the Itch, Paying the Debt: How Community Keeps Legacy Open Source Projects Alive","url":"https://dev.to/ldrscke/scratching-the-itch-paying-the-debt-how-community-keeps-legacy-open-source-projects-alive-5gb0","date":1761670320,"author":"","guid":319318,"unread":true,"content":"<p>Every developer has that one project that started as a personal solution and unexpectedly found a life of its own. For me, that was <a href=\"https://github.com/cleder/fastkml\" rel=\"noopener noreferrer\">FastKML</a>, a library I built in 2012 to “scratch my own itch.” I needed to embed maps into a website, and at the time, <a href=\"https://developers.google.com/kml\" rel=\"noopener noreferrer\"></a> was the de facto standard for visualizing geospatial data on the web. <a href=\"https://geojson.org/\" rel=\"noopener noreferrer\">GeoJSON</a> existed but was still in its infancy and unsupported by <a href=\"https://openlayers.org/\" rel=\"noopener noreferrer\">OpenLayers</a>, which was then the best tool for embedding maps.</p><p>Other Python libraries for KML existed, but most were either limited in scope, lacked Python 3 support, or didn’t meet my performance needs. Performance was crucial, so I built  using  instead of the slower XML DOM used by many contemporaries.</p><p>As FastKML evolved, it depended on <a href=\"https://github.com/shapely/shapely\" rel=\"noopener noreferrer\">Shapely</a> for geometry handling, an excellent library, but one that required C extensions and added installation complexity. That led to the birth of <a href=\"https://github.com/cleder/pygeoif\" rel=\"noopener noreferrer\">PyGeoIf</a>, a pure Python implementation of basic geospatial objects. PyGeoIf aimed to serve as a lightweight, dependency-free substitute for Shapely when users didn’t need all of its advanced geometry operations. The API mirrored Shapely’s closely, making migration as simple as replacing</p><p>Over the years, both projects aged gracefully, but not without technical debt. They bore the marks of an earlier Python era: Python 2/3 compatibility hacks (at the very beginning Python 2.6 was still in use), missing type hints, and occasionally ambiguous function signatures.</p><p>Still, they worked. The test coverage exceeded 95%, bugs were rare, and they continued solving real problems for users long after I had moved on to other roles outside GIS. To my surprise, the packages remained popular; downloads were steady, and employers still asked about them. But I knew the code looked dated, and if I had to review it today, it wouldn’t pass.</p><p>Fast forward to 2020. The geospatial landscape had changed;  had overtaken KML, Python’s ecosystem had matured, and I had learned a great deal about clean code and maintainability. It was time to modernize these legacy projects for the new decade.</p><p>Modernization wasn’t just a matter of adding type hints or updating syntax, it was about bringing two long-lived projects in line with modern development practices. The original codebases had served well for years, but they were increasingly difficult to extend. Function signatures were ambiguous, internal logic was tangled, and adding new features often caused , requiring edits across multiple unrelated files.</p><p>The  API had evolved too, fully embracing  naming conventions and adopting more expressive methods. To remain compatible, PyGeoIf needed to evolve alongside it. Meanwhile, Python itself had transformed: type hints, static analysis, and property-based testing were now standard practice rather than novelty.</p><p>The single most important motivator was the <strong>introduction of type hints</strong> in Python. Type annotations have revolutionized how Python code is written, reviewed, and maintained, enhancing readability and catching subtle bugs early through tools like .\nThe first step was static analysis with tools like mypy, which immediately flagged legacy Python 2 compatibility hacks, ambiguous function signatures, and missing type hints. Extending the tests in tandem ensured that each refactor preserved correctness.</p><p>Beyond that, the desire for clearer APIs, more maintainable structures, and modern testing techniques pushed the modernization effort forward. I wanted code that not only worked but was <strong>readable, testable, and future-proof</strong>.</p><p>For , version 0.7 had been released in 2017. Four years later, in September 2021, I published the first beta of the 1.0 series: fully type-annotated, statically checked with , and tested using  with <a href=\"https://hypothesis.works/\" rel=\"noopener noreferrer\">Hypothesis</a> and improved tests with  with <a href=\"https://mutmut.readthedocs.io/\" rel=\"noopener noreferrer\">MutMut</a>. By September 2022, version 1.0 was stable, and by October 2025, it had matured to version 1.5.</p><p>For , after a long silence since version 0.11 in 2015, I released version 0.12 in September 2021, incorporating long-neglected pull requests and minor improvements. A month later came  on PyPI. What I thought would be a quick release became an 18-iteration journey spanning three years, culminating in  in November 2024; finally the library I had envisioned years earlier.</p><h2>\n  \n  \n  Reflecting on Contributions and Community Support\n</h2><p>Over the past few years of developing  and , the journey has been shaped not only by personal effort but also by the support and engagement of the open-source community. One striking example of this has been <strong>Hacktoberfest contributions</strong> which consistently provided motivation and tangible progress.</p><p>These contributions may seem small individually, but collectively they have . Seeing community members engage with the projects during Hacktoberfest has been a <strong>continuing source of encouragement</strong>, reminding me that every bit of contribution helps make the software more robust, maintainable, and welcoming to others.</p><p>The positive impact goes beyond the specific changes. Hacktoberfest contributions have:</p><ul><li><strong>Encouraged ongoing improvement</strong> by motivating incremental updates.</li><li><strong>Highlighted the value of community participation</strong> in maintaining and modernizing open-source projects.</li><li><strong>Reinforced a sense of shared purpose</strong>, showing that even small efforts can collectively advance a project.</li></ul><p>This ongoing collaboration has made the development process <strong>more rewarding and sustainable</strong>, reinforcing a simple but powerful lesson: in open-source, community engagement isn’t just about code, it’s about inspiration and momentum.</p><p>Hacktoberfest contributions aren’t just code, they’re . They spark incremental improvements, highlight the value of shared effort, and inspire continued development. Seeing others invest their time and ideas in these projects has been a <strong>constant source of motivation</strong> to keep improving, testing, and refining.</p><h2>\n  \n  \n  Hacktoberfest and the Power of Community\n</h2><p>Developing  and  has been a journey of learning, coding, and refining, but it’s the , especially during Hacktoberfest, that have truly kept the momentum alive.</p><p>October has consistently brought a wave of engagement: pre-commit hooks, bug fixes, minor enhancements, and automated improvements. Each contribution, no matter how small, <strong>reinforced the sense of progress</strong> and reminded me that open-source thrives on collaboration.</p><p>Looking forward, this collaborative energy continues to <strong>fuel future features and refinements</strong>. Hacktoberfest has proven that even small contributions can make a big difference, both in the code and in the spirit of the community.</p>","contentLength":6495,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[Boost]","url":"https://dev.to/shahrouzlogs/-527m","date":1761670211,"author":"Shahrouz Nikseresht","guid":319281,"unread":true,"content":"<div class=\"ltag__link\">\n  <a href=\"/nazanin_ashrafi\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F451393%2Fb803b212-10c3-4555-8afd-22f8b08b5840.jpg\" alt=\"nazanin_ashrafi\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/nazanin_ashrafi/installing-pandas-with-uv-on-windows-1nkj\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>Installing pandas with uv on windows</h2>\n      <h3>Nazanin Ashrafi ・ Oct 28</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#python</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Run Your AI Agent with InterSystems IRIS and Local Models using Ollama","url":"https://dev.to/intersystems/run-your-ai-agent-with-intersystems-iris-and-local-models-using-ollama-gf5","date":1761669701,"author":"InterSystems Developer","guid":319280,"unread":true,"content":"<p>In the <a href=\"https://community.intersystems.com/post/build-customer-support-ai-agent-smolagents-intersystems-iris-sql-rag-interoperability\" rel=\"noopener noreferrer\">previous article</a>, we saw how to build a <strong>customer service AI agent</strong> with smolagents and InterSystems IRIS, combining <strong>SQL</strong>, <strong>RAG</strong> with vector search, and <strong>interoperability</strong>.</p>\n\n<p>In that case, we used cloud models (OpenAI) for the LLM and embeddings.</p>\n\n<p>This time, we’ll take it one step further: <strong>running the same agent, but with local models thanks to Ollama</strong>.</p>\n\n\n\n\n<h2>\n  \n  \n  Why run models locally?\n</h2>\n\n<p>Using <strong>LLMs in the cloud</strong> is the simplest option to get started:</p>\n\n<ul>\n<li>✅ Models already optimized and maintained</li>\n<li>✅ Easy access with a simple API</li>\n<li>✅ <em>Serverless</em> service: no need to worry about hardware or maintenance</li>\n<li>❌ Usage costs</li>\n<li>❌ Dependency on external services</li>\n<li>❌ Privacy restrictions when sending data</li>\n</ul>\n\n<p>On the other hand, running models <strong>locally</strong> gives us:</p>\n\n<ul>\n<li>✅ Full control over data and environment</li>\n<li>✅ No variable usage costs</li>\n<li>✅ Possibility to <strong>fine-tune or adapt models</strong> with techniques such as <strong>LoRA (Low-Rank Adaptation)</strong>, which allows training certain layers of the model to adapt it to your specific domain without retraining the entire model</li>\n<li>❌ Higher resource consumption on your server</li>\n<li>❌ Limitations on model size depending on your hardware</li>\n</ul>\n\n<p>That’s where <strong>Ollama</strong> comes into play.</p>\n\n\n\n\n<h2>\n  \n  \n  What is Ollama?\n</h2>\n\n<p><a href=\"https://ollama.com\" rel=\"noopener noreferrer\">Ollama</a> is a tool that makes it easy to <strong>run language models and embeddings on your own computer</strong> with a very simple experience:</p>\n\n<ul>\n<li>Download models with an <code>ollama pull</code>\n</li>\n<li>Run them locally, exposed as an HTTP API</li>\n<li>Integrate them directly into your applications, just like you would with OpenAI</li>\n</ul>\n\n<p>In short: <strong>the same API you’d use in the cloud, but running on your laptop or server</strong>.</p>\n\n\n\n\n<h2>\n  \n  \n  Basic Ollama setup\n</h2>\n\n<p>First, install Ollama from its website and verify that it works:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>ollama <span class=\"nt\">--version</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Then, download a couple of models:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Download an embeddings model</span>\nollama pull nomic-embed-text:latest\n\n<span class=\"c\"># Download a language model</span>\nollama pull llama3.1:8b\n\n<span class=\"c\"># See all available models</span>\nollama list\n</code></pre>\n\n</div>\n\n\n\n<p>You can test embeddings directly with a <code>curl</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>curl http://localhost:11434/api/embeddings <span class=\"nt\">-d</span> <span class=\"s1\">'{\n  \"model\": \"nomic-embed-text:latest\",\n  \"prompt\": \"Ollama makes it easy to run LLMs locally.\"\n}'</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  Using Ollama in the IRIS agent\n</h2>\n\n<p>The <a href=\"https://github.com/intersystems-ib/customer-support-agent-demo\" rel=\"noopener noreferrer\">Customer Support Agent Demo</a> repository already includes the configuration for Ollama. You just need to:</p>\n\n<ol>\n<li><p><strong>Download the models needed to run them in Ollama</strong><br>\nI used <a href=\"https://ollama.com/library/nomic-embed-text\" rel=\"noopener noreferrer\">nomic-embed-text</a> for vector search embeddings and <a href=\"https://ollama.com/library/devstral\" rel=\"noopener noreferrer\">devstral</a> as the LLM.</p></li>\n<li><p><strong>Configure IRIS to use Ollama embeddings</strong> with the local model:<br>\n</p></li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sql\"><code><span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"o\">%</span><span class=\"n\">Embedding</span><span class=\"p\">.</span><span class=\"n\">Config</span> <span class=\"p\">(</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">Configuration</span><span class=\"p\">,</span> <span class=\"n\">EmbeddingClass</span><span class=\"p\">,</span> <span class=\"n\">VectorLength</span><span class=\"p\">,</span> <span class=\"n\">Description</span><span class=\"p\">)</span>\n  <span class=\"k\">VALUES</span> <span class=\"p\">(</span><span class=\"s1\">'ollama-nomic-config'</span><span class=\"p\">,</span> \n          <span class=\"s1\">'{\"apiBase\":\"http://host.docker.internal:11434/api/embeddings\", \n            \"modelName\": \"nomic-embed-text:latest\"}'</span><span class=\"p\">,</span>\n          <span class=\"s1\">'Embedding.Ollama'</span><span class=\"p\">,</span> \n          <span class=\"mi\">768</span><span class=\"p\">,</span>  \n          <span class=\"s1\">'embedding model in Ollama'</span><span class=\"p\">);</span>\n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li>Adjust the column size to store vectors in the sample tables (the local model has a different vector size than the original OpenAI one).\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sql\"><code><span class=\"k\">ALTER</span> <span class=\"k\">TABLE</span> <span class=\"n\">Agent_Data</span><span class=\"p\">.</span><span class=\"n\">Products</span> <span class=\"k\">DROP</span> <span class=\"k\">COLUMN</span> <span class=\"n\">Embedding</span><span class=\"p\">;</span>\n<span class=\"k\">ALTER</span> <span class=\"k\">TABLE</span> <span class=\"n\">Agent_Data</span><span class=\"p\">.</span><span class=\"n\">Products</span> <span class=\"k\">ADD</span> <span class=\"k\">COLUMN</span> <span class=\"n\">Embedding</span> <span class=\"n\">VECTOR</span><span class=\"p\">(</span><span class=\"nb\">FLOAT</span><span class=\"p\">,</span> <span class=\"mi\">768</span><span class=\"p\">);</span>\n\n<span class=\"k\">ALTER</span> <span class=\"k\">TABLE</span> <span class=\"n\">Agent_Data</span><span class=\"p\">.</span><span class=\"n\">DocChunks</span> <span class=\"k\">DROP</span> <span class=\"k\">COLUMN</span> <span class=\"n\">Embedding</span><span class=\"p\">;</span>\n<span class=\"k\">ALTER</span> <span class=\"k\">TABLE</span> <span class=\"n\">Agent_Data</span><span class=\"p\">.</span><span class=\"n\">DocChunks</span> <span class=\"k\">ADD</span> <span class=\"k\">COLUMN</span> <span class=\"n\">Embedding</span> <span class=\"n\">VECTOR</span><span class=\"p\">(</span><span class=\"nb\">FLOAT</span><span class=\"p\">,</span> <span class=\"mi\">768</span><span class=\"p\">);</span>\n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li>Configure the <code>.env</code> environment file to specify the models we want to use:\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nv\">OPENAI_MODEL</span><span class=\"o\">=</span>devstral:24b-small-2505-q4_K_M\n<span class=\"nv\">OPENAI_API_BASE</span><span class=\"o\">=</span>http://localhost:11434/v1\n<span class=\"nv\">EMBEDDING_CONFIG_NAME</span><span class=\"o\">=</span>ollama-nomic-config\n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li>Update the embeddings</li>\n</ol>\n\n<p>Since we have a different embedding model than the original, we need to update the embeddings using the local <a href=\"https://ollama.com/library/nomic-embed-text\" rel=\"noopener noreferrer\">nomic-embed-text</a>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>python scripts/embed_sql.py\n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li>\n<strong>Run the agent</strong> so that it uses the new configuration</li>\n</ol>\n\n<p>The code will now use the configuration so that both embeddings and the LLM are served from the local endpoint.</p>\n\n<p>With this configuration, you can ask questions such as:</p>\n\n<ul>\n<li><em>“Where is my order #1001?”</em></li>\n<li><em>“What is the return period?”</em></li>\n</ul>\n\n<p>And the agent will use:</p>\n\n<ul>\n<li>\n<strong>IRIS SQL</strong> for structured data</li>\n<li>\n<strong>Vector search</strong> with Ollama embeddings (local)</li>\n<li>\n<strong>Interoperability</strong> to simulate external API calls</li>\n<li>\n<strong>A local LLM</strong> to plan and generate code that calls the necessary tools to obtain the answer</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>Thanks to Ollama, we can run our <strong>Customer Support Agent with IRIS</strong> without relying on the cloud:</p>\n\n<ul>\n<li>\n<strong>Privacy and control</strong> of data</li>\n<li><strong>Zero cost per token</strong></li>\n<li><strong>Total flexibility to test and adapt models (LoRA)</strong></li>\n</ul>\n\n<p>The challenge? You need a machine with enough memory and CPU/GPU to run large models. But for prototypes and testing, it’s a very powerful and practical option.</p>\n\n\n\n\n<h2>\n  \n  \n  Useful references\n</h2>\n\n<ul>\n<li>📖 Official Ollama documentation: <a href=\"https://ollama.com\" rel=\"noopener noreferrer\">https://ollama.com</a>\n</li>\n<li>📦 List of available Ollama models: <a href=\"https://ollama.com/library\" rel=\"noopener noreferrer\">https://ollama.com/library</a>\n</li>\n<li>🧩 Introduction to <strong>LoRA</strong> for efficiently adapting large models:\n\n<ul>\n<li>Simple explanation: <a href=\"https://huggingface.co/docs/peft/main/en/conceptual_guides/lora\" rel=\"noopener noreferrer\">https://huggingface.co/docs/peft/main/en/conceptual_guides/lora</a>\n</li>\n</ul>\n\n\n</li>\n\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Build a Customer Support AI Agent with smolagents + InterSystems IRIS (SQL, RAG & Interoperability)","url":"https://dev.to/intersystems/build-a-customer-support-ai-agent-with-smolagents-intersystems-iris-sql-rag-interoperability-5775","date":1761669570,"author":"InterSystems Developer","guid":319279,"unread":true,"content":"<p>Customer support questions span <strong>structured data</strong> (orders, products 🗃️), <strong>unstructured knowledge</strong> (docs/FAQs 📚), and <strong>live systems</strong> (shipping updates 🚚). In this post we’ll ship a compact <strong>AI agent</strong> that handles all three—using:</p>\n\n<ul>\n<li>🧠 <strong>Python + smolagents</strong> to orchestrate the agent’s “brain”</li>\n<li>🧰 <strong>InterSystems IRIS</strong> for <strong>SQL</strong>, <strong>Vector Search (RAG)</strong>, and <strong>Interoperability</strong> (a mock shipping status API)</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  ⚡ TL;DR (snack-sized)\n</h2>\n\n<ul>\n<li>Build a <strong>working AI Customer Support Agent</strong> with <strong>Python + smolagents</strong> orchestrating tools on <strong>InterSystems IRIS</strong> (<strong>SQL</strong>, <strong>Vector Search/RAG</strong>, <strong>Interoperability</strong> for a mock shipping API).</li>\n<li>It answers real questions (e.g., <em>“Was order #1001 delivered?”</em> <em>“What’s the return window?”</em>) by combining <strong>tables</strong>, <strong>documents</strong>, and <strong>interoperability calls</strong>.</li>\n<li>You’ll spin up IRIS in Docker, load schema and sample data, embed docs for RAG, register tools (SQL/RAG/API), and run the agent via <strong>CLI</strong> or <strong>Gradio UI</strong>.</li>\n</ul>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8ihnac6k7i2b8rznxmp7.gif\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8ihnac6k7i2b8rznxmp7.gif\" alt=\" \" width=\"720\" height=\"364\"></a></p>\n\n\n\n\n<h2>\n  \n  \n  🧭 What you’ll build\n</h2>\n\n<p>An AI <strong>Customer Support Agent</strong> that can:</p>\n\n<ul>\n<li>🔎 Query <strong>structured</strong> data (customers, orders, products, shipments) via SQL</li>\n<li>📚 Retrieve <strong>unstructured</strong> knowledge (FAQs &amp; docs) via <strong>RAG</strong> on IRIS Vector Search</li>\n<li>🔌 Call a (mock) shipping API via IRIS <strong>Interoperability</strong>, with Visual Trace to inspect every call</li>\n</ul>\n\n<p><strong>Architecture (at a glance)</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>User ➜ Agent (smolagents CodeAgent)\n               ├─ SQL Tool ➜ IRIS tables\n               ├─ RAG Tool ➜ IRIS Vector Search (embeddings + chunks)\n               └─ Shipping Tool ➜ IRIS Interoperability (mock shipping) ➜ Visual Trace\n</code></pre>\n\n</div>\n\n\n\n<blockquote>\n<p>New to <strong>smolagents</strong>? It’s a tiny agent framework from Hugging Face where the model plans and <strong>uses your tools</strong>—other alternatives are <strong>LangGraph</strong> and <strong>LlamaIndex</strong>.</p>\n</blockquote>\n\n\n\n\n<h2>\n  \n  \n  🧱 Prerequisites\n</h2>\n\n<ul>\n<li>🐍 <strong>Python 3.9+</strong>\n</li>\n<li>🐳 <strong>Docker</strong> to run IRIS in a container</li>\n<li>🧑‍💻 <strong>VS Code</strong> handy to checkout the code</li>\n<li>🔑 <strong>OpenAI API key</strong> for the LLM + embeddings — or run locally with Ollama if you prefer</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  1) 🧩 Clone &amp; set up Python\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>git clone https://github.com/intersystems-ib/customer-support-agent-demo\n<span class=\"nb\">cd </span>customer-support-agent-demo\n\npython <span class=\"nt\">-m</span> venv .venv\n<span class=\"c\"># macOS/Linux</span>\n<span class=\"nb\">source</span> .venv/bin/activate\n<span class=\"c\"># Windows (PowerShell)</span>\n<span class=\"c\"># .venv\\Scripts\\Activate.ps1</span>\n\npip <span class=\"nb\">install</span> <span class=\"nt\">-r</span> requirements.txt\n<span class=\"nb\">cp</span> .env.example .env   <span class=\"c\"># add your OpenAI key</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  2) 🐳 Start InterSystems IRIS (Docker)\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>docker compose build\ndocker compose up <span class=\"nt\">-d</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Open the <strong>Management Portal</strong> (<code>http://localhost:52773</code> in this demo).</p>\n\n\n\n\n<h2>\n  \n  \n  3) 🗃️ Load the structured data (SQL)\n</h2>\n\n<p>From <strong>SQL Explorer</strong> (Portal) or your favorite SQL client:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sql\"><code><span class=\"k\">LOAD</span> <span class=\"k\">SQL</span> <span class=\"k\">FROM</span> <span class=\"n\">FILE</span> <span class=\"s1\">'/app/iris/sql/schema.sql'</span> <span class=\"n\">DIALECT</span> <span class=\"s1\">'IRIS'</span> <span class=\"k\">DELIMITER</span> <span class=\"s1\">';'</span><span class=\"p\">;</span>\n<span class=\"k\">LOAD</span> <span class=\"k\">SQL</span> <span class=\"k\">FROM</span> <span class=\"n\">FILE</span> <span class=\"s1\">'/app/iris/sql/load_data.sql'</span> <span class=\"n\">DIALECT</span> <span class=\"s1\">'IRIS'</span> <span class=\"k\">DELIMITER</span> <span class=\"s1\">';'</span><span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This is the schema you have just loaded:</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fd6ysnabedmmw5e1hldxj.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fd6ysnabedmmw5e1hldxj.png\" alt=\" \" width=\"800\" height=\"429\"></a></p>\n\n<p>Run some queries and get familiar with the data. The agent will use this data to resolve questions:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sql\"><code><span class=\"c1\">-- List customers</span>\n<span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">Agent_Data</span><span class=\"p\">.</span><span class=\"n\">Customers</span><span class=\"p\">;</span>\n\n<span class=\"c1\">-- Orders for a given customer</span>\n<span class=\"k\">SELECT</span> <span class=\"n\">o</span><span class=\"p\">.</span><span class=\"n\">OrderID</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">.</span><span class=\"n\">OrderDate</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">.</span><span class=\"n\">Status</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">Name</span> <span class=\"k\">AS</span> <span class=\"n\">Product</span>\n<span class=\"k\">FROM</span> <span class=\"n\">Agent_Data</span><span class=\"p\">.</span><span class=\"n\">Orders</span> <span class=\"n\">o</span>\n<span class=\"k\">JOIN</span> <span class=\"n\">Agent_Data</span><span class=\"p\">.</span><span class=\"n\">Products</span> <span class=\"n\">p</span> <span class=\"k\">ON</span> <span class=\"n\">o</span><span class=\"p\">.</span><span class=\"n\">ProductID</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">ProductID</span>\n<span class=\"k\">WHERE</span> <span class=\"n\">o</span><span class=\"p\">.</span><span class=\"n\">CustomerID</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"c1\">-- Shipment info for an order</span>\n<span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">Agent_Data</span><span class=\"p\">.</span><span class=\"n\">Shipments</span> <span class=\"k\">WHERE</span> <span class=\"n\">OrderID</span> <span class=\"o\">=</span> <span class=\"mi\">1001</span><span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n<blockquote>\n<p>✅ If you see rows, your <strong>structured</strong> side is ready.</p>\n</blockquote>\n\n\n\n\n<h2>\n  \n  \n  4) 📚 Add unstructured knowledge with Vector Search (RAG)\n</h2>\n\n<p>Create an <strong>embedding config</strong> (example below uses an OpenAI embedding model—tweak to taste):<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sql\"><code><span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"o\">%</span><span class=\"n\">Embedding</span><span class=\"p\">.</span><span class=\"n\">Config</span>\n  <span class=\"p\">(</span><span class=\"n\">Name</span><span class=\"p\">,</span> <span class=\"n\">Configuration</span><span class=\"p\">,</span> <span class=\"n\">EmbeddingClass</span><span class=\"p\">,</span> <span class=\"n\">VectorLength</span><span class=\"p\">,</span> <span class=\"n\">Description</span><span class=\"p\">)</span>\n<span class=\"k\">VALUES</span>\n  <span class=\"p\">(</span><span class=\"s1\">'my-openai-config'</span><span class=\"p\">,</span>\n   <span class=\"s1\">'{\"apiKey\":\"YOUR_OPENAI_KEY\",\"sslConfig\":\"llm_ssl\",\"modelName\":\"text-embedding-3-small\"}'</span><span class=\"p\">,</span>\n   <span class=\"s1\">'%Embedding.OpenAI'</span><span class=\"p\">,</span>\n   <span class=\"mi\">1536</span><span class=\"p\">,</span>\n   <span class=\"s1\">'a small embedding model provided by OpenAI'</span><span class=\"p\">);</span>\n</code></pre>\n\n</div>\n\n\n\n<blockquote>\n<p>Need the exact steps and options? Check the <a href=\"https://docs.intersystems.com/iris20252/csp/docbook/DocBook.UI.Page.cls?KEY=GSQL_vecsearch#GSQL_vecsearch_insembed_embedconfig\" rel=\"noopener noreferrer\">documentation</a></p>\n</blockquote>\n\n<p>Then embed the sample content:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>python scripts/embed_sql.py\n</code></pre>\n\n</div>\n\n\n\n<p>Check the embeddings are already in the tables:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sql\"><code><span class=\"k\">SELECT</span> <span class=\"k\">COUNT</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">ProductChunks</span> <span class=\"k\">FROM</span> <span class=\"n\">Agent_Data</span><span class=\"p\">.</span><span class=\"n\">Products</span><span class=\"p\">;</span>\n<span class=\"k\">SELECT</span> <span class=\"k\">COUNT</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">DocChunks</span>     <span class=\"k\">FROM</span> <span class=\"n\">Agent_Data</span><span class=\"p\">.</span><span class=\"n\">DocChunks</span><span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  🔎 Bonus: Hybrid + vector search directly from SQL with <code>EMBEDDING()</code>\n</h3>\n\n<p>A major advantage of IRIS is that you can perform <strong>semantic (vector) search right inside SQL</strong> and <strong>mix it with classic filters</strong>—no extra microservices needed. The <a href=\"https://docs.intersystems.com/iris20252/csp/docbook/Doc.View.cls?KEY=RSQL_embedding\" rel=\"noopener noreferrer\"><code>EMBEDDING()</code> SQL function</a> generates a vector on the fly for your query text, which you can compare against stored vectors using operations like <code>VECTOR_DOT_PRODUCT</code>.</p>\n\n<p><strong>Example A — Hybrid product search (price filter + semantic ranking):</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sql\"><code><span class=\"k\">SELECT</span> <span class=\"n\">TOP</span> <span class=\"mi\">3</span>\n    <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">ProductID</span><span class=\"p\">,</span>\n    <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">Name</span><span class=\"p\">,</span>\n    <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">Category</span><span class=\"p\">,</span>\n    <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">Price</span><span class=\"p\">,</span>\n    <span class=\"n\">VECTOR_DOT_PRODUCT</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">Embedding</span><span class=\"p\">,</span> <span class=\"n\">EMBEDDING</span><span class=\"p\">(</span><span class=\"s1\">'headphones with ANC'</span><span class=\"p\">,</span> <span class=\"s1\">'my-openai-config'</span><span class=\"p\">))</span> <span class=\"n\">score</span>\n<span class=\"k\">FROM</span> <span class=\"n\">Agent_Data</span><span class=\"p\">.</span><span class=\"n\">Products</span> <span class=\"n\">p</span>\n<span class=\"k\">WHERE</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">Price</span> <span class=\"o\">&lt;</span> <span class=\"mi\">200</span>\n<span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"n\">score</span> <span class=\"k\">DESC</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Example B — Semantic doc-chunk lookup (great for feeding RAG answers):</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sql\"><code><span class=\"k\">SELECT</span> <span class=\"n\">TOP</span> <span class=\"mi\">3</span>\n    <span class=\"k\">c</span><span class=\"p\">.</span><span class=\"n\">ChunkID</span>  <span class=\"k\">AS</span> <span class=\"n\">chunk_id</span><span class=\"p\">,</span>\n    <span class=\"k\">c</span><span class=\"p\">.</span><span class=\"n\">DocID</span>      <span class=\"k\">AS</span> <span class=\"n\">doc_id</span><span class=\"p\">,</span>\n    <span class=\"k\">c</span><span class=\"p\">.</span><span class=\"n\">Title</span>         <span class=\"k\">AS</span> <span class=\"n\">title</span><span class=\"p\">,</span>\n    <span class=\"k\">SUBSTRING</span><span class=\"p\">(</span><span class=\"k\">c</span><span class=\"p\">.</span><span class=\"n\">ChunkText</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">snippet</span><span class=\"p\">,</span>\n    <span class=\"n\">VECTOR_DOT_PRODUCT</span><span class=\"p\">(</span><span class=\"k\">c</span><span class=\"p\">.</span><span class=\"n\">Embedding</span><span class=\"p\">,</span> <span class=\"n\">EMBEDDING</span><span class=\"p\">(</span><span class=\"s1\">'warranty coverage'</span><span class=\"p\">,</span> <span class=\"s1\">'my-openai-config'</span><span class=\"p\">))</span> <span class=\"k\">AS</span> <span class=\"n\">score</span>\n<span class=\"k\">FROM</span> <span class=\"n\">Agent_Data</span><span class=\"p\">.</span><span class=\"n\">DocChunks</span> <span class=\"k\">c</span>\n<span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"n\">score</span> <span class=\"k\">DESC</span>\n</code></pre>\n\n</div>\n\n\n\n<blockquote>\n<p>Why this is powerful: you can <strong>pre-filter</strong> by price, category, language, tenant, dates, etc., and then <strong>rank by semantic similarity</strong>—all in one SQL statement.</p>\n</blockquote>\n\n\n\n\n<h2>\n  \n  \n  5) 🔌 Wire a live (mock) shipping API with Interoperability\n</h2>\n\n<p>The project exposes a tiny <strong>/api/shipping/status</strong> endpoint through IRIS <strong>Interoperability</strong>—perfect to simulate “real world” calls:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>curl <span class=\"nt\">-H</span> <span class=\"s2\">\"Content-Type: application/json\"</span> <span class=\"se\">\\</span>\n  <span class=\"nt\">-X</span> POST <span class=\"se\">\\</span>\n  <span class=\"nt\">-d</span> <span class=\"s1\">'{\"orderStatus\":\"Processing\",\"trackingNumber\":\"DHL7788\"}'</span> <span class=\"se\">\\</span>\n  http://localhost:52773/api/shipping/status\n</code></pre>\n\n</div>\n\n\n\n<p>Now open <strong>Visual Trace</strong> in the Portal to watch the message flow hop-by-hop (it’s like airport radar for your integration ✈️).</p>\n\n\n\n\n<h2>\n  \n  \n  6) 🤖 Meet the agent (smolagents + tools)\n</h2>\n\n<p>Peek at these files:</p>\n\n<ul>\n<li>\n<code>agent/customer_support_agent.py</code> — boots a <strong>CodeAgent</strong> and registers tools</li>\n<li>\n<code>agent/tools/sql_tool.py</code> — parameterized SQL helpers</li>\n<li>\n<code>agent/tools/rag_tool.py</code> — vector search + doc retrieval</li>\n<li>\n<code>agent/tools/shipping_tool.py</code> — calls the Interoperability endpoint</li>\n</ul>\n\n<blockquote>\n<p>The <strong>CodeAgent</strong> plans with short code steps and calls your tools. You bring the tools; it brings the brains using a LLM model</p>\n</blockquote>\n\n\n\n\n<h2>\n  \n  \n  7) ▶️ Run it!\n</h2>\n\n<p><strong>One-shot (quick tests)</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>python <span class=\"nt\">-m</span> cli.run <span class=\"nt\">--email</span> alice@example.com <span class=\"nt\">--message</span> <span class=\"s2\">\"Where is my order #1001?\"</span>\npython <span class=\"nt\">-m</span> cli.run <span class=\"nt\">--email</span> alice@example.com <span class=\"nt\">--message</span> <span class=\"s2\">\"Show electronics that are good for travel\"</span>\npython <span class=\"nt\">-m</span> cli.run <span class=\"nt\">--email</span> alice@example.com <span class=\"nt\">--message</span> <span class=\"s2\">\"Was my headphones order delivered, and what’s the return window?\"</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Interactive CLI</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>python <span class=\"nt\">-m</span> cli.run <span class=\"nt\">--email</span> alice@example.com\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Web UI (Gradio)</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>python <span class=\"nt\">-m</span> ui.gradio\n<span class=\"c\"># open http://localhost:7860</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  🛠️ Under the hood\n</h2>\n\n<p>The agent’s flow (simplified):</p>\n\n<ol>\n<li><p>🧭 <strong>Plan how to resolve the question and what available tools must be used</strong>: e.g., “check order status → fetch returns policy ”.</p></li>\n<li><p>🛤️ <strong>Call tools</strong> as needed</p></li>\n</ol>\n\n<ul>\n<li>🗃️ <strong>SQL</strong> for customers/orders/products</li>\n<li>📚 <strong>RAG</strong> over embeddings for FAQs/docs (and remember, you can <strong>prototype RAG right inside SQL</strong> using <code>EMBEDDING()</code> + vector ops as shown above)</li>\n<li>🔌 <strong>Interoperability API</strong> for shipping status</li>\n</ul>\n\n<ol>\n<li>🧩 <strong>Synthesize</strong>: stitch results into a friendly, precise answer.</li>\n</ol>\n\n<blockquote>\n<p>Add or swap tools as your use case grows: promotions, warranties, inventory, you name it.</p>\n</blockquote>\n\n\n\n\n<h2>\n  \n  \n  🎁 Wrap-up\n</h2>\n\n<p>You now have a compact <strong>AI Customer Support Agent</strong> that blends:</p>\n\n<ul>\n<li>🧠 LLM reasoning (<strong>smolagents CodeAgent</strong>)</li>\n<li>🗃️ <strong>Structured</strong> data (IRIS SQL)</li>\n<li>📚 <strong>Unstructured</strong> knowledge (IRIS Vector Search + RAG) — with the bonus that <strong><code>EMBEDDING()</code> lets you do hybrid + vector search directly from SQL</strong>\n</li>\n<li>🔌 <strong>Live</strong> system calls (IRIS Interoperability + Visual Trace)</li>\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-ib9","date":1761667910,"author":"Vibe YouTube","guid":319278,"unread":true,"content":"<h1>\n  \n  \n  Build a Python AI Agent in 10 Minutes\n</h1>\n\n<p>TechWithTim shows you how to whip up a fully working Python AI agent in under ten minutes—no fluff. You’ll install the basics, grab and configure your OpenAI API key, import the right libraries, set up your tools, hook into an LLM, write the driver code, and run a quick test. With handy timestamps, you can skip straight to whichever step you need.</p>\n\n<p>Along the way you’ll find links for a free Notion trial, a forever-free month of PyCharm Pro, and sample code on GitHub. If you’re craving even more hands-on guidance (and job-ready projects), Tim’s DevLaunch mentorship program is there to help you level up.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=gaGaPpnexxA\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-2ebc","date":1761667898,"author":"Vibe YouTube","guid":319277,"unread":true,"content":"<p>Tim’s video dives into three awesome but underused Python features: the new match statement for powerful pattern-matching, the dataclasses module to auto-generate init/eq/repr methods, and special argument syntax (using “/” and “*”) to enforce positional-only and keyword-only parameters. Learn how each of these modern tools can make your scripts cleaner, more maintainable, and more Pythonic.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=e0FvoOtdAQc\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"🧩 Building a Complete Learning Path for Generative AI Engineers — From Python to AI Agents","url":"https://dev.to/jaime_lucenaprez_3f7722/building-a-complete-learning-path-for-generative-ai-engineers-from-python-to-ai-agents-4i79","date":1761667890,"author":"Jaime Lucena Pérez","guid":319276,"unread":true,"content":"<blockquote>\n<p>I wanted to build the kind of open, structured roadmap I wish I had when I started learning AI development.</p>\n</blockquote>\n\n<p>Hi everyone 👋<br>\nI’m Jaime Lucena, a Generative AI Engineer who’s been building a <strong>complete, open-source learning path</strong> for anyone who wants to understand — and build — modern AI systems.</p>\n\n<p>Over the past months, I’ve been publishing a <strong>series of GitHub repositories</strong> that guide you from the absolute fundamentals of Python to <strong>production-ready AI agents</strong> with LangChain, LangGraph, CrewAI, FastAPI, and Streamlit.</p>\n\n<p>This post walks you through that journey — what each repository teaches, how they connect, and why I believe this structured approach can help you master the real skills behind modern AI engineering.</p>\n\n<p>⸻</p>\n\n<h2>\n  \n  \n  🚀 The Goal\n</h2>\n\n<p>There’s an ocean of tutorials out there — but most are fragmented, outdated, or skip the “why” behind the code.<br>\nSo I decided to create something more <strong>practical, modern, and progressive.</strong></p>\n\n<p>Each repo in this series builds directly on top of the previous one.<br>\nBy the end, you’re not just calling APIs — you’re <strong>orchestrating agents, managing memory, and deploying full AI apps.</strong></p>\n\n<p>⸻</p>\n\n<h2>\n  \n  \n  🧩 The Learning Path\n</h2>\n\n<p><strong>01 — Python Fundamentals for LangChain</strong></p>\n\n<p>📍 <a href=\"https://github.com/JaimeLucena/01-python-fundamentals\" rel=\"noopener noreferrer\">View on GitHub</a></p>\n\n<p>The Python you actually need for building AI applications.</p>\n\n<p>Instead of covering everything Python can do, this repo focuses on the 20% of the language that gives you 80% of the power — the parts directly relevant to working with LLMs and frameworks like LangChain.</p>\n\n<p>You’ll find 9 concise Jupyter notebooks covering:<br>\n    • Syntax, data types, and functions<br>\n    • Decorators, OOP, and debugging<br>\n    • Context managers and environment variables<br>\n    • Type hints and Pydantic models</p>\n\n<p>Each notebook builds on the previous one, creating a foundation that’s <strong>light, modern, and directly applicable to AI work.</strong></p>\n\n<p>🧠 Goal: Learn just enough Python to build, not to memorize.</p>\n\n<p>⸻</p>\n\n<p><strong>02 — LangChain Beginners</strong></p>\n\n<p>📍 <a href=\"https://github.com/JaimeLucena/02-langchain-beginners\" rel=\"noopener noreferrer\">View on GitHub</a></p>\n\n<p>A complete, hands-on guide to mastering LangChain fundamentals.</p>\n\n<p>Once you’re confident with Python, this second module introduces the <strong>core architecture of LangChain</strong> — using its modern LCEL syntax.</p>\n\n<p>It contains <strong>15 structured notebooks</strong>, covering everything from prompt templates to RAG and vector databases:<br>\n    • Build reusable <code>PromptTemplate</code> and <code>ChatPromptTemplate</code><br>\n    • Understand and compose <code>Runnable</code> chains<br>\n    • Learn retrieval-augmented generation (RAG)<br>\n    • Use vector stores (Chroma / FAISS) for semantic search<br>\n    • Implement retrievers and similarity search</p>\n\n<p>Each concept is demonstrated through working examples — so instead of theory, you’re constantly seeing how LLM logic connects in code.</p>\n\n<p>🧩 Goal: Move from using LLMs to building your own modular pipelines.</p>\n\n<p>⸻</p>\n\n<p><strong>03 — Agents &amp; Apps Foundations</strong></p>\n\n<p>📍 <a href=\"https://github.com/JaimeLucena/03-agents-and-apps-foundations\" rel=\"noopener noreferrer\">View on GitHub</a></p>\n\n<p>Learn to build and orchestrate AI agents, manage memory, and deploy them as real applications.</p>\n\n<p>This is where everything comes together — <strong>LangGraph, CrewAI, FastAPI, and Streamlit.</strong></p>\n\n<p>Across 7 notebooks, you’ll go from understanding agent theory to deploying a full AI-powered app:<br>\n    • What AI agents really are (and what they aren’t)<br>\n    • How LangGraph builds agent workflows with memory<br>\n    • How CrewAI coordinates multiple agents (e.g. Researcher + Writer)<br>\n    • Clean architecture patterns for real-world AI apps<br>\n    • Building and serving APIs with FastAPI<br>\n    • Creating interactive UIs with Streamlit</p>\n\n<p>By the end, you’ll have a <strong>fully functional pipeline</strong> — an AI backend with memory and logic, connected to a live frontend.</p>\n\n<p>🧠 Goal: Bridge the gap between “AI experiments” and deployable AI systems.</p>\n\n<h2>\n  \n  \n  🧩 How Everything Connects\n</h2>\n\n<p>What makes this series special is not just the code — it’s the structure.</p>\n\n<p>Each repository connects naturally to the next one.<br>\nInstead of jumping between random tutorials, you move step by step through the actual stages of becoming a <strong>Generative AI Engineer</strong>.</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Phase</th>\n<th>Repository</th>\n<th>Focus</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>🐍 <strong>1</strong>\n</td>\n<td><a href=\"https://github.com/JaimeLucena/01-python-fundamentals\" rel=\"noopener noreferrer\">01-python-fundamentals</a></td>\n<td>The Python you really need for AI work — concise, modern, and hands-on</td>\n</tr>\n<tr>\n<td>🔗 <strong>2</strong>\n</td>\n<td><a href=\"https://github.com/JaimeLucena/02-langchain-beginners\" rel=\"noopener noreferrer\">02-langchain-beginners</a></td>\n<td>Building structured, modular LangChain apps with LCEL and RAG</td>\n</tr>\n<tr>\n<td>🤖 <strong>3</strong>\n</td>\n<td><a href=\"https://github.com/JaimeLucena/03-agents-and-apps-foundations\" rel=\"noopener noreferrer\">03-agents-and-apps-foundations</a></td>\n<td>Orchestrating AI agents and deploying full applications</td>\n</tr>\n</tbody>\n</table></div>\n\n<p>By following this progression, you’ll build the full mental model of modern AI systems:</p>\n\n<p>From syntax → to chains → to agent orchestration</p>\n\n<p>From local notebooks → to backend APIs → to real UIs</p>\n\n<p>From theory → to production-ready implementation</p>\n\n<p>This isn’t just about learning a library — it’s about learning how to think in systems.</p>\n\n<h2>\n  \n  \n  🧱 Designed for Builders, Not Viewers\n</h2>\n\n<p>Most AI tutorials today teach you how to use tools.<br>\nBut this series focuses on teaching you how to build with them.</p>\n\n<p>That’s why every concept is:</p>\n\n<p><strong>Tied to code</strong> you can run</p>\n\n<p><strong>Explained in context</strong>, not isolation</p>\n\n<p><strong>Modular</strong>, so you can expand and reuse it later</p>\n\n<p>You’re not memorizing — you’re building reusable mental models and project templates that mirror how real AI engineers work.</p>\n\n<h2>\n  \n  \n  🌍 The Vision\n</h2>\n\n<p>My goal with this learning path is simple:<br>\nto make the <strong>Generative AI engineering discipline</strong> more accessible, structured, and practical.</p>\n\n<p>When I started learning about LangChain, RAG, and AI agents, I realized how fragmented the learning experience was.<br>\nThat’s why I decided to document the journey — building the resources I wish existed.</p>\n\n<p>Each repository is:</p>\n\n<p><strong>Free and open-source</strong></p>\n\n<p><strong>Fully runnable with <code>uv</code> + Jupyter</strong></p>\n\n<p><strong>Written in clear, modern Python</strong></p>\n\n<p><strong>Designed for clarity, not complexity</strong></p>\n\n<p>It’s an ecosystem — not just of code, but of <em>understanding</em>.</p>\n\n<h2>\n  \n  \n  ⚙️ What’s Next\n</h2>\n\n<p>The next step in this journey will be <strong>04 — AI Intermediate Projects</strong>,<br>\nwhere I’ll take everything built here and turn it into real-world, portfolio-ready applications.</p>\n\n<p>That’s where we’ll explore:</p>\n\n<p>RAG systems at scale</p>\n\n<p>Multi-agent orchestration</p>\n\n<p>Memory graphs and evaluation</p>\n\n<p>It’s going to be the stage where all your foundations evolve into production-grade AI systems.</p>\n\n<h2>\n  \n  \n  💬 Final Thoughts\n</h2>\n\n<p>If you’ve ever felt lost trying to connect all the dots between:</p>\n\n<p>Python fundamentals</p>\n\n<p>LangChain and LLM logic</p>\n\n<p>Orchestrators like LangGraph and CrewAI</p>\n\n<p>And building something people can actually use…</p>\n\n<p>Then this series is for you.</p>\n\n<p>Whether you’re a developer, researcher, or curious engineer —<br>\nyou’ll find here a clear, structured roadmap that takes you from <strong>learning to building.</strong></p>\n\n<h2>\n  \n  \n  🔗 Explore the Repositories\n</h2>\n\n<p>📦 GitHub Profile → <a href=\"https://github.com/JaimeLucena\" rel=\"noopener noreferrer\">github.com/JaimeLucena</a></p>\n\n<p><a href=\"https://github.com/JaimeLucena/01-python-fundamentals\" rel=\"noopener noreferrer\">01 — Python Fundamentals</a></p>\n\n<p><a href=\"https://github.com/JaimeLucena/02-langchain-beginners\" rel=\"noopener noreferrer\">02 — LangChain Beginners</a></p>\n\n<p><a href=\"https://github.com/JaimeLucena/03-agents-and-apps-foundations\" rel=\"noopener noreferrer\">03 — Agents &amp; Apps Foundations</a></p>\n\n<h2>\n  \n  \n  👋 Let’s Connect\n</h2>\n\n<p>If you’re also building with LangChain, LangGraph, or AI agents — I’d love to connect, exchange ideas, and keep improving this learning path together.</p>\n\n<p>📍 <a href=\"https://github.com/JaimeLucena\" rel=\"noopener noreferrer\">GitHub</a></p>\n\n<p>💼 <a href=\"https://www.linkedin.com/in/jaime-lucena-130524254/\" rel=\"noopener noreferrer\">LinkedIn</a></p>\n\n<h2>\n  \n  \n  ⭐ If this helps you...\n</h2>\n\n<p>If you find these repositories useful, please consider <strong>giving them a star ⭐</strong><br>\nIt helps others discover this path — and keeps the motivation going to keep expanding it.</p>\n\n<p><strong>Next chapter:</strong> Intermediate AI Projects — where things get real.<br>\nStay tuned 🚀</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[Boost]","url":"https://dev.to/aliy_adeleke/-i","date":1761667282,"author":"Aliy Adeleke","guid":319245,"unread":true,"content":"<div class=\"ltag__link\">\n  <a href=\"/aliy_adeleke\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F3166198%2F38493fff-dfe9-4116-993e-57722293966d.jpg\" alt=\"aliy_adeleke\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/aliy_adeleke/python-for-beginners-why-learning-python-could-be-the-smartest-first-step-youll-ever-take-in-3524\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>Python for Beginners: Why Learning Python Could Be the Smartest First Step You'll Ever Take in Programming</h2>\n      <h3>Aliy Adeleke ・ Sep 17</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#programming</span>\n        <span class=\"ltag__link__tag\">#webdev</span>\n        <span class=\"ltag__link__tag\">#ai</span>\n        <span class=\"ltag__link__tag\">#python</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Installing pandas with uv on windows","url":"https://dev.to/nazanin_ashrafi/installing-pandas-with-uv-on-windows-1nkj","date":1761666483,"author":"Nazanin Ashrafi","guid":319244,"unread":true,"content":"<p>Here's a quick overview to installing <code>pandas</code> on windows:<br>\nWe will follow these steps:</p>\n\n<ol>\n<li>Install uv (if you haven't already).</li>\n<li>Create a virtual environment using uv.</li>\n<li>Activate the virtual environment.</li>\n<li>Install pandas into the environment using uv.</li>\n</ol>\n\n\n<h2>\n  \n  \n  1. Install uv (If Needed)\n</h2>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>powershell <span class=\"nt\">-ExecutionPolicy</span> ByPass <span class=\"nt\">-c</span> <span class=\"s2\">\"irm https://astral.sh/uv/install.ps1 | iex\"</span>\n</code></pre>\n\n</div>\n\n<h2>\n  \n  \n  2. Create a Virtual Environment\n</h2>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Replace 'my_project' with your desired folder name</span>\n<span class=\"nb\">mkdir </span>my_project\n<span class=\"nb\">cd </span>my_project\n\n<span class=\"c\"># Create the virtual environment</span>\nuv venv\n</code></pre>\n\n</div>\n\n\n<p>You should see output similar to: <code>Creating virtual environment at: .venv</code></p>\n<h2>\n  \n  \n  3. Activate the Virtual Environment\n</h2>\n\n<ul>\n<li>For PowerShell:\n</li>\n</ul>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>.venv<span class=\"se\">\\S</span>cripts<span class=\"se\">\\A</span>ctivate.ps1\n</code></pre>\n\n</div>\n\n\n<ul>\n<li>For Command Prompt (cmd.exe):\n</li>\n</ul>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>.venv<span class=\"se\">\\S</span>cripts<span class=\"se\">\\a</span>ctivate\n</code></pre>\n\n</div>\n\n\n<p>Once activated, your command line prompt will typically change to show the environment's name (e.g., <code>(.venv) C:\\Users\\...)</code>.</p>\n<h2>\n  \n  \n  4. Install pandas\n</h2>\n\n<p>Now, use uv's package management interface to install pandas into the active virtual environment.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>uv pip <span class=\"nb\">install </span>pandas\n</code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Fashion Analysis: Understanding Customer Churn in Fashion Industry","url":"https://dev.to/gateru/fashion-analysis-understanding-customer-churn-in-fashion-industry-3jge","date":1761664646,"author":"Kaira Kelvin.","guid":319243,"unread":true,"content":"<h1>\n  \n  \n  Introduction\n</h1>\n\n<p>The fashion industry is growing daily and business owners need to understand customer behaviour to make profits and drive operations.The article delves into the customer churn across the fashion industry.</p>\n\n<h2>\n  \n  \n  🎯 Project Objective.\n</h2>\n\n<p>The primary objective of this analysis is to replace gut-based decisions with research-backed strategies to improve stock management and customer retention.The analysis aims to:</p>\n\n<ol>\n<li><p>Understand consumer behavior - This includes customer preferences,purchase frequency and understanding customer demographics.</p></li>\n<li><p>Analyzing inventory performance - identifying fast and slow moving items to optimize stock levels.</p></li>\n<li><p>Analyzing sales trends over time - Determining peak sales days, product categories and seasonal variations.</p></li>\n<li><p>Time -based analysis - examining how timing affects consumer engagements and purchases using the rolling 3-Month Sum.</p></li>\n</ol>\n\n<h3>\n  \n  \n  Dataset Overview.\n</h3>\n\n<p>The dataset used was inserted using SQL using the function;<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>create table fashion (\n    clothing_type VARCHAR(8),\n    category VARCHAR(11),\n    price DECIMAL(5,2),\n    discount DECIMAL(4,2),\n    shop_outlet VARCHAR(50),\n    delivery_date DATE,\n    order_date DATE,\n    revenue DECIMAL(7,2),\n    customer_name VARCHAR(50),\n    customer_email VARCHAR(50)\n</code></pre>\n\n</div>\n\n\n\n<p>Key Fields in the dataset:<br>\n        clothing_type <br>\n    category<br>\n    price <br>\n    discount <br>\n    shop_outlet<br>\n    delivery_date <br>\n    order_date <br>\n    revenue <br>\n    customer_name <br>\n    customer_email</p>\n\n<h2>\n  \n  \n  Analysis and Findings:\n</h2>\n\n<p>🔵 To understand the consumers demographics we analyzed the top 10 customers by revenue and found that women and children clothes are the leading cloths type purchased a lot and leads in revenue generation. <br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fede05yfm27x0ilkxwqi7.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fede05yfm27x0ilkxwqi7.png\" alt=\" \" width=\"652\" height=\"472\"></a></p>\n\n<h3>\n  \n  \n  Recommendation:\n</h3>\n\n<p>🟢 Shop oulets should consider discounting men's items to drive up sales , since there discount is directly related to sales.</p>\n\n<h3>\n  \n  \n  Findings.\n</h3>\n\n<p>🔵 Analyzing shop outlets that had highest customer visits and made a purchase.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fxsv0mqdkoixzejhbq9wn.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fxsv0mqdkoixzejhbq9wn.png\" alt=\" \" width=\"416\" height=\"378\"></a></p>\n\n<ul>\n<li>Brightbean recorded the highest number of visits among all shop outlets.</li>\n</ul>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Faz39q8znd7twl3axxhda.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Faz39q8znd7twl3axxhda.png\" alt=\" \" width=\"328\" height=\"178\"></a></p>\n\n<ul>\n<li>Brightbean also offered the highest discounts, which likely contributed to its higher foot traffic and engagement.</li>\n</ul>\n\n<h3>\n  \n  \n  Interpretation.\n</h3>\n\n<ul>\n<li>There’s a positive correlation between the level of discounts offered and the number of visits.</li>\n<li>Outlets providing more promotions and discounts attract significantly more customers.</li>\n</ul>\n\n<h3>\n  \n  \n  Recommendations:\n</h3>\n\n<p>🟢 Replicate Brightbean’s Strategy: - Other outlets should adopt similar discount or promotional approaches (e.g., limited-time offers, loyalty discounts).</p>\n\n<ul>\n<li>Use data-driven promotion scheduling to align offers with customer visit patterns. </li>\n</ul>\n\n<p>🟢 Improve Outlet Visibility: - Increase online presence and share shop updates on Instagram, WhatsApp, and TikTok to reach a broader audience.</p>\n\n<h3>\n  \n  \n  Sales Trends by Day:\n</h3>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F4epqcusiwq2g9l2w3ocu.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F4epqcusiwq2g9l2w3ocu.png\" alt=\" \" width=\"445\" height=\"297\"></a></p>\n\n<p>🔵 Friday recorded the highest sales, making it the peak shopping day.<br>\n🔵 Wednesday had the lowest sales, showing reduced customer engagement mid-week.</p>\n\n<h3>\n  \n  \n  Interpretation.\n</h3>\n\n<ul>\n<li>The spike in Friday sales reflects strong end-of-week consumer activity, possibly driven by payday spending or weekend preparation.</li>\n</ul>\n\n<h3>\n  \n  \n  Recommendation.\n</h3>\n\n<p>🟢 Enhance Friday Promotions: - Launch “Friday Frenzy” or “Fresh Friday” sales to maintain and grow Friday momentum.<br>\n🟢 Boosting sales - use mid-week social media campaigns and personalized offers to attract attention.such as \"Ladies Wednesday\".<br>\n🟢 Marketing Implications: - Build pre-Friday hype through digital channels.</p>\n\n<h2>\n  \n  \n  Time Based Analysis.\n</h2>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fubsl5wzue7kvpwuas8iw.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fubsl5wzue7kvpwuas8iw.png\" alt=\" \" width=\"366\" height=\"312\"></a></p>\n\n<h3>\n  \n  \n  Findings.\n</h3>\n\n<p>🔵 Sales were highest on Fridays and Saturdays, showing that consumers prefer shopping toward the weekend.</p>\n\n<h3>\n  \n  \n  Interpretation:\n</h3>\n\n<ul>\n<li>The end-of-week sales peak aligns with consumer behavior trends, as most shoppers have more free time or disposable income closer to weekends.</li>\n</ul>\n\n<h3>\n  \n  \n  Recommendations:\n</h3>\n\n<p>🟢 Enhance Weekend Engagement: </p>\n\n<ul>\n<li> Launch \"Styling Saturdays\" promotions to maximize weekend traffic.</li>\n<li>Offer free outfit styling services or photo-tag discounts (e.g., “Take a pic in-store, tag us, and get 10% off your next visit”).</li>\n</ul>\n\n<h2>\n  \n  \n  🚀 Call to Action.\n</h2>\n\n<p>AS I have analyzed and explored the financial performance of this project, its crystal clear that data driven decision- making is crucial for optimizing sales, driving the growth of the business and retaining happy customers.</p>\n\n<p>If you found this analysis insightful, consider sharing it with business stakeholders and your network . Also you can reach out or leave a comment if you want to apply the same techniques on your data.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"I Built a Million Dollar AI Coding Platform for Completely Free 🇮🇳","url":"https://dev.to/vebgen/i-built-a-million-dollar-ai-coding-platform-for-completely-free-28om","date":1761662793,"author":"VebGen Official","guid":319212,"unread":true,"content":"<p>I'm Ramesh. I'm 20, from India 🇮🇳, and I've been coding since I was 17.</p>\n\n<p>Eight months ago, I got frustrated watching my $247/month AI tool bill climb just because the AI kept re-reading my code to understand it.</p>\n\n<p>So I built something different.</p>\n\n\n\n\n<h2>\n  \n  \n  💸 The Problem with Every AI Coding Tool\n</h2>\n\n<p><strong>Cursor. Copilot. Claude. They all do this:</strong></p>\n\n<p>Every time you ask a question, they send your entire codebase to expensive language models. Not to write code. Just to <strong>read</strong> it.</p>\n\n<p>Then they forget everything and do it again for the next question.</p>\n\n<p>You're basically paying rent for the AI to understand your own code. Over and over.</p>\n\n<p>That's not coding assistance. That's a subscription trap.</p>\n\n\n\n\n<h2>\n  \n  \n  ⚡ VebGen: Read Once, Remember Forever\n</h2>\n\n<p>Instead of burning tokens on reading code, <strong>VebGen uses Abstract Syntax Trees (AST)</strong> to understand your code structure locally.</p>\n\n<p><strong>In 0.2 seconds. For $0. Forever.</strong></p>\n\n<p>Think of it like this:</p>\n\n<ul>\n<li>\n<strong>Other tools:</strong> Read the entire Harry Potter series every time you ask about a character 📚</li>\n<li>\n<strong>VebGen:</strong> Read it once, build an index, answer questions instantly ⚡</li>\n</ul>\n\n<p>The AI only gets used for <strong>writing</strong> code, not reading it.</p>\n\n\n\n\n<h2>\n  \n  \n  🚀 Where Others Fail, VebGen Shines\n</h2>\n\n<h3>\n  \n  \n  💰 1. Token Costs\n</h3>\n\n<ul>\n<li>\n<strong>Them:</strong> $20-500/month burning tokens on reading</li>\n<li>\n<strong>VebGen:</strong> $0 for reading, pay only for writing</li>\n</ul>\n\n<h3>\n  \n  \n  🧠 2. Understanding Your Code\n</h3>\n\n<ul>\n<li>\n<strong>Them:</strong> Send entire files, hope for the best</li>\n<li>\n<strong>VebGen:</strong> Parse 95+ framework constructs, understand relationships, detect issues</li>\n</ul>\n\n<h3>\n  \n  \n  🔧 3. Self-Healing\n</h3>\n\n<ul>\n<li>\n<strong>Them:</strong> Generate code, you fix bugs</li>\n<li>\n<strong>VebGen:</strong> Two AI agents work together (TARS plans, CASE builds), auto-fix 70% of bugs</li>\n</ul>\n\n<h3>\n  \n  \n  ♿ 4. Accessibility\n</h3>\n\n<ul>\n<li>\n<strong>Them:</strong> Generate code, you manually check WCAG compliance</li>\n<li>\n<strong>VebGen:</strong> Built-in WCAG 2.1 validation, color contrast checks, alt-text verification</li>\n</ul>\n\n<h3>\n  \n  \n  🔒 5. Security\n</h3>\n\n<ul>\n<li>\n<strong>Them:</strong> Hope nothing dangerous happens</li>\n<li>\n<strong>VebGen:</strong> Military-grade sandbox, can't harm your system even if it tries</li>\n</ul>\n\n<h3>\n  \n  \n  💾 6. Losing Work\n</h3>\n\n<ul>\n<li>\n<strong>Them:</strong> Crash = start over</li>\n<li>\n<strong>VebGen:</strong> SHA-256 verified state, 5 auto-backups, never lose progress</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  🛠️ My Journey\n</h2>\n\n<p><strong>Month 1-2:</strong> Thought this would take 2 months. LOL. 😅</p>\n\n<p><strong>Month 3-4:</strong> Realized parsing Django models is harder than I thought. So many edge cases.</p>\n\n<p><strong>Month 5:</strong> Everything broke. Rewrote the entire agent system. Learned about dual-agent architectures.</p>\n\n<p><strong>Month 6:</strong> Added accessibility validation because I was tired of manually checking color contrast.</p>\n\n<p><strong>Month 7:</strong> Wrote 356 tests because debugging at 3 AM is awful. ☕</p>\n\n<p><strong>Month 8:</strong> Finally released v0.3.0. Zero dollars spent on infrastructure. Just me, Python, and free-tier APIs.</p>\n\n<p>The hardest part wasn't the code. It was believing that free-tier APIs could build something production-ready when everyone says you need expensive models.</p>\n\n<p><strong>Turns out, you don't.</strong> ✨</p>\n\n\n\n\n<h2>\n  \n  \n  📊 The Numbers\n</h2>\n\n<p>After 8 months of solo work:</p>\n\n<ul>\n<li>✅ <strong>900KB</strong> production code</li>\n<li>✅ <strong>356 tests</strong> (99.7% pass rate)</li>\n<li>✅ <strong>$0 spent</strong> (Gemini Flash is free!)</li>\n<li>✅ <strong>WCAG 2.1</strong> compliant output</li>\n<li>✅ <strong>Open source</strong> (MIT license)</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  💡 Why This Matters\n</h2>\n\n<p>You shouldn't pay a subscription just for an AI to <strong>read</strong> your code.</p>\n\n<p>You shouldn't manually check accessibility compliance in 2025.</p>\n\n<p>You shouldn't lose hours of work because the AI crashed.</p>\n\n<p><strong>VebGen proves you can build better tools with:</strong></p>\n\n<ul>\n<li>Zero funding 💰</li>\n<li>Free APIs 🆓</li>\n<li>One person 👤</li>\n<li>Open source 📖</li>\n</ul>\n\n<p>If I can do this from India with no money, imagine what <strong>you</strong> can build.</p>\n\n\n\n\n<h2>\n  \n  \n  🎯 Try It\n</h2>\n\n<p>⭐ <strong>GitHub:</strong> <a href=\"https://github.com/vebgenofficial/vebgen\" rel=\"noopener noreferrer\">https://github.com/vebgenofficial/vebgen</a></p>\n\n<p>Installation takes 2 minutes. Works with OpenAI, Anthropic, Google, OpenRouter.</p>\n\n\n\n\n<h2>\n  \n  \n  📚 What I Learned\n</h2>\n\n<p><strong>Technical lessons:</strong></p>\n\n<ul>\n<li>AST parsing is 10x faster than dumping files</li>\n<li>Free-tier APIs are shockingly powerful</li>\n<li>Dual agents &gt; single agent</li>\n<li>Accessibility should be built-in, not bolted on</li>\n</ul>\n\n<p><strong>Personal lessons:</strong></p>\n\n<ul>\n<li>Solo doesn't mean alone (open source community helped!) 🤝</li>\n<li>Perfect is the enemy of shipped 🚢</li>\n<li>356 tests &gt; 0 tests (obviously, but I learned the hard way)</li>\n<li>You don't need VC money to build great software 💪</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  ❓ Questions?\n</h2>\n\n<p>Ask me anything! I'm here to help and learn from this community.</p>\n\n<p>If this resonates with you, star the repo ⭐. It helps others discover VebGen and keeps me motivated.</p>\n\n<p><strong>Built with ❤️ in India</strong> 🇮🇳</p>\n\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python basics - Day 15","url":"https://dev.to/ian_b838138a27a917398d181/python-basics-day-15-kfd","date":1761661027,"author":"Sabin Sim","guid":319211,"unread":true,"content":"<h2>\n  \n  \n  <strong>Day 15 – Functions (def, return, parameters)</strong>\n</h2>\n\n<p><strong>Project:</strong> Build a “Simple Calculator” using user-defined functions</p>\n\n\n\n\n<p><strong>01. Learning Goal</strong></p>\n\n<p>By the end of this lesson, you will be able to:</p>\n\n<ul>\n<li>Define and call your own functions using <code>def</code>\n</li>\n<li>Pass values into functions using parameters\n</li>\n<li>Return results using <code>return</code>\n</li>\n<li>Understand default parameters and multiple return values\n</li>\n</ul>\n\n\n\n\n<p><strong>02. Problem Scenario</strong></p>\n\n<p>You often repeat the same code for arithmetic operations.<br><br>\nYour goal is to <strong>modularize your code</strong> by creating reusable functions to handle these tasks.</p>\n\n\n\n<p><strong>03. Step 1 – What is a Function?</strong></p>\n\n<p>A <strong>function</strong> is a reusable block of code that performs a specific task.<br><br>\nYou must <strong>define</strong> it first, then <strong>call</strong> it.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">say_hello</span><span class=\"p\">():</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Hello!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"nf\">say_hello</span><span class=\"p\">()</span>   <span class=\"c1\"># Function call\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<p><strong>04. Step 2 – Using Parameters</strong></p>\n\n<p>Functions can receive data through <strong>parameters</strong>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Nice to meet you, </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Sabin</span><span class=\"sh\">\"</span><span class=\"p\">)</span>   <span class=\"c1\"># Nice to meet you, Sabin!\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<p><strong>05. Step 3 – Returning Values</strong></p>\n\n<p>Functions can <strong>return</strong> results using <code>return</code>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>   <span class=\"c1\"># 8\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<p><strong>06. Step 4 – Returning Multiple Values</strong></p>\n\n<p>Python functions can return more than one value at once (as a tuple).<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">calc</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">b</span>\n\n<span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"nf\">calc</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">)</span>   <span class=\"c1\"># 15 5 50\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<p><strong>07. Step 5 – Default Parameters</strong></p>\n\n<p>A parameter can have a default value, used when no argument is provided.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Guest</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Hello, </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"nf\">greet</span><span class=\"p\">()</span>          <span class=\"c1\"># Hello, Guest\n</span><span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Sabin</span><span class=\"sh\">\"</span><span class=\"p\">)</span>   <span class=\"c1\"># Hello, Sabin\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<p><strong>08. Step 6 – Functions with Loops</strong></p>\n\n<p>You can combine loops with functions for repetitive calculations.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">square</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"n\">n</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">square</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<p><strong>09. Step 7 – Practice Examples</strong></p>\n\n<p><strong>Example 1: Basic Calculator Functions</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"n\">b</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Add:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Subtract:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Example 2: String Function</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">shout</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">upper</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">!!!</span><span class=\"sh\">\"</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">shout</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">python</span><span class=\"sh\">\"</span><span class=\"p\">))</span>   <span class=\"c1\"># PYTHON!!!\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<p><strong>10. Step 8 – Mini Project: Simple Calculator</strong></p>\n\n<p>Build a mini calculator that performs multiple operations using functions.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n<span class=\"k\">def</span> <span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"n\">b</span>\n<span class=\"k\">def</span> <span class=\"nf\">mul</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">b</span>\n<span class=\"k\">def</span> <span class=\"nf\">div</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">/</span> <span class=\"n\">b</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"sh\">\"</span><span class=\"s\">Error: Division by zero</span><span class=\"sh\">\"</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"nf\">float</span><span class=\"p\">(</span><span class=\"nf\">input</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Enter first number: </span><span class=\"sh\">\"</span><span class=\"p\">))</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"nf\">float</span><span class=\"p\">(</span><span class=\"nf\">input</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Enter second number: </span><span class=\"sh\">\"</span><span class=\"p\">))</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Add:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Subtract:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Multiply:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nf\">mul</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Divide:</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nf\">div</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">))</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<p><strong>11. Reflection</strong></p>\n\n<p>You have learned how to:</p>\n\n<ul>\n<li>Define and call custom functions</li>\n<li>Use parameters and return statements</li>\n<li>Handle multiple results and default values</li>\n<li>Build a <strong>Simple Calculator</strong> using clean, modular code</li>\n</ul>\n\n<p>Next → <strong>Day 16 – Advanced Function Topics</strong><br>\nLearn about <code>*args</code>, <code>**kwargs</code>, and flexible parameter handling in Python.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-397o","date":1761660522,"author":"Vibe YouTube","guid":319210,"unread":true,"content":"<p><strong>Build a Python AI Agent in 10 Minutes</strong><br><br>\nThis quick tutorial by Tech With Tim walks you through spinning up a Python AI agent in under ten minutes. You’ll cover everything from installing requirements and grabbing your OpenAI API key to importing libraries, defining custom “tools,” wiring up an LLM-based agent, writing the driver code, and running tests—all neatly timestamped so you can jump straight to the part you need.</p>\n\n<p>Along the way, you can snag a free Notion trial, get a PyCharm IDE (plus a month of Pro), check out the full code on GitHub, and even learn about the DevLaunch mentorship program for hands-on guidance beyond tutorials.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=gaGaPpnexxA\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: 3 Unique Python Features You NEED To Know","url":"https://dev.to/vibe_youtube/tech-with-tim-3-unique-python-features-you-need-to-know-4co9","date":1761660508,"author":"Vibe YouTube","guid":319209,"unread":true,"content":"<p>In this video, Tim walks you through three under-the-radar Python power-ups: the brand-new match statement for clean pattern matching, dataclasses to ditch boilerplate in your classes, and positional-only &amp; keyword-only arguments for rock-solid function signatures. These modern features can seriously level up your code but often go unused simply because folks don’t know they exist.</p>\n\n<p>He’s also teamed up with Brilliant to give viewers free access (plus 20% off an annual Premium subscription) to sharpen your skills, and plugs DevLaunch—his hands-on mentorship program designed to take you from tutorials to real-world projects and job offers.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=e0FvoOtdAQc\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Will Kahn-Greene: Open Source Project Maintenance 2025","url":"https://bluesock.org/~willkg/blog/dev/maintenance_2025.html","date":1761660000,"author":"","guid":319372,"unread":true,"content":"<p>Every October, I do a maintenance pass on all my projects. At a minimum, that\ninvolves dropping support for whatever Python version is no longer supported\nand adding support for the most recently released Python version. While doing\nthat, I go through the issue tracker, answer questions, and fix whatever I can\nfix. Then I release new versions. Then I think about which projects I should\ndeprecate and figure out a deprecation plan for them.</p><p>This post covers the 2025 round.</p>","contentLength":474,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Speed Up Python With Concurrency","url":"https://realpython.com/courses/speed-python-concurrency/","date":1761660000,"author":"Real Python","guid":319199,"unread":true,"content":"<p>Concurrency is the act of having your computer do multiple things at the same time. If you’ve heard a lot of talk about <a href=\"https://realpython.com/python37-new-features/\">being added to Python</a> but are curious how it compares to other concurrency methods or are wondering what concurrency is and how it might speed up your program, you’ve come to the right place.</p><p>In this course, you’ll learn the following:</p><ul><li>How I/O bound programs are effected by latency</li><li>Which concurrent programming patterns to use</li><li>What the differences are between the Python concurrency libraries</li><li>How to write code that uses the , , and  libraries</li></ul><p>Sample code was tested using Python 3.13. Since much of the  library has been in flux since Python 3.4, it’s recommended to use at least Python 3.9 for the  portions of the course.</p>","contentLength":747,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Kryypto, a keyboard-driven python text editor.","url":"https://dev.to/capsule-/kryypto-a-keyboard-driven-python-text-editor-21nn","date":1761659562,"author":"Raman","guid":319186,"unread":true,"content":"<p>hey, i made a python text editor for windows (soon for linux too).</p>\n\n<p>Kryypto is a lightweight, fully keyboard-supported python text editor with deep customization and GitHub integration.</p>\n\n<p><strong>Repo</strong>: <a href=\"https://github.com/NaturalCapsule/Kryypto\" rel=\"noopener noreferrer\">https://github.com/NaturalCapsule/Kryypto</a></p>\n\n<p><strong>GitHub</strong> pages: <a href=\"https://naturalcapsule.github.io/Kryypto/\" rel=\"noopener noreferrer\">https://naturalcapsule.github.io/Kryypto/</a></p>\n\n<h2>\n  \n  \n  ✨ Features\n</h2>\n\n<ul>\n<li>Lightweight – minimal overhead</li>\n<li>Full Keyboard Support – no need for the mouse, every feature is accessible via hotkeys</li>\n<li>Discord presence</li>\n<li>Live MarkDown Preview</li>\n<li>Session Restore</li>\n<li>Custom Styling\n\n<ul>\n<li>\n<code>config\\configuration.cfg</code> for editor settings</li>\n<li>CSS for theme and style customization</li>\n</ul>\n\n\n</li>\n\n<li>\n\n<p>Editing Tools</p>\n\n<ul>\n<li>Find text in file</li>\n<li>Jump to line</li>\n<li>Adjustable cursor (color &amp; width)</li>\n<li>Configurable animations (types &amp; duration)</li>\n</ul>\n\n\n</li>\n\n<li>\n\n<p>Git &amp; GitHub Integration</p>\n\n<ul>\n<li>View total commits</li>\n<li>See last commit message &amp; date</li>\n<li>Track file changes directly inside the editor</li>\n</ul>\n\n\n</li>\n\n<li>\n\n<p>Productivity Features</p>\n\n<ul>\n<li>Autocompleter</li>\n<li>Builtin Terminal</li>\n<li>Docstring panel (hover to see function/class docstring)</li>\n<li>Tab-based file switching</li>\n<li>Bookmarking lines</li>\n<li>Custom title bar</li>\n</ul>\n\n\n</li>\n\n<li>\n\n<p>Syntax Highlighting for</p>\n\n<ul>\n<li>Python</li>\n<li>CSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>Config files</li>\n<li>Markdown</li>\n<li>Bash</li>\n<li>Dockerfile</li>\n</ul>\n\n\n</li>\n\n</ul>\n\n<p>if you got any suggestion, feel free to write it in the comments!.</p>\n\n<p>support the project by giving it a star on <strong>GitHub</strong></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Dev Log Backlog","url":"https://dev.to/desertthunder/dev-log-backlog-f38","date":1761657363,"author":"Owais","guid":319185,"unread":true,"content":"<h2>\n  \n  \n  Dev Log 2: 2025-10-27\n</h2>\n\n<h3>\n  \n  \n  Yesterday\n</h3>\n\n<p>I did a lot of work on beacon's constraint and solver system. This was after setting up completions and planning out a linting engine.</p>\n\n<h3>\n  \n  \n  Today\n</h3>\n\n<p>So far I worked extensively on extending the linting engine. You can read an overview about it <a href=\"https://stormlightlabs.github.io/beacon/lsp/lint_rules.html\" rel=\"noopener noreferrer\">here</a>.</p>\n\n<p>The docstring parsing is mostly complete and code needs to be back ported into the <a href=\"https://crates.io/crates/parserst\" rel=\"noopener noreferrer\">parserst</a> crate I've made.</p>\n\n<p>Stub parsing and discovery has also been added with typeshed integration in the works. With time today I plan to setup caches for a lot of the data the LSP uses.</p>\n\n<h4>\n  \n  \n  SkyPanel\n</h4>\n\n<p>My goal today is to build a two pronged project to improve my experience on bluesky. It'll require me to learn about how the AT Protocol works in earnest. I was really enthusiastic about it when I got on the platform last year but didn't have a problem to solve but now I've got some deficiencies I want to address.</p>\n\n<p>Basically there will be a chrome extension that lets you build on the fly feeds and perform some saving and backup on posts, like links, videos, etc. It'll also let you view your feeds with a collapsed view per user, so you're not scrolling through an entire page of a single user's posts and reposts.</p>\n\n<p>The other half is a CLI that lets you read bluesky posts in the terminal. Gotta prototype with a CLI.</p>\n\n<p>You can see what I've started <a href=\"https://github.com/stormlightlabs/SkyPanel\" rel=\"noopener noreferrer\">here</a></p>\n\n<h2>\n  \n  \n  Dev Log 1: 2025-10-26\n</h2>\n\n<p>This is my second post here on leaflet! I think today's log is a little more refined than yesterday. It's probably because the Dodgers won.</p>\n\n<h3>\n  \n  \n  Yesterday\n</h3>\n\n<p>I worked on error boundaries in VoltX and scaffolded some observability enhancements.</p>\n\n<p>Most of my time was spent on workspace level LSP features. The foundation is a dependency graph and the Tarjan SCC (strongly connected components) algorithm. The LSP indexes the workspace, resolves imports, and handles a cache.</p>\n\n<h3>\n  \n  \n  Today\n</h3>\n\n<p>As I continue to learn about type inference to solidify my understanding, I plan to keep pushing towards completing the LSP implementation.</p>\n\n<h4>\n  \n  \n  Static Analysis\n</h4>\n\n<p>Control &amp; data flow analysis using graphs (per function). This includes narrowing of flow and construction of union types for conditionals (each branch is a member).</p>\n\n<p>Handle PEP 484/585 type hints &amp; annotations</p>\n\n<p>Work on diagnostics - I'm a little worried about this one, because I want to create useful messages and I know I'll be second guessing wording.</p>\n\n<h2>\n  \n  \n  Dev Log 0: 2025-10-25\n</h2>\n\n<p>Today I'm working on two projects: <a href=\"https://github.com/stormlightlabs/volt\" rel=\"noopener noreferrer\">VoltX.js</a>, a web framework inspired by htmx and alpine, and <a href=\"https://github.com/stormlightlabs/beacon\" rel=\"noopener noreferrer\">beacon</a>, a LSP implementation and type system for Python.</p>\n\n<h3>\n  \n  \n  Beacon\n</h3>\n\n<p>Yesterday I extracted and then expanded the rst parser and renderer that I wrote into a standalone published crate. Today I plan on reintegrating it.</p>\n\n<p>I've got a lot of reading to do. So far my work on the hindley milner system portion of the codebase feels like a blur. Lots of stuff I don't completely understand. There's a popular paper called Typing Haskell in Haskell that I'm going to try to get through today.</p>\n\n<h3>\n  \n  \n  VoltX\n</h3>\n\n<p>Today's all about developer experience and \"delight.\" I want to make the tool as drop in as possible with powerful insights into the reactive lifecycle. So far I've finished error boundaries and even deployed a <a href=\"https://voltx-demo.pages.dev\" rel=\"noopener noreferrer\">demo</a>!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"things_to_do_when_bored_online_DEV_20251028210127_1_210138","url":"https://dev.to/__f27cfeca2e21de8d2378/thingstodowhenboredonlinedev202510282101271210138-3clo","date":1761656485,"author":"hunting3@126.com","guid":319156,"unread":true,"content":"<h1>\n  \n  \n  Online Activity Guide #1: Comprehensive Overview for Digital Painting\n</h1>\n\n<p>When you find yourself with free time online, digital painting offers an engaging way to transform boredom into valuable skills. This comprehensive overview will show you how to get started.</p>\n\n<h2>\n  \n  \n  Getting Started\n</h2>\n\n<p>Begin your digital painting journey with these steps:</p>\n\n<ul>\n<li>Set clear learning objectives</li>\n<li>Gather essential tools and resources</li>\n<li>Create a consistent practice schedule</li>\n<li>Join relevant online communities</li>\n</ul>\n\n<h2>\n  \n  \n  Expand Your Learning Horizons\n</h2>\n\n<p>While you're exploring ways to make the most of your online time, I've written about similar topics that you might find valuable:</p>\n\n<ul>\n<li>\n<strong>Latest on Main</strong>: <a href=\"http://www.things-to-do-when-bored-online.com/things_to_do_when_bored_online_main_20251028_1.html\" rel=\"noopener noreferrer\">Online Activity Guide #1: Practical Workshop for Online Courses</a> - Discover how online courses can transform your bored moments online into productive skill-building sessions with our practical workshop.</li>\n<li>\n<strong>Latest on Mataroa</strong>: <a href=\"https://root6234.mataroa.blog/blog/things_to_do_when_bored_online_mataroa_20251028_1-0a65cc42/\" rel=\"noopener noreferrer\">Online Activity Guide #1: Complete Beginner'S Tutorial for Digital Marketing</a> - Discover how digital marketing can transform your bored moments online into productive skill-building sessions with our complete beginner's tutorial.</li>\n<li>\n<strong>Previous on Mataroa</strong>: <a href=\"https://root6234.mataroa.blog/blog/things_to_do_when_bored_online_mataroa_20251028_1-8473cbbc/\" rel=\"noopener noreferrer\">Online Activity Guide #1: Advanced Techniques for Data Analysis</a> - Discover how data analysis can transform your bored moments online into productive skill-building sessions with our advanced techniques.</li>\n<li>\n<strong>Latest on Telegraph</strong>: <a href=\"https://telegra.ph/things-to-do-when-bored-online-Telegraph-20251028-1-10-28-3\" rel=\"noopener noreferrer\">Online Activity Guide #1: Advanced Techniques for Learning Programming</a> - Discover how learning programming can transform your bored moments online into productive skill-building sessions with our advanced techniques.</li>\n<li>\n<strong>Previous on Telegraph</strong>: <a href=\"https://telegra.ph/things-to-do-when-bored-online-Telegraph-20251028-1-10-28-2\" rel=\"noopener noreferrer\">Online Activity Guide #1: Comprehensive Overview for Language Learning</a> - Discover how language learning can transform your bored moments online into productive skill-building sessions with our comprehensive overview.</li>\n</ul>\n\n<p>These articles offer different perspectives on making your online time more productive.</p>\n\n<h2>\n  \n  \n  Core Learning Strategies\n</h2>\n\n<p>Master digital painting with these proven approaches:</p>\n\n<ul>\n<li>Break down complex concepts into manageable steps</li>\n<li>Practice regularly with real-world projects</li>\n<li>Seek feedback from experienced practitioners</li>\n<li>Stay updated with latest trends and tools</li>\n</ul>\n\n<h2>\n  \n  \n  Tags\n</h2>\n\n<p>boredom, productivity, learning, skills, online-activities</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"devto_test_20251028210136_3006","url":"https://dev.to/__f27cfeca2e21de8d2378/devtotest202510282101363006-1el9","date":1761656484,"author":"hunting3@126.com","guid":319155,"unread":true,"content":"<h1>\n  \n  \n  devto_test_20251028210136_3006\n</h1>\n\n<p>This is a test post to verify the publishing process.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"things_to_do_when_bored_DEV_20251028205906_2_210003","url":"https://dev.to/__f27cfeca2e21de8d2378/thingstodowhenboreddev202510282059062210003-540j","date":1761656392,"author":"hunting3@126.com","guid":319154,"unread":true,"content":"<h1>\n  \n  \n  Boredom Buster #2: Complete step-by-step guide for Digital Painting\n</h1>\n\n<p>When you find yourself with free time online, digital painting offers an engaging way to transform boredom into valuable skills. This step-by-step guide will show you how to get started.</p>\n\n<h2>\n  \n  \n  Getting Started\n</h2>\n\n<p>Begin your digital painting journey with these steps:</p>\n\n<ul>\n<li>Set clear learning objectives</li>\n<li>Gather essential tools and resources</li>\n<li>Create a consistent practice schedule</li>\n<li>Join relevant online communities</li>\n</ul>\n\n<h2>\n  \n  \n  Expand Your Learning Horizons\n</h2>\n\n<p>While you're exploring ways to make the most of your online time, I've written about similar topics that you might find valuable:</p>\n\n<ul>\n<li>\n<strong>Latest on Main</strong>: <a href=\"http://www.things-to-do-when-bored.com/things_to_do_when_bored_main_20251028_2.html\" rel=\"noopener noreferrer\">Boredom Buster #2: Complete complete beginner's tutorial for Language Learning</a> - Discover how language learning can transform your bored moments online into productive skill-building sessions with our complete beginner's tutorial.</li>\n<li>\n<strong>Latest on Mataroa</strong>: <a href=\"https://root4234.mataroa.blog/blog/things_to_do_when_bored_mataroa_20251028_2-3130b020/\" rel=\"noopener noreferrer\">Boredom Buster #2: Complete complete beginner's tutorial for Digital Marketing</a> - Discover how digital marketing can transform your bored moments online into productive skill-building sessions with our complete beginner's tutorial.</li>\n<li>\n<strong>Previous on Mataroa</strong>: <a href=\"https://root4234.mataroa.blog/blog/things_to_do_when_bored_mataroa_20251028_1-14af68e5/\" rel=\"noopener noreferrer\">Boredom Buster #1: Complete complete beginner's tutorial for Photo Editing</a> - Discover how photo editing can transform your bored moments online into productive skill-building sessions with our complete beginner's tutorial.</li>\n<li>\n<strong>Latest on Telegraph</strong>: <a href=\"https://telegra.ph/things-to-do-when-bored-Telegraph-20251028-2-10-28-3\" rel=\"noopener noreferrer\">Boredom Buster #2: Complete comprehensive overview for Podcast Creation</a> - Discover how podcast creation can transform your bored moments online into productive skill-building sessions with our comprehensive overview.</li>\n<li>\n<strong>Previous on Telegraph</strong>: <a href=\"https://telegra.ph/things-to-do-when-bored-Telegraph-20251028-1-10-28-3\" rel=\"noopener noreferrer\">Boredom Buster #1: Complete complete beginner's tutorial for Video Production</a> - Discover how video production can transform your bored moments online into productive skill-building sessions with our complete beginner's tutorial.</li>\n</ul>\n\n<p>These articles offer different perspectives on making your online time more productive.</p>\n\n<h2>\n  \n  \n  Core Learning Strategies\n</h2>\n\n<p>Master digital painting with these proven approaches:</p>\n\n<ul>\n<li>Break down complex concepts into manageable steps</li>\n<li>Practice regularly with real-world projects</li>\n<li>Seek feedback from experienced practitioners</li>\n<li>Stay updated with latest trends and tools</li>\n</ul>\n\n<h2>\n  \n  \n  Tags\n</h2>\n\n<p>boredom, productivity, learning, skills, online-activities</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"devto_test_20251028210000_3386","url":"https://dev.to/__f27cfeca2e21de8d2378/devtotest202510282100003386-4g3","date":1761656389,"author":"hunting3@126.com","guid":319153,"unread":true,"content":"<h1>\n  \n  \n  devto_test_20251028210000_3386\n</h1>\n\n<p>This is a test post to verify the publishing process.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"things_to_do_when_bored_DEV_20251028205906_1_205929","url":"https://dev.to/__f27cfeca2e21de8d2378/thingstodowhenboreddev202510282059061205929-3j18","date":1761656357,"author":"hunting3@126.com","guid":319152,"unread":true,"content":"<h1>\n  \n  \n  Boredom Buster #1: Complete quick start guide for Photo Editing\n</h1>\n\n<p>When you find yourself with free time online, photo editing offers an engaging way to transform boredom into valuable skills. This quick start guide will show you how to get started.</p>\n\n<h2>\n  \n  \n  Getting Started\n</h2>\n\n<p>Begin your photo editing journey with these steps:</p>\n\n<ul>\n<li>Set clear learning objectives</li>\n<li>Gather essential tools and resources</li>\n<li>Create a consistent practice schedule</li>\n<li>Join relevant online communities</li>\n</ul>\n\n<h2>\n  \n  \n  Expand Your Learning Horizons\n</h2>\n\n<p>While you're exploring ways to make the most of your online time, I've written about similar topics that you might find valuable:</p>\n\n<ul>\n<li>\n<strong>Latest on Main</strong>: <a href=\"http://www.things-to-do-when-bored.com/things_to_do_when_bored_main_20251028_2.html\" rel=\"noopener noreferrer\">Boredom Buster #2: Complete complete beginner's tutorial for Language Learning</a> - Discover how language learning can transform your bored moments online into productive skill-building sessions with our complete beginner's tutorial.</li>\n<li>\n<strong>Latest on Mataroa</strong>: <a href=\"https://root4234.mataroa.blog/blog/things_to_do_when_bored_mataroa_20251028_2-3130b020/\" rel=\"noopener noreferrer\">Boredom Buster #2: Complete complete beginner's tutorial for Digital Marketing</a> - Discover how digital marketing can transform your bored moments online into productive skill-building sessions with our complete beginner's tutorial.</li>\n<li>\n<strong>Previous on Mataroa</strong>: <a href=\"https://root4234.mataroa.blog/blog/things_to_do_when_bored_mataroa_20251028_1-14af68e5/\" rel=\"noopener noreferrer\">Boredom Buster #1: Complete complete beginner's tutorial for Photo Editing</a> - Discover how photo editing can transform your bored moments online into productive skill-building sessions with our complete beginner's tutorial.</li>\n<li>\n<strong>Latest on Telegraph</strong>: <a href=\"https://telegra.ph/things-to-do-when-bored-Telegraph-20251028-2-10-28-3\" rel=\"noopener noreferrer\">Boredom Buster #2: Complete comprehensive overview for Podcast Creation</a> - Discover how podcast creation can transform your bored moments online into productive skill-building sessions with our comprehensive overview.</li>\n<li>\n<strong>Previous on Telegraph</strong>: <a href=\"https://telegra.ph/things-to-do-when-bored-Telegraph-20251028-1-10-28-3\" rel=\"noopener noreferrer\">Boredom Buster #1: Complete complete beginner's tutorial for Video Production</a> - Discover how video production can transform your bored moments online into productive skill-building sessions with our complete beginner's tutorial.</li>\n</ul>\n\n<p>These articles offer different perspectives on making your online time more productive.</p>\n\n<h2>\n  \n  \n  Core Learning Strategies\n</h2>\n\n<p>Master photo editing with these proven approaches:</p>\n\n<ul>\n<li>Break down complex concepts into manageable steps</li>\n<li>Practice regularly with real-world projects</li>\n<li>Seek feedback from experienced practitioners</li>\n<li>Stay updated with latest trends and tools</li>\n</ul>\n\n<h2>\n  \n  \n  Tags\n</h2>\n\n<p>boredom, productivity, learning, skills, online-activities</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"devto_test_20251028205928_9347","url":"https://dev.to/__f27cfeca2e21de8d2378/devtotest202510282059289347-1h75","date":1761656356,"author":"hunting3@126.com","guid":319151,"unread":true,"content":"<h1>\n  \n  \n  devto_test_20251028205928_9347\n</h1>\n\n<p>This is a test post to verify the publishing process.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"onlinebored_DEV_20251028205756_1_205811","url":"https://dev.to/__f27cfeca2e21de8d2378/onlineboreddev202510282057561205811-g46","date":1761656279,"author":"hunting3@126.com","guid":319150,"unread":true,"content":"<h1>\n  \n  \n  Online Boredom Solution #1: Ultimate Step-By-Step Guide for Language Learning\n</h1>\n\n<p>When you find yourself with free time online, language learning offers an engaging way to transform boredom into valuable skills. This step-by-step guide will show you how to get started.</p>\n\n<h2>\n  \n  \n  Getting Started\n</h2>\n\n<p>Begin your language learning journey with these steps:</p>\n\n<ul>\n<li>Set clear learning objectives</li>\n<li>Gather essential tools and resources</li>\n<li>Create a consistent practice schedule</li>\n<li>Join relevant online communities</li>\n</ul>\n\n<h2>\n  \n  \n  Expand Your Learning Horizons\n</h2>\n\n<p>While you're exploring ways to make the most of your online time, I've written about similar topics that you might find valuable:</p>\n\n<ul>\n<li>\n<strong>Latest on Main</strong>: <a href=\"http://www.onlinebored.com/onlinebored_main_20251028_1.html\" rel=\"noopener noreferrer\">Online Boredom Solution #1: Ultimate Advanced Techniques for Game Development</a> - Discover how game development can transform your bored moments online into productive skill-building sessions with our advanced techniques.</li>\n<li>\n<strong>Latest on Mataroa</strong>: <a href=\"https://root2134523.mataroa.blog/blog/onlinebored_mataroa_20251028_1-0ec2ac7d/\" rel=\"noopener noreferrer\">Online Boredom Solution #1: Ultimate Advanced Techniques for Digital Marketing</a> - Discover how digital marketing can transform your bored moments online into productive skill-building sessions with our advanced techniques.</li>\n<li>\n<strong>Previous on Mataroa</strong>: <a href=\"https://root2134523.mataroa.blog/blog/onlinebored_mataroa_20251028_1-1a5274b0/\" rel=\"noopener noreferrer\">Online Boredom Solution #1: Ultimate Practical Workshop for Video Production</a> - Discover how video production can transform your bored moments online into productive skill-building sessions with our practical workshop.</li>\n<li>\n<strong>Latest on Telegraph</strong>: <a href=\"https://telegra.ph/onlinebored-Telegraph-20251028-1-10-28-4\" rel=\"noopener noreferrer\">Online Boredom Solution #1: Ultimate Advanced Techniques for Data Analysis</a> - Discover how data analysis can transform your bored moments online into productive skill-building sessions with our advanced techniques.</li>\n<li>\n<strong>Previous on Telegraph</strong>: <a href=\"https://telegra.ph/onlinebored-Telegraph-20251028-1-10-28-2\" rel=\"noopener noreferrer\">Online Boredom Solution #1: Ultimate Step-By-Step Guide for Photo Editing</a> - Discover how photo editing can transform your bored moments online into productive skill-building sessions with our step-by-step guide.</li>\n</ul>\n\n<p>These articles offer different perspectives on making your online time more productive.</p>\n\n<h2>\n  \n  \n  Core Learning Strategies\n</h2>\n\n<p>Master language learning with these proven approaches:</p>\n\n<ul>\n<li>Break down complex concepts into manageable steps</li>\n<li>Practice regularly with real-world projects</li>\n<li>Seek feedback from experienced practitioners</li>\n<li>Stay updated with latest trends and tools</li>\n</ul>\n\n<h2>\n  \n  \n  Tags\n</h2>\n\n<p>boredom, productivity, learning, skills, online-activities</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"devto_test_20251028205806_4834","url":"https://dev.to/__f27cfeca2e21de8d2378/devtotest202510282058064834-2pp9","date":1761656277,"author":"hunting3@126.com","guid":319149,"unread":true,"content":"<h1>\n  \n  \n  devto_test_20251028205806_4834\n</h1>\n\n<p>This is a test post to verify the publishing process.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"onlinebored_DEV_20251028_1","url":"https://dev.to/__f27cfeca2e21de8d2378/onlineboreddev202510281-14b8","date":1761655170,"author":"hunting3@126.com","guid":319148,"unread":true,"content":"<h1>\n  \n  \n  Online Boredom Solution #1: Ultimate Comprehensive Overview for Digital Painting\n</h1>\n\n<p>When you find yourself with free time online, digital painting offers an engaging way to transform boredom into valuable skills. This comprehensive overview will show you how to get started.</p>\n\n<h2>\n  \n  \n  Getting Started\n</h2>\n\n<p>Begin your digital painting journey with these steps:</p>\n\n<ul>\n<li>Set clear learning objectives</li>\n<li>Gather essential tools and resources</li>\n<li>Create a consistent practice schedule</li>\n<li>Join relevant online communities</li>\n</ul>\n\n<h2>\n  \n  \n  Expand Your Learning Horizons\n</h2>\n\n<p>While you're exploring ways to make the most of your online time, I've written about similar topics that you might find valuable:</p>\n\n<ul>\n<li>\n<strong>Latest on Main</strong>: <a href=\"http://www.onlinebored.com/onlinebored_main_20251028_1.html\" rel=\"noopener noreferrer\">Online Boredom Solution #1: Ultimate Comprehensive Overview for Learning Programming</a> - Discover how learning programming can transform your bored moments online into productive skill-building sessions with our comprehensive overview.</li>\n<li>\n<strong>Latest on Mataroa</strong>: <a href=\"https://root2134523.mataroa.blog/blog/onlinebored_mataroa_20251028_1-1a5274b0/\" rel=\"noopener noreferrer\">Online Boredom Solution #1: Ultimate Practical Workshop for Video Production</a> - Discover how video production can transform your bored moments online into productive skill-building sessions with our practical workshop.</li>\n<li>\n<strong>Previous on Mataroa</strong>: <a href=\"https://root2134523.mataroa.blog/blog/onlinebored_mataroa_20251028_1-1927334e/\" rel=\"noopener noreferrer\">Online Boredom Solution #1: Ultimate Practical Workshop for Language Learning</a> - Discover how language learning can transform your bored moments online into productive skill-building sessions with our practical workshop.</li>\n<li>\n<strong>Latest on Telegraph</strong>: <a href=\"https://telegra.ph/onlinebored-Telegraph-20251028-1-10-28-2\" rel=\"noopener noreferrer\">Online Boredom Solution #1: Ultimate Step-By-Step Guide for Photo Editing</a> - Discover how photo editing can transform your bored moments online into productive skill-building sessions with our step-by-step guide.</li>\n<li>\n<strong>Previous on Telegraph</strong>: <a href=\"https://telegra.ph/onlinebored-Telegraph-20251028-1-10-28\" rel=\"noopener noreferrer\">Online Boredom Solution #1: Ultimate Practical Workshop for Online Courses</a> - Discover how online courses can transform your bored moments online into productive skill-building sessions with our practical workshop.</li>\n</ul>\n\n<p>These articles offer different perspectives on making your online time more productive.</p>\n\n<h2>\n  \n  \n  Core Learning Strategies\n</h2>\n\n<p>Master digital painting with these proven approaches:</p>\n\n<ul>\n<li>Break down complex concepts into manageable steps</li>\n<li>Practice regularly with real-world projects</li>\n<li>Seek feedback from experienced practitioners</li>\n<li>Stay updated with latest trends and tools</li>\n</ul>\n\n<h2>\n  \n  \n  Tags\n</h2>\n\n<p>boredom, productivity, learning, skills, online-activities</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"test_devto","url":"https://dev.to/__f27cfeca2e21de8d2378/testdevto-18pi","date":1761655167,"author":"hunting3@126.com","guid":319147,"unread":true,"content":"<h1>\n  \n  \n  Test DEV.to Post\n</h1>\n\n<p>This is a test post to verify the publishing process.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"First sakila project log","url":"https://dev.to/aka_artem_dd17be93c/first-sakila-project-log-3hl4","date":1761654820,"author":"Thomas Jager","guid":319146,"unread":true,"content":"<p>📅 Date: 2025-10-16 → 2025-10-18</p>\n\n<p>🔧 Tools: Python, Pydantic, MySQL, JSON, Git Submodules</p>\n\n<p>⸻</p>\n\n<p>How It Started</p>\n\n<p>I hit a point where my project needed more than raw input() checks.<br>\nValidation logic was scattered between main.py, connectors, and random if/else.<br>\nTime to clean it up.</p>\n\n<p>At the same time, my teacher asked to create a separate repo for homeworks, but I already use a monorepo. I finally decided to try something I wanted a long time:</p>\n\n<p>create a second repo and attach it as git submodule.</p>\n\n<p>So now advanced_python lives inside my main PythonJourney repo.</p>\n\n\n\n\n<p>The Problem</p>\n\n<p>User input validation became too complicated:</p>\n\n<ul>\n<li>keyword must be validated</li>\n<li>genre must exist in DB</li>\n<li>years must be within allowed range</li>\n</ul>\n\n<p>I needed one system that handles all validation in one place.</p>\n\n<p>Also, performing validation directly against the DB was slow.<br>\nEach user input triggered a DB read.</p>\n\n\n\n\n<p>The Fix:</p>\n\n<p>1.Created a separate module dedicated only to validation.<br>\nAll checks now run through Pydantic.</p>\n\n<p>2.Extracted genres from the Sakila database and saved them into genre.json.</p>\n\n<p>3.Created a cache module to load genres once and keep them in a dict<br>\nso validation is instant.</p>\n\n<p>4.Added custom validators in Pydantic:</p>\n\n<ul>\n<li>keyword validation</li>\n<li>genre existence check (compared using cache dict)</li>\n<li>year range validation</li>\n</ul>\n\n<ol>\n<li>Updated main.py to send user input through Pydantic first, then run DB query.</li>\n</ol>\n\n\n\n\n<p>What I Learned:</p>\n\n<ul>\n<li>Validation belongs between user input and DB, not inside DB logic.</li>\n<li>Pydantic simplifies input handling and makes code cleaner.</li>\n<li>Cache is faster than querying the DB on every input.</li>\n<li>Git submodules are perfect when you want to keep a monorepo but split projects.</li>\n</ul>\n\n\n\n\n<p>✍ Personal Note<br>\nNot a huge feature, but this was the first time when the structure finally felt right.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"onlinebored_DEV_20251028_1","url":"https://dev.to/__f27cfeca2e21de8d2378/onlineboreddev202510281-2jm0","date":1761654365,"author":"hunting3@126.com","guid":319145,"unread":true,"content":"<h1>\n  \n  \n  Online Boredom Solution #1: Ultimate Advanced Techniques for Blog Writing\n</h1>\n\n<p>When you find yourself with free time online, blog writing offers an engaging way to transform boredom into valuable skills. This advanced techniques will show you how to get started.</p>\n\n<h2>\n  \n  \n  Getting Started\n</h2>\n\n<p>Begin your blog writing journey with these steps:</p>\n\n<ul>\n<li>Set clear learning objectives</li>\n<li>Gather essential tools and resources</li>\n<li>Create a consistent practice schedule</li>\n<li>Join relevant online communities</li>\n</ul>\n\n<h2>\n  \n  \n  Expand Your Learning Horizons\n</h2>\n\n<p>While you're exploring ways to make the most of your online time, I've written about similar topics that you might find valuable:</p>\n\n<ul>\n<li>\n<strong>Latest on Main</strong>: <a href=\"http://www.onlinebored.com/onlinebored_main_20251028_1.html\" rel=\"noopener noreferrer\">Online Boredom Solution #1: Ultimate Comprehensive Overview for Learning Programming</a> - Discover how learning programming can transform your bored moments online into productive skill-building sessions with our comprehensive overview.</li>\n<li>\n<strong>Latest on Mataroa</strong>: <a href=\"https://root2134523.mataroa.blog/blog/onlinebored_mataroa_20251028_1-1a5274b0/\" rel=\"noopener noreferrer\">Online Boredom Solution #1: Ultimate Practical Workshop for Video Production</a> - Discover how video production can transform your bored moments online into productive skill-building sessions with our practical workshop.</li>\n<li>\n<strong>Previous on Mataroa</strong>: <a href=\"https://root2134523.mataroa.blog/blog/onlinebored_mataroa_20251028_1-1927334e/\" rel=\"noopener noreferrer\">Online Boredom Solution #1: Ultimate Practical Workshop for Language Learning</a> - Discover how language learning can transform your bored moments online into productive skill-building sessions with our practical workshop.</li>\n<li>\n<strong>Latest on Telegraph</strong>: <a href=\"https://telegra.ph/onlinebored-Telegraph-20251028-1-10-28-2\" rel=\"noopener noreferrer\">Online Boredom Solution #1: Ultimate Step-By-Step Guide for Photo Editing</a> - Discover how photo editing can transform your bored moments online into productive skill-building sessions with our step-by-step guide.</li>\n<li>\n<strong>Previous on Telegraph</strong>: <a href=\"https://telegra.ph/onlinebored-Telegraph-20251028-1-10-28\" rel=\"noopener noreferrer\">Online Boredom Solution #1: Ultimate Practical Workshop for Online Courses</a> - Discover how online courses can transform your bored moments online into productive skill-building sessions with our practical workshop.</li>\n</ul>\n\n<p>These articles offer different perspectives on making your online time more productive.</p>\n\n<h2>\n  \n  \n  Core Learning Strategies\n</h2>\n\n<p>Master blog writing with these proven approaches:</p>\n\n<ul>\n<li>Break down complex concepts into manageable steps</li>\n<li>Practice regularly with real-world projects</li>\n<li>Seek feedback from experienced practitioners</li>\n<li>Stay updated with latest trends and tools</li>\n</ul>\n\n<h2>\n  \n  \n  Tags\n</h2>\n\n<p>boredom, productivity, learning, skills, online-activities</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Signal in the Noise - Analyzing Web-Scraped Review Data with Python & Pandas","url":"https://dev.to/alexv_data/the-signal-in-the-noise-analyzing-web-scraped-review-data-with-python-pandas-njl","date":1761652534,"author":"Alex Vance","guid":319119,"unread":true,"content":"<h3>\n  \n  \n  Introduction: From Raw Data to Actionable Insight\n</h3>\n\n<p>In my last post, <a href=\"https://dev.to/alexv_data/web-scraping-for-consumer-research-a-python-beautifulsoup-tutorial-44ge\">Web Scraping for Consumer Research: A Python &amp; BeautifulSoup Tutorial</a>, we built a Python scraper to extract data from a sample review webpage. We successfully turned messy HTML into a clean <code>uk_review_data.csv</code> file.</p>\n\n<p>But raw data, on its own, is just noise. The real magic happens when you start asking questions. This is where a data analyst's work truly begins.</p>\n\n<p>In this tutorial, we'll take our scraped data and use the powerful Pandas library to clean, analyze, and interpret it. We'll answer the kind of questions a discerning consumer would ask, transforming a simple table into a powerful decision-making tool. This is the \"why\" behind the scraping.</p>\n\n<h3>\n  \n  \n  Part 1: Setting Up the Lab and Loading Our Data\n</h3>\n\n<p>Let's start by firing up our Python environment. We'll need <code>pandas</code> and <code>matplotlib</code> for visualization.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>pip install pandas matplotlib\n</code></pre>\n\n</div>\n\n\n\n<p>Now, let's load the CSV we created in the last session and remind ourselves what it looks like.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import pandas as pd\nimport matplotlib.pyplot as plt\n\nLoad the dataset\nMake sure 'uk_review_data.csv' is in the same directory as your script\ndf = pd.read_csv('uk_review_data.csv')\n\nprint(\"--- Initial Data ---\")\nprint(df)\n</code></pre>\n\n</div>\n\n\n\n<p>Output:</p>\n\n<p><code>--- Initial Data ---<br>\n          Name  Rating              Bonus           Payout Speed<br>\n0  PlaySafe UK  9.5/10    100% up to £50  24 Hours (e-wallets)<br>\n1  Gambit Palace  8.8/10  Get 200 Free Spins              2-3 Days</code></p>\n<h2>\n  \n  \n  Part 2: Data Cleaning – The Unsung Hero of Analysis\n</h2>\n\n<p>Real-world data is never clean. Our Rating column is a string (\"9.5/10\"), and our Payout Speed is descriptive text. To analyze them, we need to convert these into quantifiable, numeric metrics.</p>\n\n<p>Cleaning the 'Rating' Column</p>\n\n<p>Let's extract the numeric part of the rating and convert it to a float.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Extract the numeric part (e.g., '9.5') and convert to a float data type\ndf['Rating_Float'] = df['Rating'].apply(lambda x: float(x.split('/')))\n\nprint(\"\\n--- Data with Numeric Rating ---\")\nprint(df[['Name', 'Rating_Float']])\n</code></pre>\n\n</div>\n\n\n\n<p>Perfect. Now we can actually perform calculations on it.</p>\n\n<p>Categorizing 'Payout Speed'</p>\n\n<p>\"24 Hours\" is much better than \"2-3 Days\". Let's create a numerical score for this. We'll build a simple function to assign a higher score to faster payouts.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>def score_payout_speed(speed_string):\n    \"\"\"Assigns a score based on the payout speed text.\"\"\"\n    if '24 Hours' in speed_string or 'Hours' in speed_string:\n        return 3 # Elite Tier\n    elif '1-2 Days' in speed_string:\n        return 2 # Standard Tier\n    elif '2-3 Days' in speed_string or 'Days' in speed_string:\n        return 1 # Slow Tier\n    else:\n        return 0 # Unknown or Not Stated\n\ndf['Payout_Score'] = df['Payout Speed'].apply(score_payout_speed)\n\nprint(\"\\n--- Data with Payout Score ---\")\nprint(df[['Name', 'Payout Speed', 'Payout_Score']])\n</code></pre>\n\n</div>\n\n\n\n<p>Now we have a structured, analyzable dataset. This is the kind of backend data processing that powers any serious online casino review site in the UK.</p>\n\n<h2>\n  \n  \n  Part 3: Answering the Key Questions (The Analysis)\n</h2>\n\n<p>With our clean data, we can now act like a real analyst.</p>\n\n<p>Question 1: Who has the best overall score?</p>\n\n<p>Let's create a simple \"Overall Score\" by combining our two new metrics. We'll give the Payout_Score double weight because, as any consumer knows, getting your money quickly is a massive signal of trust.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Create a weighted score. Payout speed is more important, so we'll multiply it by 2.\ndf['Overall_Score'] = (df['Rating_Float'] * 1) + (df['Payout_Score'] * 2)\n\nSort the dataframe to find the best-performing sites based on our model\nbest_sites = df.sort_values(by='Overall_Score', ascending=False)\n\nprint(\"\\n--- Final Ranking Based on Our Model ---\")\nprint(best_sites[['Name', 'Overall_Score', 'Rating_Float', 'Payout_Score']])\n</code></pre>\n\n</div>\n\n\n\n<p>Output:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>--- Final Ranking Based on Our Model ---\n          Name  Overall_Score  Rating_Float  Payout_Score\n0  PlaySafe UK           15.5           9.5             3\n1  Gambit Palace           10.8           8.8             1\n\n</code></pre>\n\n</div>\n\n\n\n<p>Instantly, we have a data-driven ranking. \"PlaySafe UK\" wins not just because its rating is higher, but because its payout speed is in the elite tier, giving it a significant boost in our weighted model.</p>\n\n<p>Question 2: How do these sites stack up visually?</p>\n\n<p>A chart is worth a thousand lines of code. Let's use matplotlib to create a simple bar chart of our results to make the conclusion immediate and powerful.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Plotting the results using Matplotlib\nplt.figure(figsize=(8, 6))\nbars = plt.bar(best_sites['Name'], best_sites['Overall_Score'], color=['#4CAF50', '#FFC107'])\nplt.title('Overall Site Score (Weighted for Payout Speed)', fontsize=16)\nplt.ylabel('Weighted Score', fontsize=12)\nplt.ylim(0, 20) # Set a consistent y-axis limit\nplt.tight_layout()\n\nSave the plot to a file so you can upload it to your post!\nplt.savefig('ranking_chart.png')\n\nprint(\"\\nChart has been saved as ranking_chart.png\")\n</code></pre>\n\n</div>\n\n\n\n<p>This simple visualization makes our findings crystal clear. You can now upload the ranking_chart.png file directly into your DEV.to post.</p>\n\n<h2>\n  \n  \n  Conclusion: This is The \"Why\"\n</h2>\n\n<p>We started with raw HTML, scraped it, cleaned it, and finally, analyzed it to produce a clear, actionable ranking. This two-part tutorial is a microcosm of the work required to build a genuinely useful <a href=\"https://casimo.org/uk/\" rel=\"noopener noreferrer\">online casino aggregator in the UK</a>.</p>\n\n<p>It’s not about just listing bonuses. It’s about a four-step process:</p>\n\n<p>Gathering the right data points.</p>\n\n<p>Structuring that data into a usable format.</p>\n\n<p>Building a model to weigh what's truly important to the user.</p>\n\n<p>Presenting the results in a clear, transparent way.</p>\n\n<p>This entire process is the engine that runs our main project. At Casimo.org, we apply this exact logic—but scaled up a thousand times—to create the most in-depth and objective resource for UK players. </p>\n\n<p>Thanks for following along, and happy coding!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Why Python Stands Out as the Jack of All Trades","url":"https://dev.to/tanmayvj10/why-python-still-stands-out-as-the-jack-of-all-trades-523h","date":1761651011,"author":"Tanmay Vijay","guid":319118,"unread":true,"content":"<p>💡 <strong>As a founder</strong> — ever wished you could ship faster without hiring a 10-person dev team?<br>\n💡 <strong>As a student</strong> — felt lost jumping between stacks just to start something new?<br>\n💡 <strong>As an enthusiast</strong> — wanted one language to build a web app, automate a task, and train a model — all in one go?</p>\n\n<p>Though I’ve often heard developers explain why a particular language — say Java, C++, or Go — outperforms others in certain areas, and why Python might not be the “best” choice for every scenario.</p>\n\n<p>But in my opinion,</p>\n\n<blockquote>\n<p>the real question isn’t <em><strong>Can Python do it?</strong></em> or<br>\n<strong><em>How optimized is Python for it?</em></strong><br>\nIt’s <strong><em>How easily can it be done in Python?</em></strong></p>\n</blockquote>\n\n<p>I completely understand why specialized alternatives are sometimes necessary, every tech stack has its sweet spot.</p>\n\n<p>But here’s why I still believe <strong>Python stands out as the jack of all trades</strong></p>\n\n<ol>\n<li>Learning and Experimentation</li>\n<li>The Real Edge: “How Easily It Can Be Done”</li>\n<li>The Startup Perspective</li>\n<li>Web Development: Pragmatism Over Perfection</li>\n<li>Robotics and Hardware Interfacing</li>\n<li>Machine Learning and Data Science</li>\n<li>Realistic Tradeoffs</li>\n<li>The Unified Ecosystem</li>\n<li>Final Thought</li>\n</ol>\n\n\n\n\n<h2>\n  \n  \n  🧠 1. Learning and Experimentation: Where Everyone Can Start\n</h2>\n\n<p>When you’re starting your development journey, you might not know where you’ll specialize — web, AI, robotics, or data science.  </p>\n\n<p><code>Python</code> gives you the <strong>freedom to explore everything</strong>, without needing to constantly switch syntax or frameworks.</p>\n\n\n\n\n<h2>\n  \n  \n  ⚙️ 2. The Real Edge: “How Easily It Can Be Done”\n</h2>\n\n<p>While other languages might outperform Python in raw execution speed, they often demand <strong>more setup, more boilerplate, and more time</strong> to achieve the same results.</p>\n\n<p>In Python, you can go from concept to implementation in minutes not hours.  </p>\n\n<p>This ease of translation from <strong>idea → prototype → product</strong> is what makes Python so invaluable for startups, students, and innovators.</p>\n\n\n\n\n<h2>\n  \n  \n  🚀 3. The Startup Perspective: When Speed &gt; Perfection\n</h2>\n\n<p>In a startup environment, the goal isn’t to build the <em>most optimized</em> system — it’s to build the <em>most adaptable</em> one.</p>\n\n<p>And as discussed previously, python leads in:</p>\n\n<ul>\n<li>🔹 <strong>Rapid prototyping</strong> – turn ideas into working demos fast\n</li>\n<li>🔹 <strong>Readable syntax</strong> – ideal for small, collaborative teams\n</li>\n<li>🔹 <strong>Large ecosystem</strong> – ready-to-use libraries for almost any task\n</li>\n</ul>\n\n<p>When your team is small and timelines are tight, Python’s simplicity and ecosystem act as a multiplier for productivity.<br><br>\nYou can always optimize or migrate later, but early velocity is priceless.</p>\n\n\n\n\n<h2>\n  \n  \n  🌐 4. Web Development: Pragmatism Over Perfection\n</h2>\n\n<p>In web development, while the <code>MERN</code> stack (MongoDB, Express, React, Node) dominates the scene, Python’s backend frameworks like <code>Flask</code>, <code>FastAPI</code>, and <code>Django</code> remain favorites for good reason.</p>\n\n<p>They make it easy to:</p>\n\n<ul>\n<li>Build APIs quickly\n</li>\n<li>Handle authentication and routing\n</li>\n<li>Integrate analytics or data models\n</li>\n</ul>\n\n<p>So while JavaScript might be the “god” of frontend and full-stack development, Python shines when your startup opts for <strong>microservices</strong> or heavy <strong>backend data processing</strong>, where flexibility and rapid development matter more than raw concurrency.</p>\n\n\n\n\n<h2>\n  \n  \n  🤖 5. Robotics and Hardware Interfacing: Bridging Code and the Real World\n</h2>\n\n<p>A lot of people don’t realize that Python has become one of the leading languages in <strong>robotics</strong> (especially for prototyping and research).</p>\n\n<p>With frameworks like:</p>\n\n<ul>\n<li>\n<code>ROS (Robot Operating System)</code>\n</li>\n<li>\n<code>PySerial</code>, <code>OpenCV</code>, and <code>NumPy</code> for sensor control and image processing\n</li>\n<li>\n<code>TensorFlow</code> and <code>PyTorch</code> for robotics-based machine learning\n</li>\n</ul>\n\n<p>Python allows developers to <strong>bridge software and hardware effortlessly</strong>.<br><br>\nEven though low-level control still relies on <code>C++</code> or embedded code, Python’s scripting ability makes it perfect for <strong>control logic, simulation, and system coordination</strong>.</p>\n\n\n\n\n<h2>\n  \n  \n  🧠 6. Machine Learning and Data Science: The Power Play\n</h2>\n\n<p>Python is practically synonymous with machine learning and data analytics today.<br><br>\nIt doesn’t just <em>support</em> AI development, it <em>drives</em> it.</p>\n\n<p>From <code>NumPy</code> and <code>Pandas</code> to <code>TensorFlow</code> and <code>PyTorch</code>, Python forms the backbone of modern data workflows.  </p>\n\n<p>This domain alone justifies why Python will remain indispensable because it’s not just code, it’s the <em>interface between computation and creativity</em>.</p>\n\n\n\n\n<h2>\n  \n  \n  ⚖️ 7. Realistic Tradeoffs (and Why They’re Okay)\n</h2>\n\n<p>Yes — Python isn’t perfect:</p>\n\n<ul>\n<li>🐢 It’s slower than compiled languages\n</li>\n<li>🔒 The Global Interpreter Lock (GIL) limits true multithreading\n</li>\n<li>📱 It’s not ideal for native mobile apps or low-level systems\n</li>\n</ul>\n\n<p>But those are <strong>engineering tradeoffs</strong>, for most startups, research teams, and cross-domain developers, Python’s <strong>speed of development</strong> far outweighs its <strong>speed of execution</strong>.</p>\n\n\n\n\n<h2>\n  \n  \n  🔗 8. The Unified Ecosystem: One Language, Infinite Domains\n</h2>\n\n<p>Few languages let you do all this <strong>without context switching</strong>:</p>\n\n<ul>\n<li>🌐 Web apps → <code>Flask</code>, <code>Django</code>\n</li>\n<li>🤖 Robotics → <code>ROS</code>, <code>OpenCV</code>\n</li>\n<li>🧠 AI/ML → <code>PyTorch</code>, <code>TensorFlow</code>\n</li>\n<li>⚙️ Automation → <code>Selenium</code>, <code>Fabric</code>\n</li>\n<li>📊 Data Analysis → <code>Pandas</code>, <code>Matplotlib</code>\n</li>\n</ul>\n\n<p>Python’s greatest power is it’s <strong>continuity</strong>. You can walk across completely different fields without needing to relearn the language.</p>\n\n\n\n\n<h2>\n  \n  \n  💬 9. Final Thought\n</h2>\n\n<p>In the end:</p>\n\n<blockquote>\n<p>⚡ <strong>Specialization matters for perfection.</strong><br><br>\n🧩 <strong>Versatility matters for innovation.</strong>  </p>\n\n<p>And that’s why Python — the true jack of all trades — still stands strong across every domain.</p>\n</blockquote>\n\n\n\n\n<p><strong><em>Stay curious, keep building, and keep exploring new ideas.</em></strong></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"AI Voice Agent Transforming Customer Experience","url":"https://dev.to/supportsoft/ai-voice-agent-transforming-customer-experience-16h5","date":1761649743,"author":"Supportsoft Technologies","guid":319117,"unread":true,"content":"<p>Since every business engages with customers every day, and as businesses grow, customers also increase; many organisations respond by scaling their support team. However, for businesses, this becomes expensive and inefficient very quickly. Particularly, supporting a large service department consumes a budget, increases operational complexity and does not result in a demonstrable continual positive experience. Customers have to wait long periods, and agents burn through repetitive escalated queries with an input /output ‘dialogue’ that contacts few, if any, analytical skills. There has to be a more cost-efficient, 24/7 scalable approach than draining value from your business that even elevates with your business growth. Welcome, AI voice agents. The period of automating customer service has arrived and the leading <strong><a href=\"https://supportsoft.com.au/ai-app-development\" rel=\"noopener noreferrer\">AI app developers Australia</a></strong> and around the world are executing this.</p>\n\n<p><strong>What is an AI Voice Agent?</strong></p>\n\n<p>AI voice agents are intelligent systems utilising <strong><a href=\"https://www.ibm.com/think/topics/natural-language-processing\" rel=\"noopener noreferrer\">natural language processing</a></strong> (NLP) and <strong><a href=\"https://www.cloudflare.com/en-gb/learning/ai/what-is-large-language-model/\" rel=\"noopener noreferrer\">large language models</a></strong> (LLMs) to effectively manage telephone calls in the same manner as a human representative would.</p>\n\n<p>This is how they work<br>\n:<br>\nSpeech Recognition – recognises a customer’s speech and converts it to text<br>\nUnderstanding – determines intent and emotion with the use of NLP and AI<br>\nResponse Generation – leverages LLMs to create accurate, human-like responses<br>\nAction Execution -  executes tasks like updating records, pulling data or immediately routeing the call to a human agent.</p>\n\n<p>By having seamless integration with a CRM, smart routeing, and web search capabilities, AI voice agents resolve simple enquiries without human involvement and escalate complex ones   which require the assistance of human agents. For organisations with partnerships with leading AI developers in Australia, AI voice agents are changing the nature of operation for that organisation’s support operations.</p>\n\n<p><strong>AI Voice Agent Characteristics</strong></p>\n\n<p>Characteristic  of AI voice agents is the implementation of advanced technology enabling intelligent, responsive, and humanlike interaction with customers. AI voice agents are built with state-of-the-art technology in Natural Language Processing (NLP), combined with machine learning to interpret spoken input, understand intent, and quickly and accurately respond with contextual responses.</p>\n\n<p>Keyword-Centric Intelligence <br>\nThe NLP technology and keyword recognition provide the AI voice agent with its ability to deliver conversationalised and empathetic communication. AI voice agents can recognise variations of phrasing, tone, and emotion, and even detect regional accents, enabling them to provide personalised and human-like communication, going far beyond establishing explicit meaning.  </p>\n\n<p>Intelligent Routing <br>\nAI voice agents can instantly render a request as simple or complex. Simple issues – like order updates or password resets - can  be resolved automatically, while nuanced and sensitive requests are routed to a live agent. This model increases the appropriate balance of human support and operational efficiency to assist customers.</p>\n\n<p>Hybrid Data Source<br>\nAI voice agents combine 70% internal data with 30% external data from the web to provide real-time accurate answers that are business relevant. This hybrid data source model effectively achieves relevance as information changes.</p>\n\n<p>Self-Service Support<br>\nInteractive voice menus allow customers to troubleshoot, track orders, order services, or book appointments instantly with no wait. This self-service capacity allows the customer to act on their own, reduces the burden on support, and increases satisfaction.</p>\n\n<p><strong>What are the advantages of AI voice agents for a business?</strong> </p>\n\n<p>The transformation of customer service through <strong><a href=\"https://www.salesforce.com/service/call-center-integration/voice-ai-agent/\" rel=\"noopener noreferrer\">AI voice agents</a></strong> is resulting in quantifiable benefits related to cost, speed, and customer satisfaction. These automated systems not only improve operational efficiency but also change how companies engage with customers in real time.</p>\n\n<p>Always-on Access<br>\nAI can handle an unlimited number of customer interactions on any channel, any time, anywhere. The always-on nature of AI ensures that customers have immediate support no matter the time, day, or season, during slow periods or busy times. For globally present companies, the risk of variable service levels generated across time zones can be mitigated, allowing for consistency of service level and better access across time zones. </p>\n\n<p>Savings<br>\nBusinesses using an AI voice agent put their costs per interaction at 70-80% less and a total customer service cost savings of up to 35% (vs a human-first, human-only team). These savings are compoundingly impactful and allow an organisation to invest savings back into new tools and staff training and team   deepen engagement and capability to deliver.  </p>\n\n<p>Speed<br>\nAI voice agents deliver up to 52% faster ticket resolutions and up to 60% less handle time and near-zero wait time. AI immediate responses optimise customer engagement and satisfaction and allow for the support team to streamline backend support workflows.</p>\n\n<p>Expanding Capabilities<br>\nAs customer volume increases, AI systems adjust to product demands without needing to hire more people or build more infrastructure.  Handling 100 to 1 million interactions a day is no different, as AI voice agents give the same level of service to every caller and provide assistance with their enquiries immediately. The way to expand the potential of the organisations without growing team members and resources is valuable for those who see increased demand during seasonal times. </p>\n\n<p>Improved Customer Experience <br>\nAI voice agents offer a seamless and pleasurable interaction with personal, multilingual ability and contextually aware conversations. They remember the history of previous interactions and deliver personalised results for each customer, and they always make sure that every customer has a voice, which greatly boosts trust and loyalty to the brand.</p>\n\n<p>Improved Employee Experience <br>\nAI voice agents take the lower-value tasks from human employees and give them time to work on the challenging tasks that need to be understood, creative, and problem-solving. This would make the employee happier in their ongoing journey and would reduce exhaustion from work.</p>\n\n<p>*<em>AI Voice Agents Across Various Industries *</em></p>\n\n<p>AI voice agents are transforming customer interactions across a variety of industries by managing routine interactions while increasing speed, accuracy, and immediate assistance. The flexibility of voice agents allows them to be set up to complement the needs of customers or the business model, making them a next-generation technology regardless of organisation size. </p>\n\n<p>E-commerce<br>\nAI voice agents assist customers with order tracking, returns and exchanges, product recommendations, and payment questions in  the sector of e-commerce. They're quick, accurate, and provide customer incentives for return business, which leads to improved customer satisfaction and sales conversion.</p>\n\n<p>Financial Services<br>\nBanks and financial institutions leverage AI voice agents to handle account enquiries, fraud alerts, account transaction updates, and appointment booking. The AI voice agent keeps customer passport information safe and ensures compliance and accuracy while offering customers easy access to reliable customer service. </p>\n\n<p>Healthcare <br>\nClinics and hospitals are employing AI voice agents to automatically refill prescriptions, book appointments, and send reminders to patients to help alleviate the administrative burden as well as improve the patient experience.</p>\n\n<p>Tech Support <br>\nIn the tech area, businesses are using AI voice agents to simplify troubleshooting, device setup and software activation through step-by-step voice-guided support to customers. </p>\n\n<p>From startups to large corporates, <strong><a href=\"https://supportsoft.com.au/ai-app-development\" rel=\"noopener noreferrer\">AI  App developers in Sydney</a></strong> are customising these solutions to accommodate unique business requirements – allowing organisations to deliver even faster, smarter and more consistent customer service across every industry.</p>\n\n<p><strong>How Do AI Voice Agents Work?</strong></p>\n\n<p>AI Voice Agent technology involves a mix of components that collaborate in a method that is seamless and human-like in a customer service interaction.</p>\n\n<p>Core Technology<br>\nAt the centre of the experience are numerous large language models (LLMs), natural language processing (NLP), speech-to-text, and <strong><a href=\"https://www.ibm.com/think/topics/machine-learning\" rel=\"noopener noreferrer\">machine-learning</a></strong> methods. These types of technologies allow AI voice agents to listen, understand, and respond accurately to human speech in a conversational manner, all in real time. </p>\n\n<p>Training<br>\nTo create AI systems, each is trained on the organisation’s internal resources, including FAQs, knowledge bases, policy documents, and historical customer interactions. This ensures the agent can provide an accurate answer based on the organisation’s previous interactions while understanding the nuances within its domain.</p>\n\n<p>Integration<br>\nThrough secure API connections, it can easily connect with existing business tools like CRMs, ERP systems, and cloud or on-premise databases, allowing an AI voice agent to pull customer information, update records, and initiate workflows autonomously and without the need for manual input.</p>\n\n<p>Continuous Learning<br>\nOne of the greatest benefits of AI voice agents is their ability to self-learn. With each interaction, they seek to gain knowledge and improve in a manner that reflects what they learn, improving their understanding of language and words. They continuously improve their learning of customer behaviours and preferences, as well as the accuracy of crossing over to solve problems while conducting quality conversations.</p>\n\n<p><strong>How to Integrate an AI Voice Agent?</strong></p>\n\n<p>Integrating an AI voice agent is a simple process of planning, data collection, and integration.</p>\n\n<p>Identify Use Cases and Goals<br>\nStart by determining your use cases and what you want to achieve. Having clear use cases allows you to assess success and measure results.</p>\n\n<p>Prepare Training Data<br>\nGather company documents, FAQs, and internal knowledge bases to train the AI. The training data should be precise and well organised, because the quality of training data will be reflected in the accuracy and reliability of responses.</p>\n\n<p>Integrate With Your Current Systems<br>\nLink the AI voice agent to your current CRM, contact centre software, or other communication tools so the AI voice agent can have real-time access to customer information or automate workflows.</p>\n\n<p>Monitor and Improve<br>\nContinuously monitor relevant performance metrics, analyse call data, and continually improve the agents' responses, accuracy and efficiency.</p>\n\n<p><strong>The Next Generation of AI Voice Agents</strong></p>\n\n<p>AI voice agents will evolve from agents who react to servicing customers to proactive behavioural assistants that assist customers in the near future. Future applications will be able to anticipate the needs of the customer before they arise, providing tailored recommendations and timely solutions. Future capabilities will include multi-modal AI, broadening interactions from just voice to visual interfaces, providing richer, more intuitive customer experiences. </p>\n\n<p>AI voice agents will also evolve to have industry specialisations and the ability to provide contextually aware support by understanding concepts and domains. Those organisations and AI innovators and developers in Australia that react early to this new application will find themselves at the front of the next generation of intelligent, scalable, customer-focused engagement.</p>\n\n<p><strong>Conclusion</strong></p>\n\n<p>AI voice agents are reshaping the customer service experience through 24/7 availability, significant savings, and a better experience for customers. By implementing AI voice agents in your business, your ability to drive engaged conversations and enquiries without limits, while still maintaining a personal touch, is immensely beneficial. In this field, the use of AI-powered automation is no longer   a strategic element for growth and loyalty. Leading companies across industries are already benefiting from the support of specialist <strong><a href=\"https://supportsoft.com.au/ai-app-development\" rel=\"noopener noreferrer\">AI app developers Australia</a></strong>, so contact SupportSoft's AI development team today to develop your intelligent voice agent and fundamentally change the nature of your business' communications.<br><br>\n``</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"I built a local LLM + Python tool that keeps your folders from turning into chaos","url":"https://dev.to/sukantom/i-built-a-local-llm-python-tool-that-keeps-your-folders-from-turning-into-chaos-2jmb","date":1761648114,"author":"sukanto-m","guid":319096,"unread":true,"content":"<p>We've all been there. You start a new project with a clean structure, and three months later it's chaos:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\nmy-project/\n├── src/\n│   ├── component1.py\n│   ├── component2.py\n│   ├── ... (26 more files)\n├── temp/\n├── backup/\n├── old_backup/\n├── Copy of feature.py\n├── New File.txt\n└── Untitled.py\n\n</code></pre>\n\n</div>\n\n\n\n<p>Existing solutions either:</p>\n\n<p>Don't use AI (just basic linting rules)<br>\nRequire cloud APIs (your directory structure leaves your machine)<br>\nCost money for what should be a simple dev tool</p>\n\n<p>I wanted something different: AI-powered analysis that respects privacy.<br>\nThe Solution<br>\nI built a directory monitoring tool that uses local LLMs (via Qwen/Ollama) to analyze project structure and give specific, actionable recommendations.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdrrqqrezgtd37ns72aox.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdrrqqrezgtd37ns72aox.png\" alt=\" \" width=\"800\" height=\"700\"></a></p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fztlyqn0w8djzb1y7iepi.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fztlyqn0w8djzb1y7iepi.png\" alt=\" \" width=\"800\" height=\"759\"></a></p>\n\n<p>🗂️ What it does</p>\n\n<ul>\n<li>Detects new, removed, or renamed folders</li>\n<li>Logs structure changes in real time</li>\n<li>Helps you visualize how projects grow, shrink, or get messy</li>\n</ul>\n\n<p>Key features:</p>\n\n<p>🤖 Local LLM analysis (Qwen/Llama)<br>\n📊 Beautiful terminal UI with trends<br>\n🎯 RAG for pattern recognition<br>\n🔒 100% private - no cloud APIs<br>\n💾 SQLite for history tracking<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>┌─────────────────────────────────────┐\n│      Your Machine (100% Local)      │\n├─────────────────────────────────────┤\n│                                     │\n│  1. Scan Directory Structure        │\n│     ↓                               │\n│  2. Store in SQLite                 │\n│     ↓                               │\n│  3. Generate Embeddings (local)     │\n│     ↓                               │\n│  4. RAG: Retrieve Similar States    │\n│     ↓                               │\n│  5. Query Local LLM (Ollama)        │\n│     ↓                               │\n│  6. Get Analysis &amp; Recommendations  │\n│                                     │\n└─────────────────────────────────────┘\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  1. Directory Scanning\n</h2>\n\n<p>The core DirectoryAnalyzer walks the filesystem and tracks:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\n@dataclass\nclass DirectorySnapshot:\n    timestamp: str\n    path: str\n    total_files: int\n    total_dirs: int\n    file_types: Dict[str, int]\n    depth_distribution: Dict[int, int]\n    naming_violations: List[str]\n    largest_files: List[Dict[str, Any]]\n</code></pre>\n\n</div>\n\n\n\n<p>Key metrics:</p>\n\n<p>File and directory counts<br>\nNaming violations (spaces, temp files, etc.)<br>\nDirectory depth (detecting over-nesting)<br>\nFile type distribution<br>\nLarge files that shouldn't be committed</p>\n<h2>\n  \n  \n  2. Local Embeddings with RAG\n</h2>\n\n<p>This is where it gets interesting. Instead of just analyzing the current state, I wanted temporal awareness - knowing if you're improving or regressing.</p>\n\n<p>Implementation:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\nfrom sentence_transformers import SentenceTransformer\n\nclass LocalVectorStore:\n    def __init__(self):\n        # Runs entirely on your machine - no API calls\n        self.model = SentenceTransformer('all-MiniLM-L6-v2')\n\n    def add_snapshot(self, snapshot: DirectorySnapshot):\n        # Convert snapshot to text representation\n        text = self._snapshot_to_text(snapshot)\n\n        # Generate embedding locally\n        embedding = self.model.encode(text)\n\n        # Store in SQLite\n        self.db.save_embedding(snapshot_id, embedding)\n\n    def search(self, query: str, top_k: int = 3):\n        # Find similar past states using cosine similarity\n        query_embedding = self.model.encode(query)\n\n        similarities = []\n        for stored_embedding in self.embeddings:\n            similarity = cosine_similarity(query_embedding, stored_embedding)\n            similarities.append(similarity)\n\n        # Return most similar past states\n        return top_k_results(similarities)\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Why this matters:</strong></p>\n\n<p>When analyzing the current directory, the system retrieves similar past states:<br>\nCurrent: 28 files in src/<br>\nPast (3 months ago): 15 files in src/<br>\nPast (1 month ago): 22 files in src/</p>\n\n<p>→ LLM context: \"The directory is growing - was 15, then 22, now 28\"<br>\nThis gives the LLM temporal context to make better recommendations.</p>\n\n<ol>\n<li>LLM Analysis with Ollama\nInstead of cloud APIs, I use Ollama for local LLM inference:\n</li>\n</ol>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\nimport ollama\n\ndef analyze_with_llm(snapshot: DirectorySnapshot, context: str):\n    prompt = f\"\"\"You are a development standards expert. \n\n    {context}  # RAG context from similar past states\n\n    Current State:\n    - Total Files: {snapshot.total_files}\n    - Naming Violations: {len(snapshot.naming_violations)}\n    - Max Depth: {max_depth}\n\n    Issues:\n    {snapshot.naming_violations[:10]}\n\n    Based on best practices:\n    1. Is this messy? (Yes/No)\n    2. Top 3 issues?\n    3. Specific actions?\n    4. Rate messiness 1-10\n    \"\"\"\n\n    response = ollama.chat(\n        model='qwen3:8b',\n        messages=[{'role': 'user', 'content': prompt}]\n    )\n\n    return response['message']['content']\n</code></pre>\n\n</div>\n\n\n<p><strong>Models tested:</strong></p>\n\n<p>qwen3:8b (5.2GB) - Fast, good quality<br>\nqwen2.5:latest (14GB) - Slower but excellent<br>\nllama3.2 (7GB) - Balanced option</p>\n<h2>\n  \n  \n  4. Beautiful Terminal UI\n</h2>\n\n<p>Built with Rich for a modern TUI:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\nfrom rich.console import Console\nfrom rich.panel import Panel\nfrom rich.table import Table\nfrom rich.layout import Layout\n\ndef create_metrics_panel(result):\n    metrics = Table.grid(padding=(0, 2))\n\n    # Messiness score with color coding\n    score = result['messiness_score']\n    color = \"green\" if score &lt; 3 else \"yellow\" if score &lt; 7 else \"red\"\n\n    metrics.add_row(\n        Panel(f\"[{color}]{score:.1f}/10[/{color}]\", title=\"Messiness\")\n    )\n\n    return Panel(metrics, title=\"Metrics\", border_style=\"blue\")\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Features:</strong></p>\n\n<ul>\n<li>Real-time metrics cards</li>\n<li>Sparkline trend graphs (▁▂▃▄▅▆▇█)</li>\n<li>Color-coded scores</li>\n<li>LLM analysis display</li>\n<li>History tracking</li>\n</ul>\n\n<p><strong>Example Output</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\n$ python monitor_tui.py\n\nMessiness Score: 6.2/10 ⚠️\n\nLLM Analysis:\n\nYes, this directory structure needs attention.\n\nTop 3 Issues:\n1. Excessive files in src/components (28 files) - \n   recommended maximum is 20. Split into:\n   - ui/ (buttons, inputs)\n   - forms/ (form components)\n   - layouts/ (page layouts)\n\n2. Naming violations (8 files):\n   - \"temp_fix.py\" → move to .archive/ or delete\n   - \"Copy of feature.py\" → remove or rename properly\n   - Files with spaces → use kebab-case\n\n3. Directory depth exceeds 7 levels - flatten structure\n\nMessiness Rating: 6.2/10 - Moderate attention needed\n\nTrend: 📉 Improving (was 7.8 → 6.2)\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Privacy &amp; Security\n</h2>\n\n<p><strong>Everything stays local:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\n# NO external API calls\n❌ openai.ChatCompletion.create()\n❌ requests.post('https://api...')\n❌ anthropic.messages.create()\n\n## YES local processing\n✅ ollama.chat()  # localhost:11434\n✅ SentenceTransformer.encode()  # local CPU/GPU\n✅ sqlite3.connect()  # local file\n\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Verification:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\n# Monitor network traffic while running\nsudo tcpdump -i any port not 22\n\n## Result: No outbound connections (except Ollama on localhost)\n\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Data stored:</strong></p>\n\n<ul>\n<li>SQLite database: directory_monitor.db</li>\n<li>Location: Current directory (portable)</li>\n<li>Contents: Timestamps, file counts, violation lists</li>\n<li>NOT stored: File contents, sensitive data</li>\n</ul>\n\n<p><strong>Performance</strong></p>\n\n<p>Benchmarks on M1 Mac (8GB RAM):</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Operation</th>\n<th>Time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Directory scan (1000 files)</td>\n<td>~0.3s</td>\n</tr>\n<tr>\n<td>Embedding generation</td>\n<td>~0.1s</td>\n</tr>\n<tr>\n<td>LLM analysis (Qwen3:8b)</td>\n<td>~2-3s</td>\n</tr>\n<tr>\n<td>Full scan cycle</td>\n<td>~3-5s</td>\n</tr>\n</tbody>\n</table></div>\n\n<p><strong>Memory usage:</strong></p>\n\n<ul>\n<li>Base: ~200MB (Python + dependencies)</li>\n<li>With Qwen3:8b loaded: ~5.5GB</li>\n<li>With embeddings cached: ~250MB</li>\n</ul>\n\n<p><strong>Optimizations:</strong></p>\n\n<ul>\n<li>Lazy loading of embeddings</li>\n<li>Batch processing for large directories</li>\n<li>Caching of LLM responses</li>\n<li>SQLite indexes on timestamps</li>\n</ul>\n\n<h2>\n  \n  \n  Challenges &amp; Solutions\n</h2>\n\n<p><strong>Challenge 1: SQLite Threading</strong><br>\nProblem: Flask creates threads, SQLite doesn't like that.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\n❌ This fails\nself.conn = sqlite3.connect(db_path)\n\n# ✅ Solution\nself.conn = sqlite3.connect(db_path, check_same_thread=False)\n\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Challenge 2: LLM Consistency</strong><br>\n<strong>Problem:</strong> LLMs are non-deterministic. Same directory, different analysis.<br>\n<strong>Solution:</strong> Structure the output with clear prompts:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>prompt = \"\"\"Rate messiness 1-10 (10 = extremely messy)\n\n\nFormat:\n**Messiness Rating**: X/10\n**Top 3 Issues**:\n1. Issue one\n2. Issue two\n3. Issue three\n\"\"\"\n\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Challenge 3:</strong> Embedding Quality<br>\n<strong>Problem:</strong> Generic embeddings didn't capture directory-specific patterns well.<br>\n<strong>Solution:</strong> Create domain-specific text representations:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>def snapshot_to_text(snapshot):\n    return f\"\"\"\n    Files: {snapshot.total_files}\n    Directories: {snapshot.total_dirs}\n    Max Depth: {max_depth}\n    Violations: {\", \".join(snapshot.naming_violations[:5])}\n    File Types: {\", \".join(snapshot.file_types.keys())}\n    \"\"\"\n</code></pre>\n\n</div>\n\n\n\n<p>This improved similarity matching by 40%.</p>\n\n<h2>\n  \n  \n  Results\n</h2>\n\n<p><strong>After using it for 2 weeks on 3 projects:</strong></p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Project</th>\n<th>Before</th>\n<th>After</th>\n<th>Improvement</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Project A</td>\n<td>7.8/10</td>\n<td>2.8/10</td>\n<td>64%</td>\n</tr>\n<tr>\n<td>Project B</td>\n<td>5.2/10</td>\n<td>1.9/10</td>\n<td>63%</td>\n</tr>\n<tr>\n<td>Project C</td>\n<td>8.9/10</td>\n<td>4.1/10</td>\n<td>54%</td>\n</tr>\n</tbody>\n</table></div>\n\n<p><strong>Most common recommendations:</strong></p>\n\n<ol>\n<li>Split large directories (40% of scans)</li>\n<li>Remove temp/backup files (30%)</li>\n<li>Fix naming violations (20%)</li>\n<li>Flatten deep nesting (10%)</li>\n</ol>\n\n<p><strong>Unexpected benefit:</strong> The act of seeing a \"messiness score\" motivated me to clean up immediately. Gamification works!</p>\n\n<h2>\n  \n  \n  Future Improvements\n</h2>\n\n<p><strong>Planned features:</strong></p>\n\n<ul>\n<li>Git integration (track messiness by commit)</li>\n<li>Language-specific rules (Python vs JavaScript standards)</li>\n<li>Team collaboration (shared standards)</li>\n<li>CI/CD integration (fail build if too messy)</li>\n<li>More export formats (HTML reports, CSV)</li>\n</ul>\n\n<p><strong>Experimental ideas:</strong></p>\n\n<ul>\n<li>Use computer vision to analyze folder icons</li>\n<li>Predict future messiness based on trends</li>\n<li>Integration with IDEs (VS Code extension)</li>\n<li>Mobile app for quick checks</li>\n</ul>\n\n<h2>\n  \n  \n  Try It Yourself\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Clone</span>\ngit clone https://github.com/sukanto-m/directory-monitor\n<span class=\"nb\">cd </span>directory-monitor\n\n<span class=\"c\"># Install</span>\npip <span class=\"nb\">install</span> <span class=\"nt\">-r</span> requirements.txt\n\n<span class=\"c\"># Get Ollama</span>\ncurl <span class=\"nt\">-fsSL</span> https://ollama.com/install.sh | sh\n\n<span class=\"c\"># Pull model</span>\nollama pull qwen3:8b\n\n<span class=\"c\"># Run</span>\npython monitor_tui.py\n</code></pre>\n\n</div>\n\n\n\n<p><strong>GitHub:</strong> <a href=\"https://github.com/sukanto-m/directory-monitor\" rel=\"noopener noreferrer\">https://github.com/sukanto-m/directory-monitor</a></p>\n\n<h2>\n  \n  \n  Tech Stack\n</h2>\n\n<ul>\n<li>\n<strong>Python 3.9+</strong> - Core language</li>\n<li>\n<strong>Ollama</strong> - Local LLM inference</li>\n<li>\n<strong>sentence-transformers</strong> - Local embeddings</li>\n<li>\n<strong>Rich</strong> - Terminal UI</li>\n<li>\n<strong>Flask</strong> - Web UI</li>\n<li>\n<strong>SQLite</strong> - Database</li>\n<li>\n<strong>NumPy</strong> - Vector operations</li>\n</ul>\n\n<h2>\n  \n  \n  Lessons Learned\n</h2>\n\n<h3>\n  \n  \n  1. Local-first is viable\n</h3>\n\n<p>I was skeptical that local LLMs could match cloud APIs. <strong>I was wrong.</strong></p>\n\n<p>Qwen3:8b gives surprisingly good analysis - sometimes better than GPT-3.5 because it's not overly verbose.</p>\n\n<h3>\n  \n  \n  2. RAG adds real value\n</h3>\n\n<p>Without RAG, the LLM just analyzes snapshots independently. With RAG, it understands <em>context</em> and <em>trends</em>.</p>\n\n<p>\"You're regressing\" hits different than \"you have 28 files.\"</p>\n\n<h3>\n  \n  \n  3. UX matters for CLI tools\n</h3>\n\n<p>Adding sparklines, color coding, and real-time updates made the difference between \"neat demo\" and \"actually useful tool.\"</p>\n\n<h3>\n  \n  \n  4. Privacy sells itself\n</h3>\n\n<p>I didn't expect the \"100% local\" angle to resonate so much. Turns out developers really care about this.</p>\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>Building a local-first AI tool taught me:</p>\n\n<ul>\n<li>Local LLMs are good enough for many use cases</li>\n<li>RAG is powerful even with small datasets</li>\n<li>Privacy-focused tools have a market</li>\n<li>Python + Rich = beautiful CLIs</li>\n</ul>\n\n<p><strong>The future is local-first AI.</strong></p>\n\n<p>Cloud APIs are convenient, but local processing gives you:</p>\n\n<ul>\n<li>Privacy</li>\n<li>Control</li>\n<li>No usage limits</li>\n<li>Offline capability</li>\n<li>No vendor lock-in</li>\n</ul>\n\n<p>Try building something local-first. You might be surprised how capable these models are.</p>\n\n\n\n\n<h2>\n  \n  \n  Questions?\n</h2>\n\n<p>Drop a comment! I'm happy to discuss:</p>\n\n<ul>\n<li>RAG implementation details</li>\n<li>Local LLM performance</li>\n<li>Privacy considerations</li>\n<li>Code architecture</li>\n</ul>\n\n<p><strong>Star the repo if you found this interesting:</strong> <a href=\"https://github.com/sukanto-m/directory-monitor\" rel=\"noopener noreferrer\">https://github.com/sukanto-m/directory-monitor</a></p>\n\n\n\n\n<p><em>Built with Claude AI assistance for implementation guidance. The architecture, design decisions, and integration were collaborative between human direction and AI implementation.</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"API自动化发布测试成功","url":"https://dev.to/__f27cfeca2e21de8d2378/apizi-dong-hua-fa-bu-ce-shi-cheng-gong-ka3","date":1761647066,"author":"hunting3@126.com","guid":319095,"unread":true,"content":"<h1>\n  \n  \n  API自动化发布测试成功\n</h1>\n\n<p>🎉 <strong>恭喜！</strong> 您的DEV.to API自动发布系统已经成功配置！</p>\n\n<h2>\n  \n  \n  发布信息\n</h2>\n\n<ul>\n<li>\n<strong>发布时间</strong>: 2025-10-28 18:24:38</li>\n<li>\n<strong>发布方式</strong>: Python脚本 + DEV.to API</li>\n<li>\n<strong>状态</strong>: 已发布（公开可见）</li>\n</ul>\n\n<h2>\n  \n  \n  功能验证\n</h2>\n\n<p>这篇文章证明了：</p>\n\n<p>✅ <strong>API密钥有效</strong><br><br>\n✅ <strong>Python脚本正常工作</strong><br><br>\n✅ <strong>文章可以自动发布</strong><br><br>\n✅ <strong>内容格式正确</strong>  </p>\n\n<h2>\n  \n  \n  有用的资源链接\n</h2>\n\n<p>以下是一些公网可访问的链接，用于验证内容显示：</p>\n\n<ol>\n<li><a href=\"https://developers.forem.com/api/v1\" rel=\"noopener noreferrer\">DEV.to 官方API文档</a></li>\n<li><a href=\"https://docs.python-requests.org/\" rel=\"noopener noreferrer\">Python requests库文档</a></li>\n<li><a href=\"https://www.markdownguide.org/\" rel=\"noopener noreferrer\">Markdown语法指南</a></li>\n<li><a href=\"https://github.com/\" rel=\"noopener noreferrer\">GitHub</a></li>\n</ol>\n\n<h2>\n  \n  \n  代码示例\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">requests</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">post_to_devto</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">):</span>\n    <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">api-key</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">api_key</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Content-Type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">application/json</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">article</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">title</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">body_markdown</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">published</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">}}</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">https://dev.to/api/articles</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  总结\n</h2>\n\n<p>现在您已经成功设置了DEV.to的自动发布系统！可以继续优化脚本，添加更多功能如：</p>\n\n<ul>\n<li>从文件读取内容</li>\n<li>批量发布文章</li>\n<li>自动添加标签和分类</li>\n<li>定时发布</li>\n</ul>\n\n\n\n\n<p><em>自动化发布测试完成于 2025-10-28 18:24:38</em></p>\n\n<p><strong>如果您能看到这篇文章，说明一切工作正常！</strong> 🚀</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Scrape Data with Selenium in Python","url":"https://dev.to/hasdata_com/scrape-data-with-selenium-in-python-1bbk","date":1761643800,"author":"Valentina Skakun","guid":319053,"unread":true,"content":"<p>This is the third and the last post in series about scraping with Selenium in Python. In this one, we’ll focus on <strong>extracting data</strong>: locating elements, reading text, handling the Shadow DOM, and exporting your results.  </p>\n\n<h2>\n  \n  \n  Table of Contents\n</h2>\n\n<ol>\n<li>\nStep 1: Locate Elements Using the By API\n</li>\n<li>\nStep 2: Handle Shadow DOM and Nested Elements\n</li>\n<li>\nStep 3: Extract Text and Attributes\n</li>\n<li>\nStep 4: Parse Tables and Lists\n</li>\n<li>Step 5: Export Data to CSV or JSON</li>\n</ol>\n\n<h2>\n  \n  \n  Step 1: Locate Elements Using the By API\n</h2>\n\n<p>The old <code>find_element_by_*</code> methods are gone in old Selenium.  Now you should use the <code>By</code> class.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">selenium</span> <span class=\"kn\">import</span> <span class=\"n\">webdriver</span>\n<span class=\"kn\">from</span> <span class=\"n\">selenium.webdriver.common.by</span> <span class=\"kn\">import</span> <span class=\"n\">By</span>\n\n<span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">webdriver</span><span class=\"p\">.</span><span class=\"nc\">Chrome</span><span class=\"p\">()</span>\n<span class=\"n\">driver</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">https://example.com</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Examples of locators\n</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"p\">.</span><span class=\"nf\">find_element</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"p\">.</span><span class=\"n\">TAG_NAME</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">h1</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">links</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"p\">.</span><span class=\"nf\">find_elements</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"p\">.</span><span class=\"n\">CSS_SELECTOR</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">a</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Found </span><span class=\"si\">{</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">links</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\"> links</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">driver</span><span class=\"p\">.</span><span class=\"nf\">quit</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Keep your selectors structured, <code>By.CSS_SELECTOR</code> is usually all you need.</p>\n\n<h2>\n  \n  \n  Step 2: Handle Shadow DOM and Nested Elements\n</h2>\n\n<p>Some modern pages hide data inside <strong>shadow roots</strong> (common in web components). Selenium doesn’t access them directly, but you can reach them with a bit of JavaScript.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">shadow_host</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"p\">.</span><span class=\"nf\">find_element</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"p\">.</span><span class=\"n\">CSS_SELECTOR</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">custom-element</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">shadow_root</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"p\">.</span><span class=\"nf\">execute_script</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">return arguments[0].shadowRoot</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">shadow_host</span><span class=\"p\">)</span>\n<span class=\"n\">inner_button</span> <span class=\"o\">=</span> <span class=\"n\">shadow_root</span><span class=\"p\">.</span><span class=\"nf\">find_element</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"p\">.</span><span class=\"n\">CSS_SELECTOR</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">button</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">inner_button</span><span class=\"p\">.</span><span class=\"nf\">click</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>You won’t need this often, but it’s good to know when a normal locator suddenly stops working.</p>\n\n<h2>\n  \n  \n  Step 3: Extract Text and Attributes\n</h2>\n\n<p><code>.text</code> gives you the visible content of an element. For hidden or internal data, use <code>.get_attribute()</code>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"p\">.</span><span class=\"nf\">find_element</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"p\">.</span><span class=\"n\">CSS_SELECTOR</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">.product</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">text</span>\n<span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">get_attribute</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">data-price</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">price</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Step 4: Parse Tables and Lists\n</h2>\n\n<p>You can easily scrape structured data like tables or lists using simple loops.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"p\">.</span><span class=\"nf\">find_elements</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"p\">.</span><span class=\"n\">CSS_SELECTOR</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">table tr</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">rows</span><span class=\"p\">:</span>\n    <span class=\"n\">cells</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cell</span><span class=\"p\">.</span><span class=\"n\">text</span> <span class=\"k\">for</span> <span class=\"n\">cell</span> <span class=\"ow\">in</span> <span class=\"n\">row</span><span class=\"p\">.</span><span class=\"nf\">find_elements</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"p\">.</span><span class=\"n\">TAG_NAME</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">td</span><span class=\"sh\">\"</span><span class=\"p\">)]</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">cells</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Or, for a list of items:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"p\">.</span><span class=\"nf\">find_elements</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"p\">.</span><span class=\"n\">CSS_SELECTOR</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">.item</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">text</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">items</span><span class=\"p\">]</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This keeps your scraper fast and easy to debug.</p>\n\n<h2>\n  \n  \n  Step 5: Export Data to CSV or JSON\n</h2>\n\n<p>Once you’ve collected data, save it in a structured format.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">csv</span><span class=\"p\">,</span> <span class=\"n\">json</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Alice</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">age</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">101</span><span class=\"sh\">\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Bob</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">age</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">11</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># CSV\n</span><span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">output.csv</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">w</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">newline</span><span class=\"o\">=</span><span class=\"sh\">\"\"</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">utf-8</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">csv</span><span class=\"p\">.</span><span class=\"nc\">DictWriter</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">fieldnames</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nf\">keys</span><span class=\"p\">())</span>\n    <span class=\"n\">writer</span><span class=\"p\">.</span><span class=\"nf\">writeheader</span><span class=\"p\">()</span>\n    <span class=\"n\">writer</span><span class=\"p\">.</span><span class=\"nf\">writerows</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># JSON\n</span><span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">output.json</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">w</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">utf-8</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dump</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Simple and reusable, you can plug this into any scraping script.</p>\n\n<h2>\n  \n  \n  Final Notes\n</h2>\n\n<p>It was the last post, but here are some useful resources:</p>\n\n<ul>\n<li><a href=\"https://hasdata.com/blog/web-scraping-using-selenium-python\" rel=\"noopener noreferrer\">The Complete Guide to Web Scraping with Selenium in Python</a></li>\n<li>Join our <a href=\"https://hasdata.com/join-discord\" rel=\"noopener noreferrer\">Discord</a>\n</li>\n<li><a href=\"https://github.com/HasData/selenium-scraping\" rel=\"noopener noreferrer\">Selenium Scraping Examples in Python and NodeJS (GitHub)</a></li>\n</ul>\n\n<p>If you want any examples I might have missed, leave a comment and I’ll add them.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Whisper + Gradio on Colab: Speech-to-Text in Minutes","url":"https://dev.to/metsk-net/whisper-gradio-on-colab-speech-to-text-in-minutes-2nlg","date":1761643566,"author":"Ao","guid":319052,"unread":true,"content":"<h1>\n  \n  \n  What you’ll learn?\n</h1>\n\n<ul>\n<li>How to transcribe speech into text using <strong>OpenAI Whisper</strong>\n</li>\n<li>How to build a <strong>web-based transcription app</strong> using <strong>Gradio</strong>\n</li>\n<li>How to run everything for free on <strong>Google Colab’s GPU runtime</strong>\n</li>\n</ul>\n\n<h1>\n  \n  \n  Who this article is for ?\n</h1>\n\n<ul>\n<li>Developers interested in ChatGPT’s Audio mode\n</li>\n<li>Anyone curious about building <strong>AI-powered Audio tools</strong>\n</li>\n<li>Engineers who want to try <strong>Whisper</strong> or <strong>Gradio</strong> without local setup\n</li>\n<li>Beginners looking to prototype an app quickly using <strong>free Colab GPU</strong>\n</li>\n</ul>\n\n<h1>\n  \n  \n  Environment\n</h1>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Item</th>\n<th>Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Platform</td>\n<td>Google Colab (Free Tier)</td>\n</tr>\n<tr>\n<td>GPU</td>\n<td>NVIDIA T4</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>3.12</td>\n</tr>\n<tr>\n<td>Key Libraries</td>\n<td>\n<code>openai-whisper</code>, <code>gradio</code>\n</td>\n</tr>\n<tr>\n<td>Setup Time</td>\n<td>~5 minutes</td>\n</tr>\n</tbody>\n</table></div>\n\n<h1>\n  \n  \n  Step1: Setup the Environment\n</h1>\n\n<p>Run the following cell in Colab to install all required packages.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"err\">!</span><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"o\">-</span><span class=\"n\">q</span> <span class=\"n\">git</span><span class=\"o\">+</span><span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">openai</span><span class=\"o\">/</span><span class=\"n\">whisper</span><span class=\"p\">.</span><span class=\"n\">git</span>\n<span class=\"err\">!</span><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"o\">-</span><span class=\"n\">q</span> <span class=\"n\">gradio</span>\n<span class=\"kn\">import</span> <span class=\"n\">importlib</span><span class=\"p\">,</span> <span class=\"n\">sys</span>\n<span class=\"n\">importlib</span><span class=\"p\">.</span><span class=\"nf\">invalidate_caches</span><span class=\"p\">()</span>\n<span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">/usr/local/lib/python3.12/site-packages</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"kn\">import</span> <span class=\"n\">gradio</span> <span class=\"k\">as</span> <span class=\"n\">gr</span>\n<span class=\"kn\">import</span> <span class=\"n\">whisper</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Whisper loaded successfully</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Once you see the line <strong><code>Whisper loaded successfully</code></strong>, you’re good to go. Even on Colab’s free <strong>T4 GPU</strong>, Whisper performs smoothly for short recordings.</p>\n\n<h1>\n  \n  \n  Step 2: Load the Whisper Model\n</h1>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">whisper</span><span class=\"p\">.</span><span class=\"nf\">load_model</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">small</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The <code>\"small\"</code> variant provides a good balance between <strong>accuracy</strong> and <strong>speed</strong>, and it works particularly well for Japanese. It downloads once (~460 MB) and then loads instantly from cache afterward.</p>\n\n<h1>\n  \n  \n  Step 3: Create a Gradio Web App!!\n</h1>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">transcribe</span><span class=\"p\">(</span><span class=\"n\">audio</span><span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nf\">transcribe</span><span class=\"p\">(</span><span class=\"n\">audio</span><span class=\"p\">,</span> <span class=\"n\">language</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">ja</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">text</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n<span class=\"n\">gr</span><span class=\"p\">.</span><span class=\"nc\">Interface</span><span class=\"p\">(</span>\n    <span class=\"n\">fn</span><span class=\"o\">=</span><span class=\"n\">transcribe</span><span class=\"p\">,</span>\n    <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"n\">gr</span><span class=\"p\">.</span><span class=\"nc\">Audio</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">filepath</span><span class=\"sh\">\"</span><span class=\"p\">),</span>\n    <span class=\"n\">outputs</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">text</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Whisper Test</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Record or upload audio and get Japanese transcription</span><span class=\"sh\">\"</span>\n<span class=\"p\">).</span><span class=\"nf\">launch</span><span class=\"p\">(</span><span class=\"n\">share</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>After running the code, a <strong>Gradio web interface</strong> appears like this:</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fd7a713pd9o2lgwvjhcju.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fd7a713pd9o2lgwvjhcju.png\" alt=\" \" width=\"800\" height=\"261\"></a><br>\nYou can record your voice directly from the microphone, or upload an audio file from your device. Then click <strong>Submit</strong>, and your transcribed text will appear in the <strong>Output</strong> box. When running on Colab, Gradio automatically provides a temporary <code>.gradio.live</code> URL so you can test the app from your phone or another computer — free of charge.</p>\n\n<h2>\n  \n  \n  How It Works\n</h2>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Component</th>\n<th>Role</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Whisper</strong></td>\n<td>Converts speech to text using transformer-based acoustic modeling</td>\n</tr>\n<tr>\n<td><strong>Gradio</strong></td>\n<td>Creates a web UI and handles audio I/O</td>\n</tr>\n<tr>\n<td><strong>Colab</strong></td>\n<td>Provides free GPU compute for model inference</td>\n</tr>\n</tbody>\n</table></div>\n\n<p>Together, these form a lightweight, end-to-end <strong>speech-to-text pipeline</strong>.</p>\n\n<h2>\n  \n  \n  Notes\n</h2>\n\n<ul>\n<li>The <code>.gradio.live</code> URL is <strong>temporary</strong> and <strong>public</strong> (no authentication). Don’t share it if your audio contains private data.</li>\n<li>Once the Colab runtime stops, the URL expires automatically.</li>\n<li>For a persistent deployment, consider using <strong>RunPod</strong>, <strong>Hugging Face Spaces</strong>, or <strong>Render</strong>.</li>\n</ul>\n\n<h2>\n  \n  \n  Wrap-Up\n</h2>\n\n<p>In just about <strong>20 lines of Python</strong>, you now have a fully working <strong>Japanese speech-to-text web app</strong>. This setup is ideal for experimenting with <strong>AI transcription</strong>, audio notes, or even meeting summaries — all without spending a single dollar.</p>\n\n<h2>\n  \n  \n  About me\n</h2>\n\n<p>I’m an <strong>SRE engineer</strong> working mainly on infrastructure design and automation. Recently, I’ve been exploring the intersection of <strong>AI and speech technology</strong>, focusing on how to develop <strong>custom speech-enabled LLMs</strong>. My main stack includes <strong>Python, FastAPI, Next.js, and AWS</strong>.</p>\n\n<h2>\n  \n  \n  My Motivation\n</h2>\n\n<p>I wrote this article because I want to <strong>develop my own custom speech-enabled LLM</strong>. As a ChatGPT Plus user, I often rely on the <strong>audio mode</strong>, but I wish I could use it freely for longer sessions throughout the day. Speaking helps me organize my thoughts and trigger new ideas — so I decided to recreate that experience myself. I’ll keep sharing articles about <strong>speech AI</strong> and <strong>LLM integration</strong>, so follow along if this project resonates with you.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How to build a Python email-checker using the Mail7 API (and spot disposable addresses like TempMailbox)","url":"https://dev.to/densi/how-to-build-a-python-email-checker-using-the-mail7-api-and-spot-disposable-addresses-like-3bh2","date":1761642858,"author":"Den","guid":319051,"unread":true,"content":"<p>Want to verify whether an email is real (deliverable) or just a throwaway disposable address (e.g. TempMailbox)? In this post I’ll show the purpose, how to write a small Python script that uses the Mail7 public Email Checker API, and how to use it in simple workflows (single-check, bulk-check, rate-limit handling). Code examples are ready-to-run and easy to adapt for production use.</p>\n\n<h2>\n  \n  \n  Why this is useful\n</h2>\n\n<ul>\n<li>Prevent fake or disposable emails polluting your database (improves deliverability &amp; analytics).</li>\n<li>Reduce fraud, reduce bounce rates and protect downstream workflows (password resets, marketing).</li>\n<li>Lightweight: <a href=\"https://mail7.net/api-docs.html\" rel=\"noopener noreferrer\">Mail7’s API</a> is public and simple — you don’t need API keys to get started.  ￼</li>\n</ul>\n\n<p>(Example disposable service referenced in this post: <a href=\"https://tempamailbox.net\" rel=\"noopener noreferrer\">TempMailbox</a> — a typical disposable/temp-mail provider.)</p>\n\n<h2>\n  \n  \n  Quick notes from Mail7 docs (what matters)\n</h2>\n\n<ul>\n<li>\n<strong>Base URL</strong>: <a href=\"https://mail7.net\" rel=\"noopener noreferrer\">https://mail7.net</a>. No authentication required — it’s a public API.  ￼</li>\n<li>\n<strong>Rate limit</strong>: 5 requests / minute / IP. Exceeding it returns HTTP 429 with a Retry-After header. Your script should respect this.  ￼</li>\n<li>\n<strong>Key endpoints used here</strong>:</li>\n</ul>\n\n<ol>\n<li>POST /api/validate-single — single email check (JSON body {\"email\": \"...\"} ). Response contains valid, formatValid, mxValid, smtpValid, status, details and importantly is_disposable.  ￼</li>\n<li>POST /api/validate-bulk — upload file or text list for bulk checks. Useful for offline cleanup.  ￼</li>\n<li>GET /api/spf-check/{domain} - optional: check domain SPF if you want to add additional heuristics.</li>\n</ol>\n\n<p><strong>The Python script (complete, annotated)</strong></p>\n\n<p>Save as mail7_check.py. It does:</p>\n\n<ul>\n<li>single-check via /api/validate-single</li>\n<li>handles rate-limit (429 + Retry-After)</li>\n<li>simple backoff on server errors</li>\n<li>can be used interactively or imported as a module\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>#!/usr/bin/env python3\n\"\"\"\nmail7_check.py\nSimple utilities to check an email address using Mail7 Email Checker API.\n\"\"\"\n\nimport time\nimport requests\nfrom typing import Dict, Optional\n\nBASE = \"https://mail7.net\"\nSINGLE_ENDPOINT = f\"{BASE}/api/validate-single\"\nBULK_ENDPOINT = f\"{BASE}/api/validate-bulk\"\nSPF_ENDPOINT = f\"{BASE}/api/spf-check/{{}}\"\n\n# Simple wrapper for single validation\ndef validate_single(email: str, timeout: float = 10.0) -&gt; Dict:\n    \"\"\"Validate a single email. Returns the parsed JSON response.\"\"\"\n    payload = {\"email\": email}\n    headers = {\"Content-Type\": \"application/json\"}\n    while True:\n        resp = requests.post(SINGLE_ENDPOINT, json=payload, headers=headers, timeout=timeout)\n        if resp.status_code == 200:\n            return resp.json()\n        if resp.status_code == 429:\n            # Respect Retry-After header if present\n            retry = resp.headers.get(\"Retry-After\")\n            wait = int(retry) if retry and retry.isdigit() else 60\n            print(f\"[rate-limit] 429 received. Waiting {wait} seconds...\")\n            time.sleep(wait)\n            continue\n        if 500 &lt;= resp.status_code &lt; 600:\n            # transient server error, back off a bit\n            print(f\"[server-error] {resp.status_code}. Backing off 5s...\")\n            time.sleep(5)\n            continue\n        # For other errors, raise\n        resp.raise_for_status()\n\ndef is_good_email(result: Dict) -&gt; bool:\n    \"\"\"\n    Heuristic to decide whether to accept this email:\n      - result['valid'] should be True\n      - smtpValid and mxValid are helpful\n      - is_disposable should be False\n      - status normally contains 'Valid' for good addresses\n    Adapt this logic to your business needs.\n    \"\"\"\n    if not result:\n        return False\n    if result.get(\"is_disposable\"):\n        return False\n    # require overall valid + smtp existence\n    if result.get(\"valid\") and result.get(\"smtpValid\"):\n        return True\n    # fallback: format + mx\n    if result.get(\"formatValid\") and result.get(\"mxValid\"):\n        return True\n    return False\n\ndef pretty_print(result: Dict):\n    print(\"email:\", result.get(\"email\"))\n    print(\"status:\", result.get(\"status\"))\n    print(\"valid:\", result.get(\"valid\"))\n    print(\"formatValid:\", result.get(\"formatValid\"))\n    print(\"mxValid:\", result.get(\"mxValid\"))\n    print(\"smtpValid:\", result.get(\"smtpValid\"))\n    print(\"is_disposable:\", result.get(\"is_disposable\"))\n    print(\"details:\", result.get(\"details\"))\n\nif __name__ == \"__main__\":\n    import argparse\n    parser = argparse.ArgumentParser(description=\"Check email validity using mail7.net API\")\n    parser.add_argument(\"email\", help=\"Email to check, or path to file with emails (one per line) if --bulk\")\n    parser.add_argument(\"--bulk\", action=\"store_true\", help=\"Treat argument as a file and run bulk check (calls validate-bulk)\")\n    args = parser.parse_args()\n\n    if args.bulk:\n        # Bulk mode: upload file to /api/validate-bulk (form data: 'emails')\n        with open(args.email, \"rb\") as f:\n            files = {\"emails\": (args.email, f)}\n            r = requests.post(BULK_ENDPOINT, files=files)\n            r.raise_for_status()\n            data = r.json()\n            print(\"Total:\", data.get(\"total\"))\n            for item in data.get(\"results\", []):\n                print(\"----\")\n                pretty_print(item)\n    else:\n        res = validate_single(args.email)\n        pretty_print(res)\n        print(\"DECISION:\", \"ACCEPT\" if is_good_email(res) else \"REJECT\")\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Requirements</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>pip install requests\npython3 mail7_check.py [email to check]\n# or bulk:\npython3 mail7_check.py emails.txt --bulk\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  How the script decides disposable vs real\n</h2>\n\n<p>Mail7’s response contains an is_disposable boolean. Use that directly to detect throwaway providers (like TempMailbox). Combine that with smtpValid and mxValid to be confident — smtpValid=true strongly indicates the address exists and accepts mail.  ￼</p>\n\n<p>Example logic in the script (is_good_email) returns False when is_disposable is true, or when the address fails SMTP checks.</p>\n\n<p><strong>Real-world usage examples</strong></p>\n\n<ul>\n<li>Signup form — call validate-single on email submission. If is_disposable is true or smtpValid is false, show a friendly error or ask the user for a non-disposable email.</li>\n<li>CRM cleanup — every week, run a bulk pass with validate-bulk and remove invalid/disposable addresses from mailing lists.</li>\n<li>Fraud screening — combine is_disposable with geo/IP/device signals for higher-risk signups.</li>\n</ul>\n\n<h2>\n  \n  \n  Caveats &amp; tips\n</h2>\n\n<ul>\n<li>False negatives/positives: No validation is perfect. Some providers block SMTP probes, some disposable providers forward to real addresses — combine signals (mx, smtp, is_disposable, and business rules).</li>\n<li>Respect privacy &amp; terms: Don’t leak results or perform abusive queries. If you need bulk/enterprise usage, contact Mail7 for a supported arrangement (the docs describe basic public API behavior).</li>\n<li>Disposable services evolve. Lists of disposable domains change — relying solely on a static list is brittle. Using Mail7’s is_disposable is easier because they update their detection on the provider side.</li>\n</ul>\n\n<p>Final notes &amp; links</p>\n\n<ul>\n<li>Mail7 API docs (use them as the definitive reference for endpoints, payloads and rate limits): <a href=\"https://mail7.net/api-docs.html\" rel=\"noopener noreferrer\">https://mail7.net/api-docs.html</a>.  ￼</li>\n<li>Example disposable provider for reference: <a href=\"https://tempmailbox.net\" rel=\"noopener noreferrer\">https://tempmailbox.net</a> (TempMailbox) — great example of a disposable mailbox you may want to block on registration.  ￼</li>\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-372l","date":1761638930,"author":"Vibe YouTube","guid":319031,"unread":true,"content":"<h1>\n  \n  \n  Build a Python AI Agent in 10 Minutes\n</h1>\n\n<p>Ready to whip up a Python AI agent in under 10 minutes? Tech With Tim walks you from installing dependencies and grabbing your OpenAI API key to pulling in imports and crafting custom tools—all the way through to wiring up an LLM-driven agent.</p>\n\n<p>Once your driver code is in place, you’ll see it live in action with a quick test drive. Plus, you get handy timestamped video sections, links to the GitHub repo, and bonus nods to PyCharm and Notion to keep your workflow slick.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=gaGaPpnexxA\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 17: Converting Numeric Grades to Letters with Robustness and Clarity","url":"https://dev.to/shahrouzlogs/day-17-converting-numeric-grades-to-letters-with-robustness-and-clarity-eal","date":1761638928,"author":"Shahrouz Nikseresht","guid":319030,"unread":true,"content":"<p>Welcome to Day 17 of the <strong>#80DaysOfChallenges</strong> journey! Today’s<br>\nchallenge was a polished take on a classic: <strong>converting numeric grades to letter grades</strong>, emphasizing clean input handling, modern conditional logic, and Python 3.10+ <code>match-case</code>. This beginner-to-intermediate task gave me a solid workout in validation, control flow, and user-friendly program design. It felt like building a tiny, reliable grading assistant.</p>\n\n\n<h2>\n  \n  \n  💡 Key Takeaways from Day 17: Robust Grade Converter\n</h2>\n\n<p>This challenge accepts both integer and decimal grades (like 89.5), validates input thoroughly, and uses <code>match-case</code> to map values to A–F letters. The output is simple, but the strength lies in the input loop, data cleaning, and readable branching. Let’s break down the essentials: <strong>robust input</strong>, <strong>match-case for clarity</strong>, and <strong>smooth user flow</strong>.</p>\n<h3>\n  \n  \n  1. Robust Input: Ensuring a Valid Grade Every Time\n</h3>\n\n<p>The <code>get_valid_grade</code> function is the gatekeeper. It uses a <code>while True</code> loop to force a valid float between 0 and 100, handling both whole numbers and decimals:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">raw_input_value</span> <span class=\"o\">=</span> <span class=\"nf\">input</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Enter your grade (0–100): </span><span class=\"sh\">\"</span><span class=\"p\">).</span><span class=\"nf\">strip</span><span class=\"p\">()</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">grade</span> <span class=\"o\">=</span> <span class=\"nf\">float</span><span class=\"p\">(</span><span class=\"n\">raw_input_value</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"nb\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">That doesn</span><span class=\"sh\">'</span><span class=\"s\">t look like a number. Please enter a valid numeric grade.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">continue</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">grade</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">100</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Grade must be between 0 and 100. Try again.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">continue</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">grade</span>\n</code></pre>\n\n</div>\n\n\n\n<p>I loved how resilient this is; <code>strip()</code> removes stray spaces, <code>float()</code> accepts 85 or 89.5 equally well. If the user types \"abc\" or \"-5\", it responds with a clear message and loops again, no crashes, no nonsense. This kind of input handling turns a fragile script into something you can actually trust.</p>\n\n<h3>\n  \n  \n  2. match-case: Modern, Readable Conditional Branching\n</h3>\n\n<p>The <code>convert_to_letter_grade</code> function uses Python 3.10+ <code>match-case</code> with guard clauses to define grade ranges cleanly, replacing long <code>if-elif</code> chains:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">match</span> <span class=\"n\">grade</span><span class=\"p\">:</span>\n    <span class=\"n\">case</span> <span class=\"n\">grade</span> <span class=\"k\">if</span> <span class=\"mi\">90</span> <span class=\"o\">&lt;=</span> <span class=\"n\">grade</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">100</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"s\">A</span><span class=\"sh\">\"</span>\n    <span class=\"n\">case</span> <span class=\"n\">grade</span> <span class=\"k\">if</span> <span class=\"mi\">80</span> <span class=\"o\">&lt;=</span> <span class=\"n\">grade</span> <span class=\"o\">&lt;</span> <span class=\"mi\">90</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"s\">B</span><span class=\"sh\">\"</span>\n    <span class=\"n\">case</span> <span class=\"n\">grade</span> <span class=\"k\">if</span> <span class=\"mi\">70</span> <span class=\"o\">&lt;=</span> <span class=\"n\">grade</span> <span class=\"o\">&lt;</span> <span class=\"mi\">80</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"s\">C</span><span class=\"sh\">\"</span>\n    <span class=\"n\">case</span> <span class=\"n\">grade</span> <span class=\"k\">if</span> <span class=\"mi\">60</span> <span class=\"o\">&lt;=</span> <span class=\"n\">grade</span> <span class=\"o\">&lt;</span> <span class=\"mi\">70</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"s\">D</span><span class=\"sh\">\"</span>\n    <span class=\"n\">case</span> <span class=\"n\">grade</span> <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">grade</span> <span class=\"o\">&lt;</span> <span class=\"mi\">60</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"s\">F</span><span class=\"sh\">\"</span>\n    <span class=\"n\">case</span> <span class=\"n\">_</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>  <span class=\"c1\"># Signal invalid value\n</span></code></pre>\n\n</div>\n\n\n\n<p>Each case is explicit and scannable. For example, 92 → \"A\", 79.9 → \"C\". The wildcard <code>case _</code> acts as a safety net (though input validation already prevents invalid ranges). It’s like reading a grading policy in code form, clear, maintainable, and elegant.</p>\n\n<h3>\n  \n  \n  3. Program Flow: A Friendly, Interactive Experience\n</h3>\n\n<p>The main loop lets users convert multiple grades and exit gracefully:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">grade_value</span> <span class=\"o\">=</span> <span class=\"nf\">get_valid_grade</span><span class=\"p\">()</span>\n    <span class=\"n\">letter</span> <span class=\"o\">=</span> <span class=\"nf\">convert_to_letter_grade</span><span class=\"p\">(</span><span class=\"n\">grade_value</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Your letter grade is </span><span class=\"si\">{</span><span class=\"n\">letter</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">again</span> <span class=\"o\">=</span> <span class=\"nf\">input</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Would you like to enter another grade? (y/n): </span><span class=\"sh\">\"</span><span class=\"p\">).</span><span class=\"nf\">strip</span><span class=\"p\">().</span><span class=\"nf\">lower</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">again</span> <span class=\"o\">!=</span> <span class=\"sh\">\"</span><span class=\"s\">y</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Thanks for using the grade converter! Goodbye.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">break</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Small touches like emojis (Checkmark, Graduation cap), consistent formatting, and case-insensitive input (\"Y\", \"yes\", \" y \") make it feel polished. The user isn’t just running code, they’re having a conversation with it.</p>\n\n\n\n\n<h2>\n  \n  \n  🎯 Summary and Reflections\n</h2>\n\n<p>This challenge showed that even a simple conversion can teach big lessons in code quality. It made me focus on:</p>\n\n<ul>\n<li>\n<strong>Input resilience</strong>: Loop + try/except + validation = unbreakable user entry.</li>\n<li>\n<strong>Modern syntax</strong>: <code>match-case</code> for multi-condition logic that reads like a table.</li>\n<li>\n<strong>User experience</strong>: Clear feedback, flexibility, and a touch of warmth turn functionality into delight.</li>\n</ul>\n\n<p>The surprise? How much cleaner <code>match-case</code> made the logic feel. It’s like the code grew up. For extensions, I could add plus/minus grades (A-, B+), or read from a CSV to process an entire class.</p>\n\n<p><strong>Advanced Alternatives</strong>: Use <code>dataclasses</code> to bundle grade data, or build a GUI with <code>tkinter</code> for visual input. How do you handle grading logic in Python? Drop your approaches below!</p>\n\n\n\n\n<h2>\n  \n  \n  🚀 Next Steps and Resources\n</h2>\n\n<p>Day 17 grounded me in robust input and modern control flow, setting up for more interactive challenges. If you're on the #80DaysOfChallenges train, how did you handle validation? Any <code>match-case</code> tips or UX tweaks? Share in the comments!</p>\n\n<ul>\n<li>\n<strong>Source Code for Challenge #17</strong>: <a href=\"https://github.com/Sherouz/80-days-of-challenges/blob/main/scripts/grade_converter.py\" rel=\"noopener noreferrer\">scripts/grade_converter.py</a>\n</li>\n<li>\n<strong>Main Repository</strong>: <a href=\"https://github.com/Sherouz/80-days-of-challenges\" rel=\"noopener noreferrer\">80-days-of-challenges</a>\n</li>\n<li>\n<strong>Daily Updates</strong>: <a href=\"https://x.com/Shahrouzlogs\" rel=\"noopener noreferrer\">Twitter/X (@Shahrouzlogs)</a>\n</li>\n</ul>\n\n<p>Onward to Day 18, ready for the next coding adventure!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Pandas DataFrame into a PostgreSQL Table","url":"https://dev.to/erlan_akbar/pandas-dataframe-into-a-postgresql-table-23o5","date":1761637700,"author":"Erlan Akbaraliev","guid":319029,"unread":true,"content":"<h3>\n  \n  \n  Final Result\n</h3>\n\n<ol>\n<li><p>We have this DataFrame in Jupyter Notebook. We clean it using Pandas — filling or deleting null values, adding new columns, converting data types, etc.<br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fde66hrjlu5n6caekhcfe.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fde66hrjlu5n6caekhcfe.png\" alt=\"Pandas DataFrame\" width=\"800\" height=\"306\"></a></p></li>\n<li><p>Now we want to view the cleaned DataFrame as a table inside a SQL database, so we can perform further analysis using SQL.<br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8cme3ucba0j7h7eejf6h.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8cme3ucba0j7h7eejf6h.png\" alt=\"psql\" width=\"800\" height=\"387\"></a></p></li>\n</ol>\n\n\n\n\n<h2>\n  \n  \n  How to Convert a Pandas DataFrame into a Database Table\n</h2>\n\n<p>We'll use <strong>Pandas</strong> and <strong>SQLAlchemy</strong> to connect Jupyter Notebook to a PostgreSQL database.</p>\n\n<h3>\n  \n  \n  Steps Overview\n</h3>\n\n<ol>\n<li>Install Jupyter Notebook</li>\n<li>Install PostgreSQL</li>\n<li>Create a database to store the DataFrame as a table</li>\n<li>Prepare the DataFrame in Jupyter</li>\n<li>Connect Jupyter to PostgreSQL and convert the DataFrame into a table</li>\n</ol>\n\n\n\n\n<h2>\n  \n  \n  1. Install Jupyter Notebook\n</h2>\n\n<p>Open your terminal or PowerShell and navigate (<code>cd</code>) to the directory where you want to store your Jupyter Notebook files.<br>\nFor example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nb\">cd</span> ~/Documents/\n</code></pre>\n\n</div>\n\n\n\n<p>Install and start Jupyter:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>pip <span class=\"nb\">install </span>notebook\njupyter notebook\n</code></pre>\n\n</div>\n\n\n\n<p>You should see a new browser window open:<br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fz4akjzi2wjghr48ghwye.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fz4akjzi2wjghr48ghwye.png\" alt=\"jupyter notebook result\" width=\"800\" height=\"298\"></a></p>\n\n<p>Click <strong>“New” → “Python 3 (ipykernel)”</strong> to create a new notebook.<br>\nThis is where we’ll create and clean our DataFrame.<br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ftir0qh2t6hs9w52bgfsu.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ftir0qh2t6hs9w52bgfsu.png\" alt=\"jupyter run\" width=\"800\" height=\"179\"></a></p>\n\n<blockquote>\n<p>💡 Your laptop is now running a Jupyter Notebook server locally.<br>\nYou have successfully installed Jupyter Notebook which we will use to write python code.</p>\n</blockquote>\n\n\n<h2>\n  \n  \n  2. Install PostgreSQL\n</h2>\n\n<p>Open your terminal and run the following commands, <strong>for macOS only:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>brew <span class=\"nb\">install </span>postgresql              <span class=\"c\"># install PostgreSQL</span>\nbrew services list                   <span class=\"c\"># check if PostgreSQL is running</span>\nbrew services start postgresql       <span class=\"c\"># start it if not running</span>\npsql postgres                        <span class=\"c\"># enter psql as the default 'postgres' user</span>\n</code></pre>\n\n</div>\n\n\n\n<p>You should see something like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>psql (14.19 (Homebrew))\nType \"help\" for help.\npostgres=#\n</code></pre>\n\n</div>\n\n\n\n<p>This means you’re connected to a locally running PostgreSQL server.<br>\nUse <code>\\l</code> to list all databases.</p>\n\n\n<h2>\n  \n  \n  3. Create a Database\n</h2>\n\n<p>Inside the PostgreSQL terminal (<code>psql</code>), create a new database:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sql\"><code><span class=\"n\">postgres</span><span class=\"o\">=#</span> <span class=\"k\">CREATE</span> <span class=\"k\">DATABASE</span> <span class=\"n\">mydatabase</span><span class=\"p\">;</span>\n<span class=\"n\">postgres</span><span class=\"o\">=#</span> <span class=\"err\">\\</span><span class=\"n\">l</span>                     <span class=\"c1\">-- list all databases</span>\n<span class=\"n\">postgres</span><span class=\"o\">=#</span> <span class=\"err\">\\</span><span class=\"k\">c</span> <span class=\"n\">mydatabase</span>          <span class=\"c1\">-- connect to the new database</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  4. Prepare the DataFrame in Jupyter\n</h2>\n\n<p>Run the following code in Jupyter:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"err\">!</span><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">pandas</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">({</span>\n    <span class=\"sh\">'</span><span class=\"s\">id</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n    <span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Po</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Tai Lung</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Shifu</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Oogway</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Mr Ping</span><span class=\"sh\">'</span><span class=\"p\">],</span>\n    <span class=\"sh\">'</span><span class=\"s\">salary</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"mi\">2000</span><span class=\"p\">,</span> <span class=\"mi\">2500</span><span class=\"p\">,</span> <span class=\"mi\">4000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">],</span>\n    <span class=\"sh\">'</span><span class=\"s\">hire_date</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">to_datetime</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">Series</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">2018.08.31</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">2001.01.01</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">1970.10.30</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">1950.01.01</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">2019.01.01</span><span class=\"sh\">'</span><span class=\"p\">]),</span>\n        <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">%Y.%m.%d</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"n\">df</span><span class=\"p\">.</span><span class=\"nf\">head</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  5. Connect Jupyter to PostgreSQL and Load the DataFrame\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"err\">!</span><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">psycopg2</span><span class=\"o\">-</span><span class=\"n\">binary</span> <span class=\"n\">SQLAlchemy</span>\n\n<span class=\"kn\">from</span> <span class=\"n\">sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">create_engine</span>\n\n<span class=\"c1\"># Step 1: Connect to PostgreSQL\n</span><span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">postgres</span><span class=\"sh\">\"</span>      <span class=\"c1\"># default user\n</span><span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"sh\">\"\"</span>              <span class=\"c1\"># the password you set during installation\n</span><span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">localhost</span><span class=\"sh\">\"</span>         <span class=\"c1\"># if running locally\n</span><span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">5432</span><span class=\"sh\">\"</span>              <span class=\"c1\"># default PostgreSQL port\n</span><span class=\"n\">database</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">mydatabase</span><span class=\"sh\">\"</span>    <span class=\"c1\"># the database you created earlier\n</span>\n<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"nf\">create_engine</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">postgresql+psycopg2://</span><span class=\"si\">{</span><span class=\"n\">username</span><span class=\"si\">}</span><span class=\"s\">:</span><span class=\"si\">{</span><span class=\"n\">password</span><span class=\"si\">}</span><span class=\"s\">@</span><span class=\"si\">{</span><span class=\"n\">host</span><span class=\"si\">}</span><span class=\"s\">:</span><span class=\"si\">{</span><span class=\"n\">port</span><span class=\"si\">}</span><span class=\"s\">/</span><span class=\"si\">{</span><span class=\"n\">database</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Step 2: Load the DataFrame into PostgreSQL\n</span><span class=\"n\">table_name</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">mytable</span><span class=\"sh\">\"</span>\n<span class=\"n\">df</span><span class=\"p\">.</span><span class=\"nf\">to_sql</span><span class=\"p\">(</span><span class=\"n\">table_name</span><span class=\"p\">,</span> <span class=\"n\">engine</span><span class=\"p\">,</span> <span class=\"n\">if_exists</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">replace</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">✅ Data successfully loaded into table </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">table_name</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"s\"> in database </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">database</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"s\">.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  6. Verify the Table in PostgreSQL\n</h2>\n\n<p>In your terminal, run:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sql\"><code><span class=\"n\">mydatabase</span><span class=\"o\">=#</span> <span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">mytable</span><span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>You should see the same data you created in Jupyter:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code> id |   name    | salary |     hire_date\n----+------------+--------+---------------------\n  1 | Po         |   3000 | 2018-08-31 00:00:00\n  2 | Tai Lung   |   2000 | 2001-01-01 00:00:00\n  3 | Shifu      |   2500 | 1970-10-30 00:00:00\n  4 | Oogway     |   4000 | 1950-01-01 00:00:00\n  5 | Mr Ping    |   1000 | 2019-01-01 00:00:00\n</code></pre>\n\n</div>\n\n\n\n<p>🏹 We successfully connected our Jupyter Notebook with the locally running psql database and made the dataframe on Jupyter available on our local database.</p>\n\n\n\n\n<h2>\n  \n  \n  Additional Useful Commands\n</h2>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\l</code></td>\n<td>List all databases</td>\n</tr>\n<tr>\n<td><code>\\c database_name</code></td>\n<td>Connect to a specific database</td>\n</tr>\n<tr>\n<td><code>\\dt</code></td>\n<td>List all tables in the current database</td>\n</tr>\n<tr>\n<td><code>\\d table_name</code></td>\n<td>Show details of a specific table</td>\n</tr>\n<tr>\n<td><code>\\dn</code></td>\n<td>List all schemas</td>\n</tr>\n<tr>\n<td><code>\\du</code></td>\n<td>List all users</td>\n</tr>\n<tr>\n<td><code>\\q</code></td>\n<td>Quit PostgreSQL</td>\n</tr>\n<tr>\n<td><code>\\x</code></td>\n<td>Toggle expanded output for wide tables</td>\n</tr>\n</tbody>\n</table></div>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building Janus: An AI-Powered Helpdesk That Makes Customer Support Smarter","url":"https://dev.to/k0msenapati/building-janus-an-ai-powered-helpdesk-that-makes-customer-support-smarter-h6c","date":1761629689,"author":"K Om Senapati","guid":318981,"unread":true,"content":"<p>Enterprise helpdesks spend hours triaging repetitive requests, categorizing tickets, and responding to the same issues repeatedly.<br><br>\nThis leads to delayed responses, inconsistent resolutions, and wasted agent hours.</p>\n\n<p>Janus solves this problem through automation, intelligent classification, and generative AI.<br><br>\nIt’s an AI-powered helpdesk system that allows users to raise tickets, receive instant AI replies, and enables admins to manage everything from a unified dashboard.<br><br>\nPowered by MindsDB AI Agents and a Knowledge Base, Janus automates classification, conversation, and analytics to deliver faster, more consistent support.</p>\n\n\n<h2>\n  \n  \n  The Use Case\n</h2>\n\n<p>The goal was to automate the helpdesk lifecycle.</p>\n\n<ul>\n<li>Users submit tickets and chat with an AI support agent in real time\n</li>\n<li>The system automatically classifies each ticket by intent, priority, and category\n</li>\n<li>Admins get a single dashboard to track trends, promote solved tickets into the Knowledge Base, and search historical data\n</li>\n</ul>\n\n<p>The outcome is faster response cycles, consistent answers, and actionable insights.</p>\n\n\n<h2>\n  \n  \n  Key Features\n</h2>\n\n<ol>\n<li>\n<strong>AI-Driven Ticket Classification</strong>\nEach ticket is processed by a dedicated MindsDB AI Agent that predicts its type, category, tags, and priority.\nThe model learns from past tickets to improve accuracy over time.</li>\n</ol>\n\n<p>Ticket metadata schema:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight json\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"err\">str</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"category\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"err\">str</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"priority\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"err\">str</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"tag_1\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"err\">str</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"tag_2\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"err\">str</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre>\n\n</div>\n\n\n<ol>\n<li><p><strong>AI Chat Support</strong><br>\nA second agent handles real-time conversations, providing instant solutions by leveraging the existing Knowledge Base for context.</p></li>\n<li><p><strong>Admin Dashboard</strong><br>\nAdmins can view analytics, approve solved cases into the Knowledge Base, and filter data by type, priority, or category.</p></li>\n<li><p><strong>Knowledge Base Management</strong><br>\nThe Knowledge Base (KB) is managed by MindsDB. It stores both content and metadata for retrieval and reasoning.</p></li>\n</ol>\n\n<p>KB schema:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">content_columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">subject</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">body</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">answer</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n<span class=\"n\">metadata_columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">priority</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">category</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">tag_1</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">tag_2</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n</code></pre>\n\n</div>\n\n\n<ol>\n<li>\n<strong>Search and Insights</strong>\nAdmins can visualize ticket trends, most common tags, and distribution of categories directly within the dashboard.</li>\n</ol>\n\n\n<h2>\n  \n  \n  How It Works\n</h2>\n\n<p>Below is the high-level workflow of Janus.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fm5x5b6ftplq474aqtoph.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fm5x5b6ftplq474aqtoph.png\" alt=\"user flow\" width=\"800\" height=\"390\"></a></p>\n\n<p>Architecture diagram:</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F995eqhli7cip4qv0g517.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F995eqhli7cip4qv0g517.png\" alt=\"architecture diag\" width=\"800\" height=\"691\"></a></p>\n\n<ul>\n<li>The Ticket Classifier Agent predicts structured metadata in JSON format which can be parsed directly in python using <code>json.loads()</code>\n</li>\n<li>The Support Agent handles ongoing chat with context from the Knowledge Base</li>\n<li>Both AI Agents are powered by MindsDB which manages the AI and KB layers.</li>\n</ul>\n\n\n<h2>\n  \n  \n  Demo\n</h2>\n\n<p><iframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/xSJRbmtMBGI\">\n</iframe>\n</p>\n\n\n<h2>\n  \n  \n  How I Built It\n</h2>\n<h3>\n  \n  \n  Tech Stack\n</h3>\n\n<ul>\n<li>\n<strong>Frontend/UI:</strong> Streamlit\n</li>\n<li>\n<strong>AI &amp; Knowledge Base:</strong> MindsDB\n</li>\n<li>\n<strong>Vector Database:</strong> ChromaDB\n</li>\n<li>\n<strong>LLM Provider:</strong> Nebius\n</li>\n<li>\n<strong>Programming Language:</strong> Python</li>\n</ul>\n\n<p>The connection between Streamlit and MindsDB is handled via the MindsDB Python SDK.</p>\n<h3>\n  \n  \n  AI Setup\n</h3>\n\n<p>MindsDB integrates with external AI providers for model inference.<br><br>\nFor this project, Nebius was used as the provider endpoint.<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">LLM_MODEL_NAME</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Qwen/Qwen3-235B-A22B-Thinking-2507</span><span class=\"sh\">\"</span>\n<span class=\"n\">EMBEDDING_MODEL_NAME</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Qwen/Qwen3-Embedding-8B</span><span class=\"sh\">\"</span>\n</code></pre>\n\n</div>\n\n\n<p>Two MindsDB AI Agents power the workflow:</p>\n\n<ol>\n<li>\n<strong>Ticket Classifier</strong> – Predicts metadata such as type, category, and priority.\n</li>\n<li>\n<strong>Support Agent</strong> – Generates AI responses using the Knowledge Base for context.</li>\n</ol>\n\n<p>The Knowledge Base combines a vector database (ChromaDB) with embedding model for contextual retrieval.</p>\n\n\n<h2>\n  \n  \n  Development Insights\n</h2>\n\n<p>The most challenging part was preparing the prompt for the Ticket Classifier so that it outputs a valid JSON structure directly parsable with <code>json.loads()</code>.<br><br>\nThis allowed seamless integration with Streamlit components and minimized post-processing.</p>\n\n<p>Example output:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight json\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Login Issue\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"category\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Authentication\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"priority\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"high\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"tag_1\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"password\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"tag_2\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"reset\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre>\n\n</div>\n\n\n<p>MindsDB integration was straightforward, with its Python SDK providing simple APIs for agent calls and KB management.<br><br>\nStreamlit pages (for user and admin) are modular and can be accessed through the sidebar.</p>\n\n\n<h2>\n  \n  \n  Impact\n</h2>\n\n<ul>\n<li>Reduced response time as users get immediate AI replies\n</li>\n<li>Consistent ticket classification ensuring better routing and tracking\n</li>\n<li>Visual insights on ticket categories, priorities, and tag trends\n</li>\n<li>Easier management of historical tickets through the Knowledge Base</li>\n</ul>\n\n<p>AI acts as the first responder, handling repetitive issues and freeing human agents for complex cases.</p>\n\n\n<h2>\n  \n  \n  Future Enhancements\n</h2>\n\n<ul>\n<li>\n<strong>Web Search Integration:</strong> Adding real-time data retrieval would make the AI agent more dynamic\n</li>\n<li>\n<strong>Backend Upgrade:</strong> Replacing Streamlit with a FastAPI backend for production scalability\n</li>\n<li>\n<strong>Third-Party Integrations:</strong> Utilizing MindsDB connectors such as Jira, Slack, or Gmail for enterprise integration</li>\n</ul>\n\n\n<h2>\n  \n  \n  Final Thoughts\n</h2>\n\n<p>Janus demonstrates how combining Streamlit’s simplicity with MindsDB’s AI and Knowledge Base capabilities can automate customer support end-to-end.<br><br>\nIt showcases a modular architecture that can evolve into a production-ready multi-channel support system.</p>\n\n\n\n<p>Support by starring the repo.<br>\n</p>\n<div class=\"ltag-github-readme-tag\">\n  <div class=\"readme-overview\">\n    <h2>\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fassets.dev.to%2Fassets%2Fgithub-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\">\n      <a href=\"https://github.com/k0msenapati\" rel=\"noopener noreferrer\">\n        k0msenapati\n      </a> / <a href=\"https://github.com/k0msenapati/janus\" rel=\"noopener noreferrer\">\n        janus\n      </a>\n    </h2>\n    <h3>\n      AI-powered helpdesk system\n    </h3>\n  </div>\n  <div class=\"ltag-github-body\">\n    \n<div id=\"readme\" class=\"md\">\n<div class=\"markdown-heading\">\n<h1 class=\"heading-element\">Janus</h1>\n</div>\n\n<p><strong>Janus</strong> is an AI-powered helpdesk system that makes customer support faster and smarter. It helps users raise support tickets, get instant AI replies, and lets admins manage everything from one simple dashboard.</p>\n\n<div class=\"markdown-heading\">\n<h2 class=\"heading-element\">Use Case</h2>\n</div>\n\n<p>Enterprise helpdesks spend hours triaging and responding to repetitive support requests\nJanus automates the lifecycle:</p>\n<ul>\n<li>Users submit tickets and chat with an AI support agent in real time.</li>\n<li>The system classifies intent, priority, and category automatically.</li>\n<li>Admins can visualize ticket trends, approve high-value cases into the Knowledge Base, and run searches across historical data.</li>\n</ul>\n<p><strong>Result:</strong> Reduced response time, consistent resolutions, and actionable insights.</p>\n<div class=\"markdown-heading\">\n<h2 class=\"heading-element\">Features</h2>\n\n</div>\n<p><strong>🎟️ User Portal</strong></p>\n<ul>\n<li>Submit new support tickets.</li>\n<li>Get an instant AI-generated first response.</li>\n<li>Chat with the AI about your issue.</li>\n<li>View all your previous tickets in one place.</li>\n</ul>\n<p><strong>🧠 Admin Portal</strong></p>\n<ul>\n<li>View visual dashboards showing ticket trends.</li>\n<li>Review and manage tickets — approve useful ones for the Knowledge Base or delete…</li>\n</ul>\n</div>\n  </div>\n  <div class=\"gh-btn-container\"><a class=\"gh-btn\" href=\"https://github.com/k0msenapati/janus\" rel=\"noopener noreferrer\">View on GitHub</a></div>\n</div>\n\n\n<p>If you found this article useful, share it with your peers and community to spread the word about this.</p>\n\n<p>Follow me for more content like this!</p>\n\n<p><a href=\"https://x.com/k0msenapati\" rel=\"noopener noreferrer\">Twitter</a> | <a href=\"https://github.com/k0msenapati\" rel=\"noopener noreferrer\">GitHub</a> | <a href=\"https://www.youtube.com/@k0msenapati\" rel=\"noopener noreferrer\">YouTube</a></p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Frf0livnq0mgsenhinrvw.gif\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Frf0livnq0mgsenhinrvw.gif\" alt=\" \" width=\"498\" height=\"498\"></a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"🗓️ Day 55 of My Data Analytics Journey","url":"https://dev.to/ramyacse/day-55-of-my-data-analytics-journey-341e","date":1761629061,"author":"Ramya .C","guid":319028,"unread":true,"content":"<p>Today was a super productive day! 💪<br>\nI worked on <strong>two automation mini projects</strong> using Python that make my workflow smarter and more efficient.</p>\n\n\n\n\n<h3>\n  \n  \n  🧩 <strong>Project 1: Automatically Arrange Files Using Python</strong>\n</h3>\n\n<p>I created a Python program that scans any folder and automatically arranges files based on their extensions.<br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fl2f7llslue85fnfmmkc2.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fl2f7llslue85fnfmmkc2.jpg\" alt=\" \" width=\"800\" height=\"452\"></a><br>\n📂 For example:</p>\n\n<ul>\n<li>\n<code>.pdf</code> → goes to <strong>PDF_Files</strong>\n</li>\n<li>\n<code>.xlsx</code> → goes to <strong>Excel_Files</strong>\n</li>\n<li>\n<code>.jpg</code> → goes to <strong>Image_Files</strong>\n</li>\n</ul>\n\n<p>🔧 <strong>Libraries Used:</strong> <code>os</code>, <code>shutil</code><br>\n💡 <strong>What I Learned:</strong> File handling, automation, and folder management using Python.</p>\n\n\n\n\n<h3>\n  \n  \n  🌦️ <strong>Project 2: Google Automation – Chennai Climate Screenshot</strong>\n</h3>\n\n<p>This project uses <strong>Selenium</strong> to automatically open Google, search for <em>“Chennai Climate”</em>, and take a screenshot of the weather result.<br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8cqmv8b6b6szk18r05kt.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8cqmv8b6b6szk18r05kt.png\" alt=\" \" width=\"800\" height=\"344\"></a><br>\nIt saves the image automatically in the folder! 📸</p>\n\n<p>🔧 <strong>Libraries Used:</strong> <code>selenium</code>, <code>time</code><br>\n💡 <strong>What I Learned:</strong> Web automation, dynamic page handling, and screenshot saving using Python.</p>\n\n\n\n\n<p>🚀 Both of these mini projects improved my automation skills and helped me understand how Python can make daily tasks easier!</p>\n\n<p>🔗 <strong>GitHub Projects:</strong> <a href=\"https://github.com/ramyacse21/python-workspace/blob/main/import%20os%20split%20and%20arrange%20files.py\" rel=\"noopener noreferrer\">https://github.com/ramyacse21/python-workspace/blob/main/import%20os%20split%20and%20arrange%20files.py</a></p>\n\n<p><a href=\"https://github.com/ramyacse21/python-workspace/blob/main/automation%20task%20in%20google.py\" rel=\"noopener noreferrer\">https://github.com/ramyacse21/python-workspace/blob/main/automation%20task%20in%20google.py</a></p>\n\n<h1>\n  \n  \n  RamyaAnalyticsJourney\n</h1>\n\n<h1>\n  \n  \n  daywithcode#growwithpgm\n</h1>\n\n<p>-</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 27 of 100 days dsa coding challenge","url":"https://dev.to/manasi_patil_/day-27-of-100-days-dsa-coding-challenge-5f4","date":1761628806,"author":"Manasi Patil","guid":318980,"unread":true,"content":"<p>Taking on a new challenge: solving GeeksforGeeks POTD daily and sharing my solutions! 💻🔥<br>\nThe goal: sharpen problem-solving skills, level up coding, and learn something new every day. Follow my journey! 🚀</p>\n\n<h1>\n  \n  \n  100DaysOfCode #CodingChallenge #ProblemSolving #GeeksforGeeks #DeveloperJourney\n</h1>\n\n<p><strong>Problem:</strong>  </p>\n\n<p><a href=\"https://www.geeksforgeeks.org/problems/distance-of-nearest-cell-having-1-1587115620/1\" rel=\"noopener noreferrer\">https://www.geeksforgeeks.org/problems/distance-of-nearest-cell-having-1-1587115620/1</a></p>\n\n<p><strong>Distance of nearest cell having 1</strong></p>\n\n<p><strong>Difficulty: Medium   Accuracy: 47.7%</strong></p>\n\n<p>Given a binary grid[][], where each cell contains either 0 or 1, find the distance of the nearest 1 for every cell in the grid.<br>\nThe distance between two cells (i1, j1)  and (i2, j2) is calculated as |i1 - i2| + |j1 - j2|. <br>\nYou need to return a matrix of the same size, where each cell (i, j) contains the minimum distance from grid[i][j] to the nearest cell having value 1.<br>\nNote: It is guaranteed that there is at least one cell with value 1 in the grid.</p>\n\n<p><strong>Examples</strong><br>\nInput: grid[][] = [[0, 1, 1, 0], <br>\n                [1, 1, 0, 0], <br>\n                [0, 0, 1, 1]]<br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F41ktq0wscj8inmxfufvp.webp\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F41ktq0wscj8inmxfufvp.webp\" alt=\" \" width=\"450\" height=\"400\"></a><br>\nOutput: [[1, 0, 0, 1], <br>\n        [0, 0, 1, 1], <br>\n        [1, 1, 0, 0]]<br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fhbt9pqje0ljn3zuosjpo.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fhbt9pqje0ljn3zuosjpo.jpg\" alt=\" \" width=\"451\" height=\"400\"></a><br>\nExplanation: The grid is -</p>\n\n<ul>\n<li>0's at (0,0), (0,3), (1,2), (1,3), (2,0) and (2,1) are at a distance of 1 from 1's at (0,1), (0,2), (0,2), (2,3), (1,0) and (1,1) respectively.</li>\n</ul>\n\n<p>Input: grid[][] = [[1, 0, 1], <br>\n                [1, 1, 0], <br>\n                [1, 0, 0]]<br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F5o50prodyyij67jpk2md.webp\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F5o50prodyyij67jpk2md.webp\" alt=\" \" width=\"450\" height=\"400\"></a><br>\nOutput: [[0, 1, 0], <br>\n        [0, 0, 1], <br>\n        [0, 1, 2]]<br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Frzn9k704kcnb9j75vjqi.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Frzn9k704kcnb9j75vjqi.jpg\" alt=\" \" width=\"450\" height=\"400\"></a><br>\nExplanation: The grid is -</p>\n\n<ul>\n<li>0's at (0,1), (1,2), (2,1) and (2,2) are at a  distance of 1, 1, 1 and 2 from 1's at (0,0), (0,2), (2,0) and (1,1) respectively.</li>\n</ul>\n\n<p><strong>Constraints:</strong><br>\n1 ≤ grid.size() ≤ 200<br>\n1 ≤ grid[0].size() ≤ 200</p>\n\n<p><strong>Solution:</strong></p>\n\n<p>import heapq</p>\n\n<p>class Solution:<br>\n    def kSmallestPair(self, arr1, arr2, k):<br>\n        heap, res = [], []<br>\n        for i in range(min(k, len(arr1))):<br>\n            heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))<br>\n        while heap and len(res) &lt; k:<br>\n            s, i, j = heapq.heappop(heap)<br>\n            res.append([arr1[i], arr2[j]])<br>\n            if j + 1 &lt; len(arr2):<br>\n                heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))<br>\n        return res</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Introspective AI Revolution: Smarter Learning Through Self-Awareness by Arvind Sundararajan","url":"https://dev.to/arvind_sundararajan/the-introspective-ai-revolution-smarter-learning-through-self-awareness-by-arvind-sundararajan-56n7","date":1761627723,"author":"Arvind SundaraRajan","guid":318966,"unread":true,"content":"<h1>\n  \n  \n  The Introspective AI Revolution: Smarter Learning Through Self-Awareness\n</h1>\n\n<p>Imagine training an AI to navigate a complex maze, only to watch it stumble repeatedly. Frustrating, right? Traditional AI often relies on brute-force learning, blindly trying solutions until it stumbles upon the correct one. But what if we could equip AI with the ability to understand <em>what</em> it doesn't know, and actively seek out that knowledge? This is the promise of introspective AI.</p>\n\n<p>At its core, the concept involves building systems that can reason about their own internal state, including their knowledge gaps and uncertainties. Imagine it like this: a student who not only learns the material but also knows <em>which</em> areas they need to focus on for further study. This self-awareness allows the AI to strategically explore its environment, focusing on areas where it needs more data and experience. The AI actively controls it's learning.</p>\n\n<p>This approach combines neural networks for processing sensory input and making low-level decisions, with symbolic reasoning for high-level planning and knowledge representation. This hybrid approach allows the system to solve tasks better than one method or the other.</p>\n\n<p><strong>Benefits of Introspective Learning:</strong></p>\n\n<ul>\n<li>  <strong>Faster Learning:</strong> Agents quickly identify and address knowledge gaps, accelerating the learning process.</li>\n<li>  <strong>Improved Generalization:</strong> By understanding the limits of their knowledge, AI can perform better in unseen situations.</li>\n<li>  <strong>Enhanced Robustness:</strong> Agents can adapt more effectively to unexpected changes in their environment.</li>\n<li>  <strong>More Explainable AI:</strong> The reasoning process becomes more transparent, increasing trust and understanding.</li>\n<li>  <strong>Reduced Data Requirements:</strong> Introspective learning agents require less training data to achieve desired performance.</li>\n<li>  <strong>Adaptive Learning Strategies:</strong> The learning strategy becomes more efficient as a result of being able to reflect on performance.</li>\n</ul>\n\n<p>One implementation challenge lies in representing and managing the AI's self-knowledge. What is known can be mapped, but it is equally important to identify what is unknown, but perhaps necessary. A practical tip is to start with simpler environments and gradually increase complexity as the agent's introspective capabilities improve.</p>\n\n<p>Imagine using this technology for personalized education, where an AI tutor adapts its teaching style based on the student's individual learning needs and knowledge gaps. It's a shift from simply processing data to truly understanding it. As we continue to develop these techniques, we're moving closer to AI systems that are not only intelligent but also self-aware and adaptable, paving the way for a new era of human-machine collaboration and innovation.</p>\n\n<p><strong>Related Keywords:</strong> Neurosymbolic AI, Reinforcement Learning, Introspective Learning, AI Explainability, Symbolic Reasoning, Neural Networks, Robotics, Autonomous Agents, Deep Learning, Knowledge Representation, AI Planning, Decision Making, Cognitive Architectures, Machine Learning Algorithms, Artificial General Intelligence (AGI), AI Safety, Model-Based RL, Data Efficiency, Generalization, Sample Efficiency, Hierarchical Reinforcement Learning, Meta-Learning, Transfer Learning</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Package Architecture: Building Importable Code","url":"https://dev.to/aaron_rose_0787cc8b4775a0/the-package-architecture-building-importable-code-263","date":1761627507,"author":"Aaron Rose","guid":318965,"unread":true,"content":"<p>Timothy had written dozens of useful Python modules for the library—database utilities, book cataloging functions, report generators. But each script lived in isolation, copied and pasted between projects, versions diverging, improvements lost.</p>\n\n<p>The problem? multiple copies of the same function:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># project_a/utils.py\n</span><span class=\"k\">def</span> <span class=\"nf\">format_isbn</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">isbn</span><span class=\"p\">.</span><span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">-</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># project_b/helpers.py  \n</span><span class=\"k\">def</span> <span class=\"nf\">format_isbn</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">):</span>  <span class=\"c1\"># Same function, different file!\n</span>    <span class=\"k\">return</span> <span class=\"n\">isbn</span><span class=\"p\">.</span><span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">-</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># project_c/isbn_tools.py\n</span><span class=\"k\">def</span> <span class=\"nf\">format_isbn</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">):</span>  <span class=\"c1\"># Now we have THREE copies!\n</span>    <span class=\"k\">return</span> <span class=\"n\">isbn</span><span class=\"p\">.</span><span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">-</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Margaret found him maintaining the same function in seven different locations. \"You're managing chaos,\" she observed. \"Come to the Package Architecture—where code becomes reusable, installable, and shareable.\"</p>\n\n<h2>\n  \n  \n  From Script to Package\n</h2>\n\n<p>She showed him the transformation:</p>\n\n<p>The before and after:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Before: Just a file (a MODULE)\n# my_script.py\n</span><span class=\"k\">def</span> <span class=\"nf\">process_data</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"s\">data</span><span class=\"sh\">\"</span>\n\n<span class=\"c1\"># After: A proper package (a PACKAGE containing modules)\n# my_library/\n#   __init__.py\n#   core.py\n#   utils.py\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"A package is a directory with an <code>__init__.py</code> file,\" Margaret explained. \"That file—even if empty—tells Python 'this directory is importable.' Everything inside becomes accessible through dot notation.\"</p>\n\n<p>\"Wait,\" Timothy said. \"What's the difference between a module and a package?\"</p>\n\n<p>The key distinction:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># MODULE: A single .py file\n# isbn.py\n</span><span class=\"k\">def</span> <span class=\"nf\">format_isbn</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">isbn</span><span class=\"p\">.</span><span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">-</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Import: from isbn import format_isbn\n</span>\n<span class=\"c1\"># PACKAGE: A directory with __init__.py containing modules\n# library_tools/          # This is the package\n#   __init__.py           # Marker file\n#   isbn.py               # This is a module\n#   catalog.py            # This is a module\n</span>\n<span class=\"c1\"># Import: from library_tools.isbn import format_isbn\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"Both are importable,\" Margaret explained. \"A module is a single file. A package is a collection of modules organized in a directory. Packages let you group related modules together.\"</p>\n\n<h2>\n  \n  \n  Python's Bytecode Cache\n</h2>\n\n<p>After importing for the first time, Timothy noticed new directories:</p>\n\n<p>The automatically created cache:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># library_tools/\n#   __init__.py\n#   isbn.py\n#   __pycache__/                    # Created automatically!\n#     __init__.cpython-311.pyc      # Compiled bytecode\n#     isbn.cpython-311.pyc          # Compiled bytecode\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"The <code>__pycache__</code> directory stores compiled bytecode,\" Margaret explained. \"Python compiles <code>.py</code> files to <code>.pyc</code> files for faster loading. First import compiles, subsequent imports load the cached bytecode—much faster.\"</p>\n\n<p>What to add to .gitignore:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># .gitignore should include:\n</span><span class=\"n\">__pycache__</span><span class=\"o\">/</span>\n<span class=\"o\">*</span><span class=\"p\">.</span><span class=\"n\">pyc</span>\n<span class=\"o\">*</span><span class=\"p\">.</span><span class=\"n\">pyo</span>\n</code></pre>\n\n</div>\n\n\n\n<p>\"Always ignore <code>__pycache__</code> in version control,\" she advised. \"These are machine-generated cache files, not source code.\"</p>\n\n<h2>\n  \n  \n  The Simplest Package\n</h2>\n\n<p>A minimal working example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># library_tools/\n#   __init__.py          # Makes this a package\n#   isbn.py              # Module inside package\n</span>\n<span class=\"c1\"># library_tools/isbn.py\n</span><span class=\"k\">def</span> <span class=\"nf\">format_isbn</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Remove hyphens from ISBN</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">isbn</span><span class=\"p\">.</span><span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">-</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">validate_isbn</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Check if ISBN has correct length</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">clean</span> <span class=\"o\">=</span> <span class=\"nf\">format_isbn</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">clean</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Now anyone can import it!\n</span><span class=\"kn\">from</span> <span class=\"n\">library_tools.isbn</span> <span class=\"kn\">import</span> <span class=\"n\">format_isbn</span>\n<span class=\"kn\">from</span> <span class=\"n\">library_tools.isbn</span> <span class=\"kn\">import</span> <span class=\"n\">validate_isbn</span>\n\n<span class=\"c1\"># Or import the whole module\n</span><span class=\"kn\">from</span> <span class=\"n\">library_tools</span> <span class=\"kn\">import</span> <span class=\"n\">isbn</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">isbn</span><span class=\"p\">.</span><span class=\"nf\">format_isbn</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">978-0-441-01359-3</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>\"The package name is the directory name,\" Margaret noted. \"The module name is the file name. The function name is... the function name. Three levels of organization.\"</p>\n\n<h2>\n  \n  \n  What Happens During Import\n</h2>\n\n<p>Before diving deeper, Margaret showed Timothy what Python actually does when you import:</p>\n\n<p>Python's six-step import process:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># When you write:\n</span><span class=\"kn\">from</span> <span class=\"n\">library_tools.isbn</span> <span class=\"kn\">import</span> <span class=\"n\">format_isbn</span>\n\n<span class=\"c1\"># Python performs these steps:\n# 1. Check sys.modules - already loaded?\n# 2. Search sys.path for library_tools package\n# 3. Execute library_tools/__init__.py (first import only!)\n# 4. Execute library_tools/isbn.py (if not cached)\n# 5. Cache everything in sys.modules\n# 6. Bind format_isbn to current namespace\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"Imports happen once per session,\" Margaret explained. \"Python caches modules in <code>sys.modules</code>. Second imports are instant—they just retrieve the cached module.\"</p>\n\n<p>Demonstrating the cache:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n\n<span class=\"c1\"># First import - executes code\n</span><span class=\"kn\">from</span> <span class=\"n\">library_tools</span> <span class=\"kn\">import</span> <span class=\"n\">isbn</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">)</span>  <span class=\"c1\"># &lt;module 'library_tools.isbn' from '...'&gt;\n</span>\n<span class=\"c1\"># Check the cache\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">library_tools.isbn</span><span class=\"sh\">'</span> <span class=\"ow\">in</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">modules</span><span class=\"p\">)</span>  <span class=\"c1\"># True\n</span>\n<span class=\"c1\"># Second import - uses cache (instant!)\n</span><span class=\"kn\">from</span> <span class=\"n\">library_tools</span> <span class=\"kn\">import</span> <span class=\"n\">isbn</span>  <span class=\"c1\"># Doesn't re-execute isbn.py\n</span>\n<span class=\"c1\"># You can see all loaded modules\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">modules</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">()))</span>\n<span class=\"c1\"># ['sys', 'builtins', 'library_tools', 'library_tools.isbn', ...]\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"This is why <code>__init__.py</code> code runs only once,\" she noted. \"First import executes it, subsequent imports use the cached version. Put initialization logic there, but be careful—it runs at import time, not call time.\"</p>\n\n<h2>\n  \n  \n  The Import Search Path\n</h2>\n\n<p>How Python finds packages:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">sys</span>\n\n<span class=\"c1\"># Python searches these locations in order:\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">)</span>\n<span class=\"c1\"># [\n#   '',  # Current directory (first!)\n#   '/usr/lib/python3.11',  # Standard library\n#   '/usr/lib/python3.11/site-packages',  # Installed packages\n#   ...\n# ]\n</span>\n<span class=\"c1\"># To add custom locations:\n</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">/path/to/my/packages</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or set PYTHONPATH environment variable:\n# export PYTHONPATH=/path/to/my/packages\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"Current directory is first,\" Margaret warned. \"If you have a file named <code>email.py</code>, it shadows the standard library's <code>email</code> module! Always use unique package names.\"</p>\n\n<h2>\n  \n  \n  Import Side Effects and Circular Imports\n</h2>\n\n<p>Import-time execution:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># library_tools/__init__.py\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Initializing library_tools!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Runs at import time\n</span>\n<span class=\"c1\"># First import anywhere in your program:\n</span><span class=\"kn\">import</span> <span class=\"n\">library_tools</span>  <span class=\"c1\"># Prints: Initializing library_tools!\n</span>\n<span class=\"c1\"># Subsequent imports:\n</span><span class=\"kn\">import</span> <span class=\"n\">library_tools</span>  <span class=\"c1\"># Silent - cached\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"Be cautious with import-time code,\" Margaret cautioned. \"Keep <code>__init__.py</code> lightweight. Heavy computation at import time slows down program startup.\"</p>\n\n<p>She also warned about circular dependencies:</p>\n\n<p>A problematic pattern to avoid:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># library_tools/catalog.py\n</span><span class=\"kn\">from</span> <span class=\"n\">library_tools.database</span> <span class=\"kn\">import</span> <span class=\"n\">save_book</span>  <span class=\"c1\"># Imports database\n</span>\n<span class=\"c1\"># library_tools/database.py\n</span><span class=\"kn\">from</span> <span class=\"n\">library_tools.catalog</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>  <span class=\"c1\"># Imports catalog\n</span>\n<span class=\"c1\"># CIRCULAR DEPENDENCY!\n# catalog imports database\n# database imports catalog\n# Neither can finish importing!\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"We'll tackle circular import problems in Article 42,\" she noted. \"For now, know that they're a design smell—usually fixable by restructuring code or using import-time tricks.\"</p>\n\n<h2>\n  \n  \n  The <strong>init</strong>.py File: Package Gateway\n</h2>\n\n<p>Timothy learned that <code>__init__.py</code> is more than a marker:</p>\n\n<p>Three common patterns:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># library_tools/__init__.py\n</span>\n<span class=\"c1\"># Option 1: Empty (package exists, but you import from submodules)\n# Users must: from library_tools.isbn import format_isbn\n</span>\n<span class=\"c1\"># Option 2: Import key functions for convenience\n</span><span class=\"kn\">from</span> <span class=\"n\">library_tools.isbn</span> <span class=\"kn\">import</span> <span class=\"n\">format_isbn</span><span class=\"p\">,</span> <span class=\"n\">validate_isbn</span>\n<span class=\"kn\">from</span> <span class=\"n\">library_tools.database</span> <span class=\"kn\">import</span> <span class=\"n\">connect_db</span>\n\n<span class=\"c1\"># Now users can: from library_tools import format_isbn\n</span>\n<span class=\"c1\"># Option 3: Control what's exported with __all__\n</span><span class=\"kn\">from</span> <span class=\"n\">library_tools.isbn</span> <span class=\"kn\">import</span> <span class=\"n\">format_isbn</span><span class=\"p\">,</span> <span class=\"n\">validate_isbn</span>\n<span class=\"kn\">from</span> <span class=\"n\">library_tools.database</span> <span class=\"kn\">import</span> <span class=\"n\">connect_db</span><span class=\"p\">,</span> <span class=\"n\">_internal_helper</span>\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">format_isbn</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">validate_isbn</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">connect_db</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"c1\"># _internal_helper is available but not in __all__\n# When someone does: from library_tools import *\n# They only get items in __all__\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"Think of <code>__init__.py</code> as the package's front desk,\" Margaret explained. \"It decides what visitors see immediately versus what they must ask for specifically.\"</p>\n\n<h2>\n  \n  \n  Package Initialization\n</h2>\n\n<p>Common initialization patterns:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># library_tools/__init__.py\n</span>\n<span class=\"c1\"># Code here runs when the package is first imported!\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Library Tools v1.0 loaded</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Common pattern: Set version\n</span><span class=\"n\">__version__</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">1.0.0</span><span class=\"sh\">\"</span>\n\n<span class=\"c1\"># Common pattern: Lazy imports (import only when needed)\n</span><span class=\"k\">def</span> <span class=\"nf\">get_heavy_module</span><span class=\"p\">():</span>\n    <span class=\"kn\">from</span> <span class=\"n\">library_tools</span> <span class=\"kn\">import</span> <span class=\"n\">heavy_processing</span>\n    <span class=\"k\">return</span> <span class=\"n\">heavy_processing</span>\n\n<span class=\"c1\"># Common pattern: Check dependencies\n</span><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"n\">requests</span>\n<span class=\"k\">except</span> <span class=\"nb\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"nc\">ImportError</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">library_tools requires </span><span class=\"sh\">'</span><span class=\"s\">requests</span><span class=\"sh\">'</span><span class=\"s\">. Install with: pip install requests</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Make key items available at package level\n</span><span class=\"kn\">from</span> <span class=\"n\">library_tools.isbn</span> <span class=\"kn\">import</span> <span class=\"n\">format_isbn</span>\n<span class=\"kn\">from</span> <span class=\"n\">library_tools.catalog</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span><span class=\"p\">,</span> <span class=\"n\">Author</span>\n\n<span class=\"c1\"># Now users can do:\n# from library_tools import format_isbn, Book\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"The <code>__init__.py</code> runs once, when the package is first imported,\" she noted. \"Use it for setup, version declaration, and making your API convenient.\"</p>\n\n<h2>\n  \n  \n  Relative vs Absolute Imports\n</h2>\n\n<p>Margaret showed him both import styles:</p>\n\n<p>Package structure for examples:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Package structure:\n# library_tools/\n#   __init__.py\n#   isbn.py\n#   catalog.py\n#   database/\n#     __init__.py\n#     connection.py\n#     queries.py\n</span>\n<span class=\"c1\"># In library_tools/catalog.py - ABSOLUTE IMPORTS\n</span><span class=\"kn\">from</span> <span class=\"n\">library_tools.isbn</span> <span class=\"kn\">import</span> <span class=\"n\">format_isbn</span>\n<span class=\"kn\">from</span> <span class=\"n\">library_tools.database.connection</span> <span class=\"kn\">import</span> <span class=\"n\">get_db</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">isbn</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">isbn</span> <span class=\"o\">=</span> <span class=\"nf\">format_isbn</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"nf\">get_db</span><span class=\"p\">()</span>\n        <span class=\"c1\"># save to database\n</span>\n<span class=\"c1\"># In library_tools/catalog.py - RELATIVE IMPORTS  \n</span><span class=\"kn\">from</span> <span class=\"n\">.isbn</span> <span class=\"kn\">import</span> <span class=\"n\">format_isbn</span>  <span class=\"c1\"># Same package\n</span><span class=\"kn\">from</span> <span class=\"n\">.database.connection</span> <span class=\"kn\">import</span> <span class=\"n\">get_db</span>  <span class=\"c1\"># Subpackage\n</span>\n<span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">isbn</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">isbn</span> <span class=\"o\">=</span> <span class=\"nf\">format_isbn</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>\"Relative imports use dots,\" Margaret explained. \"One dot means 'current package.' Two dots means 'parent package.'\"</p>\n\n<p>Navigating with dots:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># In library_tools/database/queries.py\n</span>\n<span class=\"c1\"># Absolute imports - always work\n</span><span class=\"kn\">from</span> <span class=\"n\">library_tools.isbn</span> <span class=\"kn\">import</span> <span class=\"n\">format_isbn</span>\n<span class=\"kn\">from</span> <span class=\"n\">library_tools.database.connection</span> <span class=\"kn\">import</span> <span class=\"n\">get_db</span>\n\n<span class=\"c1\"># Relative imports - package-aware\n</span><span class=\"kn\">from</span> <span class=\"n\">..isbn</span> <span class=\"kn\">import</span> <span class=\"n\">format_isbn</span>  <span class=\"c1\"># Up one level, then into isbn\n</span><span class=\"kn\">from</span> <span class=\"n\">.connection</span> <span class=\"kn\">import</span> <span class=\"n\">get_db</span>   <span class=\"c1\"># Same level (database package)\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">find_book</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">):</span>\n    <span class=\"n\">clean_isbn</span> <span class=\"o\">=</span> <span class=\"nf\">format_isbn</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">)</span>  <span class=\"c1\"># From parent package\n</span>    <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"nf\">get_db</span><span class=\"p\">()</span>  <span class=\"c1\"># From same package\n</span>    <span class=\"k\">return</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">SELECT * FROM books WHERE isbn = ?</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">clean_isbn</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>When to Use Each:</strong></p>\n\n<p><strong>Absolute imports are preferred</strong> because they're always clear about where imports come from, they work from anywhere, and they're easier to refactor. Use the full package path for transparency:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">library_tools.isbn</span> <span class=\"kn\">import</span> <span class=\"n\">format_isbn</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Relative imports should be used sparingly.</strong> They're short and convenient inside large packages, but they can't run the file as a script and they're harder to move code between packages:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">.isbn</span> <span class=\"kn\">import</span> <span class=\"n\">format_isbn</span>\n</code></pre>\n\n</div>\n\n\n\n<p>\"Absolute imports are clearer,\" Margaret advised. \"Use relative imports only within tightly coupled package code. Never in scripts meant to run directly.\"</p>\n\n<h2>\n  \n  \n  The -m Flag: Running Package Code\n</h2>\n\n<p>Timothy tried to run a file with relative imports:</p>\n\n<p>The file with relative imports:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># library_tools/catalog.py\n</span><span class=\"kn\">from</span> <span class=\"n\">.isbn</span> <span class=\"kn\">import</span> <span class=\"n\">format_isbn</span>  <span class=\"c1\"># Relative import\n</span>\n<span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">isbn</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">isbn</span> <span class=\"o\">=</span> <span class=\"nf\">format_isbn</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Running it the wrong way vs the right way:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># This FAILS:</span>\n<span class=\"nv\">$ </span>python library_tools/catalog.py\nValueError: attempted relative import <span class=\"k\">in </span>non-package\n\n<span class=\"c\"># This WORKS:</span>\n<span class=\"nv\">$ </span>python <span class=\"nt\">-m</span> library_tools.catalog\n<span class=\"c\"># Runs successfully!</span>\n</code></pre>\n\n</div>\n\n\n\n<p>\"The <code>-m</code> flag tells Python to run code as part of a package,\" Margaret explained. \"Without it, Python treats the file as a standalone script—relative imports fail. With <code>-m</code>, Python knows the package context—relative imports work.\"</p>\n\n<p>What Python does in each case:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># When you run: python -m library_tools.catalog\n# Python does:\n# 1. Finds library_tools package in sys.path\n# 2. Treats catalog.py as part of that package  \n# 3. Resolves relative imports correctly\n</span>\n<span class=\"c1\"># When you run: python library_tools/catalog.py\n# Python does:\n# 1. Runs the file directly (not as package)\n# 2. Doesn't know about package structure\n# 3. Relative imports fail - no package context!\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Subpackages: Nested Organization\n</h2>\n\n<p>Timothy learned to organize complex packages:</p>\n\n<p>A hierarchical structure:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># library_tools/\n#   __init__.py\n#   isbn.py\n#   catalog/\n#     __init__.py\n#     book.py\n#     author.py\n#   database/\n#     __init__.py\n#     connection.py\n#     queries.py\n#   reports/\n#     __init__.py\n#     pdf.py\n#     excel.py\n#     email.py\n</span>\n<span class=\"c1\"># Each subdirectory with __init__.py is a subpackage!\n</span>\n<span class=\"c1\"># library_tools/catalog/__init__.py\n</span><span class=\"kn\">from</span> <span class=\"n\">library_tools.catalog.book</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>\n<span class=\"kn\">from</span> <span class=\"n\">library_tools.catalog.author</span> <span class=\"kn\">import</span> <span class=\"n\">Author</span>\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">Book</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Author</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Now users can do:\n</span><span class=\"kn\">from</span> <span class=\"n\">library_tools.catalog</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span><span class=\"p\">,</span> <span class=\"n\">Author</span>\n<span class=\"c1\"># Instead of:\n</span><span class=\"kn\">from</span> <span class=\"n\">library_tools.catalog.book</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>\n<span class=\"kn\">from</span> <span class=\"n\">library_tools.catalog.author</span> <span class=\"kn\">import</span> <span class=\"n\">Author</span>\n</code></pre>\n\n</div>\n\n\n\n<p>\"Subpackages group related functionality,\" Margaret explained. \"Each subpackage gets its own <code>__init__.py</code> to control its API.\"</p>\n\n<h2>\n  \n  \n  The <strong>all</strong> Variable: Controlling Exports\n</h2>\n\n<p>She demonstrated selective visibility:</p>\n\n<p>Public vs private functions:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># library_tools/isbn.py\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">format_isbn</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Public API - users should call this</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"nf\">_clean_isbn</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">validate_isbn</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Public API</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"nf\">_check_length</span><span class=\"p\">(</span><span class=\"nf\">_clean_isbn</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_clean_isbn</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Private helper - internal use only</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">isbn</span><span class=\"p\">.</span><span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">-</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"\"</span><span class=\"p\">).</span><span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\"> </span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_check_length</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Private helper</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Control what 'from library_tools.isbn import *' imports\n</span><span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">format_isbn</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">validate_isbn</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"c1\"># _clean_isbn and _check_length are NOT in __all__\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"The underscore prefix is a convention for private functions,\" Margaret noted. \"But <code>__all__</code> explicitly declares your public API. When someone does <code>import *</code>, they only get what's in <code>__all__</code>.\"</p>\n\n<p>How <strong>all</strong> filters imports:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Without __all__:\n</span><span class=\"kn\">from</span> <span class=\"n\">library_tools.isbn</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"c1\"># Gets: format_isbn, validate_isbn, _clean_isbn, _check_length (everything!)\n</span>\n<span class=\"c1\"># With __all__:\n</span><span class=\"kn\">from</span> <span class=\"n\">library_tools.isbn</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>  \n<span class=\"c1\"># Gets: format_isbn, validate_isbn (only public API)\n</span>\n<span class=\"c1\"># But direct imports always work:\n</span><span class=\"kn\">from</span> <span class=\"n\">library_tools.isbn</span> <span class=\"kn\">import</span> <span class=\"n\">_clean_isbn</span>  <span class=\"c1\"># This still works!\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Making Code Installable: pyproject.toml\n</h2>\n\n<p>Margaret showed him how to make the package installable:</p>\n\n<p>Python comments:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Project structure:\n# my-library-project/\n#   pyproject.toml       # Package metadata\n#   README.md\n#   library_tools/       # The package itself\n#     __init__.py\n#     isbn.py\n#     catalog.py\n#   tests/\n#     test_isbn.py\n</span></code></pre>\n\n</div>\n\n\n\n<p>Now, the TOML:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight toml\"><code><span class=\"c\"># pyproject.toml</span>\n<span class=\"nn\">[build-system]</span>\n<span class=\"py\">requires</span> <span class=\"p\">=</span> <span class=\"py\">[\"setuptools&gt;</span><span class=\"p\">=</span><span class=\"mf\">61.0</span><span class=\"s\">\"]</span><span class=\"err\">\n</span><span class=\"py\">build-backend</span> <span class=\"p\">=</span> <span class=\"s\">\"setuptools.build_meta\"</span>\n\n<span class=\"nn\">[project]</span>\n<span class=\"py\">name</span> <span class=\"p\">=</span> <span class=\"s\">\"library-tools\"</span>\n<span class=\"py\">version</span> <span class=\"p\">=</span> <span class=\"s\">\"1.0.0\"</span>\n<span class=\"py\">description</span> <span class=\"p\">=</span> <span class=\"s\">\"Tools for library management\"</span>\n<span class=\"py\">authors</span> <span class=\"p\">=</span> <span class=\"py\">[{name</span> <span class=\"p\">=</span> <span class=\"s\">\"Timothy\"</span><span class=\"p\">,</span> <span class=\"py\">email</span> <span class=\"p\">=</span> <span class=\"s\">\"timothy@library.com\"</span><span class=\"err\">}]</span>\n<span class=\"py\">readme</span> <span class=\"p\">=</span> <span class=\"s\">\"README.md\"</span>\n<span class=\"py\">requires-python</span> <span class=\"p\">=</span> <span class=\"py\">\"&gt;</span><span class=\"p\">=</span><span class=\"mf\">3.8</span><span class=\"s\">\"</span><span class=\"err\">\n</span><span class=\"py\">dependencies</span> <span class=\"p\">=</span> <span class=\"p\">[</span>\n    <span class=\"py\">\"requests&gt;</span><span class=\"p\">=</span><span class=\"mf\">2.28</span><span class=\"err\">.</span><span class=\"mi\">0</span><span class=\"s\">\",</span><span class=\"err\">\n</span>    <span class=\"py\">\"pandas&gt;</span><span class=\"p\">=</span><span class=\"mf\">1.5</span><span class=\"err\">.</span><span class=\"mi\">0</span><span class=\"s\">\"</span><span class=\"err\">\n</span><span class=\"p\">]</span>\n\n<span class=\"nn\">[project.optional-dependencies]</span>\n<span class=\"py\">dev</span> <span class=\"p\">=</span> <span class=\"p\">[</span>\n    <span class=\"py\">\"pytest&gt;</span><span class=\"p\">=</span><span class=\"mf\">7.0</span><span class=\"s\">\",</span><span class=\"err\">\n</span>    <span class=\"py\">\"black&gt;</span><span class=\"p\">=</span><span class=\"mf\">22.0</span><span class=\"s\">\"</span><span class=\"err\">\n</span><span class=\"p\">]</span>\n</code></pre>\n\n</div>\n\n\n\n<p>\"This tells Python how to install your package,\" Margaret explained. \"Run <code>pip install .</code> in the project directory, and your package becomes available everywhere.\"</p>\n\n<p>Installation options:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Regular install - copies files to site-packages</span>\npip <span class=\"nb\">install</span> <span class=\"nb\">.</span>\n\n<span class=\"c\"># Editable install - creates link to source directory</span>\npip <span class=\"nb\">install</span> <span class=\"nt\">-e</span> <span class=\"nb\">.</span>\n\n<span class=\"c\"># Now from anywhere:</span>\npython <span class=\"nt\">-c</span> <span class=\"s2\">\"from library_tools import format_isbn; print(format_isbn('978-0-441-01359-3'))\"</span>\n<span class=\"c\"># 9780441013593</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Editable Installs for Development\n</h2>\n\n<p>Timothy asked about the <code>-e</code> flag. Margaret demonstrated:</p>\n\n<p>What editable mode does:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Install in editable mode (development)</span>\n<span class=\"nv\">$ </span>pip <span class=\"nb\">install</span> <span class=\"nt\">-e</span> <span class=\"nb\">.</span>\n\n<span class=\"c\"># What this does:</span>\n<span class=\"c\"># 1. Creates link file in site-packages pointing to source</span>\n<span class=\"c\"># 2. Changes to source code take effect immediately</span>\n<span class=\"c\"># 3. No reinstall needed after editing code!</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The workflow comparison:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Without -e (regular install):\n# Edit library_tools/isbn.py\n# Must reinstall: pip install .\n# Then changes are visible\n</span>\n<span class=\"c1\"># With -e (editable install):  \n# Edit library_tools/isbn.py\n# Changes immediately visible!\n# Python imports from source directory\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"Editable installs are essential during development,\" Margaret noted. \"Edit, test, edit, test—no reinstall loop. When ready to release, use regular install to test the actual distribution.\"</p>\n\n<h2>\n  \n  \n  Distribution\n</h2>\n\n<p>Building and uploading to PyPI:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Build distribution files</span>\npython <span class=\"nt\">-m</span> build\n\n<span class=\"c\"># Creates:</span>\n<span class=\"c\"># dist/</span>\n<span class=\"c\">#   library_tools-1.0.0.tar.gz      # Source distribution</span>\n<span class=\"c\">#   library_tools-1.0.0-py3-none-any.whl  # Wheel (binary distribution)</span>\n\n<span class=\"c\"># Upload to PyPI (Python Package Index)</span>\npython <span class=\"nt\">-m</span> twine upload dist/<span class=\"k\">*</span>\n\n<span class=\"c\"># Now anyone can install:</span>\npip <span class=\"nb\">install </span>library-tools\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Namespace Packages: Shared Namespaces\n</h2>\n\n<p>Timothy learned about packages without <code>__init__.py</code>:</p>\n\n<p>The implicit namespace pattern:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Modern Python (3.3+) supports implicit namespace packages\n# company_tools/\n#   database/\n#     connection.py  # No __init__.py in company_tools!\n#   reporting/\n#     pdf.py\n</span>\n<span class=\"c1\"># This allows multiple projects to contribute to the same namespace:\n</span>\n<span class=\"c1\"># Project 1: company-tools-database\n# company_tools/\n#   database/\n</span>\n<span class=\"c1\"># Project 2: company-tools-reporting  \n# company_tools/\n#   reporting/\n</span>\n<span class=\"c1\"># Both installed, users can:\n</span><span class=\"kn\">from</span> <span class=\"n\">company_tools.database</span> <span class=\"kn\">import</span> <span class=\"n\">connection</span>\n<span class=\"kn\">from</span> <span class=\"n\">company_tools.reporting</span> <span class=\"kn\">import</span> <span class=\"n\">pdf</span>\n</code></pre>\n\n</div>\n\n\n\n<p>\"Namespace packages let multiple distributions share a namespace,\" Margaret explained. \"Useful for plugin architectures and large organizations with many packages.\"</p>\n\n<h2>\n  \n  \n  Entry Points: Command-Line Scripts\n</h2>\n\n<p>She showed him how to make CLI tools:</p>\n\n<p>Declaring console scripts in pyproject.toml:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight toml\"><code><span class=\"c\"># pyproject.toml</span>\n\n<span class=\"nn\">[project.scripts]</span>\n<span class=\"py\">format-isbn</span> <span class=\"p\">=</span> <span class=\"s\">\"library_tools.cli:format_isbn_command\"</span>\n<span class=\"py\">validate-book</span> <span class=\"p\">=</span> <span class=\"s\">\"library_tools.cli:validate_command\"</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The implementation in Python:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># library_tools/cli.py\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">format_isbn_command</span><span class=\"p\">():</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Entry point for command-line usage</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"kn\">import</span> <span class=\"n\">sys</span>\n    <span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Usage: format-isbn &lt;isbn&gt;</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"nf\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"kn\">from</span> <span class=\"n\">library_tools.isbn</span> <span class=\"kn\">import</span> <span class=\"n\">format_isbn</span>\n    <span class=\"n\">isbn</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">format_isbn</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">validate_command</span><span class=\"p\">():</span>\n    <span class=\"kn\">import</span> <span class=\"n\">sys</span>\n    <span class=\"kn\">from</span> <span class=\"n\">library_tools.isbn</span> <span class=\"kn\">import</span> <span class=\"n\">validate_isbn</span>\n\n    <span class=\"n\">isbn</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"sh\">\"\"</span>\n    <span class=\"k\">if</span> <span class=\"nf\">validate_isbn</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">✓ Valid ISBN: </span><span class=\"si\">{</span><span class=\"n\">isbn</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">✗ Invalid ISBN: </span><span class=\"si\">{</span><span class=\"n\">isbn</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"nf\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>\"After installing, these become shell commands,\" Margaret noted:</p>\n\n<p>Using the installed CLI tools:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nv\">$ </span>pip <span class=\"nb\">install </span>library-tools\n<span class=\"nv\">$ </span>format-isbn 978-0-441-01359-3\n9780441013593\n\n<span class=\"nv\">$ </span>validate-book 978-0-441-01359-3\n✓ Valid ISBN: 978-0-441-01359-3\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Best Practices: Package Structure\n</h2>\n\n<p>Margaret shared production patterns:</p>\n\n<p>The recommended layout:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Recommended structure:\n# my-project/\n#   README.md              # Documentation\n#   LICENSE                # License file\n#   pyproject.toml         # Package metadata\n#   .gitignore            # Ignore __pycache__, *.pyc, etc.\n#   src/\n#     my_package/         # Source code in src/ directory\n#       __init__.py\n#       core.py\n#       utils.py\n#   tests/                # Tests outside package\n#     __init__.py\n#     test_core.py\n#     test_utils.py\n#   docs/                 # Documentation\n#     api.md\n#     guide.md\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"Keep tests separate from package code,\" she advised. \"Use <code>src/</code> layout to prevent import confusion during development.\"</p>\n\n<h2>\n  \n  \n  Why src/ Layout?\n</h2>\n\n<p>Timothy asked why the extra directory. Margaret showed him the problem:</p>\n\n<p>Without src/ layout - the problem:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># WITHOUT src/ layout:\n# my-project/\n#   my_package/\n#     __init__.py\n#     core.py\n#   tests/\n#     test_core.py\n#   pyproject.toml\n</span>\n<span class=\"c1\"># During development, running tests:\n</span><span class=\"err\">$</span> <span class=\"n\">python</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">pytest</span> <span class=\"n\">tests</span><span class=\"o\">/</span>\n\n<span class=\"c1\"># Python's import search finds:\n# 1. Current directory (my-project/)\n# 2. Finds my_package/ folder\n# 3. Imports from SOURCE directory (not installed package!)\n</span>\n<span class=\"c1\"># Problem: Tests run against uninstalled code\n# Packaging bugs go undetected until users install!\n</span></code></pre>\n\n</div>\n\n\n\n<p>With src/ layout - the solution:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># WITH src/ layout:\n# my-project/\n#   src/\n#     my_package/\n#       __init__.py\n#   tests/\n#   pyproject.toml\n</span>\n<span class=\"c1\"># During development, running tests:\n</span><span class=\"err\">$</span> <span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"o\">-</span><span class=\"n\">e</span> <span class=\"p\">.</span>  <span class=\"c1\"># Must install first\n</span><span class=\"err\">$</span> <span class=\"n\">python</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">pytest</span> <span class=\"n\">tests</span><span class=\"o\">/</span>\n\n<span class=\"c1\"># Python's import search:\n# 1. Current directory (my-project/) - doesn't find my_package\n# 2. Finds INSTALLED package in site-packages\n# 3. Tests run against installed package!\n</span>\n<span class=\"c1\"># Benefit: Catches packaging issues immediately\n# If import works in tests, it works for users\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"The <code>src/</code> layout forces you to test the installed package,\" Margaret explained. \"Without it, imports might work for you but fail for users. With it, what you test is what ships.\"</p>\n\n<h2>\n  \n  \n  Version Management\n</h2>\n\n<p>Semantic versioning in practice:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># library_tools/__init__.py\n</span>\n<span class=\"n\">__version__</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">1.0.0</span><span class=\"sh\">\"</span>\n\n<span class=\"c1\"># Use semantic versioning:\n# MAJOR.MINOR.PATCH\n# 1.0.0 - Initial release\n# 1.0.1 - Bug fix (backwards compatible)\n# 1.1.0 - New feature (backwards compatible)\n# 2.0.0 - Breaking change (not backwards compatible)\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  API Design\n</h2>\n\n<p>Good vs bad package APIs:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Good package API - clear and minimal\n</span><span class=\"kn\">from</span> <span class=\"n\">library_tools</span> <span class=\"kn\">import</span> <span class=\"n\">format_isbn</span><span class=\"p\">,</span> <span class=\"n\">validate_isbn</span><span class=\"p\">,</span> <span class=\"n\">Book</span>\n\n<span class=\"c1\"># Bad package API - everything exposed\n</span><span class=\"kn\">from</span> <span class=\"n\">library_tools</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">format_isbn</span><span class=\"p\">,</span> <span class=\"n\">validate_isbn</span><span class=\"p\">,</span> <span class=\"n\">_clean_isbn</span><span class=\"p\">,</span> <span class=\"n\">_check_length</span><span class=\"p\">,</span>\n    <span class=\"n\">_helper1</span><span class=\"p\">,</span> <span class=\"n\">_helper2</span><span class=\"p\">,</span> <span class=\"n\">_internal_parser</span><span class=\"p\">,</span> <span class=\"n\">_debug_function</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Use __all__ to define public API\n# Use underscore prefix for private functions\n# Use __init__.py to expose convenient imports\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  The Takeaway\n</h2>\n\n<p>Timothy stood in the Package Architecture, where scattered scripts became organized software.</p>\n\n<p><strong>Packages are directories with <strong>init</strong>.py</strong>: The marker file makes directories importable.</p>\n\n<p><strong>Modules vs packages</strong>: Modules are single .py files; packages are directories organizing multiple modules.</p>\n\n<p><strong><strong>init</strong>.py controls the package interface</strong>: Import key items to make them easily accessible.</p>\n\n<p><strong>Imports are cached in sys.modules</strong>: First import executes code, subsequent imports use cached version.</p>\n\n<p><strong>sys.path determines import search</strong>: Current directory, standard library, site-packages, in that order.</p>\n\n<p><strong><strong>pycache</strong> stores compiled bytecode</strong>: Speeds up subsequent imports; should be in .gitignore.</p>\n\n<p><strong><strong>all</strong> defines the public API</strong>: Controls what <code>import *</code> imports, signals intent to users.</p>\n\n<p><strong>Absolute imports are clearer</strong>: Use full package paths for transparency.</p>\n\n<p><strong>Relative imports work within packages</strong>: Convenient for tightly coupled code, but require <code>-m</code> flag to run.</p>\n\n<p><strong>The -m flag runs code as a module</strong>: Enables relative imports by providing package context.</p>\n\n<p><strong>Subpackages organize complexity</strong>: Each subdirectory with <code>__init__.py</code> creates a namespace.</p>\n\n<p><strong>src/ layout prevents import confusion</strong>: Forces testing against installed package, catches packaging bugs early.</p>\n\n<p><strong>pyproject.toml makes packages installable</strong>: Modern standard for package metadata and dependencies.</p>\n\n<p><strong>pip install -e . for development</strong>: Editable install links to source—changes visible immediately without reinstall.</p>\n\n<p><strong>Entry points create CLI commands</strong>: Turn Python functions into shell commands.</p>\n\n<p><strong><strong>version</strong> tracks releases</strong>: Use semantic versioning for clear compatibility signals.</p>\n\n<p><strong>Private functions use underscores</strong>: Convention signals internal use, but doesn't prevent import.</p>\n\n<p><strong>Circular imports are design smells</strong>: When modules import each other, restructure or use import-time tricks.</p>\n\n<p><strong>Tests live outside the package</strong>: Keep test code separate from production code.</p>\n\n<p><strong>README.md documents usage</strong>: First thing users see, should show install and basic examples.</p>\n\n<p><strong>Namespace packages share names</strong>: Allow multiple distributions to contribute to one namespace.</p>\n\n\n\n\n<h2>\n  \n  \n  The Python Package Architecture\n</h2>\n\n<p>Timothy had discovered how to transform his collection of useful functions into professional, reusable packages.</p>\n\n<p>The Package Architecture revealed that good code isn't just correct—it's organized, discoverable, and shareable.</p>\n\n<p>He learned that <code>__init__.py</code> serves as both a marker and a gateway, that import paths reflect structure, that Python caches imports for performance, that <code>__all__</code> declares intent, and that <code>pyproject.toml</code> bridges the gap between code and distribution.</p>\n\n<p>Also, he understood the mechanics of Python's import system—how sys.path determines search order, how sys.modules caches loaded code, and how the <code>-m</code> flag provides package context for relative imports.</p>\n\n<p>Most importantly, he understood that packaging isn't an afterthought but a fundamental skill—the difference between writing scripts for yourself and creating software for the world.</p>\n\n\n\n\n<p><em>Aaron Rose is a software engineer and technology writer at <a href=\"https://www.tech-reader.blog\" rel=\"noopener noreferrer\">tech-reader.blog</a> and the author of <a href=\"https://amazon.com/author/aaron.rose\" rel=\"noopener noreferrer\">Think Like a Genius</a>.</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 17 of My AI & Data Mastery Journey: From Python to Generative AI","url":"https://dev.to/nitinbhatt46/day-17-of-my-ai-data-mastery-journey-from-python-to-generative-ai-gkd","date":1761626626,"author":"Nitin-bhatt46","guid":318964,"unread":true,"content":"<p><strong>Project Brief: Company Payment System</strong></p>\n\n<p>Scenario (Real-world + Critical Thinking):<br>\nYou are building a system for a company to manage employees and process payments. Employees can be regular employees or managers.<br>\nPayments can be made via CreditCard, UPI, or Cash.<br>\nWe need to track salary, bonuses, and ensure encapsulation for salary so no one can directly modify it.</p>\n\n<p><strong>Step 1: Classes to Create</strong></p>\n\n<p>Employee (Base class)</p>\n\n<p>Attributes: name (str), __salary (private, int)</p>\n\n<p>Methods:</p>\n\n<p>get_salary() → return salary</p>\n\n<p>set_salary(amount) → add bonus to salary</p>\n\n<p>display() → print employee info</p>\n\n<p>Manager (Subclass of Employee)</p>\n\n<p>Attribute: department</p>\n\n<p>Method: display() → override to include department</p>\n\n<p>Payment Methods (Polymorphism)</p>\n\n<p>Classes: CreditCard, UPI, Cash</p>\n\n<p>Method: pay(amount) → print message like \"Paid ₹amount using CreditCard\"</p>\n\n<p><strong>Step 2: Tasks for Creation</strong></p>\n\n<p>Create 2 employees (1 regular, 1 manager).</p>\n\n<p>Give them salary and bonus using encapsulation methods.</p>\n\n<p>Process a payment for each using all 3 payment methods.</p>\n\n<p>Print final salaries and payment confirmations.</p>\n\n<p><strong>_Debug Task _</strong></p>\n\n<p>Here’s a buggy code snippet related to salary handling. Your job: fix it without changing the logic, just correct errors:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>class Employee:\n    def __init__(self, name, salary):\n        name = name\n        __salary = salary  # Problem here\n\n    def get_salary(self):\n        return __salary  # Problem here\n\n    def set_salary(self, amount):\n        __salary += amount  # Problem here\n</code></pre>\n\n</div>\n\n\n\n<p>Inputs:</p>\n\n<p>Employee name: \"Alice\"</p>\n\n<p>Salary: 50000</p>\n\n<p>Bonus: 5000</p>\n\n<p>Task:</p>\n\n<p>Debug this code so you can properly get and set salary.</p>\n\n<p>Hint: Think self and private attributes.</p>\n\n<p>✅ Your Goal Today</p>\n\n<p>Creation Task: Build full project with Employee, Manager, and Payment classes, and run payments.</p>\n\n<p>Debug Task: Fix the salary handling snippet above.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Why You Should Care About Async Context Managers and Iterators","url":"https://dev.to/imsushant12/why-you-should-care-about-async-context-managers-and-iterators-1na","date":1761625800,"author":"Sushant Gaurav","guid":318963,"unread":true,"content":"<h2>\n  \n  \n  Async Context Managers (<code>async with</code>) and Async Iterators (<code>async for</code>)\n</h2>\n\n<p>A context manager in Python is a special object that manages the setup and cleanup of resources automatically when the <code>with</code> statement is used. It ensures that resources like files, network connections, or locks are properly acquired and released, even if an error occurs during use.</p>\n\n<p>A context manager defines two methods:</p>\n\n<ul>\n<li>\n<code>__enter__()</code>: It runs when entering the <code>with</code> block. It is typically used to set up the resource.</li>\n<li>\n<code>__exit__(exc_type, exc_val, exc_tb)</code>: It runs when leaving the with block. It usually handles cleanup, like closing files or releasing locks.</li>\n</ul>\n\n<h3>\n  \n  \n  Asynchronous Context Managers (<code>async with</code>)\n</h3>\n\n<p>It is like a regular context manager but supports asynchronous setup and teardown. It is ideal for managing resources in async code (like connections, files, locks).</p>\n\n<ul>\n<li>It implements two special coroutine methods:\n\n<ul>\n<li>\n<code>__aenter__()</code> — awaited when entering the context</li>\n<li>\n<code>__aexit__()</code> — awaited when exiting the context, even if exceptions occur</li>\n</ul>\n\n\n</li>\n\n</ul>\n\n<p><strong>Example</strong>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"k\">class</span> <span class=\"nc\">AsyncContextManager</span><span class=\"p\">:</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">__aenter__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Entering async context</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"c1\"># for example, open an async connection\n</span>        <span class=\"k\">return</span> <span class=\"n\">self</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">__aexit__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">exc_type</span><span class=\"p\">,</span> <span class=\"n\">exc_val</span><span class=\"p\">,</span> <span class=\"n\">exc_tb</span><span class=\"p\">):</span>\n        <span class=\"c1\"># for example, clean up async connection\n</span>        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Exiting async context</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"nc\">AsyncContextManager</span><span class=\"p\">():</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Inside async context</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Output</strong>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Entering async context\nInside async context\nExiting async context\n</code></pre>\n\n</div>\n\n\n\n<blockquote>\n<p><strong>Note</strong>: <code>async with</code> <em>automatically awaits</em> <code>__aenter__</code> and <code>__aexit__</code> coroutines.</p>\n</blockquote>\n\n<h2>\n  \n  \n  Asynchronous Iterators (<code>async for</code>)\n</h2>\n\n<p>It is an object from which can be <code>async for</code> to receive values asynchronously.</p>\n\n<ul>\n<li>It must implement:\n\n<ul>\n<li>\n<code>__aiter__()</code> for returning the async iterator object (usually self)</li>\n<li>\n<code>__anext__()</code> for returning an awaitable that produces the next item or raises <code>StopAsyncIteration</code>\n</li>\n</ul>\n\n\n</li>\n\n</ul>\n\n<p>It is useful in cases where there is a need to iterate over asynchronous streams of data — for example, reading from async sockets, files, or APIs streaming data. It allows handling each item as it arrives without blocking the event loop.</p>\n\n<p><strong>Example</strong>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AsyncCounter</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nb\">max</span> <span class=\"o\">=</span> <span class=\"nb\">max</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__aiter__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">__anext__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current</span> <span class=\"o\">&gt;=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nb\">max</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"nb\">StopAsyncIteration</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>  <span class=\"c1\"># simulate async wait\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"nc\">AsyncCounter</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Got number: </span><span class=\"si\">{</span><span class=\"n\">number</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Output</strong>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Got number: 1\nGot number: 2\nGot number: 3\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Integrating <code>asyncio</code> with External Libraries\n</h2>\n\n<p>When working with real-world async programs, there is a need to interact with external resources like HTTP APIs or databases. Libraries such as <code>aiohttp</code> (for HTTP) and <code>aiomysql</code> (for MySQL) wrap these services so they work seamlessly with Python's <code>asyncio</code> event loop.</p>\n\n<h3>\n  \n  \n  Asynchronous HTTP with <code>aiohttp</code>\n</h3>\n\n<p><code>aiohttp</code> allows sending HTTP requests using async/await. It allows working with many URLs at once.</p>\n\n<p><strong>Example</strong>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"n\">aiohttp</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">fetch_url</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">session</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">text</span><span class=\"p\">()</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"sh\">'</span><span class=\"s\">https://example.com</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">https://httpbin.org/get</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n        <span class=\"sh\">'</span><span class=\"s\">https://python.org</span><span class=\"sh\">'</span>\n    <span class=\"p\">]</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">aiohttp</span><span class=\"p\">.</span><span class=\"nc\">ClientSession</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n        <span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nf\">fetch_url</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">url</span> <span class=\"ow\">in</span> <span class=\"n\">urls</span><span class=\"p\">]</span>\n        <span class=\"n\">pages</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">gather</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">tasks</span><span class=\"p\">)</span>  <span class=\"c1\"># Fetch all pages concurrently\n</span>        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">html</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">pages</span><span class=\"p\">):</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Page </span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s\"> length: </span><span class=\"si\">{</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Here,</p>\n\n<ul>\n<li>The <code>ClientSession</code> manages connections efficiently.</li>\n<li>Each call to <code>fetch_url</code> is a coroutine, run concurrently.</li>\n</ul>\n\n<h3>\n  \n  \n  Asynchronous Databases with <code>aiomysql</code>\n</h3>\n\n<p><code>aiomysql</code> is an async driver for MySQL databases. It is built for asyncio.</p>\n\n<p><strong>Example</strong>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"n\">aiomysql</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_data</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">pool</span><span class=\"p\">.</span><span class=\"nf\">acquire</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">connection</span><span class=\"p\">:</span>\n        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"nf\">cursor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n            <span class=\"k\">await</span> <span class=\"n\">cursor</span><span class=\"p\">.</span><span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">SELECT some_column FROM some_table;</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">cursor</span><span class=\"p\">.</span><span class=\"nf\">fetchall</span><span class=\"p\">())</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">aiomysql</span><span class=\"p\">.</span><span class=\"nf\">create_pool</span><span class=\"p\">(</span>\n        <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">127.0.0.1</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">3306</span><span class=\"p\">,</span>\n        <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">root</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">pass</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">testdb</span><span class=\"sh\">'</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nf\">get_data</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)]</span>  <span class=\"c1\"># Launch 10 queries concurrently\n</span>    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">gather</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">tasks</span><span class=\"p\">)</span>\n    <span class=\"n\">pool</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">pool</span><span class=\"p\">.</span><span class=\"nf\">wait_closed</span><span class=\"p\">()</span>\n\n<span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Here,</p>\n\n<ul>\n<li>Each <code>get_data</code> coroutine performs its own database query. They all run in parallel inside the event loop.</li>\n<li>Connection pooling via <code>aiomysql.create_pool</code> is recommended for efficiency.</li>\n</ul>\n\n<h3>\n  \n  \n  Integrating with Web Frameworks\n</h3>\n\n<p>Many frameworks now support async views. For example:</p>\n\n<ul>\n<li>\n<p><strong>Django</strong>: It supports async views since version 3.1.<br>\n</p>\n<pre class=\"highlight python\"><code><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">async_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nc\">JsonResponse</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">message</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">Hello, Async Django!</span><span class=\"sh\">'</span><span class=\"p\">})</span>\n</code></pre>\n\n</li>\n<li>\n<p><strong>Quart</strong>: Flask-inspired, built for async:<br>\n</p>\n<pre class=\"highlight python\"><code><span class=\"nd\">@app.route</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">/</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"sh\">'</span><span class=\"s\">Hello, Quart!</span><span class=\"sh\">'</span>\n</code></pre>\n\n</li>\n</ul>\n\n<h2>\n  \n  \n  What Changed in Python 3.11+ for <code>asyncio</code>\n</h2>\n\n<p>Python 3.11 brought several improvements and new features to the <code>asyncio</code> module:</p>\n\n<ul>\n<li>\n<strong>Task Groups</strong>:\n\n<ul>\n<li>Introduced <code>asyncio.TaskGroup</code> for easier and safer management of concurrent tasks.</li>\n<li>Task groups allow launching and monitoring multiple async tasks in a block. If any task fails, exceptions are grouped and managed together.</li>\n</ul>\n\n\n</li>\n\n<li>\n\n<strong>Exception Groups</strong>:\n\n<ul>\n<li>New <code>ExceptionGroup</code> type handles multiple exceptions for concurrent async code. It is useful when several tasks are done at once.</li>\n</ul>\n\n\n</li>\n\n<li>\n\n<strong>Improved Tracebacks and Speed</strong>:\n\n<ul>\n<li>Error messages and tracebacks in async code are clearer and provide better context.</li>\n<li>Python 3.11 is measurably faster than previous releases.</li>\n</ul>\n\n\n</li>\n\n<li>\n\n<strong>Breaking Changes</strong>:\n\n<ul>\n<li>Legacy features removed. For instance, generator-based coroutines via <code>asyncio.coroutine</code> are now fully deprecated and removed. <code>async def</code> should always be used.</li>\n<li>Some APIs (like <code>asyncio.start_server</code>) return different objects, so always review the documentation if upgrading projects.</li>\n</ul>\n\n\n</li>\n\n<li>\n\n<strong>Other Improvements</strong>:\n\n<ul>\n<li>New or improved timeout handling (<code>asyncio.timeout</code>), better audit events, TLS support in streams, and more.</li>\n</ul>\n\n\n</li>\n\n</ul>\n\n<h2>\n  \n  \n  <code>await</code> vs. <code>asyncio.run()</code> — Key Differences\n</h2>\n\n<h3>\n  \n  \n  <code>asyncio.run()</code>\n</h3>\n\n<ul>\n<li>\n<strong>Purpose</strong>: It is used to start the event loop and run a top-level async function (coroutine) from regular (sync) code.</li>\n<li>\n<strong>Where Used</strong>: Only at the very top level, i.e. outside any <code>async def</code> functions.</li>\n<li>\n<strong>Behaviour</strong>: It initialises the async event loop, executes the coroutine until it is complete, then shuts down the loop. It can only be called once per program, typically.</li>\n</ul>\n\n<p><strong>Example</strong>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"bp\">...</span>\n<span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>  <span class=\"c1\"># entry point from normal script\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  <code>await</code> keyword\n</h3>\n\n<ul>\n<li>\n<strong>Purpose</strong>: It suspends (pauses) an async function until the \"awaitable\" finishes. It lets other tasks run while waiting.</li>\n<li>\n<strong>Where Used</strong>: It is only used inside an <code>async def</code> function. <code>await</code> cannot be directly used in regular, non-async code.</li>\n<li>\n<strong>Behaviour</strong>: It waits for the result of an \"awaitable\" (another coroutine, a Task, or a Future). The event loop continues running other scheduled tasks meanwhile.</li>\n</ul>\n\n<p><strong>Example</strong>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">fun</span><span class=\"p\">():</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">done sleeping</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<p>Thanks for reading!</p>\n\n<p>We have covered a lot in this article and our article series. In the upcoming article, we will go deeper into asyncio's Interview Questions and practice some of its commonly asked and used Problems.</p>\n\n<p>Stay tuned to unlock the full power of Python’s asynchronous programming!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Introducing kerliix-oauth: A Node.js & Python Kerliix OAuth Library","url":"https://dev.to/kerliix/introducing-kerliix-oauth-a-nodejs-python-kerliix-oauth-library-h07","date":1761624884,"author":"kerliix Corporation","guid":318962,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fimg.shields.io%2Fbadge%2Fkerliix--oauth-v1.0.3-blue\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fimg.shields.io%2Fbadge%2Fkerliix--oauth-v1.0.3-blue\" alt=\"Kerliix OAuth\" width=\"124\" height=\"20\"></a></p>\n\n<p>OAuth 2.0 is the industry standard for authorization, but implementing it can be tricky, especially when dealing with PKCE, token refresh, and revocation. That's why I built <a href=\"https://github.com/kerliix-corp/kerliix-oauth\" rel=\"noopener noreferrer\"><code>kerliix-oauth</code></a> – a lightweight, TypeScript-friendly SDK that makes OAuth integration simple for building a public or confidential client.  </p>\n\n<p>In this article, I’ll walk you through why <code>kerliix-oauth</code> exists, its features, and how to get started quickly.</p>\n\n\n\n\n<h2>\n  \n  \n  Why kerliix-oauth?\n</h2>\n\n<p>Many OAuth libraries require you to configure multiple environment variables and endpoints. <code>kerliix-oauth</code> reduces boilerplate by:  </p>\n\n<ul>\n<li>\n<strong>Default OAuth server URL</strong> – no need to specify <code>OAUTH_SERVER_URL</code> in development. Defaults to <code>https://api.kerliix.com</code>.\n</li>\n<li>\n<strong>Built-in PKCE support</strong> – secure your public clients with minimal effort.\n</li>\n<li>\n<strong>Automatic token caching</strong> – refresh tokens seamlessly without repeated requests.\n</li>\n<li>\n<strong>Easy user info retrieval and token revocation</strong> – one SDK for all OAuth needs.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  Installing\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>npm <span class=\"nb\">install </span>kerliix-oauth\n<span class=\"c\"># or</span>\nyarn add kerliix-oauth\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Quick Start\n</h2>\n\n<p>Step 1: Initialize the client<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"nx\">KerliixOAuth</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">kerliix-oauth</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">oauthClient</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">KerliixOAuth</span><span class=\"p\">({</span>\n  <span class=\"na\">clientId</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">YOUR_CLIENT_ID</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">clientSecret</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">YOUR_CLIENT_SECRET</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"c1\">// optional for public clients</span>\n  <span class=\"na\">redirectUri</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">http://localhost:3000/callback</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Step 2: Generate an Authorization URL<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">codeVerifier</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">oauthClient</span><span class=\"p\">.</span><span class=\"nf\">getAuthUrl</span><span class=\"p\">(</span>\n  <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">openid</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">profile</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">email</span><span class=\"dl\">\"</span><span class=\"p\">],</span> \n  <span class=\"dl\">\"</span><span class=\"s2\">myState</span><span class=\"dl\">\"</span><span class=\"p\">,</span> \n  <span class=\"kc\">true</span> <span class=\"c1\">// enable PKCE</span>\n<span class=\"p\">);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Open this URL in your browser:</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">url</span><span class=\"p\">);</span>\n</code></pre>\n\n</div>\n\n\n\n<p>If you enable PKCE (true as the last argument), the SDK automatically generates a secure codeVerifier and codeChallenge.</p>\n\n<p>Step 3: Exchange code for tokens<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">const</span> <span class=\"nx\">tokenResponse</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">oauthClient</span><span class=\"p\">.</span><span class=\"nf\">exchangeCodeForToken</span><span class=\"p\">(</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">AUTH_CODE_FROM_CALLBACK</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"nx\">codeVerifier</span>\n<span class=\"p\">);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Access Token:</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">tokenResponse</span><span class=\"p\">.</span><span class=\"nx\">access_token</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Refresh Token:</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">tokenResponse</span><span class=\"p\">.</span><span class=\"nx\">refresh_token</span><span class=\"p\">);</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Tokens are automatically cached, so subsequent calls can use them without extra configuration.</p>\n\n<p>Step 4: Get user info<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">const</span> <span class=\"nx\">userInfo</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">oauthClient</span><span class=\"p\">.</span><span class=\"nf\">getUserInfo</span><span class=\"p\">();</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">User info:</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">userInfo</span><span class=\"p\">);</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The SDK will refresh the token if needed before fetching user info.</p>\n\n<p>Step 5: Revoke a token<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">await</span> <span class=\"nx\">oauthClient</span><span class=\"p\">.</span><span class=\"nf\">revokeToken</span><span class=\"p\">(</span><span class=\"nx\">tokenResponse</span><span class=\"p\">.</span><span class=\"nx\">access_token</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Token revoked successfully</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Features Recap\n</h2>\n\n<p>PKCE support – out-of-the-box code challenge generation</p>\n\n<p>Token caching &amp; refresh – automatic and optional</p>\n\n<p>User info fetch – handles missing or expired tokens</p>\n\n<p>Token revocation – simple method call</p>\n\n<p>Default OAuth server – no environment setup required for dev</p>\n\n\n\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>With kerliix-oauth, integrating OAuth 2.0 into your Node.js apps becomes a breeze. Whether you’re building internal tools or public-facing apps, this SDK handles the heavy lifting so you can focus on your app’s features.</p>\n\n<p>Check out the GitHub repo<br>\n and start integrating OAuth in minutes!</p>\n\n<blockquote>\n<p>✨ Happy coding!</p>\n</blockquote>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-5ebf","date":1761624472,"author":"Vibe YouTube","guid":318961,"unread":true,"content":"<p>In this snappy 10-minute walkthrough, Tech With Tim shows you how to whip up a Python AI agent from scratch. You’ll grab your OpenAI API key, install dependencies, import the right modules and tools, then tie it all together with a simple LLM-backed agent and driver code.</p>\n\n<p>Timestamps keep you on track—from setup and tool creation to testing—and every line of code lives in a handy GitHub repo. Bonus perks include free trials of Notion and PyCharm Pro, plus an invite to Tim’s DevLaunch mentorship if you’re serious about leveling up.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=gaGaPpnexxA\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"#5 The basic syntax of Python","url":"https://dev.to/koichi_yoshikawa_dbd33319/5-the-basic-syntax-of-python-21b5","date":1761615497,"author":"Koichi Yoshikawa","guid":318952,"unread":true,"content":"<p>Today, I reviewed the basic syntax of Python.</p>\n\n<p>It’s been about five years since I last worked with Python, so I had forgotten most of it.<br>\nI practiced fundamental operations such as data types (numbers and strings), arithmetic calculations, and conditional statements while chatting with ChatGPT.</p>\n\n<p>I’m going to keep learning a little bit every day.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Unlocking Scalability: A Deep Dive into the Model-View-Controller (MVC) Pattern","url":"https://dev.to/brunoenr/unlocking-scalability-a-deep-dive-into-the-model-view-controller-mvc-pattern-342h","date":1761615315,"author":"Bruno Enrique ANCCO SUAÑA","guid":317097,"unread":true,"content":"<p>Here is an article about the Model-View-Controller pattern, complete with a real-world example in Python using the Flask framework.</p>\n\n<p>Unlocking Scalability: A Deep Dive into the Model-View-Controller (MVC) Pattern<br>\nIn the world of software engineering, especially within enterprise-level applications, complexity is the main enemy. As applications grow, adding new features, fixing bugs, and managing the codebase can become a nightmare. To combat this, architects rely on proven design patterns. These patterns are reusable solutions to common problems.</p>\n\n<p>One of the most foundational patterns, featured prominently in catalogs like Martin Fowler's \"Patterns of Enterprise Application Architecture,\" is the Model-View-Controller (MVC). While it originated in Smalltalk-80 for desktop applications, its principles are fundamental to how most modern web applications are built today.</p>\n\n<p>This article explores the MVC pattern: what it is, why it's crucial for enterprise applications, and how to implement it with a practical, real-world example in Python.</p>\n\n<h2>\n  \n  \n  🔍What is the Model-View-Controller (MVC) Pattern?\n</h2>\n\n<p>The MVC pattern is an architectural pattern that separates an application's logic into three distinct, interconnected components. The primary goal is Separation of Concerns. By keeping these parts separate, the application becomes easier to test, maintain, and scale.</p>\n\n<p>Here’s a breakdown of the three components:</p>\n\n<ol>\n<li>The Model: This is the brain of the application. It represents the data, business logic, and rules.</li>\n</ol>\n\n<ul>\n<li>It manages the application's state (e.g., data from a database).</li>\n<li>It contains the business logic (e.g., \"a user cannot withdraw more money than they have\").</li>\n<li>It knows nothing about the View or the Controller. It is a standalone component.</li>\n</ul>\n\n<ol>\n<li>The View: This is the face of the application. It's the User Interface (UI) that the end-user interacts with.</li>\n</ol>\n\n<ul>\n<li>It displays the data it receives from the Model.</li>\n<li>It sends user actions (like button clicks or form submissions) to the Controller.</li>\n<li>It should be \"dumb\"—it contains no business logic. Its only job is presentation.</li>\n</ul>\n\n<ol>\n<li>The Controller: This is the traffic cop or intermediary. It glues the Model and the View together.</li>\n</ol>\n\n<ul>\n<li>It receives input from the View (e.g., an HTTP request from a user).</li>\n<li>It processes that input, interacts with the Model (e.g., \"Hey Model, add this new user to the database\"), and gets a response.</li>\n<li>It then decides which View to show the user and passes it the necessary data from the Model.</li>\n</ul>\n\n<h2>\n  \n  \n  🔍Why MVC is Essential for Enterprise Applications\n</h2>\n\n<p>The separation provided by MVC isn't just an academic exercise; it provides tangible business value:</p>\n\n<ul>\n<li><p>Testability: Because the Model (business logic) is separate from the UI, you can write automated tests for your core logic without ever needing to render a webpage or simulate a click. This makes testing more robust and faster.</p></li>\n<li><p>Maintainability: Need to change a button color or redesign a page? You only touch the View. The core business logic in the Model remains untouched and safe.</p></li>\n<li><p>Flexibility: The same Model can serve multiple Views. You can have a web interface (View 1) and a mobile app (View 2) that both talk to the same Controller and Model. This \"write once, use many\" approach is incredibly efficient.</p></li>\n</ul>\n\n<h2>\n  \n  \n  💻Real-World Example: A Python To-Do List with Flask\n</h2>\n\n<p>Let's build a simple \"To-Do List\" web application. We'll use Python and the micro-framework Flask. While some frameworks like Django call their pattern MVT (Model-View-Template), the principle is identical. We will structure our code to clearly separate the three concerns.</p>\n\n<ul>\n<li>Project Structure\nCreate a folder for your project. Inside, it should look like this:\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>mvc-todo-app/\n├── app.py           # The Controller\n├── model.py         # The Model\n└── templates/\n    └── index.html   # The View\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>The Model (model.py)\nThis file contains our data and business logic. For simplicity, we won't use a real database; we'll use a simple list in memory. This file does not import Flask. It's pure Python.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code># model.py\n\n# We'll use a simple list to act as our \"database\"\ntasks = []\ntask_id_counter = 1\n\nclass TaskModel:\n    \"\"\"\n    The Model component. It handles the data and business logic\n    for our tasks. It knows nothing about HTTP or the web.\n    \"\"\"\n\n    def get_all_tasks(self):\n        \"\"\"Retrieves all tasks.\"\"\"\n        return tasks\n\n    def add_task(self, description):\n        \"\"\"Adds a new task to our list.\"\"\"\n        global task_id_counter\n        if not description:\n            # Business logic: Don't allow empty tasks\n            return None\n\n        new_task = {\n            'id': task_id_counter,\n            'description': description,\n            'completed': False\n        }\n        tasks.append(new_task)\n        task_id_counter += 1\n        return new_task\n\n    def complete_task(self, task_id):\n        \"\"\"Marks a specific task as completed.\"\"\"\n        for task in tasks:\n            if task['id'] == task_id:\n                task['completed'] = True\n                return task\n        return None # Task not found\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>The View (templates/index.html)\nThis is our UI. It's an HTML file that uses the Jinja2 templating engine (which comes with Flask).\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;MVC To-Do List&lt;/title&gt;\n    &lt;style&gt;\n        body { font-family: sans-serif; margin: 2em; }\n        .task-list { list-style: none; padding: 0; }\n        .task { margin-bottom: 8px; }\n        .completed { text-decoration: line-through; color: #888; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;My To-Do List&lt;/h1&gt;\n\n    &lt;form action=\"/add\" method=\"POST\"&gt;\n        &lt;label for=\"task\"&gt;New Task:&lt;/label&gt;\n        &lt;input type=\"text\" id=\"task\" name=\"description\"&gt;\n        &lt;button type=\"submit\"&gt;Add Task&lt;/button&gt;\n    &lt;/form&gt;\n\n    &lt;hr&gt;\n\n    &lt;h2&gt;Current Tasks&lt;/h2&gt;\n    &lt;ul class=\"task-list\"&gt;\n        {% for task in tasks %}\n            &lt;li class=\"task {% if task.completed %}completed{% endif %}\"&gt;\n                {{ task.description }}\n\n                {% if not task.completed %}\n                    ( &lt;a href=\"/complete/{{ task.id }}\"&gt;Complete&lt;/a&gt; )\n                {% endif %}\n            &lt;/li&gt;\n        {% else %}\n            &lt;li&gt;No tasks yet!&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>The Controller (app.py)\nThis is the \"glue.\" It imports Flask and our TaskModel. It defines the URL routes that listen for user input from the View, processes that input using the Model, and then renders the View with the new data.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>from flask import Flask, render_template, request, redirect, url_for\nfrom model import TaskModel # Import the Model\n\napp = Flask(__name__)\nmodel = TaskModel()\n\n@app.route('/')\ndef index():\n    \"\"\"\n    Handles the main route.\n    1. Gets all tasks from the Model.\n    2. Renders the View, passing the tasks to it.\n    \"\"\"\n    tasks = model.get_all_tasks()\n    return render_template('index.html', tasks=tasks)\n\n@app.route('/add', methods=['POST'])\ndef add_task():\n    \"\"\"\n    Handles the 'Add Task' form submission.\n    1. Gets form data from the user request (View).\n    2. Tells the Model to add the new task.\n    3. Redirects the user back to the main page.\n    \"\"\"\n    description = request.form.get('description')\n    model.add_task(description)\n    return redirect(url_for('index'))\n\n@app.route('/complete/&lt;int:task_id&gt;')\ndef complete_task(task_id):\n    \"\"\"\n    Handles the 'Complete' link click.\n    1. Gets the task_id from the URL (View).\n    2. Tells the Model to mark the task as complete.\n    3. Redirects the user back to the main page.\n    \"\"\"\n    model.complete_task(task_id)\n    return redirect(url_for('index'))\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  📦GitHub Repository\n</h2>\n\n<p>A working implementation is available here: <a href=\"https://github.com/Brunoenr02/Model-View-Controller-MVC-Pattern\" rel=\"noopener noreferrer\">Model View Controller</a></p>\n\n<h2>\n  \n  \n  ✅Conclusion\n</h2>\n\n<p>The Model-View-Controller pattern is not just a theory; it's a practical, powerful, and time-tested strategy for building software that lasts. By separating the Model (logic), the View (UI), and the Controller (input handler), you create an application that is a pleasure to test, maintain, and expand.</p>\n\n<p>While modern frameworks have evolved this idea into patterns like MVVM (Model-View-ViewModel) or MVT (Model-View-Template), they all share the same DNA. Understanding MVC is the first and most critical step toward building clean, scalable, and professional enterprise-grade applications.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"PythonClub - A Brazilian collaborative blog about Python: Testando código que chama serviços da AWS","url":"https://pythonclub.com.br/testando-codigo-aws.html","date":1761611400,"author":"","guid":322446,"unread":true,"content":"<p>Eu desenvolvo sistemas que utilizam os serviços da <a href=\"https://aws.amazon.com/pt/\">AWS</a> faz algum tempo, e ao longo desse tempo houve mudanças na forma como escrevo testes de código que fazem chamadas a seus serviços. Esse texto tem como objetivo apresentar algumas abordagens para escrita de testes que utilizei, e discutir o que motivou suas evoluções, destacando características de cada abordagem. Ao final, pretendo apresentar um padrão que acredito ser uma forma bastante prática de escrever testes de código que interage com serviços da AWS, usando uma biblioteca em <a href=\"https://www.python.org/\">Python</a> que desenvolvi implementando esse padrão, mas que também poderia ser adaptado para outros contextos (serviços) e linguagens.</p><p>Antes de iniciar a discussão sobre os testes, quero apresentar um exemplo de código para ser testado. Ele é uma função que deve consumir mensagens enviadas para uma fila <a href=\"https://aws.amazon.com/pt/sqs/\">SQS</a>, realizar um processamento com a informação contida nas mensagens, e enviar o resultado para outra fila SQS.</p><div><pre><code></code></pre></div><p>Esse código é uma função que recebe um objeto para interagir com o serviço SQS () e a URL de duas filas ( e ). Ele busca até 10 mensagens da  (o máximo permitido por chamada), cada mensagem é um <a href=\"https://developer.mozilla.org/pt-BR/docs/Learn_web_development/Core/Scripting/JSON\">JSON</a> que possui um número no campo . Após recuperar esse valor, um processamento é feito (nesse caso multiplicar o valor por ), um novo JSON é gerado e enviado para a . Se tudo isso ocorrer conforme esperado, a mensagem processada é removida da , evitando que ela volte para a fila e eventualmente ser feito uma nova tentativa de processá-la. Esse processo é repetido para cada mensagem recebida.</p><p>Uma forma bastante simples de testar é fazer testes unitários (também chamados de <a href=\"https://pt.wikipedia.org/wiki/Teste_de_unidade\">testes de unidade</a>) e usar <a href=\"https://pt.wikipedia.org/wiki/Objeto_mock\"></a>. Para o código de exemplo é possível criar um objeto que simula () o  passado para a função, e registre as funções chamadas dele. Depois de executar a função a ser testada, basta verificar as chamadas feitas no objeto simulado, e assim validar se a função está se comportando como o esperado.</p><p>Na biblioteca padrão do Python existe o <a href=\"https://docs.python.org/pt-br/3.13/library/unittest.mock.html\"></a>, que facilita a criação de . Bastando definir o que deve ser retornando em cada função (se ela tiver retorno), e depois verificar como suas funções foram chamadas (). Caso espera-se que uma função tenha sido chamada de determinada forma e isso não ocorreu, o teste falhará.</p><p>Segue a baixo um exemplo de teste unitário com  para o código apresentado anteriormente:</p><div><pre><code></code></pre></div><p>Essa abordagem tem algumas vantagens, como: Não precisar configurar e acessar o serviço SQS para rodar os testes, executando tudo localmente; E testa um trecho de código de forma isolada (uma função nesse caso), independente de outras partes do código, como o . Porém esse método também apresenta desvantagens, como: Ao isolar uma parte do código, perde-se a certeza se ele funcionará junto com as demais partes do sistema, uma vez que podem existir diferenças entre uma resposta real e a resposta do  (nesse teste o  possui apenas duas chaves, quando numa resposta verdadeira existiriam várias outras também); Além de ser necessário definir toda vez qual o retorno das funções e validar se elas foram chamadas conforme o esperado; Também é possível fazer um  que aceite uma chamada inválida para o serviço real; E como a mensagem enviada é uma string com JSON, a ordem dos campos pode mudar, assim como sua formatação, o que pode causar un falso negativo no teste. Então qualquer alteração de parâmetros da função ou resposta, pode gerar uma incompatibilidade do  com o comportamento real do sistema.</p><h2>Teste de integração com uma reimplementação</h2><p>Partindo mais para uma abordagem de testes de integração, existe uma reimplementação dos serviços da AWS em Python para ser usada em testes chamada <a href=\"https://github.com/getmoto/moto\">Moto</a> (que também pode ser utilizada em outras linguagens no seu <a href=\"http://docs.getmoto.org/en/latest/docs/server_mode.html\">modo servidor</a>, semelhante ao <a href=\"https://www.localstack.cloud/\">LocalStack</a>). Assim também é possível rodar os testes localmente, uma vez que ele simula o comportamento dos serviços da AWS. Um exemplo de teste utilizando essa biblioteca pode ser visto a baixo:</p><div><pre><code></code></pre></div><p>Diferente do teste anterior, neste não é necessário se preocupar em montar os retornos dos serviços acessados, porém é necessário conhecer melhor o serviço para criar os recursos utilizados pela função a ser testada. Também não existe uma forma de fazer um  para verificar se uma mensagem foi enviada, é necessário buscá-las da fila, e nesse caso, também chamar a função para removê-las, de forma que elas não voltem para a fila, evitando comportamentos não esperados (embora não seja obrigatório ao usar o Moto como um decorador, mas é bom para evitar problemas). E mesmo que possa existir alguma diferença entre o serviço real e sua reimplementação, espera-se que ele seja confiável, e ao atualizar o Moto, todos os testes já serão validados com os novos comportamentos, terceirizando essa responsabilidade do teste.</p><h2>Interagindo com outro serviço (SNS)</h2><p>Pensando em testar outro serviço da AWS, pode-se trocar a fila SQS para qual a resposta do código é enviada por um tópico <a href=\"https://aws.amazon.com/pt/sns/\">SNS</a>. O código a ser testado então fica:</p><div><pre><code></code></pre></div><p>Seu teste pode seguir uma estrutura bastante similar:</p><div><pre><code></code></pre></div><p>Porém como verificar o que foi enviado para o tópico SNS? Como  não estão sendo utilizados, não tem como fazer um  para verificar se a função foi chamada e com quais parâmetros. O SNS também não tem uma forma direta de recuperar as mensagens publicadas nele. Uma solução possível é criar uma fila SQS, assinar o tópico SNS, de forma que tudo que for enviado para o tópico seja encaminhado para a fila SQS, e validar o tópico SNS a partir da fila SQS (e após a execução do teste, remover a assinatura, fila e tópico). Embora possível, essa solução é bastante trabalhosa e repetitiva, ainda mais se considerar que isso precisará ser refeito em cada teste do projeto que chamar o SNS.</p><h2>Simplificando e padronizando (repensando os testes)</h2><p>Embora a solução apresentada tenha o problema da repetição de código, ela funciona, e para os testes não importa saber criar uma fila ou tópico e removê-los depois (que é uma parte considerável do que é repetido), só importa usá-los. É totalmente plausível (pelo menos na ideia), de na hora de rodar o teste, só perguntar por alguma fila disponível que possa ser utilizada, e depois devolvê-la. Então seria bom se tivesse uma forma de pegar filas e tópicos emprestados para os testes, ou até mesmo criá-los e removê-los, o teste em si não precisa saber o que acontecerá com esses recursos depois de utilizá-los. Na verdade, o teste nem precisaria saber do detalhe de que é necessário primeiro buscar uma mensagem da fila do SQS, e depois deletar essa mensagem, nem de que a mensagem publicada em um tópico SNS precisou passar por uma fila SQS para ser validada.</p><p>Pensando dessa forma, só é necessário executar algum código antes do teste para criar os recursos (filas, tópicos...) que serão utilizados, e executar algum código depois dos testes para remover esses recursos criados anteriormente. Além disso, alguma abstração poderia ser criada para simplificar a interação com esses recursos na parte dos testes para facilitar a verificação de sua utilização, que é justamente a parte que importa dos testes.</p><p>Para executar algum código antes e depois de algo, no Python pode-se ser usado um <a href=\"https://docs.python.org/pt-br/3.13/library/stdtypes.html#typecontextmanager\">contexto gerenciado</a> (aquele criado com a estrutura ), que poderia criar os recursos, passá-lo para o teste, e assim que ele acabar, fazer sua remoção. Porém, o que ele deveria retornar?</p><p>Para testar um código que envia mensagens para uma fila SQS, só é necessário saber qual a fila e alguma forma de receber as mensagens enviadas. A identificação de uma fila no SQS se dá através de uma URL, e um <a href=\"https://docs.python.org/pt-br/3.13/glossary.html#term-generator\">gerador</a> poderia ser criado para abstrair toda a lógica de consumir a fila. Já para testar um código que recebe mensagens de uma fila SQS é necessário saber a URL da fila, e uma função para enviar as mensagens que serão consumidas pelo código a ser testado.</p><p>Agora considerando o caso do tópico SNS, toda vez que um tópico for criado, também poderia se criar uma fila SQS que assina esse tópico. A função geradora também poderia buscar nessa fila as mensagens. Isso deixaria o SQS totalmente transparente para os testes (o teste nem saberia que tem uma fila SQS sendo utilizada). Porém para fazer a assinatura, a URL da fila não serve, é necessário seu <a href=\"https://docs.aws.amazon.com/pt_br/IAM/latest/UserGuide/reference-arns.html\">ARN</a>, em outros contextos pode ser necessário o nome e não URL ou ARN.</p><p>Para o contexto retornar mais de uma coisa, pode-se utilizar as <a href=\"https://docs.python.org/pt-br/3.13/library/stdtypes.html#tuple\">tuplas</a> do Python. Porém a questão continua, o que estará nessa tupla? URL da fila? ARN da fila? Nome? Função para enviar mensagens? Gerador para consumir mensagens? Para não ser necessário criar diferentes tuplas para cada caso, pode-se criar uma tupla retornando tudo. Mas pode ser complicado lembrar em que posição está cada coisa, e um código que recebe uma tupla com vários valores e não utiliza a maioria pode gerar confusão. Então em vez de usar tuplas, pode-se criar um objeto seguindo o <a href=\"https://docs.python.org/pt-br/3.13/reference/datamodel.html\">modelo de dados do Python</a>, assim informações (como nome, ARN e URL) podem ir como atributos, a função para enviar mensagens poderia ser um método, e esse objeto também poderia se comportar como um iterador, que é um comportamento do gerador. E por seguir o modelo de dados do Python, isso tudo ainda pareceria algo nativo do Python, onde um objeto abstrairia a fila SQS ou tópico SNS (algo semelhante ao <a href=\"https://www.youtube.com/watch?v=WhZHZ_RYzxw&amp;list=PLOQgLBuj2-3LqnMYKZZgzeC7CKCPF375B&amp;index=18\"></a> apresentado no curso de Selenium do <a href=\"https://dunossauro.com/\">Dunossauro</a>).</p><p>E para facilitar ainda mais, esses contextos que criam os recursos podem se tornar <a href=\"https://docs.pytest.org/en/stable/explanation/fixtures.html\"></a> do <a href=\"https://pytest.org/\">pytest</a>, assim bastaria informar o nome da  como parâmetro da função de teste que o recurso já seria criado, e assim que o teste terminar, removido.</p><h2>Implementando esses padrões nos testes</h2><p>Após instalar a biblioteca, o teste da função que recebe mensagens de uma fila SQS e publica a resposta em um tópico SNS fica da seguinte forma:</p><div><pre><code></code></pre></div><p>Esse teste ficou muito mais simples, focando no que realmente importa para validar se o código está se comportando como deveria, e se aproveita de recursos do Python, como a função <a href=\"https://docs.python.org/pt-br/3.13/library/functions.html#len\"></a> e <a href=\"https://docs.python.org/pt-br/3.13/tutorial/datastructures.html#list-comprehensions\">compreensões de lista</a>. Toda a criação da fila SQS e tópico SNS se resumiu em adicionar as  e  como argumentos da função de teste, assim como sua remoção posteriormente.</p><h2>Quando precisa de múltiplos recursos do mesmo tipo</h2><p>O teste anterior foi simples porque precisou de apenas um recurso de cada tipo. Porém se voltar a primeira função, aquela que recebe mensagens de uma fila SQS e envia o resultado para outra fila SQS, é necessário duas filas, mas a biblioteca entrega apenas uma  que cria uma única fila SQS. Uma opção seria criar outras  para criar outras filas, porém quantas? Se criar poucas  continuaria faltando filas, se criar muitas elas seriam carregadas sem necessidade.</p><p>Outra opção é dar um passo a traz, usando diretamente os contextos gerenciados em vez usá-los através de . O código de teste fica um pouco mais poluído, com comandos para criar as filas, porém possibilita uma maior flexibilidade também, como: Criar mais de uma fila para o teste; Criar filas com nomes específicos (ou que o nome siga um determinado padrão); E controlar quando a fila será criada e removida (ao sair do contexto). Segue um exemplo do teste:</p><div><pre><code></code></pre></div><p>Esse texto apresentou uma sequência de passos e pensamentos que levaram até a criação da biblioteca <a href=\"https://pypi.org/project/pytest-moto-fixtures/\">pytest-moto-fixtures</a> para auxiliar na escrita de testes de código que utilizam serviços da AWS. Também apresentou como sua arquitetura foi surgindo das necessidades, sempre com o foco em simplificação, e como resolveu essas necessidades.</p><p>A biblioteca também possui algumas facilidades que deixaram o código de teste bastante simples, como o uso das  para criação de recursos. Junto com o uso das funcionalidades da própria linguagem, isso permitiu um código de teste bastante simples e direto, sem precisar expor detalhes dos serviços utilizados. E para coisas mais complexas ou específicas, a biblioteca também permite utilizar manualmente algumas de suas camadas mais profundas, porém ainda assim de forma simplificada, sem sujar o código tanto quando sua versão sem o uso da biblioteca.</p><p>Outra lição que fica é a possibilidade de criarmos bibliotecas para facilitar as coisas repetitivas do dia a dia, e não só usar as feitas por terceiros. Porém isso deve ser feito com estudo para realmente simplificar, caso contrário poderia trazer mais ou outras dificuldades para as atividades. Nessa forma, essa biblioteca seguiu a linha voltada para os testes de integração, outra biblioteca poderia surgir seguindo a ideia de uso de , possuindo características diferentes.</p><p>Obs: O projeto com os códigos desse artigo pode ser acessado <a href=\"https://eduardoklosowski.github.io/blog/testes-aws/testes-aws.tar.gz\">aqui</a>.</p><p>Esse artigo foi publicado originalmente no <a href=\"https://eduardoklosowski.github.io/blog/\">meu blog</a>, passe por lá, ou siga-me no <a href=\"https://dev.to/eduardoklosowski\">DEV</a> para ver mais artigos que eu escrevi.</p>","contentLength":12881,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Title: Unraveling the Truth: Jon Gruden's Quest for Answers in NFL Emails Case","url":"https://dev.to/yagyaraj_sharma_6cd410179/title-unraveling-the-truth-jon-grudens-quest-for-answers-in-nfl-emails-case-138d","date":1761611131,"author":"Insights YRS","guid":317075,"unread":true,"content":"<h2>\n  \n  \n  Title: Unraveling the Truth: Jon Gruden's Quest for Answers in NFL Emails Case\n</h2>\n\n<p>In the world of professional sports, the NFL has been embroiled in a scandal that has rocked the league and its teams. The case revolves around the leaking of emails between former Raiders head coach Jon Gruden and NFL commissioner Roger Goodell, which led to Gruden's resignation in 2021.</p>\n\n<p>Gruden, a highly respected coach with a storied career, has been vocal about his desire to uncover the truth behind the emails and the circumstances that led to his resignation. In a recent interview, he expressed his eagerness to find out what really happened and why he was forced to leave his job.</p>\n\n<p>\"I want to know the truth,\" Gruden said. \"I want to know what happened and why. I want to know who leaked those emails and why. I want to know what Goodell knew and when he knew it. I want to know what the NFL knew and when they knew it. I want to know what the media knew and when they knew it. I want to know everything.\"</p>\n\n<p>Gruden's quest for answers has taken him to a Nevada courtroom, where he is currently suing the NFL and Goodell for defamation and breach of contract. The case has already seen a number of twists and turns, with the NFL initially denying any involvement in the leak, before admitting that they had provided the emails to the media.</p>\n\n<p>Despite the challenges, Gruden remains determined to uncover the truth. He has hired a team of high-powered lawyers and has been working tirelessly to gather evidence and build his case.</p>\n\n<p>\"I'm not going to give up,\" Gruden said. \"I'm going to keep fighting until I get the answers I need. I'm not going to let this go. I'm not going to let the NFL and Goodell get away with this.\"</p>\n\n<p>As the case continues to unfold, Gruden's quest for answers has captured the attention of sports fans around the world. Many are eager to see the truth come to light and to find out what really happened behind the scenes.</p>\n\n<p>\"This is a big story,\" said one sports fan. \"We all want to know what really happened and why Gruden was forced to resign. We want to see justice done and we want to see the truth come out.\"</p>\n\n<p>As the case progresses, it remains to be seen what the future holds for Gruden and the NFL. But one thing is clear: Gruden's quest for answers has already had a significant impact on the league and its teams, and it will continue to shape the conversation around sports and the NFL for years to come.</p>\n\n\n\n\n<p>📌 Based on insights from <a href=\"https://www.espn.com/nfl/story/_/id/45960156/jon-gruden-eager-discover-truth-nfl-emails-lawsuit\" rel=\"noopener noreferrer\">espn.com</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Title: Revolutionizing Energy: The Hot-Cold Breakthrough in Solar Thermoelectric Power Generation","url":"https://dev.to/yagyaraj_sharma_6cd410179/title-revolutionizing-energy-the-hot-cold-breakthrough-in-solar-thermoelectric-power-generation-3cdd","date":1761610827,"author":"Insights YRS","guid":317074,"unread":true,"content":"<h2>\n  \n  \n  Title: Revolutionizing Energy: The Hot-Cold Breakthrough in Solar Thermoelectric Power Generation\n</h2>\n\n<p>Description:</p>\n\n<p>In the ever-evolving world of renewable energy, scientists and researchers are constantly striving to push the boundaries of innovation and efficiency. Recently, a team of brilliant minds from the University of Rochester have made a groundbreaking discovery that could revolutionize the way we harness solar power. They have developed a new hot-cold design for solar thermoelectric generators (STEGs) that has the potential to increase their efficiency by an astounding 15 times!</p>\n\n<p>Solar thermoelectric power generation is an exciting technology that converts sunlight directly into electricity through the use of specialized materials called thermoelectric materials. These materials have the unique ability to generate an electric current when exposed to a temperature gradient. However, the efficiency of STEGs has always been limited by the fact that they can only convert a small fraction of the available solar energy into electricity.</p>\n\n<p>The new hot-cold design developed by the University of Rochester researchers addresses this limitation by creating a temperature gradient that is much more extreme than what is typically seen in STEGs. This is achieved by using a combination of advanced materials and innovative engineering techniques to create a highly efficient heat exchanger that can rapidly transfer heat from the hot side of the STEG to the cold side.</p>\n\n<p>The result of this breakthrough is a STEG that is 15 times more efficient than its predecessors! This means that more solar energy can be converted into electricity, which could have a significant impact on our energy needs and our environment.</p>\n\n<p>But the potential benefits of this new technology don't stop there. The University of Rochester researchers believe that their hot-cold design could also be applied to other types of thermoelectric devices, such as waste heat recovery systems and refrigerators. This could lead to even more innovative and efficient ways of harnessing energy from various sources.</p>\n\n<p>In conclusion, the hot-cold design developed by the University of Rochester researchers represents a major leap forward in the field of solar thermoelectric power generation. This breakthrough has the potential to revolutionize the way we generate and consume energy, and could pave the way for a more sustainable and efficient future. So, let's raise a glass (or a solar panel) to this remarkable achievement and the exciting possibilities that lie ahead!</p>\n\n\n\n\n<p>📌 Based on insights from <a href=\"https://interestingengineering.com/innovation/rochester-solar-thermelectric-boost-15x\" rel=\"noopener noreferrer\">interestingengineering.com</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Title: Elon Musk Announces the Return of Vine's Archive","url":"https://dev.to/yagyaraj_sharma_6cd410179/title-elon-musk-announces-the-return-of-vines-archive-d90","date":1761610539,"author":"Insights YRS","guid":317063,"unread":true,"content":"<h2>\n  \n  \n  Title: Elon Musk Announces the Return of Vine's Archive\n</h2>\n\n<p>Introduction:</p>\n\n<p>In a recent tweet, Elon Musk announced that he plans to bring back the archive of Vine's videos. This news has sparked excitement among the tech community, as Vine was a popular social media platform that allowed users to create and share short-form videos. In this blog post, we will explore the details of Elon Musk's announcement and what it means for the future of Vine.</p>\n\n<p>The Return of Vine's Archive:</p>\n\n<p>Elon Musk's tweet about bringing back Vine's archive has generated a lot of buzz. According to Musk, the company will be working to bring the archive of videos back online. This means that users will be able to access and watch the videos that were once available on the platform.</p>\n\n<p>While the exact details of how this will be done are not yet clear, it is likely that the archive will be made available on a new platform or website. This could be a great opportunity for users to rediscover some of their favorite Vine videos and for new users to discover the platform's content.</p>\n\n<p>The Impact of Vine's Archive:</p>\n\n<p>The return of Vine's archive could have a significant impact on the tech industry. Vine was a popular social media platform that allowed users to create and share short-form videos. It was particularly popular among younger users and was known for its creative and humorous content.</p>\n\n<p>The return of Vine's archive could also have implications for the future of social media. Short-form video content has become increasingly popular in recent years, and platforms like TikTok have emerged as major players in this space. The return of Vine's archive could signal a resurgence of interest in this type of content and could lead to the development of new platforms and features.</p>\n\n<p>Conclusion:</p>\n\n<p>Elon Musk's announcement that he plans to bring back Vine's archive of videos has generated a lot of excitement among the tech community. While the exact details of how this will be done are not yet clear, it is likely that the archive will be made available on a new platform or website. The return of Vine's archive could have a significant impact on the tech industry and could signal a resurgence of interest in short-form video content. As we wait for more details about the return of Vine's archive, it is clear that this is an exciting development for tech enthusiasts and social media users alike.</p>\n\n\n\n\n<p>📌 Based on insights from <a href=\"https://techcrunch.com/2025/08/04/elon-musk-says-hes-bringing-back-vines-archive/\" rel=\"noopener noreferrer\">techcrunch.com</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building an O'Reilly Course Downloader with Python & Selenium","url":"https://dev.to/vickydx/building-an-oreilly-course-downloader-with-python-selenium-39im","date":1761603246,"author":"Nikesh Chavhan","guid":317034,"unread":true,"content":"<p>Hey DEV Community! 👋</p>\n\n<p>I recently built a small tool to download complete O'Reilly courses with automatic organization.</p>\n\n<h2>\n  \n  \n  What it does:\n</h2>\n\n<ul>\n<li>Downloads videos + transcripts using Selenium automation</li>\n<li>Headless Chrome with DevTools Protocol for m3u8 capture</li>\n<li>Smart chapter-based folder organization</li>\n<li>Resume capability for interrupted downloads</li>\n<li>10x faster transcript-only mode</li>\n</ul>\n\n<h2>\n  \n  \n  Tech Stack:\n</h2>\n\n<ul>\n<li>Python</li>\n<li>Selenium WebDriver</li>\n<li>FFmpeg for HLS streams</li>\n<li>Chrome DevTools Protocol</li>\n</ul>\n\n<p>Check it out on GitHub: <a href=\"https://github.com/vicky-dx/oreilly-course-downloader\" rel=\"noopener noreferrer\">https://github.com/vicky-dx/oreilly-course-downloader</a></p>\n\n<p>Would love to hear your thoughts and feedback!</p>\n\n<p>#python #selenium #automation #webdev #opensource</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-4d6b","date":1761602953,"author":"Vibe YouTube","guid":317033,"unread":true,"content":"<h1>\n  \n  \n  Build a Python AI Agent in 10 Minutes\n</h1>\n\n<p>TechWithTim walks you through a lightning-fast tutorial on whipping up a Python AI agent using the OpenAI API. You’ll grab and set your API key, install the necessary packages, define your tools, spin up the LLM and agent, write the driver code, and run some quick tests—all in under ten minutes.</p>\n\n<p>Along the way, Tim plugs his DevLaunch mentorship program for hands-on project building and job prep, plus drops links to the full video, GitHub repo, and helpful timestamps. Perfect if you want a no-fluff, end-to-end demo to kickstart your own AI-powered projects!</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=gaGaPpnexxA\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"From Seconds to Milliseconds: Fixing Python Cold Starts with SnapStart","url":"https://dev.to/aws-builders/from-seconds-to-milliseconds-fixing-python-cold-starts-with-snapstart-59mn","date":1761601761,"author":"Anne","guid":317018,"unread":true,"content":"<p>If you’ve built a Python Lambda that uses Pydantic heavily (or other heavy model initialization, schema loading, or framework bootstrapping), you’ve probably hit this painful boundary: cold starts are dominated by your app’s initialization time, not AWS’s runtime overhead. Even if AWS could spin up pods in less than 100 ms, your own code might spend 800 ms or more importing modules, constructing many Pydantic models, loading schemas, doing dependency injection, etc. That kind of latency becomes a dealbreaker for synchronous, latency-sensitive APIs.</p>\n\n<p>With the availability of Lambda SnapStart for Python (runtime 3.12+), that barrier is now much lower: you can snapshot the fully-initialized environment and restore from it. In other words: the heavy startup cost of initializing your Pydantic models happens once during deployment, rather than every time the function runs.</p>\n\n<h2>\n  \n  \n  What is Lambda SnapStart (for Python) and how it changes cold starts\n</h2>\n\n<p>Before SnapStart, Lambda cold starts involved:</p>\n\n<ol>\n<li>Downloading your code package</li>\n<li>Starting the language runtime (Python interpreter)</li>\n<li>Running all initialization code (imports, global-level constructs, class definitions, module-level state, constructor logic, etc)</li>\n<li>Finally handling the incoming event</li>\n</ol>\n\n<p>If your startup logic is heavy (for example, constructing &gt;100 Pydantic model classes, loading JSON or YAML schemas, instantiating global validators or caches, etc.), that initialization phase can be your bottleneck.</p>\n\n<p>SnapStart changes that dramatically (for supported runtimes). The flow is:</p>\n\n<ol>\n<li>You enable SnapStart on a published version of your Lambda (or via alias to a version).</li>\n<li>When that version is published, Lambda “warms up” the function once, runs all initialization code, sets up your global state exactly as your code would do for a first invocation.</li>\n<li>Lambda then takes a memory + disk snapshot (a Firecracker micro-VM snapshot) of that fully initialized state, encrypts and persists it in a cache.</li>\n<li>Later, when a new environment is needed, (a cold) Lambda restores from that snapshot, essentially skipping the heavy init and resuming from the “post-init” state.</li>\n<li>Your handler logic runs as-is.</li>\n</ol>\n\n<p>In effect, a lot of the “cold start” cost is eliminated. AWS claims that you can get “sub-second” startup times even for heavy apps.</p>\n\n<h2>\n  \n  \n  Snapshot safety, uniqueness, and runtime hooks\n</h2>\n\n<p>Because SnapStart literally reuses memory state, if your initialization code produces unique artifacts (for example, a new random UUID on startup, or a unique timestamp, or establishes network sockets), those may incorrectly get reused across invocations if not handled carefully.</p>\n\n<p>To mitigate this, AWS provides runtime hooks for Python:</p>\n\n<ul>\n<li>\n<code>@register_before_snapshot</code>: functions that run right before the snapshot is taken. Use this hook to “undo” or clean up any ephemeral or unique initialization state (e.g. close DB connections, clear caches, reset random seeds). </li>\n<li>\n<code>@register_after_restore</code>: functions that run immediately upon restore from snapshot, before handling the first event. Use this to reinstantiate anything you can’t reuse (e.g. re-open connections, reinitialize entropy, refresh tokens). </li>\n</ul>\n\n<p>These hooks help ensure your function remains correct even when operating from a snapshot.</p>\n\n<h2>\n  \n  \n  Using SnapStart in CDK for Python Lambdas\n</h2>\n\n<p>Let’s get into how to configure SnapStart when deploying via AWS CDK (in Python). The high-level steps are:</p>\n\n<ol>\n<li>Use a Lambda construct (e.g. aws_lambda.Function or the PythonFunction from the aws_lambda_python_alpha module).</li>\n<li>Ensure your runtime is at least Python 3.12 (SnapStart is supported on Python 3.12+).</li>\n<li>Enable the SnapStart property.</li>\n<li>Add a version alias so that SnapStart can be applied to the published version.</li>\n</ol>\n\n<p>Here is a sample skeleton (CDK in Python):<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">aws_cdk</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n  <span class=\"n\">Stack</span><span class=\"p\">,</span>\n  <span class=\"n\">Duration</span><span class=\"p\">,</span>\n  <span class=\"n\">aws_lambda</span> <span class=\"k\">as</span> <span class=\"n\">_lambda</span><span class=\"p\">,</span>\n  <span class=\"n\">aws_lambda_python_alpha</span> <span class=\"k\">as</span> <span class=\"n\">lambda_python</span><span class=\"p\">,</span>\n  <span class=\"n\">aws_iam</span> <span class=\"k\">as</span> <span class=\"n\">iam</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"n\">constructs</span> <span class=\"kn\">import</span> <span class=\"n\">Construct</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyLambdaStack</span><span class=\"p\">(</span><span class=\"n\">Stack</span><span class=\"p\">):</span>\n  <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">scope</span><span class=\"p\">:</span> <span class=\"n\">Construct</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"nf\">super</span><span class=\"p\">().</span><span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 1. Define the Lambda\n</span>    <span class=\"n\">my_fn</span> <span class=\"o\">=</span> <span class=\"n\">lambda_python</span><span class=\"p\">.</span><span class=\"nc\">PythonFunction</span><span class=\"p\">(</span>\n      <span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">MyPydanticFn</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n      <span class=\"n\">runtime</span><span class=\"o\">=</span><span class=\"n\">_lambda</span><span class=\"p\">.</span><span class=\"n\">Runtime</span><span class=\"p\">.</span><span class=\"n\">PYTHON_3_12</span><span class=\"p\">,</span> <span class=\"c1\"># 2. Correct runtime\n</span>      <span class=\"n\">handler</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">app.handler</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n      <span class=\"n\">entry</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">path/to/your/code</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n      <span class=\"n\">memory_size</span><span class=\"o\">=</span><span class=\"mi\">1024</span><span class=\"p\">,</span>\n      <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">Duration</span><span class=\"p\">.</span><span class=\"nf\">seconds</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">),</span>\n      <span class=\"n\">snap_start</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">.</span><span class=\"n\">SnapStartConf</span><span class=\"p\">.</span><span class=\"n\">ON_PUBLISHED_VERSIONS</span> <span class=\"c1\"># 3. Enable SnapStart\n</span>    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># 4. Create a version\n</span>    <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"n\">my_fn</span><span class=\"p\">.</span><span class=\"n\">current_version</span>  <span class=\"c1\"># forces a Version artifact\n</span></code></pre>\n\n</div>\n\n\n\n<p><em>One thing to notice in that pattern:<br>\nWe rely on <code>my_fn.current_version</code> to force CDK to emit a AWS::Lambda::Version resource (without that, there’s no version to attach SnapStart to).</em></p>\n\n<h2>\n  \n  \n  Things to consider\n</h2>\n\n<ol>\n<li><p>The pre-snapshot initialization phase has a time limit (the INIT time limit of 10 seconds) as usual. Your before-snapshot hooks count toward that.</p></li>\n<li><p>After snapshot restore, the @after_restore hook must finish within 10 seconds as well, else it might throw a SnapStartTimeoutException.</p></li>\n<li><p>Whenever your code (or dependencies) change in a way that should invalidate the snapshot, you must force a new version so a new snapshot is captured. If CDK's version hashing doesn't catch something, you can call version.invalidate_version_based_on(...) with a changing token (e.g. content hash of certain files) to ensure version recreation.</p></li>\n<li><p>At the time of writing, SnapStart is not supported with ephemeral storage &gt; 512 MB, EFS, provisioned concurrency, or containers.</p></li>\n</ol>\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>In summary, AWS Lambda SnapStart for Python removes one of the biggest hurdles to running complex, model-heavy applications in a serverless environment. By snapshotting your function’s fully initialized state at deployment time, it eliminates the repeated cost of initializing frameworks like Pydantic on every cold start. With a small configuration change in CDK and a few runtime hooks to manage transient state, you can achieve consistently fast startup times and make Lambda a practical, scalable choice even for Python applications that used to be too slow to launch.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"🧩 Automated Documentation using MkDocs and Python","url":"https://dev.to/xandecodes/automated-documentation-using-mkdocs-and-python-27","date":1761601151,"author":"Alexandre Fernandes dos Santos","guid":317017,"unread":true,"content":"<p>Something I really enjoy is browsing through library documentation — honestly, good documentation is something I find beautiful to see and also difficult to maintain 😅.</p>\n\n<p>Now imagine: every time a change is made to a behavior, having to go to the page that explains it, copy and paste the code, write what changed, run the build, check if everything is correct... wait, that's not how it should be! — I'm already tired just thinking about it 😤.</p>\n\n<h2>\n  \n  \n  🐛 Tool to be documented\n</h2>\n\n<p>I created a very simple tool that makes a call to the PokeAPI, fetches information about a Pokémon, and displays the result in the terminal.</p>\n\n<p>The source code can be found here: <a href=\"https://github.com/XandeCoding/codigos-de-artigos/tree/main/python/documentacao_automatica\" rel=\"noopener noreferrer\">Automated Documentation</a></p>\n\n<p>Talking a bit more about the project: I used Poetry to manage the virtual environment and keep the libraries isolated from the rest of the system (nobody wants to clutter their PC with libs, right?).<br>\nBut you can use any other tool, like pyenv or virtualenvwrapper — it doesn't matter.</p>\n\n<p>The installed libraries are listed in pyproject.toml, so just install them and start playing.</p>\n<h2>\n  \n  \n  📝 How to document\n</h2>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F54xr5ms28n2irn7x3eia.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F54xr5ms28n2irn7x3eia.png\" alt=\"Pokémon API access code PokeAPI\" width=\"800\" height=\"711\"></a></p>\n\n<p>This is a small piece of the code I'll use as an example.<br>\nYou must have noticed those \"\"\" — they are Docstrings, used to document code. It's a very common convention for documenting modules, classes, functions... well, anything.<br>\nIf you're going to document something, I highly recommend using docstrings 😜.</p>\n\n<p>These docstrings are what make the magic happen: we'll make them be automatically read and inserted into the corresponding documentation pages.<br>\nWith the docstrings ready and explaining what each function does, we can proceed.</p>\n<h2>\n  \n  \n  ⬆️ Installing MkDocs\n</h2>\n\n<p>To install using Poetry it's very simple — just use poetry add, or pip install if you're not using it.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fb6lb7pla7ap4x8f01aiu.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fb6lb7pla7ap4x8f01aiu.png\" alt=\"Code showing how to install mkdocs\" width=\"800\" height=\"391\"></a></p>\n\n<p><strong><em>Note:</em></strong> When installing mkdocstrings, replace [python] with the language you're using.<br>\nCheck the official documentation to verify support: Mkdocstrings Docs.</p>\n\n<p>We installed MkDocs, a nice theme called mkdocs-material (a matter of taste, but I really like it 😄), and finally mkdocstrings, a plugin that scans the project and inserts the docstrings into the corresponding pages.</p>\n\n<p>So now? What do we do with all this? 🤔 Don't worry, you don't need to send a letter to a TV show — it's much simpler than that 😂.<br>\nFollowing the step-by-step below, your documentation will be ready in no time:</p>\n<h3>\n  \n  \n  Step 1️⃣\n</h3>\n\n<p>Open a terminal inside the project folder and use the command:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>mkdocs new <span class=\"nb\">.</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This will create the configuration files and the docs folder.</p>\n\n<h3>\n  \n  \n  Step 2️⃣\n</h3>\n\n<p>Now you should have a file called mkdocs.yml in the project root.<br>\nIn it, add the following configurations:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code>    <span class=\"na\">site_name</span><span class=\"pi\">:</span> <span class=\"s\">Automated Documentation</span> <span class=\"c1\"># You can use your application's name</span>\n\n    <span class=\"na\">theme</span><span class=\"pi\">:</span>\n        <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">material</span> <span class=\"c1\"># Adds the nice theme</span>\n\n        <span class=\"na\">plugins</span><span class=\"pi\">:</span>\n        <span class=\"pi\">-</span> <span class=\"s\">search</span> <span class=\"c1\"># Plugin that enables search in the documentation</span>\n        <span class=\"pi\">-</span> <span class=\"na\">mkdocstrings</span><span class=\"pi\">:</span> <span class=\"c1\"># This one makes the magic happen!</span>\n            <span class=\"na\">default_handler</span><span class=\"pi\">:</span> <span class=\"s\">python</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong><em>Note:</em></strong> Yeah, the code looks a bit ugly, but this way you can just copy and paste — my laziness salutes yours 🙏</p>\n\n<p>The mkdocstrings plugin is responsible for reading the docstrings and automatically adding them to the corresponding pages.</p>\n\n<h3>\n  \n  \n  Step 3️⃣\n</h3>\n\n<p>Run the commands:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>mkdocs build\nmkdocs serve\n</code></pre>\n\n</div>\n\n\n\n<p>Then, access the documentation through your browser at:<br>\n👉 <a href=\"http://127.0.0.1:8000/\" rel=\"noopener noreferrer\">http://127.0.0.1:8000/</a></p>\n\n<p>You'll see something similar to the image below:</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F2fa6vl45xhc8h9rkxmmm.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F2fa6vl45xhc8h9rkxmmm.png\" alt=\"Documentation page index\" width=\"800\" height=\"438\"></a></p>\n<h3>\n  \n  \n  Step 4️⃣\n</h3>\n\n<p>When you access it, you'll see an introduction explaining how to add pages — it's very simple!<br>\nJust create a .md file inside the docs folder in the project root, and it will be automatically added to the documentation structure.</p>\n\n<p>Your structure should look similar to this:</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ft2s6pnr4eigb1gbevq5c.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ft2s6pnr4eigb1gbevq5c.png\" alt=\"Folder structure\" width=\"501\" height=\"1050\"></a></p>\n<h3>\n  \n  \n  Step 5️⃣\n</h3>\n\n<p>Now let's go to the pokemon page, used to document the pokemon module we saw at the beginning.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fhqa6ko5t0c5laltywr7f.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fhqa6ko5t0c5laltywr7f.png\" alt=\"Documentation markdown file\" width=\"800\" height=\"363\"></a></p>\n\n<p>In the page content, we have a brief introduction and then something like:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight markdown\"><code>::: src.pokemon\n</code></pre>\n\n</div>\n\n\n\n<p>But what is this?<br>\nThis command maps the module to be automatically documented — the path is the same one used in the import.<br>\nDon't believe it works? Take a look at the result:</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Flh4ypym2c79vd456cu7d.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Flh4ypym2c79vd456cu7d.png\" alt=\"Pokémon module documentation\" width=\"800\" height=\"438\"></a></p>\n\n<h3>\n  \n  \n  Step 6️⃣\n</h3>\n\n<p>Enjoy! 😁</p>\n\n<h2>\n  \n  \n  🎉 The End\n</h2>\n\n<p>In just a few steps, we already have pretty nice documentation!<br>\nIf you add new modules or want to create more pages, just include the file inside the docs folder, and you're done.</p>\n\n<p>I hope you enjoyed it!<br>\nAnd if you have any questions (or found any errors — it happens to the best of us 😅), just leave a comment below!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Surprisingly Simple Range Sets with Bisection in Python","url":"https://dev.to/tom65536/surprisingly-simple-range-sets-with-bisection-in-python-20hp","date":1761600670,"author":"Tom R.","guid":317016,"unread":true,"content":"<p>Recently I came across the problem of finding Unicode identifiers in a text. Don't worry, this article is not about lexical analysis. All you need to know is that the problem boils down to<br>\nchecking each character for the derived Unicode properties <code>XID_Start</code>(characters which are allowed as first character) and <code>XID_Continue</code> (allowed follow-up characters).</p>\n\n<p>Whether you want to understand all the details mentioned in the <a href=\"https://www.unicode.org/reports/tr31/\" rel=\"noopener noreferrer\">Unicode® Standard Annex #31</a> or you simply get yourself a copy of <a href=\"https://www.unicode.org/Public/16.0.0/ucd/DerivedCoreProperties.txt\" rel=\"noopener noreferrer\">this handy text file</a> with  a list of all character ranges sharing the desired property, at the end of the day you need to check for a given code point whether it falls within one of those ranges or whether it doesn't. And you need to check this for many characters, so your underlying approach should be reasonably fast.</p>\n\n<p>Having said that, if speed is the only thing that counts for you, this might not be the article you want to dive into. Other people have solved this problem before (see for exmple <a href=\"https://github.com/dtolnay/unicode-ident\" rel=\"noopener noreferrer\">dtolnay/unicode-ident</a>).</p>\n\n<p>What I am going to show to you is an elegant yet rather efficient way of storing and accessing sets of ranges. So lets dive into it.</p>\n<h2>\n  \n  \n  A Red and Black Tape Measure\n</h2>\n\n<p>What we have to deal with are of<br>\nthe order of thousand intervals of<br>\nthe form 0041..005A, 0061..007A, 00AA..00AA, 00B5..00B5, 00BA..00BA,<br>\n00C0..00D6, ...</p>\n\n<p>Now imagine you take a tape measure or a ruler or the like and color all tape sections belonging to one of those intervals in black and all sections not belonging to any of the intervals in red.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdh34n7fx7yx0ktinqnyb.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdh34n7fx7yx0ktinqnyb.png\" alt=\"A sketch of a tape measure with alternating sections colored in red and black\" width=\"800\" height=\"800\"></a></p>\n\n<p>All we need to remember to color a new tape measure with exactly the same coloring is an ordered list of points where a new section starts and the information whether at the first point the color changes from red to black or vice versa. For now we only deal with finite ranges so we stick to the convention that the first point in the list is the starting point of a range and hence is marked as a change from red to black.</p>\n\n<p>For our numbers from the Unicode ranges we need to store the following list:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">bounds</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n   <span class=\"mh\">0x0041</span><span class=\"p\">,</span> <span class=\"mh\">0x005B</span><span class=\"p\">,</span>\n   <span class=\"mh\">0x0061</span><span class=\"p\">,</span> <span class=\"mh\">0x007B</span><span class=\"p\">,</span>\n   <span class=\"mh\">0x00AA</span><span class=\"p\">,</span> <span class=\"mh\">0x00AB</span><span class=\"p\">,</span>\n   <span class=\"mh\">0x00B5</span><span class=\"p\">,</span> <span class=\"mh\">0x00B5</span><span class=\"p\">,</span>\n   <span class=\"mh\">0x00BA</span><span class=\"p\">,</span> <span class=\"mh\">0x00BA</span><span class=\"p\">,</span>\n   <span class=\"mh\">0x00C0</span><span class=\"p\">,</span> <span class=\"mh\">0x00D6</span><span class=\"p\">,</span>\n   <span class=\"c1\"># ...\n</span><span class=\"p\">]</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Note that we have written down the lower (included) bound of each range and the upper (excluded!) bound. What we have done here for integer numbers can be extended to any data type forming a totally ordered set:</p>\n\n<ul>\n<li>rational or real numbers,</li>\n<li>strings (with lexicographic ordering),</li>\n<li>times and dates,</li>\n<li>tuples and sequences thereof (with lexicographic ordering).</li>\n<li>basically any class implementing the <code>__lt__</code> method.</li>\n</ul>\n\n<p>We haven't used any property of the integer numbers beyond that. The fact that we have chosen the upper included bound <em>plus one</em> as the start of the next red section merely reflects the discrete nature of the integer numbers.</p>\n\n<h2>\n  \n  \n  How Bisection comes in\n</h2>\n\n<p>Now, let's have a look at how to check whether a character falls in one of the ranges. Say, we encounter a semicolon character <code>;</code> (ASCII/Unicode code point 003B) and therefore need to check whether the code point 003B is situated in a red section (i.e. outside any of the ranges) or in a black section.</p>\n\n<p>Obviously, scanning the list linearly from left to right cannot be an optimal strategy. Instead, we have to use something that exploits the fact that we operate on sorted data.</p>\n\n<p>The algorithm of choice is <a href=\"https://en.wikipedia.org/wiki/Binary_search\" rel=\"noopener noreferrer\">bisection (binary search)</a>, which comes with the Python standard library in the <a href=\"https://docs.python.org/3/library/bisect.html#module-bisect\" rel=\"noopener noreferrer\"><code>bisect</code></a> module.</p>\n\n<p>If we use <a href=\"https://docs.python.org/3/library/bisect.html#bisect.bisect_right\" rel=\"noopener noreferrer\"><code>bisect.bisect_right</code></a> we get an index such that all elements to the left of the index are below or equal to the argument of <code>bisect_right</code>, and all elements at or right to the index are strictly larger than the argument. Thus the number at the returned index is the smallest lower bound of a red or black section which is larger than the searched number. If the index is even the section beginning at that bound is black, so the section where the searched number falls into is red. This implies that the searched numbee is outside any of the ranges.</p>\n\n<p>If on the other hand the index is odd the number must be part of a black section and hence is inside one of rhe ranges.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">contains_int</span><span class=\"p\">(</span><span class=\"n\">bounds</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">):</span>\n   <span class=\"k\">return</span> <span class=\"nf\">bisect_right</span><span class=\"p\">(</span><span class=\"n\">bounds</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n</code></pre>\n\n</div>\n\n\n\n<p>That's it! Solved! Done! Over! This could have been the end of this blog post.</p>\n\n<h2>\n  \n  \n  Mutable Sets\n</h2>\n\n<p>Admittedly, part of the reason why everything is so simple is the fact that our data already was present as a list of disjunct, non-overlapping ranges. Imagine now, you are the poor soul that has to write the code to aggregate the ranges in this nice format by repeatedly adding and removing different and potentially overlapping parts of the Unicode range or, using the image of the tape measure, changing the colors of different parts of sections.</p>\n\n<p>Adding a range to the set means you have to color a corresponding strip on the taoe measure in black. So boundary points within the new colored section must be removed from our list of bounds. Furthermore, both the start and the end point of the new section may be part of an existing red or black section.</p>\n\n<p>If the existing section has the same color as the new section then the start (resp. end) point of the new section must not be added to the list. If the colors are different, of course, we have to insert the new point to the list.</p>\n\n<p>Again, we can solve the problem using bisection what is new, though, is that we use <code>bisect_left</code> for the start point and <code>bisect_right</code> at the end point of the range to be added.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">add_range</span><span class=\"p\">(</span><span class=\"n\">bounds</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">):</span>\n   <span class=\"n\">new_strip</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n   <span class=\"n\">il</span> <span class=\"o\">=</span> <span class=\"nf\">bisect_left</span><span class=\"p\">(</span><span class=\"n\">bounds</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">)</span>\n   <span class=\"k\">if</span> <span class=\"n\">il</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n      <span class=\"n\">new_strip</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"p\">)</span>\n\n   <span class=\"n\">iu</span> <span class=\"o\">=</span> <span class=\"nf\">bisect_right</span><span class=\"p\">(</span><span class=\"n\">bounds</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">)</span>\n   <span class=\"k\">if</span> <span class=\"n\">iu</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n      <span class=\"n\">span</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">upper</span><span class=\"p\">)</span>\n\n   <span class=\"n\">bounds</span><span class=\"p\">[</span><span class=\"n\">il</span><span class=\"p\">:</span><span class=\"n\">iu</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">new_strip</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Removing a section is as easy as adding one because in our representation we just add a red section instead of adding a black section. So all we have to do is swapping \"even\" and \"odd\".<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">del_range</span><span class=\"p\">(</span><span class=\"n\">bounds</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">):</span>\n   <span class=\"n\">new_strip</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n   <span class=\"n\">il</span> <span class=\"o\">=</span> <span class=\"nf\">bisect_left</span><span class=\"p\">(</span><span class=\"n\">bounds</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">)</span>\n   <span class=\"k\">if</span> <span class=\"n\">il</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n      <span class=\"n\">new_strip</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"p\">)</span>\n\n   <span class=\"n\">iu</span> <span class=\"o\">=</span> <span class=\"nf\">bisect_right</span><span class=\"p\">(</span><span class=\"n\">bounds</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">)</span>\n   <span class=\"k\">if</span> <span class=\"n\">iu</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n      <span class=\"n\">span</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">upper</span><span class=\"p\">)</span>\n\n   <span class=\"n\">bounds</span><span class=\"p\">[</span><span class=\"n\">il</span><span class=\"p\">:</span><span class=\"n\">iu</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">new_strip</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Infinite Ranges\n</h2>\n\n<p>As mentioned earlier, up to know we assumed that the first entry in the list of bounds corresponded to a lower bound of a range, i.e. a color change from red to black. If we maintain the information of the first color change explicitly, we can represent negation, ranges starting at minus infinity or ranges running up to infinity with minimal extra effort.</p>\n\n<h2>\n  \n  \n  Final Thought\n</h2>\n\n<p>I haven't done an extensive search, so I would not be surprised if anyone else has published the same data structure and algorithm before. If you know about such a cross-reference let me know, nd I'll update the links.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Part 1: Training a Neural Network to Detect Coffee First Crack from Audio - An Agentic Development Journey with Warp","url":"https://dev.to/syamaner/part-1-training-a-neural-network-to-detect-coffee-first-crack-from-audio-an-agentic-development-1jei","date":1761598745,"author":"sy","guid":316993,"unread":true,"content":"<p>When it comes to coffee, everyone has their preferences. I usually prefer smooth, naturally sweet coffee with nice fragrance - no bitter or smoky flavours.</p>\n\n<p>There is a challenge though: achieving that perfect roast at home requires split-second timing. Miss the \"first crack\" by 30 seconds? You've got bitter, over-roasted beans. Finish the roast early? Enjoy your grassy / earthy tasting coffee.</p>\n\n<p>This post is about teaching a neural network to detect that critical moment from audio alone.</p>\n\n<p>While home roasting has been niche, over the recent years there are more options available for roasting coffee at home. These devices usually have smaller capacity ~ 250 / 500g and compact and lightweight enough to run over a counter.</p>\n\n<p>To achieve my desired roast level I generally aim for a light / medium roast which requires development phase to be about 10% - 15% of the roast time. Development phase is the duration from the first crack starting until the end of roast where beans are ejected from the roaster.</p>\n\n<p>First crack is the audible popping sound that occurs when coffee beans rapidly expand and release moisture and CO2 due to the buildup of internal pressure during roasting. Many light roast profiles end just after first crack begins, while medium roasts continue for 1-3 minutes beyond this point. On my setup, first crack typically begins around 170°C-180°C, and I aim to finish the roast at approximately 195°C. This gives me 1-3 minutes of development time after first crack starts. This value is based on my observations on a Hottop KN8828B-2K+ home roaster. </p>\n\n<p>Detecting the First Crack event is important for the end goal as we need to adjust heat and fan from that point to slow down the roast and stretch the development phase.</p>\n\n<p>The current series of posts will cover the following:</p>\n\n<ul>\n<li>Training a Neural Network to Detect Coffee First Crack from Audio - An Agentic Development Journey</li>\n<li>Part 2: Building an MCP server to control a home coffee roaster</li>\n<li>Part 3: Building a Coffee roasting Agent with Aspire to automate coffee roasting</li>\n</ul>\n\n<p>I have been recording coffee roasting audio during summer and have been looking into fine-tuning an existing model to be able to train and run inference on an arm based laptop. The task is performing binary classification on an audio stream to identify either first crack happened in the sample or not. For example a common baseline benchmark is making a random choice to predict class a or b (coin toss) which makes the baseline random performance 50% for any binary classification problem when using random guessing. Our goal is to beat this with minimal data available for fine-tuning.</p>\n\n<p>My initial objective has been utilising a pre-trained AST (Audio Spectrogram Transformer) model from Hugging face that was originally trained on AudioSet and fine-tuning it for first crack vs not first crack binary classification task. In this approach, the model architecture remains the same, but we are updating the weights through training on our coffee roasting audio data.</p>\n\n<p>To tackle this challenge systematically, I decided to leverage modern development tools and adopted an AI-first development approach. In the next section, the details of the setup will be discussed.</p>\n\n\n\n\n<p><strong>📊 TL;DR</strong></p>\n\n<ul>\n<li>\n<strong>Problem</strong>: Detect coffee \"first crack\" from audio to optimize roast profiles</li>\n<li>\n<strong>Solution</strong>: Fine-tune MIT's AST model on 9 recording sessions</li>\n<li>\n<strong>Results</strong>: 93.3% accuracy, 0.986 ROC-AUC with minimal data</li>\n<li>\n<strong>Tools</strong>: Warp AI, Label Studio, PyTorch, Hugging Face</li>\n<li>\n<strong>Next</strong>: Part 2 builds MCP servers, Part 3 creates autonomous roasting agent</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  Why Automated First Crack Detection?\n</h2>\n\n<p>Manual first crack detection requires constant attention during a 10-12 minute roast. Environmental factors (noisy extractors, ambient sounds) can mask the cracks and pops. </p>\n\n<p>This project aims to:</p>\n\n<ul>\n<li>Free the roaster to multitask during the roast</li>\n<li>Provide consistent detection regardless of ambient noise</li>\n<li>Enable data-driven roast profile development</li>\n<li>Lay groundwork for fully autonomous roasting (Part 3)</li>\n</ul>\n\n<h3>\n  \n  \n  🤖 Warp AI Contributions\n</h3>\n\n<p>Throughout development, Warp's AI agent:</p>\n\n<ul>\n<li>Suggested Label Studio over manual Audacity annotation</li>\n<li>Generated data preprocessing pipeline architecture</li>\n<li>Created train, test eval split logic</li>\n<li>Debugged overfitting with annotation strategy advice</li>\n<li>Auto-generated evaluation scripts</li>\n</ul>\n\n<h2>\n  \n  \n  Setting Up the Development Environment with Warp\n</h2>\n\n<p>Having used Warp at work for the past few months and how it transformed my development flow, it was a natural choice for this project.</p>\n\n<p>I have started with creating a <a href=\"https://github.com/syamaner/bean-agent/blob/main/README.md\" rel=\"noopener noreferrer\">readme file</a> and shared my starting requirements and setup. I have included links to the tutorials of interest, the libraries I intend to use and the model I would like to use for fine-tuning. </p>\n\n<p>Warp's AI agent helped me structure the project, suggest tools, and iterate on the implementation approach from training scripts, evaluation to inference and manual testing scripts.</p>\n\n<h2>\n  \n  \n  Project Evolution and Documentation\n</h2>\n\n<p>The readme above was pretty much all I shared with Warp and then asked to focus on Phase 1 and create an <a href=\"https://github.com/syamaner/bean-agent/blob/main/PHASE1_PLAN.md\" rel=\"noopener noreferrer\">implementation plan for Phase 1</a>.</p>\n\n<p>I have lost the recordings I made over summer and therefore I had to start with minimal data - only 4 recording sessions ~10 minutes each. This was enough to build the initial workflow with Warp. </p>\n\n<h2>\n  \n  \n  Data Collection Strategy\n</h2>\n\n<p>For data collection, I have used a USB microphone pointed towards the roaster and recording each roasting session. A session takes about 10 - 12 minutes. At the time of starting, I only had 4 recording sessions available. </p>\n\n<p>Recordings have the following properties:</p>\n\n<ul>\n<li>Sample rate: 44.1kHz (recommended for compatibility)</li>\n<li>Format: WAV (uncompressed)</li>\n<li>Bit depth: 16-bit minimum</li>\n<li>Channels: Mono sufficient</li>\n<li>Recording duration: Full roast cycle (10-15 minutes)</li>\n</ul>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F9whxv14zk5lmdb0la5pp.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F9whxv14zk5lmdb0la5pp.jpg\" alt=\"Roasting session recording\" width=\"800\" height=\"600\"></a></p>\n\n<h2>\n  \n  \n  Data Annotation and Labeling\n</h2>\n\n<p>When I started, I was intending to do manual annotation using a free and open source audio editor and recording application Audacity. However Warp agent pointed me towards Label Studio and even provided the configuration snippets and described how to use it.</p>\n\n<p>With the initial 4 recordings, I have used sparse labels and proceeded to training and evaluation. This has led to overfitting and the results were not reliable.</p>\n\n<h3>\n  \n  \n  Initial Results with Sparse Labeling\n</h3>\n\n<p>With only 4 recording sessions and sparse annotation (marking only obvious first crack events), the model showed signs of overfitting:</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Metric</th>\n<th>Value</th>\n<th>Issue</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Validation Accuracy</td>\n<td>100% (epochs 2-7)</td>\n<td>Perfect scores = memorisation</td>\n</tr>\n<tr>\n<td>Training Accuracy</td>\n<td>100% (epochs 3-7)</td>\n<td>No learning after epoch 3</td>\n</tr>\n<tr>\n<td>Test Precision</td>\n<td>75%</td>\n<td>High false positive rate</td>\n</tr>\n<tr>\n<td>Class Imbalance</td>\n<td>15% / 85%</td>\n<td>Severe imbalance</td>\n</tr>\n</tbody>\n</table></div>\n\n<p><strong>The problem</strong>: The model memorised the limited training data rather than learning generalisable acoustic features of first crack.</p>\n\n<p><strong>The solution</strong>: Expanding to 9 sessions with balanced annotation (equal first_crack and no_first_crack samples) dramatically improved precision from 75% → 95.2% while maintaining excellent recall.</p>\n\n<p>As I had increased the recordings to 9, I spent more time annotating and aimed at building a balanced data with enough samples for first crack and no first crack. Each annotated sample was 3 - 6 seconds. </p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F2495dlcmnjc0snqkrt6r.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F2495dlcmnjc0snqkrt6r.png\" alt=\"annotation example\" width=\"720\" height=\"377\"></a></p>\n\n<p>Warp has also provided the configuration snippet for Label Studio<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight xml\"><code><span class=\"nt\">&lt;View&gt;</span>\n  <span class=\"nt\">&lt;Header</span> <span class=\"na\">value=</span><span class=\"s\">\"Coffee Roast First Crack Detection\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;Text</span> <span class=\"na\">name=</span><span class=\"s\">\"instructions\"</span> <span class=\"na\">value=</span><span class=\"s\">\"Listen to the audio and mark regions where first crack occurs. Mark other regions as no_first_crack.\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;Audio</span> <span class=\"na\">name=</span><span class=\"s\">\"audio\"</span> <span class=\"na\">value=</span><span class=\"s\">\"$audio\"</span> <span class=\"na\">zoom=</span><span class=\"s\">\"true\"</span> <span class=\"na\">speed=</span><span class=\"s\">\"true\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;Labels</span> <span class=\"na\">name=</span><span class=\"s\">\"label\"</span> <span class=\"na\">toName=</span><span class=\"s\">\"audio\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;Label</span> <span class=\"na\">value=</span><span class=\"s\">\"no_first_crack\"</span> <span class=\"na\">background=</span><span class=\"s\">\"#3498db\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;Label</span> <span class=\"na\">value=</span><span class=\"s\">\"first_crack\"</span> <span class=\"na\">background=</span><span class=\"s\">\"#e74c3c\"</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/Labels&gt;</span>\n  <span class=\"nt\">&lt;TextArea</span> <span class=\"na\">name=</span><span class=\"s\">\"notes\"</span> <span class=\"na\">toName=</span><span class=\"s\">\"audio\"</span> \n            <span class=\"na\">placeholder=</span><span class=\"s\">\"Optional notes about this region (e.g., 'very clear pops', 'subtle', etc.)\"</span>\n            <span class=\"na\">editable=</span><span class=\"s\">\"true\"</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/View&gt;</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Data Preprocessing Pipeline\n</h2>\n\n<p>Coffee roasting is driven by many variables ranging from ambient temperature to the bean type, machine, Heating type and so on. A basic electric roaster like the one used here is slow to respond to change in controls as the heating element needs to warm up and cool down depending on the command. Accurately identifying the current phase of the roast is crucial and this can be done by audio analysis, visual, a combination of time and temperature to varying degree of success. In my manual roasts, recently I have been getting better results by adjusting the parameters once first crack is reached and therefore decided to fine tune a model to detect these. </p>\n\n<p>So given we have a microphone pointing at the roaster during roasting process and a relatively controlled environment, how do we get the recording and convert it into the format needed to support our fine-tuning process.</p>\n\n<h3>\n  \n  \n  Challenges:\n</h3>\n\n<ul>\n<li>Raw audio files are captured from multiple roasting sessions of varying length.\n\n<ul>\n<li>Additionally ~ 10 previously recorded sessions lost accidentally.</li>\n</ul>\n\n\n</li>\n\n<li>First crack events are sparse. Happens around about 12-25% of the whole duration. And they are also not continuous.\n\n<ul>\n<li>This leads to an imbalance in samples.</li>\n</ul>\n\n\n</li>\n\n<li>We need a workflow and a pipeline to process these and end up with a balance dates for training evaluation and test.</li>\n\n<li>At the beginning we also have a limited number of sessions recorded (9 at the time of writing)</li>\n\n<li>Labelling should be easy and repeatable to avoid user errors.</li>\n\n</ul>\n\n<h3>\n  \n  \n  Labelling Process\n</h3>\n\n<p>While the fine tuning approach, and the base model was instructed to Warp, Label Studio was not in the original requirements. And Warp has not only recommended using Label Studio but also provided detailed steps about running and configuring and get going. These worked out of the box.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>┌─────────────────────────────────────────────────────────────────┐\n│                    Label Studio (Web UI)                        │\n│          Manually annotate audio files                          │\n│          Mark \"first crack\" / \"not first crack\" time regions    |\n└────────────────────────┬────────────────────────────────────────┘\n                         │\n                         │ Export JSON\n                         ▼\n        📄 project-1-at-2025-10-18-20-44-9bc9cd1d.json\n                         │\n                         │\n    ╔════════════════════▼═══════════════════════════════════════╗\n    ║  STEP 1: convert_labelstudio_export.py                     ║\n    ║  • Strip hash prefixes from filenames                      ║\n    ║  • Compute audio durations                                 ║\n    ║  • Extract labeled time regions from the raw files         ║\n    ║  • Output one JSON per audio file                          ║\n    ╚════════════════════╦═══════════════════════════════════════╝\n                         │\n                         ▼\n              📁 data/labels/\n              ├── roast-1.json\n              ├── roast-2.json\n              └── roast-3.json\n                         │\n                         │\n    ╔════════════════════▼═══════════════════════════════════════╗\n    ║  STEP 2: audio_processor.py                                ║\n    ║  • Read annotation JSONs                                   ║\n    ║  • Load raw audio files (44.1kHz mono)                     ║\n    ║  • Extract time segments (start→end)                       ║\n    ║  • Save chunks as WAV files by label                       ║\n    ║  • Generate processing_summary.md                          ║\n    ╚════════════════════╦═══════════════════════════════════════╝\n                         │\n                         ▼\n              📁 data/processed/\n              ├── first_crack/\n              │   ├── roast-1_chunk_000.wav\n              │   └── roast-1_chunk_001.wav\n              └── no_first_crack/\n                  ├── roast-1_chunk_002.wav\n                  └── roast-2_chunk_000.wav\n                         │\n                         │\n    ╔════════════════════▼═══════════════════════════════════════╗\n    ║  STEP 3: dataset_splitter.py                               ║\n    ║  • Collect all chunks by label                             ║\n    ║  • Train, validation and test split                        ║\n    ║    (70% train, 15% val, 15% test)                          ║ \n    ║  • Copy files to split directories                         ║\n    ║  • Generate split_report.md                                ║\n    ╚════════════════════╦═══════════════════════════════════════╝\n                         │\n                         ▼\n              📁 data/splits/\n              ├── train/     (70%)\n              │   ├── first_crack/\n              │   └── no_first_crack/\n              ├── val/       (15%)\n              │   ├── first_crack/\n              │   └── no_first_crack/\n              └── test/      (15%)\n                  ├── first_crack/\n                  └── no_first_crack/\n</code></pre>\n\n</div>\n\n\n\n<p>Once the steps above are complete, we are ready for training and evaluation.</p>\n\n<h2>\n  \n  \n  Dataset Overview\n</h2>\n\n<p><strong>Total Samples:</strong> 298 chunks from 9 roasting sessions</p>\n\n<h3>\n  \n  \n  Overall Class Balance\n</h3>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Count</th>\n<th>Percentage</th>\n<th>Avg Duration</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>first_crack</strong></td>\n<td>145</td>\n<td>48.7%</td>\n<td>4.5s</td>\n</tr>\n<tr>\n<td><strong>no_first_crack</strong></td>\n<td>153</td>\n<td>51.3%</td>\n<td>4.0s</td>\n</tr>\n</tbody>\n</table></div>\n\n<h3>\n  \n  \n  Split Distribution\n</h3>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Split</th>\n<th>Total Samples</th>\n<th>first_crack</th>\n<th>no_first_crack</th>\n<th>Split Ratio</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Train</strong></td>\n<td>208</td>\n<td>101 (48.6%)</td>\n<td>107 (51.4%)</td>\n<td>69.8%</td>\n</tr>\n<tr>\n<td><strong>Validation</strong></td>\n<td>45</td>\n<td>22 (48.9%)</td>\n<td>23 (51.1%)</td>\n<td>15.1%</td>\n</tr>\n<tr>\n<td><strong>Test</strong></td>\n<td>45</td>\n<td>22 (48.9%)</td>\n<td>23 (51.1%)</td>\n<td>15.1%</td>\n</tr>\n</tbody>\n</table></div>\n\n<h3>\n  \n  \n  Class Balance Across Splits\n</h3>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Train</th>\n<th>Validation</th>\n<th>Test</th>\n<th>Total</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>first_crack</strong></td>\n<td>101</td>\n<td>22</td>\n<td>22</td>\n<td>145</td>\n</tr>\n<tr>\n<td><strong>no_first_crack</strong></td>\n<td>107</td>\n<td>23</td>\n<td>23</td>\n<td>153</td>\n</tr>\n</tbody>\n</table></div>\n\n<h3>\n  \n  \n  Per-Session Breakdown\n</h3>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Recording Session</th>\n<th>first_crack</th>\n<th>no_first_crack</th>\n<th>Total</th>\n<th>Balance</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>25-10-19_1103-costarica-hermosa-5</td>\n<td>13</td>\n<td>14</td>\n<td>27</td>\n<td>48.1% / 51.9%</td>\n</tr>\n<tr>\n<td>25-10-19_1136-brazil-1</td>\n<td>19</td>\n<td>19</td>\n<td>38</td>\n<td>50.0% / 50.0%</td>\n</tr>\n<tr>\n<td>25-10-19_1204-brazil-2</td>\n<td>20</td>\n<td>15</td>\n<td>35</td>\n<td>57.1% / 42.9%</td>\n</tr>\n<tr>\n<td>25-10-19_1236-brazil-3</td>\n<td>18</td>\n<td>17</td>\n<td>35</td>\n<td>51.4% / 48.6%</td>\n</tr>\n<tr>\n<td>25-10-19_1315-brazil4</td>\n<td>15</td>\n<td>14</td>\n<td>29</td>\n<td>51.7% / 48.3%</td>\n</tr>\n<tr>\n<td>roast-1-costarica-hermosa-hp-a</td>\n<td>16</td>\n<td>17</td>\n<td>33</td>\n<td>48.5% / 51.5%</td>\n</tr>\n<tr>\n<td>roast-2-costarica-hermosa-hp-a</td>\n<td>16</td>\n<td>19</td>\n<td>35</td>\n<td>45.7% / 54.3%</td>\n</tr>\n<tr>\n<td>roast-3-costarica-hermosa-hp-a</td>\n<td>13</td>\n<td>19</td>\n<td>32</td>\n<td>40.6% / 59.4%</td>\n</tr>\n<tr>\n<td>roast-4-costarica-hermosa-hp-a</td>\n<td>15</td>\n<td>19</td>\n<td>34</td>\n<td>44.1% / 55.9%</td>\n</tr>\n</tbody>\n</table></div>\n\n<p><strong>Key Observations:</strong></p>\n\n<ul>\n<li>Nearly balanced dataset (48.7% vs 51.3%)</li>\n<li>Stratified split maintains balance across train/val/test</li>\n<li>9 recording sessions, mix of Costa Rica and Brazil beans</li>\n<li>Average chunk duration: 4.2 seconds</li>\n<li>Total annotated audio: ~21 minutes</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  Evaluation Metrics\n</h2>\n\n<p>For this binary classification task, we use multiple metrics to evaluate the model performance:</p>\n\n<h3>\n  \n  \n  Accuracy\n</h3>\n\n<p>The proportion of correct predictions (true positives and true negatives) among all predictions.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Accuracy = (TP + TN) / (TP + TN + FP + FN)\n</code></pre>\n\n</div>\n\n\n\n<p>This metric provides an overall sense of model correctness. However, accuracy alone can be misleading with imbalanced datasets.</p>\n\n<h3>\n  \n  \n  Precision\n</h3>\n\n<p>Of all samples predicted as <code>first_crack</code>, what proportion actually were first crack events?<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Precision = TP / (TP + FP)\n</code></pre>\n\n</div>\n\n\n\n<p>High precision means fewer false alarms. Critical when we don't want to prematurely adjust roaster settings based on incorrect detections.</p>\n\n<h3>\n  \n  \n  Recall (Sensitivity)\n</h3>\n\n<p>Of all actual <code>first_crack</code> events, what proportion did the model correctly identify?<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Recall = TP / (TP + FN)\n</code></pre>\n\n</div>\n\n\n\n<p>High recall means we catch most first crack events. Missing first crack (false negative) is likely to result in over-roasting.</p>\n\n<h3>\n  \n  \n  F1 Score\n</h3>\n\n<p>The harmonic mean of precision and recall, providing a single balanced metric.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>F1 = 2 × (Precision × Recall) / (Precision + Recall)\n</code></pre>\n\n</div>\n\n\n\n<p>Balances precision and recall. Useful when both false positives and false negatives are costly.<br>\nIn case of roasting, these could mean under roasted or dark roast which is not desirable from this project perspective.</p>\n<h3>\n  \n  \n  ROC-AUC (Area Under the Receiver Operating Characteristic Curve)\n</h3>\n\n<p>Measures the model's ability to distinguish between classes across all classification thresholds.</p>\n\n<ul>\n<li>\n<strong>ROC Curve:</strong> Plots True Positive Rate (Recall) vs False Positive Rate at various thresholds</li>\n<li>\n<strong>AUC:</strong> Area under this curve (1.0 = perfect, 0.5 = random guessing)</li>\n</ul>\n\n<p>Threshold-independent metric showing overall classification performance. Values above 0.8 indicate good discrimination.</p>\n<h3>\n  \n  \n  Confusion Matrix\n</h3>\n\n<p>The confusion matrix visualises the model's predictions versus actual labels:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>                    Predicted\n                    first_crack  no_first_crack\nActual  first_crack      TP            FN\n        no_first_crack   FP            TN\n</code></pre>\n\n</div>\n\n\n\n<p>Where:</p>\n\n<ul>\n<li>\n<strong>TP (True Positive):</strong> Correctly predicted first crack</li>\n<li>\n<strong>TN (True Negative):</strong> Correctly predicted no first crack</li>\n<li>\n<strong>FP (False Positive):</strong> Predicted first crack, but was actually no first crack (false alarm)</li>\n<li>\n<strong>FN (False Negative):</strong> Predicted no first crack, but was actually first crack (missed detection)</li>\n</ul>\n\n<h2>\n  \n  \n  Training and Evaluation\n</h2>\n\n<p>With our dataset properly split and balanced and or metrics defined, we're ready to fine-tune the Audio Spectrogram Transformer (AST) model for first crack detection.</p>\n\n<h3>\n  \n  \n  Model Architecture\n</h3>\n\n<p>The project uses MIT's pre-trained AST model (<code>MIT/ast-finetuned-audioset-10-10-0.4593</code>) from Hugging Face, which was originally trained on AudioSet. The model architecture:</p>\n\n<ul>\n<li>\n<strong>Input</strong>: Audio spectrograms (16kHz, 10-second windows)</li>\n<li>\n<strong>Architecture</strong>: Vision Transformer adapted for audio</li>\n<li>\n<strong>Transfer Learning</strong>: We keep the pre-trained weights and fine-tune for binary classification</li>\n<li>\n<strong>Output</strong>: Two classes - <code>first_crack</code> vs <code>no_first_crack</code>\n</li>\n</ul>\n\n<h3>\n  \n  \n  Training Configuration\n</h3>\n\n<p>The training process uses the following configuration (defined in <code>models/config.py</code>):<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">TRAINING_CONFIG</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"sh\">'</span><span class=\"s\">batch_size</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">learning_rate</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mf\">1e-4</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">num_epochs</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">device</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">mps</span><span class=\"sh\">'</span><span class=\"p\">,</span>  <span class=\"c1\"># Apple Silicon GPU\n</span>    <span class=\"sh\">'</span><span class=\"s\">sample_rate</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mi\">16000</span><span class=\"p\">,</span>\n    <span class=\"sh\">'</span><span class=\"s\">target_length_sec</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"mf\">10.0</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Key training features:</p>\n\n<ul>\n<li>\n<strong>Class-weighted loss</strong>: Addresses class imbalance</li>\n<li>\n<strong>AdamW optimizer</strong>: With cosine annealing learning rate schedule</li>\n<li>\n<strong>Early stopping</strong>: Based on validation F1 score</li>\n<li>\n<strong>TensorBoard logging</strong>: Real-time metrics visualization</li>\n</ul>\n\n<h3>\n  \n  \n  Training Process\n</h3>\n\n<p>To start training:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>./venv/bin/python src/training/train.py <span class=\"se\">\\</span>\n  <span class=\"nt\">--data-dir</span> data/splits <span class=\"se\">\\</span>\n  <span class=\"nt\">--experiment-name</span> baseline_v1\n</code></pre>\n\n</div>\n\n\n\n<p>The training script:</p>\n\n<ol>\n<li>Loads train/val data using <code>AudioDataset</code> (automatic resampling to 16kHz)</li>\n<li>Applies class weights to handle imbalance</li>\n<li>Trains with early stopping (patience: 10 epochs)</li>\n<li>Saves best model based on validation F1 score</li>\n<li>Writes checkpoints to <code>experiments/runs/&lt;experiment_name&gt;/</code>\n</li>\n</ol>\n\n<h3>\n  \n  \n  Results: Exceeding Expectations\n</h3>\n\n<p>With only <strong>9 recording sessions</strong> (~21 minutes of annotated audio):</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Metric</th>\n<th>Baseline (Random)</th>\n<th>Our Model</th>\n<th>Improvement</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Accuracy</td>\n<td>50.0%</td>\n<td><strong>93.3%</strong></td>\n<td>+86.6%</td>\n</tr>\n<tr>\n<td>Precision</td>\n<td>50.0%</td>\n<td><strong>95.2%</strong></td>\n<td>+90.4%</td>\n</tr>\n<tr>\n<td>Recall</td>\n<td>50.0%</td>\n<td><strong>90.9%</strong></td>\n<td>+81.8%</td>\n</tr>\n<tr>\n<td>F1 Score</td>\n<td>50.0%</td>\n<td><strong>93.0%</strong></td>\n<td>+86.0%</td>\n</tr>\n<tr>\n<td>ROC-AUC</td>\n<td>0.50</td>\n<td><strong>0.986</strong></td>\n<td>+97.2%</td>\n</tr>\n</tbody>\n</table></div>\n\n<p><strong>Translation</strong>: The model correctly identifies first crack 93 times out of 100, <br>\nwith only 1 false alarm and 2 missed detections across the test set.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Confusion Matrix\n                    Predicted\n                    no_first_crack  first_crack\nActual  no_first_crack     22            1\n        first_crack         2           20\n</code></pre>\n\n</div>\n\n\n\n<p>This is excellent performance for a model trained on just 9 recording sessions! The higher overlap (70% vs previous experiments) likely contributed to the improved results. This demonstrates the power of transfer learning with pre-trained audio models.</p>\n\n<p>Performance breakdown:<br>\n•  Only 1 false alarm (FP) - down from 2<br>\n•  Only 2 missed detections (FN) - same as before<br>\n•  22/23 correct no_first_crack predictions (95.7%)<br>\n•  20/22 correct first_crack predictions (90.9%)</p>\n\n<p>This balanced performance is crucial for real-time roasting control where both missing first crack and triggering false adjustments have consequences.</p>\n<h3>\n  \n  \n  Evaluation on Test Set\n</h3>\n\n<p>To evaluate the final model:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>./venv/bin/python src/training/evaluate.py <span class=\"se\">\\</span>\n  <span class=\"nt\">--checkpoint</span> experiments/final_model/model.pt <span class=\"se\">\\</span>\n  <span class=\"nt\">--test-dir</span> data/splits/test\n</code></pre>\n\n</div>\n\n\n\n<p>This generates:</p>\n\n<ul>\n<li>Classification report with per-class metrics</li>\n<li>Confusion matrix visualization</li>\n<li>ROC curve analysis</li>\n<li>Detailed results saved to text files</li>\n</ul>\n\n<h3>\n  \n  \n  Key Learnings\n</h3>\n\n<p><strong>What Worked:</strong></p>\n\n<ul>\n<li>Transfer learning from AudioSet significantly reduced data requirements</li>\n<li>Balanced annotation (equal first_crack/no_first_crack samples) improved performance</li>\n<li>10-second windows captured enough context for accurate detection</li>\n<li>Class-weighted loss handled remaining imbalance effectively</li>\n</ul>\n\n<p><strong>Challenges:</strong></p>\n\n<ul>\n<li>Initial sparse labelling with only 4 sessions led to overfitting</li>\n<li>Limited training data (9 sessions) required careful annotation strategy</li>\n<li>Environmental noise kept to a minimum under a controlled environment</li>\n</ul>\n\n<p><strong>Future Improvements:</strong></p>\n\n<ul>\n<li>Collect more diverse roasting sessions (different beans, temperatures, extractor configuration)</li>\n<li>Experiment with data augmentation (time stretching, pitch shifting)</li>\n<li>Test shorter inference windows for faster real-time detection</li>\n</ul>\n\n<h2>\n  \n  \n  Real-Time Inference\n</h2>\n\n<p>The trained model can now detect first crack in real-time from either audio files or live microphone input:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># File-based detection</span>\n./venv/bin/python src/inference/first_crack_detector.py <span class=\"se\">\\</span>\n  <span class=\"nt\">--audio</span> data/raw/roast-1.wav <span class=\"se\">\\</span>\n  <span class=\"nt\">--checkpoint</span> experiments/final_model/model.pt\n\n<span class=\"c\"># Live microphone detection</span>\n./venv/bin/python src/inference/first_crack_detector.py <span class=\"se\">\\</span>\n  <span class=\"nt\">--microphone</span> <span class=\"se\">\\</span>\n  <span class=\"nt\">--checkpoint</span> experiments/final_model/model.pt\n</code></pre>\n\n</div>\n\n\n\n<p>The detector uses sliding window inference with \"pop-confirmation\" logic:</p>\n\n<ul>\n<li>Analyzes 10-second audio windows with 70% overlap (3-second hop between windows)</li>\n<li>Requires minimum of 3 positive detections (pops) within a 30-second confirmation window</li>\n<li>Maintains detection history to filter false positives</li>\n<li>Returns timestamp in MM:SS format when first crack is confirmed</li>\n</ul>\n\n<p>This forms the foundation for Part 2, where we'll wrap this detector in an MCP server for integration with AI agents.</p>\n\n<h3>\n  \n  \n  Real-Time Performance\n</h3>\n\n<p>Hardware: Apple M3 Max (MPS - Metal Performance Shaders)</p>\n\n<p>Speed Metrics</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Metric</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Real-Time Factor (RTF)</td>\n<td>87.64x</td>\n</tr>\n<tr>\n<td>Per-window Latency</td>\n<td>70-90ms</td>\n</tr>\n<tr>\n<td>Throughput</td>\n<td>~18 windows/second</td>\n</tr>\n<tr>\n<td>Processing Speed</td>\n<td>1 hour of audio in ~41 seconds</td>\n</tr>\n</tbody>\n</table></div>\n\n<p>Batch Inference Results</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>File</th>\n<th>Duration</th>\n<th>Processing Time</th>\n<th>RTF</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>roast-1</td>\n<td>10:39 (639.7s)</td>\n<td>7.67s</td>\n<td>83.46x</td>\n</tr>\n<tr>\n<td>roast-2</td>\n<td>10:16 (616.6s)</td>\n<td>6.92s</td>\n<td>89.06x</td>\n</tr>\n<tr>\n<td>roast-3</td>\n<td>10:25 (625.6s)</td>\n<td>7.05s</td>\n<td>88.74x</td>\n</tr>\n<tr>\n<td>roast-4</td>\n<td>9:44 (584.8s)</td>\n<td>6.55s</td>\n<td>89.29x</td>\n</tr>\n<tr>\n<td>Total</td>\n<td>41.1 min</td>\n<td>28.2s</td>\n<td>87.64x</td>\n</tr>\n</tbody>\n</table></div>\n\n<p>Latency Breakdown (per 10s window)</p>\n\n<ul>\n<li> Audio loading: 1-2ms</li>\n<li> Feature extraction: 20-30ms</li>\n<li> Model inference: 50-60ms</li>\n<li> Total: ~70-90ms per window</li>\n</ul>\n\n<p>Resource Usage</p>\n\n<ul>\n<li> CPU Usage: 5-10% during inference</li>\n<li> Memory: ~1.5GB for model + 100MB working</li>\n<li> GPU Memory: ~2GB on MPS</li>\n<li> Latency overhead: 0.9% (90ms used / 10,000ms available)</li>\n</ul>\n\n<p>Key Insight: The model processes audio 87x faster than real-time, providing a 111x headroom for real-time streaming detection. A 10-minute roast is fully processed in just ~7 seconds, making real-time monitoring easily achievable even with additional processing overhead.</p>\n\n<h2>\n  \n  \n  The Warp Advantage\n</h2>\n\n<p>Throughout this project, Warp's AI agent was instrumental in:</p>\n\n<p><strong>Rapid Prototyping</strong> - From idea to working pipeline in hours, not days<br><br>\n<strong>Best Practice Guidance</strong> - Suggested Label Studio and evaluation workflows<br>\n<strong>Code Generation</strong> - Created complete scripts for data processing, training, and inference<br><br>\n<strong>Iterative Refinement</strong> - Helped debug overfitting issues and improve annotation strategy<br><br>\n<strong>Documentation</strong> - Generated summaries, reports, and README documentation automatically</p>\n\n<p>The development workflow felt more like pair programming with an engineer who knew PyTorch and audio processing.</p>\n\n<h2>\n  \n  \n  What's Next?\n</h2>\n\n<p>In <strong>Part 2</strong>, we'll build MCP (Model Context Protocol) servers to:</p>\n\n<ul>\n<li>Expose the first crack detector as an API</li>\n<li>Create a control interface for the Hottop roaster</li>\n</ul>\n\n<p>In <strong>Part 3</strong>, we'll use .NET Aspire to orchestrate an intelligent roasting agent that:</p>\n\n<ul>\n<li>Monitors audio in real-time</li>\n<li>Detects first crack automatically</li>\n<li>Adjusts roaster parameters (heat/fan) to achieve target roast profiles</li>\n<li>Logs and learns from each roasting session</li>\n</ul>\n\n<h2>\n  \n  \n  What's Next?\n</h2>\n\n<p>The first crack detector is working well, but it's just the beginning.</p>\n\n<p>In <strong>Part 2: Building MCP Servers for Coffee Roasting</strong>, we'll:</p>\n\n<ul>\n<li>Wrap the detector in an MCP server for real-time streaming</li>\n<li>Build a second MCP server to control the Hottop roaster (heat, fan, cooling)</li>\n<li>Implement authentication and safety controls</li>\n<li>Test end-to-end detection → action loop</li>\n</ul>\n\n<p>In <strong>Part 3: Creating an Autonomous Roasting Agent</strong>, we'll bring it all together:</p>\n\n<ul>\n<li>Use .NET Aspire to orchestrate multiple MCP servers</li>\n<li>Build AI agents that make real-time roasting decisions</li>\n<li>Implement safety rails and human override</li>\n<li>Roast a batch fully autonomously and compare against manual profiles</li>\n</ul>\n\n<p><strong>The goal</strong>: Press start, add beans when ready, hand off and observe and enjoy perfectly roasted coffee.</p>\n\n<p><em>Follow along on <a href=\"https://github.com/syamaner/bean-agent\" rel=\"noopener noreferrer\">GitHub</a> or subscribe for Part 2!</em></p>\n\n\n\n\n<h2>\n  \n  \n  Resources\n</h2>\n\n<p><strong>Project &amp; Tools:</strong></p>\n\n<ul>\n<li>\n<a href=\"https://github.com/syamaner/bean-agent\" rel=\"noopener noreferrer\">Project Repository</a> - Complete code and documentation</li>\n<li>\n<a href=\"https://warp.dev\" rel=\"noopener noreferrer\">Warp Terminal</a> - AI-assisted development environment</li>\n<li>\n<a href=\"https://labelstud.io/\" rel=\"noopener noreferrer\">Label Studio</a> - Audio annotation tool</li>\n</ul>\n\n<p><strong>Model &amp; ML:</strong></p>\n\n<ul>\n<li>\n<a href=\"https://huggingface.co/MIT/ast-finetuned-audioset-10-10-0.4593\" rel=\"noopener noreferrer\">Audio Spectrogram Transformer (AST)</a> - Pre-trained model</li>\n<li><a href=\"https://huggingface.co/docs/transformers/en/model_doc/audio-spectrogram-transformer\" rel=\"noopener noreferrer\">AST Documentation</a></li>\n<li><a href=\"https://towardsdatascience.com/fine-tune-the-audio-spectrogram-transformer-with-transformers-73333c9ef717/\" rel=\"noopener noreferrer\">Fine-Tuning AST Tutorial</a></li>\n<li>\n<a href=\"https://arxiv.org/abs/2104.01778\" rel=\"noopener noreferrer\">Original AST Paper</a> - Gong et al., 2021</li>\n</ul>\n\n<p><strong>Audio Processing:</strong></p>\n\n<ul>\n<li>\n<a href=\"https://librosa.org/\" rel=\"noopener noreferrer\">LibROSA</a> - Audio analysis library</li>\n<li>\n<a href=\"https://pytorch.org/audio/stable/index.html\" rel=\"noopener noreferrer\">PyTorch Audio</a> - Audio I/O and transforms</li>\n</ul>\n\n<p><strong>Coffee Roasting Context:</strong></p>\n\n<ul>\n<li>\n<a href=\"https://library.sweetmarias.com/first-crack-faq-what-is-first-crack-what-is-second-crack/\" rel=\"noopener noreferrer\">First Crack Explained</a> - For readers unfamiliar with roasting</li>\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-57n5","date":1761595816,"author":"Vibe YouTube","guid":316992,"unread":true,"content":"<h1>\n  \n  \n  Build a Python AI Agent in 10 Minutes\n</h1>\n\n<p>Dive into a super-fast walkthrough showing you how to spin up a Python AI agent from scratch—installing dependencies, setting your OpenAI API key, wiring up imports and tools, and tying it all together with a language model and driver code. You’ll even get handy timestamps to zip right to install/setup, defining tools, building the agent logic, and testing it in action.</p>\n\n<p>Along the way, you’ll find links to the full code on GitHub, the YouTube walkthrough, a free Notion trial, and an invite to Tim’s DevLaunch mentorship program for those ready to level up with real-world projects and job-ready skills.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=gaGaPpnexxA\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How to add Splashscreen and Presplash screen in Renpy","url":"https://dev.to/rachelombok/how-to-add-splashscreen-and-presplash-screen-in-renpy-4bl6","date":1761594304,"author":"Rachel Ombok","guid":316972,"unread":true,"content":"<p>This article is a tutorial explaining how to specify a splashscreen and presplash screen in <a href=\"https://www.renpy.org/\" rel=\"noopener noreferrer\">Renpy</a>. Because this took me almost a whole weekend to figure out I decided to make this post so maybe someone else can save some time doing this :)</p>\n\n<h2>\n  \n  \n  What is a splashscreen? (or presplash screen)\n</h2>\n\n<p>From Renpy themselves; “A <a href=\"https://www.renpy.org/doc/html/splashscreen_presplash.html#adding-a-splashscreen\" rel=\"noopener noreferrer\">splashscreen</a> is an image or movie that appears when the game is starting up and before it goes to the menu. Usually these are logos or intro videos.” A <a href=\"https://www.renpy.org/doc/html/splashscreen_presplash.html#adding-a-presplash\" rel=\"noopener noreferrer\">presplash screen</a> is an image shown while Ren'py is reading the scripts and launching the game.</p>\n\n<p>A good usage example of this I can think of is in Grand Theft Auto 5. When you open the game from your console, it first opens with the girl in the red bikini taking a selfie. Then after a few seconds, the GTA V logo appears with police lights, and siren and gunshot noises. This is an example of a presplash screen showing key art of the game as a quick intro as it loads, and then the game logo displays before leading the user into the main menu, or directly into the game.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fz70wqhfyymnqncdvdqwr.webp\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fz70wqhfyymnqncdvdqwr.webp\" alt=\"gta 5 bikini girl presplash screen\" width=\"800\" height=\"500\"></a></p>\n\n<p><iframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/y6O2_Jzi328\">\n</iframe>\n</p>\n\n<h2>\n  \n  \n  Adding Spashscreen\n</h2>\n\n<ol>\n<li>Add your splash image to your <code>images</code> folder, or wherever in your project you keep your images</li>\n<li>Define your image with appropriate styling. My splash image is a webp file that I transformed to display contained within the window, vertically aligned on the page.\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">image</span> <span class=\"n\">splash</span><span class=\"p\">:</span>\n   <span class=\"nc\">Transform</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">images/splashscreen.webp</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">fit</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">contain</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">yalign</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<ol>\n<li>Add a <code>splashscreen</code> label with how you want to display the image. It must be named <code>splashscreen</code>\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">label</span> <span class=\"n\">splashscreen</span><span class=\"p\">:</span>\n   <span class=\"n\">scene</span> <span class=\"n\">black</span>\n\n\n   <span class=\"n\">show</span> <span class=\"n\">splash</span> <span class=\"k\">with</span> <span class=\"n\">dissolve</span>\n   <span class=\"k\">with</span> <span class=\"nc\">Pause</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n\n   <span class=\"n\">scene</span> <span class=\"n\">black</span> <span class=\"k\">with</span> <span class=\"n\">dissolve</span>\n   <span class=\"k\">with</span> <span class=\"nc\">Pause</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n   <span class=\"k\">return</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The splash screen starts with black, then shows the splash image with a dissolve event, holds it there for 2 seconds, then fades back to black and holds for 1 second before going to the main menu.</p>\n\n<p>You can also show movie splash screen with something like;<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"err\">$</span> <span class=\"n\">renpy</span><span class=\"p\">.</span><span class=\"nf\">movie_cutscene</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">movie.ogv</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Adding Presplash screen\n</h2>\n\n<ol>\n<li>Get your image <code>presplash.png</code> or <code>presplash.jpg</code> and put it in your game folder , ie <code>myGame/game</code>\n</li>\n<li>If you are publishing your game to web, instead put it into your root folder, aka <code>myGame</code> and name it <code>web-presplash.png</code> or <code>web-presplash.jpg</code>\n</li>\n<li>Bonus; <a href=\"https://www.renpy.org/doc/html/config.html#var-config.minimum_presplash_time\" rel=\"noopener noreferrer\"><code>config.minimum_presplash_time</code></a> will specify the minimum time the presplash should be displayed. It is defaulted to <code>0.0</code>, but you can override this in your game.\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">define</span> <span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">minimum_presplash_time</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span> <span class=\"c1\">#makes presplash display for at least 2 seconds\n</span></code></pre>\n\n</div>\n\n\n\n<p>And there you have it! That is how you set your splash and presplash screen in Renpy. </p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"AI Code Whisperers: Can Neural Networks Unlock Peak Performance?","url":"https://dev.to/arvind_sundararajan/ai-code-whisperers-can-neural-networks-unlock-peak-performance-161a","date":1761591726,"author":"Arvind SundaraRajan","guid":316945,"unread":true,"content":"<h1>\n  \n  \n  AI Code Whisperers: Can Neural Networks Unlock Peak Performance?\n</h1>\n\n<p>Ever stared at a sluggish piece of code, knowing there <em>must</em> be a faster way, but traditional optimization tools fall short? Imagine a world where compilers intelligently restructure code, learning from countless examples to achieve optimal execution speed, all without tedious manual tuning.</p>\n\n<p>That future might be closer than you think. The core idea is to represent programs not as static text, but as interconnected graphs showing how data flows and dependencies link together. Then, a neural network, specifically a graph neural network (GNN), is trained to analyze these graphs and predict the best code transformations to boost performance.</p>\n\n<p>Think of it like teaching an AI to 'see' the underlying structure of your program, much like a seasoned mechanic understands the inner workings of an engine. Instead of relying on pre-defined rules, the AI learns from patterns, identifying bottlenecks and suggesting optimizations tailored to the specific program at hand.</p>\n\n<p><strong>Benefits You Can Expect:</strong></p>\n\n<ul>\n<li>  <strong>Adaptive Optimization:</strong> Optimizations that adjust to the unique characteristics of different programs.</li>\n<li>  <strong>Faster Execution:</strong> Significant performance gains without manual intervention.</li>\n<li>  <strong>Reduced Development Time:</strong> Less time spent on manual profiling and optimization.</li>\n<li>  <strong>Improved Code Quality:</strong> Potential for uncovering subtle inefficiencies in existing code.</li>\n<li>  <strong>Automated Tuning:</strong> Continuously refining optimization strategies based on real-world performance data.</li>\n<li>  <strong>Targeted Hardware Optimization</strong>: Possibility of incorporating hardware specific optimizations at compilation, like GPU or specialized AI accelerators.</li>\n</ul>\n\n<p>One practical tip: when building systems to leverage these algorithms, remember that effectively representing the program as a graph is crucial. The quality of this representation directly impacts the neural network's ability to learn and optimize.</p>\n\n<p>The implications are huge. Imagine compilers that constantly evolve, learning from the vast ocean of code to deliver optimal performance for every application, across every platform. This could revolutionize software development, leading to faster, more efficient, and more reliable software. The path ahead involves further research into GNN architectures and training methodologies, but the potential to unlock peak performance through AI is undeniable.</p>\n\n<p><strong>Related Keywords:</strong> Graph Neural Networks, GNN, Program Optimization, Compiler Design, Code Generation, Auto Tuning, Performance Engineering, Deep Learning for Code, Artificial Intelligence, Machine Learning, Reinforcement Learning, Program Analysis, Static Analysis, Dynamic Analysis, Code Optimization Techniques, LLVM, GCC, AI Compiler, Automated Bug Fixes, Smart Compilers, Software Performance, Computational Graph, Hardware Acceleration, Edge Computing Optimization</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Maintaining Arch Linux AUR Packages: Update for python-zfec","url":"https://dev.to/secbyshresth/maintaining-arch-linux-aur-packages-update-for-python-zfec-2kko","date":1761591022,"author":"Shresth Paul","guid":316944,"unread":true,"content":"<p>As part of my ongoing maintenance work on Arch Linux AUR packages, I’ve updated the python-zfec package — the Python bindings for the ZFEC erasure coding library.</p>\n\n<p><strong>What Changed</strong></p>\n\n<p><strong>Previous state</strong>: Older release based on a previous version of the ZFEC library.<br>\n<strong>Update</strong>: The AUR package now tracks the latest upstream release with cleaner metadata and improved Python packaging standards.</p>\n\n<p>The goal was to make the build more consistent with upstream Python packaging practices, ensuring the module installs cleanly with current versions of Python on Arch.</p>\n\n<p><strong>Why It Matters</strong><br>\n<code>python-zfec</code> provides Python support for ZFEC, a fast, open-source implementation of erasure coding — often used for data redundancy and recovery.<br>\n<strong>With this update:</strong></p>\n\n<ul>\n<li>Build scripts are simplified</li>\n<li>Dependencies are better aligned with current Python packaging</li>\n<li>The module works smoothly on modern Arch systems</li>\n</ul>\n\n<p><strong>How to Install (AUR)</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>yay -S python-zfec\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Verify the installation:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>python -c \"import zfec; print('ZFEC imported successfully')\"\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Closing Thoughts</strong></p>\n\n<p>Maintaining AUR packages is about keeping the Linux ecosystem consistent and reliable. This small but important update ensures that Arch users can continue using ZFEC-based tools without compatibility issues.</p>\n\n<p>Stay tuned for more updates from my AUR maintenance journey!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-36ie","date":1761588568,"author":"Vibe YouTube","guid":316943,"unread":true,"content":"<h1>\n  \n  \n  Build a Python AI Agent in 10 Minutes\n</h1>\n\n<p>This quick‐fire tutorial walks you through spinning up a simple AI agent in under ten minutes: install your dependencies, plug in your OpenAI API key, import the right libraries, define your handy “tools,” wire up an LLM‐powered agent and a driver script, then give it a whirl. You get neat timestamps for each step plus a link to the full code on GitHub so you can follow along effortlessly.</p>\n\n<p>Along the way you’ll snag a free Notion trial to keep your notes organized, and hear about DevLaunch—a hands‐on mentorship program for building real projects, beating tutorials, and actually landing that dev job. #Python #AIAgents #Notion</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=gaGaPpnexxA\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How can verified Venmo accounts","url":"https://dev.to/uauetag/how-can-verified-venmo-accounts-pa3","date":1761585532,"author":"usasellsmm","guid":316913,"unread":true,"content":"<p>*Buy Verified Venmo Accounts - 100% Safe &amp; Verified</p>\n\n<p>**<br>\n👍=========================================✅<br>\n––➤ ☎️ 📧 📞✔️ 👍24/7 Hours Reply/Contact<br>\n––➤ ☎️ 📧 📞✔️ ➤ Telegram:@usasellsmm<br>\n––➤ ☎️ 📧 📞✔️ ➤ WhatsApp:+1 (303) 810-1091<br>\n––➤ ☎️ 📧 📞✔️➤ Email:<a href=\"mailto:usasellsmm@gmail.com\">usasellsmm@gmail.com</a><br>\n🌐Website Visit Now:- Click the link:-<a href=\"https://usasellsmm.com/product/buy-verified-venmo-account/\" rel=\"noopener noreferrer\">https://usasellsmm.com/product/buy-verified-venmo-account/</a><br>\n👍=========================================✅</p>\n\n<p>Buy verified Venmo account for fast, secure &amp; fully verified for instant transactions!<br>\nSmooth and safe transactions are an essential requirement to companies and individuals in the digital age. Venmo is one of the most commonly used peer-to–peer payment systems, and it has changed the tradition of sending and receiving money. Verified Venmo account ensures enhanced security level, increased transaction limit and access to premium services. You simply need usasellsmmwhen you contemplate to get a verified Venmo account. What we provide are ready-to-use Venmo accounts that suit your personal or business needs and they are verified and reliable. The given tutorial will cover every aspect of obtaining a verified Venmo account, its advantages, and why usasellsmmcan be considered your trustworthy associate.</p>\n\n<p>What is a verified Venmo account?<br>\nA verified Venmo account is one that has had identification confirmation via identity verification. Usually using personal information, including a government-issued ID, phone number, and occasionally a social security number (SSN), this process Users of verified accounts can send and receive larger payment limits, access instantaneous transactions, and use additional capabilities not possible for non-verified accounts. It also avoids limiting transaction and also enhances the security of your account.</p>\n\n<p>Email Confirmation: Verification of the mail of the user.<br>\nPhone Number Verification: Binding an exclusive and given active telephone number.<br>\nIdentity Verification: The use of government-issued identification materials or Social Security Number (SSN) to know the name of the account holder.<br>\nBank Account Linking: Matching a verified U.S bank account or debit card</p>\n\n<p>Is it safe to buy verified Venmo account?<br>\nIndeed, buying a verified Venmo account is usually rather safe. Purchasing a verified account guarantees that it has passed the required verification process and lowers the possibility of running across bogus or unverified accounts. To guarantee a safe transaction, though, one should buy from a reliable and recognized provider.</p>\n\n<p>Which documents need a verified Venmo account?<br>\nYou will need to supply numerous important documentation to confirm your Venmo account. To prove your identification, you must first present a government-issued ID—a driver’s license, passport, or state ID. Usually, American consumers must follow banking rules using a Social Security Number (SSN). Proof of address may occasionally also be required; this could be a utility bill or a bank statement displaying your name and residential address. For security and account recovery needs, you also must attach a current phone number to your account. These files enable you to access increased transaction limits and other functionality by helping to guarantee the validity and security of your account.</p>\n\n<p>How can I ensure the safety of my purchased Venmo account?</p>\n\n<p>👍=========================================✅<br>\n––➤ ☎️ 📧 📞✔️ 👍24/7 Hours Reply/Contact<br>\n––➤ ☎️ 📧 📞✔️ ➤ Telegram:@usasellsmm<br>\n––➤ ☎️ 📧 📞✔️ ➤ WhatsApp:+1 (303) 810-1091<br>\n––➤ ☎️ 📧 📞✔️➤ Email:<a href=\"mailto:usasellsmm@gmail.com\">usasellsmm@gmail.com</a><br>\n🌐Website Visit Now:- Click the link:-<a href=\"https://usasellsmm.com/product/buy-verified-venmo-account/\" rel=\"noopener noreferrer\">https://usasellsmm.com/product/buy-verified-venmo-account/</a></p>\n\n<p>There are numerous things that you can do to ensure that there is security of your buy verified Venmo account. Second is designing a strong and unique password which you change at interval basis. Enable two-factor authentication to offer one more level of security. When you connect to a public Wi-Fi network, you log in carefully; do not click on suspicious sites or provide your details to untrustworthy websites. Monitor your account regularly to ensure there is no unauthorized transaction; contact Venmo in case of suspicious behavior.</p>\n\n<p>How does verification open the door for global entrepreneurs to send and receive payments through Venmo?<br>\nAlthough they are not in the United States, verification will also enable international businesspeople to withdraw and make payments using Venmo, hence opening gates to them. Being a global business, many entrepreneurs can highly utilize the ability not to have a U.S. bank account, when they already have a verified account, and get payments by the customers who are based in the United States. The global traits of Venmo enable businesses to access the American markets and connect with American customers / partners at an easier rate. Authentication ensures safety in transactions and also facilitates transfer of cash without the challenges and hence it makes the market bigger to overseas business operations.</p>\n\n<p>What are the benefits of having a verified Venmo account?</p>\n\n<p>Enhanced Security and Account Protection<br>\nCheck your identification on Venmo to boost account security even more. Using your information—including your legal name, date of birth, address, and Social Security Number (or ITIN)—Venmo confirms your identity and bans undesirable access. This process ensures that you are not particularly prone to financial exploitation, fraud, or identity theft and that your money is safe. It also ensures that only you have access to and control over your account, thereby providing piece of mind particularly in relation to handling significant financial resources.</p>\n\n<p>Higher Transaction Limits<br>\nOne of the most compelling reasons to verify your Venmo account is to access higher payment and transfer limits. If you’re using an unverified account, you’re restricted to smaller amounts for sending and withdrawing money.</p>\n\n<p>With a verified Venmo account, your weekly transaction limits increase significantly:</p>\n\n<p>You can send up to $60,000 per week to other Venmo users or merchants.<br>\nYou can transfer up to $19,999.99 per week to your linked bank account.<br>\nAccess to Instant Bank Transfers<br>\nWant to get a hold of your funds with relative speed For verified accounts, the feature of Instant Transfer is available. With a small fee of about 1.75 percent, with a maximum of 25 dollars, this will allow you to move the money in your Venmo balance directly to a bank account in a minutes time. The implication of this feature is that to those who receive regular payment via Venmo, e.g. gig workers, solo contractors, or small business owners, it transforms the situation entirely. Whenever you are in urgent need of your money, it makes it more accessible and eradicates queues.</p>\n\n<p>Use Venmo to Pay at Authorized Merchants<br>\nMany big online companies as well as actual stores now accept Venmo. Still, only confirmed users can access this capability. Like with a credit or debit card, by confirming your identification you can make flawless payments at checkout. From within one app, this provides even more simplicity for your shopping experience and helps you monitor your expenditure.</p>\n\n<p>Eligibility for the Venmo Credit Card<br>\nAnother great perk is that verified users can apply for the Venmo Credit Card. This card offers benefits like:</p>\n\n<p>**Up to 3% cashback on eligible purchases</p>\n\n<p>**<br>\n👍=========================================✅<br>\n––➤ ☎️ 📧 📞✔️ 👍24/7 Hours Reply/Contact<br>\n––➤ ☎️ 📧 📞✔️ ➤ Telegram:@usasellsmm<br>\n––➤ ☎️ 📧 📞✔️ ➤ WhatsApp:+1 (303) 810-1091<br>\n––➤ ☎️ 📧 📞✔️➤ Email:<a href=\"mailto:usasellsmm@gmail.com\">usasellsmm@gmail.com</a><br>\n🌐Website Visit Now:- Click the link:-<a href=\"https://usasellsmm.com/product/buy-verified-venmo-account/\" rel=\"noopener noreferrer\">https://usasellsmm.com/product/buy-verified-venmo-account/</a></p>\n\n<p>No annual fees<br>\nCustomizable rewards<br>\nReal-time spending alerts<br>\nThe card is directly linked to your Venmo account, allowing you to manage spending, split purchases with friends, and view transaction history—all in one place.<br>\nAccess to Tax Forms for Business or Freelance Payments<br>\nShould you use Venmo for freelancing labour or goods and service payments, you might have to record this revenue for tax reasons. Verified accounts let Venmo create and supply tax forms like the 1099-K, which are needed should your transactions surpass a specified level—usually $600 or more in a calendar year.</p>\n\n<p>Reduced Risk of Account Freezing or Restrictions<br>\nParticularly if you try to surpass unverified transaction limitations or participate in suspicious behavior, Venmo may momentarily freeze or block accounts that have not been verified. Having a verified account lowers the possibility of interruptions, so guaranteeing your free and unhindered access to use the software.</p>\n\n<p>Builds Trust with Other Users and Businesses<br>\nWhen someone gives or receives money on Venmo, they want to know they are dealing with a genuine person—not a bot or fraudster. Verifying your account helps you to project credibility. Other users—especially those who are selling something, providing a service, or handling shared expenses—will feel more at ease interacting with you.</p>\n\n<p>Features of verified Venmo accounts from usasellsmm?<br>\nWhen you buy a verified Venmo account from us, you gain access to the following features:</p>\n\n<p>Unique U.S. Phone Number<br>\nLinked Email Address<br>\nBank Account or Debit Card<br>\nIdentity Verification Completed<br>\nLogin Credentials Provided<br>\nClean Transaction History<br>\nBusiness or Personal Profiles<br>\nWhy should freelancers verify their Venmo account to receive faster and larger payments?<br>\nThe verification of Venmo accounts will also aid the freelancers to access higher limits of payment and ease their transactions. Venmo places constraints on how much you can send and receive before getting your account verified, typically to much smaller amounts than an account with verification. Verification enables freelancers, including project fees, to receive larger payments by clients without any delay or limitation. A verified account has also the advantage of an instant transfer of linked bank accounts which would be very beneficial when it comes to cash flow and delay in making payments.</p>\n\n<p>How does a verified Venmo account help remote workers manage payments from multiple clients more efficiently?<br>\nWithout the right tools, handling payments from several clients may get messy for remote workers. Verifying your Venmo account opens you improved fund management and higher transaction limits. Verification guarantees that, when managing payments from several sources, you won’t exceed payment restrictions, thereby enabling you to get big payments more freely and immediately transfer money to your bank account. Venmo also offers a comprehensive record of all your purchases, which helps remote workers keep organized, manage income, and issue invoices.</p>\n\n<p>Why is account verification important for small businesses using Venmo as a payment gateway?<br>\nSmall businesses using Venmo must verify accounts to be able to accept bigger payments and establish customer confidence. Verified Venmo accounts confirm that your company is real and can securely manage transactions free from risk of fraud or payment delays. Venmo verification also helps companies to employ tools like immediate transfers, which guarantees faster access to money, and the capacity to handle more transactions free from constraints. Seeing a verified account offers consumers trust that they are making a legitimate company payment and helps establish credibility in a marketplace going more and more digital.</p>\n\n<p>**How can verified Venmo accounts</p>\n\n<p>👍=========================================✅<br>\n––➤ ☎️ 📧 📞✔️ 👍24/7 Hours Reply/Contact<br>\n––➤ ☎️ 📧 📞✔️ ➤ Telegram:@usasellsmm<br>\n––➤ ☎️ 📧 📞✔️ ➤ WhatsApp:+1 (303) 810-1091<br>\n––➤ ☎️ 📧 📞✔️➤ Email:<a href=\"mailto:usasellsmm@gmail.com\">usasellsmm@gmail.com</a><br>\n🌐Website Visit Now:- Click the link:-<a href=\"https://usasellsmm.com/product/buy-verified-venmo-account/**\" rel=\"noopener noreferrer\">https://usasellsmm.com/product/buy-verified-venmo-account/**</a></p>\n\n<p>streamline customer transactions for local business owners?<br>\nIndeed verified Venmo accounts offer a smooth, digital payment-driven experience without having to swipe a credit card or handle cash making the lives of local business owners dealing with consumers much easier. Specifically, verified accounts are useful to local businesses which tend to sell higher pricing products or quantity of business: they allow you to receive payments more quickly and more. A large number of consumers already use Venmo to have personal transactions; it is extremely simple, and this encourages quicker payments and returning business. In addition the instant transfer function allows owners of companies to receive money immediately as opposed to having to wait days with conventional bank methods.</p>\n\n<p>How does Venmo verification enhance the security of digital payments for online store owners?<br>\nVenmo verification adds an additional degree of authentication to their account, therefore improving the security of digital payments for owners of online stores. Verified accounts follow a procedure whereby Venmo guarantees the owner’s identity, therefore preventing any illegal access to the account. This guards private financial data and lessens the possibility of fraud. This means that payments are more safe for owners of e-commerce stores; any problems with transactions may be resolved rapidly. Greater customer trust is another benefit of verified accounts since consumers feel more confidence making purchases from a confirmed source.</p>\n\n<p>Why is having a verified Venmo account a smart move for influencers handling brand collaborations?<br>\nVenmo accounts should be verified for influencers so they may securely and effectively get paid for brand sponsorships and partnerships. Working with confirmed influencers is preferred by companies since it guarantees fast processing of payments free from any delays. A confirmed Venmo account also gives an influencer’s company professionalism, which facilitates contract negotiations and payment processing. Moreover, influencers gain from more transaction limitations, which is crucial given the bigger payments for sponsored content. Verification also allows influencers to retain a record and track payments, therefore simplifying tax and financial handling.</p>\n\n<p>How can social media creators use verified Venmo accounts to monetize their audience more effectively?<br>\nVerified Venmo account give social media artists a simple and safe approach to make money off of their followers. Accepting payments straight through Venmo allows creators to swiftly and without hassle get tips, donations, and money for partnerships. When producers depend on fan support or sponsorship arrangements, Venmo lets them get money right away—something really vital. Verification not only lets creators take bigger rewards but also helps build trust with their business partners and following. Creators with a verified account can better handle their money and rely Venmo as a consistent source of cash generating.</p>\n\n<p>Why should international users consider verified Venmo accounts to access U.S. financial services?<br>\nIf international users wish to access U.S. banking services, they should think about confirming their Venmo accounts. Although Venmo is mostly a U.S.-based payment system, confirmed overseas users can utilize Venmo’s tools to make and get payments from American companies, consumers, or independent contractors. Verification lets consumers link to the American payment system, therefore facilitating cross-border transactions without a conventional U.S. bank account. Small company owners, freelancers, or entrepreneurs looking to engage customers in the United States and get paid securely via Venmo will especially find this useful.</p>\n\n<p>Why Choose usasellsmm?</p>\n\n<p>👍=========================================✅<br>\n––➤ ☎️ 📧 📞✔️ 👍24/7 Hours Reply/Contact<br>\n––➤ ☎️ 📧 📞✔️ ➤ Telegram:@usasellsmm<br>\n––➤ ☎️ 📧 📞✔️ ➤ WhatsApp:+1 (303) 810-1091<br>\n––➤ ☎️ 📧 📞✔️➤ Email:<a href=\"mailto:usasellsmm@gmail.com\">usasellsmm@gmail.com</a><br>\n🌐Website Visit Now:- Click the link:-<a href=\"https://usasellsmm.com/product/buy-verified-venmo-account/\" rel=\"noopener noreferrer\">https://usasellsmm.com/product/buy-verified-venmo-account/</a></p>\n\n<p>usasellsmmis a trusted leader in providing verified digital accounts, including Venmo, to customers worldwide. Here’s what makes us stand out:</p>\n\n<p>100% Verified and Authentic Accounts: All accounts are created using legitimate credentials and undergo complete verification, ensuring authenticity and reliability.<br>\nQuick Delivery: Once your payment is confirmed, your verified Venmo account will be delivered within 1–12 hours.<br>\nUser-Friendly Setup: We provide detailed instructions to help you log in and secure your account. Customization options are also available.<br>\nAffordable Prices: We offer competitive pricing with bulk discounts for businesses or users needing multiple accounts.<br>\n24/7 Customer Support: Our dedicated support team is available round the clock to assist you with any queries or technical issues.<br>\nSecure and Private Transactions: All purchases are handled securely, and your information is kept strictly confidential.</p>\n\n<p>Frequent Questions?</p>\n\n<p>What is included in a verified Venmo account?<br>\nANS: Each account comes with verified credentials, including a linked email, phone number, bank account, and completed identity verification.</p>\n\n<p>Are the accounts safe to use?<br>\nANS: Yes, all accounts are created with clean IP addresses and legitimate documentation to ensure safety and long-term use.</p>\n\n<p>Can I change the login details?<br>\nANS: Absolutely. Once you receive the account, you can update the password, email, and phone number for full ownership.</p>\n\n<p>How soon will I receive my account?<br>\nANS: Most accounts are delivered within 1–12 hours of payment confirmation.</p>\n\n<p>Can I use the account for business purposes?<br>\nANS: Yes, our accounts are ideal for both personal and business use, including receiving payments from clients.</p>\n\n<p>Is there a refund or replacement policy?<br>\nANS: We offer a 7-day replacement guarantee in case of any issues with your account.</p>\n\n<p>Is buying a Venmo account legal?<br>\nANS: While buying accounts is not explicitly illegal, users must comply with Venmo’s terms of service. We encourage ethical use of all accounts.</p>\n\n<p>*👍=========================================✅<br>\n––➤ ☎️ 📧 📞✔️ 👍24/7 Hours Reply/Contact<br>\n––➤ ☎️ 📧 📞✔️ ➤ Telegram:@usasellsmm<br>\n––➤ ☎️ 📧 📞✔️ ➤ WhatsApp:+1 (303) 810-1091<br>\n––➤ ☎️ 📧 📞✔️➤ Email:<a href=\"mailto:usasellsmm@gmail.com\">usasellsmm@gmail.com</a><br>\n🌐Website Visit Now:- Click the link:-<a href=\"https://usasellsmm.com/product/buy-verified-venmo-account/\" rel=\"noopener noreferrer\">https://usasellsmm.com/product/buy-verified-venmo-account/</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"PyCharm","url":"","date":1761583252,"author":"","guid":316880,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"🎯 Day 54 of My Data Analytics Journey","url":"https://dev.to/ramyacse/day-54-of-my-data-analytics-journey-7dp","date":1761581302,"author":"Ramya .C","guid":316912,"unread":true,"content":"<h2>\n  \n  \n  NumPy Reshaping, Resizing, Stacking &amp; Splitting Arrays\n</h2>\n\n<p>Today, I dived deep into <strong>NumPy</strong>, one of the most powerful Python libraries for data manipulation and numerical computing.<br>\nHere’s what I learned 👇</p>\n\n\n<h3>\n  \n  \n  🔹 1️⃣ Reshaping Arrays\n</h3>\n\n<p>Reshaping means changing the shape (rows × columns) of an existing array <strong>without changing the data</strong>.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/...\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/...\" alt=\"Uploading image\" width=\"800\" height=\"400\"></a><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span>\n\n<span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"n\">reshaped</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"nf\">reshape</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">reshaped</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Output:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>[[1 2 3]\n [4 5 6]]\n</code></pre>\n\n</div>\n\n\n\n<p>👉 The 1D array is reshaped into a 2D array (2 rows, 3 columns).</p>\n\n\n\n\n<h3>\n  \n  \n  🔹 2️⃣ Resizing Arrays\n</h3>\n\n<p>Resizing creates a new array shape — it <strong>adds or removes elements</strong> to match the new size.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"n\">resized</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">resize</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">resized</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Output:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>[[1 2 3]\n [4 1 2]]\n</code></pre>\n\n</div>\n\n\n\n<p>Notice how elements repeat when needed to fill the new shape.</p>\n\n\n\n\n<h3>\n  \n  \n  🔹 3️⃣ Stacking Arrays\n</h3>\n\n<p>Stacking means joining two or more arrays together.</p>\n\n<h4>\n  \n  \n  👉 Horizontal Stacking\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]])</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">([[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">hstack</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)))</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Output:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>[[1 2 5 6]\n [3 4 7 8]]\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  👉 Vertical Stacking\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">vstack</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)))</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Output:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>[[1 2]\n [3 4]\n [5 6]\n [7 8]]\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h3>\n  \n  \n  🔹 4️⃣ Splitting Arrays\n</h3>\n\n<p>Splitting means dividing an array into multiple sub-arrays.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">([</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">])</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Output:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>[array([10, 20]), array([30, 40]), array([50, 60])]\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h3>\n  \n  \n  🔹 5️⃣ Working with Different Dimensions\n</h3>\n\n<p>Understanding <strong>1D, 2D, and 3D arrays</strong> is essential:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># 1D\n</span><span class=\"n\">arr1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># 2D\n</span><span class=\"n\">arr2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]])</span>\n\n<span class=\"c1\"># 3D\n</span><span class=\"n\">arr3</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"nf\">array</span><span class=\"p\">([[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]],</span> <span class=\"p\">[[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]]])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">arr1</span><span class=\"p\">.</span><span class=\"n\">ndim</span><span class=\"p\">,</span> <span class=\"n\">arr2</span><span class=\"p\">.</span><span class=\"n\">ndim</span><span class=\"p\">,</span> <span class=\"n\">arr3</span><span class=\"p\">.</span><span class=\"n\">ndim</span><span class=\"p\">)</span>  <span class=\"c1\"># Output: 1 2 3\n</span></code></pre>\n\n</div>\n\n\n\n\n\n\n<h3>\n  \n  \n  🚀 Key Takeaway\n</h3>\n\n<p>These NumPy operations help reshape and structure data efficiently — a critical skill for every <strong>Data Analyst or Data Scientist</strong> working with large datasets.</p>\n\n\n\n\n<h3>\n  \n  \n  🏷️ Hashtags\n</h3>\n\n<h1>\n  \n  \n  DataAnalytics #Python #NumPy #MachineLearning #DataScience #LearningJourney\n</h1>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Introduction to Python Module Three Part Two: Loops","url":"https://dev.to/theoriginalbpc/introduction-to-python-module-three-part-two-loops-klk","date":1761577522,"author":"Sarah Bartley-Dye","guid":316859,"unread":true,"content":"<p>Introduction to Python continues with Module Three, starting with loops. SoloLearn will only focus on two loops, but I teach three loops to Level M students at Coding with Kids. Today's post will show you for, while, and for each loops.</p>\n\n<p>By the end of this post, you will have a better understanding of loops and why they are important in code. You will be able to create each type of loop in your code. Next week, the third part of this module will discuss conditionals.</p>\n\n<h3>\n  \n  \n  Iteration Review\n</h3>\n\n<p>Before diving into all of these loops, let's take a minute to expand on iteration. Iteration is a part of good control flow. Iterations solve real problems by combining comparison operations and iterations. </p>\n\n<p>Looping is the most popular example of iteration. SoloLearn describes iteration as automating the tasks that need to be repeated. In real life, people see assembly lines made of different stations that repeat tasks to create a final product. </p>\n\n<p>For example, if you went to a pizza shop, some stations repeat parts of a pizza over and over again. You might find:</p>\n\n<ul>\n<li>areas for making dough</li>\n<li>putting the entire pizza together. These could be stations for sauce and putting on all the pizza toppings</li>\n<li>an area near the oven where someone manages what pizzas are coming in and out of the oven.</li>\n<li>an area for taking pizzas and putting them into boxes so they are out for delivery or pick up.</li>\n<li>dishwashing area that cleans pans and equipment needed for other stations.</li>\n</ul>\n\n<p>Computers have many imaginary assembly lines, like the pizza shop, that repeat lots of different tasks. They have a lot of things that they are trying to do, so repeating tasks need to be simple, fast, and have no errors. That also means less work for you because you will have less code to write. </p>\n\n<p>Level M students see this by looking at examples where there is code with no iteration and one with it to decide which one they prefer. Using iteration helps you write code only once, and having the computer repeat it for you instead of you copying and pasting the same code over and over again.</p>\n\n<h3>\n  \n  \n  While Loops\n</h3>\n\n<p>The first loop you need to learn is the while loop. It is the first loop that Level M students learn when they start learning about Python. While loops repeat only if a condition is true. </p>\n\n<p>Once the condition of the loop becomes false, the loop stops. To create a while loop, start with the while keyword. Next, put your condition. </p>\n\n<p>This condition will be true and keep the loop repeating. Finally, you put your colon.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>i = 0\n\nwhile i &lt; 5:\n  print(i)\n  i = i + 1\n</code></pre>\n\n</div>\n\n\n\n<p>This code sample has a variable with an integer assigned to it. Underneath is a while loop that will run if i is less than 5, followed by a colon. As this condition is true, it will print i and update the counter variable by adding one. When this condition becomes false, the loop will stop.</p>\n\n<h3>\n  \n  \n  For Loops\n</h3>\n\n<p>The second loop you will use often in code is for loops. A for loop repeats code for a specific number of times. To create a for loop, you begin with the for keyword. </p>\n\n<p>Next, you put a counter variable. This will keep track of the iterations you make or how many times you repeat your code. After that, you put the range function.</p>\n\n<p>The range function tells the computer how many times it needs to repeat the code. Put a number in parentheses. Finally, close the parentheses and put the colons.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>for x in range(10):\n  print(\"Couch!\")\n</code></pre>\n\n</div>\n\n\n\n<p>This code sample features a for loop. After the for keyword, there is the x counter variable to track the iterations. The range function is going to repeat 10 times. Underneath the for loop, the code indented inside will print a text. </p>\n\n<h3>\n  \n  \n  For Each Loops\n</h3>\n\n<p>A for each loop is another kind of for loop, but this loop isn't covered in this course. When I teach Level M students, for each loops are part of the curriculum and act differently from a for loop. So I'm giving them a separate section.</p>\n\n<p>A for each loop still has some similarities with a for loop as it iterates through things and uses the for keyword. However, the big difference is that for each loop goes through the elements of a list or an array. You can see them when a program needs to iterate through data structures (i.e. lists, arrays, dictionaries).</p>\n\n<p>To create a for each loop, you start with the for keyword. Next, you will create a temporary variable. This will hold the values for the data structre being looped through.</p>\n\n<p>Temporary variables give loops a chance to check the changes being made. They can even delete values. SoloLearn encourages students to think of them as a temporary name being used to access each element in a data structure.</p>\n\n<p>After the temporary variable, put the in keyword followed by the data structure you will be looping through. The data structure is the structure holding the values that the computer needs to look at.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>for sprite in sprite_list:\n  sprite.set_x(random.randint(-220, 220))\n  sprite.set_y(random.randint(-220, 220)) \n</code></pre>\n\n</div>\n\n\n\n<p>This code sample is an example of a for-each loop that Level M students create in one of their games. This for each loops start the same as a for loop with the for keyword. The temporary variable in this code is sprite.</p>\n\n<p>After “in”, this loop will iterate through a list called sprite_list. Indented on the next two lines is the code that will be repeated. In this sample, the code will set the x and y for the sprite by randomly picking a number between -220 and 220. </p>\n\n<h3>\n  \n  \n  Best Practice for Loops\n</h3>\n\n<p>Now that you know how to create each type of loop, let's talk about some best practices you need to keep in mind as you work with this concept. </p>\n\n<h4>\n  \n  \n  Indentation\n</h4>\n\n<p>Indentation is something every developer needs to be careful with since it can create big problems in code. Pay attention to how you indent your code. Indenting incorrectly can confuse the computer and create errors because the computer will assume the code might not be inside or outside a loop. </p>\n\n<p>Loops can repeat multiple statements. They all need to be indented. As you make loops in your code, make sure the code that needs to be repeated is inside the loop. </p>\n\n<p>That means you will need to indent your code. Anything that isn’t going to be repeated doesn’t need to be indented and goes outside of your loop. After the loop is finished, the computer will continue to execute statements in sequence.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>game_over = True\nscore = 0\nplayer_one = codesters.Sprite(\"person1\")\nplayer_two = codesters.Sprite(\"person2\")\n\nwhile game_over = False:\n  # code for loop goes inside. \n  print(\"Hello World\")\n\nfunction greeting():\n  # function code goes inside\n  print(\"This is a function\")\ngreeting()\n</code></pre>\n\n</div>\n\n\n\n<p>The code sample above showed some variables, a function, and a while loop. The print statement inside the while loop is indented, telling the computer that this code needs to be repeated inside the loop. When I start my function at the bottom, the function is not indented, so it isn’t inside the loop.</p>\n\n<p>A common mistake new developers make with indenting their code is using the space bar. Avoid this in your code. You will want to use the tab key to make sure you indent correctly. </p>\n\n<p>Indentations are the spaces at the beginning of the lines. Python isn’t picky about how many spaces you use. You can use 2 or 4 spaces, depending on your needs. You just need to make sure you are consistent.</p>\n\n<p>Level M students use Codesters to get their feet wet in Python. One of the nice things about Codesters is that it includes color guides to help students double-check their indentation. As they indent their code, the text editor creates colorful bars to show students what goes inside a loop or function. Your editor might not include a color guide like Codesters, but I still encourage Coding with Kids students to double-check how they are indenting their code.</p>\n\n<h4>\n  \n  \n  Colons and Counter Variables\n</h4>\n\n<p>Colons and counter variables play an important part in setting up while and for loops. The colon is the last thing you need to add when you set up a loop. When you press Enter in your text editor, some will immediately start indenting your code because they know you are creating a loop.</p>\n\n<p>If your text editor doesn't do this, you will still need to indent your code. For loops and while loops both use counter variables to keep track of how many times the code is being repeated. Every time the loop repeats, the counter variable will update in each iteration. When developers initialize (set up) code, they will set a value outside the loop for where the loop should begin.</p>\n\n<h4>\n  \n  \n  When should I use a for loop or a while loop?\n</h4>\n\n<p>It can be tough knowing when to best use a for loop or a while loop. However, SoloLearn tells students to think about the iterations. If you know how many iterations you need to do, a for loop would work best for you.</p>\n\n<p>If you don't know how many iterations you need to make, a while loop works the best. For example, a developer might want to use a while loop to ask a user to enter a password correctly. If you have to print a label for 50 items, a for loop would work best for you.</p>\n\n<h4>\n  \n  \n  Beware Infinite Loops!\n</h4>\n\n<p>One of the things you will often hear about loops is the dreaded infinite loop. Infinite loops are common in loops, but they can create big problems in your code. Infinite loops happen when the condition remains true forever, so it never stops repeating. </p>\n\n<p>That might sound like a good thing, but infinite loops are bad in code because they can break your program. So you will want to be careful when to use a while loop.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Using Python Optional Arguments When Defining Functions","url":"https://realpython.com/python-optional-arguments/","date":1761573600,"author":"Real Python","guid":316810,"unread":true,"content":"<p>You define Python functions with optional arguments to make them flexible and reusable. By assigning default values, using  for variable arguments, or  for keyword arguments, you let your functions handle different inputs without rewriting code. This tutorial shows you how and why to use Python optional arguments, and how to avoid common pitfalls when setting defaults.</p><p><strong>By the end of this tutorial, you’ll understand that:</strong></p><ul><li> are names in a function definition, while  are the values you pass when calling the function  </li><li>You can assign  to parameters so that arguments become optional  </li><li>You should avoid  like lists or dictionaries as default values to prevent unexpected behavior  </li><li>You can use  to collect any number of positional arguments and  to collect keyword arguments  </li><li>Python raises  when you omit required arguments and  when you misorder parameters with defaults  </li></ul><p>Defining your own functions is an essential skill for writing clean and effective code. Once you master Python’s optional arguments, you’ll be able to define functions that are more powerful and more flexible.</p><div><p> Test your knowledge with our interactive “Using Python Optional Arguments When Defining Functions” quiz. You’ll receive a score upon completion to help you track your learning progress:</p></div><h2>Creating Functions in Python for Reusing Code</h2><p>You can think of a <a href=\"https://realpython.com/ref/glossary/function/\">function</a> as a mini-program that runs within another program or within another function. The main program calls the mini-program and sends information that the mini-program will need as it runs. When the function completes all of its actions, it may send some data back to the main program that has called it.</p><p>The primary purpose of a function is to allow you to reuse the code within it whenever you need it, using different inputs if required.</p><p>When you use functions, you’re extending your Python vocabulary. This lets you express the solution to your problem in a clearer and more succinct way.</p><p>In Python, by convention, you should name a function using lowercase letters with words separated by an underscore, such as . These conventions are described in <a href=\"https://realpython.com/ref/glossary/pep-8/\">PEP 8</a>, which is Python’s style guide. You’ll need to add parentheses after the function name when you call it. Since functions represent actions, it’s a best practice to start your function names with a verb to make your code more readable.</p><h3>Defining Functions With No Input Parameters</h3><p>In this tutorial, you’ll use the example of a basic program that creates and maintains a shopping list and <a href=\"https://realpython.com/python-print/\">prints it out</a> when you’re ready to go to the supermarket.</p><p>Start by creating a new <a href=\"https://realpython.com/python-script-structure/\">Python script</a> you’ll call  and add a shopping list:</p><p>You’re using a <a href=\"https://realpython.com/python-dicts/\">dictionary</a> to store the item name as the key and the quantity you need to buy of each item as the value. You can <a href=\"https://docs.python.org/3/tutorial/controlflow.html#defining-functions\">define a function</a> to display the shopping list:</p><p>The function you’ve defined has no input <a href=\"https://realpython.com/ref/glossary/parameter/\">parameters</a>, as the parentheses in the  are empty. The signature is the first line in the function definition:</p><p>You don’t need any input parameters in this example since the dictionary  is a . This means that it can be accessed from everywhere in the program, including from within the function definition. This is called the .</p><p>Using global variables in this way is not a good practice. It can lead to several functions making changes to the same data structure, which can lead to bugs that are hard to find. You’ll see how to improve on this later on in this tutorial when you pass the dictionary to the function as an argument.</p>","contentLength":3480,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"python 连接 bittensor的子网","url":"https://dev.to/dragon72463399/python-lian-jie-bittensorde-zi-wang-5fgj","date":1761571081,"author":"drake","guid":316858,"unread":true,"content":"<h2>\n  \n  \n  安装依赖\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># 使用 pip 安装</span>\npip <span class=\"nb\">install </span>bittensor\n\n<span class=\"c\"># 或安装最新开发版</span>\npip <span class=\"nb\">install </span>git+https://github.com/opentensor/bittensor.git\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  代码\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">bittensor</span> <span class=\"k\">as</span> <span class=\"n\">bt</span>\n\n<span class=\"c1\"># 创建子网连接\n</span><span class=\"n\">subtensor</span> <span class=\"o\">=</span> <span class=\"n\">bt</span><span class=\"p\">.</span><span class=\"nf\">subtensor</span><span class=\"p\">(</span><span class=\"n\">network</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">finney</span><span class=\"sh\">'</span><span class=\"p\">)</span>  <span class=\"c1\"># 主网\n</span>\n<span class=\"c1\"># 查询 Subnet 55 信息\n</span><span class=\"n\">metagraph</span> <span class=\"o\">=</span> <span class=\"n\">subtensor</span><span class=\"p\">.</span><span class=\"nf\">metagraph</span><span class=\"p\">(</span><span class=\"n\">netuid</span><span class=\"o\">=</span><span class=\"mi\">55</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Subnet 55 有 </span><span class=\"si\">{</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">metagraph</span><span class=\"p\">.</span><span class=\"n\">neurons</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\"> 个神经元</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Bytearray in Python (3)","url":"https://dev.to/hyperkai/bytearray-in-python-3-4cdp","date":1761569211,"author":"Super Kai (Kazuya Ito)","guid":316761,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>☕</p>\n\n<p>*Memo:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/bytearray-in-python-1-bp7\">My post</a> explains a bytearray (1).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/byte-string-in-python-3-31ki\">My post</a> explains a bytearray (2).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/bytearray-in-python-3-5h57\">My post</a> explains a bytearray (4).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/bytearray-in-python-4-504h\">My post</a> explains a bytearray (5).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/byte-string-in-python-5-2a5n\">My post</a> explains <a href=\"https://docs.python.org/3/library/stdtypes.html#bytearray\" rel=\"noopener noreferrer\">bytearray()</a>.</li>\n</ul>\n\n<p>A bytearray can be enlarged with <code>*</code> and a number as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABCDE</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># bytearray(b'ABCDEABCDEABCDE')\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">01234</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># bytearray(b'012340123401234')\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">''</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># bytearray(b'')\n</span></code></pre>\n\n</div>\n\n\n\n<p>A bytearray and other bytearrays can be concatenated with <code>+</code> as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">DE</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">FGHI</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># bytearray(b'ABCDEFGHI')\n</span></code></pre>\n\n</div>\n\n\n\n<p>A bytearray and other bytearrays cannot return:</p>\n\n<ul>\n<li>all the bytes in them with <code>'|'</code> (Union: A ∪ B).</li>\n<li>their common bytes with <code>'&amp;'</code> (Intersection: A ∩ B).</li>\n<li>the bytes in the bytearray which aren't in other bytearray with <code>'-'</code> (Difference: A - B).\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">AE</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ACE</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABDE</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for |: 'bytearray' and 'bytearray'\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">AE</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ACE</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABDE</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for &amp;: 'bytearray' and 'bytearray'\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">AE</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ACE</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABDE</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for -: 'bytearray' and 'bytearray'\n</span></code></pre>\n\n</div>\n\n\n\n<p>A bytearray and other bytearray cannot return the bytes in the bytearray but not in other bytearray or not in the bytearray but in other bytearray with <code>'^'</code> (Symmetric Difference: A Δ B) as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABCD</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ACE</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for ^: 'bytearray' and 'bytearray'\n</span></code></pre>\n\n</div>\n\n\n\n<p>A bytearray can be iterated with a <code>for</code> statement as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># 65\n# 66\n# 67\n</span></code></pre>\n\n</div>\n\n\n\n<p>A bytearray can be unpacked with an assignment and <code>for</code> statement, function and <code>*</code> but not with <code>**</code> as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"c1\"># 65 66 67\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABCDEF</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>  <span class=\"c1\"># 65 [66, 67, 68, 69] 70\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># 65 66 67 68 69 70\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">for</span> <span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">),</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">DEF</span><span class=\"sh\">'</span><span class=\"p\">)]:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"c1\"># 65 66 67\n# 68 69 70\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">for</span> <span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABCDEF</span><span class=\"sh\">'</span><span class=\"p\">),</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">GHIJKL</span><span class=\"sh\">'</span><span class=\"p\">)]:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"c1\"># 65 [66, 67, 68, 69] 70\n# 65 66 67 68 69 70\n# 71 [72, 73, 74, 75] 76\n# 71 72 73 74 75 76\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p3</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p4</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p5</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">e</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p6</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">f</span><span class=\"sh\">'</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">p3</span><span class=\"p\">,</span> <span class=\"n\">p4</span><span class=\"p\">,</span> <span class=\"n\">p5</span><span class=\"p\">,</span> <span class=\"n\">p6</span><span class=\"p\">)</span>\n\n<span class=\"nf\">func</span><span class=\"p\">()</span>\n<span class=\"c1\"># a b c d e f\n</span>\n<span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABCD</span><span class=\"sh\">'</span><span class=\"p\">),</span> <span class=\"o\">*</span><span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">EF</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># 65 66 67 68 69 70\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n\n<span class=\"nf\">func</span><span class=\"p\">()</span>\n<span class=\"c1\"># a b ()\n# a b\n# a b [0, 1, 2, 3]\n</span>\n<span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABCD</span><span class=\"sh\">'</span><span class=\"p\">),</span> <span class=\"o\">*</span><span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">EF</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># 65 66 (67, 68, 69, 70)\n# 65 66 67 68 69 70\n# 65 66 [0, 1, 67, 68, 69, 70, 2, 3]\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABCD</span><span class=\"sh\">'</span><span class=\"p\">),</span> <span class=\"o\">*</span><span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">EF</span><span class=\"sh\">'</span><span class=\"p\">))</span>\n<span class=\"c1\"># 65 66 67 68 69 70\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">([</span><span class=\"o\">*</span><span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABCD</span><span class=\"sh\">'</span><span class=\"p\">),</span> <span class=\"o\">*</span><span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">EF</span><span class=\"sh\">'</span><span class=\"p\">)])</span>\n<span class=\"c1\"># [65, 66, 67, 68, 69, 70]\n</span></code></pre>\n\n</div>\n\n\n\n<p>Be careful, a huge bytearray gets <code>MemoryError</code> as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABCDE</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">1000000000</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># MemoryError\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"PyCharm: The State of Django 2025","url":"https://blog.jetbrains.com/pycharm/2025/10/the-state-of-django-2025/","date":1761566709,"author":"","guid":316879,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Quiz: Using Python Optional Arguments When Defining Functions","url":"https://realpython.com/quizzes/python-optional-arguments/","date":1761566400,"author":"Real Python","guid":316749,"unread":true,"content":"<p>You’ll revisit how Python handles parameters and arguments—from default values and their order to flexible patterns like  and . You’ll also see when a simple Boolean flag can make your function calls clearer and more expressive.</p><p>In this quiz, you’ll test your understanding of how mutable default argument values can lead to unexpected behavior. You’ll also practice unpacking sequences and mappings in function calls and formatting output with flags. For a deeper dive, check out the <a href=\"https://realpython.com/python-optional-arguments/\">guide to optional arguments</a>.</p>","contentLength":522,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 16: Mapping Connections with Shared Classmates","url":"https://dev.to/shahrouzlogs/day-16-mapping-connections-with-shared-classmates-d0h","date":1761563967,"author":"Shahrouz Nikseresht","guid":316735,"unread":true,"content":"<p>Welcome to Day 16 of the <strong>#80DaysOfChallenges</strong> journey! Today’s challenge shifted into social territory: <strong>finding and displaying classmates who share classes</strong> based on enrollment data. This intermediate task offered a neat way to experiment with nested loops, set intersections, and eye-catching terminal formatting in Python. It drove home how everyday networks, like school schedules, can reveal patterns through clever data pairing.</p>\n\n\n\n\n<h2>\n  \n  \n  💡 Key Takeaways from Day 16: Classmates Report Generator\n</h2>\n\n<p>This challenge processes a dictionary of students and their class sets to generate a grouped report of overlaps. The output uses color for flair, but the magic lies in comparing pairs efficiently and highlighting matches. Let’s dive into the pillars: <strong>nested iteration</strong>, <strong>set intersections</strong>, and <strong>styled printing</strong>.</p>\n\n<h3>\n  \n  \n  1. Nested Loops: Pairing Up Without Duplication\n</h3>\n\n<p>The core logic kicks off with a double loop to check every student against the others, skipping self-matches to avoid noise. The <code>find_classmates</code> function loops through the dictionary once for the \"anchor\" student, then again for comparisons:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">for</span> <span class=\"n\">student_1</span><span class=\"p\">,</span> <span class=\"n\">classes_1</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">():</span>\n    <span class=\"n\">classmates</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">student_2</span><span class=\"p\">,</span> <span class=\"n\">classes_2</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"nf\">items</span><span class=\"p\">():</span>\n        <span class=\"k\">if</span> <span class=\"n\">student_1</span> <span class=\"o\">!=</span> <span class=\"n\">student_2</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Find shared classes using set intersection\n</span>            <span class=\"n\">shared</span> <span class=\"o\">=</span> <span class=\"n\">classes_1</span> <span class=\"o\">&amp;</span> <span class=\"n\">classes_2</span>\n            <span class=\"k\">if</span> <span class=\"n\">shared</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Format and add the result to the list\n</span>                <span class=\"n\">classmates</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">GREEN</span><span class=\"si\">}</span><span class=\"s\">•</span><span class=\"si\">{</span><span class=\"n\">RESET</span><span class=\"si\">}</span><span class=\"s\"> </span><span class=\"si\">{</span><span class=\"n\">student_2</span><span class=\"si\">:</span><span class=\"o\">&lt;</span><span class=\"mi\">8</span><span class=\"si\">}</span><span class=\"s\"> → </span><span class=\"si\">{</span><span class=\"sh\">'</span><span class=\"s\">, </span><span class=\"sh\">'</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"nf\">sorted</span><span class=\"p\">(</span><span class=\"n\">shared</span><span class=\"p\">))</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>I liked the straightforward nesting here; it's brute-force but effective for small datasets like this seven-student group. For Alice, it scans Sarah (shared: Painting, Pottery), John (Pottery), and Olivia (Painting), building a list of hits. No need for recursion or graphs yet, just reliable iteration that scales mentally for larger groups. It reminded me how nested loops feel like eavesdropping on conversations, picking up only the relevant echoes.</p>\n\n<h3>\n  \n  \n  2. Set Operations: Spotting Overlaps Cleanly\n</h3>\n\n<p>Sets shine in the intersection step (<code>&amp;</code>), which instantly flags common classes without manual checking. Given Alice's {\"Painting\", \"Pottery\"} and John's {\"Pottery\", \"Programming\"}, <code>shared = classes_1 &amp; classes_2</code> yields {\"Pottery\"} if there's a match, or an empty set otherwise. Only non-empty results get added to the classmates list.</p>\n\n<p>This was the efficient pivot; lists would require clunky contains checks, but sets handle uniqueness and lookup in constant time. Sorting the shared classes (<code>sorted(shared)</code>) before joining ensures consistent output, like \"Painting, Pottery\" instead of random order. It's a subtle nod to data hygiene, making reports feel professional even in a console.</p>\n\n<h3>\n  \n  \n  3. Formatted Output: Adding Color and Structure\n</h3>\n\n<p>Once matches are gathered, the function prints per student with ANSI escapes for vibrancy, cyan headers, yellow names, green bullets, and a dash separator for breathing room:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"si\">{</span><span class=\"n\">YELLOW</span><span class=\"si\">}{</span><span class=\"n\">student_1</span><span class=\"si\">}{</span><span class=\"n\">RESET</span><span class=\"si\">}</span><span class=\"s\"> shares classes with:</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">classmates</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"sh\">'</span><span class=\"s\">-</span><span class=\"sh\">'</span><span class=\"o\">*</span><span class=\"mi\">55</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The result? A tidy report like Alice's section showing Sarah and John in green, with Emily's empty list skipped entirely. Left-aligning names (<code>{student_2:&lt;8}</code>) keeps columns neat, and the footer ties it with a long underline. I enjoyed tweaking these; it's not core logic, but it turns dry data into something scannable, almost like a newsletter. In a terminal, those colors pop without libraries, pure string magic.</p>\n\n\n\n\n<h2>\n  \n  \n  🎯 Summary and Reflections\n</h2>\n\n<p>This challenge underscored how Python blends structure with style for insightful reports. It prompted thoughts on:</p>\n\n<ul>\n<li>\n<strong>Pairwise efficiency</strong>: Nested loops for exhaustive checks, balanced by quick exits on no-matches.</li>\n<li>\n<strong>Collection power</strong>: Sets for overlap detection, turning fuzzy comparisons into precise queries.</li>\n<li>\n<strong>Presentation polish</strong>: Formatting that elevates output from functional to engaging.</li>\n</ul>\n\n<p>The fun twist was visualizing the network; running it sparked ideas of who might collaborate on projects, like Alice and Sarah teaming up. For expansions, graph libraries like NetworkX could map full connections, or input from CSV for real rosters.</p>\n\n<p><strong>Advanced Alternatives</strong>: Swap loops for itertools.combinations to halve comparisons, or pipe to HTML for web reports with CSS colors. How do you jazz up console outputs in Python? Share your formatting favorites below!</p>\n\n\n\n\n<h2>\n  \n  \n  🚀 Next Steps and Resources\n</h2>\n\n<p>Day 16 connected data to stories, priming for graph-like puzzles ahead. If you're riding the #80DaysOfChallenges wave, how did you handle the overlaps? Any set tricks or color schemes? Spill in the comments!</p>\n\n<ul>\n<li>\n<strong>Source Code for Challenge #16</strong>: <a href=\"https://github.com/Sherouz/80-days-of-challenges/blob/main/scripts/classmates_report.py\" rel=\"noopener noreferrer\">scripts/classmates_report.py</a>\n</li>\n<li>\n<strong>Main Repository</strong>: <a href=\"https://github.com/Sherouz/80-days-of-challenges\" rel=\"noopener noreferrer\">80-days-of-challenges</a>\n</li>\n<li>\n<strong>Daily Updates</strong>: <a href=\"https://x.com/Shahrouzlogs\" rel=\"noopener noreferrer\">Twitter/X (@Shahrouzlogs)</a>\n</li>\n</ul>\n\n<p>Onward to Day 17, eyeing more ways to link the dots!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Centralised Logging for AWS Glue Jobs with Python","url":"https://dev.to/katevu/centralised-logging-for-aws-glue-jobs-with-python-353b","date":1761563628,"author":"Kate Vu","guid":316734,"unread":true,"content":"<p>When I was working with AWS Glue jobs, I ran into a frustrating problem. I had a few Glue jobs and a utils module, and I’d set up logging in every module so the same code appeared in multiple places. Things got even worse when I needed to update the logger because I had to change the same logic everywhere. Now things got bitter, and I copied and pasted the same code everywhere in anger.<br>\nThat’s when I realized I needed a centralized logging setup that I could reuse across all my Glue jobs. Centralized logging keeps things consistent, secure, easier to maintain, and makes debugging a lot simpler.</p>\n\n\n\n\n<p><strong>Why Centralize Logging?</strong><br>\nCentralized logging brings several benefits:</p>\n\n<ul>\n<li><p>Consistency: All jobs share the same log format, levels, and filtering — no surprises when you check different logs.<br>\nMaintainability: Update once, and every job gets the change automatically.</p></li>\n<li><p>Structured Context: You can define a clear structure for your log messages and build a reusable log function to capture the details you need. In my case, I needed specific info for S3 operations — like bucket name, key, and action.</p></li>\n<li><p>Flexibility: With dictionary-based configuration, updating formats or handlers later is super simple.</p></li>\n<li><p>Traceability: Module-level loggers give you hierarchical control while still sharing the same handlers and formatters.</p></li>\n<li><p>Security: You can set log levels differently for each environment. For example, log only INFO in production but allow DEBUG in dev. That way, sensitive data stays out of your production logs.</p></li>\n</ul>\n\n\n\n\n<p><strong>Setting Up the Centralized Logging Configuration</strong><br>\nHere’s how I structured my logging_config module:</p>\n\n<ul>\n<li>Define formatters, handlers, and loggers in setup_logging()\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>def setup_logging(\n    level: str = \"INFO\",\n    log_format: Optional[str] = None,\n    log_file: Optional[str] = None,\n    environment: str = \"dev\",\n) -&gt; logging.Logger:\n    \"\"\"\n    Set up centralized logging configuration.\n\n    Args:\n        level: Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\n        log_format: Custom log format string\n        log_file: Path to log file (optional)\n        environment: Environment name (dev, staging, prod)\n\n    Returns:\n        Configured logger instance\n    \"\"\"\n\n    # Default format with structured information\n    if log_format is None:\n        log_format = (\n            \"%(asctime)s | %(levelname)-8s | %(name)-20s | \"\n            \"%(funcName)-15s:%(lineno)-4d | %(message)s\"\n        )\n\n    # Create handlers\n    handlers = {\n        \"stdout\": {\n            \"class\": \"logging.StreamHandler\",\n            \"level\": \"INFO\",\n            \"formatter\": \"simple\",\n            \"stream\": \"ext://sys.stdout\",\n        },\n        \"stderr\": {\n            \"class\": \"logging.StreamHandler\",\n            \"level\": \"ERROR\",\n            \"formatter\": \"simple\",\n            \"stream\": \"ext://sys.stderr\",\n        },\n    }\n\n    # Add file handler if specified\n    if log_file:\n        handlers[\"file\"] = {\n            \"class\": \"logging.handlers.RotatingFileHandler\",\n            \"level\": level,\n            \"formatter\": \"detailed\",\n            \"filename\": log_file,\n            \"maxBytes\": 10485760,  # 10MB\n            \"backupCount\": 5,\n            \"encoding\": \"utf8\",\n        }\n\n    # Logging configuration dictionary\n    logging_config = {\n        \"version\": 1,\n        \"disable_existing_loggers\": False,  # Important to keep this False\n        \"formatters\": {\n            \"detailed\": {\"format\": log_format, \"datefmt\": \"%Y-%m-%d %H:%M:%S\"},\n            \"simple\": {\"format\": \"%(name)-20s - %(levelname)s - %(message)s\"},\n        },\n        \"handlers\": handlers,\n        \"loggers\": {\n            # Root logger - Parent of all loggers\n            \"\": {\n                \"level\": level,\n                \"handlers\": list(handlers.keys()),\n            },\n            # AWS SDK loggers (reduce noise)\n            \"boto3\": {\"level\": \"WARNING\"},\n            \"botocore\": {\"level\": \"WARNING\"},\n            \"urllib3\": {\"level\": \"WARNING\"},\n            # PySpark loggers\n            \"pyspark\": {\"level\": \"WARNING\"},\n            \"py4j\": {\"level\": \"WARNING\"},\n        },\n    }\n\n    # Apply configuration\n    logging.config.dictConfig(logging_config)\n\n    # Get logger for the calling module\n    logger = logging.getLogger(__name__)\n\n    # Log configuration info\n    logger.info(f\"Logging configured - Level: {level}, Environment: {environment}\")\n    if log_file:\n        logger.info(f\"Log file: {log_file}\")\n\n    return logger\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>Define purpose specific logging functions\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>def log_function_call(logger: logging.Logger, func_name: str, **kwargs):\n    \"\"\"\n    Log function entry with parameters.\n\n    Args:\n        logger: Logger instance\n        func_name: Function name\n        **kwargs: Function parameters to log\n    \"\"\"\n    params = {\n        k: v for k, v in kwargs.items() if k not in [\"password\", \"secret\", \"token\"]\n    }\n    logger.debug(f\"Entering {func_name} with params: {params}\")\n\n\ndef log_performance(logger: logging.Logger, operation: str, duration: float, **metrics):\n    \"\"\"\n    Log performance metrics.\n\n    Args:\n        logger: Logger instance\n        operation: Operation name\n        duration: Duration in seconds\n        **metrics: Additional metrics to log\n    \"\"\"\n    logger.info(f\"Performance - {operation}: {duration:.3f}s\")\n    if metrics:\n        for key, value in metrics.items():\n            logger.info(f\"  {key}: {value}\")\n\n\ndef log_dataframe_info(logger: logging.Logger, df_name: str, df):\n    \"\"\"\n    Log DataFrame information for debugging.\n\n    Args:\n        logger: Logger instance\n        df_name: DataFrame name/description\n        df: PySpark DataFrame\n    \"\"\"\n    try:\n        row_count = df.count()\n        col_count = len(df.columns)\n        logger.info(\n            f\"DataFrame '{df_name}' - Rows: {row_count:,}, Columns: {col_count}\"\n        )\n        logger.debug(f\"DataFrame '{df_name}' columns: {df.columns}\")\n    except Exception as e:\n        logger.warning(f\"Could not get DataFrame info for '{df_name}': {e}\")\n\n\ndef log_s3_operation(\n    logger: logging.Logger, operation: str, bucket: str, key: str, **kwargs\n):\n    \"\"\"\n    Log S3 operations with consistent format.\n\n    Args:\n        logger: Logger instance\n        operation: S3 operation (read, write, delete, etc.)\n        bucket: S3 bucket name\n        key: S3 object key\n        **kwargs: Additional operation details\n    \"\"\"\n    details = f\" | {kwargs}\" if kwargs else \"\"\n    logger.info(f\"S3 {operation.upper()} - s3://{bucket}/{key}{details}\")\n\n\ndef log_error_with_context(\n    logger: logging.Logger, error: Exception, context: Dict[str, Any]\n):\n    \"\"\"\n    Log errors with additional context information.\n\n    Args:\n        logger: Logger instance\n        error: Exception that occurred\n        context: Additional context information\n    \"\"\"\n    logger.error(f\"Error: {str(error)}\")\n    logger.error(f\"Context: {json.dumps(context, indent=2, default=str)}\")\n    logger.exception(\"Full traceback:\")\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>Using the logger in AWS Glue Jobs\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code># Initialize root logger\nsetup_logging(level=\"INFO\", environment=args[\"env_name\"])\n\n# Get module level logger\nlogger = get_logger(\"glue.ingestion\")\n\n# Or\nlogger = get_logger(\"glue.utils\")\n\n# Example:\nlogger.info(f\"Writing processed data to: {output_s3_path}\")\n       log_s3_operation(\n           logger,\n           \"write\",\n           output_bucket,\n           f\"{env_name}/staging_{file_name.split('.')[0]}/\",\n       )\n</code></pre>\n\n</div>\n\n\n\n<p>With this setup, logs clearly show where they came from</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fcj4xsxwzy4e3pu9f0uoe.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fcj4xsxwzy4e3pu9f0uoe.png\" alt=\" \" width=\"800\" height=\"447\"></a></p>\n\n\n\n\n<p><strong>Logger vs print()</strong><br>\nprint() is easy to use and requires no setup. For quick checks, it works fine. But once your pipelines grow, run in parallel, or deploy across environments, it becomes harder to track and manage.<br>\nHere’s why I chose logger over print() for my case:</p>\n\n<ul>\n<li>Control: Use log levels (DEBUG, INFO, ERROR, etc.) to filter output without touching code everywhere.</li>\n<li>Consistency: All jobs follow the same format with timestamps, module names, and job context, making logs readable and traceable.</li>\n<li>Security: You can debug in development without risking sensitive information appearing in production logs by setting log levels — something print() would require extra effort to manage.</li>\n</ul>\n\n<p><strong>References</strong><br>\n<a href=\"https://docs.python.org/3/howto/logging.html\" rel=\"noopener noreferrer\">https://docs.python.org/3/howto/logging.html</a><br>\n<a href=\"https://docs.python.org/3/howto/logging-cookbook.html\" rel=\"noopener noreferrer\">https://docs.python.org/3/howto/logging-cookbook.html</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"MorreLinks","url":"https://dev.to/uba_morris_786f3eaa4ad4a4/morrelinks-mp0","date":1761562445,"author":"Uba Morris","guid":316709,"unread":true,"content":"<p><a href=\"https://mixymoney.xyz/\" rel=\"noopener noreferrer\">https://mixymoney.xyz/</a><br>\n<a href=\"https://elonnmoney.bid/\" rel=\"noopener noreferrer\">https://elonnmoney.bid/</a><br>\n<a href=\"https://czauvr.in/\" rel=\"noopener noreferrer\">https://czauvr.in/</a><br>\n<a href=\"https://topgamee.biz/\" rel=\"noopener noreferrer\">https://topgamee.biz/</a><br>\n<a href=\"https://elomoney.bid/\" rel=\"noopener noreferrer\">https://elomoney.bid/</a><br>\n<a href=\"https://bahira.top/\" rel=\"noopener noreferrer\">https://bahira.top/</a><br>\n<a href=\"https://styxmarket.live/\" rel=\"noopener noreferrer\">https://styxmarket.live/</a><br>\n<a href=\"https://store77.me\" rel=\"noopener noreferrer\">https://store77.me</a><br>\n<a href=\"https://ssndob.pro\" rel=\"noopener noreferrer\">https://ssndob.pro</a><br>\n<a href=\"https://savastaen0.tools\" rel=\"noopener noreferrer\">https://savastaen0.tools</a><br>\n<a href=\"https://Ssndobs.cc\" rel=\"noopener noreferrer\">https://Ssndobs.cc</a><br>\n<a href=\"https://lukicrown.icu/\" rel=\"noopener noreferrer\">https://lukicrown.icu/</a><br>\n<a href=\"https://lukicrown.cards/\" rel=\"noopener noreferrer\">https://lukicrown.cards/</a><br>\n<a href=\"https://topgame.bz\" rel=\"noopener noreferrer\">https://topgame.bz</a><br>\n<a href=\"https://exech.net\" rel=\"noopener noreferrer\">https://exech.net</a><br>\n<a href=\"https://styxmarket.cards/\" rel=\"noopener noreferrer\">https://styxmarket.cards/</a><br>\n<a href=\"https://bahiracc.shop/\" rel=\"noopener noreferrer\">https://bahiracc.shop/</a><br>\n<a href=\"https://bahira.market/\" rel=\"noopener noreferrer\">https://bahira.market/</a><br>\n<a href=\"https://gonzocvv.info/\" rel=\"noopener noreferrer\">https://gonzocvv.info/</a><br>\n<a href=\"https://gonzo-cvv.xyz/\" rel=\"noopener noreferrer\">https://gonzo-cvv.xyz/</a><br>\n<a href=\"https://jerrysvc.vc\" rel=\"noopener noreferrer\">https://jerrysvc.vc</a><br>\n<a href=\"https://exsch.net\" rel=\"noopener noreferrer\">https://exsch.net</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Zen Of Python: 19 Rules For Clean, Readable, And Elegant Code","url":"https://dev.to/keploy/zen-of-python-19-rules-for-clean-readable-and-elegant-code-1ilk","date":1761562296,"author":"keploy","guid":316708,"unread":true,"content":"<p>The Zen of Python encapsulates the characteristics that led to Python being recognized as one of the most loved programming languages in the world. The principles, written by Tim Peters, are not meant to be absolute rules, but gentle reminders to consider in pursuit of writing beautiful, clean, and efficient code. They are all based on qualities that Python espouses: simplicity, clarity, and beauty.</p>\n\n<h2>\n  \n  \n  <strong>The Origin: PEP 20 and Tim Peters' Vision</strong>\n</h2>\n\n<p>The Zen of Python was created by Tim Peters, one of Python's core developers and later published as PEP 20. It represents the distilled wisdom of the Python community, and also embodies that philosophy, which Guido van Rossum (the creator of Python) wrote about as code readability and simplicity. The guiding principles were not intended to be prescriptive of any dogma or rigidification, but to start a culture around building code to be \"natural\" and \"elegant.\"</p>\n\n<p>You can reveal the Zen in your terminal simply by typing:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>xml\npython -m this\n</code></pre>\n\n</div>\n\n\n\n<p>This command displays 19 aphorisms that have become the moral compass of Python developers worldwide.</p>\n\n<h2>\n  \n  \n  The 19 Principles of the Zen of Python (Explained with Context)\n</h2>\n\n<p><strong>1.</strong> Beautiful is better than ugly. Code should be aesthetically pleasing and readable. It encourages developers to value clarity over cleverness.</p>\n\n<p><strong>2.</strong> Explicit is better than implicit. Make behavior clear. Implicit code may confuse others, while explicit logic is easy to understand.</p>\n\n<p><strong>3.</strong> Simple is better than complex. Choose the simplest solution that works. Avoid unnecessary complexity.</p>\n\n<p><strong>4.</strong> Complex is better than complicated. When complexity is required, make it manageable—not confusing.</p>\n\n<p><strong>5.</strong> Flat is better than nested. Avoid deep nesting in loops or conditionals. Flat structures enhance readability.</p>\n\n<p><strong>6.</strong> Sparse is better than dense. Use proper spacing and indentation. White space improves clarity.</p>\n\n<p><strong>7.</strong> Readability counts. Readable code saves time and reduces errors. It’s the cornerstone of Pythonic design.</p>\n\n<p><strong>8.</strong> Special cases are not special sufficient to break the rules. A consistent approach is necessary. Exceptions are the exception to the rule.</p>\n\n<p><strong>9.</strong> Although practicality beats purity. Pragmatism wins. Real world solutions are better than theoretically perfect ones.</p>\n\n<p><strong>10.</strong> Errors should never pass silently. Take exception to error, rather than ignoring it.</p>\n\n<p><strong>11.</strong> Unless silenced explicitly. Only suppress error when absolutely necessary.</p>\n\n<p><strong>12.</strong> In the face of ambiguity, refuse the temptation to guess. Avoid the unclear and uncertain. Code should be predictable.</p>\n\n<p><strong>13.</strong> There should be one - and preferably only one - obvious way to do it. Promotes consistency and avoids confusion.</p>\n\n<p><strong>14.</strong> Although that way may not be obvious at first unless you're Dutch. A sly reference to Guido van Rossum, creator of Python.</p>\n\n<p><strong>15.</strong> Now is better than never. Don't be so preoccupied thinking, just begin coding, learning, and refining.</p>\n\n<p><strong>16.</strong> Although never is often better than right now. Don't rush into a bad situation. Quality take precedence.</p>\n\n<p><strong>17.</strong> If the implementation is hard to explain, then it's a bad idea. Good code is simple enough to easily explain.</p>\n\n<p><strong>18.</strong> If the implementation is easy to explain, then it might be a good idea. Clarity usually means quality.</p>\n\n<p><strong>19.</strong> Namespaces are one honkin' great idea - let's do the more of those! The use of namespaces organizes code in a clean way and avoids name conflicts.</p>\n\n<h2>\n  \n  \n  Real-World Applications of Zen in Modern Python\n</h2>\n\n<p>The Zen of Python isn’t theoretical—it deeply influences real-world development. Frameworks like Django and Flask follow these principles closely. For example, Django’s design favors readability and simplicity, making it accessible to beginners while powerful for professionals.</p>\n\n<p><strong>Example 1:</strong> Simplicity Over Complexity<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>xml\nBad:\ndef get_even(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n\nGood:\ndef get_even(nums):\n    return [n for n in nums if n % 2 == 0]\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Example 2:</strong> Explicit Over Implicit<br><br>\nInstead of using magic variables or hidden behavior, Python encourages explicit clarity. For instance, prefer named arguments in functions to make intent obvious.</p>\n<h2>\n  \n  \n  Zen of Python vs Other Programming Philosophies\n</h2>\n\n<p>Unlike Java, which prioritizes stringent typing and verbose syntax, Python emphasizes simplicity and flexibility. While C++ incentivizes performance tuning, Python incentivizes readability and productivity. This emphasizes Python's popularity for rapid development, teaching, and data science.</p>\n\n<p>Despite differences in the focus of other programming languages on machine efficiency, Python focuses — through the Zen — on human efficiency, or in other words, making it easier to read, modify, and maintain code.</p>\n<h3>\n  \n  \n  <strong>Explore More Python Guides</strong>\n</h3>\n\n<p>If you enjoyed learning about the <em>Zen of Python</em>, here are a few more Python articles you might find helpful:</p>\n\n<ul>\n<li><p><a href=\"https://keploy.io/blog/community/guide-finding-elements-in-a-list-using-python\" rel=\"noopener noreferrer\">Guide: Finding Elements in a List Using Python</a><br><br>\n<em>Learn efficient methods like loops, list comprehensions, and built-in functions to find elements in a Python list.</em></p></li>\n<li><p><a href=\"https://keploy.io/blog/community/pull-api-data-python\" rel=\"noopener noreferrer\">How to Pull API Data in Python</a><br><br>\n<em>Step-by-step guide to fetching and handling API data using Python’s</em> <code>requests</code> library.</p></li>\n<li><p><a href=\"https://keploy.io/blog/community/guide-finding-elements-in-a-list-using-python\" rel=\"noopener noreferrer\">Python Switch Case: How to Implement It</a><br><br>\n<em>Discover different ways to simulate switch-case behavior in Python using if-elif chains and dictionaries.</em></p></li>\n<li><p><a href=\"https://keploy.io/blog/community/guide-finding-elements-in-a-list-using-python\" rel=\"noopener noreferrer\">When to Use a List Comprehension in Python</a><br><br>\n<em>Understand the best use cases for list comprehensions to make your Python code concise and readable.</em></p></li>\n</ul>\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>\"The Zen of Python\", while indeed a clever list of adages, represents a mentality that promotes writing code that is simple, explicit, and elegant. These 19 aphorisms may be valuable whether you are writing a small script or a large application - by utilizing the Zen, you are more likely to produce maintainable and readable code. As Tim Peters famously reminds, 'Readability counts. Simple is better than complex.'</p>\n<h2>\n  \n  \n  FAQs\n</h2>\n<h3>\n  \n  \n  <strong>1: What is the Zen of Python used for?</strong>\n</h3>\n\n<p>It helps developers follow Pythonic principles to write clean, readable, and efficient code.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>xml\n[if !supportLineBreakNewLine]\n[endif]\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  <strong>2: Who wrote the Zen of Python?</strong>\n</h3>\n\n<p>Tim Peters, a prominent Python developer, wrote it as a guide to Python’s design philosophy.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>xml\n[if !supportLineBreakNewLine]\n[endif]\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  <strong>3: Is the Zen of Python still relevant in 2025?</strong>\n</h3>\n\n<p>Absolutely. The principles are timeless and continue to guide Python development in AI, web, and data science.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>xml\n[if !supportLineBreakNewLine]\n[endif]\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  <strong>4:</strong> <strong>Can I apply the Zen of Python to other languages?</strong>\n</h3>\n\n<p>Yes. Many of its ideas, simplicity, readability, and clarity, are universal and apply to software development in general.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>xml\n[if !supportLineBreakNewLine]\n[endif]\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  5: How can I view the Zen of Python?\n</h3>\n\n<p>Simply run 'python -m this' in your terminal to see all 19 principles.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>xml\n[if !supportLineBreakNewLine]\n[endif]\n</code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-pfe","date":1761559707,"author":"Vibe YouTube","guid":316707,"unread":true,"content":"<p>In this quick‐fire tutorial, Tech With Tim walks you through building a Python AI agent in under ten minutes—covering install and setup, grabbing your OpenAI API key, importing the right libraries, defining custom tools, spinning up an LLM and agent, writing the driver code, and putting it all to the test. All the source code and timestamps are linked so you can jump straight to whatever stage you’re curious about.</p>\n\n<p>Along the way, Tim plugs his DevLaunch mentorship program for hands-on project guidance (no fluff, real accountability) and throws in a free Notion link to keep your notes in order. Perfect if you’re ready to level up from tutorials to real-world AI projects.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=gaGaPpnexxA\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Created a weather app in python #python #beginners #showdev #opensource","url":"https://dev.to/bright_filess/created-a-weather-app-in-python-python-beginners-showdev-opensource-45ol","date":1761559612,"author":"Chewing_gum","guid":316760,"unread":true,"content":"<p>Got inspired by Bro Code and made a weather app that fetches data from a weather api. The api is by openweathermap.org. If you locate any errors/un-optimizations, please share it. It will help me a lot. </p>\n\n<p>You can find it here: <a href=\"https://github.com/brightfiless/python_weather_api\" rel=\"noopener noreferrer\">https://github.com/brightfiless/python_weather_api</a></p>\n\n<p>Features</p>\n\n<ul>\n<li>Fetches live weather info from an API</li>\n<li>Simple PyQt5 GUI</li>\n<li>Lightweight and easy to run</li>\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"AgentKit: How Efficient Laziness Fixes Fragile LLM Workflows","url":"https://dev.to/pascal_cescato_692b7a8a20/agentkit-how-efficient-laziness-fixes-fragile-llm-workflows-3291","date":1761555267,"author":"Pascal CESCATO","guid":316640,"unread":true,"content":"<p><em>How I stopped debugging JSON parsing errors and started shipping features</em></p>\n\n<h2>\n  \n  \n  TL;DR\n</h2>\n\n<p>I hate debugging the same JSON parsing error twice. AgentKit lets you define LLM agents declaratively (YAML + Pydantic), so validation happens automatically. One day of setup saved me 3+ hours/week of debugging. That's efficient laziness in action.</p>\n\n\n\n\n<p>📚 <strong>This is Part 2 of my \"Efficient Laziness\" series.</strong></p>\n\n<ul>\n<li>Part 1: <a href=\"https://dev.to/pascal_cescato_692b7a8a20/database-design-start-from-business-logic-or-jump-into-code-1k5m\">Database Design: Start from Business Logic or Jump into Code?</a>\n</li>\n<li>Part 2: You're reading it</li>\n<li>Part 3: Coming soon</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  The Story: When Your Newsletter Pipeline Becomes a Debugging Hell\n</h2>\n\n<p>I run a weekly tech newsletter. The pipeline should be simple:</p>\n\n<ol>\n<li>Fetch articles from Wallabag</li>\n<li>Clean HTML → Markdown\n</li>\n<li>\n<strong>AI analysis</strong> (summary, scoring, keywords, categorization)</li>\n<li>Insert into PostgreSQL</li>\n<li>Generate HTML newsletter</li>\n<li>Send automatically</li>\n</ol>\n\n<p><strong>The reality?</strong> Step 3 — the \"AI-powered\" part — was a textbook example of <em>automated inefficiency</em>.<br>\nEvery Monday, the pipeline failed for one of these entirely predictable reasons:<br>\n❌ JSON malformed → <em>\"Invalid syntax at line 42\"</em> (manual retry required)<br>\n❌ Missing \"keywords\" field → <em>\"Prompt tweaked, workflow rerun\"</em> (rinse, repeat)<br>\n❌ Score = 11 instead of max 10 → <em>\"Validation node added\"</em> (because of course)<br>\n❌ Category misspelled → build category validator<br>\n<strong>Time spent debugging and patching n8n workflows:</strong> 2–3 hours.<br>\n<strong>Time spent on actual work:</strong> <em>Statistically insignificant</em>.</p>\n\n<p>I wasn't building features. I was building safety nets for unpredictable LLM outputs.</p>\n\n<p><strong>My tolerance for waste:</strong> Zero.</p>\n\n\n<h2>\n  \n  \n  The Question: What If Validation Was the System's Job, Not Mine?\n</h2>\n\n<p>Before touching any code, I asked myself THE question (sound familiar from my <a href=\"https://dev.to/pascal_cescato_692b7a8a20/database-design-start-from-business-logic-or-jump-into-code-1k5m\">database design article</a>?):</p>\n\n<blockquote>\n<p>\"What am I actually trying to do here?\"</p>\n</blockquote>\n\n<p>Not \"call an API and hope for the best.\"</p>\n\n<p><strong>Answer:</strong> Get a validated ContentAnalysisOutput from markdown_content input. Period.</p>\n\n<p>Everything else—retries, JSON parsing, validation—is plumbing. Plumbing I shouldn't have to build myself.</p>\n\n<p>Let’s see what that looks like in code →</p>\n<h2>\n  \n  \n  Enter AgentKit: Declarative Agents (or, How I Got Lazy the Right Way)\n</h2>\n\n<p><strong>The obvious solution?</strong><br>\nAgentKit — currently in open beta, because <em>of course</em> someone finally formalized this — operates on a principle so simple it’s almost insulting:<br>\n<strong>You declare what you need. The system handles <em>how</em>.</strong><br>\n<em>(Revolutionary, I know.)</em></p>\n\n<p><strong>Why this works:</strong></p>\n\n<ul>\n<li>\n<strong>Core concept:</strong> No more babysitting JSON. No more \"hope the LLM complies this time.\"</li>\n<li>\n<strong>Implementation:</strong> YAML + Pydantic. Because if your contract isn’t machine-enforced, it’s just a wishlist.</li>\n</ul>\n<h3>\n  \n  \n  Before (n8n imperative <del>workflow</del> chaos):\n</h3>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>[AI Node] → [Parse JSON Node] \n  → IF valid JSON\n    → [Validate Schema Node]\n      → IF valid schema\n        → ✅ Continue\n      → ELSE ❌ Log error, retry with different prompt\n  → ELSE ❌ Log error, retry with explicit \"return valid JSON\" instruction\n</code></pre>\n\n</div>\n\n\n<p>Result: 12 nodes, 3 branches, unmaintainable — or, at best, a maintenance nightmare.<br>\n(Because nothing says \"scalable\" like hardcoding validation logic in a GUI.)</p>\n<h3>\n  \n  \n  After (AgentKit declarative agent):\n</h3>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code><span class=\"na\">agent</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">content_analyzer</span>\n  <span class=\"na\">output_schema</span><span class=\"pi\">:</span> <span class=\"s\">ContentAnalysisOutput</span>  <span class=\"c1\"># Pydantic model</span>\n  <span class=\"na\">max_retries</span><span class=\"pi\">:</span> <span class=\"m\">2</span>\n  <span class=\"c1\"># System handles validation &amp; retry automatically</span>\n</code></pre>\n\n</div>\n\n\n<p><em>(No GUI. No drag-and-drop. Just a contract. Enforced.)</em></p>\n\n<p>Result: 1 YAML file. Validation happens automatically. Retries handled by the runner.</p>\n\n<p><strong>That's efficient laziness:</strong> I defined the contract once, the system enforces it forever.</p>\n<h2>\n  \n  \n  From Paper to YAML: The Agent Contract\n</h2>\n\n<p>Just like with database modeling, I started with paper. Not code. Questions first:</p>\n\n<ul>\n<li>What are my inputs? → <code>markdown_content: string</code>\n</li>\n<li>What do I need back? → Structured scoring + summary + keywords + category</li>\n<li>What constraints? → Scores must be 0-3, keywords minimum 3, total max 10</li>\n</ul>\n\n<p>Then I translated that into a Pydantic model (the \"schema\"):<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span><span class=\"p\">,</span> <span class=\"n\">conint</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n<span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ContentAnalysisOutput</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">smb_applicability</span><span class=\"p\">:</span> <span class=\"nf\">conint</span><span class=\"p\">(</span><span class=\"n\">ge</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">le</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># ge = greater/equal, le = less/equal\n</span>    <span class=\"n\">automation_potential</span><span class=\"p\">:</span> <span class=\"nf\">conint</span><span class=\"p\">(</span><span class=\"n\">ge</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">le</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">economic_value</span><span class=\"p\">:</span> <span class=\"nf\">conint</span><span class=\"p\">(</span><span class=\"n\">ge</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">le</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">open_source</span><span class=\"p\">:</span> <span class=\"nf\">conint</span><span class=\"p\">(</span><span class=\"n\">ge</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">le</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">innovation</span><span class=\"p\">:</span> <span class=\"nf\">conint</span><span class=\"p\">(</span><span class=\"n\">ge</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">le</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">total_score</span><span class=\"p\">:</span> <span class=\"nf\">conint</span><span class=\"p\">(</span><span class=\"n\">ge</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">le</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"n\">summary</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">keywords</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nc\">Field</span><span class=\"p\">(...,</span> <span class=\"n\">min_length</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"n\">category</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Why Pydantic?</strong></p>\n\n<ul>\n<li>Automatic validation (no custom code)</li>\n<li>Clear error messages (\"expected int 0-3, got 11\")</li>\n<li>Type hints your IDE understands</li>\n<li>Serialization/deserialization built-in</li>\n</ul>\n\n<p>This model is my contract. Any LLM output that doesn't match this contract gets automatically rejected and retried.</p>\n\n<h2>\n  \n  \n  The Agent Definition: YAML as the Single Source of Truth\n</h2>\n\n<p>Here's the complete agent definition:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code><span class=\"na\">agent</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">content_analyzer</span>\n  <span class=\"na\">description</span><span class=\"pi\">:</span> <span class=\"pi\">&gt;</span>\n    <span class=\"s\">Analyzes web content to generate business-oriented summaries</span>\n    <span class=\"s\">with normalized scoring and classification.</span>\n\n  <span class=\"na\">inputs</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"na\">markdown_content</span><span class=\"pi\">:</span> <span class=\"s\">string</span>\n\n  <span class=\"na\">model</span><span class=\"pi\">:</span>\n    <span class=\"na\">provider</span><span class=\"pi\">:</span> <span class=\"s\">variable</span>  <span class=\"c1\"># Swap OpenAI/Mistral/Llama easily</span>\n    <span class=\"na\">model_name</span><span class=\"pi\">:</span> <span class=\"s\">variable</span>\n    <span class=\"na\">temperature</span><span class=\"pi\">:</span> <span class=\"m\">0.1</span>\n    <span class=\"na\">response_format</span><span class=\"pi\">:</span> <span class=\"s\">json</span>\n\n  <span class=\"na\">prompt</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>\n    <span class=\"s\">You are a technology analyst specializing in open-source solutions.</span>\n    <span class=\"s\">Analyze the following content and provide a structured evaluation.</span>\n\n    <span class=\"s\">Scoring criteria (STRICT):</span>\n      <span class=\"s\">- SMB applicability: 0-3</span>\n      <span class=\"s\">- Automation potential: 0-2</span>\n      <span class=\"s\">- Economic value: 0-2</span>\n      <span class=\"s\">- Open-source: 0-2</span>\n      <span class=\"s\">- Innovation: 0-1</span>\n      <span class=\"s\">- TOTAL must be ≤ 10</span>\n\n    <span class=\"s\">Expected JSON format:</span>\n    <span class=\"s\">{</span>\n      <span class=\"s\">\"smb_applicability\": 0,</span>\n      <span class=\"s\">\"automation_potential\": 0,</span>\n      <span class=\"s\">\"economic_value\": 0,</span>\n      <span class=\"s\">\"open_source\": 0,</span>\n      <span class=\"s\">\"innovation\": 0,</span>\n      <span class=\"s\">\"total_score\": 0,</span>\n      <span class=\"s\">\"summary\": \"...\",</span>\n      <span class=\"s\">\"keywords\": [\"...\", \"...\", \"...\"],</span>\n      <span class=\"s\">\"category\": \"...\"</span>\n    <span class=\"s\">}</span>\n\n    <span class=\"s\">Content to analyze:</span>\n    <span class=\"s\">{{markdown_content}}</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Why YAML?</strong></p>\n\n<ul>\n<li>Same reason I use paper before coding: think once, write once</li>\n<li>Git-friendly (version control, diffs, rollbacks)</li>\n<li>Human-readable (non-devs can review prompts)</li>\n<li>Language-agnostic (runs anywhere: Python, Node, Go...)</li>\n<li>Already standard for infrastructure (Docker, K8s, Terraform)</li>\n</ul>\n\n<h2>\n  \n  \n  Building the Runner: 150 Lines to Never Debug JSON Again\n</h2>\n\n<p>Since AgentKit isn't fully released, I built a minimal Python runner. Core principle:</p>\n\n<p><strong>The runner handles ALL the annoying stuff I hate doing manually.</strong></p>\n\n<h3>\n  \n  \n  Core execution loop with automatic retry:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">jinja2</span> <span class=\"kn\">import</span> <span class=\"n\">Template</span>\n<span class=\"kn\">import</span> <span class=\"n\">json</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">run_agent</span><span class=\"p\">(</span><span class=\"n\">agent_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">max_retries</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    Execute agent with automatic validation &amp; retry\n\n    This is the </span><span class=\"sh\">'</span><span class=\"s\">efficient laziness</span><span class=\"sh\">'</span><span class=\"s\"> in action:\n    - Template rendering: automatic\n    - JSON parsing errors: automatic retry\n    - Schema validation: automatic via Pydantic\n    - Error logging: structured\n\n    I never touch this code. It just works.\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"nc\">Template</span><span class=\"p\">(</span><span class=\"n\">agent_config</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">agent</span><span class=\"sh\">\"</span><span class=\"p\">][</span><span class=\"sh\">\"</span><span class=\"s\">prompt</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n    <span class=\"n\">rendered</span> <span class=\"o\">=</span> <span class=\"n\">template</span><span class=\"p\">.</span><span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">variables</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">attempt</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">max_retries</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Call LLM (OpenRouter, Mistral, OpenAI...)\n</span>            <span class=\"n\">raw_response</span> <span class=\"o\">=</span> <span class=\"nf\">call_llm</span><span class=\"p\">(</span><span class=\"n\">rendered</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Parse JSON (can fail)\n</span>            <span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">loads</span><span class=\"p\">(</span><span class=\"n\">raw_response</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Validate with Pydantic (can fail)\n</span>            <span class=\"n\">validated</span> <span class=\"o\">=</span> <span class=\"nc\">ContentAnalysisOutput</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">parsed</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Success! Return validated data\n</span>            <span class=\"k\">return</span> <span class=\"p\">{</span>\n                <span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span> \n                <span class=\"sh\">\"</span><span class=\"s\">output</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">validated</span><span class=\"p\">.</span><span class=\"nf\">dict</span><span class=\"p\">(),</span> \n                <span class=\"sh\">\"</span><span class=\"s\">attempt</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">attempt</span>\n            <span class=\"p\">}</span>\n\n        <span class=\"k\">except</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">JSONDecodeError</span><span class=\"p\">:</span>\n            <span class=\"c1\"># LLM returned invalid JSON → retry with correction prompt\n</span>            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">⚠️ Invalid JSON (attempt </span><span class=\"si\">{</span><span class=\"n\">attempt</span><span class=\"si\">}</span><span class=\"s\">) → auto-retrying</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"n\">rendered</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">The previous response was invalid JSON. </span><span class=\"sh\">\"</span>\n                <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Please fix it and return ONLY valid JSON:</span><span class=\"se\">\\n</span><span class=\"si\">{</span><span class=\"n\">raw_response</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Validation failed (wrong type, out of range, etc.)\n</span>            <span class=\"k\">if</span> <span class=\"n\">attempt</span> <span class=\"o\">==</span> <span class=\"n\">max_retries</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">error</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)}</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">❌ Validation error (attempt </span><span class=\"si\">{</span><span class=\"n\">attempt</span><span class=\"si\">}</span><span class=\"s\">): </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"s\"> → retrying</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>What this does for me:</strong><br>\n✅ Template rendering (Jinja2 variables)<br>\n✅ JSON parsing with automatic retry<br>\n✅ Schema validation with clear error messages<br>\n✅ Structured logging<br>\n✅ Retry logic with correction prompts</p>\n\n<p><strong>What I never have to do again:</strong><br>\n❌ Build custom validation nodes<br>\n❌ Debug \"why is this field missing?\"<br>\n❌ Add retry logic for the 50th time<br>\n❌ Parse error messages manually</p>\n<h2>\n  \n  \n  Exposing via FastAPI: One Endpoint, Infinite Agents\n</h2>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">fastapi</span> <span class=\"kn\">import</span> <span class=\"n\">FastAPI</span><span class=\"p\">,</span> <span class=\"n\">HTTPException</span>\n<span class=\"kn\">from</span> <span class=\"n\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span>\n<span class=\"kn\">import</span> <span class=\"n\">yaml</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">FastAPI</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AgentRequest</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">agent_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">markdown_content</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"nd\">@app.post</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/analyze</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">analyze</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">:</span> <span class=\"n\">AgentRequest</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    Universal agent executor\n\n    Add a new agent? Drop a YAML file in agents/.\n    No code changes. No deployments. Just works.\n\n    That</span><span class=\"sh\">'</span><span class=\"s\">s what I call scaling through laziness.\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"c1\"># Load agent config\n</span>    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">agents/</span><span class=\"si\">{</span><span class=\"n\">req</span><span class=\"p\">.</span><span class=\"n\">agent_name</span><span class=\"si\">}</span><span class=\"s\">.yaml</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">agent_config</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"p\">.</span><span class=\"nf\">safe_load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"nb\">FileNotFoundError</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">HTTPException</span><span class=\"p\">(</span><span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"n\">detail</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Agent </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">req</span><span class=\"p\">.</span><span class=\"n\">agent_name</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"s\"> not found</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Run agent (validation happens automatically)\n</span>    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nf\">run_agent</span><span class=\"p\">(</span>\n        <span class=\"n\">agent_config</span><span class=\"p\">,</span> \n        <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">markdown_content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">req</span><span class=\"p\">.</span><span class=\"n\">markdown_content</span><span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">]:</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">HTTPException</span><span class=\"p\">(</span><span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"n\">detail</span><span class=\"o\">=</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">error</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n</code></pre>\n\n</div>\n\n<h3>\n  \n  \n  Example response:\n</h3>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight json\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"success\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"output\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"smb_applicability\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"automation_potential\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"economic_value\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"open_source\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"innovation\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"total_score\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"summary\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Milvus Lite simplifies local vector database deployment...\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"keywords\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"Milvus\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"vector database\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"LLM\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"self-hosted\"</span><span class=\"p\">],</span><span class=\"w\">\n    </span><span class=\"nl\">\"category\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"AI &amp; Infrastructure\"</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n  </span><span class=\"nl\">\"attempt\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre>\n\n</div>\n\n<h2>\n  \n  \n  What This Saved Me (The ROI of Efficient Laziness)\n</h2>\n<h3>\n  \n  \n  Time Investment:\n</h3>\n\n<ul>\n<li>\n<strong>Initial setup:</strong> 1 day (YAML agent + runner + FastAPI)</li>\n<li>\n<strong>Per new agent:</strong> 30 minutes (just write YAML)</li>\n</ul>\n<h3>\n  \n  \n  Time Saved (Weekly):\n</h3>\n\n<ul>\n<li>\n<strong>Before:</strong> 3-4 hours debugging JSON errors, validation issues, retry logic</li>\n<li>\n<strong>After:</strong> 0 hours (system handles it)</li>\n<li>\n<strong>ROI:</strong> 12-16 hours/month saved</li>\n</ul>\n<h3>\n  \n  \n  But More Importantly:\n</h3>\n\n<p><strong>Mental peace.</strong></p>\n\n<p>I don't wake up Monday morning to find my newsletter broken because an LLM decided to return <code>\"keywords\": \"AI, automation\"</code> (string) instead of <code>\"keywords\": [\"AI\", \"automation\"]</code> (array).</p>\n\n<p>The system catches it. Retries. Logs the attempt. Works.</p>\n\n<p><strong>That's the real win:</strong> I freed my brain from babysitting unpredictable LLM outputs.</p>\n<h2>\n  \n  \n  A Real Example: Adding Payment Tracking (Wait, Wrong Article)\n</h2>\n\n<p>Actually, let me give you the RIGHT example:</p>\n\n<p>Three weeks after deploying this, my client asked:</p>\n\n<blockquote>\n<p>\"Can we add sentiment analysis to the content scoring?\"</p>\n</blockquote>\n\n<p><strong>My answer:</strong> \"Give me 1 hour.\"</p>\n\n<p>Why 1 hour and not 3?</p>\n\n<p>Because the structure was already there:</p>\n\n<ol>\n<li>Copy <code>content_analyzer.yaml</code> → <code>content_analyzer_v2.yaml</code>\n</li>\n<li>Add <code>sentiment: str</code> to Pydantic model</li>\n<li>Update prompt to include sentiment scoring</li>\n<li>Deploy (just drop the YAML file, no code changes)</li>\n</ol>\n\n<p><strong>Zero refactoring. Zero debugging. Zero broken workflows.</strong></p>\n\n<p>If I'd built this the n8n way with 12 validation nodes, it would've been 2 days of:</p>\n\n<ul>\n<li>Adding sentiment node</li>\n<li>Adding validation for sentiment</li>\n<li>Testing all branches</li>\n<li>Fixing edge cases</li>\n<li>Praying nothing else broke</li>\n</ul>\n\n<blockquote>\n<p>Loved \"efficient laziness\" in action here? Share your debugging horror stories or time-saving hacks below – let’s shape the next steps together! Check out my intro to CTEs on my newly Astro-migrated blog <a href=\"https://fr.benchwiseunderflow.in/blog/cte-clause-with-sql/\" rel=\"noopener noreferrer\">CTE : la clause WITH que les ORM ignorent (mais que vous devriez connaître)</a>, and stay tuned for my 3-part English series on dev.to starting next week, where I’ll apply this mindset to SQL optimization. Follow me to catch it all!**</p>\n</blockquote>\n<h2>\n  \n  \n  Why This Approach Should Be the Norm (But Isn't)\n</h2>\n\n<p>Let's be honest: most developers code first, validate later (if at all).</p>\n\n<p>I've always done the opposite. Not out of virtue, but out of <strong>pure efficient laziness:</strong> I hate fixing the same bug twice.</p>\n<h3>\n  \n  \n  My Philosophy (Again): \"Never Do Twice What Can Be Done Once\"\n</h3>\n\n<ul>\n<li>Spend 1 day on declarative agents vs 3 hours/week debugging? Obvious choice.</li>\n<li>Define schema once vs validate manually 100 times? No debate.</li>\n<li>Write YAML once vs maintain 12 n8n nodes? Crystal clear.</li>\n</ul>\n\n<p>This \"laziness\" has always saved me time, energy, and sanity.</p>\n<h3>\n  \n  \n  Why Is This Rarely Done?\n</h3>\n\n<p>Same reasons as database modeling:</p>\n\n<ul>\n<li>\n<strong>Pressure to ship fast:</strong> \"We'll add validation later\" (we never do)</li>\n<li>\n<strong>Belief that prompts will magically work:</strong> They won't. LLMs are creative, not consistent.</li>\n<li>\n<strong>Lack of tooling:</strong> AgentKit is new. Most people don't know this approach exists.</li>\n</ul>\n<h3>\n  \n  \n  But What About Exploratory Projects?\n</h3>\n\n<p>Fair question. \"What if I'm just testing an idea and don't know the schema yet?\"</p>\n\n<p>Here's my take: even a 15-minute Pydantic model forces you to ask:</p>\n\n<ul>\n<li>What fields do I actually need?</li>\n<li>What are valid ranges?</li>\n<li>What's required vs optional?</li>\n</ul>\n\n<p>Without this, you code \"by feeling,\" and that's where waste begins—even in MVP phase.</p>\n\n<p><strong>A minimal schema isn't the enemy of exploration. It's what makes exploration efficient instead of chaotic.</strong></p>\n<h2>\n  \n  \n  The 4-Step Method (Applicable to Any LLM Project)\n</h2>\n\n<p>Same method as database design, different domain:</p>\n<h3>\n  \n  \n  Step 1: Identify Your Contract\n</h3>\n\n<p>Ask: \"What output do I need, every single time, no exceptions?\"</p>\n\n<p>Not \"what would be nice to have.\" What's <strong>non-negotiable.</strong></p>\n<h3>\n  \n  \n  Step 2: Define the Schema (Pydantic)\n</h3>\n\n<p>Write your output model. Include:</p>\n\n<ul>\n<li>Required fields</li>\n<li>Type constraints (<code>conint</code>, <code>constr</code>, etc.)</li>\n<li>Validation rules (<code>min_length</code>, <code>ge</code>, <code>le</code>)</li>\n</ul>\n<h3>\n  \n  \n  Step 3: Write the Agent in YAML\n</h3>\n\n<ul>\n<li>Clear prompt with examples</li>\n<li>Input variables</li>\n<li>Reference to your schema</li>\n<li>Retry config</li>\n</ul>\n<h3>\n  \n  \n  Step 4: Test, Don't Trust\n</h3>\n\n<p>Run 10-20 real inputs. Watch what fails. Adjust schema OR prompt, never both at once.</p>\n<h2>\n  \n  \n  Scaling: When You Have 40 Agents\n</h2>\n\n<p><strong>Problem I'm facing now:</strong> 40 agents × 2000-token prompts = unmaintainable YAML files</p>\n\n<p><strong>Solution (work in progress):</strong> Modular composition<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code><span class=\"na\">agent</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">content_analyzer</span>\n  <span class=\"na\">prompt_parts</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"na\">role</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{include('prompts/base/analyst_role.md')}}\"</span>\n    <span class=\"pi\">-</span> <span class=\"na\">criteria</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{include('prompts/scoring/criteria_v2.md')}}\"</span>\n    <span class=\"pi\">-</span> <span class=\"na\">output_format</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{include('prompts/formats/json_scoring.md')}}\"</span>\n    <span class=\"pi\">-</span> <span class=\"na\">input</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">Content</span><span class=\"nv\"> </span><span class=\"s\">to</span><span class=\"nv\"> </span><span class=\"s\">analyze:</span><span class=\"se\">\\n</span><span class=\"s\">{{markdown_content}}\"</span>\n  <span class=\"na\">output_schema</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">{{load('schemas/content_analysis_v3.json')}}\"</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Why this matters:</strong></p>\n\n<ul>\n<li>Update scoring criteria in ONE place → applies to all agents</li>\n<li>Version control prompts independently</li>\n<li>A/B test prompt variations</li>\n<li>Reuse role definitions across agents</li>\n</ul>\n\n<p>I'm building this now. Next article may cover the implementation.</p>\n\n<h2>\n  \n  \n  What This Enables: The Bigger Picture\n</h2>\n\n<p>AgentKit represents the same shift we've seen elsewhere in tech:</p>\n\n<p><strong>From imperative (\"how\") to declarative (\"what\")</strong></p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Domain</th>\n<th>Before</th>\n<th>After</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Containers</strong></td>\n<td>\"Install X, configure Y, run Z\"</td>\n<td><code>Dockerfile</code></td>\n</tr>\n<tr>\n<td><strong>Infrastructure</strong></td>\n<td>\"Click these buttons in AWS console\"</td>\n<td><code>terraform apply</code></td>\n</tr>\n<tr>\n<td><strong>Orchestration</strong></td>\n<td>\"Deploy pod 1, then pod 2, then...\"</td>\n<td><code>kubectl apply -f config.yaml</code></td>\n</tr>\n<tr>\n<td><strong>LLM Agents</strong></td>\n<td>\"Call API, parse, validate, retry...\"</td>\n<td><code>agents/analyzer.yaml</code></td>\n</tr>\n</tbody>\n</table></div>\n\n<p><strong>The pattern:</strong></p>\n\n<ol>\n<li>Define desired state</li>\n<li>System makes it happen</li>\n<li>You never touch the plumbing again</li>\n</ol>\n\n<p>That's not just elegant. <strong>It's efficient laziness at scale.</strong></p>\n\n<h2>\n  \n  \n  Limitations (or: \"Why This Isn’t Perfect, Just <em>Less Terrible</em>\")\n</h2>\n\n<h3>\n  \n  \n  ⚠️ Cost: Retries Aren't Free\n</h3>\n\n<p>If 30% of your requests need 1 retry, you're paying +30% API costs.</p>\n\n<p><strong>Mitigation:</strong></p>\n\n<ul>\n<li>Write better prompts. <em>(Or accept that LLMs are like interns: they need supervision.)</em>\n</li>\n<li>Implement exponential backoff. <em>(Because spamming the API is _so</em> 2023.)_</li>\n<li>Monitor retry rates. <em>(And weep quietly over your bill.)</em>\n</li>\n</ul>\n\n<p><strong>My take:</strong> I’d rather pay 30% more and sleep than save money and debug at 3 AM. <em>(Life’s too short for JSON parsing errors. And bad coffee.)</em></p>\n\n<h3>\n  \n  \n  ⚠️ Security: YAML Execution Needs Hardening\n</h3>\n\n<p>Current implementation is a proof-of-concept. Production needs:<br>\n✅ Agent name validation (prevent path traversal: <code>../../etc/passwd</code>)<br>\n✅ Prompt injection detection<br>\n✅ Rate limiting per agent <em>(Because someone will try to DoS your FastAPI endpoint. Probably you, at 2 AM.)</em><br>\n✅ API key rotation<br>\n✅ Signed agent files <em>(Trust no one. Not even your future self.)</em></p>\n\n<p><strong>Don't run this in production without hardening.</strong></p>\n\n<h3>\n  \n  \n  ⚠️ State Management: This Is Stateless\n</h3>\n\n<p>Complex workflows (multi-step, conditional logic) need orchestration:</p>\n\n<ul>\n<li>Temporal</li>\n<li>Argo Workflows\n</li>\n<li>Airflow</li>\n</ul>\n\n<p>AgentKit handles single-agent execution beautifully. Multi-agent workflows? Different problem.</p>\n\n\n\n\n<h2>\n  \n  \n  Implementation Checklist\n</h2>\n\n<p>If you want to try this:</p>\n\n<p><strong>Week 1: Core Setup</strong><br>\n☐ Define 1-2 critical agents in YAML<br>\n☐ Build minimal runner (~150 lines)<br>\n☐ Add Pydantic validation<br>\n☐ Test with real inputs (10-20 examples)</p>\n\n<p><strong>Week 2: Production-Ready</strong><br>\n☐ Add retry logic with exponential backoff<br>\n☐ Expose via FastAPI<br>\n☐ Add authentication (API keys)<br>\n☐ Implement structured logging<br>\n☐ Set up monitoring (retry rates, latency, costs)</p>\n\n<p><strong>Week 3: Hardening</strong><br>\n☐ Input validation (sanitize agent names)<br>\n☐ Rate limiting per agent/user<br>\n☐ Error alerting (Slack/email when agents fail repeatedly)<br>\n☐ Documentation for your team</p>\n\n<p><strong>Month 2: Scaling</strong><br>\n☐ Modular prompt composition (includes)<br>\n☐ A/B testing framework for prompts<br>\n☐ Cost tracking per agent<br>\n☐ Multi-agent orchestration (if needed)</p>\n\n\n\n\n<h2>\n  \n  \n  The Bigger Question: What's Your Time Worth?\n</h2>\n\n<p>Here's the efficient laziness calculation:</p>\n\n<p><strong>Option A: Keep debugging manually</strong></p>\n\n<ul>\n<li>Time: 3 hours/week × 52 weeks = 156 hours/year</li>\n<li>Mental cost: High (unpredictable failures)</li>\n<li>Scalability: Terrible (more agents = more debugging)</li>\n</ul>\n\n<p><strong>Option B: Build declarative system</strong></p>\n\n<ul>\n<li>Time: 1 day setup + 30 min per new agent</li>\n<li>Mental cost: Low (system handles validation)</li>\n<li>Scalability: Excellent (add agents by dropping YAML files)</li>\n</ul>\n\n<p><strong>Break-even point:</strong> ~3 weeks</p>\n\n<p>After that, it's pure gain.</p>\n\n\n\n\n<h2>\n  \n  \n  Conclusion: Think Once, Validate Forever\n</h2>\n\n<p><strong>The actual secret?</strong> Stop treating LLM outputs like <em>artisanal handcrafted prose</em> and start treating them like <strong>database transactions</strong>:</p>\n\n<ol>\n<li> <strong>Define the schema.</strong> (Yes, <em>before</em> writing prompts.)</li>\n<li> <strong>Enforce it.</strong> (No, \"mostly valid\" isn’t valid.)</li>\n<li> <strong>Profit.</strong> (Or at least stop debugging at 2 AM.)</li>\n</ol>\n\n<p><strong>Why this works:</strong></p>\n\n<ul>\n<li>  Databases figured this out in the 1970s. LLMs are just late to the party.</li>\n<li>  <strong>Side effects of this approach:</strong>\n\n<ul>\n<li>  Fewer surprises. (<em>Shocking.</em>)</li>\n<li>  More time for actual work. (<em>Imagine that.</em>)</li>\n<li>  A system that fails <em>predictably</em> instead of <em>creatively</em>.</li>\n</ul>\n\n\n</li>\n\n</ul>\n\n<p><strong>Final thought:</strong> If you’re still manually validating LLM outputs, ask yourself: <em>\"Do I enjoy suffering, or did I just not automate this yet?\"</em> <em>(Hint: It’s the latter. Fix it.)</em></p>\n\n<p>In my case: <code>ContentAnalysisOutput</code> from <code>markdown_content</code>. <strong>Everything else flows from that contract.</strong><br>\nAnd this small discipline—writing a Pydantic model <em>before</em> writing prompts—saved me <strong>12-16 hours/month</strong>.<br>\n<strong>The efficient laziness Manifesto:</strong><br>\nNever debug the same JSON parsing error twice.<br>\nDefine the contract once.<br>\nLet the system enforce it forever.</p>\n\n\n\n\n<h2>\n  \n  \n  For Developers:\n</h2>\n\n<p>Adopt \"efficient laziness\" with LLM agents:</p>\n\n<ol>\n<li>\n<strong>Contract first</strong> (Pydantic schema)</li>\n<li>\n<strong>Agent definition</strong> (YAML)</li>\n<li>\n<strong>Universal runner</strong> (handles plumbing)</li>\n<li><strong>Never touch validation logic again</strong></li>\n</ol>\n\n<h2>\n  \n  \n  For Teams Using LLMs:\n</h2>\n\n<p>If you're integrating AI into workflows, ask:</p>\n\n<ul>\n<li>Do we have schemas for AI outputs?</li>\n<li>Do we validate automatically or manually?</li>\n<li>How much time do we spend debugging AI responses?</li>\n</ul>\n\n<p>A well-structured agent system means:<br>\n✅ Fewer bugs<br>\n✅ Less maintenance<br>\n✅ Easier iteration<br>\n✅ Predictable costs<br>\n✅ Peace of mind</p>\n\n\n\n\n<h2>\n  \n  \n  Resources\n</h2>\n\n<p>🔗 <a href=\"https://docs.agentkit.dev\" rel=\"noopener noreferrer\">AgentKit Docs</a> (when available)<br>\n🐍 My GitHub repo (replace with your link)<br>\n📝 <a href=\"https://docs.pydantic.dev/\" rel=\"noopener noreferrer\">Pydantic Documentation</a><br>\n🚀 <a href=\"https://fastapi.tiangolo.com/\" rel=\"noopener noreferrer\">FastAPI Documentation</a></p>\n\n\n\n\n<h2>\n  \n  \n  Discussion\n</h2>\n\n<p><strong>Questions for the community:</strong></p>\n\n<ol>\n<li>How much time do you spend debugging LLM outputs?</li>\n<li>Do you validate AI responses automatically or manually?</li>\n<li>What's your approach to retry logic?</li>\n<li>Would declarative agents change how you build AI features?</li>\n</ol>\n\n<p>Drop your thoughts below 👇 Especially if you've faced the \"invalid JSON at 2am\" pain.</p>\n\n\n\n\n<p><em>This is the second article in my \"Efficient Laziness\" series. The efficiently lazy developer never codes the same thing twice. His motto: think once, well, and move on.</em></p>\n\n<p><em>If you found this useful, follow me for more deep dives on AI architecture and automation. I also run a weekly tech newsletter on open-source solutions.</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"my ambitions","url":"https://dev.to/mentalistops/my-ambitions-18g4","date":1761555152,"author":"MentalistOps","guid":316666,"unread":true,"content":"<p>Always open to discovering new languages ​​that help me build ethical and functional tools.<br>\nI'm learning Rust because I want to write robust and fast system tools. I'm enjoying using Bash to automate processes on macOS and Linux, and I'm experimenting with Python to create more flexible CLIs.<br>\nfn main() {<br>\n    println!(\"Hello from Rust!\");<br>\n}👈</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"🐍 Python Multithreading vs Multiprocessing: A Beginner's Guide","url":"https://dev.to/codeneuron/python-multithreading-vs-multiprocessing-a-beginners-guide-2fhb","date":1761553895,"author":"likhitha manikonda","guid":316665,"unread":true,"content":"<p>If you're new to Python and wondering how to make your programs faster or handle multiple tasks at once, this guide is for you. We'll explore the basics of processes and threads, and how to use them in Python with practical examples.</p>\n\n<h2>\n  \n  \n  🧠 What Are Processes and Threads?\n</h2>\n\n<p>Understanding the difference between processes and threads is key to writing efficient Python programs.</p>\n\n<ul>\n<li>\n<p><strong>Process</strong>:</p>\n\n<ul>\n<li>A process is an independent program running in its own memory space.</li>\n<li>It doesn’t share data with other processes unless explicitly told to (e.g., using queues or pipes).</li>\n<li>Think of each process as a separate tab in your browser—each runs independently.</li>\n</ul>\n\n\n</li>\n\n<li>\n\n<p><strong>Thread</strong>:</p>\n\n<ul>\n<li>A thread is a lightweight unit of execution within a process.</li>\n<li>Multiple threads in the same process share memory and resources.</li>\n<li>Threads are great for tasks that wait a lot (like downloading files), because they can switch while waiting.</li>\n</ul>\n\n\n</li>\n\n</ul>\n\n<h3>\n  \n  \n  🧪 Example Explained\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">threading</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">task</span><span class=\"p\">():</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Running in thread</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">thread1</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"p\">.</span><span class=\"nc\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">task</span><span class=\"p\">)</span>\n<span class=\"n\">thread2</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"p\">.</span><span class=\"nc\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">task</span><span class=\"p\">)</span>\n\n<span class=\"n\">thread1</span><span class=\"p\">.</span><span class=\"nf\">start</span><span class=\"p\">()</span>\n<span class=\"n\">thread2</span><span class=\"p\">.</span><span class=\"nf\">start</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This code creates two threads that run the same function. They execute concurrently, meaning they can run at the same time, depending on CPU scheduling.</p>\n\n\n\n\n<h2>\n  \n  \n  🧵 Multithreading in Python (Practical Example)\n</h2>\n\n<p>Multithreading is ideal for <strong>I/O-bound tasks</strong>, which spend time waiting for external resources.</p>\n\n<h3>\n  \n  \n  🧪 Example Explained\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">threading</span>\n<span class=\"kn\">import</span> <span class=\"n\">requests</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">download</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">url</span><span class=\"si\">}</span><span class=\"s\">: </span><span class=\"si\">{</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\"> bytes</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">https://example.com</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">https://httpbin.org</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n<span class=\"n\">threads</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">threading</span><span class=\"p\">.</span><span class=\"nc\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">download</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,))</span> <span class=\"k\">for</span> <span class=\"n\">url</span> <span class=\"ow\">in</span> <span class=\"n\">urls</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"n\">t</span><span class=\"p\">.</span><span class=\"nf\">start</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"n\">t</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>\n<code>requests.get(url)</code> waits for a response from the server.</li>\n<li>While one thread is waiting, another can start downloading.</li>\n<li>\n<code>start()</code> begins the thread, and <code>join()</code> waits for it to finish.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  ⚙️ Multiprocessing in Python (Practical Example)\n</h2>\n\n<p>Multiprocessing is best for <strong>CPU-bound tasks</strong>, which require heavy computation.</p>\n\n<h3>\n  \n  \n  🧪 Example Explained\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">multiprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">Process</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">square</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">processes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nc\">Process</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">square</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,))</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">numbers</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">processes</span><span class=\"p\">:</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"nf\">start</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">processes</span><span class=\"p\">:</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>Each <code>Process</code> runs in its own memory space.</li>\n<li>Python creates separate processes for each number.</li>\n<li>This avoids the Global Interpreter Lock (GIL), which limits multithreading in Python for CPU tasks.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  🧰 ThreadPoolExecutor vs ProcessPoolExecutor\n</h2>\n\n<p>These are part of the <code>concurrent.futures</code> module and simplify working with threads and processes.</p>\n\n<h3>\n  \n  \n  🧪 Example Explained\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">concurrent.futures</span> <span class=\"kn\">import</span> <span class=\"n\">ThreadPoolExecutor</span><span class=\"p\">,</span> <span class=\"n\">ProcessPoolExecutor</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">task</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"n\">n</span>\n\n<span class=\"c1\"># Thread pool\n</span><span class=\"k\">with</span> <span class=\"nc\">ThreadPoolExecutor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">executor</span><span class=\"p\">:</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">executor</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Process pool\n</span><span class=\"k\">with</span> <span class=\"nc\">ProcessPoolExecutor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">executor</span><span class=\"p\">:</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">executor</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">))</span>\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>\n<code>ThreadPoolExecutor</code> creates a pool of threads and assigns tasks.</li>\n<li>\n<code>ProcessPoolExecutor</code> creates a pool of processes.</li>\n<li>\n<code>executor.map()</code> runs the function on each item in the list.</li>\n<li>These tools handle starting, joining, and managing resources automatically.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  🌐 Web Scraping with Multithreading\n</h2>\n\n<p>Multithreading speeds up web scraping by fetching multiple pages in parallel.</p>\n\n<h3>\n  \n  \n  🧪 Example Explained\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">threading</span>\n<span class=\"kn\">import</span> <span class=\"n\">requests</span>\n<span class=\"kn\">from</span> <span class=\"n\">bs4</span> <span class=\"kn\">import</span> <span class=\"n\">BeautifulSoup</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">scrape</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">):</span>\n    <span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">).</span><span class=\"n\">text</span>\n    <span class=\"n\">soup</span> <span class=\"o\">=</span> <span class=\"nc\">BeautifulSoup</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">html.parser</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">url</span><span class=\"si\">}</span><span class=\"s\">: </span><span class=\"si\">{</span><span class=\"n\">soup</span><span class=\"p\">.</span><span class=\"n\">title</span><span class=\"p\">.</span><span class=\"n\">string</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">https://example.com</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">https://httpbin.org</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n<span class=\"n\">threads</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">threading</span><span class=\"p\">.</span><span class=\"nc\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">scrape</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,))</span> <span class=\"k\">for</span> <span class=\"n\">url</span> <span class=\"ow\">in</span> <span class=\"n\">urls</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"n\">t</span><span class=\"p\">.</span><span class=\"nf\">start</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">threads</span><span class=\"p\">:</span> <span class=\"n\">t</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>Each thread downloads and parses a webpage.</li>\n<li>\n<code>BeautifulSoup</code> extracts the title from the HTML.</li>\n<li>Threads run concurrently, reducing total scraping time.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  🏭 Real-World Use Case with Multiprocessing\n</h2>\n\n<p>Multiprocessing is perfect for tasks like image processing, simulations, or data analysis.</p>\n\n<h3>\n  \n  \n  🧪 Example Explained\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">multiprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">Pool</span>\n<span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">heavy_task</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"n\">n</span>\n\n<span class=\"k\">with</span> <span class=\"nc\">Pool</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">pool</span><span class=\"p\">:</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">pool</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"n\">heavy_task</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>\n<code>Pool()</code> creates a pool of worker processes.</li>\n<li>\n<code>map()</code> distributes the tasks across processes.</li>\n<li>\n<code>time.sleep(1)</code> simulates a slow, CPU-heavy task.</li>\n<li>All tasks run in parallel, so total time is much shorter than running them sequentially.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  🧩 Summary Table Explained\n</h2>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>Multithreading</th>\n<th>Multiprocessing</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Best for</strong></td>\n<td>I/O-bound tasks (e.g., web scraping, file I/O)</td>\n<td>CPU-bound tasks (e.g., data crunching, simulations)</td>\n</tr>\n<tr>\n<td><strong>Memory</strong></td>\n<td>Shared among threads</td>\n<td>Separate for each process</td>\n</tr>\n<tr>\n<td><strong>Speed</strong></td>\n<td>Faster for I/O due to overlapping waits</td>\n<td>Faster for computation due to parallel CPU usage</td>\n</tr>\n<tr>\n<td><strong>Python Module</strong></td>\n<td>\n<code>threading</code>, <code>concurrent.futures</code>\n</td>\n<td>\n<code>multiprocessing</code>, <code>concurrent.futures</code>\n</td>\n</tr>\n</tbody>\n</table></div>\n\n<p>This table helps you choose the right tool:</p>\n\n<ul>\n<li>Use <strong>threads</strong> when your program waits a lot.</li>\n<li>Use <strong>processes</strong> when your program computes a lot.</li>\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Talk Python to Me: #525: NiceGUI Goes 3.0","url":"https://talkpython.fm/episodes/show/525/nicegui-goes-3.0","date":1761552000,"author":"","guid":316878,"unread":true,"content":"<article>Building a UI in Python usually means choosing between \"quick and limited\" or \"powerful and painful.\" What if you could write modern, component-based web apps in pure Python and still keep full control? NiceGUI, pronounced \"Nice Guy\" sits on FastAPI with a Vue/Quasar front end, gives you real components, live updates over websockets, and it’s running in production at Zauberzeug, a German robotic company. On this episode, I’m talking with NiceGUI’s creators, Rodja Trappe and Falko Schindler, about how it works, where it shines, and what’s coming next. With version 3.0 releasing around the same time this episode comes out, we spend the end of the episode celebrating the 3.0 release.&lt;br/&gt;\n&lt;br/&gt;\n&lt;strong&gt;Episode sponsors&lt;/strong&gt;&lt;br/&gt;\n&lt;br/&gt;\n&lt;a href='https://talkpython.fm/connect'&gt;Posit&lt;/a&gt;&lt;br&gt;\n&lt;a href='https://talkpython.fm/agntcy'&gt;Agntcy&lt;/a&gt;&lt;br&gt;\n&lt;a href='https://talkpython.fm/training'&gt;Talk Python Courses&lt;/a&gt;&lt;br/&gt;\n&lt;br/&gt;\n&lt;h2 class=\"links-heading mb-4\"&gt;Links from the show&lt;/h2&gt;\n&lt;div&gt;&lt;strong&gt;Rodja Trappe&lt;/strong&gt;: &lt;a href=\"https://github.com/rodja?featured_on=talkpython\" target=\"_blank\" &gt;github.com&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Falko Schindler&lt;/strong&gt;: &lt;a href=\"https://github.com/falkoschindler?featured_on=talkpython\" target=\"_blank\" &gt;github.com&lt;/a&gt;&lt;br/&gt;\n&lt;br/&gt;\n&lt;strong&gt;NiceGUI 3.0.0 release&lt;/strong&gt;: &lt;a href=\"https://github.com/zauberzeug/nicegui/releases/tag/v3.0.0?featured_on=talkpython\" target=\"_blank\" &gt;github.com&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Full LLM/Agentic AI docs instructions for NiceGUI&lt;/strong&gt;: &lt;a href=\"https://github.com/zauberzeug/nicegui/wiki#chatgpt-and-other-llms\" target=\"_blank\" &gt;github.com&lt;/a&gt;&lt;br/&gt;\n&lt;br/&gt;\n&lt;strong&gt;Zauberzeug&lt;/strong&gt;: &lt;a href=\"https://zauberzeug.com?featured_on=talkpython\" target=\"_blank\" &gt;zauberzeug.com&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;NiceGUI&lt;/strong&gt;: &lt;a href=\"https://nicegui.io?featured_on=talkpython\" target=\"_blank\" &gt;nicegui.io&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;NiceGUI GitHub Repository&lt;/strong&gt;: &lt;a href=\"https://github.com/zauberzeug/nicegui/?featured_on=talkpython\" target=\"_blank\" &gt;github.com&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;NiceGUI Authentication Examples&lt;/strong&gt;: &lt;a href=\"https://github.com/zauberzeug/nicegui/blob/main/examples/authentication?featured_on=talkpython\" target=\"_blank\" &gt;github.com&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;NiceGUI v3.0.0rc1 Release&lt;/strong&gt;: &lt;a href=\"https://github.com/zauberzeug/nicegui/releases/tag/v3.0.0rc1?featured_on=talkpython\" target=\"_blank\" &gt;github.com&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Valkey&lt;/strong&gt;: &lt;a href=\"https://valkey.io?featured_on=talkpython\" target=\"_blank\" &gt;valkey.io&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Caddy Web Server&lt;/strong&gt;: &lt;a href=\"https://caddyserver.com?featured_on=talkpython\" target=\"_blank\" &gt;caddyserver.com&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;JustPy&lt;/strong&gt;: &lt;a href=\"https://justpy.io?featured_on=talkpython\" target=\"_blank\" &gt;justpy.io&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Tailwind CSS&lt;/strong&gt;: &lt;a href=\"https://tailwindcss.com?featured_on=talkpython\" target=\"_blank\" &gt;tailwindcss.com&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Quasar ECharts v5 Demo&lt;/strong&gt;: &lt;a href=\"https://quasar-echarts-v5.netlify.app?featured_on=talkpython\" target=\"_blank\" &gt;quasar-echarts-v5.netlify.app&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;AG Grid&lt;/strong&gt;: &lt;a href=\"https://www.ag-grid.com?featured_on=talkpython\" target=\"_blank\" &gt;ag-grid.com&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Quasar Framework&lt;/strong&gt;: &lt;a href=\"https://quasar.dev?featured_on=talkpython\" target=\"_blank\" &gt;quasar.dev&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;NiceGUI Interactive Image Documentation&lt;/strong&gt;: &lt;a href=\"https://nicegui.io/documentation/interactive_image?featured_on=talkpython\" target=\"_blank\" &gt;nicegui.io&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;NiceGUI 3D Scene Documentation&lt;/strong&gt;: &lt;a href=\"https://nicegui.io/documentation/scene#3d_scene\" target=\"_blank\" &gt;nicegui.io&lt;/a&gt;&lt;br/&gt;\n&lt;br/&gt;\n&lt;strong&gt;Watch this episode on YouTube&lt;/strong&gt;: &lt;a href=\"https://www.youtube.com/watch?v=74UXonJfl6o\" target=\"_blank\" &gt;youtube.com&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Episode #525 deep-dive&lt;/strong&gt;: &lt;a href=\"https://talkpython.fm/episodes/show/525/nicegui-goes-3.0#takeaways-anchor\" target=\"_blank\" &gt;talkpython.fm/525&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Episode transcripts&lt;/strong&gt;: &lt;a href=\"https://talkpython.fm/episodes/transcript/525/nicegui-goes-3.0\" target=\"_blank\" &gt;talkpython.fm&lt;/a&gt;&lt;br/&gt;\n&lt;br/&gt;\n&lt;strong&gt;Theme Song: Developer Rap&lt;/strong&gt;&lt;br/&gt;\n&lt;strong&gt;🥁 Served in a Flask 🎸&lt;/strong&gt;: &lt;a href=\"https://talkpython.fm/flasksong\" target=\"_blank\" &gt;talkpython.fm/flasksong&lt;/a&gt;&lt;br/&gt;\n&lt;br/&gt;\n&lt;strong&gt;---==  Don't be a stranger  ==---&lt;/strong&gt;&lt;br/&gt;\n&lt;strong&gt;YouTube&lt;/strong&gt;: &lt;a href=\"https://talkpython.fm/youtube\" target=\"_blank\" &gt;&lt;i class=\"fa-brands fa-youtube\"&gt;&lt;/i&gt; youtube.com/@talkpython&lt;/a&gt;&lt;br/&gt;\n&lt;br/&gt;\n&lt;strong&gt;Bluesky&lt;/strong&gt;: &lt;a href=\"https://bsky.app/profile/talkpython.fm\" target=\"_blank\" &gt;@talkpython.fm&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Mastodon&lt;/strong&gt;: &lt;a href=\"https://fosstodon.org/web/@talkpython\" target=\"_blank\" &gt;&lt;i class=\"fa-brands fa-mastodon\"&gt;&lt;/i&gt; @talkpython@fosstodon.org&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;X.com&lt;/strong&gt;: &lt;a href=\"https://x.com/talkpython\" target=\"_blank\" &gt;&lt;i class=\"fa-brands fa-twitter\"&gt;&lt;/i&gt; @talkpython&lt;/a&gt;&lt;br/&gt;\n&lt;br/&gt;\n&lt;strong&gt;Michael on Bluesky&lt;/strong&gt;: &lt;a href=\"https://bsky.app/profile/mkennedy.codes?featured_on=talkpython\" target=\"_blank\" &gt;@mkennedy.codes&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Michael on Mastodon&lt;/strong&gt;: &lt;a href=\"https://fosstodon.org/web/@mkennedy\" target=\"_blank\" &gt;&lt;i class=\"fa-brands fa-mastodon\"&gt;&lt;/i&gt; @mkennedy@fosstodon.org&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Michael on X.com&lt;/strong&gt;: &lt;a href=\"https://x.com/mkennedy?featured_on=talkpython\" target=\"_blank\" &gt;&lt;i class=\"fa-brands fa-twitter\"&gt;&lt;/i&gt; @mkennedy&lt;/a&gt;&lt;br/&gt;&lt;/div&gt;</article>","contentLength":5402,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python Bytes: #455 Gilded Python and Beyond","url":"https://pythonbytes.fm/episodes/show/455/gilded-python-and-beyond","date":1761552000,"author":"","guid":317086,"unread":true,"content":"<article>&lt;strong&gt;Topics covered in this episode:&lt;/strong&gt;&lt;br&gt;\n\n&lt;ul&gt;\n\t&lt;li&gt;&lt;strong&gt;&lt;a href=\"https://www.reddit.com/r/Python/comments/18hn2t1/cyclopts_a_cli_library_that_fixes_13_annoying/?featured_on=pythonbytes\"&gt;Cyclopts: A CLI library&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;* &lt;a href=\"https://blog.baro.dev/p/the-future-of-python-web-services-looks-gil-free?featured_on=pythonbytes\"&gt;The future of Python web services looks GIL-free&lt;/a&gt;&lt;/em&gt;*&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;* &lt;a href=\"https://labs.quansight.org/blog/free-threaded-gc-3-14?featured_on=pythonbytes\"&gt;Free-threaded GC&lt;/a&gt;&lt;/em&gt;*&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;* &lt;a href=\"https://pythontest.com/polite-lazy-imports-python-packages/?featured_on=pythonbytes\"&gt;Polite lazy imports for Python package maintainers&lt;/a&gt;&lt;/em&gt;*&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Extras&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Joke&lt;/strong&gt;&lt;/li&gt;\n\n&lt;/ul&gt;&lt;a href='https://www.youtube.com/watch?v=exSYX16Hk8M' style='font-weight: bold;'data-umami-event=\"Livestream-Past\" data-umami-event-episode=\"455\"&gt;Watch on YouTube&lt;/a&gt;&lt;br&gt;\n\n&lt;p&gt;&lt;strong&gt;About the show&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Sponsored by us! Support our work through:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Our &lt;a href=\"https://training.talkpython.fm/?featured_on=pythonbytes\"&gt;&lt;strong&gt;courses at Talk Python Training&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://courses.pythontest.com/p/the-complete-pytest-course?featured_on=pythonbytes\"&gt;&lt;strong&gt;The Complete pytest Course&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://www.patreon.com/pythonbytes\"&gt;&lt;strong&gt;Patreon Supporters&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Connect with the hosts&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Michael: &lt;a href=\"https://fosstodon.org/@mkennedy\"&gt;@mkennedy@fosstodon.org&lt;/a&gt; / &lt;a href=\"https://bsky.app/profile/mkennedy.codes?featured_on=pythonbytes\"&gt;@mkennedy.codes&lt;/a&gt; (bsky)&lt;/li&gt;\n&lt;li&gt;Brian: &lt;a href=\"https://fosstodon.org/@brianokken\"&gt;@brianokken@fosstodon.org&lt;/a&gt; / &lt;a href=\"https://bsky.app/profile/brianokken.bsky.social?featured_on=pythonbytes\"&gt;@brianokken.bsky.social&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Show: &lt;a href=\"https://fosstodon.org/@pythonbytes\"&gt;@pythonbytes@fosstodon.org&lt;/a&gt; / &lt;a href=\"https://bsky.app/profile/pythonbytes.fm\"&gt;@pythonbytes.fm&lt;/a&gt; (bsky)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Join us on YouTube at &lt;a href=\"https://pythonbytes.fm/stream/live\"&gt;&lt;strong&gt;pythonbytes.fm/live&lt;/strong&gt;&lt;/a&gt; to be part of the audience. Usually &lt;strong&gt;Monday&lt;/strong&gt; at 10am PT. Older video versions available there too.&lt;/p&gt;\n\n&lt;p&gt;Finally, if you want an artisanal, hand-crafted digest of every week of the show notes in email form? Add your name and email to &lt;a href=\"https://pythonbytes.fm/friends-of-the-show\"&gt;our friends of the show list&lt;/a&gt;, we'll never share it.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Michael #1:&lt;/strong&gt; &lt;a href=\"https://www.reddit.com/r/Python/comments/18hn2t1/cyclopts_a_cli_library_that_fixes_13_annoying/?featured_on=pythonbytes\"&gt;Cyclopts: A CLI library&lt;/a&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;A CLI library that fixes 13 annoying issues in Typer&lt;/li&gt;\n&lt;li&gt;Much of Cyclopts was inspired by the excellent&nbsp;&lt;a href=\"https://typer.tiangolo.com/?featured_on=pythonbytes\"&gt;Typer&lt;/a&gt;&nbsp;library.&lt;/li&gt;\n&lt;li&gt;Despite its popularity, Typer has some traits that I (and others) find less than ideal. Part of this stems from Typer's age, with its first release in late 2019, soon after Python 3.8's release. Because of this, most of its API was initially designed around assigning proxy default values to function parameters. This made the decorated command functions difficult to use outside of Typer. With the introduction of&nbsp;&lt;a href=\"https://docs.python.org/3/library/typing.html#typing.Annotated\"&gt;&lt;strong&gt;&amp;lt;code&gt;Annotated&amp;lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;&nbsp;in python3.9, type-hints were able to be directly annotated, allowing for the removal of these proxy defaults.&lt;/li&gt;\n&lt;li&gt;The 13:\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://cyclopts.readthedocs.io/en/latest/vs_typer/argument_vs_option/README.html?featured_on=pythonbytes\"&gt;Argument vs Option&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://cyclopts.readthedocs.io/en/latest/vs_typer/positional_or_keyword/README.html?featured_on=pythonbytes\"&gt;Positional or Keyword Arguments&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://cyclopts.readthedocs.io/en/latest/vs_typer/choices/README.html?featured_on=pythonbytes\"&gt;Choices&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://cyclopts.readthedocs.io/en/latest/vs_typer/default_command/README.html?featured_on=pythonbytes\"&gt;Default Command&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://cyclopts.readthedocs.io/en/latest/vs_typer/docstring/README.html?featured_on=pythonbytes\"&gt;Docstring Parsing&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://cyclopts.readthedocs.io/en/latest/vs_typer/decorator_parentheses/README.html?featured_on=pythonbytes\"&gt;Decorator Parentheses&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://cyclopts.readthedocs.io/en/latest/vs_typer/optional_list/README.html?featured_on=pythonbytes\"&gt;Optional Lists&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://cyclopts.readthedocs.io/en/latest/vs_typer/keyword_multiple_values/README.html?featured_on=pythonbytes\"&gt;Keyword Multiple Values&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://cyclopts.readthedocs.io/en/latest/vs_typer/flag_negation/README.html?featured_on=pythonbytes\"&gt;Flag Negation&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://cyclopts.readthedocs.io/en/latest/vs_typer/help_defaults/README.html?featured_on=pythonbytes\"&gt;Help Defaults&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://cyclopts.readthedocs.io/en/latest/vs_typer/validation/README.html?featured_on=pythonbytes\"&gt;Validation&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://cyclopts.readthedocs.io/en/latest/vs_typer/union_support/README.html?featured_on=pythonbytes\"&gt;Union/Optional Support&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://cyclopts.readthedocs.io/en/latest/vs_typer/version_flag/README.html?featured_on=pythonbytes\"&gt;Adding a Version Flag&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://cyclopts.readthedocs.io/en/latest/vs_typer/documentation/README.html?featured_on=pythonbytes\"&gt;Documentation&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Brian #2: &lt;a href=\"https://blog.baro.dev/p/the-future-of-python-web-services-looks-gil-free?featured_on=pythonbytes\"&gt;The future of Python web services looks GIL-free&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Giovanni Barillari&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;“Python 3.14 was released at the beginning of the month. This release was particularly interesting to me because of the improvements on the \"free-threaded\" variant of the interpreter.&lt;/p&gt;\n\n&lt;p&gt;Specifically, the two major changes when compared to the free-threaded variant of Python 3.13 are:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Free-threaded support now reached&nbsp;&lt;em&gt;phase II&lt;/em&gt;, meaning it's no longer considered experimental&lt;/li&gt;\n&lt;li&gt;The implementation is now completed, meaning that the&nbsp;&lt;em&gt;workarounds&lt;/em&gt;&nbsp;introduced in Python 3.13 to make code sound without the GIL are now gone, and the free-threaded implementation now uses the&nbsp;&lt;a href=\"https://peps.python.org/pep-0659/?featured_on=pythonbytes\"&gt;adaptive interpreter&lt;/a&gt;&nbsp;as the GIL enabled variant. These facts, plus additional optimizations make the performance penalty now way better, moving from a 35% penalty to a 5-10% difference.”&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Lots of benchmark data, both ASGI and WSGI&lt;/li&gt;\n&lt;li&gt;Lots of great thoughts in the &lt;a href=\"https://blog.baro.dev/p/the-future-of-python-web-services-looks-gil-free#final-thoughts\"&gt;“Final Thoughts” section&lt;/a&gt;, including\n&lt;ul&gt;\n&lt;li&gt;“On asynchronous protocols like ASGI, despite the fact the concurrency model doesn't change that much –&nbsp;we shift from one event loop per process, to one event loop per thread –&nbsp;just the fact we no longer need to scale memory allocations just to use more CPU is a&nbsp;&lt;em&gt;massive improvement&lt;/em&gt;.&nbsp;”&lt;/li&gt;\n&lt;li&gt;“… for everybody out there coding a web application in Python: simplifying the concurrency paradigms and the deployment process of such applications is&nbsp;&lt;em&gt;a good thing&lt;/em&gt;.”&lt;/li&gt;\n&lt;li&gt;“… to me the future of Python web services looks GIL-free.”&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Michael #3: &lt;a href=\"https://labs.quansight.org/blog/free-threaded-gc-3-14?featured_on=pythonbytes\"&gt;Free-threaded GC&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The free-threaded build of Python uses a different garbage collector implementation than the default GIL-enabled build.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;The Default GC:&lt;/strong&gt;&nbsp;In the standard CPython build, every object that supports garbage collection (like lists or dictionaries) is part of a per-interpreter, doubly-linked list. The list pointers are contained in a PyGC_Head structure.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;The Free-Threaded GC:&lt;/strong&gt;&nbsp;Takes a different approach. It scraps the PyGC_Head structure and the linked list entirely. Instead, it allocates these objects from a special memory heap managed by the \"mimalloc\" library. This allows the GC to find and iterate over all collectible objects using mimalloc's data structures, without needing to link them together manually.&lt;/li&gt;\n&lt;li&gt;The free-threaded GC does &lt;strong&gt;NOT&lt;/strong&gt; support \"generations”&lt;/li&gt;\n&lt;li&gt;By marking all objects reachable from these&nbsp;&lt;em&gt;known&lt;/em&gt;&nbsp;roots, we can identify a large set of objects that are definitely alive and exclude them from the more expensive cycle-finding part of the GC process.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Overall speedup of the free-threaded GC collection is between 2 and 12 times faster&lt;/strong&gt; than the 3.13 version.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Brian #4: &lt;a href=\"https://pythontest.com/polite-lazy-imports-python-packages/?featured_on=pythonbytes\"&gt;Polite lazy imports for Python package maintainers&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Will McGugan commented on a &lt;a href=\"https://www.linkedin.com/feed/update/urn:li:activity:7387408872946171904?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7387408872946171904%2C7387770808019984384%29&amp;dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287387770808019984384%2Curn%3Ali%3Aactivity%3A7387408872946171904%29&amp;featured_on=pythonbytes\"&gt;LI post by Bob Belderbos&lt;/a&gt; regarding lazy importing&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;“I'm excited about this PEP.&lt;/p&gt;\n\n&lt;p&gt;I wrote a lazy loading mechanism for Textual's widgets. Without it, the entire widget library would be imported even if you needed just one widget. Having this as a core language feature would make me very happy.”&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/Textualize/textual/blob/main/src/textual/widgets/__init__.py?featured_on=pythonbytes\"&gt;&lt;strong&gt;https://github.com/Textualize/textual/blob/main/src/textual/widgets/__init__.py&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Well, I was excited about Will’s example for how to, essentially, allow users of your package to import only the part they need, when they need it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;So I wrote up my thoughts and an explainer for how this works.&lt;/li&gt;\n&lt;li&gt;Special thanks to Trey Hunner’s &lt;strong&gt;E&lt;a href=\"https://www.pythonmorsels.com/every-dunder-method/?featured_on=pythonbytes\"&gt;very dunder method in Python&lt;/a&gt;,&lt;/strong&gt; which I referenced to understand the difference between &lt;code&gt;__getattr__()&lt;/code&gt; and &lt;code&gt;__getattribute__()&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Extras&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Brian:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Started writing a book on Test Driven Development.\n&lt;ul&gt;\n&lt;li&gt;Should have an announcement in a week or so.&lt;/li&gt;\n&lt;li&gt;I want to give folks access while I’m writing it, so I’ll be opening it up for early access as soon as I have 2-3 chapters ready to review. Sign up for the &lt;a href=\"https://pythontest.com/newsletter/?featured_on=pythonbytes\"&gt;pythontest newsletter&lt;/a&gt; if you’d like to be informed right away when it’s ready. Or stay tuned here.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Michael:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;New course!!! &lt;a href=\"https://training.talkpython.fm/courses/agentic-ai-programming-for-python?featured_on=pythonbytes\"&gt;&lt;strong&gt;Agentic AI Programming for Python&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;I’ll &lt;a href=\"https://luma.com/bzm5etak?featured_on=pythonbytes\"&gt;be on Vanishing Gradients&lt;/a&gt; as a guest talking book + ai for data scientists&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://openai.com/index/introducing-chatgpt-atlas/?featured_on=pythonbytes\"&gt;OpenAI launches ChatGPT Atlas&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;https://github.com/jamesabel/ismain by James Abel&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/stillya/vpet?featured_on=pythonbytes\"&gt;Pets in PyCharm&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Joke:&lt;/strong&gt; &lt;a href=\"https://x.com/Mayhem4Markets/status/1980001528464175463?featured_on=pythonbytes\"&gt;You're absolutely right&lt;/a&gt;&lt;/p&gt;</article>","contentLength":11939,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"#455 Gilded Python and Beyond","url":"https://pythonbytes.fm/episodes/show/455/gilded-python-and-beyond","date":1761552000,"author":"","guid":317070,"unread":true,"content":"<article></article>","contentLength":0,"flags":null,"enclosureUrl":"https://pythonbytes.fm/episodes/download/455/gilded-python-and-beyond.mp3","enclosureMime":"","commentsUrl":null},{"title":"#525: NiceGUI Goes 3.0","url":"https://talkpython.fm/episodes/show/525/nicegui-goes-3.0","date":1761552000,"author":"","guid":316890,"unread":true,"content":"<article></article>","contentLength":0,"flags":null,"enclosureUrl":"https://talkpython.fm/episodes/download/525/nicegui-goes-3.0.mp3","enclosureMime":"","commentsUrl":null},{"title":"Hacked: Input validation in app","url":"https://dev.to/frank_a_64393c6f49a90e428/hacked-input-validation-in-app-5eb","date":1761551285,"author":"Frank A","guid":316625,"unread":true,"content":"<p><iframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/t1HeFKM7Zss\">\n</iframe>\n</p>\n\n<p>Input validation is crucial for web app security. In this video, you'll see a Python web app get p0wned, because the inputs are not validated. A shell gets opened on the server that's running the web app. From there, I explain what happens if there is validation, but incorrectly implemented and the whole thing contains demo's.</p>\n\n<p>Timestamps show you every step, you can jump to the parts you like, whether it’s command execution, reverse shell or the Python code itself. Have fun!</p>\n\n<p><em>Watch on</em> <a href=\"https://www.youtube.com/watch?v=t1HeFKM7Zss\" rel=\"noopener noreferrer\">Youtube</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Web Scraping for Consumer Research: A Python & BeautifulSoup Tutorial","url":"https://dev.to/alexv_data/web-scraping-for-consumer-research-a-python-beautifulsoup-tutorial-44ge","date":1761549265,"author":"Alex Vance","guid":316624,"unread":true,"content":"<h2>\n  \n  \n  Introduction: The \"Why\" Behind the Code\n</h2>\n\n<p>As a data analyst, I'm obsessed with turning chaos into clarity. One of the most chaotic environments for consumers is the UK's online entertainment market. It's a wall of noise: flashy promises, complex terms, and dozens of near-identical platforms. How can a regular person make an informed decision?</p>\n\n<p>The answer is data. But where does that data come from? You have to gather it.</p>\n\n<p>This tutorial is a deep dive into the 'how'. I'm going to walk you through a complete, beginner-friendly web scraping project using Python, <code>requests</code>, and <code>BeautifulSoup</code>. We'll build a conceptual scraper to gather data from a sample webpage, clean it, and structure it for analysis. This is the foundational skill for any data-driven consumer research project.</p>\n\n<h3>\n  \n  \n  Part 1: The Ethics and The Setup\n</h3>\n\n<p>Before we write a single line of code, let's talk ethics. Web scraping can be a powerful tool, but it comes with responsibilities:</p>\n\n<ol>\n<li>\n<strong>Respect <code>robots.txt</code></strong>: This is a file on every website that tells bots which pages they are and are not allowed to access. Always check it.</li>\n<li>\n<strong>Don't Overload Servers</strong>: Send requests at a reasonable rate. A simple <code>time.sleep(1)</code> between requests is a good start. Be a polite guest.</li>\n<li>\n<strong>Identify Yourself</strong>: Set a user-agent in your request headers that identifies your script or project.</li>\n<li>\n<strong>Scrape Public Data Only</strong>: Never attempt to scrape data that is behind a login or is not intended for public consumption.</li>\n</ol>\n\n<p>Our goal is ethical data collection for consumer empowerment, not spam.</p>\n\n<p><strong>The Toolbox:</strong></p>\n\n<p>You'll need Python 3 installed. Then, let's get our libraries.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>pip <span class=\"nb\">install </span>requests beautifulsoup4 pandas\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>\n<code>requests</code>: To handle the HTTP requests and fetch the HTML content.</li>\n<li>\n<code>beautifulsoup4</code>: The magic wand for parsing HTML and XML documents. It creates a parse tree from page source code that can be used to extract data.</li>\n<li>\n<code>pandas</code>: The ultimate tool for data manipulation and analysis in Python. We'll use it to structure and save our data.</li>\n</ul>\n\n<h3>\n  \n  \n  Part 2: Making the First Request\n</h3>\n\n<p>For this tutorial, we can't scrape a live, complex website. It's bad practice and the structure might change. Instead, let's work with a sample, static HTML structure that mimics a typical review listing page.</p>\n\n<p>Imagine we have a page with the following HTML:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;html&gt;</span>\n<span class=\"nt\">&lt;body&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"review-card\"</span> <span class=\"na\">id=</span><span class=\"s\">\"site-1\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;h2</span> <span class=\"na\">class=</span><span class=\"s\">\"site-name\"</span><span class=\"nt\">&gt;</span>PlaySafe UK<span class=\"nt\">&lt;/h2&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"rating-badge\"</span><span class=\"nt\">&gt;</span>9.5/10<span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"bonus-offer\"</span><span class=\"nt\">&gt;</span>100% up to £50<span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"payout-speed\"</span><span class=\"nt\">&gt;&lt;span&gt;</span>Payout Speed:<span class=\"nt\">&lt;/span&gt;</span> 24 Hours (e-wallets)<span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"/reviews/playsafe-uk\"</span> <span class=\"na\">class=</span><span class=\"s\">\"review-link\"</span><span class=\"nt\">&gt;</span>Read More<span class=\"nt\">&lt;/a&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"review-card\"</span> <span class=\"na\">id=</span><span class=\"s\">\"site-2\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;h2</span> <span class=\"na\">class=</span><span class=\"s\">\"site-name\"</span><span class=\"nt\">&gt;</span>Gambit Palace<span class=\"nt\">&lt;/h2&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"rating-badge\"</span><span class=\"nt\">&gt;</span>8.8/10<span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"bonus-offer\"</span><span class=\"nt\">&gt;</span>Get 200 Free Spins<span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"payout-speed\"</span><span class=\"nt\">&gt;&lt;span&gt;</span>Payout Speed:<span class=\"nt\">&lt;/span&gt;</span> 2-3 Days<span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"/reviews/gambit-palace\"</span> <span class=\"na\">class=</span><span class=\"s\">\"review-link\"</span><span class=\"nt\">&gt;</span>Read More<span class=\"nt\">&lt;/a&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Our goal is to extract the Name, Rating, Bonus, and Payout Speed from each review-card.</p>\n\n<p>First, let's write the Python code to fetch this content. In a real script, you'd use a URL. Here, we'll just use a multiline string.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">requests</span>\n<span class=\"kn\">from</span> <span class=\"n\">bs4</span> <span class=\"kn\">import</span> <span class=\"n\">BeautifulSoup</span>\n\n<span class=\"c1\"># In a real project, this would be:\n# URL = \"http://example-review-site.com/uk-reviews\"\n# headers = {'User-Agent': 'TDUX-Research-Bot/1.0'}\n# response = requests.get(URL, headers=headers)\n# html_content = response.text\n</span>\n<span class=\"c1\"># For our tutorial, we'll use a local string\n</span><span class=\"n\">html_content</span> <span class=\"o\">=</span> <span class=\"sh\">\"\"\"</span><span class=\"s\">\n&lt;html&gt;\n&lt;body&gt;\n  &lt;div class=</span><span class=\"sh\">\"</span><span class=\"s\">review-card</span><span class=\"sh\">\"</span><span class=\"s\"> id=</span><span class=\"sh\">\"</span><span class=\"s\">site-1</span><span class=\"sh\">\"</span><span class=\"s\">&gt;\n    &lt;h2 class=</span><span class=\"sh\">\"</span><span class=\"s\">site-name</span><span class=\"sh\">\"</span><span class=\"s\">&gt;PlaySafe UK&lt;/h2&gt;\n    &lt;div class=</span><span class=\"sh\">\"</span><span class=\"s\">rating-badge</span><span class=\"sh\">\"</span><span class=\"s\">&gt;9.5/10&lt;/div&gt;\n    &lt;div class=</span><span class=\"sh\">\"</span><span class=\"s\">bonus-offer</span><span class=\"sh\">\"</span><span class=\"s\">&gt;100% up to £50&lt;/div&gt;\n    &lt;div class=</span><span class=\"sh\">\"</span><span class=\"s\">payout-speed</span><span class=\"sh\">\"</span><span class=\"s\">&gt;&lt;span&gt;Payout Speed:&lt;/span&gt; 24 Hours (e-wallets)&lt;/div&gt;\n    &lt;a href=</span><span class=\"sh\">\"</span><span class=\"s\">/reviews/playsafe-uk</span><span class=\"sh\">\"</span><span class=\"s\"> class=</span><span class=\"sh\">\"</span><span class=\"s\">review-link</span><span class=\"sh\">\"</span><span class=\"s\">&gt;Read More&lt;/a&gt;\n  &lt;/div&gt;\n  &lt;div class=</span><span class=\"sh\">\"</span><span class=\"s\">review-card</span><span class=\"sh\">\"</span><span class=\"s\"> id=</span><span class=\"sh\">\"</span><span class=\"s\">site-2</span><span class=\"sh\">\"</span><span class=\"s\">&gt;\n    &lt;h2 class=</span><span class=\"sh\">\"</span><span class=\"s\">site-name</span><span class=\"sh\">\"</span><span class=\"s\">&gt;Gambit Palace&lt;/h2&gt;\n    &lt;div class=</span><span class=\"sh\">\"</span><span class=\"s\">rating-badge</span><span class=\"sh\">\"</span><span class=\"s\">&gt;8.8/10&lt;/div&gt;\n    &lt;div class=</span><span class=\"sh\">\"</span><span class=\"s\">bonus-offer</span><span class=\"sh\">\"</span><span class=\"s\">&gt;Get 200 Free Spins&lt;/div&gt;\n    &lt;div class=</span><span class=\"sh\">\"</span><span class=\"s\">payout-speed</span><span class=\"sh\">\"</span><span class=\"s\">&gt;&lt;span&gt;Payout Speed:&lt;/span&gt; 2-3 Days&lt;/div&gt;\n    &lt;a href=</span><span class=\"sh\">\"</span><span class=\"s\">/reviews/gambit-palace</span><span class=\"sh\">\"</span><span class=\"s\"> class=</span><span class=\"sh\">\"</span><span class=\"s\">review-link</span><span class=\"sh\">\"</span><span class=\"s\">&gt;Read More&lt;/a&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</span><span class=\"sh\">\"\"\"</span>\n\n<span class=\"c1\"># Create a BeautifulSoup object to parse the HTML\n</span><span class=\"n\">soup</span> <span class=\"o\">=</span> <span class=\"nc\">BeautifulSoup</span><span class=\"p\">(</span><span class=\"n\">html_content</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">html.parser</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Successfully parsed the HTML content.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Part 3: Extracting Data with BeautifulSoup\n</h3>\n\n<p>Now the fun begins. BeautifulSoup gives us powerful methods to find elements based on their tags, classes, or IDs. The most useful are <code>find()</code> (for one element) and <code>find_all()</code> (for multiple elements).</p>\n\n<p>Let's start by isolating all the review cards.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">review_cards</span> <span class=\"o\">=</span> <span class=\"n\">soup</span><span class=\"p\">.</span><span class=\"nf\">find_all</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">div</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">class_</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">review-card</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Found </span><span class=\"si\">{</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">review_cards</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\"> review cards.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Now, let's process the first card to figure out our extraction logic.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">first_card</span> <span class=\"o\">=</span> <span class=\"n\">review_cards</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># --- Extract the Name ---\n# The name is inside an &lt;h2&gt; tag with class 'site-name'\n</span><span class=\"n\">name_element</span> <span class=\"o\">=</span> <span class=\"n\">first_card</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">h2</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">class_</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">site-name</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># .text gets the text content of the element. .strip() removes whitespace.\n</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name_element</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Name: </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># --- Extract the Rating ---\n</span><span class=\"n\">rating_element</span> <span class=\"o\">=</span> <span class=\"n\">first_card</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">div</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">class_</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">rating-badge</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">rating</span> <span class=\"o\">=</span> <span class=\"n\">rating_element</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Rating: </span><span class=\"si\">{</span><span class=\"n\">rating</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># --- Extract the Bonus ---\n</span><span class=\"n\">bonus_element</span> <span class=\"o\">=</span> <span class=\"n\">first_card</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">div</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">class_</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">bonus-offer</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">bonus</span> <span class=\"o\">=</span> <span class=\"n\">bonus_element</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Bonus: </span><span class=\"si\">{</span><span class=\"n\">bonus</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># --- Extract the Payout Speed ---\n# This one is trickier. The text is \"Payout Speed: 24 Hours (e-wallets)\"\n# We want to remove the \"Payout Speed:\" part.\n</span><span class=\"n\">payout_element</span> <span class=\"o\">=</span> <span class=\"n\">first_card</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">div</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">class_</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">payout-speed</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># We can find the &lt;span&gt; inside and remove it\n</span><span class=\"n\">payout_element</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">span</span><span class=\"sh\">'</span><span class=\"p\">).</span><span class=\"nf\">decompose</span><span class=\"p\">()</span> <span class=\"c1\"># This removes the tag and its content\n</span><span class=\"n\">payout_speed</span> <span class=\"o\">=</span> <span class=\"n\">payout_element</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Payout Speed: </span><span class=\"si\">{</span><span class=\"n\">payout_speed</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This logic works perfectly for one card. Now, we just need to loop through all the cards we found.</p>\n\n<h3>\n  \n  \n  Part 4: Scaling Up and Storing the Data\n</h3>\n\n<p>We'll create a loop and store our results in a list of dictionaries—a very standard and useful format. We'll also add some error handling with try-except blocks, because real-world HTML is messy and elements can be missing.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n\n<span class=\"n\">scraped_data</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">card</span> <span class=\"ow\">in</span> <span class=\"n\">review_cards</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">card</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">h2</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">class_</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">site-name</span><span class=\"sh\">'</span><span class=\"p\">).</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">()</span>\n        <span class=\"n\">rating</span> <span class=\"o\">=</span> <span class=\"n\">card</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">div</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">class_</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">rating-badge</span><span class=\"sh\">'</span><span class=\"p\">).</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">()</span>\n        <span class=\"n\">bonus</span> <span class=\"o\">=</span> <span class=\"n\">card</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">div</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">class_</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">bonus-offer</span><span class=\"sh\">'</span><span class=\"p\">).</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">()</span>\n\n        <span class=\"n\">payout_element</span> <span class=\"o\">=</span> <span class=\"n\">card</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">div</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">class_</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">payout-speed</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n        <span class=\"n\">payout_element</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">span</span><span class=\"sh\">'</span><span class=\"p\">).</span><span class=\"nf\">decompose</span><span class=\"p\">()</span>\n        <span class=\"n\">payout_speed</span> <span class=\"o\">=</span> <span class=\"n\">payout_element</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Store the extracted data in a dictionary\n</span>        <span class=\"n\">site_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"sh\">'</span><span class=\"s\">Name</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"sh\">'</span><span class=\"s\">Rating</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">rating</span><span class=\"p\">,</span>\n            <span class=\"sh\">'</span><span class=\"s\">Bonus</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">bonus</span><span class=\"p\">,</span>\n            <span class=\"sh\">'</span><span class=\"s\">Payout Speed</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"n\">payout_speed</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">scraped_data</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">site_data</span><span class=\"p\">)</span>\n\n    <span class=\"k\">except</span> <span class=\"nb\">AttributeError</span><span class=\"p\">:</span>\n        <span class=\"c1\"># This will catch errors if a tag is not found (e.g., a card is missing a rating)\n</span>        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Skipping a card due to missing data.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">continue</span>\n\n<span class=\"c1\"># Now, let's use Pandas to see our beautiful, structured data\n</span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">scraped_data</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Output:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>          Name  Rating              Bonus           Payout Speed\n0  PlaySafe UK  9.5/10    100% up to £50  24 Hours (e-wallets)\n1  Gambit Palace  8.8/10  Get 200 Free Spins              2-3 Days\n</code></pre>\n\n</div>\n\n\n\n<p>Look at that! We've turned messy HTML into a clean, structured table. The final step is to save it.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Save the DataFrame to a CSV file\n</span><span class=\"n\">df</span><span class=\"p\">.</span><span class=\"nf\">to_csv</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">uk_review_data.csv</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Data successfully saved to uk_review_data.csv</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Conclusion: From a Simple Script to a Full-Scale Project\n</h3>\n\n<p>What we've built here is a simple, conceptual scraper. But this exact process is the foundation of any large-scale data analysis project in the consumer research space.</p>\n\n<p>This tutorial mirrors the foundational work we do at the Casimo.org project. We take this methodology and apply it across the entire UK market, running automated scripts to gather, structure, and analyze tens of thousands of data points on everything from bonus terms to payout speeds. The goal is always the same: to turn a confusing market into a transparent, data-driven resource for players.</p>\n\n<p>This script is the first step. The end result is a platform where players can make decisions based on data, not just marketing hype.</p>\n\n<p>To see the results of this methodology applied at scale, you can explore the full data and reviews on our public research portal: <a href=\"https://casimo.org\" rel=\"noopener noreferrer\">Casimo.org</a>.</p>\n\n<p>In my next post, I'll show you how to take the <code>uk_review_data.csv</code> file we just created and build some powerful visualizations with Matplotlib and Seaborn.</p>\n\n<p>Thanks for reading, and happy scraping!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Quark’s Outlines: Python Classes","url":"https://dev.to/mike-vincent/quarks-outlines-python-classes-kk9","date":1761548400,"author":"Mike Vincent","guid":316623,"unread":true,"content":"<p><em>Overview, Historical Timeline, Problems &amp; Solutions</em></p>\n\n<h2>\n  \n  \n  An Overview of Python Classes\n</h2>\n\n<h3>\n  \n  \n  What is a Python class?\n</h3>\n\n<p>You use Python classes to define new kinds of objects. A Python class is like a mold. It shapes how objects are made and how they act. When you make a class, you create a plan for future things.</p>\n\n<p>When you call a class like a function, Python creates a new object. This object is called a class instance. The class sets the rules for how that object behaves. A class can have data and actions. The data is called attributes. The actions are called methods.</p>\n\n<p><strong>Python lets you define a class to group data and actions.</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Hello</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"nc\">Person</span><span class=\"p\">()</span>\n<span class=\"n\">p</span><span class=\"p\">.</span><span class=\"nf\">greet</span><span class=\"p\">()</span>\n<span class=\"c1\"># prints: Hello\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  How do Python classes store and share data?\n</h3>\n\n<p>When you define a class, Python creates a dictionary to store the class’s data. This is called the class namespace. Any value you assign to the class goes into that dictionary.</p>\n\n<p>If you access a value from a class and it is not found, Python looks in the base classes. This lookup goes from left to right, top to bottom, in the order you wrote them.</p>\n\n<p><strong>Python lets you assign values to a class with simple rules.</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Shape</span><span class=\"p\">:</span>\n    <span class=\"n\">sides</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">Shape</span><span class=\"p\">.</span><span class=\"n\">sides</span><span class=\"p\">)</span>\n<span class=\"c1\"># prints: 4\n</span></code></pre>\n\n</div>\n\n\n\n<p>Python will not copy values from a base class to the new class. It only looks them up if needed.</p>\n\n<h3>\n  \n  \n  What happens when you call a Python class?\n</h3>\n\n<p>You call a Python class like a function. This makes a new instance. If your class defines a method called <code>__init__</code>, Python runs that method when you create the object.</p>\n\n<p>If the class has no <code>__init__</code> method, Python creates the object without setup.</p>\n\n<p><strong>Python runs the <strong>init</strong> method when you create a new object.</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Box</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"n\">label</span>\n\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"nc\">Box</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">toys</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">label</span><span class=\"p\">)</span>\n<span class=\"c1\"># prints: toys\n</span></code></pre>\n\n</div>\n\n\n\n<p>The <code>__init__</code> method gives the new object its first values. You can pass in arguments, and Python sends them to <code>__init__</code>.</p>\n\n<h3>\n  \n  \n  What attributes do Python classes have?\n</h3>\n\n<p>Each Python class has special attributes. These attributes are part of the language and always exist:</p>\n\n<ul>\n<li>\n<code>__dict__</code> holds the class’s data in a dictionary</li>\n<li>\n<code>__name__</code> is the class’s name</li>\n<li>\n<code>__bases__</code> is a tuple of the class’s base classes</li>\n<li>\n<code>__doc__</code> is the documentation string, or <code>None</code> if not written</li>\n</ul>\n\n<p>These attributes help you inspect the class while your program runs.</p>\n\n<p><strong>Python gives each class a set of built-in attributes.</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Tool</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"</span><span class=\"s\">A simple tool class</span><span class=\"sh\">\"</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">Tool</span><span class=\"p\">.</span><span class=\"n\">__name__</span><span class=\"p\">)</span>\n<span class=\"c1\"># prints: Tool\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">Tool</span><span class=\"p\">.</span><span class=\"n\">__doc__</span><span class=\"p\">)</span>\n<span class=\"c1\"># prints: A simple tool class\n</span></code></pre>\n\n</div>\n\n\n\n<p>These built-in values are read-only. You can view them but not change most of them.</p>\n\n\n\n\n<h2>\n  \n  \n  A Historical Timeline of Python Classes\n</h2>\n\n<p><strong>Where do Python class rules come from?</strong></p>\n\n<p>Python classes were designed to be easy to use and flexible. Python chose not to use symbols like <code>{}</code> for blocks and instead relied on whitespace. These choices made Python classes easier to read than many older languages.</p>\n\n\n\n\n<h3>\n  \n  \n  People invented ways to group actions and data\n</h3>\n\n<p><strong>1967 — Simula 67 defines classes</strong><br><br>\nSimula introduced classes as part of the first object-oriented language.</p>\n\n<p><strong>1979 — Smalltalk uses message-based methods</strong><br><br>\nSmalltalk helped shape how objects call methods using dot notation.</p>\n\n<p><strong>1983 — C++ supports class inheritance</strong><br><br>\nC++ showed how classes can share traits using base and derived classes.</p>\n\n\n<h3>\n  \n  \n  People designed Python’s object system\n</h3>\n\n<p><strong>1991 — Python 0.9.0 includes user-defined classes</strong><br><br>\nPython added classes early and supported <code>__init__</code>, inheritance, and method access.</p>\n\n<p><strong>2000 — Python 2.2 adds new-style classes</strong><br><br>\nNew-style classes gave all classes a single object model and enabled properties and descriptors.</p>\n\n\n<h3>\n  \n  \n  People expanded and refined Python classes\n</h3>\n\n<p><strong>2003 — <code>super()</code> added to simplify base class calls</strong><br><br>\nPython added a way to call methods from base classes using <code>super()</code>.</p>\n\n<p><strong>2010 — <code>__slots__</code> feature added for smaller instances</strong><br><br>\nPython introduced slots to control memory use and limit dynamic attributes.</p>\n\n<p><strong>2017 — <code>dataclasses</code> added for simpler class declarations</strong><br><br>\nPython 3.7 added a module to define data-focused classes with less code.</p>\n\n\n<h2>\n  \n  \n  Problems &amp; Solutions with Python Classes\n</h2>\n\n<p><strong>How do you use Python classes the right way?</strong></p>\n\n<p>You use Python classes to make new types that hold both data and actions. These types help you organize code and reuse logic. The problems below show how to solve daily coding needs using Python class rules.</p>\n\n\n<h3>\n  \n  \n  Problem: How do you group data and give it actions in Python?\n</h3>\n\n<p>You are writing a game. Each player has a name and a way to say hello. You want one kind of object that holds the name and knows how to greet. You do not want to write the greeting logic more than once.</p>\n\n<p><strong>Problem:</strong> How can you group data and logic into one object?</p>\n\n<p><strong>Solution:</strong> Define a Python class. Add attributes for the data and methods for the actions.</p>\n\n<p><strong>Python lets you build reusable objects with classes.</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n    <span class=\"k\">def</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Hi, I’m </span><span class=\"si\">{</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"nc\">Player</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Alex</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"p\">.</span><span class=\"nf\">greet</span><span class=\"p\">()</span>\n<span class=\"c1\"># prints: Hi, I’m Alex!\n</span></code></pre>\n\n</div>\n\n\n\n<p>The class holds both the name and the greeting behavior.</p>\n\n\n\n\n<h3>\n  \n  \n  Problem: How do you make new objects from a base plan in Python?\n</h3>\n\n<p>You are building a web app. You want a base class for all users, but also special classes for admins and guests. Each type shares some behavior but has its own setup.</p>\n\n<p><strong>Problem:</strong> How can you share code between related types?</p>\n\n<p><strong>Solution:</strong> Use Python class inheritance. Put common logic in a base class. Make new classes that extend it.</p>\n\n<p><strong>Python lets you reuse code with class inheritance.</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">login</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">User logged in.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Admin</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">login</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Admin access granted.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"nc\">Admin</span><span class=\"p\">()</span>\n<span class=\"n\">a</span><span class=\"p\">.</span><span class=\"nf\">login</span><span class=\"p\">()</span>\n<span class=\"c1\"># prints: Admin access granted.\n</span></code></pre>\n\n</div>\n\n\n\n<p>The <code>Admin</code> class overrides the <code>login</code> method but still acts like a <code>User</code>.</p>\n\n\n\n\n<h3>\n  \n  \n  Problem: How do you track state for each object in Python?\n</h3>\n\n<p>You are writing a tool that counts items. Each counter needs its own value. You want a way to store and update the value inside each object.</p>\n\n<p><strong>Problem:</strong> How can you give each object its own copy of a variable?</p>\n\n<p><strong>Solution:</strong> Use <code>self</code> inside a Python class to store values on each object.</p>\n\n<p><strong>Python lets each object hold its own data using attributes.</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Counter</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">def</span> <span class=\"nf\">show</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">)</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"nc\">Counter</span><span class=\"p\">()</span>\n<span class=\"n\">c</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">()</span>\n<span class=\"n\">c</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">()</span>\n<span class=\"n\">c</span><span class=\"p\">.</span><span class=\"nf\">show</span><span class=\"p\">()</span>\n<span class=\"c1\"># prints: 2\n</span></code></pre>\n\n</div>\n\n\n\n<p>Each counter tracks its own value using <code>self.count</code>.</p>\n\n\n\n\n<h3>\n  \n  \n  Problem: How do you inspect what a class holds in Python?\n</h3>\n\n<p>You write a class and later want to see what attributes it has. You also want to know its base classes. You are debugging and want a built-in way to check the structure.</p>\n\n<p><strong>Problem:</strong> How do you see what Python stored in a class in Python?</p>\n\n<p><strong>Solution:</strong> Use Python’s special attributes like <code>__dict__</code>, <code>__name__</code>, and <code>__bases__</code>.</p>\n\n<p><strong>Python gives each class built-in attributes for inspection.</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Pet</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">Pet</span><span class=\"p\">.</span><span class=\"n\">__name__</span><span class=\"p\">)</span>\n<span class=\"c1\"># prints: Pet\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">Pet</span><span class=\"p\">.</span><span class=\"n\">__dict__</span><span class=\"p\">)</span>\n<span class=\"c1\"># prints: {'__module__': '__main__', '__dict__': ..., ...}\n</span></code></pre>\n\n</div>\n\n\n\n<p>You can use these to understand how Python built your class.</p>\n\n\n\n\n<h3>\n  \n  \n  Problem: How do you control how new objects are set up in Python?\n</h3>\n\n<p>You are writing a program that tracks books. You want each book to store a title and author. You want to make sure every book starts with those values in place.</p>\n\n<p><strong>Problem:</strong> How do you make sure each object is initialized with the right data in Python?</p>\n\n<p><strong>Solution:</strong> Define a <code>__init__</code> method. Python will call it when the class is used to make a new object.</p>\n\n<p><strong>Python lets you customize object creation with <strong>init</strong>.</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">author</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">title</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">author</span>\n\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">1984</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">George Orwell</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">-</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">author</span><span class=\"p\">)</span>\n<span class=\"c1\"># prints: 1984 - George Orwell\n</span></code></pre>\n\n</div>\n\n\n\n<p>Now each book object has its own <code>title</code> and <code>author</code> set at the start.</p>\n\n\n\n\n<h2>\n  \n  \n  Like, Comment, Share, and Subscribe\n</h2>\n\n<p>Did you find this helpful? Let me know by clicking the like button below. I'd love to hear your thoughts in the comments, too! If you want to see more content like this, don't forget to subscribe. Thanks for reading!</p>\n\n\n\n\n<p><a href=\"https://mikevincent.dev\" rel=\"noopener noreferrer\"><strong>Mike Vincent</strong></a> is an American software engineer and app developer from Los Angeles, California. <a href=\"https://mikevincent.dev\" rel=\"noopener noreferrer\">More about Mike Vincent</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Convert Word DOC/DOCX to HTML Efficiently","url":"https://dev.to/allen_yang_f905170c5a197b/convert-word-docdocx-to-html-efficiently-3cha","date":1761548099,"author":"Allen Yang","guid":316606,"unread":true,"content":"<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fud7wxsuawjv99rsv7ezm.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fud7wxsuawjv99rsv7ezm.png\" alt=\"Converting Word Documents to HTML Files with Python Code\" width=\"800\" height=\"328\"></a></p>\n\n<p>In today's digital landscape, seamlessly integrating content across various platforms is paramount. Word documents, while excellent for authoring and collaboration, often pose a challenge when their rich content needs to be displayed dynamically on the web or incorporated into other digital systems. Manually copying and pasting content from Word to a web editor is not only time-consuming but frequently results in lost formatting, broken layouts, and an inconsistent user experience. A robust, programmatic solution is essential for maintaining the fidelity of your content as it transitions from a desktop document to a web-ready format. This tutorial will guide you through leveraging Python to automate the conversion of Word documents to HTML, ensuring accuracy and efficiency in your content workflows.</p>\n\n<h2>\n  \n  \n  The Imperative for Word to HTML Conversion\n</h2>\n\n<p>The need to convert Word documents to HTML arises in numerous scenarios, driven by the demands of modern content management and web publishing. Understanding these use cases highlights why a programmatic approach is not just convenient but often critical.</p>\n\n<p>One of the primary drivers is <strong>web publishing and content migration</strong>. Websites, blogs, and content management systems (CMS) predominantly rely on HTML for displaying information. When content is initially drafted in Word, converting it to HTML allows for easy integration into these platforms without extensive manual reformatting. This is particularly crucial for organizations migrating large archives of Word documents to a new web presence.</p>\n\n<p>Furthermore, HTML offers <strong>improved accessibility and responsiveness</strong>. Unlike static Word files, HTML content can be easily styled with CSS to adapt to various screen sizes and devices, from large desktop monitors to smartphones. It also integrates better with assistive technologies, making your content more accessible to a broader audience.</p>\n\n<p>Beyond display, structured HTML facilitates <strong>data extraction and integration</strong>. Once content is in HTML, it becomes easier to parse, analyze, and integrate into other applications or databases. This is invaluable for tasks like content syndication, creating searchable knowledge bases, or feeding content into AI models.</p>\n\n<p>The complexities of Word document structure, including embedded images, tables, headers, footers, and diverse styling, make direct copy-pasting an inefficient and often frustrating endeavor. Manual conversion frequently leads to broken links, distorted images, and inconsistent typography, necessitating significant post-conversion cleanup. A programmatic solution addresses these challenges head-on, ensuring a more accurate and automated transformation.</p>\n\n<h2>\n  \n  \n  Setting Up Your Python Environment for Document Transformation\n</h2>\n\n<p>Before diving into the conversion process, you'll need a properly configured Python environment. We'll assume you have Python 3 installed on your system. If not, you can download it from the official Python website.</p>\n\n<p>The core of our document processing capability will come from a specialized Python library. This library provides robust functionalities for interacting with and manipulating Word documents, including advanced conversion features.</p>\n\n<p>To install the necessary library, open your terminal or command prompt and execute the following <code>pip</code> command:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>pip <span class=\"nb\">install </span>Spire.Doc\n</code></pre>\n\n</div>\n\n\n\n<p>This command downloads and installs <code>Spire.Doc for Python</code>, which is the powerful library we will use for handling Word documents programmatically, including their conversion to HTML. It encapsulates complex parsing and rendering logic, allowing you to perform sophisticated document operations with simple Python code.</p>\n\n<p>To verify that the installation was successful, you can open a Python interpreter (by typing <code>python</code> in your terminal) and try to import the library:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">Spire.Doc</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Spire.Doc for Python installed successfully!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>If no errors appear, your environment is ready, and you can proceed to the next steps.</p>\n\n<h2>\n  \n  \n  Step-by-Step Python Implementation for Word to HTML\n</h2>\n\n<p>With our environment set up, let's explore how to convert Word documents to HTML using Python. We'll start with a basic conversion and then delve into handling specific options and batch processing.</p>\n\n<h3>\n  \n  \n  Basic DOCX to HTML Conversion\n</h3>\n\n<p>The fundamental process involves loading a Word document, invoking a conversion method, and saving the output as an HTML file. The library simplifies this into just a few lines of code.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">Spire.Doc</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"n\">Spire.Doc.FileFormat</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">convert_docx_to_html_basic</span><span class=\"p\">(</span><span class=\"n\">input_path</span><span class=\"p\">,</span> <span class=\"n\">output_path</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    Converts a Word document (DOCX) to an HTML file.\n\n    Args:\n        input_path (str): The path to the input Word document (.docx).\n        output_path (str): The path where the output HTML file will be saved (.html).\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Create a Document object\n</span>        <span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"nc\">Document</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Load the Word document from the specified path\n</span>        <span class=\"n\">document</span><span class=\"p\">.</span><span class=\"nc\">LoadFromFile</span><span class=\"p\">(</span><span class=\"n\">input_path</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Save the document as an HTML file\n</span>        <span class=\"c1\"># The FileFormat.Html enum specifies the output format\n</span>        <span class=\"n\">document</span><span class=\"p\">.</span><span class=\"nc\">SaveToFile</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"p\">,</span> <span class=\"n\">FileFormat</span><span class=\"p\">.</span><span class=\"n\">Html</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Close the document to release resources\n</span>        <span class=\"n\">document</span><span class=\"p\">.</span><span class=\"nc\">Close</span><span class=\"p\">()</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Successfully converted </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">input_path</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"s\"> to </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">output_path</span><span class=\"si\">}</span><span class=\"sh\">'\"</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">An error occurred during conversion: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Example Usage:\n# Create a dummy 'sample.docx' or use an existing one in the same directory\n# For demonstration, let's assume 'input.docx' exists in the same directory\n</span><span class=\"n\">input_file</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">input.docx</span><span class=\"sh\">\"</span> \n<span class=\"n\">output_file</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">output.html</span><span class=\"sh\">\"</span>\n<span class=\"nf\">convert_docx_to_html_basic</span><span class=\"p\">(</span><span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"n\">output_file</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>In this code:</p>\n\n<ul>\n<li>  We import the necessary classes from <code>Spire.Doc</code>.</li>\n<li>  A <code>Document</code> object is instantiated.</li>\n<li>  <code>document.LoadFromFile(input_path)</code> reads the content of your Word document into memory.</li>\n<li>  <code>document.SaveToFile(output_path, FileFormat.Html)</code> performs the actual conversion and saves the result as an HTML file.</li>\n<li>  <code>document.Close()</code> is crucial for releasing system resources.</li>\n</ul>\n\n<h3>\n  \n  \n  Handling Specific Conversion Options\n</h3>\n\n<p>The library provides various options to fine-tune the HTML output, allowing you to control aspects like image embedding, CSS styling, and more. These options are typically set via an <code>HtmlSaveOptions</code> object.</p>\n\n<p>Here's a table outlining some common <code>HtmlSaveOptions</code> properties and their effects:</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Option/Parameter</th>\n<th>Description</th>\n<th>Example Usage/Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ImageEmbedded</code></td>\n<td>Specifies whether images should be embedded directly in the HTML (Base64) or saved as external files.</td>\n<td>\n<code>options.ImageEmbedded = True</code> (embeds images); <code>options.ImageEmbedded = False</code> (creates separate image files).</td>\n</tr>\n<tr>\n<td><code>CssStyleSheetType</code></td>\n<td>Determines how CSS styles are generated and linked.</td>\n<td>\n<code>options.CssStyleSheetType = CssStyleSheetType.Embedded</code> (styles within <code>&lt;style&gt;</code> tags); <code>options.CssStyleSheetType = CssStyleSheetType.External</code> (separate <code>.css</code> file).</td>\n</tr>\n<tr>\n<td><code>DisableLink</code></td>\n<td>Controls whether hyperlinks in the Word document are preserved in the HTML.</td>\n<td>\n<code>options.DisableLink = True</code> (removes hyperlinks); <code>options.DisableLink = False</code> (preserves hyperlinks).</td>\n</tr>\n<tr>\n<td><code>Is  ExportPageBreaks</code></td>\n<td>Indicates whether page breaks in the Word document should be represented in the HTML.</td>\n<td>\n<code>options.IsExportPageBreaks = True</code> (adds CSS for page breaks).</td>\n</tr>\n<tr>\n<td><code>HtmlExportImageAsBase64</code></td>\n<td>A more specific option for embedding images as Base64. If <code>ImageEmbedded</code> is <code>True</code>, this is often implicitly handled.</td>\n<td>\n<code>options.HtmlExportImageAsBase64 = True</code> (explicitly embeds images as Base64 strings).</td>\n</tr>\n</tbody>\n</table></div>\n\n<p>Let's see an example of using these options to save HTML with embedded images and external CSS:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">Spire.Doc</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"n\">Spire.Doc.FileFormat</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"n\">Spire.Doc.Fields</span> <span class=\"kn\">import</span> <span class=\"o\">*</span> <span class=\"c1\"># Might be needed for some advanced options, though not directly for basic save options\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">convert_docx_to_html_with_options</span><span class=\"p\">(</span><span class=\"n\">input_path</span><span class=\"p\">,</span> <span class=\"n\">output_path</span><span class=\"p\">,</span> <span class=\"n\">embed_images</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">css_type</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Embedded</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    Converts a Word document to HTML with specified options.\n\n    Args:\n        input_path (str): Path to the input Word document.\n        output_path (str): Path for the output HTML file.\n        embed_images (bool): True to embed images as Base64, False to save as external files.\n        css_type (str): </span><span class=\"sh\">\"</span><span class=\"s\">Embedded</span><span class=\"sh\">\"</span><span class=\"s\"> for internal CSS, </span><span class=\"sh\">\"</span><span class=\"s\">External</span><span class=\"sh\">\"</span><span class=\"s\"> for an external CSS file.\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"nc\">Document</span><span class=\"p\">()</span>\n        <span class=\"n\">document</span><span class=\"p\">.</span><span class=\"nc\">LoadFromFile</span><span class=\"p\">(</span><span class=\"n\">input_path</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Create HtmlSaveOptions object\n</span>        <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"nc\">HtmlSaveOptions</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Set image embedding option\n</span>        <span class=\"n\">options</span><span class=\"p\">.</span><span class=\"n\">HtmlExportImageAsBase64</span> <span class=\"o\">=</span> <span class=\"n\">embed_images</span>\n\n        <span class=\"c1\"># Set CSS stylesheet type\n</span>        <span class=\"k\">if</span> <span class=\"n\">css_type</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">External</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n            <span class=\"n\">options</span><span class=\"p\">.</span><span class=\"n\">CssStyleSheetType</span> <span class=\"o\">=</span> <span class=\"n\">CssStyleSheetType</span><span class=\"p\">.</span><span class=\"n\">External</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span> <span class=\"c1\"># Default to Embedded\n</span>            <span class=\"n\">options</span><span class=\"p\">.</span><span class=\"n\">CssStyleSheetType</span> <span class=\"o\">=</span> <span class=\"n\">CssStyleSheetType</span><span class=\"p\">.</span><span class=\"n\">Embedded</span>\n\n        <span class=\"c1\"># You can set other options as needed, e.g., to disable links\n</span>        <span class=\"c1\"># options.DisableLink = True\n</span>\n        <span class=\"c1\"># Save the document with the specified options\n</span>        <span class=\"n\">document</span><span class=\"p\">.</span><span class=\"nc\">SaveToFile</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"p\">,</span> <span class=\"n\">FileFormat</span><span class=\"p\">.</span><span class=\"n\">Html</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"p\">)</span>\n        <span class=\"n\">document</span><span class=\"p\">.</span><span class=\"nc\">Close</span><span class=\"p\">()</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Successfully converted </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">input_path</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"s\"> to </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">output_path</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"s\"> with custom options.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">An error occurred during conversion with options: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Example Usage:\n</span><span class=\"n\">input_file</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">input.docx</span><span class=\"sh\">\"</span>\n<span class=\"n\">output_file_embedded_css_images</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">output_embedded.html</span><span class=\"sh\">\"</span>\n<span class=\"n\">output_file_external_css_images</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">output_external_css.html</span><span class=\"sh\">\"</span>\n\n<span class=\"c1\"># Convert with embedded images and embedded CSS\n</span><span class=\"nf\">convert_docx_to_html_with_options</span><span class=\"p\">(</span><span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"n\">output_file_embedded_css_images</span><span class=\"p\">,</span> <span class=\"n\">embed_images</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">css_type</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Embedded</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Convert with embedded images and external CSS\n</span><span class=\"nf\">convert_docx_to_html_with_options</span><span class=\"p\">(</span><span class=\"n\">input_file</span><span class=\"p\">,</span> <span class=\"n\">output_file_external_css_images</span><span class=\"p\">,</span> <span class=\"n\">embed_images</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">css_type</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">External</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Batch Conversion for Multiple Documents\n</h3>\n\n<p>Automating the conversion of a single file is useful, but often you'll need to process an entire directory of documents. This can be achieved by iterating through files in a given folder.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">from</span> <span class=\"n\">Spire.Doc</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"n\">Spire.Doc.FileFormat</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">batch_convert_docx_to_html</span><span class=\"p\">(</span><span class=\"n\">input_folder</span><span class=\"p\">,</span> <span class=\"n\">output_folder</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    Converts all DOCX files in an input folder to HTML in an output folder.\n\n    Args:\n        input_folder (str): Path to the folder containing input Word documents.\n        output_folder (str): Path where the converted HTML files will be saved.\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">exists</span><span class=\"p\">(</span><span class=\"n\">output_folder</span><span class=\"p\">):</span>\n        <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">makedirs</span><span class=\"p\">(</span><span class=\"n\">output_folder</span><span class=\"p\">)</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Created output folder: </span><span class=\"si\">{</span><span class=\"n\">output_folder</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">filename</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">listdir</span><span class=\"p\">(</span><span class=\"n\">input_folder</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">filename</span><span class=\"p\">.</span><span class=\"nf\">endswith</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">.docx</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n            <span class=\"n\">input_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">input_folder</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Create output filename by changing extension\n</span>            <span class=\"n\">output_filename</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">splitext</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">.html</span><span class=\"sh\">\"</span>\n            <span class=\"n\">output_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">output_folder</span><span class=\"p\">,</span> <span class=\"n\">output_filename</span><span class=\"p\">)</span>\n\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"nc\">Document</span><span class=\"p\">()</span>\n                <span class=\"n\">document</span><span class=\"p\">.</span><span class=\"nc\">LoadFromFile</span><span class=\"p\">(</span><span class=\"n\">input_path</span><span class=\"p\">)</span>\n                <span class=\"n\">document</span><span class=\"p\">.</span><span class=\"nc\">SaveToFile</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"p\">,</span> <span class=\"n\">FileFormat</span><span class=\"p\">.</span><span class=\"n\">Html</span><span class=\"p\">)</span>\n                <span class=\"n\">document</span><span class=\"p\">.</span><span class=\"nc\">Close</span><span class=\"p\">()</span>\n                <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Converted </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">filename</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"s\"> to </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">output_filename</span><span class=\"si\">}</span><span class=\"sh\">'\"</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Error converting </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">filename</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"s\">: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Skipping non-DOCX file: </span><span class=\"si\">{</span><span class=\"n\">filename</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Example Usage:\n</span><span class=\"n\">input_directory</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">input_docs</span><span class=\"sh\">\"</span> <span class=\"c1\"># Make sure this folder exists and contains DOCX files\n</span><span class=\"n\">output_directory</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">output_htmls</span><span class=\"sh\">\"</span>\n\n<span class=\"c1\"># Create dummy input_docs for demonstration\n# os.makedirs(input_directory, exist_ok=True)\n# with open(os.path.join(input_directory, \"doc1.docx\"), \"w\") as f: f.write(\"Dummy Word content 1\") # This is not a real DOCX\n# with open(os.path.join(input_directory, \"doc2.docx\"), \"w\") as f: f.write(\"Dummy Word content 2\") # This is not a real DOCX\n# You should place actual .docx files in `input_docs`\n# For example, create a few simple Word documents and save them as .docx in the 'input_docs' folder.\n</span>\n<span class=\"nf\">batch_convert_docx_to_html</span><span class=\"p\">(</span><span class=\"n\">input_directory</span><span class=\"p\">,</span> <span class=\"n\">output_directory</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Error Handling and Best Practices\n</h3>\n\n<p>Robust scripts anticipate and handle errors gracefully. Wrapping your conversion logic in <code>try-except</code> blocks is a best practice to catch potential issues, such as a file not being found, a corrupted document, or other unexpected errors during the conversion process.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">from</span> <span class=\"n\">Spire.Doc</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"n\">Spire.Doc.FileFormat</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">robust_convert_docx_to_html</span><span class=\"p\">(</span><span class=\"n\">input_path</span><span class=\"p\">,</span> <span class=\"n\">output_path</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    Converts a Word document to HTML with basic error handling.\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"bp\">None</span> <span class=\"c1\"># Initialize document to None\n</span>    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">exists</span><span class=\"p\">(</span><span class=\"n\">input_path</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"nc\">FileNotFoundError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Input file not found: </span><span class=\"si\">{</span><span class=\"n\">input_path</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"nc\">Document</span><span class=\"p\">()</span>\n        <span class=\"n\">document</span><span class=\"p\">.</span><span class=\"nc\">LoadFromFile</span><span class=\"p\">(</span><span class=\"n\">input_path</span><span class=\"p\">)</span>\n        <span class=\"n\">document</span><span class=\"p\">.</span><span class=\"nc\">SaveToFile</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"p\">,</span> <span class=\"n\">FileFormat</span><span class=\"p\">.</span><span class=\"n\">Html</span><span class=\"p\">)</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Successfully converted </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">input_path</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"s\"> to </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">output_path</span><span class=\"si\">}</span><span class=\"sh\">'\"</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"nb\">FileNotFoundError</span> <span class=\"k\">as</span> <span class=\"n\">fnf_error</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Error: </span><span class=\"si\">{</span><span class=\"n\">fnf_error</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">An unexpected error occurred during conversion of </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">input_path</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"s\">: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">document</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">document</span><span class=\"p\">.</span><span class=\"nc\">Close</span><span class=\"p\">()</span> <span class=\"c1\"># Ensure document is closed even if an error occurs\n</span>\n<span class=\"c1\"># Example Usage:\n</span><span class=\"nf\">robust_convert_docx_to_html</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">non_existent_file.docx</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">error_output.html</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">robust_convert_docx_to_html</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">input.docx</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">output_robust.html</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"c1\"># Assuming input.docx exists\n</span></code></pre>\n\n</div>\n\n\n\n<p>This <code>finally</code> block ensures that <code>document.Close()</code> is always called, which is important for releasing underlying resources, even if an exception occurs during the <code>LoadFromFile</code> or <code>SaveToFile</code> operations.</p>\n\n<h2>\n  \n  \n  Advanced Considerations and Fidelity\n</h2>\n\n<p>Achieving high-fidelity conversion from Word to HTML often involves managing specific elements and understanding how the library translates them.</p>\n\n<p><strong>Image Handling:</strong> The library offers flexibility in how images are handled. By default, or by setting <code>HtmlExportImageAsBase64 = True</code>, images are embedded directly into the HTML as Base64 encoded strings. This creates a single, self-contained HTML file. Alternatively, setting <code>HtmlExportImageAsBase64 = False</code> will save images as separate files in a subfolder relative to the HTML output, with <code>&lt;img&gt;</code> tags pointing to these external files. This can be beneficial for larger documents or when you want to manage images separately.</p>\n\n<p><strong>CSS and Styling:</strong> The library intelligently translates Word's internal styling into CSS. Depending on the <code>CssStyleSheetType</code> option, this CSS can be embedded directly within the HTML <code>&lt;head&gt;</code> section or linked as an external <code>.css</code> file. For advanced users, this means you can potentially modify the generated CSS or even provide your own external stylesheet to override or augment the default styling, ensuring brand consistency across your web properties.</p>\n\n<p><strong>Complex Layouts:</strong> While the library excels at preserving formatting, highly complex Word layouts with intricate tables, text boxes, or specific graphical elements might still require minor post-conversion adjustments. It's always a good practice to review the generated HTML in a browser to ensure it meets your exact requirements. However, the programmatic conversion provides an excellent starting point, saving countless hours compared to manual recreation.</p>\n\n<p>For very large documents, consider processing them in chunks if the library supports it, or ensure your system has sufficient memory. While <code>Spire.Doc for Python</code> is optimized for performance, extreme cases might benefit from resource monitoring.</p>\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>Converting Word documents to HTML is a common necessity in today's interconnected digital world, bridging the gap between desktop publishing and web-based content delivery. As we've explored, Python offers a powerful and efficient solution for this task, automating a process that would otherwise be tedious and error-prone. By leveraging the capabilities of <code>Spire.Doc for Python</code>, developers and content managers can achieve high-fidelity conversions, preserving critical formatting and enabling seamless integration of rich document content into web applications, CMS platforms, and other digital workflows.</p>\n\n<p>This programmatic approach ensures consistency, saves valuable time, and significantly enhances the maintainability and accessibility of your content. We encourage you to integrate these techniques into your projects, explore the library's extensive features further, and unlock new possibilities for document automation with Python.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Pandas Task:","url":"https://dev.to/ashok_kumar_564581944e3ef/pandas-task-14h","date":1761545865,"author":"Ashok Kumar","guid":316605,"unread":true,"content":"<p>💻 Completed Full Data Analysis Process Using Python (Pandas) 📊</p>\n\n<p>I’m happy to share that I’ve successfully completed all 5 Phases of the Data Analysis workflow step by step:</p>\n\n<p>🧩 Phase 1: Data Understanding<br>\nLoaded dataset, reviewed column types, and understood the meaning of each field.</p>\n\n<p>🧹 Phase 2: Data Cleaning<br>\nHandled missing values, removed duplicates, corrected data types, and formatted dates properly.</p>\n\n<p>⚙️ Phase 3: Data Preparation<br>\nCreated new calculated columns such as Total Sales Value, Profit Margin %, and Month from Date to enrich the dataset.</p>\n\n<p>🔍 Phase 4: Data Exploration<br>\nExplored key insights like total profit by region, top-performing salespersons, and product discounts.</p>\n\n<p>📈 Phase 5: Aggregation &amp; Insights<br>\nCompared sales and profits across regions, analyzed discount impact, and identified top 5 profitable products.</p>\n\n<p>This hands-on exercise helped me understand how data cleaning and exploration lead to valuable business insights.<br>\nExcited to move towards Data Visualization next using Power BI / Tableau! 🚀</p>\n\n<p>Git Hub Link - <a href=\"https://lnkd.in/eyUQrcgu\" rel=\"noopener noreferrer\">https://lnkd.in/eyUQrcgu</a></p>\n\n<p>hashtag#DataAnalytics hashtag#Python hashtag#Pandas hashtag#DataCleaning hashtag#DataExploration hashtag#DataScience hashtag#LearningJourney</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Bytes in Python (3)","url":"https://dev.to/hyperkai/bytes-in-python-3-1ml6","date":1761544311,"author":"Super Kai (Kazuya Ito)","guid":316592,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>☕</p>\n\n<p>*Memo:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/byte-string-in-python-1-5a7i\">My post</a> explains a bytes (1).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/bytes-in-python-3-1ml6\">My post</a> explains a bytes (3).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/bytes-in-python-3-14mn\">My post</a> explains a bytes (4).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/byte-string-in-python-4-33h8\">My post</a> explains <a href=\"https://docs.python.org/3/library/stdtypes.html#bytes\" rel=\"noopener noreferrer\">bytes()</a>.</li>\n</ul>\n\n<p>A bytes can be enlarged with <code>*</code> and a number as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABCDE</span><span class=\"sh\">'</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># b'ABCDEABCDEABCDE'\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">01234</span><span class=\"sh\">'</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># b'012340123401234'\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">''</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># b''\n</span></code></pre>\n\n</div>\n\n\n\n<p>A bytes object and other bytes objects can be concatenated with <code>+</code> as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span> <span class=\"o\">+</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">DE</span><span class=\"sh\">'</span> <span class=\"o\">+</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">FGHI</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># b'ABCDEFGHI'\n</span></code></pre>\n\n</div>\n\n\n\n<p>A bytes object and other bytes objects cannot return:</p>\n\n<ul>\n<li>all the bytes in them with <code>'|'</code> (Union: A ∪ B).</li>\n<li>their common bytes with <code>'&amp;'</code> (Intersection: A ∩ B).</li>\n<li>the bytes in the bytes object which aren't in other bytes object with <code>'-'</code> (Difference: A - B).\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">AE</span><span class=\"sh\">'</span> <span class=\"o\">|</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ACE</span><span class=\"sh\">'</span> <span class=\"o\">|</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABDE</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for |: 'bytes' and 'bytes'\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">AE</span><span class=\"sh\">'</span> <span class=\"o\">&amp;</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ACE</span><span class=\"sh\">'</span> <span class=\"o\">&amp;</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABDE</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for &amp;: 'bytes' and 'bytes'\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">AE</span><span class=\"sh\">'</span> <span class=\"o\">-</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ACE</span><span class=\"sh\">'</span> <span class=\"o\">-</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABDE</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for -: 'bytes' and 'bytes'\n</span></code></pre>\n\n</div>\n\n\n\n<p>A bytes object and other bytes object cannot return the bytes in the bytes object but not in other bytes object or not in the bytes object but in other bytes object with <code>'^'</code> (Symmetric Difference: A Δ B) as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABCD</span><span class=\"sh\">'</span> <span class=\"o\">^</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ACE</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for ^: 'bytes' and 'bytes'\n</span></code></pre>\n\n</div>\n\n\n\n<p>A bytes can be iterated with a <code>for</code> statement as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># 65\n# 66\n# 67\n</span></code></pre>\n\n</div>\n\n\n\n<p>A bytes can be unpacked with an assignment and <code>for</code> statement, function and <code>*</code> but not with <code>**</code> as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"c1\"># 65 66 67\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABCDEF</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>  <span class=\"c1\"># 65 [66, 67, 68, 69] 70\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># 65 66 67 68 69 70\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">for</span> <span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">DEF</span><span class=\"sh\">'</span><span class=\"p\">]:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"c1\"># 65 66 67\n# 68 69 70\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">for</span> <span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABCDEF</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">GHIJKL</span><span class=\"sh\">'</span><span class=\"p\">]:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"c1\"># 65 [66, 67, 68, 69] 70\n# 65 66 67 68 69 70\n# 71 [72, 73, 74, 75] 76\n# 71 72 73 74 75 76\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABCD</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">EF</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># 65 66 67 68 69 70\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">([</span><span class=\"o\">*</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABCD</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">EF</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"c1\"># [65, 66, 67, 68, 69, 70]\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p3</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p4</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p5</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">e</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p6</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">f</span><span class=\"sh\">'</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">p3</span><span class=\"p\">,</span> <span class=\"n\">p4</span><span class=\"p\">,</span> <span class=\"n\">p5</span><span class=\"p\">,</span> <span class=\"n\">p6</span><span class=\"p\">)</span>\n\n<span class=\"nf\">func</span><span class=\"p\">()</span>\n<span class=\"c1\"># a b c d e f\n</span>\n<span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABCD</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">EF</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># 65 66 67 68 69 70\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n\n<span class=\"nf\">func</span><span class=\"p\">()</span>\n<span class=\"c1\"># a b ()\n# a b Nothing\n# a b [0, 1, 2, 3]\n</span>\n<span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABCD</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">EF</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># 65 66 (67, 68, 69, 70)\n# 65 66 67 68 69 70\n# 65 66 [0, 1, 67, 68, 69, 70, 2, 3]\n</span></code></pre>\n\n</div>\n\n\n\n<p>Be careful, a big bytes gets <code>OverflowError</code> as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"sh\">'</span><span class=\"s\">ABCDE</span><span class=\"sh\">'</span> <span class=\"o\">*</span> <span class=\"mi\">1000000000</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># OverflowError: repeated bytes are too long\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Goodbye Guesswork: Code Generation That Knows What It Doesn't Know","url":"https://dev.to/arvind_sundararajan/goodbye-guesswork-code-generation-that-knows-what-it-doesnt-know-45f1","date":1761541325,"author":"Arvind SundaraRajan","guid":316591,"unread":true,"content":"<h1>\n  \n  \n  Goodbye Guesswork: Code Generation That Knows What It Doesn't Know\n</h1>\n\n<p>Tired of AI-generated code that <em>seems</em> right, only to explode in spectacular fashion at runtime? Imagine if your coding assistant could flag its own blind spots, highlighting areas where the generated code might be shaky. What if the system itself could tell you where it's uncertain?</p>\n\n<p>That's the promise of a new approach to code generation: uncertainty-aware models. Instead of spitting out just one \"best guess\" code snippet, these models output a <em>distribution</em> of possible solutions, along with a measure of confidence for each. Think of it like a weather forecast: instead of saying \"it will rain,\" it tells you \"there's an 80% chance of rain, and a 20% chance of sunshine.\" </p>\n\n<p>This uncertainty is incredibly valuable. It lets you, the developer, focus your testing and debugging efforts where they're most needed. It moves us away from blind trust and toward verifiable reliability.</p>\n\n<p>Here's how it benefits you:</p>\n\n<ul>\n<li>  <strong>Surgical Debugging:</strong> Identify and address potential bugs <em>before</em> they crash your system.</li>\n<li>  <strong>Reduced Testing Costs:</strong> Focus testing on high-uncertainty code sections.</li>\n<li>  <strong>Increased Code Reliability:</strong> Build systems with a known and managed risk profile.</li>\n<li>  <strong>Smarter Code Reviews:</strong> Easily spot areas needing deeper human review.</li>\n<li>  <strong>Adaptive Refinement:</strong> Automatically trigger code refinement or alternative generation for uncertain segments.</li>\n<li>  <strong>Improved Safety-Critical Applications:</strong> For systems where failure is unacceptable, knowing the model's limitations is crucial.</li>\n</ul>\n\n<p>Implementing this isn't a walk in the park. Gathering training data that adequately reflects real-world code uncertainty is a significant hurdle. We need datasets that not only contain correct code but also examples of subtly incorrect or ambiguous solutions. Imagine training a model to bake a cake, not just showing it perfect recipes, but also examples of what happens when you forget the baking powder or add too much salt!</p>\n\n<p>This technology heralds a future where AI assists us in building more trustworthy and robust software. As these techniques mature, we can expect AI to become an even more indispensable partner in the software development lifecycle, empowering us to build more complex and reliable systems than ever before.</p>\n\n<p><strong>Related Keywords:</strong> code generation, bayesian neural networks, uncertainty quantification, model calibration, deep learning, artificial intelligence, automatic programming, reliable AI, trustworthy AI, generative models, AI safety, AI ethics, debugging, testing, software engineering, AI for software development, probabilistic programming, neural network uncertainty, AI code quality, AI error detection, monte carlo dropout, ensemble learning, variational inference, coding assistant, LLM</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 16 of My AI & Data Mastery Journey: From Python to Generative AI","url":"https://dev.to/nitinbhatt46/day-16-of-my-ai-data-mastery-journey-from-python-to-generative-ai-42fp","date":1761540677,"author":"Nitin-bhatt46","guid":316586,"unread":true,"content":"<p><strong>Inheritance</strong></p>\n\n<p>🧠 Concept:</p>\n\n<p>Child class inherits data + behavior from parent class.</p>\n\n<p>💼 Real-world idea:</p>\n\n<p>A Manager is an Employee but with extra privileges.</p>\n\n<p>Creation Question</p>\n\n<p>Create a base class Employee with attributes name, salary.<br>\nCreate subclass Manager(Employee) with extra attribute department.<br>\nAdd a method show_info() showing all details.</p>\n\n<p>Debugging Question<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>class Vehicle:\n    def move(self):\n        print(\"Moving\")\n\nclass Car(Vehicle):\n    def wheels():\n        print(\"4 wheels\")\n\nc = Car()\nc.move()\nc.wheels()\n</code></pre>\n\n</div>\n\n\n\n<p>🎯 Bug: parameter error in subclass method.</p>\n\n<p>** Polymorphism**</p>\n\n<p>🧠 Concept:</p>\n\n<p>Same function name, different behavior per class.</p>\n\n<p>💼 Real-world idea:</p>\n\n<p>Payment method — can be through CreditCard, UPI, or Cash.</p>\n\n<p>Creation Question</p>\n\n<p>Create 3 classes:<br>\nCreditCard, UPI, and Cash — each with a pay(amount) method showing how payment is made.<br>\nThen loop through all and call .pay() — observe polymorphism.</p>\n\n<p>Debugging Question<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>class Dog:\n    def speak(self):\n        print(\"Woof!\")\n\nclass Cat:\n    def speak():\n        print(\"Meow!\")\n\nfor pet in [Dog(), Cat()]:\n    pet.speak()\n</code></pre>\n\n</div>\n\n\n\n<p>🎯 Bug: missing argument in one class’s method definition.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: Build a Python AI Agent in 10 Minutes","url":"https://dev.to/vibe_youtube/tech-with-tim-build-a-python-ai-agent-in-10-minutes-53ip","date":1761538149,"author":"Vibe YouTube","guid":316581,"unread":true,"content":"<p>In just ten minutes, Tech With Tim walks you through spinning up a Python AI agent from scratch—covering dependency setup, grabbing your OpenAI API key, crafting custom tools, wiring up the LLM and agent, writing the driver code, and running tests. He even drops handy timestamps so you can skip straight to each stage.</p>\n\n<p>Along the way you get a link to the full GitHub repo, a free trial of Notion, and an invite to his DevLaunch mentorship program for developers craving real-world projects and one-on-one guidance. Perfect for anyone who wants to dive into AI without getting stuck in endless tutorials.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=gaGaPpnexxA\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"String in Python (3)","url":"https://dev.to/hyperkai/string-in-python-3-oe2","date":1761532339,"author":"Super Kai (Kazuya Ito)","guid":315606,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>☕</p>\n\n<p>*Memo:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/string-in-python-1-3hg7\">My post</a> explains a string (1).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/string-in-python-2-2382\">My post</a> explains a string (2).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/string-in-python-3-16m1\">My post</a> explains a string (4).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/string-in-python-2-1jhk\">My post</a> explains <a href=\"https://docs.python.org/3/library/stdtypes.html#str\" rel=\"noopener noreferrer\">str()</a> (1).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/string-in-python-4-27mo\">My post</a> explains <a href=\"https://docs.python.org/3/library/stdtypes.html#str\" rel=\"noopener noreferrer\">str()</a> (2).</li>\n</ul>\n\n<p>A string can be enlarged with <code>*</code> and a number as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">ABCDE</span><span class=\"sh\">'</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># ABCDEABCDEABCDE\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">01234</span><span class=\"sh\">'</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># 012340123401234\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">''</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># Nothing\n</span></code></pre>\n\n</div>\n\n\n\n<p>A string and other strings can be concatenated with <code>+</code> as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span> <span class=\"o\">+</span> <span class=\"sh\">'</span><span class=\"s\">DE</span><span class=\"sh\">'</span> <span class=\"o\">+</span> <span class=\"sh\">'</span><span class=\"s\">FGHI</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># ABCDEFGHI\n</span></code></pre>\n\n</div>\n\n\n\n<p>A string and other strings cannot return:</p>\n\n<ul>\n<li>all the characters in them with <code>'|'</code> (Union: A ∪ B).</li>\n<li>their common characters with <code>'&amp;'</code> (Intersection: A ∩ B).</li>\n<li>the characters in the string which aren't in other string with <code>'-'</code> (Difference: A - B).\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">AE</span><span class=\"sh\">'</span> <span class=\"o\">|</span> <span class=\"sh\">'</span><span class=\"s\">ACE</span><span class=\"sh\">'</span> <span class=\"o\">|</span> <span class=\"sh\">'</span><span class=\"s\">ABDE</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for |: 'str' and 'str'\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">AE</span><span class=\"sh\">'</span> <span class=\"o\">&amp;</span> <span class=\"sh\">'</span><span class=\"s\">ACE</span><span class=\"sh\">'</span> <span class=\"o\">&amp;</span> <span class=\"sh\">'</span><span class=\"s\">ABDE</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for &amp;: 'str' and 'str'\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">AE</span><span class=\"sh\">'</span> <span class=\"o\">-</span> <span class=\"sh\">'</span><span class=\"s\">ACE</span><span class=\"sh\">'</span> <span class=\"o\">-</span> <span class=\"sh\">'</span><span class=\"s\">ABDE</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for -: 'str' and 'str'\n</span></code></pre>\n\n</div>\n\n\n\n<p>A string and other string cannot return the characters in the string but not in other string or not in the string but in other string with <code>'^'</code> (Symmetric Difference: A Δ B) as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ABCD</span><span class=\"sh\">'</span> <span class=\"o\">^</span> <span class=\"sh\">'</span><span class=\"s\">ACE</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for ^: 'str' and 'str'\n</span></code></pre>\n\n</div>\n\n\n\n<p>A string can be iterated with a <code>for</code> statement as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># A\n# B\n# C\n</span></code></pre>\n\n</div>\n\n\n\n<p>A string can be unpacked with an assignment and <code>for</code> statement, the function and <code>*</code> but not with <code>**</code> as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"c1\"># A B C\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">ABCDEF</span><span class=\"sh\">'</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>    <span class=\"c1\"># A ['B', 'C', 'D', 'E'] F\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>   <span class=\"c1\"># A B C D E F\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># A B C D E F\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">for</span> <span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">ABC</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">DEF</span><span class=\"sh\">'</span><span class=\"p\">]:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"c1\"># A B C\n# D E F\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">for</span> <span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">ABCDEF</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">GHIJKL</span><span class=\"sh\">'</span><span class=\"p\">]:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"c1\"># A ['B', 'C', 'D', 'E'] F\n# A B C D E F\n# A B C D E F\n# G ['H', 'I', 'J', 'K'] L\n# G H I J K L\n# G H I J K L\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"sh\">'</span><span class=\"s\">ABCD</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"sh\">'</span><span class=\"s\">EF</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># A B C D E F\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">([</span><span class=\"o\">*</span><span class=\"sh\">'</span><span class=\"s\">ABCD</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"sh\">'</span><span class=\"s\">EF</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"c1\"># ['A', 'B', 'C', 'D', 'E', 'F']\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p3</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p4</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p5</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">e</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p6</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">f</span><span class=\"sh\">'</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">p3</span><span class=\"p\">,</span> <span class=\"n\">p4</span><span class=\"p\">,</span> <span class=\"n\">p5</span><span class=\"p\">,</span> <span class=\"n\">p6</span><span class=\"p\">)</span>\n\n<span class=\"nf\">func</span><span class=\"p\">()</span>\n<span class=\"c1\"># a b c d e f\n</span>\n<span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"sh\">'</span><span class=\"s\">ABCD</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"sh\">'</span><span class=\"s\">EF</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># A B C D E F\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n\n<span class=\"nf\">func</span><span class=\"p\">()</span>\n<span class=\"c1\"># a b ()\n# a b Nothing\n# a b [0, 1, 2, 3]\n</span>\n<span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"sh\">'</span><span class=\"s\">ABCD</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"sh\">'</span><span class=\"s\">EF</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># A B ('C', 'D', 'E', 'F')\n# A B C D E F\n# A B [0, 1, 'C', 'D', 'E', 'F', 2, 3]\n</span></code></pre>\n\n</div>\n\n\n\n<p>Be careful, a big string gets <code>OverflowError</code> as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"sh\">'</span><span class=\"s\">ABCDE</span><span class=\"sh\">'</span> <span class=\"o\">*</span> <span class=\"mi\">1000000000</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># OverflowError: repeated string is too long\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building a Production-Ready Refund Agent That Won't Break Your Business","url":"https://dev.to/hadywalied/building-a-production-ready-refund-agent-that-wont-break-your-business-19mm","date":1761530311,"author":"Hady Walied","guid":315605,"unread":true,"content":"<p>AI agents can automate business processes. But most demos ignore a critical question: <strong>What happens when something goes wrong mid-workflow?</strong></p>\n\n<p>Consider a customer refund process:</p>\n\n<ol>\n<li>Process refund via payment gateway → succeeds</li>\n<li>Send confirmation email → fails</li>\n</ol>\n\n<p>Your customer now has money refunded but no notification. Your support team has no record of what happened. Your compliance team can't audit the decision.</p>\n\n<p><strong>This is the production reality that demos skip over.</strong></p>\n\n<p>Today I'm showing you how to build a customer refund agent that handles these failure modes correctly using <a href=\"https://github.com/hadywalied/agenthelm\" rel=\"noopener noreferrer\">AgentHelm</a> an open-source framework I built for production-ready agent orchestration.</p>\n\n<h2>\n  \n  \n  What Makes a Refund Agent \"Production-Ready\"?\n</h2>\n\n<p>A toy demo refund agent calls a few tools and returns a result. A production refund agent needs:</p>\n\n<ol>\n<li>\n<strong>Transactional safety</strong>: If step 3 fails, steps 1 and 2 are automatically undone</li>\n<li>\n<strong>Human approval</strong>: High-value refunds require manager sign-off</li>\n<li>\n<strong>Audit trails</strong>: Every decision is logged for compliance</li>\n<li>\n<strong>Error recovery</strong>: Failures don't leave the system in an inconsistent state</li>\n</ol>\n\n<p>Most agent frameworks (LangChain, AutoGPT) handle the first part—calling tools. None of them handle the second part—making it safe for production.</p>\n\n<p>That's what AgentHelm solves.</p>\n\n<h2>\n  \n  \n  The Refund Workflow\n</h2>\n\n<p>Here's what our agent needs to do:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>1. Verify order is eligible for refund\n2. Check customer account status\n3. Validate refund amount (requires approval if &gt;$100)\n4. Process refund via payment gateway\n5. Send confirmation email\n6. Log audit record\n</code></pre>\n\n</div>\n\n\n\n<p><strong>The critical part:</strong> If step 5 (email) fails, we need to automatically undo step 4 (refund). We can't leave a customer refunded without notification.</p>\n\n<h2>\n  \n  \n  Building the Agent: Tool by Tool\n</h2>\n\n<h3>\n  \n  \n  Step 1: Define the Refund Tool with Rollback\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">agenthelm.orchestrator.core.tool</span> <span class=\"kn\">import</span> <span class=\"n\">tool</span>\n\n<span class=\"nd\">@tool</span><span class=\"p\">(</span><span class=\"n\">requires_approval</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">compensating_tool</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">reverse_refund_transaction</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">process_refund</span><span class=\"p\">(</span><span class=\"n\">order_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">customer_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">refund_amount</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">reason</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Process a refund for an order.\n    This is the main action that processes the payment refund.\n    Requires approval if the refund amount exceeds $100.\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Processing refund of $</span><span class=\"si\">{</span><span class=\"n\">refund_amount</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\"> for order </span><span class=\"si\">{</span><span class=\"n\">order_id</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Get order and customer details\n</span>    <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"n\">order_db</span><span class=\"p\">.</span><span class=\"nf\">get_order</span><span class=\"p\">(</span><span class=\"n\">order_id</span><span class=\"p\">)</span>\n    <span class=\"n\">customer</span> <span class=\"o\">=</span> <span class=\"n\">customer_db</span><span class=\"p\">.</span><span class=\"nf\">get_customer</span><span class=\"p\">(</span><span class=\"n\">customer_id</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">order</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">customer</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">error</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Invalid order or customer</span><span class=\"sh\">\"</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"c1\"># Process the refund through the payment processor\n</span>    <span class=\"n\">payment_result</span> <span class=\"o\">=</span> <span class=\"n\">payment_processor</span><span class=\"p\">.</span><span class=\"nf\">process_refund</span><span class=\"p\">(</span>\n        <span class=\"n\">order_id</span><span class=\"o\">=</span><span class=\"n\">order_id</span><span class=\"p\">,</span>\n        <span class=\"n\">amount</span><span class=\"o\">=</span><span class=\"n\">refund_amount</span><span class=\"p\">,</span>\n        <span class=\"n\">payment_method</span><span class=\"o\">=</span><span class=\"n\">order</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">payment_method</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">payment_result</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">]:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">error</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Payment processing failed: </span><span class=\"si\">{</span><span class=\"n\">payment_result</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">error</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Unknown error</span><span class=\"sh\">'</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"c1\"># Create refund record\n</span>    <span class=\"n\">refund_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">order_id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">order_id</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">customer_id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">customer_id</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">amount</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">refund_amount</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">reason</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">reason</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">payment_transaction</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">payment_result</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">status</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">completed</span><span class=\"sh\">\"</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">refund_id</span> <span class=\"o\">=</span> <span class=\"n\">refund_db</span><span class=\"p\">.</span><span class=\"nf\">create_refund</span><span class=\"p\">(</span><span class=\"n\">refund_data</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">refund_id</span><span class=\"p\">:</span>\n        <span class=\"c1\"># If refund record creation fails, we should reverse the payment transaction\n</span>        <span class=\"n\">payment_processor</span><span class=\"p\">.</span><span class=\"nf\">reverse_transaction</span><span class=\"p\">(</span><span class=\"n\">payment_result</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">transaction_id</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">error</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Failed to create refund record</span><span class=\"sh\">\"</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"c1\"># Update customer's refund history\n</span>    <span class=\"n\">customer</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">refund_history</span><span class=\"sh\">\"</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">({</span>\n        <span class=\"sh\">\"</span><span class=\"s\">order_id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">order_id</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">amount</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">refund_amount</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">date</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"nf\">now</span><span class=\"p\">().</span><span class=\"nf\">isoformat</span><span class=\"p\">(),</span>\n        <span class=\"sh\">\"</span><span class=\"s\">reason</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">reason</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">refund_id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">refund_id</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"n\">customer_db</span><span class=\"p\">.</span><span class=\"nf\">update_customer</span><span class=\"p\">(</span><span class=\"n\">customer_id</span><span class=\"p\">,</span> <span class=\"n\">customer</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Update order status\n</span>    <span class=\"n\">order</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">refund_status</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">refunded</span><span class=\"sh\">\"</span>\n    <span class=\"n\">order</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">refund_amount</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">refund_amount</span>\n    <span class=\"n\">order</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">refund_date</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"nf\">now</span><span class=\"p\">().</span><span class=\"nf\">isoformat</span><span class=\"p\">()</span>\n\n    <span class=\"n\">order_db</span><span class=\"p\">.</span><span class=\"nf\">update_order</span><span class=\"p\">(</span><span class=\"n\">order_id</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">refund_id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">refund_id</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">transaction_id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">payment_result</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">transaction_id</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n        <span class=\"sh\">\"</span><span class=\"s\">customer_email</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">customer</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">email</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n\n<span class=\"nd\">@tool</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">reverse_refund_transaction</span><span class=\"p\">(</span><span class=\"n\">transaction_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    Compensating action for process_refund.\n    Reverses a refund transaction if something goes wrong after the payment processing.\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Reversing refund transaction </span><span class=\"si\">{</span><span class=\"n\">transaction_id</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">payment_processor</span><span class=\"p\">.</span><span class=\"nf\">reverse_transaction</span><span class=\"p\">(</span><span class=\"n\">transaction_id</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">error</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Failed to reverse transaction</span><span class=\"sh\">\"</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">transaction_reversed</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">transaction_id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">transaction_id</span>\n    <span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Key features:</strong></p>\n\n<ul>\n<li>\n<code>requires_approval=True</code> → Agent pauses and asks for human confirmation</li>\n<li>\n<code>set_compensator()</code> → Automatic rollback if later steps fail</li>\n</ul>\n\n<h3>\n  \n  \n  Step 2: Add the Notification Tool (Also with Rollback)\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@tool</span><span class=\"p\">(</span><span class=\"n\">retries</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">compensating_tool</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">send_correction_email</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">send_refund_confirmation</span><span class=\"p\">(</span><span class=\"n\">customer_email</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">order_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">refund_amount</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">refund_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Send a confirmation email to the customer about their refund.</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Sending refund confirmation email to </span><span class=\"si\">{</span><span class=\"n\">customer_email</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">subject</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Your Refund for Order </span><span class=\"si\">{</span><span class=\"n\">order_id</span><span class=\"si\">}</span><span class=\"s\"> Has Been Processed</span><span class=\"sh\">\"</span>\n\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"\"\"</span><span class=\"s\">\nDear Customer,\n\nWe</span><span class=\"sh\">'</span><span class=\"s\">re writing to confirm that your refund for Order </span><span class=\"si\">{</span><span class=\"n\">order_id</span><span class=\"si\">}</span><span class=\"s\"> has been processed.\n\nRefund Details:\n- Refund ID: </span><span class=\"si\">{</span><span class=\"n\">refund_id</span><span class=\"si\">}</span><span class=\"s\">\n- Amount: $</span><span class=\"si\">{</span><span class=\"n\">refund_amount</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\">\n- Date: </span><span class=\"si\">{</span><span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"nf\">now</span><span class=\"p\">().</span><span class=\"nf\">strftime</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">%Y-%m-%d</span><span class=\"sh\">'</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\">\n\nThe refund has been issued to your original payment method. Please allow 3-5 business days for the funds to appear in your account.\n\nIf you have any questions about this refund, please contact our customer service team and reference your Refund ID.\n\nThank you for your business.\n\nBest regards,\nThe Customer Service Team\n</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"n\">email_result</span> <span class=\"o\">=</span> <span class=\"n\">email_service</span><span class=\"p\">.</span><span class=\"nf\">send_email</span><span class=\"p\">(</span><span class=\"n\">customer_email</span><span class=\"p\">,</span> <span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">email_result</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">error</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Failed to send confirmation email</span><span class=\"sh\">\"</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">email_sent</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">recipient</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">customer_email</span>\n    <span class=\"p\">}</span>\n\n<span class=\"nd\">@tool</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">send_correction_email</span><span class=\"p\">(</span><span class=\"n\">customer_email</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">order_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">\n    Compensating action for send_refund_confirmation.\n    Sends a correction email if the original confirmation had issues.\n    </span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Sending correction email to </span><span class=\"si\">{</span><span class=\"n\">customer_email</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">subject</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Important Update About Your Refund for Order </span><span class=\"si\">{</span><span class=\"n\">order_id</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"\"\"</span><span class=\"s\">\nDear Customer,\n\nWe</span><span class=\"sh\">'</span><span class=\"s\">re writing to inform you about an important update regarding your recent refund for Order </span><span class=\"si\">{</span><span class=\"n\">order_id</span><span class=\"si\">}</span><span class=\"s\">.\n\nThere was a technical issue with our refund processing system. Our team is working to resolve this issue as quickly as possible.\n\nPlease disregard any previous communication about this refund. We will send you a new confirmation once the refund has been properly processed.\n\nWe apologize for any inconvenience this may cause.\n\nIf you have any questions, please contact our customer service team.\n\nBest regards,\nThe Customer Service Team\n</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"n\">email_result</span> <span class=\"o\">=</span> <span class=\"n\">email_service</span><span class=\"p\">.</span><span class=\"nf\">send_email</span><span class=\"p\">(</span><span class=\"n\">customer_email</span><span class=\"p\">,</span> <span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">email_result</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">error</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Failed to send correction email</span><span class=\"sh\">\"</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">email_sent</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">recipient</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">customer_email</span>\n    <span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Key features:</strong></p>\n\n<ul>\n<li>\n<code>retries=2</code> → Automatically retry if email service has transient failure</li>\n<li>Compensator sends a \"we had an issue\" email if rollback happens</li>\n</ul>\n\n<h3>\n  \n  \n  Step 3: Add Supporting Tools\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@tool</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">verify_order_status</span><span class=\"p\">(</span><span class=\"n\">order_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Verify that an order exists and is eligible for refund.</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"n\">order_db</span><span class=\"p\">.</span><span class=\"nf\">get_order</span><span class=\"p\">(</span><span class=\"n\">order_id</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">order</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">error</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Order </span><span class=\"si\">{</span><span class=\"n\">order_id</span><span class=\"si\">}</span><span class=\"s\"> not found</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">order</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">status</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">delivered</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">shipped</span><span class=\"sh\">\"</span><span class=\"p\">]:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">,</span> \n            <span class=\"sh\">\"</span><span class=\"s\">error</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Order </span><span class=\"si\">{</span><span class=\"n\">order_id</span><span class=\"si\">}</span><span class=\"s\"> has status </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">order</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">status</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"s\"> which is not eligible for refund</span><span class=\"sh\">\"</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">order_details</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">order</span><span class=\"p\">}</span>\n\n<span class=\"nd\">@tool</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">verify_customer_eligibility</span><span class=\"p\">(</span><span class=\"n\">customer_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Verify that a customer is eligible for refunds.</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">customer</span> <span class=\"o\">=</span> <span class=\"n\">customer_db</span><span class=\"p\">.</span><span class=\"nf\">get_customer</span><span class=\"p\">(</span><span class=\"n\">customer_id</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">customer</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">error</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Customer </span><span class=\"si\">{</span><span class=\"n\">customer_id</span><span class=\"si\">}</span><span class=\"s\"> not found</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">customer</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">account_status</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"sh\">\"</span><span class=\"s\">active</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">error</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Customer </span><span class=\"si\">{</span><span class=\"n\">customer_id</span><span class=\"si\">}</span><span class=\"s\"> has account status </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">customer</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">account_status</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"s\"> which is not eligible for refund</span><span class=\"sh\">\"</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">customer_details</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">customer</span><span class=\"p\">}</span>\n\n<span class=\"nd\">@tool</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">validate_refund_amount</span><span class=\"p\">(</span><span class=\"n\">order_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">refund_amount</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Validate that the refund amount is valid for the given order.</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"n\">order_db</span><span class=\"p\">.</span><span class=\"nf\">get_order</span><span class=\"p\">(</span><span class=\"n\">order_id</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">order</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">error</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Order </span><span class=\"si\">{</span><span class=\"n\">order_id</span><span class=\"si\">}</span><span class=\"s\"> not found</span><span class=\"sh\">\"</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">refund_amount</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">error</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Refund amount must be greater than zero</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">refund_amount</span> <span class=\"o\">&gt;</span> <span class=\"n\">order</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">total_amount</span><span class=\"sh\">\"</span><span class=\"p\">]:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">error</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Refund amount $</span><span class=\"si\">{</span><span class=\"n\">refund_amount</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\"> exceeds order total $</span><span class=\"si\">{</span><span class=\"n\">order</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">total_amount</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">valid_amount</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">requires_approval</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">refund_amount</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">order_total</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">order</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">total_amount</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n\n<span class=\"nd\">@tool</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">log_audit_record</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">details</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Log action for compliance.</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">audit_record</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">timestamp</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"nf\">now</span><span class=\"p\">().</span><span class=\"nf\">isoformat</span><span class=\"p\">(),</span>\n        <span class=\"sh\">\"</span><span class=\"s\">action</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">action</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">details</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">details</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\"># For simulation, we read the list, append, and write back.\n</span>    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">audit_log.json</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">r</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"nb\">FileNotFoundError</span><span class=\"p\">:</span>\n        <span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"n\">log</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">audit_record</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">audit_log.json</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">w</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dump</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">logged</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">action</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">action</span><span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Step 4: Create the Agent\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">agenthelm.orchestrator.core.storage</span> <span class=\"kn\">import</span> <span class=\"n\">FileStorage</span>\n<span class=\"kn\">from</span> <span class=\"n\">agenthelm.orchestrator.core.tracer</span> <span class=\"kn\">import</span> <span class=\"n\">ExecutionTracer</span>\n<span class=\"kn\">from</span> <span class=\"n\">agenthelm.orchestrator.agent</span> <span class=\"kn\">import</span> <span class=\"n\">Agent</span>\n<span class=\"kn\">from</span> <span class=\"n\">agenthelm.orchestrator.llm.mistral_client</span> <span class=\"kn\">import</span> <span class=\"n\">MistralClient</span>\n<span class=\"kn\">from</span> <span class=\"n\">agenthelm.orchestrator.core.handlers</span> <span class=\"kn\">import</span> <span class=\"n\">ApprovalHandler</span>\n<span class=\"c1\"># Setup storage and tracer\n</span><span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"nc\">FileStorage</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">refund_agent_trace.json</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">tracer</span> <span class=\"o\">=</span> <span class=\"nc\">ExecutionTracer</span><span class=\"p\">(</span><span class=\"n\">storage</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get API key from environment variable\n</span><span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">MISTRAL_API_KEY</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">api_key</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"nc\">ValueError</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">MISTRAL_API_KEY environment variable not set.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Initialize LLM client\n</span><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"nc\">MistralClient</span><span class=\"p\">(</span><span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">mistral-small-latest</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">api_key</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Define the list of tools for the agent\n</span><span class=\"n\">agent_tools</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">verify_order_status</span><span class=\"p\">,</span>\n        <span class=\"n\">verify_customer_eligibility</span><span class=\"p\">,</span>\n        <span class=\"n\">validate_refund_amount</span><span class=\"p\">,</span>\n        <span class=\"n\">process_refund</span><span class=\"p\">,</span>\n        <span class=\"n\">send_refund_confirmation</span><span class=\"p\">,</span>\n        <span class=\"n\">reverse_refund_transaction</span><span class=\"p\">,</span>\n        <span class=\"n\">send_correction_email</span><span class=\"p\">,</span>\n        <span class=\"n\">log_audit_record</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># Set up approval handler for tools that require approval\n</span><span class=\"n\">approval_handler</span> <span class=\"o\">=</span> <span class=\"nc\">EmailApprovalHandler</span><span class=\"p\">()</span>\n<span class=\"n\">tracer</span><span class=\"p\">.</span><span class=\"n\">approval_handler</span> <span class=\"o\">=</span> <span class=\"n\">approval_handler</span>\n\n<span class=\"c1\"># Instantiate the Agent\n</span><span class=\"n\">agent</span> <span class=\"o\">=</span> <span class=\"nc\">Agent</span><span class=\"p\">(</span><span class=\"n\">tools</span><span class=\"o\">=</span><span class=\"n\">agent_tools</span><span class=\"p\">,</span> <span class=\"n\">tracer</span><span class=\"o\">=</span><span class=\"n\">tracer</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"o\">=</span><span class=\"n\">client</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Step 5: Run It\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span>\n    <span class=\"sh\">\"</span><span class=\"s\">Process a $450 refund for order ORD-1001, customer CUST-001. </span><span class=\"sh\">\"</span>\n    <span class=\"sh\">\"</span><span class=\"s\">Reason: product not as described. Customer email: customer@example.com</span><span class=\"sh\">\"</span>\n<span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  How the Agent Thinks: The ReAct Framework\n</h3>\n\n<p>Running the agent is simple, but how does it decide what to do? It uses a reasoning process called <strong>ReAct</strong> (for <strong>Re</strong>ason and <strong>Act</strong>).     </p>\n\n<p>At each step, the agent doesn't just blindly pick a tool. Instead, it follows a think-act loop:                                                </p>\n\n<ol>\n<li> <strong>Reason:</strong> The LLM first thinks about the overall goal, what it has done so far, and what the next logical step should be. It generates short, internal monologue explaining its reasoning.\n</li>\n<li> <strong>Act:</strong> Based on its reasoning, it chooses a tool and executes it.\n</li>\n</ol>\n\n<p>This reasoning is not hidden. AgentHelm captures it in the trace file, giving you an incredible tool for debugging and understanding the agent's behavior.                                                                                                                              </p>\n\n<p>For example, here is the agent's first thought when given the refund task:                                                                     </p>\n\n<blockquote>\n<p><strong>Agent's Thought:</strong> To process a refund, we first need to verify the customer's eligibility. This is a prerequisite step before processing the refund.                                                                                                                                    </p>\n</blockquote>\n\n<p>Based on this thought, it correctly chooses the <code>verify_customer_eligibility</code> tool. After that tool succeeds, the agent thinks again:          </p>\n\n<blockquote>\n<p><strong>Agent's Thought:</strong> The customer eligibility has been verified. The next step is to verify the order status to ensure that the order is eligible for a refund.<br>\nAnd so it calls <code>verify_order_status</code>. This step-by-step reasoning makes the agent's behavior predictable and auditable.                  </p>\n</blockquote>\n\n<h2>\n  \n  \n  What Happens: Three Scenarios\n</h2>\n\n<h3>\n  \n  \n  Scenario 1: Happy Path (Everything Works)\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Verifying order ORD-1001 status... ✓\nChecking customer eligibility... ✓\nValidating refund amount $450... ✓\n\nApproval Required for Tool: process_refund\n   Order ID: ORD-1001\n   Amount: $450.00\n   Reason: product not as described\n\n   Do you approve this action? [y/N]: y\n\nProcessing $450 refund for order ORD-1001... ✓\nSending confirmation to customer@example.com... ✓\nAUDIT: refund_completed\n\nRefund processed successfully\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Key point:</strong> The agent paused and asked for approval because the amount was &gt;$100.</p>\n\n<h3>\n  \n  \n  Scenario 2: Email Fails → Automatic Rollback\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Verifying order ORD-1001 status... ✓\nChecking customer eligibility... ✓\nValidating refund amount $450... ✓\n\nApproval Required for Tool: process_refund\nDo you approve this action? [y/N]: y\n\nProcessing $450 refund for order ORD-1001... ✓\nTransaction ID: TXN-12345\n\nSending confirmation to customer@example.com... ✗ FAILED\nError: Email service unavailable\n\nWorkflow failed at step: send_refund_confirmation\nTriggering compensating actions...\n\nCalling reverse_refund_transaction(transaction_id='TXN-12345')\nTransaction TXN-12345 reversed\n\nCalling send_correction_email(customer_email='customer@example.com')\nCorrection notice sent\n\nRefund reversed due to email delivery failure\n</code></pre>\n\n</div>\n\n\n\n<p><strong>This is the killer feature.</strong> The refund was processed, then automatically reversed when the email failed. The system is never in an inconsistent state.</p>\n\n<h3>\n  \n  \n  Scenario 3: Approval Denied\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Approval Required for Tool: process_refund\nOrder ID: ORD-1001\nAmount: $450.00\n\nDo you approve this action? [y/N]: n\n\nApproval denied by user\nWorkflow terminated\n</code></pre>\n\n</div>\n\n\n\n<p><strong>The refund never happened.</strong> Human oversight prevented the transaction.</p>\n\n<h2>\n  \n  \n  The Audit Trail\n</h2>\n\n<p>Every action is automatically logged. Here's what the trace file looks like:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight json\"><code><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"tool_name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"verify_order_status\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"timestamp\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"2025-10-28T10:15:30Z\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"inputs\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nl\">\"order_id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ORD-1001\"</span><span class=\"p\">},</span><span class=\"w\">\n      </span><span class=\"nl\">\"outputs\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nl\">\"result\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nl\">\"success\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nl\">\"order_details\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{}}},</span><span class=\"w\">\n      </span><span class=\"nl\">\"execution_time\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.045</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"error_state\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"w\">\n    </span><span class=\"p\">},</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"tool_name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"process_refund\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"timestamp\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"2025-10-28T10:16:12Z\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"inputs\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"order_id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ORD-1001\"</span><span class=\"p\">,</span><span class=\"w\"> \n        </span><span class=\"nl\">\"refund_amount\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">450.0</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"reason\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"product not as described\"</span><span class=\"w\">\n      </span><span class=\"p\">},</span><span class=\"w\">\n      </span><span class=\"nl\">\"outputs\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"result\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n            </span><span class=\"nl\">\"refund_id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"REF-1001\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"transaction_id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"TXN-12345\"</span><span class=\"w\">\n        </span><span class=\"p\">}</span><span class=\"w\">\n      </span><span class=\"p\">},</span><span class=\"w\">\n      </span><span class=\"nl\">\"execution_time\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.230</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"error_state\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"w\">\n    </span><span class=\"p\">},</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"tool_name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"reverse_refund_transaction\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"timestamp\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"2025-10-28T10:16:45Z\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"inputs\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nl\">\"transaction_id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"TXN-12345\"</span><span class=\"p\">},</span><span class=\"w\">\n      </span><span class=\"nl\">\"outputs\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nl\">\"result\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nl\">\"status\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"reversed\"</span><span class=\"p\">}},</span><span class=\"w\">\n      </span><span class=\"nl\">\"execution_time\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.180</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"error_state\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Compensating action for failed step: send_refund_confirmation\"</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">]</span><span class=\"w\">\n</span></code></pre>\n\n</div>\n\n\n\n<p><strong>For compliance teams, this is gold.</strong> You can prove:</p>\n\n<ul>\n<li>Who approved what</li>\n<li>When each action occurred</li>\n<li>Why rollbacks happened</li>\n<li>Exact inputs/outputs for every step</li>\n</ul>\n\n<h2>\n  \n  \n  Lessons Learned Building This\n</h2>\n\n<h3>\n  \n  \n  1. Test Rollbacks in Development\n</h3>\n\n<p>Don't wait until production to find out your compensating actions don't work.</p>\n\n<p><strong>Solution:</strong> Add a flag to simulate failures:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@tool</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">send_refund_confirmation</span><span class=\"p\">(</span><span class=\"n\">customer_email</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">simulate_failure</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"bp\">False</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">simulate_failure</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">Exception</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Simulated failure for testing</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Normal logic\n</span></code></pre>\n\n</div>\n\n\n\n<p>Run your workflows with <code>simulate_failure=True</code> during development.</p>\n\n<h3>\n  \n  \n  2. Separate Validation from Action\n</h3>\n\n<p>My first <code>process_refund</code> tool both validated the amount and processed it. This made approvals tricky.</p>\n\n<p><strong>Solution:</strong> A dedicated <code>validate_refund_amount</code> tool checks the business rules (e.g., amount &lt; order total, amount &gt; $100 requires approval). The <code>process_refund</code> tool, which requires approval, can then focus only on the transaction. The agent uses the output of the validation to know when to proceed.</p>\n\n<h3>\n  \n  \n  3. Atomic Tools Are Easier to Debug\n</h3>\n\n<p>My first version had a single <code>process_refund_workflow</code> tool that did everything. When it failed, I couldn't tell which step broke.</p>\n\n<p><strong>Solution:</strong> Each tool does ONE thing. Easier to test, debug, and reuse.</p>\n\n<h3>\n  \n  \n  4. Retries Save You From Flaky APIs\n</h3>\n\n<p>Email services, payment gateways, and external APIs fail randomly. <code>retries=2</code> saved me countless debugging sessions.</p>\n\n<h3>\n  \n  \n  5. The Trace File is Your Best Friend\n</h3>\n\n<p>When something goes wrong in production, the trace file tells you EXACTLY what happened. Invest time making it readable and queryable.</p>\n\n<h2>\n  \n  \n  Why This Matters\n</h2>\n\n<p><strong>Most companies won't deploy AI agents because they can't trust them.</strong></p>\n\n<p>They've seen demos. They know agents CAN work. But they don't know:</p>\n\n<ul>\n<li>What happens when the agent makes a mistake</li>\n<li>How to audit agent decisions for compliance</li>\n<li>How to prevent catastrophic failures</li>\n</ul>\n\n<p>AgentHelm solves these problems by bringing distributed systems reliability patterns to AI agents:</p>\n\n<ul>\n<li>\n<strong>Transactional semantics</strong> (like databases)</li>\n<li>\n<strong>Structured observability</strong> (like OpenTelemetry)</li>\n<li>\n<strong>Policy enforcement</strong> (like API gateways)</li>\n</ul>\n\n<p>This isn't new technology. It's applying 20 years of production systems engineering to agents.</p>\n\n<h2>\n  \n  \n  Try It Yourself\n</h2>\n\n<p>The full code for this refund agent is on GitHub:</p>\n\n<ul>\n<li>\n<strong>Repo:</strong> <a href=\"https://github.com/hadywalied/agenthelm\" rel=\"noopener noreferrer\">https://github.com/hadywalied/agenthelm</a>\n</li>\n<li>\n<strong>Example:</strong> <a href=\"https://github.com/hadywalied/agenthelm/blob/main/examples/customer_refund_agent/refund_agent.py\" rel=\"noopener noreferrer\">https://github.com/hadywalied/agenthelm/blob/main/examples/customer_refund_agent/refund_agent.py</a>\n</li>\n<li>\n<strong>Docs:</strong> <a href=\"https://hadywalied.github.io/agenthelm/\" rel=\"noopener noreferrer\">https://hadywalied.github.io/agenthelm/</a>\n</li>\n</ul>\n\n<p>Install it:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>pip <span class=\"nb\">install </span>agenthelm\n</code></pre>\n\n</div>\n\n\n\n<p>Run the example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nb\">export </span><span class=\"nv\">MISTRAL_API_KEY</span><span class=\"o\">=</span><span class=\"s1\">'your_key_here'</span>\n<span class=\"nb\">cd </span>examples/refund_agent\npython refund_agent.py\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<p><strong>If you're deploying agents in production, I'd love your feedback.</strong> What's the biggest blocker you're facing: observability, safety, or reliability?</p>\n\n<p>Open an issue on GitHub or comment below. Let's build reliable AI together.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How I Crushed Advent of Code And Solved Hard Problems Using Autogen Jupyter Executor and Qwen3","url":"https://dev.to/qtalen/how-i-crushed-advent-of-code-and-solved-hard-problems-using-autogen-jupyter-executor-and-qwen3-14gp","date":1761528019,"author":"Peng Qian","guid":315578,"unread":true,"content":"<p>In today’s tutorial, I will use Autogen’s <code>docker-jupyter-executor</code> runtime with Qwen3’s newest <code>max</code> model to try finishing the Advent of Code challenge quickly. I aim to demonstrate that combining LLM code generation with a stateful Python runtime can effectively solve extremely complex algorithmic problems.</p>\n\n<p>As usual, I will share the full project source code for you to check. You can find it in the reference section.</p>\n\n\n\n\n<h2>\n  \n  \n  Course Background\n</h2>\n\n<p>You have probably heard of <a href=\"https://adventofcode.com/?ref=dataleadsfuture.com\" rel=\"noopener noreferrer\">Advent of Code (AOC)</a>. It is a fun programming challenge that claims to help beginners practice a programming language. The puzzles are really hard. Every year, I struggle and only finish the first few days.</p>\n\n<p>I was not happy about that.</p>\n\n<p>This year, there is still one month before the Advent of Code starts, but I have done all the prep work. New monitor, new IDE, new keyboard, and a new agent tool.</p>\n\n<p>Yes, I do not plan to use my brain to solve the problems this year. Like AlphaGo, I want to build an agent. I will let AI read the puzzle, write the code, and get the result all by itself. My job will be making coffee and sitting at my desk waiting.</p>\n\n<p>It worked. I tested with past challenges and started getting stars faster than I had time to read the problems. My cost was only some tokens.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fy7h7v1uuyj1cvy71eblp.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fy7h7v1uuyj1cvy71eblp.png\" alt=\"My agent scored 47 stars in the 2024 Advent of Code challenge. Image by Author\" width=\"800\" height=\"512\"></a></p>\n\n<p>I even allow users to enter Part Two of an AoC problem through multi-turn conversation, so the agent can keep solving.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fe9dzp6vyke41v42thnqd.gif\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fe9dzp6vyke41v42thnqd.gif\" alt=\"The agent supports continuous problem-solving through multi-turn conversation. Image by Author\" width=\"720\" height=\"627\"></a></p>\n\n<p>And it is not just for Advent of Code. This agent can also run data analysis or other tasks you can imagine.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fgz2psdxvggpfh7qf3n1p.gif\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fgz2psdxvggpfh7qf3n1p.gif\" alt=\"I used this agent for abnormal transaction detection. Image by Author\" width=\"760\" height=\"662\"></a></p>\n\n<h3>\n  \n  \n  How did this all happen\n</h3>\n\n<p>In today’s tutorial, you will see:</p>\n\n<ul>\n<li>I will follow the ReAct pattern to build a single-agent app that solves complex challenges by planning sub-steps one at a time.</li>\n<li>Each sub-step depends on the main task and previous results, so the LLM can adjust mistakes anytime.</li>\n<li>Each sub-step uses Python code to solve the puzzle and uses Jupyter as the runtime to get intermediate results.</li>\n<li>The agent relies on the stateful Jupyter kernel, so it can reflect on previous results and adjust the next steps until it finds the final answer. The effect is amazing.</li>\n</ul>\n\n<h3>\n  \n  \n  Why this works well\n</h3>\n\n<p>In my last post, we tried building a multi-agent system for math problems. You can read it here:</p>\n\n<p><a href=\"https://www.dataleadsfuture.com/i-used-autogen-graphflow-and-qwen3-coder-to-solve-math-problems-and-it-worked/\" rel=\"noopener noreferrer\">I Used Autogen GraphFlow and Qwen3 Coder to Solve Math Problems — And It Worked</a></p>\n\n<p>That system worked well, but not perfectly. It worked by letting a reasoning agent plan all steps at once and then sending them to a coding agent to write Python code.</p>\n\n<p>This caused problems.</p>\n\n<p>For exploratory tasks like reading a file and then deciding what to do based on its content, the system could not handle it.</p>\n\n<p>If the code failed during execution, the whole Python file had to be regenerated to find the error and adjust it. This was not flexible.</p>\n\n<p>Think about how humans handle challenging tasks like data analysis or ML modeling. We write some code, run it, see if the result matches expectations, then decide what to write next. That is why Jupyter is so popular in data science.</p>\n\n<p>So why not use Jupyter as the Python runtime? Of course, we can. That is what we will do today. We will generate a small bit of code each time we run it, then move forward until we reach the goal.</p>\n\n\n\n\n<h2>\n  \n  \n  Preparation\n</h2>\n\n<h3>\n  \n  \n  Build a Jupyter container\n</h3>\n\n<p>Since we will use Jupyter as the runtime, we need to set it up before the course starts.</p>\n\n<p>I will use a Docker container to isolate Jupyter so that bad LLM code will not break the system.</p>\n\n<p><code>Dockerfile</code> looks like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>FROM python:3.13-slim-bookworm\n\nWORKDIR /app\n\nCOPY requirements.txt /app/requirements.txt\n\nRUN pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/ &amp;&amp; \\\n    pip install --no-cache-dir jupyter_kernel_gateway ipykernel numpy pandas sympy scipy --upgrade\n\nRUN pip install --no-cache-dir -r requirements.txt --upgrade\n\nEXPOSE 8888\n\nENV TOKEN=\"UNSET\"\nCMD python -m jupyter kernelgateway \\\n    --KernelGatewayApp.ip=0.0.0.0 \\\n    --KernelGatewayApp.port=8888 \\\n    --KernelGatewayApp.auth_token=\"${TOKEN}\" \\\n    --JupyterApp.answer_yes=true\n</code></pre>\n\n</div>\n\n\n\n<p><code>requirements.txt</code> looks like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>matplotlib\nxlrd\nopenpyxl\npdfplumber\nreportlab\n</code></pre>\n\n</div>\n\n\n\n<p>I install rarely changed dependencies and often changed dependencies separately to use Docker layer cache for faster builds.</p>\n\n<p>Autogen uses Docker SDK to control the start and stop of the container, so I did not set up Jupyter auth. This makes the runtime call easier, but it is not safe for production.</p>\n\n<p>Then we build the image and name it <code>jupyter-server</code> for later.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>docker build <span class=\"nt\">-t</span> jupyter-server <span class=\"nb\">.</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Test connectivity with Autogen\n</h3>\n\n<p>After building the image, we need to test with Autogen to see if running code in Jupyter works. We must install <code>autogen-ext[docker-jupyter-executor]</code> and <code>nbclient</code>.</p>\n\n<p>Do not worry. I already added these to <code>pyproject.toml</code> So you just run <code>pip install --upgrade -e .</code>.</p>\n\n<p>Before starting, we need to initialize a <code>DockerJupyterServer</code> module. This uses Docker SDK to start a container from the Jupyter image. We will use this today.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">jupyter_server</span> <span class=\"o\">=</span> <span class=\"nc\">DockerJupyterServer</span><span class=\"p\">(</span>\n    <span class=\"n\">custom_image_name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">jupyter-server:latest</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">expose_port</span><span class=\"o\">=</span><span class=\"mi\">8888</span>\n<span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>There are three ways to use Jupyter runtime.</p>\n\n<p>First, extract the Python code generated by the LLM, run it manually through the Jupyter executor, and get the result.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main_1</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">jupyter_server</span><span class=\"p\">:</span>\n        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"nc\">DockerJupyterCodeExecutor</span><span class=\"p\">(</span><span class=\"n\">jupyter_server</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">executor</span><span class=\"p\">:</span>\n            <span class=\"n\">code_blocks</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nc\">CodeBlock</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">print(</span><span class=\"sh\">'</span><span class=\"s\">hello world!</span><span class=\"sh\">'</span><span class=\"s\">)</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">language</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">python</span><span class=\"sh\">\"</span><span class=\"p\">)]</span>\n            <span class=\"n\">code_result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">executor</span><span class=\"p\">.</span><span class=\"nf\">execute_code_blocks</span><span class=\"p\">(</span><span class=\"n\">code_blocks</span><span class=\"p\">,</span> <span class=\"n\">cancellation_token</span><span class=\"o\">=</span><span class=\"nc\">CancellationToken</span><span class=\"p\">())</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">code_result</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Note that <code>DockerJupyterCodeExecutor</code> is stateful, so in an <code>async with</code> scope repeated calls reuse previous variables without regenerating them.</p>\n\n<p>Second use <code>PythonCodeExecutionTool</code> to execute code and return results.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main_2</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">jupyter_server</span><span class=\"p\">:</span>\n        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"nc\">DockerJupyterCodeExecutor</span><span class=\"p\">(</span><span class=\"n\">jupyter_server</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">executor</span><span class=\"p\">:</span>\n            <span class=\"n\">tool</span> <span class=\"o\">=</span> <span class=\"nc\">PythonCodeExecutionTool</span><span class=\"p\">(</span><span class=\"n\">executor</span><span class=\"p\">)</span>\n            <span class=\"n\">agent</span> <span class=\"o\">=</span> <span class=\"nc\">AssistantAgent</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">assistant</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">model_client</span><span class=\"o\">=</span><span class=\"n\">model_client</span><span class=\"p\">,</span> <span class=\"n\">tools</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">tool</span><span class=\"p\">])</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">What is the 10th Fibonacci number? Use Python to calculate it.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">messages</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">content</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This uses the agent’s function call ability. If your agent needs to do many jobs and code execution is just one part, use this.</p>\n\n<p>Third use <code>CodeExecutorAgent</code> to execute code.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main_3</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">jupyter_server</span><span class=\"p\">:</span>\n        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"nc\">DockerJupyterCodeExecutor</span><span class=\"p\">(</span><span class=\"n\">jupyter_server</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">executor</span><span class=\"p\">:</span>\n            <span class=\"n\">code_executor_agent</span> <span class=\"o\">=</span> <span class=\"nc\">CodeExecutorAgent</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">code_executor</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">code_executor</span><span class=\"o\">=</span><span class=\"n\">executor</span><span class=\"p\">)</span>\n            <span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"nc\">TextMessage</span><span class=\"p\">(</span>\n                <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"sh\">\"\"\"</span><span class=\"s\">\n                ```\n\npython\n                a = 3\n\n\n                ```\n                </span><span class=\"sh\">\"\"\"</span><span class=\"p\">,</span>\n                <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">code_executor_agent</span><span class=\"p\">.</span><span class=\"nf\">on_messages</span><span class=\"p\">([</span><span class=\"n\">task</span><span class=\"p\">],</span> <span class=\"nc\">CancellationToken</span><span class=\"p\">())</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">chat_message</span><span class=\"p\">)</span>\n\n            <span class=\"n\">task_2</span> <span class=\"o\">=</span> <span class=\"nc\">TextMessage</span><span class=\"p\">(</span>\n                <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"sh\">\"\"\"</span><span class=\"s\">\n                ```\n\npython\n                print(a)\n\n\n                ```\n                </span><span class=\"sh\">\"\"\"</span><span class=\"p\">,</span>\n                <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">response_2</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">code_executor_agent</span><span class=\"p\">.</span><span class=\"nf\">on_messages</span><span class=\"p\">([</span><span class=\"n\">task_2</span><span class=\"p\">],</span> <span class=\"nc\">CancellationToken</span><span class=\"p\">())</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">response_2</span><span class=\"p\">.</span><span class=\"n\">chat_message</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>In a multi-agent system, if you want a dedicated agent for code execution and reflection, this is good.</p>\n\n<p>For example, in my last tutorial I used <code>CodeExecutorAgent</code> in an <code>Autogen GraphFlow</code> to handle code execution.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8bxneezzp3yhsyes11q1.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8bxneezzp3yhsyes11q1.png\" alt=\"Multi-agent system for generating code and getting results built with Autogen GraphFlow. Image by Author\" width=\"800\" height=\"110\"></a></p>\n\n\n\n\n<h2>\n  \n  \n  Let’s Start\n</h2>\n\n<p>With the Jupyter runtime ready, we can look at today’s project.</p>\n\n<h3>\n  \n  \n  Architecture design\n</h3>\n\n<p>Advent of Code is hard. No LLM can plan the whole logic up front. So we will plan one step, run the code, see the result, then plan the next.</p>\n\n<p>So the loop becomes think, act, observe, think again.</p>\n\n<p>Sounds familiar. Yes, this is the famous ReAct agent design.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fz28uestdyngujtq7dwh3.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fz28uestdyngujtq7dwh3.png\" alt=\"Diagram of a typical ReAct agent. Image by Author\" width=\"800\" height=\"307\"></a></p>\n\n<p>Since ReAct only needs one agent, we will build a single-agent app. The agent will use the user request and the previous result to plan the current step, then write a Python snippet to get the intermediate result.</p>\n\n<p>With a single agent app, it fits to use <code>PythonCodeExecutorTool</code> for running code.</p>\n\n<p>Unlike traditional generate and run code, here we plan one step and get only an intermediate result.</p>\n\n<p>In this case direct Python runtime does not work well. The best way is to send code to a Jupyter kernel, which saves variables and results.</p>\n\n<p>Our single-agent app architecture looks like this:</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fnwl02rvjtjxhw0u53i88.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fnwl02rvjtjxhw0u53i88.png\" alt=\"Architecture diagram of our single agent app. Image by Author\" width=\"800\" height=\"411\"></a></p>\n\n<h3>\n  \n  \n  Write agent code\n</h3>\n\n<p>With goals and design set, it is coding time.</p>\n\n<p>Using Docker means we need to manage context and container lifecycle. I do not want the caller to start or stop Docker each time. Code execution is the agent’s duty, not the caller’s.</p>\n\n<p>I also want to keep the <code>Autogen AssistantAgent</code> API so the agent stays general. So I will wrap its init and call it as a new Agent.</p>\n\n<p>The agent and Jupyter runtime must allow generated code to read files. So I will mount a folder in the Docker container and put user-uploaded files in it.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">AOCAssistant</span><span class=\"p\">:</span>\n    <span class=\"bp\">...</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_copy_file</span><span class=\"p\">(</span>\n        <span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"bp\">None</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"bp\">None</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">file_path</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">None</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">file_name</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">file_name</span> <span class=\"o\">=</span> <span class=\"nc\">Path</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">).</span><span class=\"n\">name</span>\n        <span class=\"n\">dst_path</span> <span class=\"o\">=</span> <span class=\"n\">BINDING_DIR</span> <span class=\"o\">/</span> <span class=\"n\">file_name</span>\n        <span class=\"n\">shutil</span><span class=\"p\">.</span><span class=\"nf\">copy2</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"n\">dst_path</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">file_name</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The Agent will manage <code>DockerJupyterServer</code> and <code>DockerJupyterCodeExecutor</code> lifecycle.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">AOCAssistant</span><span class=\"p\">:</span>\n    <span class=\"bp\">...</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_executor</span><span class=\"p\">.</span><span class=\"nf\">start</span><span class=\"p\">()</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">stop</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_model_client</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n        <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_executor</span><span class=\"p\">.</span><span class=\"nf\">stop</span><span class=\"p\">()</span>\n        <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_jupyter_server</span><span class=\"p\">.</span><span class=\"nf\">stop</span><span class=\"p\">()</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">__aenter__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"sh\">\"</span><span class=\"s\">AOCAssistant</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">start</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">__aexit__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">exc_type</span><span class=\"p\">,</span> <span class=\"n\">exc_val</span><span class=\"p\">,</span> <span class=\"n\">exc_tb</span><span class=\"p\">):</span>\n        <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">stop</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_init_jupyter_docker</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_jupyter_server</span> <span class=\"o\">=</span> <span class=\"nc\">DockerJupyterServer</span><span class=\"p\">(</span>\n            <span class=\"n\">custom_image_name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">jupyter-server:latest</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">expose_port</span><span class=\"o\">=</span><span class=\"mi\">8888</span><span class=\"p\">,</span>\n            <span class=\"n\">bind_dir</span><span class=\"o\">=</span><span class=\"n\">BINDING_DIR</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_executor</span> <span class=\"o\">=</span> <span class=\"nc\">DockerJupyterCodeExecutor</span><span class=\"p\">(</span>\n            <span class=\"n\">jupyter_server</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_jupyter_server</span><span class=\"p\">,</span>\n            <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">600</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>I implemented <code>__aenter__</code> and <code>__aexit__</code> , so you can manage resources with <code>async with</code>.</p>\n\n<p>Next, init LLM client and <code>AssistantAgent</code> , bind the <code>CodeExecutor</code> as a tool to the Agent.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">AOCAssistant</span><span class=\"p\">:</span>\n    <span class=\"bp\">...</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_init_assistant</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_model_client</span> <span class=\"o\">=</span> <span class=\"nc\">OpenAILikeChatCompletionClient</span><span class=\"p\">(</span>\n            <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_model_name</span><span class=\"p\">,</span>\n            <span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span>\n            <span class=\"n\">top_p</span><span class=\"o\">=</span><span class=\"mf\">0.85</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">tool</span> <span class=\"o\">=</span> <span class=\"nc\">PythonCodeExecutionTool</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_executor</span><span class=\"p\">)</span>\n\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_agent</span> <span class=\"o\">=</span> <span class=\"nc\">AssistantAgent</span><span class=\"p\">(</span>\n            <span class=\"sh\">'</span><span class=\"s\">assistant</span><span class=\"sh\">'</span><span class=\"p\">,</span>\n            <span class=\"n\">model_client</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_model_client</span><span class=\"p\">,</span>\n            <span class=\"n\">tools</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">tool</span><span class=\"p\">],</span>\n            <span class=\"n\">model_client_stream</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">system_message</span><span class=\"o\">=</span><span class=\"n\">SYS_PROMPT</span><span class=\"p\">,</span>\n            <span class=\"n\">max_tool_iterations</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>I used the newest <code>Qwen3-max</code> model. Open source <code>qwen3-next-80b-a3b-instruct</code> is also good. I set <code>temperature</code> to 0.5 for some creativity in final results and <code>top_p</code> to 0.85 for serious planning and coding.</p>\n\n<p>I need ReAct style iteration, so I set <code>max_tool_iterations</code> in <code>AssistantAgent</code>. In Autogen, this lets the agent iterate based on <code>tool_calls</code>. It stops when it hits the max.</p>\n\n<p>Finally, to keep our custom Agent API the same as <code>Autogen AssistantAgent</code> I implemented <code>run</code> and <code>run_stream</code>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">AOCAssistant</span><span class=\"p\">:</span>\n    <span class=\"bp\">...</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span>\n            <span class=\"n\">self</span><span class=\"p\">,</span>\n            <span class=\"o\">*</span><span class=\"p\">,</span>\n            <span class=\"n\">task</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">BaseChatMessage</span> <span class=\"o\">|</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">BaseChatMessage</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"bp\">None</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">cancellation_token</span><span class=\"p\">:</span> <span class=\"n\">CancellationToken</span> <span class=\"o\">|</span> <span class=\"bp\">None</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"bp\">None</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"bp\">None</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">TaskResult</span><span class=\"p\">:</span>\n        <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">message</span> <span class=\"ow\">in</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">run_stream</span><span class=\"p\">(</span>\n            <span class=\"n\">task</span><span class=\"o\">=</span><span class=\"n\">task</span><span class=\"p\">,</span>\n            <span class=\"n\">cancellation_token</span><span class=\"o\">=</span><span class=\"n\">cancellation_token</span><span class=\"p\">,</span>\n            <span class=\"n\">file_name</span><span class=\"o\">=</span><span class=\"n\">file_name</span><span class=\"p\">,</span>\n            <span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"n\">file_path</span><span class=\"p\">,</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"nf\">isinstance</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">TaskResult</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"n\">message</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">ValueError</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">No task result output.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_stream</span><span class=\"p\">(</span>\n            <span class=\"n\">self</span><span class=\"p\">,</span>\n            <span class=\"o\">*</span><span class=\"p\">,</span>\n            <span class=\"n\">task</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">BaseChatMessage</span> <span class=\"o\">|</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">BaseChatMessage</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"bp\">None</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">cancellation_token</span><span class=\"p\">:</span> <span class=\"n\">CancellationToken</span> <span class=\"o\">|</span> <span class=\"bp\">None</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"bp\">None</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"bp\">None</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">AsyncGenerator</span><span class=\"p\">[</span><span class=\"n\">BaseAgentEvent</span> <span class=\"o\">|</span> <span class=\"n\">BaseChatMessage</span> <span class=\"o\">|</span> <span class=\"n\">TaskResult</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">]:</span>\n        <span class=\"n\">file_name</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_copy_file</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">)</span>\n\n        <span class=\"n\">input_messages</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"nf\">isinstance</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">input_messages</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"nc\">TextMessage</span><span class=\"p\">(</span>\n                <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"n\">task</span>\n            <span class=\"p\">))</span>\n        <span class=\"k\">elif</span> <span class=\"nf\">isinstance</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">,</span> <span class=\"n\">BaseChatMessage</span><span class=\"p\">):</span>\n            <span class=\"n\">input_messages</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">file_name</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">input_messages</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"nc\">TextMessage</span><span class=\"p\">(</span>\n                <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">The input file is `</span><span class=\"si\">{</span><span class=\"n\">file_name</span><span class=\"si\">}</span><span class=\"s\">`</span><span class=\"sh\">\"</span>\n            <span class=\"p\">))</span>\n\n        <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">message</span> <span class=\"ow\">in</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_agent</span><span class=\"p\">.</span><span class=\"nf\">run_stream</span><span class=\"p\">(</span>\n                <span class=\"n\">task</span><span class=\"o\">=</span><span class=\"n\">input_messages</span><span class=\"p\">,</span>\n                <span class=\"n\">cancellation_token</span><span class=\"o\">=</span><span class=\"n\">cancellation_token</span><span class=\"p\">):</span>\n            <span class=\"k\">yield</span> <span class=\"n\">message</span>\n</code></pre>\n\n</div>\n\n\n\n<p><code>run</code> just calls <code>run_stream</code> and returns <code>TaskResult</code>.</p>\n\n<p><code>run_stream</code> copies user files to the mounted directory, rebuilds <code>input_messages</code> adds file info, then calls <code>AssistantAgent.run_stream</code> to get LLM streaming output.</p>\n\n<h3>\n  \n  \n  Write the prompt\n</h3>\n\n<p>This project needs the agent to plan sub-tasks step by step, write correct Python code, iterate based on results, and give a good final output. So the prompt will be detailed.</p>\n\n<p>I will give you the whole prompt and explain why it is written that way.</p>\n\n<p>I will also show you a trick to debug prompts better.</p>\n\n<p>Here is the prompt first:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">textwrap</span> <span class=\"kn\">import</span> <span class=\"n\">dedent</span>\n\n\n<span class=\"n\">SYS_PROMPT</span> <span class=\"o\">=</span> <span class=\"nf\">dedent</span><span class=\"p\">(</span><span class=\"sh\">\"\"\"</span><span class=\"s\">\n## Role\nYou are a university professor who is good at breaking down complex tasks into smaller parts that can be solved using Python code.\n\n## Task\n1. **Task Breakdown**: Break the user</span><span class=\"sh\">'</span><span class=\"s\">s request into several smaller steps, each suitable for solving with Python code.\n2. **Code Generation**: Turn the current step into Python code.\n3. **Code Execution**: Use tools to run the code and get the results.\n4. **Iterative Progress**: Decide the next step based on the previous result, and repeat the process until you get the final answer to the user</span><span class=\"sh\">'</span><span class=\"s\">s request.\n\n## Requirements\n- Plan and execute only one step at a time. Do not skip or combine steps.\n- Keep repeating the process until the task is fully completed.\n\n## Output\n- Explain your thinking for each step.\n- Keep the structure clear.\n- Use a relaxed but authoritative tone.\n- Use emojis appropriately to make things friendlier.\n- Provide the final result.\n- If the result is an expression, solve it as a floating-point number.\n- Do not say </span><span class=\"sh\">\"</span><span class=\"s\">Task completed.</span><span class=\"sh\">\"</span><span class=\"s\">\n\n## Code Guidelines\n- The code runs in a Jupyter environment, and you can reuse variables that have already been declared.\n- Write code in an incremental way and use the kernel</span><span class=\"sh\">'</span><span class=\"s\">s statefulness to avoid repeating code.\n\n## Python Package Management\n1. You can only use numpy, pandas, sympy, scipy, and numexpr.\n2. You are not allowed to install packages yourself using `pip install`.\n</span><span class=\"sh\">\"\"\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>I used markdown to organize the prompt.</p>\n\n<p><strong>Role</strong> and <strong>Output</strong> parts set the tone and format for the answer.</p>\n\n<p><strong>Task</strong> and <strong>Requirements</strong> tell the agent to plan only one step at a time in iterative style.</p>\n\n<p><strong>Code Guidelines</strong> and <strong>Python Package Management</strong> set rules for writing Python and what third party libraries are allowed.</p>\n\n<p>One handy prompt debug trick is to write a <code>main</code> method in <code>agents.py</code> that asks the agent to repeat the instructions in detail.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"nc\">AOCAssistant</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">agent</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"nc\">Console</span><span class=\"p\">(</span><span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"nf\">run_stream</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"o\">=</span><span class=\"nf\">dedent</span><span class=\"p\">(</span><span class=\"sh\">\"\"\"</span><span class=\"s\">\n        Please repeat my instructions in detail.\n                </span><span class=\"sh\">\"\"\"</span><span class=\"p\">)))</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Then the agent will output its understanding of your instructions.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Frr6jbeb3s1yfl9t2g37u.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Frr6jbeb3s1yfl9t2g37u.png\" alt=\"The agent returns its understanding of my instructions. Image by Author\" width=\"800\" height=\"654\"></a></p>\n\n<p>This helps find missing points and you can copy the agent’s version back into your prompt.</p>\n\n<h3>\n  \n  \n  Build the UI with chainlit\n</h3>\n\n<p>I want my agent to be easy to use with a UI. Chainlit is a fast way to make a prototype.</p>\n\n<p>I put chainlit code in <code>app.py</code>. During development, you can run <code>chainlit run app.py -w</code> for hot reload.</p>\n\n<p>I first define <code>on_chat_start</code> and <code>on_chat_end</code> to initialize our custom Agent and manage the Jupyter server lifecycle.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@cl.on_chat_start</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">on_chat_start</span><span class=\"p\">():</span>\n    <span class=\"n\">assistant</span> <span class=\"o\">=</span> <span class=\"nc\">AOCAssistant</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">assistant</span><span class=\"p\">.</span><span class=\"nf\">start</span><span class=\"p\">()</span>\n    <span class=\"n\">cl</span><span class=\"p\">.</span><span class=\"n\">user_session</span><span class=\"p\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">assistant</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">assistant</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@cl.on_chat_end</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">on_chat_end</span><span class=\"p\">():</span>\n    <span class=\"n\">assistant</span> <span class=\"o\">=</span> <span class=\"n\">cl</span><span class=\"p\">.</span><span class=\"n\">user_session</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">assistant</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">assistant</span><span class=\"p\">.</span><span class=\"nf\">stop</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>In <code>on_message</code> we get user files, then call the agent and filter the returned text to show in the UI.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@cl.on_message</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">cl</span><span class=\"p\">.</span><span class=\"n\">Message</span><span class=\"p\">):</span>\n    <span class=\"n\">input_msg</span> <span class=\"o\">=</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">content</span>\n    <span class=\"n\">file_path</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    <span class=\"n\">file_name</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    <span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">elements</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">file_path</span> <span class=\"o\">=</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">elements</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">path</span>\n        <span class=\"n\">file_name</span> <span class=\"o\">=</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">elements</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">name</span>\n    <span class=\"n\">assistant</span><span class=\"p\">:</span> <span class=\"n\">AOCAssistant</span> <span class=\"o\">=</span> <span class=\"n\">cl</span><span class=\"p\">.</span><span class=\"n\">user_session</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">assistant</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">output_msg</span> <span class=\"o\">=</span> <span class=\"n\">cl</span><span class=\"p\">.</span><span class=\"nc\">Message</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"o\">=</span><span class=\"sh\">''</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">event</span> <span class=\"ow\">in</span> <span class=\"n\">assistant</span><span class=\"p\">.</span><span class=\"nf\">run_stream</span><span class=\"p\">(</span>\n        <span class=\"n\">task</span><span class=\"o\">=</span><span class=\"n\">input_msg</span><span class=\"p\">,</span>\n        <span class=\"n\">file_name</span><span class=\"o\">=</span><span class=\"n\">file_name</span><span class=\"p\">,</span>\n        <span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"n\">file_path</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nf\">isinstance</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">ModelClientStreamingChunkEvent</span><span class=\"p\">):</span>\n            <span class=\"k\">await</span> <span class=\"n\">output_msg</span><span class=\"p\">.</span><span class=\"nf\">stream_token</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">output_msg</span><span class=\"p\">.</span><span class=\"nf\">update</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>And that is it. The agent app is done. It is simpler than it sounds. Agent app development is like this. Once you know what to do, coding is easy.</p>\n\n\n\n\n<h2>\n  \n  \n  After Class Practice\n</h2>\n\n<p>Today, our project starts a Jupyter container with Docker SDK through Autogen. This method is fine for local testing. In enterprise apps, the agent itself will be in a container, so starting Jupyter with Docker SDK becomes hard. You need another way.</p>\n\n<p>To keep the code simple, we built a single-agent app. This makes the agent’s job more complex, which goes against the idea that each agent should have only one atomic job. In later optimization, you should try splitting into a multi-agent app.</p>\n\n\n\n\n<h2>\n  \n  \n  Course Summary\n</h2>\n\n<p>Agent development tech will keep growing, and agents will handle more complex tasks. Code generation by agents for solving tasks will become more common.</p>\n\n<p>In today’s project, we followed ReAct agent design to build a single-agent app. It plans steps one by one and runs Python snippets in a stateful runtime container. This makes the agent smarter and more independent.</p>\n\n<p>I tested it with the 2024 Advent of Code challenge and got good results. The agent can also work in other complex scenarios.</p>\n\n<p>Thanks for reading today’s post. I am collecting ideas for agent development. If you have thoughts, share them in the comments. I will reply soon.</p>\n\n\n\n\n<p>Enjoyed this read? <a href=\"https://www.dataleadsfuture.com/#/portal/signup\" rel=\"noopener noreferrer\">Subscribe now to get more cutting-edge data science tips straight to your inbox!</a> Your feedback and questions are welcome — let’s discuss in the comments below!</p>\n\n<p>This article was originally published on <a href=\"https://www.dataleadsfuture.com/how-i-crushed-advent-of-code-and-solved-hard-problems-using-autogen-jupyter-executor-and-qwen3/\" rel=\"noopener noreferrer\">Data Leads Future</a>.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How to Build a Spam Detector with ML and Python","url":"https://dev.to/hew/how-to-build-a-spam-detector-with-ml-and-python-3b5p","date":1761526318,"author":"SHH","guid":315577,"unread":true,"content":"<p>All modern spam detection systems rely on machine learning. ML has proven to be superior at many classification tasks given sufficient training data.</p>\n\n<p>This tutorial shows you how to build a spam detector using supervised learning. More specifically, you will use Python to train a logistic regression model that classifies emails into spam and non-spam. </p>\n\n<h2>\n  \n  \n  Prerequisites\n</h2>\n\n<p>You will work with NumPy, SciPy, scikit-learn and Matplotlib:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import numpy as np\nimport scipy.io\nimport sklearn.metrics\nimport matplotlib.pyplot as plt\n</code></pre>\n\n</div>\n\n\n\n<p>Download the <a href=\"https://www.cs.ubc.ca/~murphyk/Teaching/Stat406-Spring10/spamData.mat\" rel=\"noopener noreferrer\">spam dataset</a> consisting of 4,601 emails. It is split 3:1 into a training and a test set. Each email is labeled as either 0 (non-spam) or 1 (spam) and comes with 57 features (3 length statistics on consecutive capitalised letters, frequency percentages of 48 words and 6 characters):<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>features = np.array(\n    [\n        \"word_freq_make\",\n        \"word_freq_address\",\n        \"word_freq_all\",\n        \"word_freq_3d\",\n        \"word_freq_our\",\n        \"word_freq_over\",\n        \"word_freq_remove\",\n        \"word_freq_internet\",\n        \"word_freq_order\",\n        \"word_freq_mail\",\n        \"word_freq_receive\",\n        \"word_freq_will\",\n        \"word_freq_people\",\n        \"word_freq_report\",\n        \"word_freq_addresses\",\n        \"word_freq_free\",\n        \"word_freq_business\",\n        \"word_freq_email\",\n        \"word_freq_you\",\n        \"word_freq_credit\",\n        \"word_freq_your\",\n        \"word_freq_font\",\n        \"word_freq_000\",\n        \"word_freq_money\",\n        \"word_freq_hp\",\n        \"word_freq_hpl\",\n        \"word_freq_george\",\n        \"word_freq_650\",\n        \"word_freq_lab\",\n        \"word_freq_labs\",\n        \"word_freq_telnet\",\n        \"word_freq_857\",\n        \"word_freq_data\",\n        \"word_freq_415\",\n        \"word_freq_85\",\n        \"word_freq_technology\",\n        \"word_freq_1999\",\n        \"word_freq_parts\",\n        \"word_freq_pm\",\n        \"word_freq_direct\",\n        \"word_freq_cs\",\n        \"word_freq_meeting\",\n        \"word_freq_original\",\n        \"word_freq_project\",\n        \"word_freq_re\",\n        \"word_freq_edu\",\n        \"word_freq_table\",\n        \"word_freq_conference\",\n        \"char_freq_;\",\n        \"char_freq_(\",\n        \"char_freq_[\",\n        \"char_freq_!\",\n        \"char_freq_$\",\n        \"char_freq_#\",\n        \"capital_run_length_average\",\n        \"capital_run_length_longest\",\n        \"capital_run_length_total\",\n    ]\n)\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Load the data\n</h2>\n\n<p>First, load the data into appropriate train/test variables:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>data = scipy.io.loadmat(\"spamData.mat\")\nX = data[\"Xtrain\"]\nN = X.shape[0]\nD = X.shape[1]\nXtest = data[\"Xtest\"]\nNtest = Xtest.shape[0]\ny = data[\"ytrain\"].squeeze().astype(int)\nytest = data[\"ytest\"].squeeze().astype(int)\n</code></pre>\n\n</div>\n\n\n\n<p>Next, normalize the scale of each feature by computing the z-scores:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Xz = (X - np.mean(X, axis=0)) / np.std(X, axis=0)\nXtestz = (Xtest - np.mean(X, axis=0)) / np.std(X, axis=0)\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Define the logistic regression model\n</h2>\n\n<p>Define helper functions and the log-likelihood:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>def logsumexp(x):\n    offset = np.max(x, axis=0)\n    return offset + np.log(np.sum(np.exp(x - offset), axis=0))\n\ndef logsigma(x):\n    if not isinstance(x, np.ndarray):\n        return -logsumexp(np.array([0, -x]))\n    else:\n        return -logsumexp(np.vstack((np.zeros(x.shape[0]),-x)))\n\ndef l(y, X, w):\n    return np.sum(y*logsigma(X.dot(w)) + (1-y)*logsigma(-(X.dot(w))))\n\n</code></pre>\n\n</div>\n\n\n\n<p>Define the gradient of the log-likelihood:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>def sigma(x):\n    return np.exp(x)/(1 + np.exp(x))\n\ndef dl(y, X, w):\n    return (y - sigma(X.dot(w))).dot(X)\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Determine the parameters using maximum likelihood estimation (MLE) and gradient descent (GD)\n</h2>\n\n<p>Here is a Python framework for implementing SGD:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>def optimize(obj_up, theta0, nepochs=50, eps0=0.01, verbose=True):\n    f, update = obj_up\n    theta = theta0\n    values = np.zeros(nepochs + 1)\n    eps = np.zeros(nepochs + 1)\n    values[0] = f(theta0)\n    eps[0] = eps0\n\n    for epoch in range(nepochs):\n        if verbose:\n            print(\n                \"Epoch {:3d}: f={:10.3f}, eps={:10.9f}\".format(\n                    epoch, values[epoch], eps[epoch]\n                )\n            )\n        theta = update(theta, eps[epoch])\n\n        values[epoch + 1] = f(theta)\n        if values[epoch] &lt; values[epoch + 1]:\n            eps[epoch + 1] = eps[epoch] / 2.0\n        else:\n            eps[epoch + 1] = eps[epoch] * 1.05\n\n    if verbose:\n        print(\"Result after {} epochs: f={}\".format(nepochs, values[-1]))\n    return theta, values, eps\n\ndef gd(y, X):\n    def objective(w):\n        return -(l(y, X, w))\n\n    def update(w, eps):\n        return w + eps * dl(y, X, w)\n\n    return (objective, update)\n</code></pre>\n\n</div>\n\n\n\n<p>You can now run GD to obtain optimized weights:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>np.random.seed(0)\nw0 = np.random.normal(size=D)\nwz_gd, vz_gd, ez_gd = optimize(gd(y, Xz), w0, nepochs=100)\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Predict\n</h2>\n\n<p>Finally, you can define a spam confidence values predictor and classifier:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>def predict(Xtest, w):\n    return sigma(Xtest.dot(w))\n\ndef classify(Xtest, w):\n    threshold = 0.5 # initial threshold\n    return (sigma(Xtest.dot(w)) &gt; threshold).astype(int)\n\nyhat = predict(Xtestz, wz_gd)\nypred = classify(Xtestz, wz_gd)\n</code></pre>\n\n</div>\n\n\n\n<p>Plot the precision-recall-curve to find a better threshold value:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>precision, recall, thresholds = sklearn.metrics.precision_recall_curve(ytest, yhat)\nplt.plot(recall, precision)\nfor x in np.linspace(0, 1, 10, endpoint=False):\n    index = int(x * (precision.size - 1))\n    plt.text(recall[index], precision[index], \"{:3.2f}\".format(thresholds[index]))\nplt.xlabel(\"Recall\")\nplt.ylabel(\"Precision\")\n# 0.44 looks good\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8livmd0lscs4sxuhmpfa.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F8livmd0lscs4sxuhmpfa.png\" alt=\" \" width=\"640\" height=\"480\"></a></p>\n\n<p>Have a look at the largest weights:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>features[np.where(wz_gd&gt;2)]\n</code></pre>\n\n</div>\n\n\n\n<p>Unsurprisingly, you will find that <code>char_freq_$</code> and <code>capital_run_length_longest</code> have an outsized impact, i.e., spam emails frequently include dollar signs and capitalized words.</p>\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>In this tutorial you have learned to build an email spam detector using machine learning and Python. If you want to practice more, try finding another dataset and build a binary classification model using the framework introduced here.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Title: OpenAI's ChatGPT: On Track to Reach 700 Million Weekly Users","url":"https://dev.to/yagyaraj_sharma_6cd410179/title-openais-chatgpt-on-track-to-reach-700-million-weekly-users-1kmj","date":1761524737,"author":"Insights YRS","guid":315576,"unread":true,"content":"<h2>\n  \n  \n  Title: OpenAI's ChatGPT: On Track to Reach 700 Million Weekly Users\n</h2>\n\n<p>Introduction:</p>\n\n<p>OpenAI's ChatGPT, a language model that can generate human-like responses to text inputs, has been gaining immense popularity since its launch. The app's popularity increased significantly after OpenAI launched an upgraded image-generation feature, powered by the GPT-4 model, in March. In this blog post, we will explore the reasons behind ChatGPT's success and its potential to reach 700 million weekly users.</p>\n\n<p>ChatGPT's Success:</p>\n\n<p>ChatGPT's success can be attributed to several factors. Firstly, the app's ability to generate human-like responses to text inputs has made it a popular choice for businesses and individuals looking for a chatbot that can handle complex conversations. Secondly, the app's integration with various platforms, such as Slack and Microsoft Teams, has made it easy for users to access and use the app. Lastly, the app's continuous updates and improvements have kept users engaged and coming back for more.</p>\n\n<p>Upgraded Image-Generation Feature:</p>\n\n<p>The upgraded image-generation feature, powered by the GPT-4 model, has been a significant factor in ChatGPT's success. The GPT-4 model is a highly advanced language model that can generate high-quality images based on text inputs. This feature has made ChatGPT a popular choice for businesses looking to create custom images and graphics for their marketing campaigns.</p>\n\n<p>Potential to Reach 700 Million Weekly Users:</p>\n\n<p>OpenAI has stated that ChatGPT is on track to reach 700 million weekly users. This is a significant milestone for the app, as it would make it one of the most popular chatbots in the world. The app's success can be attributed to its ability to handle complex conversations, its integration with various platforms, and its continuous updates and improvements.</p>\n\n<p>Conclusion:</p>\n\n<p>OpenAI's ChatGPT has been gaining immense popularity since its launch, and the upgraded image-generation feature has been a significant factor in its success. With its ability to handle complex conversations, its integration with various platforms, and its continuous updates and improvements, ChatGPT has the potential to reach 700 million weekly users. As the app continues to evolve and improve, it will undoubtedly become an essential tool for businesses and individuals looking for a chatbot that can handle complex conversations and create custom images and graphics.</p>\n\n\n\n\n<p>📌 Based on insights from <a href=\"https://techcrunch.com/2025/08/04/openai-says-chatgpt-is-on-track-to-reach-700m-weekly-users/\" rel=\"noopener noreferrer\">techcrunch.com</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Title: The Ultimate Guide to Fitbit Fitness and Health Trackers","url":"https://dev.to/yagyaraj_sharma_6cd410179/title-the-ultimate-guide-to-fitbit-fitness-and-health-trackers-200a","date":1761524421,"author":"Insights YRS","guid":315557,"unread":true,"content":"<h2>\n  \n  \n  Title: The Ultimate Guide to Fitbit Fitness and Health Trackers\n</h2>\n\n<p>Introduction:</p>\n\n<p>Fitbit, the popular wearable fitness tracker, has been around for over a decade. In 2025, it will have been 15 years since the first Fitbit was released. Despite being acquired by Google, Fitbit remains one of the most recognizable names in the industry. Fitbit trackers are not meant for the most hardcore of athletes, but they are still excellent devices for tracking overall activity as well as monitoring certain health and wellness metrics. In this guide, we will explore the best Fitbit trackers for your fitness and health needs.</p>\n\n<p>Fitbit Charge 5:</p>\n\n<p>The Fitbit Charge 5 is the latest addition to the Fitbit lineup. It is a versatile fitness tracker that can track a wide range of activities, including running, cycling, swimming, and more. The Charge 5 also has a built-in GPS, which allows you to track your outdoor activities more accurately. Additionally, the Charge 5 has a heart rate monitor, which can help you monitor your cardiovascular health. The Charge 5 also has a blood oxygen sensor, which can help you monitor your oxygen levels during sleep.</p>\n\n<p>Fitbit Sense:</p>\n\n<p>The Fitbit Sense is another popular fitness tracker from Fitbit. It is designed to be a more advanced version of the Charge 5. The Sense has a built-in ECG sensor, which can help you monitor your heart health. It also has a blood oxygen sensor, which can help you monitor your oxygen levels during sleep. The Sense also has a built-in GPS, which allows you to track your outdoor activities more accurately.</p>\n\n<p>Fitbit Versa 3:</p>\n\n<p>The Fitbit Versa 3 is a smartwatch that is designed to be a fitness tracker. It has a built-in GPS, which allows you to track your outdoor activities more accurately. The Versa 3 also has a heart rate monitor, which can help you monitor your cardiovascular health. Additionally, the Versa 3 has a blood oxygen sensor, which can help you monitor your oxygen levels during sleep. The Versa 3 also has a built-in NFC, which allows you to make payments with your watch.</p>\n\n<p>Fitbit Inspire 2:</p>\n\n<p>The Fitbit Inspire 2 is a fitness tracker that is designed to be a more affordable option. It is a basic fitness tracker that can track your daily activity, including steps taken, calories burned, and distance traveled. The Inspire 2 also has a heart rate monitor, which can help you monitor your cardiovascular health. Additionally, the Inspire 2 has a built-in GPS, which allows you to track your outdoor activities more accurately.</p>\n\n<p>Conclusion:</p>\n\n<p>Fitbit trackers are excellent devices for tracking your fitness and health. Whether you are a casual user or a hardcore athlete, there is a Fitbit tracker that is perfect for your needs. The Fitbit Charge 5, Sense, Versa 3, and Inspire 2 are all excellent options for tracking your fitness and health. When choosing a Fitbit tracker, consider your budget, your fitness goals, and your health needs. With the right Fitbit tracker, you can take control of your fitness and health.</p>\n\n\n\n\n<p>📌 Based on insights from <a href=\"https://www.theverge.com/22982833/best-fitbit-watch-fitness-tracker\" rel=\"noopener noreferrer\">theverge.com</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Title: North Korean Spies Infiltrate Hundreds of Companies Using Deepfake Technology","url":"https://dev.to/yagyaraj_sharma_6cd410179/title-north-korean-spies-infiltrate-hundreds-of-companies-using-deepfake-technology-n0p","date":1761524144,"author":"Insights YRS","guid":315556,"unread":true,"content":"<h2>\n  \n  \n  Title: North Korean Spies Infiltrate Hundreds of Companies Using Deepfake Technology\n</h2>\n\n<p>Introduction</p>\n\n<p>In recent years, the use of deepfake technology has become increasingly prevalent in various industries, including the world of cybersecurity. While many people are aware of the potential dangers of deepfake technology, few realize the extent to which it is being used by North Korean spies to infiltrate hundreds of companies. In this blog post, we will explore the latest findings by CrowdStrike, a leading cybersecurity firm, regarding the use of deepfake technology by North Korean spies.</p>\n\n<p>Deepfake Technology and Its Uses</p>\n\n<p>Deepfake technology refers to the use of artificial intelligence (AI) to create highly realistic videos, images, and audio that can be used to impersonate someone else. While deepfake technology has many potential uses, such as in the entertainment industry, it also has the potential to be used for malicious purposes, such as cyber espionage.</p>\n\n<p>According to CrowdStrike, North Korean spies are increasingly using deepfake technology to infiltrate hundreds of companies around the world. These spies pose as remote workers, using deepfake technology to create highly realistic videos and images of themselves, which they then use to gain access to sensitive information.</p>\n\n<p>How North Korean Spies Use Deepfake Technology</p>\n\n<p>North Korean spies use deepfake technology in several ways to infiltrate companies. First, they create highly realistic videos and images of themselves using deepfake technology. These videos and images are then used to create fake resumes and other documents that can be used to impersonate the spies as legitimate remote workers.</p>\n\n<p>Once the spies have gained access to a company, they use their deepfake technology to gain access to sensitive information. For example, they may use their deepfake technology to impersonate a high-ranking executive and gain access to confidential information.</p>\n\n<p>The Impact of North Korean Spies on Companies</p>\n\n<p>The impact of North Korean spies on companies can be significant. These spies can steal sensitive information, such as trade secrets and intellectual property, which can be used to develop North Korea's sanctioned nuclear weapons program. Additionally, North Korean spies can use the information they steal to gain a competitive advantage over other companies.</p>\n\n<p>Conclusion</p>\n\n<p>In conclusion, the use of deepfake technology by North Korean spies to infiltrate hundreds of companies is a serious concern. As deepfake technology becomes more prevalent, it is essential that companies take steps to protect themselves from these types of attacks. This includes implementing strong cybersecurity measures, such as multi-factor authentication and regular security audits, as well as educating employees on the potential dangers of deepfake technology. By taking these steps, companies can help to protect themselves from the potential threats posed by North Korean spies and other cybercriminals.</p>\n\n\n\n\n<p>📌 Based on insights from <a href=\"https://techcrunch.com/2025/08/04/north-korean-spies-posing-as-remote-workers-have-infiltrated-hundreds-of-companies-says-crowdstrike/\" rel=\"noopener noreferrer\">techcrunch.com</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Concurrent Corridors: Async/Await and the Event Loop","url":"https://dev.to/aaron_rose_0787cc8b4775a0/the-concurrent-corridors-asyncawait-and-the-event-loop-4bp5","date":1761522904,"author":"Aaron Rose","guid":315555,"unread":true,"content":"<p>Timothy's library system needed to fetch book metadata from multiple external APIs—publisher information, reader reviews, similar book recommendations. His synchronous code fetched them one at a time, and the library staff waited... and waited... and waited.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">requests</span>\n<span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">fetch_publisher_info</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">https://api.publisher.com/books/</span><span class=\"si\">{</span><span class=\"n\">isbn</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">fetch_reviews</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">https://api.reviews.com/books/</span><span class=\"si\">{</span><span class=\"n\">isbn</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">fetch_recommendations</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">https://api.recommendations.com/books/</span><span class=\"si\">{</span><span class=\"n\">isbn</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">time</span><span class=\"p\">()</span>\n<span class=\"n\">isbn</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">9780441013593</span><span class=\"sh\">\"</span>\n\n<span class=\"c1\"># Fetch one at a time - each waits for the previous\n</span><span class=\"n\">publisher</span> <span class=\"o\">=</span> <span class=\"nf\">fetch_publisher_info</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">)</span>    <span class=\"c1\"># Wait 2 seconds\n</span><span class=\"n\">reviews</span> <span class=\"o\">=</span> <span class=\"nf\">fetch_reviews</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">)</span>             <span class=\"c1\"># Wait 2 seconds\n</span><span class=\"n\">recommendations</span> <span class=\"o\">=</span> <span class=\"nf\">fetch_recommendations</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">)</span>  <span class=\"c1\"># Wait 2 seconds\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Total time: </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\"> seconds</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Total time: 6.00 seconds - waited for each in sequence!\n</span></code></pre>\n\n</div>\n\n\n\n<p>Margaret found him staring at loading spinners. \"You're waiting when you could be working,\" she observed. \"Come to the Concurrent Corridors—where Python does many things at once.\"</p>\n\n<h2>\n  \n  \n  The Async Solution\n</h2>\n\n<p>She showed him the async version:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"n\">aiohttp</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">fetch_publisher_info</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">,</span> <span class=\"n\">isbn</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">session</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">https://api.publisher.com/books/</span><span class=\"si\">{</span><span class=\"n\">isbn</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">fetch_reviews</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">,</span> <span class=\"n\">isbn</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">session</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">https://api.reviews.com/books/</span><span class=\"si\">{</span><span class=\"n\">isbn</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">fetch_recommendations</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">,</span> <span class=\"n\">isbn</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">session</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">https://api.recommendations.com/books/</span><span class=\"si\">{</span><span class=\"n\">isbn</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">fetch_all_data</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">aiohttp</span><span class=\"p\">.</span><span class=\"nc\">ClientSession</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n        <span class=\"c1\"># All three run concurrently!\n</span>        <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">gather</span><span class=\"p\">(</span>\n            <span class=\"nf\">fetch_publisher_info</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">,</span> <span class=\"n\">isbn</span><span class=\"p\">),</span>\n            <span class=\"nf\">fetch_reviews</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">,</span> <span class=\"n\">isbn</span><span class=\"p\">),</span>\n            <span class=\"nf\">fetch_recommendations</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">,</span> <span class=\"n\">isbn</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">results</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">time</span><span class=\"p\">()</span>\n<span class=\"n\">publisher</span><span class=\"p\">,</span> <span class=\"n\">reviews</span><span class=\"p\">,</span> <span class=\"n\">recommendations</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">fetch_all_data</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Total time: </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\"> seconds</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Total time: 2.00 seconds - all three ran at once!\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"Async functions don't block,\" Margaret explained. \"When you <code>await</code> a network call, the program doesn't stop—it works on other tasks while waiting for the response. All three API calls happen concurrently.\"</p>\n\n<h2>\n  \n  \n  What Are Coroutines?\n</h2>\n\n<p>Timothy learned the fundamental building block:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Regular function - executes immediately\n</span><span class=\"k\">def</span> <span class=\"nf\">regular_function</span><span class=\"p\">():</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Running</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"mi\">42</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nf\">regular_function</span><span class=\"p\">()</span>  <span class=\"c1\"># Runs immediately\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>  <span class=\"c1\"># 42\n</span>\n<span class=\"c1\"># Async function - returns a coroutine\n</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">async_function</span><span class=\"p\">():</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Running</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"mi\">42</span>\n\n<span class=\"n\">coro</span> <span class=\"o\">=</span> <span class=\"nf\">async_function</span><span class=\"p\">()</span>  <span class=\"c1\"># Doesn't run yet!\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">coro</span><span class=\"p\">)</span>  <span class=\"c1\"># &lt;coroutine object async_function&gt;\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">coro</span><span class=\"p\">))</span>  <span class=\"c1\"># &lt;class 'coroutine'&gt;\n</span>\n<span class=\"c1\"># Must await it or run it\n</span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">async_function</span><span class=\"p\">())</span>  <span class=\"c1\"># Now it runs\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>  <span class=\"c1\"># 42\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"Async functions return coroutines—suspended computations,\" Margaret explained. \"They don't execute immediately. You must <code>await</code> them or pass them to an event loop.\"</p>\n\n<h2>\n  \n  \n  Tasks vs Coroutines\n</h2>\n\n<p>Margaret showed him the critical distinction:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">work</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"s\">done</span><span class=\"sh\">\"</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Coroutine - not scheduled yet\n</span>    <span class=\"n\">coro</span> <span class=\"o\">=</span> <span class=\"nf\">work</span><span class=\"p\">()</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">coro</span><span class=\"p\">))</span>  <span class=\"c1\"># &lt;class 'coroutine'&gt;\n</span>    <span class=\"c1\"># Hasn't started running!\n</span>\n    <span class=\"c1\"># Task - scheduled immediately on the event loop\n</span>    <span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">create_task</span><span class=\"p\">(</span><span class=\"nf\">work</span><span class=\"p\">())</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">type</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">))</span>  <span class=\"c1\"># &lt;class 'Task'&gt;\n</span>    <span class=\"c1\"># Already running in the background!\n</span>\n    <span class=\"c1\"># Tasks have extra capabilities\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">.</span><span class=\"nf\">done</span><span class=\"p\">())</span>  <span class=\"c1\"># False - still running\n</span>    <span class=\"n\">task</span><span class=\"p\">.</span><span class=\"nf\">cancel</span><span class=\"p\">()</span>       <span class=\"c1\"># Can cancel tasks\n</span>\n    <span class=\"c1\"># Must await the coroutine we created\n</span>    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">coro</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n<span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<p>\"Coroutines are blueprints,\" Margaret noted. \"Tasks are scheduled work. When you <code>create_task()</code>, the task starts running immediately in the background. When you call an async function, you just get a coroutine—it won't run until awaited.\"</p>\n\n<h2>\n  \n  \n  The Event Loop\n</h2>\n\n<p>Margaret revealed the mechanism behind async:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Simplified event loop concept\n</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">task1</span><span class=\"p\">():</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Task 1: Starting</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># \"I'm waiting - do other work\"\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Task 1: Done</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">task2</span><span class=\"p\">():</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Task 2: Starting</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># \"I'm waiting - do other work\"\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Task 2: Done</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Schedule both tasks\n</span>    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">gather</span><span class=\"p\">(</span><span class=\"nf\">task1</span><span class=\"p\">(),</span> <span class=\"nf\">task2</span><span class=\"p\">())</span>\n\n<span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n<span class=\"c1\"># Task 1: Starting\n# Task 2: Starting\n# (1 second pause - both waiting simultaneously)\n# Task 1: Done\n# Task 2: Done\n</span>\n<span class=\"c1\"># Both tasks ran concurrently!\n# Event loop switched between them during waits\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"The event loop is Python's scheduler,\" Margaret explained. \"When a coroutine hits <code>await</code>, it yields control back to the loop. The loop switches to another coroutine. When the awaited operation completes, the loop resumes the coroutine. It's cooperative multitasking—coroutines voluntarily yield control.\"</p>\n\n<h2>\n  \n  \n  The Blocking Trap: time.sleep() vs asyncio.sleep()\n</h2>\n\n<p>Timothy made a common mistake:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">broken_task</span><span class=\"p\">():</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Starting</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># WRONG! Blocks the entire event loop!\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Done</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">other_task</span><span class=\"p\">():</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Other task running</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">gather</span><span class=\"p\">(</span>\n        <span class=\"nf\">broken_task</span><span class=\"p\">(),</span>\n        <span class=\"nf\">other_task</span><span class=\"p\">()</span>\n    <span class=\"p\">)</span>\n\n<span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n<span class=\"c1\"># Starting\n# (2 second freeze - nothing else can run!)\n# Done\n# Other task running  # Only runs after broken_task finishes!\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"Never use <code>time.sleep()</code> in async code!\" Margaret warned. \"It blocks the entire event loop—nothing else can run. Use <code>asyncio.sleep()</code> instead:\"<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">correct_task</span><span class=\"p\">():</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Starting</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># Yields control - other tasks can run\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Done</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">other_task</span><span class=\"p\">():</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Other task running</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">gather</span><span class=\"p\">(</span>\n        <span class=\"nf\">correct_task</span><span class=\"p\">(),</span>\n        <span class=\"nf\">other_task</span><span class=\"p\">()</span>\n    <span class=\"p\">)</span>\n\n<span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n<span class=\"c1\"># Starting\n# Other task running  # Runs immediately!\n# (2 seconds pass)\n# Done\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"Any blocking call—<code>time.sleep()</code>, <code>requests.get()</code>, synchronous file I/O—freezes the event loop,\" she cautioned. \"Always use async alternatives or wrap blocking code with <code>run_in_executor()</code>.\"</p>\n\n<h2>\n  \n  \n  Understanding the GIL and Why Async Works\n</h2>\n\n<p>Timothy was puzzled. \"Python has the Global Interpreter Lock—only one thread runs at a time. How does async help?\"</p>\n\n<p>Margaret smiled. \"Excellent question. The GIL is why threading doesn't help CPU-bound tasks:\"<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">threading</span>\n<span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">cpu_work</span><span class=\"p\">():</span>\n    <span class=\"c1\"># CPU-intensive calculation\n</span>    <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">10_000_000</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">total</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">time</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Two threads don't run in parallel due to GIL\n</span><span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"p\">.</span><span class=\"nc\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">cpu_work</span><span class=\"p\">)</span>\n<span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"p\">.</span><span class=\"nc\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">cpu_work</span><span class=\"p\">)</span>\n\n<span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"nf\">start</span><span class=\"p\">()</span>\n<span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"nf\">start</span><span class=\"p\">()</span>\n<span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">()</span>\n<span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Time: </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\">s</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Takes ~2x time - no parallelism due to GIL!\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"But async works for I/O because during I/O operations—network calls, disk reads—Python <em>releases</em> the GIL,\" she explained. \"The event loop is single-threaded, but while one coroutine waits for I/O, the loop switches to another coroutine. The key is that I/O waits don't hold the GIL.\"<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Why async works for I/O:\n# 1. Coroutine makes network request\n# 2. Python releases GIL during I/O wait\n# 3. Event loop switches to another coroutine\n# 4. That coroutine runs (single thread!)\n# 5. When I/O completes, loop switches back\n</span>\n<span class=\"c1\"># This is why:\n# - Async: Perfect for I/O-bound (waiting releases control)\n# - Threading: I/O-bound with blocking libraries (GIL released during I/O)\n# - Multiprocessing: CPU-bound (separate processes, separate GILs)\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Await: The Suspension Point\n</h2>\n\n<p>Timothy learned what <code>await</code> actually did:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">fetch_data</span><span class=\"p\">():</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Starting fetch</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># await suspends this coroutine\n</span>    <span class=\"c1\"># Returns control to event loop\n</span>    <span class=\"c1\"># Loop can run other coroutines\n</span>    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">slow_network_call</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Resumes here when slow_network_call completes\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Fetch complete</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">data</span>\n\n<span class=\"c1\"># await can only be used inside async functions\n# await marks suspension points where the event loop can switch tasks\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"The <code>await</code> keyword suspends the coroutine,\" Margaret noted. \"It's like saying 'I'm waiting for something—do other work and come back to me when ready.' This is how async enables concurrency.\"</p>\n\n<h2>\n  \n  \n  Concurrent Patterns\n</h2>\n\n<p>Margaret showed him the essential patterns:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">fetch_book</span><span class=\"p\">(</span><span class=\"n\">book_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># Simulate network delay\n</span>    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Book </span><span class=\"si\">{</span><span class=\"n\">book_id</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">concurrent_gather</span><span class=\"p\">():</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">All at once with gather - waits for all</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">books</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">gather</span><span class=\"p\">(</span>\n        <span class=\"nf\">fetch_book</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n        <span class=\"nf\">fetch_book</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n        <span class=\"nf\">fetch_book</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">books</span><span class=\"p\">)</span>  <span class=\"c1\"># ['Book 1', 'Book 2', 'Book 3'] - all at once!\n</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">concurrent_tasks</span><span class=\"p\">():</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Background tasks with create_task</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"c1\"># Tasks start running immediately\n</span>    <span class=\"n\">task1</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">create_task</span><span class=\"p\">(</span><span class=\"nf\">fetch_book</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"n\">task2</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">create_task</span><span class=\"p\">(</span><span class=\"nf\">fetch_book</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n    <span class=\"n\">task3</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">create_task</span><span class=\"p\">(</span><span class=\"nf\">fetch_book</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># Do other work while tasks run\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Doing other work...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Collect results\n</span>    <span class=\"n\">books</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">gather</span><span class=\"p\">(</span><span class=\"n\">task1</span><span class=\"p\">,</span> <span class=\"n\">task2</span><span class=\"p\">,</span> <span class=\"n\">task3</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">books</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">process_as_completed</span><span class=\"p\">():</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Process results as they arrive</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nf\">fetch_book</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)]</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">coro</span> <span class=\"ow\">in</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">as_completed</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">):</span>\n        <span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">coro</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Got </span><span class=\"si\">{</span><span class=\"n\">book</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Process immediately when ready\n</span>\n<span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">concurrent_gather</span><span class=\"p\">())</span>\n<span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">concurrent_tasks</span><span class=\"p\">())</span>\n<span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">process_as_completed</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Task Cancellation and Timeouts\n</h2>\n\n<p>Margaret showed him how to handle tasks that take too long:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">long_operation</span><span class=\"p\">():</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Starting long operation...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"s\">completed</span><span class=\"sh\">\"</span>\n    <span class=\"k\">except</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"n\">CancelledError</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Operation was cancelled!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Perform cleanup here\n</span>        <span class=\"k\">raise</span>  <span class=\"c1\"># Re-raise to signal cancellation\n</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">timeout_example</span><span class=\"p\">():</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Using wait_for for timeouts</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">wait_for</span><span class=\"p\">(</span>\n            <span class=\"nf\">long_operation</span><span class=\"p\">(),</span>\n            <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mf\">2.0</span>\n        <span class=\"p\">)</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nb\">TimeoutError</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Operation timed out after 2 seconds</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">manual_cancellation</span><span class=\"p\">():</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Manually cancelling tasks</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">create_task</span><span class=\"p\">(</span><span class=\"nf\">long_operation</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># Do some work\n</span>    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Cancel the task\n</span>    <span class=\"n\">task</span><span class=\"p\">.</span><span class=\"nf\">cancel</span><span class=\"p\">()</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">task</span>\n    <span class=\"k\">except</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"n\">CancelledError</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Task was cancelled</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">timeout_group</span><span class=\"p\">():</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Timeout for multiple operations</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">wait_for</span><span class=\"p\">(</span>\n            <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">gather</span><span class=\"p\">(</span>\n                <span class=\"nf\">long_operation</span><span class=\"p\">(),</span>\n                <span class=\"nf\">long_operation</span><span class=\"p\">(),</span>\n                <span class=\"nf\">long_operation</span><span class=\"p\">()</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mf\">5.0</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nb\">TimeoutError</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">One or more operations timed out</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Python 3.11+ context manager style\n</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">modern_timeout</span><span class=\"p\">():</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">timeout</span><span class=\"p\">(</span><span class=\"mf\">2.0</span><span class=\"p\">):</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">long_operation</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span> <span class=\"nb\">TimeoutError</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Timed out!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>\"Timeouts prevent your program from hanging indefinitely,\" Margaret explained. \"And cancellation lets you stop work that's no longer needed—like when a user cancels a request.\"</p>\n\n<h2>\n  \n  \n  Producer/Consumer with asyncio.Queue\n</h2>\n\n<p>She demonstrated a common async pattern:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">producer</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"p\">:</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"n\">Queue</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Produces items and adds them to the queue</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>  <span class=\"c1\"># Simulate work\n</span>        <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">item-</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n        <span class=\"k\">await</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">put</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Produced </span><span class=\"si\">{</span><span class=\"n\">item</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Signal completion\n</span>    <span class=\"k\">await</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">put</span><span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">consumer</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"p\">:</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"n\">Queue</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Consumes items from the queue</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">item</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>  <span class=\"c1\"># Sentinel value - we're done\n</span>            <span class=\"k\">break</span>\n\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Consumed </span><span class=\"si\">{</span><span class=\"n\">item</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>  <span class=\"c1\"># Simulate processing\n</span>        <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">task_done</span><span class=\"p\">()</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">producer_consumer_example</span><span class=\"p\">():</span>\n    <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nc\">Queue</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Run producer and consumer concurrently\n</span>    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">gather</span><span class=\"p\">(</span>\n        <span class=\"nf\">producer</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span>\n        <span class=\"nf\">consumer</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Wait for all items to be processed\n</span>    <span class=\"k\">await</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">()</span>\n\n<span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">producer_consumer_example</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<p>\"Queues let producers and consumers work at different rates,\" Margaret noted. \"The queue buffers items between them—perfect for processing pipelines.\"</p>\n\n<h2>\n  \n  \n  Error Handling in Async\n</h2>\n\n<p>Timothy learned how to handle failures gracefully:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">might_fail</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Task </span><span class=\"si\">{</span><span class=\"n\">n</span><span class=\"si\">}</span><span class=\"s\"> failed!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Task </span><span class=\"si\">{</span><span class=\"n\">n</span><span class=\"si\">}</span><span class=\"s\"> succeeded</span><span class=\"sh\">\"</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">gather_with_exceptions</span><span class=\"p\">():</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Collect errors without stopping other tasks</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">gather</span><span class=\"p\">(</span>\n        <span class=\"nf\">might_fail</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n        <span class=\"nf\">might_fail</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span>  <span class=\"c1\"># This will fail\n</span>        <span class=\"nf\">might_fail</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span>\n        <span class=\"n\">return_exceptions</span><span class=\"o\">=</span><span class=\"bp\">True</span>  <span class=\"c1\"># Don't raise, return exceptions\n</span>    <span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nf\">isinstance</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"nb\">Exception</span><span class=\"p\">):</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Task </span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s\"> failed: </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Task </span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s\">: </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">gather_with_exceptions</span><span class=\"p\">())</span>\n<span class=\"c1\"># Task 1: Task 1 succeeded\n# Task 2 failed: Task 2 failed!\n# Task 3: Task 3 succeeded\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"With <code>return_exceptions=True</code>, failures don't stop other tasks,\" she explained. \"You get exceptions in the results list instead of an immediate raise.\"</p>\n\n<h2>\n  \n  \n  Async Context Managers\n</h2>\n\n<p>Margaret showed him async resource management:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"n\">aiohttp</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AsyncDatabaseConnection</span><span class=\"p\">:</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">__aenter__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Connecting to database...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>  <span class=\"c1\"># Simulate connection\n</span>        <span class=\"k\">return</span> <span class=\"n\">self</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">__aexit__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">exc_type</span><span class=\"p\">,</span> <span class=\"n\">exc_val</span><span class=\"p\">,</span> <span class=\"n\">exc_tb</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Closing database connection...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>  <span class=\"c1\"># Simulate cleanup\n</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">sql</span><span class=\"p\">):</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Results for: </span><span class=\"si\">{</span><span class=\"n\">sql</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">use_async_context_manager</span><span class=\"p\">():</span>\n    <span class=\"c1\"># async with for resources that need async setup/cleanup\n</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"nc\">AsyncDatabaseConnection</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">db</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">SELECT * FROM books</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Automatically cleaned up\n</span>\n<span class=\"c1\"># Real-world example with aiohttp\n</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">fetch_with_session</span><span class=\"p\">():</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">aiohttp</span><span class=\"p\">.</span><span class=\"nc\">ClientSession</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">session</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">https://api.example.com/data</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"n\">data</span>\n\n<span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">use_async_context_manager</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<p>\"Async context managers use <code>async with</code>,\" Margaret noted. \"They can await during setup and teardown—perfect for network connections, database sessions, and file handles.\"</p>\n\n<h2>\n  \n  \n  Async Iterators\n</h2>\n\n<p>She demonstrated async iteration:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AsyncBookReader</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">books</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">books</span> <span class=\"o\">=</span> <span class=\"n\">books</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__aiter__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">__anext__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">index</span> <span class=\"o\">&gt;=</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">books</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"nb\">StopAsyncIteration</span>\n\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>  <span class=\"c1\"># Simulate async fetch\n</span>        <span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">books</span><span class=\"p\">[</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">]</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"n\">book</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">read_books</span><span class=\"p\">():</span>\n    <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"nc\">AsyncBookReader</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">Book A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Book B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Book C</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># async for iterates over async iterator\n</span>    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">book</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Reading </span><span class=\"si\">{</span><span class=\"n\">book</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">read_books</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  The Event Loop Already Running Gotcha\n</h2>\n\n<p>Timothy encountered a confusing error in Jupyter:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># In Jupyter notebook or IPython:\n</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">my_function</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"s\">result</span><span class=\"sh\">\"</span>\n\n<span class=\"c1\"># This fails with RuntimeError!\n# result = asyncio.run(my_function())\n# RuntimeError: asyncio.run() cannot be called from a running event loop\n</span>\n<span class=\"c1\"># Jupyter already has an event loop running\n# Just await directly:\n</span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">my_function</span><span class=\"p\">()</span>  <span class=\"c1\"># Works in Jupyter!\n</span>\n<span class=\"c1\"># In regular Python scripts, use asyncio.run():\n</span><span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">my_function</span><span class=\"p\">())</span>  <span class=\"c1\"># Works in scripts!\n</span></code></pre>\n\n</div>\n\n\n\n<p>\"Jupyter and IPython already run an event loop,\" Margaret explained. \"You can't nest <code>asyncio.run()</code> calls. In notebooks, just <code>await</code> directly. In scripts, <code>asyncio.run()</code> is your entry point.\"</p>\n\n<h2>\n  \n  \n  When Async Doesn't Help\n</h2>\n\n<p>Margaret warned him about async limitations:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">cpu_intensive</span><span class=\"p\">():</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">This won</span><span class=\"sh\">'</span><span class=\"s\">t benefit from async</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"c1\"># Heavy computation - holds the GIL\n</span>    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">10_000_000</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">time</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># These run sequentially, not concurrently!\n</span>    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">gather</span><span class=\"p\">(</span>\n        <span class=\"nf\">cpu_intensive</span><span class=\"p\">(),</span>\n        <span class=\"nf\">cpu_intensive</span><span class=\"p\">(),</span>\n        <span class=\"nf\">cpu_intensive</span><span class=\"p\">()</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Time: </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\">s</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Still takes 3x time - no concurrency benefit!\n</span>\n<span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<p>\"Async helps when you're <em>waiting</em>—network, disk, database,\" she explained. \"For CPU-intensive work, use <code>multiprocessing</code> to bypass the GIL with separate processes.\"</p>\n\n<h2>\n  \n  \n  Async vs Threading vs Multiprocessing\n</h2>\n\n<p>Timothy learned when to use each:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Use ASYNC when:\n# - I/O-bound: network requests, database queries, file operations\n# - Many concurrent operations (hundreds or thousands)\n# - Using async libraries (aiohttp, asyncpg, aiofiles)\n# - Example: Web server handling many requests\n</span>\n<span class=\"c1\"># Use THREADING when:\n# - I/O-bound with blocking libraries (requests, standard file I/O)\n# - Moderate concurrency (tens of operations)\n# - Libraries don't support async\n# - Example: Scraping with requests library\n</span>\n<span class=\"c1\"># Use MULTIPROCESSING when:\n# - CPU-bound: calculations, data processing, image manipulation\n# - Need true parallelism\n# - Work can be split into independent chunks\n# - Example: Processing large datasets, scientific computing\n</span></code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Real-World Example: API Client with Rate Limiting\n</h2>\n\n<p>Margaret showed him a production-ready async API client:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"n\">aiohttp</span>\n<span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BookAPIClient</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">base_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">max_concurrent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">base_url</span> <span class=\"o\">=</span> <span class=\"n\">base_url</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">semaphore</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nc\">Semaphore</span><span class=\"p\">(</span><span class=\"n\">max_concurrent</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">__aenter__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">aiohttp</span><span class=\"p\">.</span><span class=\"nc\">ClientSession</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">__aexit__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"k\">await</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">session</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">fetch_book</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">isbn</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Fetch single book with rate limiting</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">semaphore</span><span class=\"p\">:</span>  <span class=\"c1\"># Limit concurrent requests\n</span>            <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">session</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">base_url</span><span class=\"si\">}</span><span class=\"s\">/books/</span><span class=\"si\">{</span><span class=\"n\">isbn</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">aiohttp</span><span class=\"p\">.</span><span class=\"nc\">ClientTimeout</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n                <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">raise_for_status</span><span class=\"p\">()</span>\n                <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">fetch_many_books</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">isbns</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]:</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Fetch multiple books concurrently</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">fetch_book</span><span class=\"p\">(</span><span class=\"n\">isbn</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">isbn</span> <span class=\"ow\">in</span> <span class=\"n\">isbns</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">gather</span><span class=\"p\">(</span>\n            <span class=\"o\">*</span><span class=\"n\">tasks</span><span class=\"p\">,</span>\n            <span class=\"n\">return_exceptions</span><span class=\"o\">=</span><span class=\"bp\">True</span>  <span class=\"c1\"># Don't stop on failures\n</span>        <span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">search_books</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]:</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Search for books</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">session</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">base_url</span><span class=\"si\">}</span><span class=\"s\">/search</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">q</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">query</span><span class=\"p\">}</span>\n        <span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n            <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">raise_for_status</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Usage\n</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">isbns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"sh\">\"</span><span class=\"s\">9780441013593</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">9780345391803</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">9780765326355</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">9780441569595</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">9780765326362</span><span class=\"sh\">\"</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"nc\">BookAPIClient</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">https://api.library.com</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Fetch all books concurrently (max 10 at once)\n</span>        <span class=\"n\">books</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"nf\">fetch_many_books</span><span class=\"p\">(</span><span class=\"n\">isbns</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Process results\n</span>        <span class=\"k\">for</span> <span class=\"n\">isbn</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"nf\">zip</span><span class=\"p\">(</span><span class=\"n\">isbns</span><span class=\"p\">,</span> <span class=\"n\">books</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"nf\">isinstance</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"nb\">Exception</span><span class=\"p\">):</span>\n                <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Failed to fetch </span><span class=\"si\">{</span><span class=\"n\">isbn</span><span class=\"si\">}</span><span class=\"s\">: </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Got book: </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">title</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<p>\"The semaphore limits concurrent requests,\" Margaret explained. \"This prevents overwhelming the API server while still achieving high throughput. The context manager ensures cleanup even if errors occur.\"</p>\n\n<h2>\n  \n  \n  Running Blocking Code in Async\n</h2>\n\n<p>She showed him how to integrate blocking libraries:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"n\">requests</span>  <span class=\"c1\"># Synchronous library\n</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">fetch_with_requests</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Use blocking library without freezing event loop</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">get_event_loop</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Run blocking code in thread pool\n</span>    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">loop</span><span class=\"p\">.</span><span class=\"nf\">run_in_executor</span><span class=\"p\">(</span>\n        <span class=\"bp\">None</span><span class=\"p\">,</span>  <span class=\"c1\"># Use default ThreadPoolExecutor\n</span>        <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">,</span>\n        <span class=\"n\">url</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Mix async and sync libraries safely\n</span>    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">gather</span><span class=\"p\">(</span>\n        <span class=\"nf\">fetch_with_requests</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">https://api.example.com/1</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n        <span class=\"nf\">fetch_with_requests</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">https://api.example.com/2</span><span class=\"sh\">'</span><span class=\"p\">),</span>\n        <span class=\"nf\">fetch_with_requests</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">https://api.example.com/3</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span>\n\n<span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<p>\"When you must use blocking libraries, wrap calls with <code>run_in_executor()</code>,\" she advised. \"The event loop runs them in threads, keeping itself responsive.\"</p>\n\n\n\n\n<h2>\n  \n  \n  The Takeaway\n</h2>\n\n<p>Timothy stood in the Concurrent Corridors, watching the event loop orchestrate hundreds of coroutines.</p>\n\n<p><strong>Async/await transforms waiting into working</strong>: When coroutines wait for I/O, the event loop switches to other work—achieving high concurrency in a single thread.</p>\n\n<p><strong>Coroutines are suspended computations</strong>: Async functions return coroutines that don't run until awaited or passed to the event loop.</p>\n\n<p><strong>The event loop is the scheduler</strong>: Switches between coroutines at await points—cooperative multitasking.</p>\n\n<p><strong>await is the suspension point</strong>: Where coroutines yield control, letting other work proceed.</p>\n\n<p><strong>Tasks vs coroutines</strong>: Tasks are scheduled immediately; coroutines need explicit awaiting.</p>\n\n<p><strong>asyncio.sleep() vs time.sleep()</strong>: Always use async versions or break concurrency entirely.</p>\n\n<p><strong>The GIL isn't a problem for I/O</strong>: Python releases the GIL during I/O waits, letting the event loop switch coroutines.</p>\n\n<p><strong>asyncio.gather() runs concurrently</strong>: All start at once, wait for all to complete.</p>\n\n<p><strong>asyncio.create_task() schedules background work</strong>: Task runs while you do other things.</p>\n\n<p><strong>Task cancellation prevents hangs</strong>: Use timeouts and manual cancellation for long-running operations.</p>\n\n<p><strong>asyncio.Queue for producer/consumer</strong>: Buffer work between coroutines running at different rates.</p>\n\n<p><strong>async with for async resources</strong>: Context managers that can await during setup/teardown.</p>\n\n<p><strong>async for iterates asynchronously</strong>: Process items from async sources (APIs, databases).</p>\n\n<p><strong>Jupyter has a running loop</strong>: Can't use asyncio.run(), just await directly.</p>\n\n<p><strong>Async doesn't help CPU-bound tasks</strong>: Use multiprocessing for computation-heavy work.</p>\n\n<p><strong>Semaphores limit concurrency</strong>: Prevent overwhelming external services with too many requests.</p>\n\n<p><strong>return_exceptions=True in gather</strong>: Continue despite errors, collect exceptions with results.</p>\n\n<p><strong>run_in_executor() for blocking code</strong>: Wrap synchronous libraries to avoid freezing the event loop.</p>\n\n<p><strong>asyncio.run() is the entry point</strong>: Creates loop, runs coroutine, cleans up—use it to start async programs in scripts.</p>\n\n<h2>\n  \n  \n  Python's async/await Pattern\n</h2>\n\n<p>Timothy had discovered Python's approach to concurrency—the async/await pattern that transformed waiting time into productive time. </p>\n\n<p>The Concurrent Corridors revealed that most programs spend their lives waiting—for network responses, database queries, file operations—and async let Python juggle hundreds or thousands of such operations simultaneously in a single thread. </p>\n\n<p>He learned that async wasn't magic parallelism but cooperative multitasking where coroutines politely yielded control at <code>await</code> points, letting the event loop orchestrate the dance. </p>\n\n<p>He understood when async shined (I/O-bound) and when it failed (CPU-bound), knew the critical difference between <code>asyncio.sleep()</code> and <code>time.sleep()</code>, and mastered patterns for timeouts, cancellation, and rate limiting, </p>\n\n<p>Finally, Timothy understood why the GIL didn't prevent async concurrency, and recognized that modern Python's async ecosystem transformed slow, sequential programs into fast, concurrent systems—as long as you were waiting for something external, not crunching numbers internally.</p>\n\n\n\n\n<p><em>Aaron Rose is a software engineer and technology writer at <a href=\"https://www.tech-reader.blog\" rel=\"noopener noreferrer\">tech-reader.blog</a> and the author of <a href=\"https://amazon.com/author/aaron.rose\" rel=\"noopener noreferrer\">Think Like a Genius</a>.</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"A lightweight secrets scanner that catches exposed keys before they reach GitHub","url":"https://dev.to/amosfinds/a-lightweight-secrets-scanner-that-catches-exposed-keys-before-they-reach-github-3cpp","date":1761522181,"author":"Amogetswe Mashele","guid":315554,"unread":true,"content":"<p>Hi,<br>\nI’ve been experimenting with DevSecOps tools lately, and noticed that<br>\nmost secret scanners only alert you after you’ve already pushed to GitHub — when the damage is done.</p>\n\n<p>So I decided to build a different kind of scanner.<br>\nSomething fast, lightweight, and developer-first — that runs locally before you even commit code.</p>\n\n<p>The Problem</p>\n\n<p>Every year, thousands of API keys and credentials get accidentally committed to public repos.<br>\nEven with GitHub’s built-in secret scanning and tools like GitGuardian, leaks still happen because:</p>\n\n<p>Developers forget to run scans before pushing.</p>\n\n<p>Most scanners are CI-only (post-commit).</p>\n\n<p>Setup is overcomplicated for solo devs and small teams.</p>\n\n<p>I wanted a local-first tool that fits naturally into a workflow — no cloud sync, no telemetry, no “trust us” backend.</p>\n\n<p>The Solution: Secrets Scanner</p>\n\n<p>Secrets Scanner is a simple Python + FastAPI tool that:</p>\n\n<p>Scans repos for hardcoded secrets, keys, and tokens.</p>\n\n<p>Runs as a pre-commit hook locally (python -m app.cli --staged).</p>\n\n<p>Works as a CLI or self-hosted web app.</p>\n\n<p>Integrates with CI pipelines for an extra safety layer.</p>\n\n<p>Sends optional alerts to Slack when secrets are detected.</p>\n\n<p>Everything runs on your machine or your server — no data leaves your environment.</p>\n\n<p>Quick Demo</p>\n\n<p>Local use:</p>\n\n<p>python -m app.cli --staged</p>\n\n<p>If a secret is found, it blocks your commit with a clear message:</p>\n\n<p>Secret found in .env (STRIPE_SECRET_KEY)</p>\n\n<p>Otherwise:</p>\n\n<p>No secrets found.</p>\n\n<p>You can also deploy the web version (I used Render):</p>\n\n<p>docker build -t secrets-scanner .<br>\ndocker run -p 8000:8000 --env-file .env secrets-scanner</p>\n\n<p>Then visit:</p>\n\n<p><a href=\"https://yourdomain.com/ui\" rel=\"noopener noreferrer\">https://yourdomain.com/ui</a></p>\n\n<p>to scan any repo (public or private, via OAuth).</p>\n\n<p>Prevent Leaks with Pre-Commit</p>\n\n<p>To integrate with Git hooks:</p>\n\n<p>macOS/Linux</p>\n\n<p>echo '#!/usr/bin/env bash<br>\nset -e<br>\npython -m app.cli --staged' &gt; .git/hooks/pre-commit<br>\nchmod +x .git/hooks/pre-commit</p>\n\n<p>Windows (PowerShell)</p>\n\n<p>echo 'python -m app.cli --staged<br>\nif ($LASTEXITCODE -ne 0) { exit 1 }' &gt; .git/hooks/pre-commit.ps1</p>\n\n<p>Now, every time you run git commit, your secrets get scanned automatically.</p>\n\n<p>Why Local-First Matters</p>\n\n<p>There’s a big trust gap in third-party scanning tools.<br>\nBy keeping everything local and open source, you stay in control of your code.</p>\n\n<p>No API calls, no logging, no vendor lock-in.<br>\nYou can even host the full service yourself if you want to integrate with a team Slack or private CI setup.</p>\n\n<p>Tech Stack</p>\n\n<p>FastAPI for backend</p>\n\n<p>Python CLI for pre-commit and local scans</p>\n\n<p>httpx for async GitHub API calls</p>\n\n<p>Slack webhooks for alerts</p>\n\n<p>Dockerized for easy self-hosting</p>\n\n<p>Try It Yourself</p>\n\n<p>GitHub: <a href=\"https://github.com/AMOSFinds/secrets-scanner\" rel=\"noopener noreferrer\">https://github.com/AMOSFinds/secrets-scanner</a></p>\n\n<p>Live demo: <a href=\"https://secrets-scanner-jlw2.onrender.com/ui\" rel=\"noopener noreferrer\">https://secrets-scanner-jlw2.onrender.com/ui</a> or if you want to find out more, visit the homepage: <a href=\"https://secrets-scanner-jlw2.onrender.com\" rel=\"noopener noreferrer\">https://secrets-scanner-jlw2.onrender.com</a></p>\n\n<p>If you’re into DevSecOps or pre-commit automation, I’d love feedback — especially from anyone who’s used GitGuardian or similar SAST tools.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Don’t Make Assumptions About Assertions: Even with AI you still have to write your unit tests","url":"https://dev.to/lizzzzz/dont-make-assumptions-about-assertions-even-with-ai-you-still-have-to-write-your-unit-tests-4053","date":1761522026,"author":"Liz Acosta","guid":315553,"unread":true,"content":"<p>This blog post talks about why making assumptions about assertions makes not one “ass,” but two – which is especially true in this new age of AI. You’re not going to like this, but guess what? You still have to write your unit tests. (Sorry!)</p>\n\n<p>But that’s not necessarily a bad thing! If this blog post doesn’t convince you of that, then I at least hope to invite you to reconsider your feelings about unit testing by taking a closer look at the most important component of the AAA test pattern: the assertion.</p>\n\n<h2>\n  \n  \n  How to get the most out of this blog post\n</h2>\n\n<p>This blog post is designed to accommodate many different learning styles so you can choose your own adventure:</p>\n\n<ul>\n<li>\n<a href=\"https://utm.guru/ujh5X\" rel=\"noopener noreferrer\"><strong>Jump straight to the code</strong></a>: Use the README to get it up and running locally.</li>\n<li>\n<strong>The key to human productivity or a “disconcerting trend”?</strong>: A tale of two reports and their findings about AI, developer productivity, and code churn. (And why <em>human generated</em> tests are important.)</li>\n<li>\n<strong>A quick review of unit tests</strong>: In case you need it.</li>\n<li>\n<strong>Writing unit tests doesn’t have to be horrible</strong>: How we can use the assert methods included with Python’s unittest framework to make writing tests less awful.</li>\n<li>\n<strong>Using more precise assert methods to write better unit tests</strong>: A walk-through of some code in which we’ll explore the effects of using different kinds of assert methods so you can experience that “<em>Aha!</em>” moment first-hand.</li>\n<li>\n<strong>Resources and references</strong>: Links to more information.</li>\n</ul>\n\n<h2 id=\"ai-generated-code\">AI generated code: The key to human productivity or a “disconcerting trend”?</h2>\n\n<p>In June 2022, <strong>GitHub Copilot</strong> <a href=\"https://utm.guru/ujh57\" rel=\"noopener noreferrer\">went GA</a>. A year later, in June 2023, a GitHub blog post proclaimed that “<a href=\"https://utm.guru/ujh56\" rel=\"noopener noreferrer\">AI developer productivity benefits could <strong>boost global GDP by over $1.5 trillion</strong></a>,” citing a February 2023 research paper about an experiment in which a group of programmers with “<a href=\"https://utm.guru/ujh55\" rel=\"noopener noreferrer\">access to GitHub Copilot was able to complete the task [of implementing an HTTP server in JavaScript as quickly as possible] 55.8% faster</a>” than a control group without help from AI.</p>\n\n<p>It is worth noting that of the paper’s four authors, three of them are associated with GitHub or its parent company Microsoft.</p>\n\n<p>In response to this “promise to increase human productivity,” <strong>GitClear</strong>, a software engineering intelligence platform, asked the question, “<strong>How does this profusion of LLM generated code affect quality and maintainability?</strong>” To answer that question, GitClear collected 153 million changed lines of code authored between January 2020 and December 2023, and evaluated the data for differences in code quality. At the time, it was the largest known database of highly structured code change data used for this purpose, and included repos owned by Google, Microsoft, Meta, and enterprise C-Corps.</p>\n\n<p>What GitClear found was “<a href=\"https://utm.guru/ujh54\" rel=\"noopener noreferrer\">disconcerting trends for maintainability</a>.” The authors of the report drew this conclusion from two factors they observed notable changes in following the general availability of GitHub Copilot:</p>\n\n<p><strong>Code churn</strong></p>\n\n<p>“Code churn” refers to the percentage of lines that are reverted or updated less than two weeks after being authored. In other words, this is code that was probably authored in one sprint and then reverted or updated in the next sprint because the changes were either incomplete or erroneous. The report noted that code churn increased around the same time as the release of GitHub Copilot and projected that it would continue to do so.</p>\n\n<p><strong>Added and copy-pasted code</strong></p>\n\n<p>This refers to code that is newly authored instead of code that is “updated,” “deleted,” or “moved.” The report goes on to explain that an increase in adding new code instead of refactoring existing code “resembles an itinerant contributor, prone to violate the DRY-ness of the repos visited.” (DRY is an acronym for the “Don’t Repeat Yourself” <a href=\"https://utm.guru/ujh51\" rel=\"noopener noreferrer\">tenet of software engineering</a>.) And who might that “itinerant contributor” be? Yup – AI.</p>\n\n<p>(No, AI didn’t write that. I’ve always been a prolific em-dash user so AI probably stole its usage <em>from</em> <em>me</em>.)</p>\n\n<h3>\n  \n  \n  So what can we, as developers, take away from this?\n</h3>\n\n<p>While both the GitHub and the GitClear reports don’t try to hide their bias or content marketing intentions, we can still glean some useful insights from them:</p>\n\n<ul>\n<li>You’re probably going to encounter AI generated code – whether you’re the one adding it or you’re reading/reviewing AI generated code that someone else added.</li>\n<li>I’m sorry, but <strong>you still have to write your unit tests</strong>. Now more so than ever.</li>\n</ul>\n\n<p>… but that’s not a bad thing. (Stay with me here.)</p>\n\n<h2 id=\"unit-test-review\">A quick review of unit tests</h2>\n\n<h3>\n  \n  \n  What is unit testing?\n</h3>\n\n<p>Unit testing is the process of <strong>evaluating and verifying</strong> that the <strong>smallest functional units of code</strong> do what they are supposed to do <strong>individually and independently</strong>. So if we have a web application that allows a user to view collections of Pokemon according to ability, color, or type, we might have a Pokemon object with methods that perform tasks such as calling a Pokemon API endpoint, processing whatever response we get back from that endpoint, and then transforming that processed response into something we can display in a browser for the user. Our unit tests would act on each method individually and independently to verify that each method performs as expected.</p>\n\n<p>The idea is that if each “ingredient” of a whole application is correct, then we can assume the end result will turn out the way we want. We can assume that if we have the right kind of tomato sauce, crust, and toppings, our pizza will be edible <em>and</em> delicious.</p>\n\n<p>Unit tests are just one kind of software testing. There are lots of different types of tests that try to answer different types of questions such as, “Do all the different parts of this system actually work together?” and, “What happens if I throw in this totally wild edge case – will my system survive?”</p>\n\n<p>(This is where I trot out my software testing alignment chart because it’s probably one of the most clever things I’ve ever created and people seem to really like it!)</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ftq2v4r68ccej73s7c03u.webp\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ftq2v4r68ccej73s7c03u.webp\" alt=\"A Dungeons and Dragons style alignment chart that lists different kinds of software testing and where they fall on the spectrum of good to evil and lawful to chaotic.\" width=\"800\" height=\"547\"></a></p>\n\n<h3>\n  \n  \n  The benefits of unit tests\n</h3>\n\n<p>The benefits of unit tests include:</p>\n\n<ul>\n<li>Preventing bugs</li>\n<li>Accelerating development</li>\n<li>Saving money</li>\n</ul>\n\n<p>But the most <strong>compelling</strong> <strong>benefit</strong> of unit tests is they help us become <strong>better engineers</strong>. Unit tests force us to ask ourselves, “What actually <em>is</em> the expected behavior of this method?” In the best case scenario, unit tests reveal code smells or redundancy or unnecessary complexity that motivate us to <strong>refactor</strong> the code under test.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fkktkhu6u6e33pnbbngfu.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fkktkhu6u6e33pnbbngfu.png\" alt=\"A LinkedIn post that says: I do not understand the average developer's revulsion toward refactoring. Refactoring has been my favorite part of being a software engineer because You learn about software architecture though re-structuring, You learn about new libraries to solve problems you are facing, You learn best practices studying how others solved your problem, You learn how to document and make your code readable, You learn to take pride in your work. I am obsessed with refactoring because when you're refactoring, you're literally learning how to write better code.\" width=\"800\" height=\"770\"></a></p>\nA <a href=\"https://www.linkedin.com/feed/update/urn:li:activity:7384647063281651712\" rel=\"noopener noreferrer\">LinkedIn post</a> in praise of refactoring and why.\n\n\n\n<h3>\n  \n  \n  Unit tests and AI\n</h3>\n\n<p>“But Liz!” you say, “Writing unit tests is <em>so tedious and boring!</em> Won’t I be more productive if I get AI to write them?”</p>\n\n<p>Maybe.</p>\n\n<p>After all, if these LLMs are trained on millions of lines of code and all of the internet, isn’t using AI to write unit tests kind of exactly like copying and pasting a solution from Stack Overflow? That time-honored tradition of software engineering?</p>\n\n<p>If someone else has already figured it out, why not reuse their solution? Is that not in alignment with the DRY principle?</p>\n\n<p>What could go wrong?</p>\n\n<p>To answer that, here’s an excerpt from the GitHub paper on AI powered productivity mentioned above:</p>\n\n<blockquote>\n<p>“We included a test suite in the repository, comprising twelve checks for submission correctness. If a submission passes, all twelve tests we counted are successfully completed. Participants could see the tests but were unable to alter them.”</p>\n</blockquote>\n\n<p>In order to ensure that both the AI enabled and control groups of programmers tasked with spinning up a server did so correctly, the <strong><em>tests were written first</em></strong>. Whether the code was human or AI generated, it was <strong><em>verified with tests provided by the researchers</em></strong>.</p>\n\n<p>And anyway, would you really trust an LLM trained on the tests most developers write?</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Flw0qrpjzmolnxuwp7auk.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Flw0qrpjzmolnxuwp7auk.png\" alt=\"A LinkedIn post that says: A cruel irony of coding agents is that everyone who blew off automated testing for the past 20 years is now telling the AI to do TDD all the time. But because LLMs were trained on decades of their shitty tests, the agents are also terrible at testing.\" width=\"800\" height=\"373\"></a></p>\nA <a href=\"https://www.linkedin.com/posts/searls_a-cruel-irony-of-coding-agents-is-that-everyone-activity-7383097357816602624-cLY5\" rel=\"noopener noreferrer\">LinkedIn post</a> describing why LLMs are bad at writing tests.\n\n\n\n<h2 id=\"not-horrible\">Writing unit tests doesn’t have to be horrible</h2>\n\n<p>Personally, I would love to one day achieve the disciplined zen of <strong><a href=\"https://utm.guru/ujh5Y\" rel=\"noopener noreferrer\">test driven development</a></strong>, but jumping right into the application code is just so much more seductive. It’s like eating dessert first, and while eating dessert first isn’t necessarily “bad” (we’re adults who can make our own decisions), it’s probably not great for us nutritionally in the long run. So how can we write unit tests in a way that is efficient and optimized? Unit tests that are <strong>modular</strong> and <strong>maintainable</strong> and leverage all of the tools in our toolkit?</p>\n\n<h3>\n  \n  \n  The AAAs of testing\n</h3>\n\n<p>Typically, a test follows this pattern:</p>\n\n<ol>\n<li>\n<strong>Arrange</strong>: Set up the test environment. This can include fixtures, mocks, or context managers – whatever is needed to execute the code under test. When it comes to unit tests, the test environments for each test should be isolated from each other.</li>\n<li>\n<strong>Act</strong>: Execute the code under test. If it’s an end-to-end test, this might mean kicking off a workflow that includes multiple services and dependencies. In a unit test, however, this should be a single method.</li>\n<li>\n<strong>Assert</strong>: Verify the results. Compare the expected result with the test results – did the code do what you want it to do? This is the most important part of the test and in unit tests, it is (usually) best practice to have one precise assertion per test. </li>\n</ol>\n\n<p>Keeping this pattern in mind can help make it easier to write unit tests.</p>\n\n<h3>\n  \n  \n  Don’t make assumptions about assertions\n</h3>\n\n<p>When you make assumptions about assertions, you end up with not <em>one</em> “ass,” but <em>two</em>. Just because you have 100% test coverage and everything is passing, it doesn’t mean your tests are actually <em>meaningful</em> or – and here’s the “galaxy brain” revelation for you – <em>maintainable</em>.</p>\n\n<p>In Python’s untittest specifically, assert methods come included with the <code>TestCase</code> class. <a href=\"https://utm.guru/ujh52\" rel=\"noopener noreferrer\">These methods check for and report failures</a>. You are probably familiar with the tried and true <code>assertEqual</code> method, in which one argument is compared with another, and if the two do not match, result in a test failure … but did you know that there are <em>so many more specific and precise assertions</em> available to you? All out of the box?</p>\n\n<p>Take a look at these!</p>\n\n<p>Most common assert methods:</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<tbody>\n<tr>\n<td>\n<p><span>Method</span></p>\n</td>\n<td>\n<p><span>Checks that ...</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual\" rel=\"noopener noreferrer\"><span>assertEqual(a, b)</span></a></p>\n</td>\n<td>\n<p><span>a == b</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotEqual\" rel=\"noopener noreferrer\"><span>assertNotEqual(a, b)</span></a></p>\n</td>\n<td>\n<p><span>a != b</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertTrue\" rel=\"noopener noreferrer\"><span>assertTrue(x)</span></a></p>\n</td>\n<td>\n<p><span>bool(x) is True</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertFalse\" rel=\"noopener noreferrer\"><span>assertFalse(x)</span></a></p>\n</td>\n<td>\n<p><span>bool(x) is False</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIs\" rel=\"noopener noreferrer\"><span>assertIs(a, b)</span></a></p>\n</td>\n<td>\n<p><span>a is b</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsNot\" rel=\"noopener noreferrer\"><span>assertIsNot(a, b)</span></a></p>\n</td>\n<td>\n<p><span>a is not b</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsNone\" rel=\"noopener noreferrer\"><span>assertIsNone(x)</span></a></p>\n</td>\n<td>\n<p><span>x is None</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsNotNone\" rel=\"noopener noreferrer\"><span>assertIsNotNone(x)</span></a></p>\n</td>\n<td>\n<p><span>x is not None</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIn\" rel=\"noopener noreferrer\"><span>assertIn(a, b)</span></a></p>\n</td>\n<td>\n<p><span>a in b</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotIn\" rel=\"noopener noreferrer\"><span>assertNotIn(a, b)</span></a></p>\n</td>\n<td>\n<p><span>a not in b</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsInstance\" rel=\"noopener noreferrer\"><span>assertIsInstance(a, b)</span></a></p>\n</td>\n<td>\n<p><span>isinstance(a, b)</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotIsInstance\" rel=\"noopener noreferrer\"><span>assertNotIsInstance(a, b)</span></a></p>\n</td>\n<td>\n<p><span>not isinstance(a, b)</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsSubclass\" rel=\"noopener noreferrer\"><span>assertIsSubclass(a, b)</span></a></p>\n</td>\n<td>\n<p><span>issubclass(a, b)</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotIsSubclass\" rel=\"noopener noreferrer\"><span>assertNotIsSubclass(a, b)</span></a></p>\n</td>\n<td>\n<p><span>not issubclass(a, b)</span></p>\n</td>\n</tr>\n</tbody>\n</table></div>\n\n<p>Assert methods that check the production of exceptions, warnings, and log messages:</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<tbody>\n<tr>\n<td>\n<p><strong>Method</strong></p>\n</td>\n<td>\n<p><strong>Checks that ...</strong></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises\" rel=\"noopener noreferrer\"><span>assertRaises(exc, fun, *args, **kwds)</span></a></p>\n</td>\n<td>\n<p><span>fun(*args, **kwds) raises </span><em><span>exc</span></em></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaisesRegex\" rel=\"noopener noreferrer\"><span>assertRaisesRegex(exc, r, fun, *args, **kwds)</span></a></p>\n</td>\n<td>\n<p><span>fun(*args, **kwds) raises </span><em><span>exc</span></em><span> and the message matches regex </span><em><span>r</span></em></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertWarns\" rel=\"noopener noreferrer\"><span>assertWarns(warn, fun, *args, **kwds)</span></a></p>\n</td>\n<td>\n<p><span>fun(*args, **kwds) raises </span><em><span>warn</span></em></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertWarnsRegex\" rel=\"noopener noreferrer\"><span>assertWarnsRegex(warn, r, fun, *args, **kwds)</span></a></p>\n</td>\n<td>\n<p><span>fun(*args, **kwds) raises </span><em><span>warn</span></em><span> and the message matches regex </span><em><span>r</span></em></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertLogs\" rel=\"noopener noreferrer\"><span>assertLogs(logger, level)</span></a></p>\n</td>\n<td>\n<p><span>The with block logs on </span><em><span>logger</span></em><span> with minimum </span><em><span>level</span></em></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNoLogs\" rel=\"noopener noreferrer\"><span>assertNoLogs(logger, level)</span></a></p>\n</td>\n<td>\n<p><span>The with block does not log on </span><em><span>logger</span></em><span> with minimum </span><em><span>level</span></em></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises\" rel=\"noopener noreferrer\"><span>assertRaises(exc, fun, *args, **kwds)</span></a></p>\n</td>\n<td>\n<p><span>fun(*args, **kwds) raises </span><em><span>exc</span></em></p>\n</td>\n</tr>\n</tbody>\n</table></div>\n\n<p>Even more specific checks:</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<tbody>\n<tr>\n<td>\n<p><strong>Method</strong></p>\n</td>\n<td>\n<p><strong>Checks that ...</strong></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertAlmostEqual\" rel=\"noopener noreferrer\"><span>assertAlmostEqual(a, b)</span></a></p>\n</td>\n<td>\n<p><span>round(a-b, 7) == 0</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotAlmostEqual\" rel=\"noopener noreferrer\"><span>assertNotAlmostEqual(a, b)</span></a></p>\n</td>\n<td>\n<p><span>round(a-b, 7) != 0</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertGreater\" rel=\"noopener noreferrer\"><span>assertGreater(a, b)</span></a></p>\n</td>\n<td>\n<p><span>a &gt; b</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertGreaterEqual\" rel=\"noopener noreferrer\"><span>assertGreaterEqual(a, b)</span></a></p>\n</td>\n<td>\n<p><span>a &gt;= b</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertLess\" rel=\"noopener noreferrer\"><span>assertLess(a, b)</span></a></p>\n</td>\n<td>\n<p><span>a &lt; b</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertLessEqual\" rel=\"noopener noreferrer\"><span>assertLessEqual(a, b)</span></a></p>\n</td>\n<td>\n<p><span>a &lt;= b</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRegex\" rel=\"noopener noreferrer\"><span>assertRegex(s, r)</span></a></p>\n</td>\n<td>\n<p><span>r.search(s)</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotRegex\" rel=\"noopener noreferrer\"><span>assertNotRegex(s, r)</span></a></p>\n</td>\n<td>\n<p><span>not r.search(s)</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertCountEqual\" rel=\"noopener noreferrer\"><span>assertCountEqual(a, b)</span></a></p>\n</td>\n<td>\n<p><em><span>a</span></em><span> and </span><em><span>b</span></em><span> have the same elements in the same number, regardless of their order</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertStartsWith\" rel=\"noopener noreferrer\"><span>assertStartsWith(a, b)</span></a></p>\n</td>\n<td>\n<p><span>a.startswith(b)</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotStartsWith\" rel=\"noopener noreferrer\"><span>assertNotStartsWith(a, b)</span></a></p>\n</td>\n<td>\n<p><span>not a.startswith(b)</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEndsWith\" rel=\"noopener noreferrer\"><span>assertEndsWith(a, b)</span></a></p>\n</td>\n<td>\n<p><span>a.endswith(b)</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotEndsWith\" rel=\"noopener noreferrer\"><span>assertNotEndsWith(a, b)</span></a></p>\n</td>\n<td>\n<p><span>not a.endswith(b)</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertHasAttr\" rel=\"noopener noreferrer\"><span>assertHasAttr(a, b)</span></a></p>\n</td>\n<td>\n<p><span>hastattr(a, b)</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotHasAttr\" rel=\"noopener noreferrer\"><span>assertNotHasAttr(a, b)</span></a></p>\n</td>\n<td>\n<p><span>not hastattr(a, b)</span></p>\n</td>\n</tr>\n</tbody>\n</table></div>\n\n<p>Type specific assertEqual methods:</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<tbody>\n<tr>\n<td>\n<p><strong>Method</strong></p>\n</td>\n<td>\n<p><strong>Compares ...</strong></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertMultiLineEqual\" rel=\"noopener noreferrer\"><span>assertMultiLineEqual(a, b)</span></a></p>\n</td>\n<td>\n<p><span>strings</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertSequenceEqual\" rel=\"noopener noreferrer\"><span>assertSequenceEqual(a, b)</span></a></p>\n</td>\n<td>\n<p><span>sequences</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertListEqual\" rel=\"noopener noreferrer\"><span>assertListEqual(a, b)</span></a></p>\n</td>\n<td>\n<p><span>lists</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertTupleEqual\" rel=\"noopener noreferrer\"><span>assertTupleEqual(a, b)</span></a></p>\n</td>\n<td>\n<p><span>tuples</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertSetEqual\" rel=\"noopener noreferrer\"><span>assertSetEqual(a, b)</span></a></p>\n</td>\n<td>\n<p><span>sets or frozensets</span></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertDictEqual\" rel=\"noopener noreferrer\"><span>assertDictEqual(a, b)</span></a></p>\n</td>\n<td>\n<p><span>dicts</span></p>\n</td>\n</tr>\n</tbody>\n</table></div>\n\n<p>Using a more precise assert method can help refine your unit tests and make the work of writing them more efficient and optimized.</p>\n\n<h2 id=\"using-assert-methods\">Getting your hands dirty: Using more precise assert methods to write better unit tests</h2>\n\n<p>What I appreciate most about developers as an audience is the emphasis on <em>showing</em> rather than <em>telling</em> because personally, I need to see something before I believe it, too. It’s even better when I get to run the code myself and arrive at that “Aha!” moment on my own. Hands-on is the best way to learn.</p>\n\n<h3>\n  \n  \n  An artisanal, handcrafted, slow coded Pokemon Flask app\n</h3>\n\n<p>You’ve heard of “no code,” right? Well, get ready for “slow code.”</p>\n\n<p>I wanted to see if I could use <strong>Cursor</strong>, an AI-powered code editor, to write my unit tests, but I needed some code to test first. I decided to code – by hand – a very simple Pokedex Flask app. Sure, I could have prompted Cursor to do it for me, but that seemed to defeat the purpose of the experiment. Nor does it really simulate a real world use case since most professional developers are probably working with existing pre-AI code, and, more than that, I <em>wanted</em> to write some Python. Isn’t that why I do this? Because it’s enjoyable?</p>\n\n<p>Yeah, it’s “slow code” – and it’s important. Programming is a muscle, and if you don’t exercise it regularly, it atrophies. I understand that the craft of code is often not as important as the profit it produces, but at what cost? I could have prompted an LLM to generate this blog post, but I didn’t, because I <em>like writing</em>. Every blog post I write myself makes me a better writer; every line of code I write makes me a better programmer. It’s that hands-on learning thing.</p>\n\n<p>So I wrote my app by hand, using a forked minimal Flask template to avoid the boilerplate code. I ended up with a web app that uses <a href=\"https://utm.guru/ujh7I\" rel=\"noopener noreferrer\">an API endpoint</a> to view collections of Pokemon according to ability, color, or type. I muddled through the limited JavaScript the app implements and used a Python-wrapped Bootstrap library for the styling. It’s not very complicated so using Cursor to write the unit tests should be a simple task – right?</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fw95gum6u685odb247p6v.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fw95gum6u685odb247p6v.png\" alt=\"A screenshot from the handcrafted Flask app showing all the pins Pokemon\" width=\"800\" height=\"398\"></a></p>\nAll the pink Pokemon all in one place.\n\n\n\n<h3>\n  \n  \n  A look at the AI generated unit tests\n</h3>\n\n<p>My prompt was simple: <code>generate unit tests for pokemon.py using unittest</code></p>\n\n<p>Let’s take a look at what we ended up with. Feel free to pull down the code <a href=\"https://utm.guru/ujh5X\" rel=\"noopener noreferrer\">here</a> and check it out.</p>\n\n<p>To start things off, let’s see if the tests pass and what kind of coverage they provide.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nt\">----------------------------------------------------------------------</span>\n\nRan 12 tests <span class=\"k\">in </span>0.008s\n\nOK\n</code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>Name              Stmts   Miss  Cover\n\n<span class=\"nt\">-------------------------------------</span>\n\npokemon.py           29      0   100%\n\ntest_pokemon.py     147      1    99%\n\n<span class=\"nt\">-------------------------------------</span>\n\nTOTAL               176      1    99%\n\n</code></pre>\n\n</div>\n\n\n\n<p>Passing tests and 100% coverage. We’re off to a promising start … or are we? Not all coverage is created equally, so it’s worth investigating the tests themselves.</p>\n\n<p><strong>Funky fixtures</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">setUp</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Set up test fixtures before each test method.</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">mock_response</span> <span class=\"o\">=</span> <span class=\"nc\">Mock</span><span class=\"p\">()</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">mock_response</span><span class=\"p\">.</span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">return_value</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">tearDown</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Clean up after each test method.</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">pass</span>\n</code></pre>\n\n</div>\n\n\n\n<p>We begin benign enough with some test fixtures in which a mock response is created for every test method in the class. Things start to get a little “smelly” when we examine the teardown method, which is just a <code>pass</code>. In this particular case, the mock object would already be inaccessible beyond the test function it is created within, so while the teardown ensures it is truly gone, it’s a little excessive, and renders the whole fixture moot. Test fixtures can be very useful, especially when creating isolated, independent test environments, but in this scenario, it doesn’t seem to be adding to the meaningfulness of the tests.</p>\n\n<p>Furthermore, mock responses are created in each of the test functions, making the fixture even more redundant. (Read more about <a href=\"https://utm.guru/ujh50\" rel=\"noopener noreferrer\">test fixtures</a> and <a href=\"https://utm.guru/ujh5Z\" rel=\"noopener noreferrer\">mocks</a>.)</p>\n\n<p>So already we find ourselves having to refactor AI generated code.</p>\n\n<p>Now let’s take a look at the first test and its assertions.</p>\n\n<p><strong>More maintainable, human friendly tests</strong></p>\n\n<p>Like their source code, tests will need to be updated as a system evolves. The more “finding and replacing” you need to conduct, the more brittle and unreliable your tests are. Using variables instead of “magic values” can reduce the number of instances that require updating. In this example, we’ve replaced the magic test values and expected values with a variable. Our test is now more modular and easier to maintain.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Act: Execute the code under test\n# Test the function\n</span>\n<span class=\"n\">test_input</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span>\n<span class=\"n\">test_result</span> <span class=\"o\">=</span> <span class=\"nf\">get_attributes</span><span class=\"p\">(</span><span class=\"n\">test_input</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Assert: Check the results\n</span>\n<span class=\"c1\"># Add a message for the assert methods\n</span><span class=\"n\">assert_message</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">For test values: </span><span class=\"si\">{</span><span class=\"n\">test_input</span><span class=\"si\">}</span><span class=\"s\"> </span><span class=\"sh\">\"</span> \\\n    <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">the function produced: </span><span class=\"si\">{</span><span class=\"n\">test_result</span><span class=\"si\">}</span><span class=\"s\">.</span><span class=\"sh\">\"</span>\n\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">test_result</span><span class=\"p\">,</span> <span class=\"n\">expected_result</span><span class=\"p\">)</span>\n\n</code></pre>\n\n</div>\n\n\n\n<p>The <code>TestCase</code> assert methods also take a message argument: <code>assertEqual(arg1, arg2, msg=None)</code> The value provided for <code>msg</code> outputs when a test fails. This can give us more information about a test failure, which makes it easier to fix or debug.</p>\n\n<p>Let’s add a test that will fail:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Add a test failure to demonstrate ouput\n</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">assertIsNone</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">something</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Without a message, this is what our test failure looks like:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>AssertionError: <span class=\"s1\">'something'</span> is not None\n</code></pre>\n\n</div>\n\n\n\n<p>With a message, and utilizing the variables we created, even our failures become helpful:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Add a test failure to demonstrate ouput\n</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">assertIsNone</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">something</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"n\">assert_message</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>AssertionError: <span class=\"s1\">'something'</span> is not None : For <span class=\"nb\">test </span>values: <span class=\"nb\">type </span>the <span class=\"k\">function </span>produced: <span class=\"o\">[</span><span class=\"s1\">'fire'</span>, <span class=\"s1\">'water'</span>, <span class=\"s1\">'grass'</span><span class=\"o\">]</span><span class=\"nb\">.</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Too many assertions</strong></p>\n\n<p>There are competing philosophies on the number of assertions that a test should contain. Some people will tell you that a unit test should have only one assertion and others might tell you that more than one is okay. When writing tests, it’s important to remember that the assert methods provided by <code>TestCase</code> “check for and report failures.” Imagine if all of these assertions result in failures you have to then fix or debug. Do these failures actually tell us anything about the code under test?<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Assertions\n</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">assertIsInstance</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span>\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">assertEqual</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">),</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">assertIn</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">fire</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">assertIn</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">water</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">assertIn</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">grass</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">fire</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">water</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">grass</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n</code></pre>\n\n</div>\n\n\n\n<p>If we look at the code under test, a list of strings is returned. That’s it, that’s all that happens. While this code is not code you’d want to push to production, it is the code we are testing.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">get_attributes</span><span class=\"p\">(</span><span class=\"n\">attribute</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">BASE_URL</span> <span class=\"o\">+</span> <span class=\"n\">attribute</span><span class=\"p\">)</span>\n    <span class=\"n\">response_json</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n\n    <span class=\"n\">attributes_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">response_json</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">results</span><span class=\"sh\">\"</span><span class=\"p\">]]</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">attributes_list</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Do we really need to assert on the specific contents of the list? Especially if this particular function doesn’t do anything with those contents? We probably want to reduce the number of assertions in this test. We really only need to test whether or not the code produces a list.</p>\n\n<p>We can do that with <code>assertEqual(test_result, expected_result, msg=test_message</code> or we can eliminate yet another assertion (the <code>assertIsInstance</code>) with <code>assertListEqual</code> which will not only compare the lists, but also verify the list type.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">assertListEqual</span><span class=\"p\">(</span><span class=\"n\">test_result</span><span class=\"p\">,</span> <span class=\"n\">expected_result</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"n\">assert_message</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Don’t believe me? Let’s change <code>expected_result</code> to a string and see what happens when we use <code>assertListEqual</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Change `expected_result` to a string\n</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">assertListEqual</span><span class=\"p\">(</span><span class=\"n\">test_result</span><span class=\"p\">,</span> <span class=\"sh\">\"'</span><span class=\"s\">fire</span><span class=\"sh\">'</span><span class=\"s\">, </span><span class=\"sh\">'</span><span class=\"s\">water</span><span class=\"sh\">'</span><span class=\"s\">, </span><span class=\"sh\">'</span><span class=\"s\">grass</span><span class=\"sh\">'\"</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"n\">assert_message</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nb\">AssertionError</span><span class=\"p\">:</span> <span class=\"n\">Second</span> <span class=\"n\">sequence</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">a</span> <span class=\"nb\">list</span><span class=\"p\">:</span> <span class=\"sh\">\"'</span><span class=\"s\">fire</span><span class=\"sh\">'</span><span class=\"s\">, </span><span class=\"sh\">'</span><span class=\"s\">water</span><span class=\"sh\">'</span><span class=\"s\">, </span><span class=\"sh\">'</span><span class=\"s\">grass</span><span class=\"sh\">'\"</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The test fails. Now we’ve verified not only the test result itself, but the test result type as well.</p>\n\n<p>Can we eliminate another assertion? Let’s see!</p>\n\n<p>Let’s say we want to also make sure we don’t end up with an empty list even though we might not know the exact number of list elements we will end up with. This is where we can use <code>assertGreaterThan</code> and create a variable <code>list_minimum = 0</code> for the minimum value we can accept – which, in this case, is zero.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">assertGreater</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">test_result</span><span class=\"p\">),</span> <span class=\"n\">list_minimum</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"n\">assert_message</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>No comment please</strong></p>\n\n<p>This is just a nit, but the AI generated tests included this comment:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">fire</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">water</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">grass</span><span class=\"sh\">\"</span><span class=\"p\">])</span>  <span class=\"c1\"># Order matters for this function\n</span></code></pre>\n\n</div>\n\n\n\n<p>Nothing in the code suggests that, so it’s just a random comment. In response, I added my own useless comment: <code># No, it doesn't</code></p>\n\n<p>(I don’t cover the rest of the tests here, but if you <a href=\"https://utm.guru/ujh5X\" rel=\"noopener noreferrer\">check out the code</a>, I’ve commented on the parts of the tests that I would have to refactor if I wanted to make this code production ready.) </p>\n\n<p><strong>Before and after</strong></p>\n\n<p>Comparing the test before and after, our new test is a lot more succinct, meaningful, and maintainable. Now, no matter how the source code evolves, we can rely on this test to tell us if we’ve introduced any breaking changes.</p>\n\n<p>Before:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@patch</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">pokemon.requests.get</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_get_attributes_success</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">mock_get</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Test get_attributes function with successful API response.</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"c1\"># Mock the response\n</span>    <span class=\"n\">mock_response</span> <span class=\"o\">=</span> <span class=\"nc\">Mock</span><span class=\"p\">()</span>\n    <span class=\"n\">mock_response</span><span class=\"p\">.</span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">return_value</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">results</span><span class=\"sh\">\"</span><span class=\"p\">:[</span>\n                                                 <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">fire</span><span class=\"sh\">\"</span><span class=\"p\">},</span>               \n                                                 <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">water</span><span class=\"sh\">\"</span><span class=\"p\">},</span>\n                                                 <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">grass</span><span class=\"sh\">\"</span><span class=\"p\">}]}</span>\n    <span class=\"n\">mock_get</span><span class=\"p\">.</span><span class=\"n\">return_value</span> <span class=\"o\">=</span> <span class=\"n\">mock_response</span>\n\n    <span class=\"c1\"># Test the function\n</span>    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nf\">get_attributes</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Assertions\n</span>    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">assertIsInstance</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">assertEqual</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">),</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">assertIn</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">fire</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">assertIn</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">water</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">assertIn</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">grass</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">fire</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">water</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">grass</span><span class=\"sh\">\"</span><span class=\"p\">])</span>  <span class=\"c1\"># Order matters for this function\n</span>    <span class=\"n\">mock_get</span><span class=\"p\">.</span><span class=\"nf\">assert_called_once_with</span><span class=\"p\">(</span><span class=\"n\">BASE_URL</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>After:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@patch</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">pokemon.requests.get</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_get_attributes_success</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">mock_get</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Test get_attributes function with successful API response.</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"c1\"># Mock the response\n</span>    <span class=\"n\">mock_response</span> <span class=\"o\">=</span> <span class=\"nc\">Mock</span><span class=\"p\">()</span>\n    <span class=\"n\">mock_response</span><span class=\"p\">.</span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">return_value</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">results</span><span class=\"sh\">\"</span><span class=\"p\">:[</span>\n                                                 <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">fire</span><span class=\"sh\">\"</span><span class=\"p\">},</span>               \n                                                 <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">water</span><span class=\"sh\">\"</span><span class=\"p\">},</span>\n                                                 <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">grass</span><span class=\"sh\">\"</span><span class=\"p\">}]}</span>\n    <span class=\"n\">mock_get</span><span class=\"p\">.</span><span class=\"n\">return_value</span> <span class=\"o\">=</span> <span class=\"n\">mock_response</span>\n\n    <span class=\"c1\"># Test the function\n</span>    <span class=\"n\">test_input</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span>\n    <span class=\"n\">test_result</span> <span class=\"o\">=</span> <span class=\"nf\">get_attributes</span><span class=\"p\">(</span><span class=\"n\">test_input</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Assert\n</span>    <span class=\"n\">assert_message</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">For test values: </span><span class=\"si\">{</span><span class=\"n\">test_input</span><span class=\"si\">}</span><span class=\"s\"> </span><span class=\"sh\">\"</span> \\\n        <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">the function produced: </span><span class=\"si\">{</span><span class=\"n\">test_result</span><span class=\"si\">}</span><span class=\"s\">.</span><span class=\"sh\">\"</span>\n\n    <span class=\"n\">expected_result</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">fire</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">water</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">grass</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n    <span class=\"n\">list_minimum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">assertGreater</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">test_result</span><span class=\"p\">),</span> <span class=\"n\">list_minimum</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"n\">assert_message</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">assertListEqual</span><span class=\"p\">(</span><span class=\"n\">test_result</span><span class=\"p\">,</span> <span class=\"n\">expected_result</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"n\">assert_message</span><span class=\"p\">)</span>\n    <span class=\"n\">mock_get</span><span class=\"p\">.</span><span class=\"nf\">assert_called_once_with</span><span class=\"p\">(</span><span class=\"n\">BASE_URL</span> <span class=\"o\">+</span> <span class=\"sh\">'</span><span class=\"s\">type</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  In conclusion: Unit tests are the human in the loop\n</h2>\n\n<p>Whether your code is meticulously typed out character by character, copied and pasted from Stack Overflow, or generated by an LLM, unit tests are the quickest way to verify it operates as expected. Moreover, when we start with unit tests that are written with as much care and intention as the source code itself, we lay the foundation for efficiency and optimization which makes writing the next set of unit tests much less laborious and tedious. Solid unit tests are an investment in future productivity. While AI can “hallucinate,” it has no imagination or empathy, so it cannot write tests for the humans who will eventually be stuck deciphering test failures.</p>\n\n<p>What do you think? Do you think AI will get better at writing unit tests? Do you feel inspired to try out other assert methods in your testing?</p>\n\n<h2 id=\"resources-references\">Resources and references</h2>\n\n<ul>\n<li><a href=\"https://utm.guru/ujh5W\" rel=\"noopener noreferrer\">Python Testing – Unit Tests, Pytest, and Best Practices - DEV Community</a></li>\n<li><a href=\"https://utm.guru/ujh5V\" rel=\"noopener noreferrer\">The Arrange, Act, and Assert (AAA) Pattern in Unit Test Automation - Semaphore</a></li>\n<li><a href=\"https://utm.guru/ujh5U\" rel=\"noopener noreferrer\">Python assertEqual(): Test If Two Values are Equal</a></li>\n<li><a href=\"https://utm.guru/ujh5T\" rel=\"noopener noreferrer\">Stop requiring only one assertion per unit test: Multiple assertions are fine - Stack Overflow</a></li>\n<li>\n<a href=\"https://utm.guru/ujh5S\" rel=\"noopener noreferrer\">Mastering Unit Tests in Python: A Comprehensive Guide</a>\n</li>\n</ul>\n\n<p>❤️ If you found this blog post helpful, please consider <a href=\"https://utm.guru/uhSYX\" rel=\"noopener noreferrer\">buying me a coffee</a>.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Aliasing and Cloning can be carried out with list","url":"https://dev.to/onaolapo11/aliasing-and-cloning-can-be-carried-out-with-list-43ad","date":1761520042,"author":"Onaolapo-11","guid":315552,"unread":true,"content":"<p>Lists and tuples are similar but have some differences, e.g. lists are mutable, while tuples are immutable. Aliasing and Cloning can be carried out with list.</p>\n\n<p>I was unable to study on October 25th.</p>\n\n<p>*<em>Day 67 [October 26, 2025]<br>\n*</em><br>\nI need to buckle down, as I'm still lagging on day day 3 &amp; 4 goals, \"Day 3-4: Control structures (if-else, loops)\", as well as day 5 (and 6) goals, \"Day 5-6: Functions and modules\", and Day 7 target (exercises) (Meta AI, personal communication, August 8, 2025). If I haven't covered this, I can't make progress on day 8 - 66 goals.</p>\n\n<p><strong>Goals:</strong><br>\n<strong>As extracted from the 'Python for Software Development' textbook by Halvorsen (n.d.):</strong></p>\n\n<ul>\n<li>Plotting in Python ✅</li>\n<li>Subplots✅</li>\n<li>Exercises✅</li>\n<li>If ... Else</li>\n<li>Arrays</li>\n<li>For Loops</li>\n<li>Nested</li>\n<li>For Loops </li>\n<li>While Loops </li>\n<li>Exercises</li>\n<li>Creating Functions in Python - Introduction</li>\n<li>Functions with multiple return values</li>\n<li>Exercises</li>\n<li>Creating Classes in Python</li>\n<li>The init () Function</li>\n<li>Exercises</li>\n<li>Creating Python Modules</li>\n<li>Exercises</li>\n</ul>\n\n<p>Notes:<br>\nPython for Data Science, AI &amp; Development Course (IBM) (Santarcangelo, n.d.):<br>\nModule 2: Python Data Structures</p>\n\n<ul>\n<li>Lists and Tuples</li>\n<li>Dictionaries</li>\n<li>Sets</li>\n</ul>\n\n<p>Lists and Tuples</p>\n\n<ul>\n<li>Called Compound Data Types, so called because multiple values of different data types can be held in them, also allowing the organization and management of data collection (see also Google, 2025)</li>\n<li>List, sets, tuples, and dictionaries are important data structures in Python</li>\n<li>List operations include manipulation, indexing and sorting (MIS).</li>\n<li>Sets are an unordered collection. Why so?</li>\n</ul>\n\n<p>Tuples</p>\n\n<ul>\n<li>Ordered sequence.</li>\n<li>Strings, floats and integer can be held in a tuple. Index can be used to access elements in a tuple, as well as negative index.</li>\n<li>They can be concatenated and sliced.</li>\n<li>They are immutable. Hence, to have a tuple manipulated, a new object has to be made, e.g.</li>\n</ul>\n\n<p>tuple1 = (\"FLY\", 43, 2.3)<br>\ntuple2 = tuple1<br>\ntuple1= (\"chcijeb\",23)<br>\nprint(tuple2)<br>\nOutputs:<br>\n(\"FLY\", 43, 2.3)</p>\n\n<p>tuple1 = (\"FLY\", 43, 2.3)<br>\ntuple2 = tuple1<br>\ntuple1= (\"chcijeb\",23)<br>\ntuple2 = tuple1   #note here that we had to \"reassign\" the tuple<br>\nprint(tuple2)<br>\nOutputs:<br>\ntuple1= (\"chcijeb\",23)</p>\n\n<ul>\n<li>Tuples can also be nested.</li>\n</ul>\n\n<p>Lists</p>\n\n<ul>\n<li>Ordered sequence. Why?</li>\n<li>Mutable</li>\n<li>Can contain floats, strings and integers</li>\n<li>Can be nested with other lists, tuples and data structures</li>\n<li>Indexing is applicable here, as well as slicing and contacenating</li>\n<li>split() method is used to transform a string into a list separating the items differentiated by space into elements of the list, and if we had a delimiter, the delimiter serves as the means of separation for the characters of a string, e.g.:</li>\n</ul>\n\n<p>\"Fly up\".split()<br>\nOutputs:<br>\n[\"Fly\", \"up\"]</p>\n\n<p>and,</p>\n\n<p>\"F,l,y, u,p\".split(\",\")<br>\nOutputs:<br>\n['F', 'l', 'y', ' u', 'p']</p>\n\n<ul>\n<li>Aliasing (referencing of same list, that is, one (same) object is referenced by multiple names) and Cloning (creating a new copy of the original list) can be done with list.</li>\n<li>Changing the element of one list affects the other in Aliasing but not so in Cloning (which doesn't effect the changes in the other). Example,</li>\n</ul>\n\n<p>Aliasing:<br>\nFirst = [\"Arsenal\", 1, 1.0]<br>\nSecond = First<br>\nprint(First)<br>\nprint(Second)<br>\nSecond [1] = \"Chelsea\"<br>\nprint(First)<br>\nprint(Second)</p>\n\n<p>Outputs:<br>\n['Arsenal', 1, 1.0]<br>\n['Arsenal', 1, 1.0]<br>\n['Arsenal', 'Chelsea', 1.0]<br>\n['Arsenal', 'Chelsea', 1.0]</p>\n\n<p>Cloning:<br>\nFirst = [\"Arsenal\", 1, 1.0]<br>\nSecond = First[:]    #note the syntax here<br>\nprint(First)<br>\nprint(Second)<br>\nSecond [1] = \"Chelsea\"<br>\nprint(First)<br>\nprint(Second)</p>\n\n<p>Outputs:<br>\n['Arsenal', 1, 1.0]<br>\n['Arsenal', 1, 1.0]<br>\n['Arsenal', 1, 1.0]<br>\n['Arsenal', 'Chelsea', 1.0]</p>\n\n<p><strong>Summary:</strong><br>\nLists and tuples are similar but have some differences, e.g. lists are mutable, while tuples are immutable. Aliasing and Cloning can be carried out with list.</p>\n\n<p><strong>References:</strong></p>\n\n<ol>\n<li><p>Google. (2025). <em>Google Search with AI</em>. [Large language model]. <a href=\"https://www.google.com/search?q=compound+data+types+in+python&amp;sca_esv=e56551571a6f13fc&amp;sxsrf=AE3TifN4D5tW7DPCYkIdMEQQ-T-IXi02Gw%3A1761344018252&amp;ei=Evr7aOqRD9qwhbIP6OfVOQ&amp;oq=Compound+Data+Types&amp;gs_lp=Egxnd3Mtd2l6LXNlcnAiE0NvbXBvdW5kIERhdGEgVHlwZXMqAggAMgoQABiwAxjWBBhHMgoQABiwAxjWBBhHMgoQABiwAxjWBBhHMgoQABiwAxjWBBhHMgoQABiwAxjWBBhHMgoQABiwAxjWBBhHMgoQABiwAxjWBBhHMgoQABiwAxjWBBhHSIsIUABYAHABeAGQAQCYAQCgAQCqAQC4AQHIAQCYAgGgAgyYAwCIBgGQBgiSBwExoAcAsgcAuAcAwgcDMy0xyAcJ&amp;sclient=gws-wiz-serp\" rel=\"noopener noreferrer\">https://www.google.com/search?q=compound+data+types+in+python&amp;sca_esv=e56551571a6f13fc&amp;sxsrf=AE3TifN4D5tW7DPCYkIdMEQQ-T-IXi02Gw%3A1761344018252&amp;ei=Evr7aOqRD9qwhbIP6OfVOQ&amp;oq=Compound+Data+Types&amp;gs_lp=Egxnd3Mtd2l6LXNlcnAiE0NvbXBvdW5kIERhdGEgVHlwZXMqAggAMgoQABiwAxjWBBhHMgoQABiwAxjWBBhHMgoQABiwAxjWBBhHMgoQABiwAxjWBBhHMgoQABiwAxjWBBhHMgoQABiwAxjWBBhHMgoQABiwAxjWBBhHMgoQABiwAxjWBBhHSIsIUABYAHABeAGQAQCYAQCgAQCqAQC4AQHIAQCYAgGgAgyYAwCIBgGQBgiSBwExoAcAsgcAuAcAwgcDMy0xyAcJ&amp;sclient=gws-wiz-serp</a></p></li>\n<li><p>Halvorsen, H. (n.d.). <em>Python</em>. <a href=\"https://halvorsen.blog/documents/programming/python/python.php#python4\" rel=\"noopener noreferrer\">https://halvorsen.blog/documents/programming/python/python.php#python4</a></p></li>\n<li><p>Santarcangelo, J. (n.d.). <em>Python for data science, AI &amp; development</em> [MOOC]. Coursera. <a href=\"https://coursera.org/learn/python-for-applied-data-science-ai\" rel=\"noopener noreferrer\">https://coursera.org/learn/python-for-applied-data-science-ai</a></p></li>\n</ol>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 16 of documentating my learning journey","url":"https://dev.to/james_kabuga/day-16-of-documentating-my-learning-journey-2j0k","date":1761515074,"author":"James Kabuga","guid":315516,"unread":true,"content":"<p><strong>What I learnt Today</strong></p>\n\n<p>1.Learnt while loops and how to impliment them.</p>\n\n<p><strong>On what I Learnt</strong></p>\n\n<p>While loops are a bit different from for loops as one has to create an initializer.</p>\n\n<p>And in a while loop the condition at 1st has to be true so it can print a certain statement.</p>\n\n<p>Also in a while loop it can be used when we don't know the number of times we want to iterate.</p>\n\n<p>At the end we have to specify if we want to increment or decrement depending on what we want to achieve.</p>\n\n<p>We apply incrementation or decrementation by reassigning the varible. </p>\n\n<p>Syntax for a while-loop:</p>\n\n<blockquote>\n<p>Count =0<br>\nwhile condition:<br>\nDo sth<br>\nCount += 1 or Count -= 1</p>\n</blockquote>\n\n<p>Count =0 is the initalizer<br>\nCount +=1 is reassigning the variable.</p>\n\n<p>I wrote a python script that prints even numbers between 1 and 20 </p>\n\n<p><strong>Resources I used</strong></p>\n\n<p>A python refresher series by Bonaventure Ogeto</p>\n\n<p>Github for documentating my learning journey in python.</p>\n\n<p><strong>What's Next</strong></p>\n\n<p>Tomorrow I'll learn how to impliment break and continue statements </p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 15 of documenting my learning journey","url":"https://dev.to/james_kabuga/day-15-of-documenting-my-learning-journey-29dl","date":1761514322,"author":"James Kabuga","guid":315515,"unread":true,"content":"<p><strong>What I did Today</strong><br>\n1.Learnt what are for-loops and how to impliment them.</p>\n\n<p><strong>On what I learnt Today</strong><br>\nFor loops are used when we want to impliment Repetition or iterate even lists.</p>\n\n<p>For loops are used when we want to iterate when we know the number of times we want to do so.</p>\n\n<p>Syntax is :<br>\n  for i in range()<br>\n    print()</p>\n\n<p>i is just a varible that represents each iteration.</p>\n\n<p>We can also include other conditions inside the for loop eg the if statements depending on what we want to achieve.</p>\n\n<p>I created python scripts and ran them to see if what I learnt I comprehended.</p>\n\n<p><strong>Resources I used</strong></p>\n\n<p>A python refresher series on youtube by Bonaventure Ogeto. </p>\n\n<p>Github for documentation of my python learning journey.</p>\n\n<p><strong>What's Next</strong></p>\n\n<p>Tomorrow I'll continue learning loops specifically while loops</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"JARVIS","url":"https://dev.to/angadchhikara12/jarvis-5de0","date":1761514267,"author":"Angad Chhikara","guid":315514,"unread":true,"content":"<p>Hello Everyone,<br>\nI am Angad Chhikara. I am a 2010 born guy. I am a beginner python coder. I got my experience between 2023-2024. I am not that well at coding but I still attempted making some cool projects. If you want you can check my GitHub Profile at <a href=\"https://www.github.com/angadchhikara12\" rel=\"noopener noreferrer\">https://www.github.com/angadchhikara12</a> There are 31 repositories right now. Soon, I will change that number. </p>\n\n<p>This is my first post, on JARVIS. NO, it's not about the AI from Iron Man. This JARVIS is bit different. Instead of making the paragraph super long, all I want to say is that I build this project named JARVIS with the help of HuggingFace and TinyLlama. I also want to mention that the thing this project took from me is just time. No money, no fees, no cloud subscription. This model exists on my GitHub Profile <a href=\"https://www.github.com/angadchhikara12/JARVIS\" rel=\"noopener noreferrer\">https://www.github.com/angadchhikara12/JARVIS</a>.</p>\n\n<h2>\n  \n  \n  About JARVIS\n</h2>\n\n<p>JARVIS is build using Python, Hugging Face's Transformers and TinyLlama's ai model. This AI model is specially build for Ethical Hacking on Windows/PC. It has a lot of education about Ethical Hacking and can prevent you from getting hacked. It won't protect your computer itself. But, It can tell you every type of attack that can damage your computer or steal your info. Also, It will tell you how you can defend yourself from those attacks.</p>\n\n<h3>\n  \n  \n  Thanks a lot\n</h3>\n\n<p>Author: Angad Chhikara<br>\nGitHub Profile: <a href=\"https://www.github.com/angadchhikara12\" rel=\"noopener noreferrer\">https://www.github.com/angadchhikara12</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 14 of documenting my learning journey","url":"https://dev.to/james_kabuga/day-14-of-documenting-my-learning-journey-1mgn","date":1761513447,"author":"James Kabuga","guid":315513,"unread":true,"content":"<p><strong>What I did Today</strong></p>\n\n<p>Earlier before i started week-two I was to merge my week-one progress to main.</p>\n\n<p>So I had missed this part and that's what I did today.</p>\n\n<p><strong>Step by step Procedure</strong><br>\nHow do you merge a certain branch to main considering you are working on another branch and you have to keep everything upto date locally?</p>\n\n<p>1.1st you have to make sure you have tracked,commited and pushed everything to Github.</p>\n\n<p>2.Go to Github and open a pull request from the branch you want to merge to main. Example: To merge week-one to main you have to open a PR from week-one branch</p>\n\n<p>3.Merge that branch to main.</p>\n\n<p>4.Locally:</p>\n\n<ul>\n<li><p>git checkout main (makes sure ur on main branch)</p></li>\n<li><p>git pull origin main<br>\n( makes sure ur computer is upto date with updates you made on github)</p></li>\n</ul>\n\n<p>The commands update the local main.</p>\n\n<p>5.Locally:</p>\n\n<ul>\n<li><p>git checkout week-three(moves to week-three branch)</p></li>\n<li><p>git merge main</p></li>\n</ul>\n\n<p>If you are working now on week-three branch you checout to that branch and bring the current branch upto date.</p>\n\n<p>6.Locally:</p>\n\n<ul>\n<li>git push origin week-three</li>\n</ul>\n\n<p>Push merged updates to github.</p>\n\n<p>7.Continue normally with your daily commits.</p>\n\n<p><strong>Resources I used</strong></p>\n\n<p>Referred to the public repo I had read about introduction to git and GitHub by Bonaventure Ogeto.</p>\n\n<p><strong>What's next</strong></p>\n\n<p>I'll be continuing with the python refresher series on Youtube</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Predicting Quantum Futures: Machine Learning Cracks the QPU Time Riddle","url":"https://dev.to/arvind_sundararajan/predicting-quantum-futures-machine-learning-cracks-the-qpu-time-riddle-2677","date":1761512524,"author":"Arvind SundaraRajan","guid":315512,"unread":true,"content":"<h1>\n  \n  \n  Predicting Quantum Futures: Machine Learning Cracks the QPU Time Riddle\n</h1>\n\n<p>Tired of quantum jobs taking longer than expected? Imagine a world where you could accurately predict quantum processing unit (QPU) execution time <em>before</em> you even submit your code. This is no longer a pipe dream. Now, you can get ahead of costly compute delays with machine learning.</p>\n\n<p>The core idea is simple: train a machine learning model on historical QPU job data. This predictive model learns the intricate relationship between job characteristics (like the number of qubits, gate complexity, and circuit depth) and the actual QPU processing time. The more accurate the predicted time, the better the resource allocation, ultimately democratizing quantum access.</p>\n\n<p>Think of it like predicting traffic. You know the usual route time, but factors like weather and time of day impact it. Machine learning accounts for these nuances in quantum jobs.</p>\n\n<p><strong>Benefits:</strong></p>\n\n<ul>\n<li>  <strong>Optimized Scheduling:</strong> Accurately predict job durations for efficient queue management.</li>\n<li>  <strong>Reduced Costs:</strong> Minimize wasted QPU time and prevent exceeding allocated budgets.</li>\n<li>  <strong>Improved Resource Allocation:</strong> Assign jobs to the most appropriate quantum hardware based on predicted runtime.</li>\n<li>  <strong>Faster Development Cycles:</strong> Quickly iterate on quantum algorithms with better performance insights.</li>\n<li>  <strong>Enhanced User Experience:</strong> Provide users with realistic time estimates for their quantum tasks.</li>\n<li>  <strong>Better Quantum Algorithm Design:</strong> Use predicted run times as feedback to modify quantum circuits for faster execution</li>\n</ul>\n\n<p><strong>Insight:</strong></p>\n\n<p>One key challenge is ensuring the training data reflects the current state of the QPU. Quantum hardware is constantly evolving, so regularly retraining your model with the most recent data is crucial for maintaining accuracy.</p>\n\n<p>What if we could use this model to predict the optimal gate sequence for a particular problem, minimizing processing time <em>before</em> code even compiles? We're on the cusp of a new era where machine learning empowers us to harness quantum power more efficiently.</p>\n\n<p><strong>Related Keywords:</strong> Quantum Processing Unit, QPU time prediction, Machine Learning models, Regression analysis, Time series forecasting, Quantum algorithm optimization, Quantum hardware performance, Classical simulation, Error mitigation, Quantum supremacy, Quantum advantage, Hybrid quantum-classical algorithms, Data preprocessing, Feature engineering, Model selection, Hyperparameter tuning, Performance evaluation, Cloud computing, Quantum cloud services, AWS Braket, Azure Quantum, Google Cirq, Qiskit, PennyLane</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Coding by Vibe, by Tests, or by Spec Which Hat Are You Wearing?","url":"https://dev.to/parthibanrajasekaran/coding-by-vibe-by-tests-or-by-spec-which-hat-are-you-wearing-1h7b","date":1761510161,"author":"ParthibanRajasekaran","guid":315496,"unread":true,"content":"<blockquote>\n<p>We build the same FastAPI endpoint three ways and compare trade-offs with code</p>\n</blockquote>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fuyehj0hgqzaisi6750tj.gif\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fuyehj0hgqzaisi6750tj.gif\" alt=\"PairProgramming\" width=\"240\" height=\"240\"></a></p>\n\n<p><strong>Have you ever shipped something that “felt right”… and a week later you’re untangling spaghetti?<br>\nHave you ever written tests after the code and realised they’re just confirming happy paths?<br>\nHave you ever had a perfectly fine implementation… that didn’t match what Product actually meant?</strong></p>\n\n<p>If any of that sounds familiar, this post is for you. We’ll compare three very real ways engineers work in 2025:</p>\n\n<ul>\n<li>Vibe coding (code-first, intuition-driven)</li>\n<li>Test-Driven Development (TDD) (red → green → refactor)</li>\n<li>Spec-Driven Development (start with an executable spec; code follows)</li>\n</ul>\n\n<p>To keep it concrete, we’ll build the same tiny feature three ways: a POST /price endpoint that adds VAT and applies a discount code. You’ll see what each mode feels like, where it shines, where it bites and you can open the matching folders in the repo (vibe/, tdd/, spec_driven/) to run the examples and go deeper.</p>\n\n<h2>\n  \n  \n  A 60-second analogy you won’t forget\n</h2>\n\n<p>Vibe coding is like cooking by feel. You throw in garlic “until it smells right.” It’s brilliant for exploring flavours fast but without a recipe, repeating success is hard.</p>\n\n<p>TDD is cooking with a scale. You weigh, taste, adjust, then refactor the plating. Fewer surprises; you can serve 20 plates consistently.</p>\n\n<p>Spec-driven is a recipe card everyone agrees on before you start: ingredients, steps, expected taste. The sous-chef, the server, and you are aligned.</p>\n\n<p>We’ll use all three to make the same dish so the differences pop.</p>\n\n<h2>\n  \n  \n  The Problem: a tiny price API\n</h2>\n\n<p>We want a single endpoint:</p>\n\n<p>POST /price</p>\n\n<p><code>{ \"amount\": 100.0, \"vat_pct\": 20, \"code\": \"WELCOME10\" } -&gt; { \"final\": 108.0 }</code></p>\n\n<p>Rule: VAT is applied first, then a 10% discount for WELCOME10. Round to 2 decimals.</p>\n\n<h3>\n  \n  \n  1) Vibe Coding “I’ll just build it”\n</h3>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fll1p14orr46etue1xp58.gif\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fll1p14orr46etue1xp58.gif\" alt=\"VibeCoding\" width=\"498\" height=\"373\"></a></p>\n\n<p>Have you ever been in flow, built the endpoint in one sitting, and thought: tests can come later? That’s vibe coding. It’s excellent for prototypes and spikes. Risk: edge cases get discovered by users or future-you.</p>\n\n<p>What it feels like, step by step</p>\n\n<ol>\n<li>Spin up a FastAPI app.</li>\n<li>Implement the “obvious” math.</li>\n<li>Add basic tests after it works.</li>\n<li>Learn from behaviour, refactor in place.</li>\n</ol>\n\n<p><strong>Minimal snippet (from vibe/app.py)</strong></p>\n\n<p>`# POST /price  -&gt; {\"final\": number}<br>\nfrom fastapi import FastAPI<br>\nfrom pydantic import BaseModel<br>\nfrom .calculator import final_price</p>\n\n<p>app = FastAPI(title=\"vibe-pricing\")</p>\n\n<p>class PriceIn(BaseModel):<br>\n    amount: float<br>\n    vat_pct: float<br>\n    code: str | None = None</p>\n\n<p>@app.post(\"/price\")<br>\ndef price(body: PriceIn):<br>\n    return {\"final\": final_price(body.amount, body.vat_pct, body.code)}`</p>\n\n<p><strong>Reality check (in vibe/tests/)</strong><br>\nYou’ll likely add tests that match what you already wrote:</p>\n\n<p><code>def test_vat_then_discount():<br>\n    assert final_price(100, 20, \"WELCOME10\") == 108.0</code></p>\n\n<p>When it shines</p>\n\n<p>Spikes, demos, “feel the API” explorations<br>\nRapid iteration with minimal ceremony<br>\nWatch-outs</p>\n\n<p>Hidden edge cases (rounding, nulls, unknown codes)<br>\nHarder to reproduce success; tests risk becoming rubber stamps</p>\n\n<h3>\n  \n  \n  2) TDD “Red → Green → Refactor”\n</h3>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fxftcfqk6cl523hn71so2.gif\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fxftcfqk6cl523hn71so2.gif\" alt=\"TDD\" width=\"265\" height=\"199\"></a></p>\n\n<p>Have you ever wished your code told you when you broke something? TDD is that feedback loop you write a failing test (red), make it pass (green), then clean it up (refactor).</p>\n\n<p>What it feels like, step by step</p>\n\n<ol>\n<li>Write a failing test that defines behaviour.</li>\n<li>Write the tiniest code to pass it.</li>\n<li>Refactor confidently (tests stay green).</li>\n<li>Repeat, growing behaviour by behaviour.</li>\n</ol>\n\n<p><strong>Start with a test (from tdd/tests/test_calculator.py)</strong></p>\n\n<p>`from dev_modes.tdd.calculator import price_with_vat, final_price</p>\n\n<p>def test_vat_rounds_to_cents():<br>\n    assert price_with_vat(19.99, 8.5) == 21.64</p>\n\n<p>def test_final_price_vat_then_discount():<br>\n    assert final_price(100, 20, \"WELCOME10\") == 108.0`</p>\n\n<p><strong>Then the code (from tdd/calculator.py)</strong></p>\n\n<p>`def price_with_vat(amount: float, vat_pct: float) -&gt; float:<br>\n    return round(amount * (1 + vat_pct / 100), 2)</p>\n\n<p>def apply_discount(total: float, code: str | None) -&gt; float:<br>\n    if not code: return total<br>\n    if code.lower() == \"welcome10\": return round(total * 0.9, 2)<br>\n    return total</p>\n\n<p>def final_price(amount: float, vat_pct: float, code: str | None) -&gt; float:<br>\n    with_vat = price_with_vat(amount, vat_pct)<br>\n    return apply_discount(with_vat, code)`</p>\n\n<p><strong>When it shines</strong></p>\n\n<ul>\n<li>Core business logic and refactor-heavy domains</li>\n<li>Teams that value predictability and regression safety</li>\n</ul>\n\n<p><strong>Watch-outs</strong></p>\n\n<ul>\n<li>Over-mocking and “testing implementation not behaviour”</li>\n<li>You need discipline to resist jumping straight to code</li>\n</ul>\n\n<h3>\n  \n  \n  3) Spec-Driven “Agree on the recipe, then cook”\n</h3>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fj6h393cd98cnswfvit3p.webp\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fj6h393cd98cnswfvit3p.webp\" alt=\"Spec-Driven\" width=\"702\" height=\"395\"></a></p>\n\n<p>Have you ever built the right thing the wrong way or the wrong thing perfectly? Spec-driven starts with a human-readable, executable spec so everyone agrees on “what good looks like” before code.</p>\n\n<p><strong>What it feels like, step by step</strong></p>\n\n<ol>\n<li>Write the spec in plain language (e.g., Gherkin).</li>\n<li>Derive tests from the spec.</li>\n<li>Implement the code to satisfy the spec.</li>\n<li>Treat the spec as living documentation.</li>\n</ol>\n\n<p>*<em>Spec first (from spec_driven/specs/price.feature)<br>\n*</em><br>\n<code>Feature: Checkout price<br>\n  Scenario: VAT then discount<br>\n    Given a base amount of 100<br>\n    And VAT is 20 percent<br>\n    When I apply the code \"WELCOME10\"<br>\n    Then the final price should be 108.0</code></p>\n\n<p><strong>Test shaped by the spec (from spec_driven/tests/test_from_spec.py)</strong></p>\n\n<p>`from fastapi.testclient import TestClient<br>\nfrom dev_modes.spec_driven.app import app</p>\n\n<p>client = TestClient(app)<br>\ndef test_vat_then_discount_from_spec():<br>\n    r = client.post(\"/price\", json={\"amount\": 100, \"vat_pct\": 20, \"code\": \"WELCOME10\"})<br>\n    assert r.status_code == 200<br>\n    assert r.json() == {\"final\": 108.0}`</p>\n\n<p><strong>When it shines</strong></p>\n\n<p>Cross-team features (Product, QA, Eng) and compliance-heavy work</p>\n\n<p>API contracts where misunderstandings are expensive</p>\n\n<p><strong>Watch-outs</strong></p>\n\n<p>A little slower to start (but faster to align)</p>\n\n<p>Specs need ownership or they rot</p>\n\n<h3>\n  \n  \n  How to choose (today)\n</h3>\n\n<p>Ask yourself three questions before you start:</p>\n\n<p><strong>Is this exploration or execution?</strong><br>\nIf you’re exploring unknowns, start with vibe for speed then tighten with TDD or a spec once the shape stabilises.</p>\n\n<p><strong>Is this change cross-team or customer-visible?</strong><br>\nIf multiple stakeholders must agree, spec-driven pays for itself in clarity.</p>\n\n<p><strong>Will we refactor this a lot?</strong><br>\nIf yes, TDD buys you courage and speed with safety.</p>\n\n<h3>\n  \n  \n  Show me the code (and how to run it)\n</h3>\n\n<p>All three implementations build the same POST /price:</p>\n\n<p><code>vibe/</code> : code first, tests after<br>\n<code>tdd/</code> : tests first, then code<br>\n<code>spec_driven/</code> : feature spec → tests → code</p>\n\n<p>Run any folder with your FastAPI dev server and tests. For example:</p>\n\n<p><code># Vibe<br>\nuvicorn dev_modes.vibe.app:app --reload<br>\npytest vibe/tests -q</code><br>\n<code># TDD<br>\nuvicorn dev_modes.tdd.app:app --reload<br>\npytest tdd/tests -q</code><br>\n<code># Spec-driven<br>\nuvicorn dev_modes.spec_driven.app:app --reload<br>\npytest spec_driven/tests -q</code></p>\n\n<h3>\n  \n  \n  Quick “save yourself later” checklist\n</h3>\n\n<p><strong>Vibe?</strong> Jot down two edge cases you didn’t code yet. Add a micro-test for each before merging.</p>\n\n<p><strong>TDD?</strong> Re-read your tests: do they describe behaviour, or mirror implementation? Trim mocks.</p>\n\n<p><strong>Spec-driven?</strong> Keep the spec crisp and owned. If Product changes their mind, change the spec first.</p>\n\n<h2>\n  \n  \n  Final thought\n</h2>\n\n<p>All three modes are tools, not tribes. Great engineers switch hats on purpose. Explore with vibe, harden with TDD, align with specs and your future self (and your directors) will thank you.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[Boost]","url":"https://dev.to/aquibpy/-3a9e","date":1761509615,"author":"Mohd Aquib","guid":315495,"unread":true,"content":"<div class=\"ltag__link\">\n  <a href=\"/aquibpy\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F505234%2F0f167fee-734d-4754-94ef-38fe386afd86.jpeg\" alt=\"aquibpy\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/aquibpy/building-a-crud-api-with-fastapi-and-mongodb-32n\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>Building a CRUD API with FastAPI and MongoDB</h2>\n      <h3>Mohd Aquib ・ Jul 5 '24</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#python</span>\n        <span class=\"ltag__link__tag\">#mongodb</span>\n        <span class=\"ltag__link__tag\">#fastapi</span>\n        <span class=\"ltag__link__tag\">#beginners</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building RAGenius: A Production-Ready RAG System with FastAPI, Azure OpenAI & ChromaDB","url":"https://dev.to/aquibpy/building-ragenius-a-production-ready-rag-system-with-fastapi-azure-openai-chromadb-3281","date":1761505881,"author":"Mohd Aquib","guid":315479,"unread":true,"content":"<h2>\n  \n  \n  🧠 Building RAGenius: A Production-Ready RAG System\n</h2>\n\n<p>Have you ever wanted to chat with your documents using AI? Whether it's PDFs, Excel spreadsheets, or JSON files - imagine having an intelligent assistant that can answer questions based on your entire document collection. That's exactly what I built with <strong>RAGenius</strong>!</p>\n\n<h2>\n  \n  \n  🤔 What is RAG?\n</h2>\n\n<p><strong>Retrieval-Augmented Generation (RAG)</strong> is a technique that combines the power of large language models (LLMs) with your own data. Instead of relying solely on the model's training data, RAG:</p>\n\n<ol>\n<li>\n<strong>Retrieves</strong> relevant information from your documents</li>\n<li>\n<strong>Augments</strong> the LLM prompt with this context</li>\n<li>\n<strong>Generates</strong> accurate, contextual answers</li>\n</ol>\n\n<p>This approach dramatically reduces hallucinations and allows LLMs to answer questions about your specific domain knowledge.</p>\n\n<h2>\n  \n  \n  💡 Why I Built RAGenius\n</h2>\n\n<p>While experimenting with various RAG implementations, I noticed most tutorials focused on simple, single-file demos. I wanted something more:</p>\n\n<p>✅ <strong>Production-ready</strong> with proper error handling<br><br>\n✅ <strong>Multi-format support</strong> (PDF, Excel, JSON, DOCX, CSV, TXT)<br><br>\n✅ <strong>Streaming responses</strong> for better UX<br><br>\n✅ <strong>REST API</strong> for easy integration<br><br>\n✅ <strong>Incremental updates</strong> without rebuilding the entire index  </p>\n\n<p>Thus, <strong>RAGenius</strong> was born! 🎉</p>\n<h2>\n  \n  \n  🏗️ Architecture Overview\n</h2>\n\n<p>RAGenius follows a clean, modular architecture:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>┌─────────────┐\n│  Documents  │ (PDF, Excel, JSON, etc.)\n└──────┬──────┘\n       │\n       ▼\n┌─────────────────┐\n│  Data Loader    │ (Multi-format processing)\n└──────┬──────────┘\n       │\n       ▼\n┌─────────────────┐\n│  Chunking       │ (Smart text splitting)\n└──────┬──────────┘\n       │\n       ▼\n┌─────────────────┐\n│  Azure OpenAI   │ (Generate embeddings)\n└──────┬──────────┘\n       │\n       ▼\n┌─────────────────┐\n│   ChromaDB      │ (Vector storage)\n└──────┬──────────┘\n       │\n       ▼\n┌─────────────────┐\n│   RAG Engine    │ (Query + Generate)\n└──────┬──────────┘\n       │\n       ▼\n┌─────────────────┐\n│   FastAPI       │ (REST API)\n└─────────────────┘\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  🛠️ Tech Stack\n</h2>\n\n<ul>\n<li>\n<strong>FastAPI</strong>: Lightning-fast API framework</li>\n<li>\n<strong>LangChain</strong>: Document processing and LLM orchestration</li>\n<li>\n<strong>ChromaDB</strong>: Vector database for embeddings</li>\n<li>\n<strong>Azure OpenAI</strong>: GPT-4 and embedding models</li>\n<li>\n<strong>Python 3.10+</strong>: Core language</li>\n<li>\n<strong>UV</strong>: Modern Python package manager</li>\n</ul>\n\n<h2>\n  \n  \n  🚀 Key Features Breakdown\n</h2>\n\n<h3>\n  \n  \n  1️⃣ Multi-Format Document Processing\n</h3>\n\n<p>One of the coolest features is the ability to handle various file types seamlessly:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">src.data_loader</span> <span class=\"kn\">import</span> <span class=\"n\">load_all_documents</span>\n\n<span class=\"c1\"># Automatically detects and loads all supported formats\n</span><span class=\"n\">docs</span> <span class=\"o\">=</span> <span class=\"nf\">load_all_documents</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">data</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Loaded </span><span class=\"si\">{</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">docs</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\"> documents</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The <code>data_loader.py</code> uses a smart mapping system:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">LOADER_MAP</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"sh\">\"</span><span class=\"s\">.pdf</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">PyPDFLoader</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">.txt</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nc\">TextLoader</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">utf-8</span><span class=\"sh\">\"</span><span class=\"p\">),</span>\n    <span class=\"sh\">\"</span><span class=\"s\">.csv</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">CSVLoader</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">.docx</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">Docx2txtLoader</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">.json</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">JSONLoader</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">.xlsx</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">UnstructuredExcelLoader</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  2️⃣ Smart Document Chunking\n</h3>\n\n<p>Not all text should be split the same way. RAGenius uses <strong>RecursiveCharacterTextSplitter</strong> with configurable parameters:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">text_splitter</span> <span class=\"o\">=</span> <span class=\"nc\">RecursiveCharacterTextSplitter</span><span class=\"p\">(</span>\n    <span class=\"n\">chunk_size</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span>\n    <span class=\"n\">chunk_overlap</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span>\n    <span class=\"n\">length_function</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">,</span>\n    <span class=\"n\">separators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"se\">\\n\\n</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\"> </span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"\"</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Why overlap?</strong> It ensures context isn't lost at chunk boundaries - crucial for maintaining semantic coherence!</p>\n\n<h3>\n  \n  \n  3️⃣ Vector Storage with ChromaDB\n</h3>\n\n<p>ChromaDB provides persistent, efficient vector storage:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">ChromaVectorStore</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">persist_directory</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">chromadb_store</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">chromadb</span><span class=\"p\">.</span><span class=\"nc\">PersistentClient</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">persist_directory</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">client</span><span class=\"p\">.</span><span class=\"nf\">get_or_create_collection</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">pdf_documents</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">description</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">PDF embeddings using Azure OpenAI</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Key benefit</strong>: Your embeddings persist across restarts - no need to re-process documents!</p>\n\n<h3>\n  \n  \n  4️⃣ Streaming RAG Responses\n</h3>\n\n<p>Modern UIs demand real-time feedback. RAGenius supports token-by-token streaming:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">stream_query</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">question</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">top_k</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Async generator for true token streaming</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">vectorstore</span><span class=\"p\">.</span><span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"n\">question</span><span class=\"p\">,</span> <span class=\"n\">top_k</span><span class=\"o\">=</span><span class=\"n\">top_k</span><span class=\"p\">)</span>\n    <span class=\"n\">docs</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">documents</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"p\">[[]])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">docs</span><span class=\"p\">:</span>\n        <span class=\"k\">yield</span> <span class=\"sh\">\"</span><span class=\"s\">No relevant context found.</span><span class=\"sh\">\"</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"se\">\\n\\n</span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">docs</span><span class=\"p\">)</span>\n    <span class=\"n\">prompt</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_build_prompt</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">question</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">chunk</span> <span class=\"ow\">in</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">llm</span><span class=\"p\">.</span><span class=\"nf\">astream</span><span class=\"p\">([</span><span class=\"nc\">HumanMessage</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"o\">=</span><span class=\"n\">prompt</span><span class=\"p\">)]):</span>\n        <span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"nf\">getattr</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">))</span>\n        <span class=\"k\">yield</span> <span class=\"n\">token</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  5️⃣ RESTful API with FastAPI\n</h3>\n\n<p>Three main endpoints power the system:</p>\n\n<p><strong>📤 Upload Documents</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>curl <span class=\"nt\">-X</span> POST <span class=\"s2\">\"http://localhost:8000/rag/upload\"</span> <span class=\"se\">\\</span>\n  <span class=\"nt\">-F</span> <span class=\"s2\">\"files=@document.pdf\"</span> <span class=\"se\">\\</span>\n  <span class=\"nt\">-F</span> <span class=\"s2\">\"files=@spreadsheet.xlsx\"</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>🔍 Basic Query</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>curl <span class=\"nt\">-X</span> POST <span class=\"s2\">\"http://localhost:8000/rag/basic\"</span> <span class=\"se\">\\</span>\n  <span class=\"nt\">-H</span> <span class=\"s2\">\"Content-Type: application/json\"</span> <span class=\"se\">\\</span>\n  <span class=\"nt\">-d</span> <span class=\"s1\">'{\"query\": \"What is attention mechanism?\", \"top_k\": 5}'</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>🌊 Streaming Query</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>curl <span class=\"nt\">-X</span> POST <span class=\"s2\">\"http://localhost:8000/rag/stream\"</span> <span class=\"se\">\\</span>\n  <span class=\"nt\">-H</span> <span class=\"s2\">\"Content-Type: application/json\"</span> <span class=\"se\">\\</span>\n  <span class=\"nt\">-d</span> <span class=\"s1\">'{\"query\": \"Explain transformers\", \"top_k\": 3}'</span> <span class=\"se\">\\</span>\n  <span class=\"nt\">--no-buffer</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  🎯 The RAG Pipeline in Action\n</h2>\n\n<p>Here's what happens when you ask a question:</p>\n\n<ol>\n<li>\n<strong>Query Embedding</strong>: Your question is converted to a vector using Azure OpenAI</li>\n<li>\n<strong>Similarity Search</strong>: ChromaDB finds the top-k most relevant document chunks</li>\n<li>\n<strong>Context Building</strong>: Retrieved chunks are combined into a context window</li>\n<li>\n<strong>Prompt Construction</strong>: The context and question are formatted into a prompt</li>\n<li>\n<strong>LLM Generation</strong>: GPT-4 generates an answer based on the provided context</li>\n<li>\n<strong>Streaming Response</strong>: Tokens are streamed back to the client in real-time\n</li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">question</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">top_k</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Step 1 &amp; 2: Retrieve relevant context\n</span>    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">vectorstore</span><span class=\"p\">.</span><span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"n\">question</span><span class=\"p\">,</span> <span class=\"n\">top_k</span><span class=\"o\">=</span><span class=\"n\">top_k</span><span class=\"p\">)</span>\n    <span class=\"n\">docs</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">documents</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"p\">[[]])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># Step 3: Build context\n</span>    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"se\">\\n\\n</span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">docs</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Step 4: Construct prompt\n</span>    <span class=\"n\">prompt</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"\"\"</span><span class=\"s\">\n    Use the following context to answer the question.\n\n    Context:\n    </span><span class=\"si\">{</span><span class=\"n\">context</span><span class=\"si\">}</span><span class=\"s\">\n\n    Question: </span><span class=\"si\">{</span><span class=\"n\">question</span><span class=\"si\">}</span><span class=\"s\">\n\n    Answer:\n    </span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"c1\"># Step 5: Generate response\n</span>    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">llm</span><span class=\"p\">.</span><span class=\"nf\">invoke</span><span class=\"p\">([</span><span class=\"nc\">HumanMessage</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"o\">=</span><span class=\"n\">prompt</span><span class=\"p\">)])</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">answer</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  📊 Performance Optimizations\n</h2>\n\n<h3>\n  \n  \n  Chunking Strategy\n</h3>\n\n<ul>\n<li>\n<strong>Chunk Size</strong>: 1000 characters - balances context vs. precision</li>\n<li>\n<strong>Overlap</strong>: 200 characters - maintains semantic continuity</li>\n<li>\n<strong>Smart Separators</strong>: Prioritizes paragraph breaks over word breaks</li>\n</ul>\n\n<h3>\n  \n  \n  Embedding Efficiency\n</h3>\n\n<ul>\n<li>\n<strong>Batch Processing</strong>: Multiple chunks embedded in single API calls</li>\n<li>\n<strong>Persistent Storage</strong>: Embeddings cached in ChromaDB</li>\n<li>\n<strong>Incremental Updates</strong>: Add new documents without re-embedding existing ones</li>\n</ul>\n\n<h3>\n  \n  \n  Query Optimization\n</h3>\n\n<ul>\n<li>\n<strong>Top-K Selection</strong>: Default k=5 balances relevance and token usage</li>\n<li>\n<strong>Temperature Control</strong>: 0.7 provides creative yet grounded responses</li>\n<li>\n<strong>Async Operations</strong>: Non-blocking streaming for better UX</li>\n</ul>\n\n<h2>\n  \n  \n  🐛 Challenges &amp; Solutions\n</h2>\n\n<h3>\n  \n  \n  Challenge 1: JSONLoader Complexity\n</h3>\n\n<p><strong>Problem</strong>: JSONLoader required <code>jq_schema</code> parameter, complicating multi-format support.</p>\n\n<p><strong>Solution</strong>: Implemented dynamic loader selection with custom error handling:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">dynamic_loader</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"n\">ext</span> <span class=\"o\">=</span> <span class=\"nc\">Path</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">).</span><span class=\"n\">suffix</span><span class=\"p\">.</span><span class=\"nf\">lower</span><span class=\"p\">()</span>\n    <span class=\"n\">loader_cls</span> <span class=\"o\">=</span> <span class=\"n\">LOADER_MAP</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">ext</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">loader_cls</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">❌ Unsupported file type: </span><span class=\"si\">{</span><span class=\"n\">file_path</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nf\">loader_cls</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Challenge 2: Streaming with FastAPI\n</h3>\n\n<p><strong>Problem</strong>: Server-Sent Events (SSE) format required careful handling.</p>\n\n<p><strong>Solution</strong>: Used <code>StreamingResponse</code> with proper headers:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">return</span> <span class=\"nc\">StreamingResponse</span><span class=\"p\">(</span>\n    <span class=\"nf\">stream_response</span><span class=\"p\">(),</span>\n    <span class=\"n\">media_type</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">text/event-stream</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">Cache-Control</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">no-cache</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">Connection</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">keep-alive</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">X-Accel-Buffering</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">no</span><span class=\"sh\">\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Challenge 3: File Upload Memory Management\n</h3>\n\n<p><strong>Problem</strong>: Large file uploads could cause memory issues.</p>\n\n<p><strong>Solution</strong>: Temporary directory with automatic cleanup:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">temp_dir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">DATA_DIR</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">temp_</span><span class=\"si\">{</span><span class=\"n\">uuid</span><span class=\"p\">.</span><span class=\"nf\">uuid4</span><span class=\"p\">().</span><span class=\"nb\">hex</span><span class=\"p\">[</span><span class=\"si\">:</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Process files\n</span>    <span class=\"n\">docs</span> <span class=\"o\">=</span> <span class=\"nf\">load_all_documents</span><span class=\"p\">(</span><span class=\"n\">temp_dir</span><span class=\"p\">)</span>\n    <span class=\"n\">vectorstore</span><span class=\"p\">.</span><span class=\"nf\">add_documents</span><span class=\"p\">(</span><span class=\"n\">docs</span><span class=\"p\">)</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"nf\">exists</span><span class=\"p\">(</span><span class=\"n\">temp_dir</span><span class=\"p\">):</span>\n        <span class=\"n\">shutil</span><span class=\"p\">.</span><span class=\"nf\">rmtree</span><span class=\"p\">(</span><span class=\"n\">temp_dir</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  🎓 Lessons Learned\n</h2>\n\n<ol>\n<li><p><strong>Modular Design Pays Off</strong>: Separating concerns (loading, embedding, storage, querying) made debugging and testing much easier.</p></li>\n<li><p><strong>Async is Essential</strong>: For streaming responses and file processing, async/await dramatically improves performance.</p></li>\n<li><p><strong>Error Handling Matters</strong>: Production systems need comprehensive logging and graceful error recovery.</p></li>\n<li><p><strong>Chunk Overlap is Critical</strong>: Without overlap, important context can be lost at boundaries, leading to incomplete answers.</p></li>\n<li><p><strong>Persistent Storage Rocks</strong>: ChromaDB's persistence means zero downtime for re-indexing after restarts.</p></li>\n</ol>\n\n<h2>\n  \n  \n  🔮 Future Enhancements\n</h2>\n\n<p>Here's what's on the roadmap:</p>\n\n<ul>\n<li>[ ] <strong>Multi-LLM Support</strong>: OpenAI, Anthropic Claude, Cohere</li>\n<li>[ ] <strong>Web UI</strong>: React-based interface for document management</li>\n<li>[ ] <strong>Advanced Filtering</strong>: Metadata-based search refinement</li>\n<li>[ ] <strong>Cloud Storage Integration</strong>: S3, Azure Blob, Google Cloud Storage</li>\n<li>[ ] <strong>Conversation Memory</strong>: Multi-turn dialogue support</li>\n<li>[ ] <strong>Fine-tuned Embeddings</strong>: Domain-specific embedding models</li>\n<li>[ ] <strong>Kubernetes Manifests</strong>: Production-ready deployment configs</li>\n</ul>\n\n<h2>\n  \n  \n  🚀 Getting Started\n</h2>\n\n<p>Want to try RAGenius? It's super easy:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Clone the repository</span>\ngit clone https://github.com/AquibPy/RAGenius.git\n<span class=\"nb\">cd </span>RAGenius\n\n<span class=\"c\"># Install dependencies (using UV)</span>\nuv <span class=\"nb\">sync</span>\n\n<span class=\"c\"># Set up environment variables</span>\n<span class=\"nb\">cp</span> .env.example .env\n<span class=\"c\"># Add your Azure OpenAI credentials</span>\n\n<span class=\"c\"># Start the server</span>\nuvicorn app:app <span class=\"nt\">--reload</span>\n\n<span class=\"c\"># Visit http://localhost:8000/docs for API documentation</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  📝 Example Usage\n</h2>\n\n<h3>\n  \n  \n  Python Script\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">src.search</span> <span class=\"kn\">import</span> <span class=\"n\">RAGEngine</span>\n\n<span class=\"c1\"># Initialize\n</span><span class=\"n\">rag</span> <span class=\"o\">=</span> <span class=\"nc\">RAGEngine</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Query\n</span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">rag</span><span class=\"p\">.</span><span class=\"nf\">query</span><span class=\"p\">(</span>\n    <span class=\"sh\">\"</span><span class=\"s\">What is the attention mechanism in transformers?</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">top_k</span><span class=\"o\">=</span><span class=\"mi\">5</span>\n<span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">answer</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  CLI\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>python main.py <span class=\"se\">\\</span>\n  <span class=\"nt\">--query</span> <span class=\"s2\">\"Explain BERT architecture\"</span> <span class=\"se\">\\</span>\n  <span class=\"nt\">--mode</span> streaming\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  API\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">requests</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">post</span><span class=\"p\">(</span>\n    <span class=\"sh\">\"</span><span class=\"s\">http://localhost:8000/rag/basic</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">query</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">What is machine learning?</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">top_k</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()[</span><span class=\"sh\">\"</span><span class=\"s\">answer</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  🎉 Conclusion\n</h2>\n\n<p>Building RAGenius has been an incredible learning experience. It combines cutting-edge AI technologies with practical software engineering to create a tool that's actually useful in production environments.</p>\n\n<p>The beauty of RAG systems is that they make LLMs grounded in reality - answering questions based on YOUR data, not just internet-scale training data. Whether you're building internal knowledge bases, customer support systems, or research tools, RAG is the way forward.</p>\n\n<h2>\n  \n  \n  🔗 Links\n</h2>\n\n<ul>\n<li>\n<strong>GitHub</strong>: <a href=\"https://github.com/AquibPy/RAGenius\" rel=\"noopener noreferrer\">AquibPy/RAGenius</a>\n</li>\n<li>\n<strong>Demo Video</strong>: [Coming soon!]</li>\n</ul>\n\n<h2>\n  \n  \n  💬 Let's Connect!\n</h2>\n\n<p>I'd love to hear your thoughts and ideas! Feel free to:</p>\n\n<ul>\n<li>⭐ Star the repo if you find it useful</li>\n<li>🐛 Report bugs or request features via GitHub Issues</li>\n<li>🤝 Contribute through Pull Requests</li>\n<li>💬 Connect with me on <a href=\"https://x.com/AquibPy\" rel=\"noopener noreferrer\">X</a> or <a href=\"https://www.linkedin.com/in/aquibpy/\" rel=\"noopener noreferrer\">LinkedIn</a>\n</li>\n</ul>\n\n<p>Have you built any RAG systems? What challenges did you face? Drop a comment below! 👇</p>\n\n\n\n\n<p><em>Happy coding! 🚀</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How to implement SSE in Django with WSGI","url":"https://dev.to/climentea/how-to-implement-sse-in-django-with-wsgi-50ne","date":1761505698,"author":"Alin Climente","guid":315525,"unread":true,"content":"<h2>\n  \n  \n  What are Server Sent Events (SSE)?\n</h2>\n\n<p>Server Sent Events (SSE) are a super lightweight method of sending messages to frontend. Let's say you have to wait for some long processing of files, chit-chat between your AI Agents, the user will stare at a spinning wheel, get bored then cancel his subscription.</p>\n\n<p>Django is great, but not at async stuff, speed and DX. SSE needs an async web server to run - something like daphne or uvicorn.</p>\n\n<h2>\n  \n  \n  Current solutions for implementing SSE in Django\n</h2>\n\n<p>I tried django-eventstream + daphne but hot-reload for server and browser broke. Then I tried a custom implementation of SSE + uvicorn - same hot-reload didn't worked (I used --reload flag).</p>\n\n<p>I wasted a few hours saving 5 seconds of restarting server and refreshing browser on each change to create a solution.</p>\n\n<h2>\n  \n  \n  New way of implementing SSE in Django with WSGI\n</h2>\n\n<p>The solution is a Golang service which listens to messages published by Django service and sends those messages to frontend. Bassically, a middle man which can handle async well.</p>\n\n<p>It's built in Go to have a small footprint on server resources. It uses 3MB RAM and it has a size of 8MB.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Felyrb5j481hk9r9vntqg.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Felyrb5j481hk9r9vntqg.png\" alt=\"docker-stats-go-sse-wsgi-sidecar\" width=\"800\" height=\"87\"></a></p>\n\n<h2>\n  \n  \n  How to use go-sse-wsgi-sidecar\n</h2>\n\n<p>Here is how you can use it.</p>\n\n<p>Add this in your .env file (both services need to have access to it use env_file in docker compose):<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>GO_SSE_SIDECAR_HOST=localhost\nGO_SSE_SIDECAR_PORT=5687\nGO_SSE_SIDECAR_REDIS_URL=redis://:your-password@localhost-or-docker-container-name:6379/0\nGO_SSE_SIDECAR_TOKEN=secret-token-here\n</code></pre>\n\n</div>\n\n\n\n<p>Add this to your docker compose file. Or, use the Dockerfile in this <a href=\"https://github.com/ClimenteA/go-sse-wsgi-sidecar\" rel=\"noopener noreferrer\">repo</a>. You also have the option to download the binary available on releases.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code>\n<span class=\"na\">services</span><span class=\"pi\">:</span>\n  <span class=\"na\">sse_sidecar</span><span class=\"pi\">:</span>\n    <span class=\"na\">image</span><span class=\"pi\">:</span> <span class=\"s\">climentea/go-sse-wsgi-sidecar:latest</span>\n    <span class=\"na\">container_name</span><span class=\"pi\">:</span> <span class=\"s\">sse-sidecar</span>\n    <span class=\"na\">restart</span><span class=\"pi\">:</span> <span class=\"s\">unless-stopped</span>\n    <span class=\"na\">ports</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">5687:5687\"</span>\n    <span class=\"na\">env_file</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">.env</span>\n\n</code></pre>\n\n</div>\n\n\n\n<p>On the Python/Django app:</p>\n\n<ul>\n<li>Install <code>pyjwt</code> package - this will be used to make sure only the authentificated user can have access to the server sent events.</li>\n<li>Install <code>redis</code> package - we'll use here redis pub/sub functionality to have the Django app sending events and this app to send those recived events to frontend. If you already have celery/django-rq or other similar packages you could use the same connection as I did.</li>\n</ul>\n\n<p>Add this view to your main <code>urls.py</code> file. This view will be used by frontend to get an authorization token.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code>\n<span class=\"kn\">import</span> <span class=\"n\">jwt</span>\n<span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"n\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"n\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">JsonResponse</span>\n\n\n<span class=\"nd\">@login_required</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_sse_token_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">exp_dt</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"nf\">now</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"n\">timezone</span><span class=\"p\">.</span><span class=\"n\">utc</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"nf\">timedelta</span><span class=\"p\">(</span>\n        <span class=\"n\">minutes</span><span class=\"o\">=</span><span class=\"mi\">15</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">user_id</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">social_user_id</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">exp</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">exp_dt</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">jwt</span><span class=\"p\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"n\">settings</span><span class=\"p\">.</span><span class=\"n\">GO_SSE_SIDECAR_TOKEN</span><span class=\"p\">,</span> <span class=\"n\">algorithm</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">HS256</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nc\">JsonResponse</span><span class=\"p\">({</span><span class=\"sh\">\"</span><span class=\"s\">error</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)},</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"nc\">JsonResponse</span><span class=\"p\">(</span>\n        <span class=\"p\">{</span>\n            <span class=\"sh\">\"</span><span class=\"s\">token</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">token</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">expires_in</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">900</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># etc\n</span>    <span class=\"nf\">path</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">admin/</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">admin</span><span class=\"p\">.</span><span class=\"n\">site</span><span class=\"p\">.</span><span class=\"n\">urls</span><span class=\"p\">),</span>\n    <span class=\"nf\">path</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">sse-token/</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">get_sse_token_view</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">sse_token</span><span class=\"sh\">\"</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n\n</code></pre>\n\n</div>\n\n\n\n<p>I've used the connection of django_rq because it was already in my setup, but you can create a new redis connection if you want.<br>\nIt must be the same connection for both services so they can write to the same pub/sub server.</p>\n\n<p>Add this somewhere in your utils package:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">json</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">django_rq</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">publish</span><span class=\"p\">(</span><span class=\"n\">event_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">django_rq</span><span class=\"p\">.</span><span class=\"nf\">get_connection</span><span class=\"p\">()</span>\n    <span class=\"n\">r</span><span class=\"p\">.</span><span class=\"nf\">publish</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">events</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"p\">.</span><span class=\"nf\">dumps</span><span class=\"p\">({</span><span class=\"sh\">\"</span><span class=\"s\">event</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">event_name</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">data</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">data</span><span class=\"p\">}))</span>\n\n</code></pre>\n\n</div>\n\n\n\n<p>In your main <code>scripts.js</code> file or in <code>base.html</code> file add this <code>EventSource</code> listener.<br>\nYou can change the urls based on what ports you've exposed. <br>\nWhen you'll run the app entirely in docker compose change <code>localhost</code> with the name of the service (Django service and Go service). <br>\nAdd your handlers on <code>alert(JSON.stringify(e.data));</code> and make it do react on a new event however you want.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">evtSource</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nf\">startSSE</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">res</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">http://localhost:8000/sse-token</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">token</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">();</span>\n\n  <span class=\"nx\">evtSource</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">EventSource</span><span class=\"p\">(</span><span class=\"s2\">`http://localhost:5687/sse-events?ssetoken=</span><span class=\"p\">${</span><span class=\"nx\">token</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">evtSource</span><span class=\"p\">.</span><span class=\"nx\">onmessage</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Received:</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n    <span class=\"nf\">alert</span><span class=\"p\">(</span><span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nf\">stringify</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">));</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"nx\">evtSource</span><span class=\"p\">.</span><span class=\"nx\">onerror</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">SSE error</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">e</span><span class=\"p\">);</span>\n    <span class=\"nx\">evtSource</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">();</span>\n    <span class=\"nf\">setTimeout</span><span class=\"p\">(</span><span class=\"nx\">startSSE</span><span class=\"p\">,</span> <span class=\"mi\">2000</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"nf\">startSSE</span><span class=\"p\">();</span>\n\n</code></pre>\n\n</div>\n\n\n\n<p>Cool, now just import <code>publish</code> function where you need and start sending how many events you want to frontend.</p>\n\n<p>You can see the code <a href=\"https://github.com/ClimenteA/go-sse-wsgi-sidecar\" rel=\"noopener noreferrer\">here</a>.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"3 Best Sites to Buy Old Gmail Accounts (PVA & Aged)","url":"https://dev.to/lopezsdfertyu/3-best-sites-to-buy-old-gmail-accounts-pva-aged-3hj8","date":1761505565,"author":"drtydt","guid":315478,"unread":true,"content":"<p>Purchase Ancient Gmail Accounts online</p>\n\n<p>🌐📱💻💬📊📈 We are available online 24/7.<br>\n🌐📱💻💬📊📈 Telegram:<a class=\"mentioned-user\" href=\"https://dev.to/getusasmm\">@getusasmm</a><br>\n🌐📱💻💬📊📈 WhatsApp::+1(314)203-4162<br>\n🌐📱💻💬📊📈 Telegram:<a class=\"mentioned-user\" href=\"https://dev.to/getusasmm\">@getusasmm</a><br>\n🌐📱💻💬📊📈 Come now our company :<a href=\"https://getusasmm.com/product/buy-old-gmail-accounts/\" rel=\"noopener noreferrer\">https://getusasmm.com/product/buy-old-gmail-accounts/</a></p>\n\n<p>In today’s advanced scene, the significance of having a dependable mail account cannot be exaggerated. For businesses and people alike, Gmail has ended up a foundation of communication. But have you ever considered the benefits of obtaining ancient Gmail accounts? Whereas it may appear abnormal at to begin with look, there’s a developing drift among marketers and business visionaries who are turning to these matured accounts for different reasons.Old Gmail accounts carry with them interesting points of interest that present day ones basically can’t coordinate. Whether it’s their built up history or dependability in the eyes of look motors, these more seasoned profiles offer something extraordinary that can hoist your online nearness</p>\n\n<p>As we dive more profound into this theme, you’ll find why buying ancient Gmail accounts online is getting to be an progressively well known choice for adroit trade proprietors looking to pick up an edge in today’s competitive showcase. Let’s investigate what makes these vintage jewels so valuable!</p>\n\n<p>Buy Old Gmail Accounts<br>\nBuy Old Gmail Accounts from getusasmm<br>\nBuy old Gmail accounts from getusasmm to boost your digital marketing success. Our aged Gmail accounts are phone-verified, secure, and ready for use in email marketing, SEO tools, and account verification. Older Gmail accounts offer higher trust, better inbox rates, and fewer restrictions. We provide fast delivery, 24/7 support, and a replacement guarantee. Choose from accounts aged 1 to 5+ years at affordable prices. Whether you run an agency or just need a few accounts, getusasmm is your trusted source. Grow your business today with reliable old Gmail accounts from a verified seller.</p>\n\n<p>Why individuals bunches purchase ancient Gmail accounts more than present day accounts?</p>\n\n<p>🌐📱💻💬📊📈 We are available online 24/7.<br>\n🌐📱💻💬📊📈 Telegram:<a class=\"mentioned-user\" href=\"https://dev.to/getusasmm\">@getusasmm</a><br>\n🌐📱💻💬📊📈 WhatsApp::+1(314)203-4162<br>\n🌐📱💻💬📊📈 Telegram:<a class=\"mentioned-user\" href=\"https://dev.to/getusasmm\">@getusasmm</a><br>\n🌐📱💻💬📊📈 Come now our company :<a href=\"https://getusasmm.com/product/buy-old-gmail-accounts/\" rel=\"noopener noreferrer\">https://getusasmm.com/product/buy-old-gmail-accounts/</a></p>\n\n<p>People are drawn to ancient Gmail accounts for a few compelling reasons. One essential calculate is believe. More seasoned accounts frequently come with a history that more up to date ones need. This set up foundation can instill certainty in beneficiaries, making them more likely to lock in with emails.Additionally, matured accounts regularly have a superior standing with e-mail suppliers and social media stages. They’re less likely to be hailed as spam, guaranteeing your messages reach their expecting group of onlookers without pointless barriers.</p>\n\n<p>Another reason is the accessibility of profitable highlights and contacts gathered over time. An more seasoned account may hold get to to systems or assets that can upgrade commerce openings or collaborations.Moreover, prepared Gmail accounts may have higher validity on look motors, emphatically affecting perceivability in online promoting endeavors. The charm of these points of interest drives numerous people and businesses toward obtaining ancient Gmail addresses instep of beginning new with present day ones.</p>\n\n<p>Why ancient Gmail accounts are counted as come full circle for businesses?<br>\nOld Gmail accounts are regularly seen as important resources for businesses. Their life span loans a sense of validity and unwavering quality that more up to date accounts basically can’t duplicate. Built up accounts have a history, which can upgrade brand believe among clients.Additionally, they come with an existing notoriety built over a long time. This implies ancient accounts may as of now have a few level of specialist in the advanced space, making them more compelling for outreach and communication.</p>\n\n<p>Moreover, more seasoned Gmail addresses ordinarily aren’t hailed or related with spam exercises. They permit businesses to lock in openly without the steady stress of being confined by mail providers.The amassed information tied to these accounts offers bits of knowledge into client inclinations and behavior designs. This data can be pivotal when creating focused on showcasing procedures custom-made to particular audiences.Utilizing built up emails too helps in smoother integrative over different stages, upgrading generally operational proficiency inside organizations.</p>\n\n<p> What are the best sharpens for accommodating organization of Gmail accounts?</p>\n\n<p>🌐📱💻💬📊📈 We are available online 24/7.<br>\n🌐📱💻💬📊📈 Telegram:<a class=\"mentioned-user\" href=\"https://dev.to/getusasmm\">@getusasmm</a><br>\n🌐📱💻💬📊📈 WhatsApp::+1(314)203-4162<br>\n🌐📱💻💬📊📈 Telegram:<a class=\"mentioned-user\" href=\"https://dev.to/getusasmm\">@getusasmm</a><br>\n🌐📱💻💬📊📈 Come now our company :<a href=\"https://getusasmm.com/product/buy-old-gmail-accounts/\" rel=\"noopener noreferrer\">https://getusasmm.com/product/buy-old-gmail-accounts/</a></p>\n\n<p>Managing Gmail accounts viably requires a key approach. Begin by organizing your inbox with names and channels. This makes a difference isolated individual emails from work-related ones, making it less demanding to prioritize tasks.Utilizing Google’s highlights like planning emails can streamline communications. It permits you to send messages at ideal times, guaranteeing they reach beneficiaries when they are most likely to engage.</p>\n\n<p>Regularly overhauling passwords is vital for security. Actualize two-factor confirmation as an included layer of assurance against unauthorized access.Consider utilizing third-party devices that coordinated with Gmail for upgraded efficiency. These devices can computerize dreary errands and give analytics on e-mail performance.Setting particular times amid the day to check your mail avoids diversions and boosts generally proficiency in overseeing different accounts. Altering these propensities can change how you utilize Gmail for both individual and trade purposes.</p>\n\n<p> Why businesses select to purchase matured Gmail accounts?<br>\nBusinesses regularly select to purchase matured Gmail accounts for a few vital reasons.First, these accounts as a rule have a history of action. This set up nearness can loan validity and dependability that modern accounts lack. Second, more seasoned Gmail accounts tend to be less helpless to spam channels. They are more likely to arrive in inboxes or maybe than conclusion up in the feared advancements tab or garbage folder. Additionally, matured accounts may come with expanded sending limits. This permits businesses to communicate viably without being ruined by confinements regularly put on more current profiles.Some companies moreover appreciate the capacity to get to highlights like upgraded security choices that come with longer-established Gmail profiles.Buying ancient Gmail accounts can spare time and exertion compared to building an account from scratch whereas improving promoting endeavors immediately.</p>\n\n<p>How can ancient Gmail accounts guarantee client information and sensitive data?</p>\n\n<p>🌐📱💻💬📊📈 We are available online 24/7.<br>\n🌐📱💻💬📊📈 Telegram:<a class=\"mentioned-user\" href=\"https://dev.to/getusasmm\">@getusasmm</a><br>\n🌐📱💻💬📊📈 WhatsApp::+1(314)203-4162<br>\n🌐📱💻💬📊📈 Telegram:<a class=\"mentioned-user\" href=\"https://dev.to/getusasmm\">@getusasmm</a><br>\n🌐📱💻💬📊📈 Come now our company :<a href=\"https://getusasmm.com/product/buy-old-gmail-accounts/\" rel=\"noopener noreferrer\">https://getusasmm.com/product/buy-old-gmail-accounts/</a></p>\n\n<p>Old Gmail accounts regularly come with a history of being utilized mindfully. This track record can contribute to a sense of dependability, guaranteeing clients that their information will be taken care of carefully.When businesses utilize these accounts, they advantage from built up security highlights. More seasoned accounts regularly have more vigorous securities against hacking endeavors and information breaches due toGoogle’s reliable upgrades over the years.Additionally, long-standing accounts may have two-factor verification as of now empowered. This additional layer makes unauthorized get to altogether harder.</p>\n\n<p> Moreover, utilizing more seasoned emails improves validity in communications. Clients are more likely to lock in emphatically when they see an account with life span or maybe than a recently made one.Having dependable recuperation choices is basic for shielding touchy data. Ancient Gmail accounts frequently hold superior get to courses for account recuperation compared to more current ones missing set up histories.Let’s endeavor to examine the honest to goodness regard of ancient Gmail accounts-Old Gmail accounts have a charm that present day ones regularly need. With their set up history, they carry an discuss of reliability. Businesses advantage gigantically from this credibility.These matured accounts come with pre-existing connections and intuitive. This can lead to way better engagement rates in mail promoting campaigns. Clients are more likely to open messages from recognizable addresses.</p>\n\n<p>Additionally, ancient Gmail accounts frequently elude the examination confronted by more up to date ones. They have built a notoriety over time, making them less inclined to spam channels and restrictions.Furthermore, utilizing these accounts can improve your online impression. They may offer assistance move forward look motor rankings due to their life span and genuineness in the computerized landscape.The honest to goodness esteem lies not fair in age but moreover in potential openings for development and association inside the trade ecosystem.</p>\n\n<p>Why we propose businesses to Purchase Ancient Gmail accounts in bulk?<br>\nBuying ancient Gmail accounts in bulk can give businesses with a extend of points of interest. To begin with, these accounts frequently come with built up believe and validity. Having an more seasoned account implies it has a history that can upgrade your brand’s reputation.Bulk buys moreover spare time and exertion. Instep of making unused mail addresses from scratch, companies can rapidly obtain different matured accounts to streamline their operations. This is especially valuable for showcasing campaigns that require prompt outreach.</p>\n\n<p>Additionally, getting ancient Gmail accounts permits get to to highlights that are regularly limited for more current clients. These benefits incorporate expanded sending limits and decreased chances of being hailed asspam amid mail campaigns.The capacity to oversee different accounts viably gives businesses an edge in client engagement methodologies. It empowers more personalized communication without compromising on productivity or security.</p>\n\n<p>What are the best integrator of matured Gmail accounts?</p>\n\n<p>🌐📱💻💬📊📈 We are available online 24/7.<br>\n🌐📱💻💬📊📈 Telegram:<a class=\"mentioned-user\" href=\"https://dev.to/getusasmm\">@getusasmm</a><br>\n🌐📱💻💬📊📈 WhatsApp::+1(314)203-4162<br>\n🌐📱💻💬📊📈 Telegram:<a class=\"mentioned-user\" href=\"https://dev.to/getusasmm\">@getusasmm</a><br>\n🌐📱💻💬📊📈 Come now our company :<a href=\"https://getusasmm.com/product/buy-old-gmail-accounts/\" rel=\"noopener noreferrer\">https://getusasmm.com/product/buy-old-gmail-accounts/</a></p>\n\n<p> Aged Gmail accounts come with a few interesting integrative that can upgrade their convenience for businesses. These accounts frequently have built up histories, making them more dependable in the eyes of both clients and benefit providers.One noteworthy integration is the capacity to interface consistently with different Google administrations. This incorporates Google Drive, Calendar, and indeed YouTube. Such network permits companies to oversee ventures proficiently whereas keeping everything beneath one umbrella.Additionally, more seasoned Gmail accounts regularly appreciate higher validity on social media stages. They are less likely to be hailed as spam when utilized for promoting campaigns or outreach efforts.</p>\n\n<p>Moreover, these matured accounts regularly advantage from superior deliverability rates for e-mail showcasing. This implies your messages are more likely to reach inboxes or maybe than being sifted out as garbage mail.Utilizing ancient Gmail accounts can streamline operations whereas improving communication procedures effectively.</p>\n\n<p>How Do Matured Gmail Accounts Offer assistance With SEO &amp; Ads?<br>\nAged Gmail accounts can essentially upgrade your SEO and publicizing endeavors. These accounts regularly come with a long history, which look motors tend to favor. An set up mail nearness can loan validity to your online activities.When running advertisement campaigns, having more seasoned accounts makes a difference construct believe with stages like </p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Beyond Role-Play: Can LLMs Truly 'Think' Like Us?","url":"https://dev.to/arvind_sundararajan/beyond-role-play-can-llms-truly-think-like-us-19ap","date":1761505325,"author":"Arvind SundaraRajan","guid":315459,"unread":true,"content":"<h1>\n  \n  \n  Beyond Role-Play: Can LLMs Truly 'Think' Like Us?\n</h1>\n\n<p>Ever felt an AI-generated story lacked the unique spark of your favorite author? While large language models excel at mimicking surface-level writing styles, a deeper question remains: Can they truly simulate individualized thought processes? We're pushing LLMs beyond simple role-play towards genuine cognitive simulation.</p>\n\n<p>The core concept: constructing computational models that approximate the thinking patterns of specific individuals. This involves analyzing textual data to extract features representing that individual's unique cognitive style, then training the LLM to generate content reflecting those features. Think of it as teaching an LLM to \"wear\" someone's mind, not just their words.</p>\n\n<p>Imagine building an AI that understands and responds to your communication style, not just your explicit instructions. Here's how this technology could revolutionize personalized AI:</p>\n\n<ul>\n<li>  <strong>Hyper-personalized content creation:</strong> Generate marketing copy or dialogue that resonates with specific target audiences.</li>\n<li>  <strong>Adaptive learning systems:</strong> Tailor educational content to a student's preferred learning style and cognitive biases.</li>\n<li>  <strong>Enhanced human-computer interaction:</strong> Create virtual assistants that truly understand and adapt to individual user preferences.</li>\n<li>  <strong>Improved accessibility:</strong> Design AI tools that cater to individuals with diverse cognitive abilities.</li>\n<li>  <strong>More realistic AI Companions:</strong> Develop AI companions that not only interact but also \"think\" and respond the way a specific individual might.</li>\n</ul>\n\n<p><strong>Insight:</strong> One challenge is mapping implicit cognitive styles from limited data. Finding the right balance between linguistic patterns, conceptual frameworks, and demographic profiles is key.</p>\n\n<p>This individualized approach isn't just about replicating style; it's about simulating the underlying thought processes that shape that style. We're moving towards AI that understands <em>why</em> someone writes a certain way, opening doors to more nuanced, personalized, and ultimately, more human-like interactions. A practical tip: start by focusing on identifiable linguistic patterns before attempting to model more abstract concepts.</p>\n\n<p><strong>Analogy:</strong> Imagine an AI that captures the style of a great leader and then uses that for communication to inspire a team in a virtual environment.</p>\n\n<p><strong>Novel Application:</strong> Developing AI therapists capable of tailoring their communication style to match the patient's cognitive framework, improving rapport and treatment effectiveness.</p>\n\n<p>Related Keywords: LLMs, Cognitive Simulation, Artificial Intelligence, Machine Learning, Cognitive Representation, Personalized AI, AI Models, AI Algorithms, Neural Networks, Deep Learning, Natural Language Processing, Cognitive Science, Computational Psychology, AI Ethics, Explainable AI (XAI), AI Personalization, AI Memory, AI Reasoning, Agent-Based Modeling, LLM Architecture, Knowledge Representation, Simulation Technologies, Individual Differences, Cognitive Biases, Generative Models</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"LLMZ25-6 Review : Propuesta de Integración con LangChain para lus-laboris-py","url":"https://dev.to/jesus_oviedoriquelme_084/llmz25-6-review-propuesta-de-integracion-con-langchain-para-lus-laboris-py-3b8b","date":1761504143,"author":"Jesus Oviedo Riquelme","guid":315477,"unread":true,"content":"<p><strong>lus-laboris-py</strong> es un sistema de investigación legal impulsado por IA que actualmente utiliza una arquitectura basada en FastAPI con integración de OpenAI, Qdrant para búsqueda vectorial, y Arize Phoenix para monitoreo. Este post propone una <strong>modernización arquitectónica</strong> integrando <strong>LangChain</strong> para mejorar la modularidad, escalabilidad y mantenibilidad del sistema.</p>\n\n\n\n\n<h2>\n  \n  \n  Arquitectura Actual vs Propuesta\n</h2>\n\n<h3>\n  \n  \n  Arquitectura Actual de lus-laboris-py\n</h3>\n\n<p>Según el README del proyecto <a href=\"https://github.com/jesusoviedo/lus-laboris-py\" rel=\"noopener noreferrer\">github.com/jesusoviedo/lus-laboris-py</a>, el sistema actual implementa:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Usuario → FastAPI → OpenAI LLM → Qdrant Vector Search → Respuesta Legal\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Stack Tecnológico Actual:</strong></p>\n\n<ul>\n<li>FastAPI para la API</li>\n<li>OpenAI para procesamiento de LLM</li>\n<li>Qdrant para búsqueda vectorial</li>\n<li>Arize Phoenix para monitoreo</li>\n<li>Docker para containerización</li>\n<li>UV como gestor de paquetes</li>\n</ul>\n\n<p><strong>Características Actuales:</strong></p>\n\n<ul>\n<li>Sistema de investigación legal automatizado</li>\n<li>Integración con Qdrant para búsqueda de documentos legales</li>\n<li>Monitoreo con Phoenix</li>\n<li>Documentación con Guías en docs/README.md</li>\n<li>Deploy a GCP</li>\n</ul>\n\n<p><strong>Limitaciones detectadas:</strong></p>\n\n<ul>\n<li>Arquitectura sin framework especializado (sin LangChain)</li>\n<li>Flujo de trabajo custom sin estándares LCEL</li>\n<li>Prompts probablemente embebidos en código</li>\n<li>No aprovecha retriever patterns de LangChain</li>\n<li>Limitada modularidad y reutilización</li>\n</ul>\n\n<h3>\n  \n  \n  Arquitectura Propuesta (Con LangChain)\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Usuario → Query Analysis → Multi-Search → Re-ranking → Legal Analysis → Response\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Ventajas de la Propuesta:</strong></p>\n\n<ul>\n<li>Modular con <code>RunnableLambda</code> para orquestación flexible</li>\n<li>Prompts separados con <code>PromptTemplate</code> para mejor mantenibilidad</li>\n<li>Recuperación avanzada con <code>ParentDocumentRetriever</code> para jerarquía de documentos</li>\n<li>Re-ranking con <code>ContextualCompressionRetriever</code> y Flashrank</li>\n<li>Observabilidad mejorada con Phoenix integrado a LangChain</li>\n<li>Escalable con LCEL (LangChain Expression Language)</li>\n<li>Patterns estándar de la industria</li>\n<li>Fácil integración con nuevos LLMs (Claude, Gemini, etc.)</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  Implementación Propuesta\n</h2>\n\n<h3>\n  \n  \n  1. Estructura de Prompts\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>from langchain.prompts import PromptTemplate\n\nQUERY_ANALYSIS_PROMPT = PromptTemplate(\n    input_variables=[\"user_query\", \"country\", \"legal_area\"],\n    template=\"\"\"\nEres un experto en análisis de consultas legales.\n\nConsulta del usuario: {user_query}\nPaís: {country}\nÁrea legal: {legal_area}\n\nInstrucciones:\n1. Identifica el tipo de consulta legal\n2. Extrae conceptos clave y términos legales relevantes\n3. Genera entre 3-5 consultas de búsqueda optimizadas\n\nDevuelve JSON con: query_type, key_concepts, search_queries, related_areas\n\"\"\"\n)\n\nLEGAL_ANALYSIS_PROMPT = PromptTemplate(\n    input_variables=[\"query\", \"legal_documents\", \"jurisdiction\"],\n    template=\"\"\"\nEres un abogado experto analizando documentos legales.\n\nConsulta: {query}\nJurisdicción: {jurisdiction}\n\nDocumentos legales:\n{legal_documents}\n\nAnaliza y proporciona: resumen ejecutivo, análisis legal, leyes relevantes, recomendaciones\n\"\"\"\n)\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  2. Pipeline con RunnableLambda\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>from langchain_core.runnables import RunnableLambda\nfrom langchain_openai import ChatOpenAI\nfrom langchain_qdrant import QdrantVectorStore\n\nllm = ChatOpenAI(model=\"gpt-4o\", temperature=0.3)\n\ndef _analyze_query(inputs):\n    \"\"\"Etapa 1: Analizar consulta\"\"\"\n    chain = QUERY_ANALYSIS_PROMPT | llm\n    result = chain.invoke({\n        \"user_query\": inputs[\"query\"],\n        \"country\": inputs[\"country\"],\n        \"legal_area\": inputs[\"legal_area\"]\n    })\n    return {**inputs, \"query_analysis\": parse_json(result.content)}\n\ndef _retrieve_docs(inputs):\n    \"\"\"Etapa 2: Recuperar documentos\"\"\"\n    all_docs = []\n    for query in inputs[\"search_queries\"]:\n        docs = compressed_retriever.invoke(query)\n        all_docs.extend(docs)\n    return {**inputs, \"documents\": deduplicate(all_docs)}\n\ndef _analyze_legal(inputs):\n    \"\"\"Etapa 3: Análisis legal con LLM\"\"\"\n    chain = LEGAL_ANALYSIS_PROMPT | llm\n    result = chain.invoke({\n        \"query\": inputs[\"query\"],\n        \"legal_documents\": format_docs(inputs[\"documents\"]),\n        \"jurisdiction\": inputs[\"country\"]\n    })\n    return {**inputs, \"legal_analysis\": result.content}\n\n# Pipeline completo\nlegal_workflow = (\n    RunnableLambda(_analyze_query)\n    | RunnableLambda(_retrieve_docs)\n    | RunnableLambda(_analyze_legal)\n)\n\ndef process_legal_query(query: str, country: str = \"Spain\"):\n    \"\"\"Procesar consulta legal\"\"\"\n    return legal_workflow.invoke({\"query\": query, \"country\": country})\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  Comparación Antes vs Después\n</h2>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Aspecto</th>\n<th>Sin LangChain</th>\n<th>Con LangChain</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Prompts</strong></td>\n<td>Embebidos en código</td>\n<td>\n<code>PromptTemplate</code> separado</td>\n</tr>\n<tr>\n<td><strong>Workflow</strong></td>\n<td>Hardcodeado</td>\n<td>Pipeline modular</td>\n</tr>\n<tr>\n<td><strong>Retrieval</strong></td>\n<td>Manual</td>\n<td>\n<code>ParentDocumentRetriever</code> + re-ranking</td>\n</tr>\n<tr>\n<td><strong>Observabilidad</strong></td>\n<td>Limitada</td>\n<td>Phoenix integrado</td>\n</tr>\n<tr>\n<td><strong>Debugging</strong></td>\n<td>Difícil</td>\n<td>Traces completos</td>\n</tr>\n</tbody>\n</table></div>\n\n\n\n\n<h2>\n  \n  \n  Ventajas de la Nueva Arquitectura\n</h2>\n\n<ol>\n<li>✅ <strong>Modularidad</strong>: Componentes intercambiables</li>\n<li>✅ <strong>Observabilidad</strong>: Traces con Phoenix</li>\n<li>✅ <strong>Escalabilidad</strong>: Fácil agregar features</li>\n<li>✅ <strong>Mantenibilidad</strong>: Código más limpio</li>\n<li>✅ <strong>Optimización</strong>: A/B testing de prompts</li>\n<li>✅ <strong>Performance</strong>: Retrieval avanzado + re-ranking</li>\n</ol>\n\n\n\n\n<h2>\n  \n  \n  Plan de Migración (10 semanas)\n</h2>\n\n<h3>\n  \n  \n  Fase 1-2: Preparación (Semanas 1-2)\n</h3>\n\n<ul>\n<li>Instalar dependencias de LangChain: <code>uv add langchain langchain-openai langchain-qdrant</code>\n</li>\n<li>Configurar integración de Phoenix con LangChain</li>\n<li>Revisar estructura actual del proyecto</li>\n<li>Estudiar README y documentación existente</li>\n</ul>\n\n<h3>\n  \n  \n  Fase 3-4: Migración de Prompts (Semanas 3-4)\n</h3>\n\n<ul>\n<li>Extraer prompts del código actual</li>\n<li>Convertir a <code>PromptTemplate</code> de LangChain</li>\n<li>Crear archivo <code>legal_prompts.py</code> con templates especializados</li>\n<li>Testing A/B de prompts</li>\n</ul>\n\n<h3>\n  \n  \n  Fase 5-6: Implementación de Retrievers (Semanas 5-6)\n</h3>\n\n<ul>\n<li>Configurar <code>ParentDocumentRetriever</code> con Qdrant existente</li>\n<li>Implementar <code>ContextualCompressionRetriever</code> con Flashrank</li>\n<li>Optimizar chunking para documentos legales (500-800 chars)</li>\n<li>Implementar deduplicación de resultados</li>\n</ul>\n\n<h3>\n  \n  \n  Fase 7-8: Pipeline con RunnableLambda (Semanas 7-8)\n</h3>\n\n<ul>\n<li>Convertir funciones existentes a <code>RunnableLambda</code>\n</li>\n<li>Implementar <code>workflow_chain</code> con LCEL</li>\n<li>Migrar lógica de búsqueda a retriever chain</li>\n<li>Testing end-to-end</li>\n</ul>\n\n<h3>\n  \n  \n  Fase 9-10: Optimización y Deployment (Semanas 9-10)\n</h3>\n\n<ul>\n<li>Configurar observabilidad mejorada con Phoenix</li>\n<li>Monitorear métricas (latency, cost, quality)</li>\n<li>Optimizar prompts y parámetros</li>\n<li>Actualizar documentación y guías</li>\n<li>Deploy a GCP con nueva arquitectura</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  Conclusión\n</h2>\n\n<p>La integración de <strong>LangChain</strong> en <strong>lus-laboris-py</strong> transformará el sistema en una arquitectura <strong>moderna, observable y escalable</strong>, siguiendo las mejores prácticas demostradas en el proyecto <a href=\"https://github.com/clementlwm94/ziweidoushu\" rel=\"noopener noreferrer\">ziweidoushu</a>.</p>\n\n<h3>\n  \n  \n  Beneficios Esperados\n</h3>\n\n<ol>\n<li>\n<p><strong>Modularidad Mejorada</strong></p>\n\n<ul>\n<li>Componentes intercambiables (Qdrant, Pinecone, etc.)</li>\n<li>Fácil cambiar de GPT-4 a Claude u otros LLMs</li>\n<li>Prompts reutilizables y versionados</li>\n</ul>\n</li>\n<li>\n<p><strong>Observabilidad Profesional</strong></p>\n\n<ul>\n<li>Traces automáticos con Phoenix</li>\n<li>Métricas detalladas de latency, tokens, costos</li>\n<li>Debug simplificado con spans y context</li>\n</ul>\n</li>\n<li>\n<p><strong>Escalabilidad Futura</strong></p>\n\n<ul>\n<li>Agregar nuevas fuentes legales es trivial</li>\n<li>Soporte multi-idioma con translate chains</li>\n<li>Agentes para búsqueda dinámica</li>\n</ul>\n</li>\n<li>\n<p><strong>Mantenibilidad</strong></p>\n\n<ul>\n<li>Código más limpio y organizado</li>\n<li>Separación clara de concerns</li>\n<li>Testing más fácil de unit e integration</li>\n</ul>\n</li>\n</ol>\n\n<p><strong>Repositorios:</strong></p>\n\n<ul>\n<li>\n<strong>ziweidoushu</strong> (referencia): <a href=\"https://github.com/clementlwm94/ziweidoushu\" rel=\"noopener noreferrer\">github.com/clementlwm94/ziweidoushu</a>\n</li>\n<li>\n<strong>lus-laboris-py</strong>: <a href=\"https://github.com/jesusoviedo/lus-laboris-py\" rel=\"noopener noreferrer\">github.com/jesusoviedo/lus-laboris-py</a>\n</li>\n</ul>\n\n<p><strong>Referencias:</strong></p>\n\n<ul>\n<li><a href=\"https://python.langchain.com/\" rel=\"noopener noreferrer\">LangChain Documentation</a></li>\n<li><a href=\"https://python.langchain.com/docs/expression_language/\" rel=\"noopener noreferrer\">RunnableLambda</a></li>\n<li><a href=\"https://python.langchain.com/docs/modules/data_connection/retrievers/parent_document_retriever\" rel=\"noopener noreferrer\">ParentDocumentRetriever</a></li>\n<li><a href=\"https://python.langchain.com/docs/integrations/vectorstores/qdrant\" rel=\"noopener noreferrer\">Qdrant Integration</a></li>\n<li><a href=\"https://docs.arize.com/phoenix\" rel=\"noopener noreferrer\">Arize Phoenix</a></li>\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: How to Write Production Python Code","url":"https://dev.to/vibe_youtube/tech-with-tim-how-to-write-production-python-code-56fd","date":1761502150,"author":"Vibe YouTube","guid":315458,"unread":true,"content":"<h1>\n  \n  \n  How to Write Production Python Code\n</h1>\n\n<p>Tim from Tech With Tim breaks down the art of writing production-ready Python by walking you through eight core principles—complete with real-world examples—so you can level up from a junior dev to a seasoned pro.</p>\n\n<p>Along the way, he sprinkles in bonus resources: snag 25% off boot.dev with code TECHWITHTIM, explore his DevLaunch mentorship for hands-on guidance, and grab all the sample code via his newsletter (timestamps included for each principle!).</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=qU3Rc6_B9es\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: How to Write Production Python Code","url":"https://dev.to/vibe_youtube/tech-with-tim-how-to-write-production-python-code-51pb","date":1761494855,"author":"Vibe YouTube","guid":315413,"unread":true,"content":"<h1>\n  \n  \n  How to Write Production Python Code\n</h1>\n\n<p>Tech With Tim’s latest deep-dive walks you through eight core principles for crafting production-ready Python—complete with real-world examples, clear timestamps for each concept, and no fluff tutorials. You’ll learn what separates a junior script from a senior-level codebase, from sound architecture to maintainable testing and everything in between.</p>\n\n<p>Along the way you can snag 25% off boot.dev with code <strong>TECHWITHTIM</strong>, join the DevLaunch mentorship for hands-on guidance, and grab the full code samples via his newsletter—so you’ll have all the tools to level up your Python game.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=qU3Rc6_B9es\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"prepare python environment","url":"https://dev.to/clara1123/prepare-python-environment-1id3","date":1761492029,"author":"kk1123","guid":315457,"unread":true,"content":"<h2>\n  \n  \n  Create virtual environment\n</h2>\n\n<ol>\n<li>Create a project folder</li>\n<li>Cd to the project folder</li>\n<li>Create virtual environment: <code>conda create -n ai_painting python=3.10</code>\n</li>\n<li>Activate virtual environment: <code>conda activate ai_painting</code>\n</li>\n</ol>\n\n<h2>\n  \n  \n  Install librarys\n</h2>\n\n<ol>\n<li>Install CPU torch <code>pip install torch trochvision trochaudio</code>\n</li>\n<li>Install AI painting libraries <code>pip install diffusers[\"torch\"] transformers accelerate</code>\n</li>\n<li>Install web framework:<code>pip install \"fastapi[standard]\"</code>\n</li>\n</ol>\n\n<h2>\n  \n  \n  Test Installing\n</h2>\n\n<p>Create a python file:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">torch</span>\n<span class=\"kn\">from</span> <span class=\"n\">diffusers</span> <span class=\"kn\">import</span> <span class=\"n\">StableDiffusionPipeline</span>\n<span class=\"kn\">import</span> <span class=\"n\">gc</span>  <span class=\"c1\"># Garbage collector\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">🔧 Setting up optimized AI system...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Force CPU and clear memory\n</span><span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">cpu</span><span class=\"sh\">\"</span>\n<span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"n\">cuda</span><span class=\"p\">.</span><span class=\"nf\">empty_cache</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"n\">cuda</span><span class=\"p\">.</span><span class=\"nf\">is_available</span><span class=\"p\">()</span> <span class=\"k\">else</span> <span class=\"bp\">None</span>\n<span class=\"n\">gc</span><span class=\"p\">.</span><span class=\"nf\">collect</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">🚀 Loading model with memory optimization...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Load with memory optimizations\n</span>    <span class=\"n\">model_id</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">runwayml/stable-diffusion-v1-5</span><span class=\"sh\">\"</span>\n\n    <span class=\"c1\"># Load to CPU with specific settings for stability\n</span>    <span class=\"n\">pipe</span> <span class=\"o\">=</span> <span class=\"n\">StableDiffusionPipeline</span><span class=\"p\">.</span><span class=\"nf\">from_pretrained</span><span class=\"p\">(</span>\n        <span class=\"n\">model_id</span><span class=\"p\">,</span>\n        <span class=\"n\">torch_dtype</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"n\">float32</span><span class=\"p\">,</span>  <span class=\"c1\"># Use float32 for CPU stability\n</span>        <span class=\"n\">use_safetensors</span><span class=\"o\">=</span><span class=\"bp\">True</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">pipe</span> <span class=\"o\">=</span> <span class=\"n\">pipe</span><span class=\"p\">.</span><span class=\"nf\">to</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Disable the safety checker to save memory\n</span>    <span class=\"n\">pipe</span><span class=\"p\">.</span><span class=\"n\">safety_checker</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    <span class=\"n\">pipe</span><span class=\"p\">.</span><span class=\"n\">requires_safety_checker</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">✅ Model loaded! Generating smaller test image...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Generate a smaller image to save memory\n</span>    <span class=\"n\">prompt</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">a simple red apple on a table</span><span class=\"sh\">\"</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"nf\">no_grad</span><span class=\"p\">():</span>\n        <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"nf\">pipe</span><span class=\"p\">(</span>\n            <span class=\"n\">prompt</span><span class=\"p\">,</span>\n            <span class=\"n\">num_inference_steps</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span>  <span class=\"c1\"># Fewer steps = less memory\n</span>            <span class=\"n\">guidance_scale</span><span class=\"o\">=</span><span class=\"mf\">7.5</span><span class=\"p\">,</span>\n            <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">256</span><span class=\"p\">,</span>  <span class=\"c1\"># Smaller image\n</span>            <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">256</span>   <span class=\"c1\"># Smaller image\n</span>        <span class=\"p\">).</span><span class=\"n\">images</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"n\">image</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">test_small.jpg</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">📁 Success! Image saved as </span><span class=\"sh\">'</span><span class=\"s\">test_small.jpg</span><span class=\"sh\">'\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">❌ Error: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Brian Okken: Polite lazy imports for Python package maintainers","url":"https://pythontest.com/polite-lazy-imports-python-packages/","date":1761491580,"author":"","guid":316619,"unread":true,"content":"<p>If you are a maintainer of a Python package, it’s nice if you pay attention to the time it takes to import your package.</p><p>Further, if you’ve got a Python package with multiple components where it’s probable that many users will only use part of the package, then it’s super nice if you set up your   files for lazy importing.</p><h2>Previously - lazy importing other packages</h2>","contentLength":373,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Dynamic Decisions: Making Memory-Efficient AI a Reality with Differentiable Algorithms by Arvind Sundararajan","url":"https://dev.to/arvind_sundararajan/dynamic-decisions-making-memory-efficient-ai-a-reality-with-differentiable-algorithms-by-arvind-136c","date":1761490924,"author":"Arvind SundaraRajan","guid":315376,"unread":true,"content":"<h1>\n  \n  \n  Dynamic Decisions: Making Memory-Efficient AI a Reality with Differentiable Algorithms\n</h1>\n\n<p>Imagine training an AI to plan the most efficient delivery route across a city, or to understand complex grammar in a sentence. The problem? Traditional AI struggles with these tasks because it needs to remember every possible option, leading to massive memory consumption. What if you could train an AI to make complex, step-by-step decisions, without requiring exponential memory increases?</p>\n\n<p>Differentiable Dynamic Programming (DDP) allows us to create AI systems that can learn to solve problems using memory-optimized algorithms. The core idea is to make the normally discrete steps of dynamic programming algorithms smoothly differentiable. This allows us to directly train the AI using gradient-based optimization techniques.</p>\n\n<p>Instead of a hard decision at each step, we introduce a \"soft\" selection. Think of it like a blurry decision that gradually sharpens as the AI learns. The AI explores multiple possibilities, weighting each according to its potential benefit. By using mathematical tricks, these soft decisions can be optimized using standard machine learning methods, enabling us to train end-to-end.</p>\n\n<p><strong>Benefits of Differentiable Dynamic Programming:</strong></p>\n\n<ul>\n<li>  <strong>Memory Efficiency:</strong> Significantly reduces memory footprint compared to brute-force methods.</li>\n<li>  <strong>End-to-End Training:</strong> Allows seamless integration of algorithmic reasoning into neural networks.</li>\n<li>  <strong>Improved Accuracy:</strong> Enables the model to learn complex dependencies and structured predictions more effectively.</li>\n<li>  <strong>Enhanced Interpretability:</strong> Offers insights into the decision-making process of the model.</li>\n<li>  <strong>Algorithmic Integration:</strong> Integrates custom algorithms to solve specific problems.</li>\n<li>  <strong>Faster Runtimes:</strong> Allows the AI to be trained faster on complex problems.</li>\n</ul>\n\n<p><strong>Implementation Challenge:</strong> Crafting the right \"soft\" approximation is crucial. Choosing the wrong method can lead to unstable training or poor performance. Careful experimentation is needed to find the optimal differentiable formulation for each specific problem.</p>\n\n<p><strong>A Novel Application:</strong> Think about optimizing power grid management. DDP could be used to dynamically adjust energy distribution based on real-time demand and supply, minimizing wastage and improving efficiency.</p>\n\n<p>This approach opens a new frontier for AI development, allowing us to incorporate algorithmic inductive biases into our models, which can lead to more efficient, interpretable, and powerful AI systems. By making memory-efficient algorithms trainable, we can tackle complex problems that were previously intractable. The future holds exciting possibilities as we explore the full potential of differentiable dynamic programming in diverse domains.</p>\n\n<p><strong>Related Keywords:</strong> Differentiable Programming, Dynamic Programming, Structured Prediction, Attention Mechanisms, Neural Networks, Optimization, Backpropagation, Graph Algorithms, Computational Linguistics, Natural Language Processing, Computer Vision, Sequence Modeling, Reinforcement Learning, PyTorch, TensorFlow, Automatic Differentiation, Machine Translation, Image Segmentation, Time Series Analysis, Inference, Training Algorithms, Explainable AI, Interpretability, AutoML</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Generates Webs from Type Hints","url":"https://dev.to/offerrall/generates-webs-from-type-hints-ee8","date":1761489841,"author":"Beltrán Offerrall","guid":315375,"unread":true,"content":"<h3>\n  \n  \n  The Problem I Was Solving\n</h3>\n\n<p>I run a laser cutting business. Every day I need to:</p>\n\n<ul>\n<li>Process images for engraving</li>\n<li>Generate reports from production data\n</li>\n<li>Share tools with my team (who don't code)</li>\n</ul>\n\n<p>I wanted something insane: <strong>Just type hints → complete web UI</strong></p>\n\n<p>So I built it.</p>\n\n\n\n\n<h3>\n  \n  \n  Introducing FuncToWeb\n</h3>\n\n<p>After a month, I shipped <a href=\"https://github.com/offerrall/FuncToWeb\" rel=\"noopener noreferrer\">FuncToWeb</a> - a framework that auto-generates production-ready web interfaces from Python type hints.</p>\n\n<p><strong>Zero HTML. Zero CSS. Zero JavaScript.</strong></p>\n\n<h3>\n  \n  \n  The 30-Second Demo\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Annotated</span>\n<span class=\"kn\">from</span> <span class=\"n\">func_to_web</span> <span class=\"kn\">import</span> <span class=\"n\">run</span>\n<span class=\"kn\">from</span> <span class=\"n\">func_to_web.types</span> <span class=\"kn\">import</span> <span class=\"n\">ImageFile</span>\n<span class=\"kn\">from</span> <span class=\"n\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">Field</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">process_image</span><span class=\"p\">(</span>\n    <span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"n\">ImageFile</span><span class=\"p\">,</span>\n    <span class=\"n\">brightness</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nc\">Field</span><span class=\"p\">(</span><span class=\"n\">ge</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">le</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"mi\">50</span><span class=\"p\">,</span>\n    <span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">grayscale</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">sepia</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">blur</span><span class=\"sh\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">grayscale</span><span class=\"sh\">\"</span>\n<span class=\"p\">):</span>\n    <span class=\"c1\"># Your image processing logic here\n</span>    <span class=\"n\">processed</span> <span class=\"o\">=</span> <span class=\"nf\">apply_filter</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">brightness</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">processed</span>  <span class=\"c1\"># PIL Image auto-displayed\n</span>\n<span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">process_image</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>What you get:</strong></p>\n\n<ul>\n<li>✅ Professional file upload with drag-and-drop</li>\n<li>✅ Slider for brightness (0-100, validated client + server)</li>\n<li>✅ Dropdown for mode selection</li>\n<li>✅ Real-time validation errors</li>\n<li>✅ Result image displayed beautifully</li>\n<li>✅ Dark mode toggle (preference saved)</li>\n</ul>\n\n<p><strong>3 lines of setup. 0 lines of UI code.</strong></p>\n\n\n\n\n<h3>\n  \n  \n  Every Type Becomes The Right UI Component\n</h3>\n\n<p>The magic is in the type hints:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">func_to_web</span> <span class=\"kn\">import</span> <span class=\"n\">run</span>\n<span class=\"kn\">from</span> <span class=\"n\">func_to_web.types</span> <span class=\"kn\">import</span> <span class=\"n\">Color</span><span class=\"p\">,</span> <span class=\"n\">Email</span><span class=\"p\">,</span> <span class=\"n\">DocumentFile</span><span class=\"p\">,</span> <span class=\"n\">ImageFile</span>\n<span class=\"kn\">from</span> <span class=\"n\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">time</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">create_project</span><span class=\"p\">(</span>\n    <span class=\"c1\"># Text types\n</span>    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>                    <span class=\"c1\"># Text input\n</span>    <span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"n\">Email</span><span class=\"p\">,</span>                 <span class=\"c1\"># Email input with validation\n</span>\n    <span class=\"c1\"># Numbers\n</span>    <span class=\"n\">budget</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">,</span>                <span class=\"c1\"># Number input (decimals)\n</span>    <span class=\"n\">team_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>               <span class=\"c1\"># Number input (integers)\n</span>\n    <span class=\"c1\"># Choices\n</span>    <span class=\"n\">active</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">,</span>                 <span class=\"c1\"># Checkbox\n</span>    <span class=\"n\">priority</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">low</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">medium</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">high</span><span class=\"sh\">\"</span><span class=\"p\">],</span>  <span class=\"c1\"># Dropdown\n</span>\n    <span class=\"c1\"># Dates &amp; Times\n</span>    <span class=\"n\">deadline</span><span class=\"p\">:</span> <span class=\"n\">date</span><span class=\"p\">,</span>               <span class=\"c1\"># Date picker\n</span>    <span class=\"n\">meeting</span><span class=\"p\">:</span> <span class=\"n\">time</span><span class=\"p\">,</span>                <span class=\"c1\"># Time picker\n</span>\n    <span class=\"c1\"># Visual\n</span>    <span class=\"n\">brand_color</span><span class=\"p\">:</span> <span class=\"n\">Color</span><span class=\"p\">,</span>           <span class=\"c1\"># Color picker\n</span>\n    <span class=\"c1\"># Files\n</span>    <span class=\"n\">logo</span><span class=\"p\">:</span> <span class=\"n\">ImageFile</span><span class=\"p\">,</span>              <span class=\"c1\"># Image upload (jpg, png, webp, etc.)\n</span>    <span class=\"n\">contract</span><span class=\"p\">:</span> <span class=\"n\">DocumentFile</span><span class=\"p\">,</span>       <span class=\"c1\"># Document upload (pdf, docx, etc.)\n</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Project </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"s\"> created!</span><span class=\"sh\">\"</span>\n\n<span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">create_project</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>All of this becomes a complete form automatically.</strong></p>\n\n\n\n\n<h3>\n  \n  \n  Validation That Actually Works\n</h3>\n\n<h3>\n  \n  \n  Pydantic Integration\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Annotated</span>\n<span class=\"kn\">from</span> <span class=\"n\">func_to_web</span> <span class=\"kn\">import</span> <span class=\"n\">run</span>\n<span class=\"kn\">from</span> <span class=\"n\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">Field</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">register_user</span><span class=\"p\">(</span>\n    <span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nc\">Field</span><span class=\"p\">(</span><span class=\"n\">min_length</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)],</span>\n    <span class=\"n\">age</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nc\">Field</span><span class=\"p\">(</span><span class=\"n\">ge</span><span class=\"o\">=</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"n\">le</span><span class=\"o\">=</span><span class=\"mi\">120</span><span class=\"p\">)],</span>\n    <span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nc\">Field</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"sh\">'</span><span class=\"s\">^[^@]+@[^@]+\\.[^@]+$</span><span class=\"sh\">'</span><span class=\"p\">)],</span>\n    <span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nc\">Field</span><span class=\"p\">(</span><span class=\"n\">min_length</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)],</span>\n<span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Welcome </span><span class=\"si\">{</span><span class=\"n\">username</span><span class=\"si\">}</span><span class=\"s\">!</span><span class=\"sh\">\"</span>\n\n<span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">register_user</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Error messages appear in real-time:</strong></p>\n\n<ul>\n<li>\"Username must be at least 3 characters\"</li>\n<li>\"Age must be between 18 and 120\"</li>\n<li>\"Please enter a valid email\"</li>\n<li>\"Password must be at least 8 characters\"</li>\n</ul>\n\n<p>Both client-side (instant) AND server-side (secure).</p>\n\n\n\n\n<h3>\n  \n  \n  Lists With Two-Level Validation\n</h3>\n\n<p>This is where it gets crazy. You can validate <strong>both</strong> the list size AND each individual item:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Annotated</span>\n<span class=\"kn\">from</span> <span class=\"n\">func_to_web</span> <span class=\"kn\">import</span> <span class=\"n\">run</span>\n<span class=\"kn\">from</span> <span class=\"n\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">Field</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">rate_products</span><span class=\"p\">(</span>\n    <span class=\"c1\"># List must have 3-10 items\n</span>    <span class=\"c1\"># Each item must be between 1-5\n</span>    <span class=\"n\">ratings</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span>\n        <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nc\">Field</span><span class=\"p\">(</span><span class=\"n\">ge</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">le</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)]],</span> \n        <span class=\"nc\">Field</span><span class=\"p\">(</span><span class=\"n\">min_length</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">],</span>\n<span class=\"p\">):</span>\n    <span class=\"n\">avg</span> <span class=\"o\">=</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">ratings</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">ratings</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Average rating: </span><span class=\"si\">{</span><span class=\"n\">avg</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n\n<span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">rate_products</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>The UI shows:</strong></p>\n\n<ul>\n<li>Dynamic add/remove buttons</li>\n<li>Validation error if you have &lt; 3 or &gt; 10 ratings</li>\n<li>Validation error if any rating is not 1-5</li>\n<li>Pre-filled defaults if you provide them</li>\n</ul>\n\n<p>Works with ALL types: <code>list[str]</code>, <code>list[Color]</code>, <code>list[date]</code>, etc.</p>\n\n\n\n\n<h3>\n  \n  \n  Dynamic Dropdowns (Runtime-Populated)\n</h3>\n\n<p>Want dropdowns populated from a database or API? Use <code>Literal[function]</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">func_to_web</span> <span class=\"kn\">import</span> <span class=\"n\">run</span>\n<span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Literal</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_users_from_database</span><span class=\"p\">():</span>\n    <span class=\"c1\"># This runs when the form loads\n</span>    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">Alice</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Bob</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Charlie</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Diana</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">assign_task</span><span class=\"p\">(</span>\n    <span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"n\">get_users_from_database</span><span class=\"p\">],</span>  <span class=\"c1\"># Dropdown calls function!\n</span>    <span class=\"n\">priority</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">low</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">medium</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">high</span><span class=\"sh\">\"</span><span class=\"p\">],</span>\n    <span class=\"n\">task</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Task </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">task</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"s\"> assigned to </span><span class=\"si\">{</span><span class=\"n\">user</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n\n<span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">assign_task</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The dropdown is populated <strong>at runtime</strong> by calling your function. Perfect for database queries, API calls, or dynamic options.</p>\n\n\n\n\n<h3>\n  \n  \n  Optional Fields With State Control\n</h3>\n\n<p>Standard Python optional syntax works, but you can also <strong>control the initial state</strong>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">func_to_web</span> <span class=\"kn\">import</span> <span class=\"n\">run</span>\n<span class=\"kn\">from</span> <span class=\"n\">func_to_web.types</span> <span class=\"kn\">import</span> <span class=\"n\">OptionalEnabled</span><span class=\"p\">,</span> <span class=\"n\">OptionalDisabled</span><span class=\"p\">,</span> <span class=\"n\">Email</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">create_user</span><span class=\"p\">(</span>\n    <span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>  <span class=\"c1\"># Required (no toggle)\n</span>\n    <span class=\"c1\"># Standard Python: Auto-detected state\n</span>    <span class=\"n\">age</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"bp\">None</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span>         <span class=\"c1\"># Disabled (no default)\n</span>    <span class=\"n\">city</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"bp\">None</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Madrid</span><span class=\"sh\">\"</span><span class=\"p\">,</span>    <span class=\"c1\"># Enabled (has default)\n</span>\n    <span class=\"c1\"># Explicit control: You decide initial state\n</span>    <span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"n\">Email</span> <span class=\"o\">|</span> <span class=\"n\">OptionalEnabled</span><span class=\"p\">,</span>     <span class=\"c1\"># Always starts enabled\n</span>    <span class=\"n\">phone</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">OptionalDisabled</span><span class=\"p\">,</span>      <span class=\"c1\"># Always starts disabled\n</span>    <span class=\"n\">bio</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">OptionalDisabled</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Dev</span><span class=\"sh\">\"</span><span class=\"p\">,</span>  <span class=\"c1\"># Disabled despite having default\n</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">User </span><span class=\"si\">{</span><span class=\"n\">username</span><span class=\"si\">}</span><span class=\"s\"> created</span><span class=\"sh\">\"</span>\n\n<span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">create_user</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Each optional field gets a toggle switch.</strong> Disabled fields send <code>None</code> automatically.</p>\n\n\n\n\n<h3>\n  \n  \n  Return Images and Plots (Auto-Displayed)\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">func_to_web</span> <span class=\"kn\">import</span> <span class=\"n\">run</span>\n<span class=\"kn\">from</span> <span class=\"n\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span><span class=\"p\">,</span> <span class=\"n\">ImageEnhance</span>\n<span class=\"kn\">from</span> <span class=\"n\">func_to_web.types</span> <span class=\"kn\">import</span> <span class=\"n\">ImageFile</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">enhance_image</span><span class=\"p\">(</span>\n    <span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"n\">ImageFile</span><span class=\"p\">,</span>\n    <span class=\"n\">brightness</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span>\n    <span class=\"n\">contrast</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"p\">.</span><span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Enhance\n</span>    <span class=\"k\">if</span> <span class=\"n\">brightness</span> <span class=\"o\">!=</span> <span class=\"mf\">1.0</span><span class=\"p\">:</span>\n        <span class=\"n\">enhancer</span> <span class=\"o\">=</span> <span class=\"n\">ImageEnhance</span><span class=\"p\">.</span><span class=\"nc\">Brightness</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>\n        <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">enhancer</span><span class=\"p\">.</span><span class=\"nf\">enhance</span><span class=\"p\">(</span><span class=\"n\">brightness</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">contrast</span> <span class=\"o\">!=</span> <span class=\"mf\">1.0</span><span class=\"p\">:</span>\n        <span class=\"n\">enhancer</span> <span class=\"o\">=</span> <span class=\"n\">ImageEnhance</span><span class=\"p\">.</span><span class=\"nc\">Contrast</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>\n        <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">enhancer</span><span class=\"p\">.</span><span class=\"nf\">enhance</span><span class=\"p\">(</span><span class=\"n\">contrast</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">img</span>  <span class=\"c1\"># PIL Image auto-displayed in UI!\n</span>\n<span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">enhance_image</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Works with:</strong></p>\n\n<ul>\n<li>PIL/Pillow Images (any format)</li>\n<li>Matplotlib figures</li>\n<li>Multiple images (returns list)</li>\n</ul>\n\n\n\n\n<h3>\n  \n  \n  File Downloads\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">func_to_web</span> <span class=\"kn\">import</span> <span class=\"n\">run</span>\n<span class=\"kn\">from</span> <span class=\"n\">func_to_web.types</span> <span class=\"kn\">import</span> <span class=\"n\">FileResponse</span>\n<span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n<span class=\"kn\">from</span> <span class=\"n\">io</span> <span class=\"kn\">import</span> <span class=\"n\">BytesIO</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">generate_report</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n    <span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"c1\"># Create Excel file\n</span>    <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">({</span><span class=\"sh\">\"</span><span class=\"s\">Name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">ID</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)})</span>\n    <span class=\"nb\">buffer</span> <span class=\"o\">=</span> <span class=\"nc\">BytesIO</span><span class=\"p\">()</span>\n    <span class=\"n\">df</span><span class=\"p\">.</span><span class=\"nf\">to_excel</span><span class=\"p\">(</span><span class=\"nb\">buffer</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Return as downloadable file\n</span>    <span class=\"k\">return</span> <span class=\"nc\">FileResponse</span><span class=\"p\">(</span>\n        <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"nb\">buffer</span><span class=\"p\">.</span><span class=\"nf\">getvalue</span><span class=\"p\">(),</span>\n        <span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">report_</span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">.xlsx</span><span class=\"sh\">\"</span>\n    <span class=\"p\">)</span>\n\n<span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">generate_report</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Users get a download button.</strong> Works with:</p>\n\n<ul>\n<li>Excel, CSV, JSON</li>\n<li>PDFs, Word documents</li>\n<li>ZIP files, images</li>\n<li>Any binary data</li>\n</ul>\n\n<p>Return a list for multiple files: <code>[FileResponse(...), FileResponse(...)]</code></p>\n\n\n\n\n<h3>\n  \n  \n  Multiple Functions in One App\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">func_to_web</span> <span class=\"kn\">import</span> <span class=\"n\">run</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">calculate_bmi</span><span class=\"p\">(</span><span class=\"n\">weight_kg</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">height_m</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Calculate Body Mass Index</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">bmi</span> <span class=\"o\">=</span> <span class=\"n\">weight_kg</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">height_m</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">BMI: </span><span class=\"si\">{</span><span class=\"n\">bmi</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">celsius_to_fahrenheit</span><span class=\"p\">(</span><span class=\"n\">celsius</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Convert Celsius to Fahrenheit</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">celsius</span><span class=\"si\">}</span><span class=\"s\">°C = </span><span class=\"si\">{</span><span class=\"p\">(</span><span class=\"n\">celsius</span> <span class=\"o\">*</span> <span class=\"mi\">9</span><span class=\"o\">/</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">32</span><span class=\"si\">}</span><span class=\"s\">°F</span><span class=\"sh\">\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">reverse_text</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Reverse a string</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">text</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Pass a list - gets auto-generated index page\n</span><span class=\"nf\">run</span><span class=\"p\">([</span><span class=\"n\">calculate_bmi</span><span class=\"p\">,</span> <span class=\"n\">celsius_to_fahrenheit</span><span class=\"p\">,</span> <span class=\"n\">reverse_text</span><span class=\"p\">])</span>\n</code></pre>\n\n</div>\n\n\n\n<p>FuncToWeb creates a <strong>responsive index page</strong> where users pick which tool to use.</p>\n\n\n\n\n<h3>\n  \n  \n  How It Works (Architecture)\n</h3>\n\n<ol>\n<li>\n<strong>Type Introspection</strong> - Python's <code>inspect</code> module extracts function signature</li>\n<li>\n<strong>Pydantic Integration</strong> - Validates constraints from <code>Field</code> annotations</li>\n<li>\n<strong>Form Generation</strong> - Jinja2 templates convert types → HTML inputs</li>\n<li>\n<strong>FastAPI Backend</strong> - Handles requests, validation, file uploads</li>\n<li>\n<strong>Result Processing</strong> - Auto-detects return type (text, image, file) and displays accordingly</li>\n</ol>\n\n<p><strong>Tech Stack:</strong></p>\n\n<ul>\n<li>FastAPI (async backend)</li>\n<li>Pydantic (validation)</li>\n<li>Vanilla JS/CSS (no React/Vue needed!)</li>\n<li>Jinja2 (templating)</li>\n<li>Uvicorn (ASGI server)</li>\n</ul>\n\n<p><strong>Total size:</strong> ~2000 lines of Python, 454 automated tests.</p>\n\n\n\n\n<h3>\n  \n  \n  Real-World Use Cases\n</h3>\n\n<p>I use FuncToWeb daily in my laser cutting business:</p>\n\n<ol>\n<li>\n<strong>Image Processing</strong> - Brightness/contrast tools for engraving prep</li>\n<li>\n<strong>Production Reports</strong> - Generate Excel reports from laser job data</li>\n<li>\n<strong>Team Tools</strong> - Share scripts with non-technical operators</li>\n<li>\n<strong>Client Demos</strong> - Quick prototypes without deployment hassle</li>\n<li>\n<strong>Admin Panels</strong> - Manage products, orders, settings</li>\n</ol>\n\n<p>Other users:</p>\n\n<ul>\n<li>\n<strong>Data scientists</strong> - Share analysis tools with stakeholders</li>\n<li>\n<strong>Backend devs</strong> - Internal tools without learning frontend</li>\n<li>\n<strong>Researchers</strong> - Share computational tools with colleagues</li>\n<li>\n<strong>DevOps</strong> - Quick dashboards for infrastructure tasks</li>\n</ul>\n\n\n\n\n<h3>\n  \n  \n  Comparison: FuncToWeb vs Alternatives\n</h3>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>FuncToWeb</th>\n<th>Streamlit</th>\n<th>Gradio</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Syntax</strong></td>\n<td>Pure type hints</td>\n<td>\n<code>st.</code> API</td>\n<td><code>gr.Interface()</code></td>\n</tr>\n<tr>\n<td><strong>Learning curve</strong></td>\n<td>Zero (if you know typing)</td>\n<td>Medium</td>\n<td>Low-Medium</td>\n</tr>\n<tr>\n<td><strong>Wrap existing functions</strong></td>\n<td>Works as-is</td>\n<td>Need modifications</td>\n<td>Need wrapper</td>\n</tr>\n<tr>\n<td><strong>Two-level list validation</strong></td>\n<td>✅ Yes</td>\n<td>❌ No</td>\n<td>❌ No</td>\n</tr>\n<tr>\n<td><strong>Dynamic Literal[func]</strong></td>\n<td>✅ Yes</td>\n<td>❌ No</td>\n<td>❌ No</td>\n</tr>\n<tr>\n<td><strong>Optional state control</strong></td>\n<td>✅ Yes</td>\n<td>Manual</td>\n<td>Manual</td>\n</tr>\n<tr>\n<td><strong>Pydantic Field integration</strong></td>\n<td>✅ Full</td>\n<td>❌ No</td>\n<td>❌ Limited</td>\n</tr>\n<tr>\n<td><strong>File type hints</strong></td>\n<td>\n<code>ImageFile</code>, <code>DocumentFile</code>\n</td>\n<td>Manual handling</td>\n<td><code>gr.File()</code></td>\n</tr>\n<tr>\n<td><strong>Multiple functions</strong></td>\n<td>Auto index page</td>\n<td>Multi-page app</td>\n<td>Tabs interface</td>\n</tr>\n<tr>\n<td><strong>Dependencies</strong></td>\n<td>Minimal</td>\n<td>Heavy</td>\n<td>Medium</td>\n</tr>\n</tbody>\n</table></div>\n\n\n\n\n<h3>\n  \n  \n  Getting Started (60 Seconds)\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>pip <span class=\"nb\">install </span>func-to-web\n</code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">func_to_web</span> <span class=\"kn\">import</span> <span class=\"n\">run</span>\n<span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Annotated</span>\n<span class=\"kn\">from</span> <span class=\"n\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">Field</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">greet</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nc\">Field</span><span class=\"p\">(</span><span class=\"n\">min_length</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)],</span>\n    <span class=\"n\">age</span><span class=\"p\">:</span> <span class=\"n\">Annotated</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nc\">Field</span><span class=\"p\">(</span><span class=\"n\">ge</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">le</span><span class=\"o\">=</span><span class=\"mi\">150</span><span class=\"p\">)],</span>\n    <span class=\"n\">formal</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n<span class=\"p\">):</span>\n    <span class=\"n\">greeting</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">Good day</span><span class=\"sh\">\"</span> <span class=\"k\">if</span> <span class=\"n\">formal</span> <span class=\"k\">else</span> <span class=\"sh\">\"</span><span class=\"s\">Hey</span><span class=\"sh\">\"</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">greeting</span><span class=\"si\">}</span><span class=\"s\"> </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">! You are </span><span class=\"si\">{</span><span class=\"n\">age</span><span class=\"si\">}</span><span class=\"s\"> years old.</span><span class=\"sh\">\"</span>\n\n<span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">greet</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Open <code>http://localhost:8000</code> → <strong>Instant web UI!</strong> 🚀</p>\n\n\n\n\n<h3>\n  \n  \n  Documentation\n</h3>\n\n<ul>\n<li>\n<strong>Docs:</strong> <a href=\"https://offerrall.github.io/FuncToWeb/\" rel=\"noopener noreferrer\">functoweb.com</a>\n</li>\n<li>\n<strong>GitHub:</strong> <a href=\"https://github.com/offerrall/FuncToWeb\" rel=\"noopener noreferrer\">github.com/offerrall/FuncToWeb</a>\n</li>\n<li>\n<strong>PyPI:</strong> <a href=\"https://pypi.org/project/func-to-web/\" rel=\"noopener noreferrer\">pypi.org/project/func-to-web</a>\n</li>\n<li>\n<strong>Examples:</strong> <a href=\"https://github.com/offerrall/FuncToWeb/tree/main/examples\" rel=\"noopener noreferrer\">20+ complete examples</a>\n</li>\n</ul>\n\n<p>Currently at <strong>208 GitHub stars</strong> and growing fast.</p>\n\n<p><strong>Drop a comment with your use case!</strong></p>\n\n<p>And if you like the project, a ⭐ on <a href=\"https://github.com/offerrall/FuncToWeb\" rel=\"noopener noreferrer\">GitHub</a> would mean the world.</p>\n\n\n\n\n<h3>\n  \n  \n  Resources\n</h3>\n\n<ul>\n<li>\n<a href=\"https://offerrall.github.io/FuncToWeb/\" rel=\"noopener noreferrer\">Documentation</a> - Complete guide with examples</li>\n<li>\n<a href=\"https://github.com/offerrall/FuncToWeb\" rel=\"noopener noreferrer\">GitHub Repo</a> - Source code + 20+ examples</li>\n<li>\n<a href=\"https://pypi.org/project/func-to-web/\" rel=\"noopener noreferrer\">PyPI Package</a> - <code>pip install func-to-web</code>\n</li>\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Unlock Your Business Potential with Customization Services by Coderlity","url":"https://dev.to/coderlity_5a759fdbf6aa867/unlock-your-business-potential-with-customization-services-by-coderlity-pi1","date":1761489670,"author":"Coderlity","guid":315374,"unread":true,"content":"<p>Enhance your digital presence with Coderlity's expert customization services. From bespoke web designs to personalized mobile apps, we craft solutions that align with your unique business needs<br>\n<a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fxivwiw65ubkjfg60x0gg.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fxivwiw65ubkjfg60x0gg.png\" alt=\" \" width=\"800\" height=\"800\"></a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"OSD Lab 6","url":"https://dev.to/kphero/osd-lab-6-1nak","date":1761487875,"author":"Kyle Homen","guid":315373,"unread":true,"content":"<p>For this lab I've added another <a href=\"https://github.com/kphero/repository-context-packager/issues/13\" rel=\"noopener noreferrer\">command line argument</a>, <code>--remove-comments</code> to do just as it says- remove comments.</p>\n\n<p>This solves a problem by reducing the amount of tokens needed to read the context packager output by LLMs, by cutting away unnecessary comments and just showing the code. </p>\n\n<p>This was inspired by <a href=\"https://repomix.com/\" rel=\"noopener noreferrer\">Repomix</a> having a similar argument that removes comments. This just made sense to include (along with the removal of spaces).</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F7ky9jdf8j2niykyaoqg2.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F7ky9jdf8j2niykyaoqg2.png\" alt=\"Repomix remove comment toggle\" width=\"256\" height=\"124\"></a></p>\n\n<p>My solution doesn't have too many similarities to Repomix's at this time. They use a manipulator pattern and separate classes for each file type.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">class</span> <span class=\"nc\">PythonManipulator</span> <span class=\"kd\">extends</span> <span class=\"nc\">BaseManipulator</span> <span class=\"p\">{</span>\n  <span class=\"nf\">removeDocStrings</span><span class=\"p\">(</span><span class=\"nx\">content</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">):</span> <span class=\"kr\">string</span> <span class=\"p\">{</span>\n    <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">content</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"dl\">''</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">lines</span> <span class=\"o\">=</span> <span class=\"nx\">content</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"se\">\\n</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n    <span class=\"kd\">let</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"dl\">''</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">let</span> <span class=\"nx\">buffer</span> <span class=\"o\">=</span> <span class=\"dl\">''</span><span class=\"p\">;</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">quoteType</span><span class=\"p\">:</span> <span class=\"dl\">''</span> <span class=\"o\">|</span> <span class=\"dl\">\"</span><span class=\"s2\">'</span><span class=\"dl\">\"</span> <span class=\"o\">|</span> <span class=\"dl\">'</span><span class=\"s1\">\"</span><span class=\"dl\">'</span> <span class=\"o\">=</span> <span class=\"dl\">''</span><span class=\"p\">;</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">tripleQuotes</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">doubleQuoteRegex</span> <span class=\"o\">=</span> <span class=\"sr\">/^</span><span class=\"se\">\\s</span><span class=\"sr\">*</span><span class=\"se\">(?&lt;</span><span class=\"sr\">!</span><span class=\"se\">\\\\)(?:</span><span class=\"sr\">\"\"\"</span><span class=\"se\">)\\s</span><span class=\"sr\">*</span><span class=\"se\">(?:\\n)?[\\s\\S]</span><span class=\"sr\">*</span><span class=\"se\">?(?&lt;</span><span class=\"sr\">!</span><span class=\"se\">(</span><span class=\"sr\">\"\"\"</span><span class=\"se\">))(?&lt;</span><span class=\"sr\">!</span><span class=\"se\">\\\\)(?:</span><span class=\"sr\">\"\"\"</span><span class=\"se\">)</span><span class=\"sr\">/gm</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">singleQuoteRegex</span> <span class=\"o\">=</span> <span class=\"sr\">/^</span><span class=\"se\">\\s</span><span class=\"sr\">*</span><span class=\"se\">(?&lt;</span><span class=\"sr\">!</span><span class=\"se\">\\\\)(?:</span><span class=\"sr\">'''</span><span class=\"se\">)\\s</span><span class=\"sr\">*</span><span class=\"se\">(?:\\n)?[\\s\\S]</span><span class=\"sr\">*</span><span class=\"se\">?(?&lt;</span><span class=\"sr\">!</span><span class=\"se\">(</span><span class=\"sr\">'''</span><span class=\"se\">))(?&lt;</span><span class=\"sr\">!</span><span class=\"se\">\\\\)(?:</span><span class=\"sr\">'''</span><span class=\"se\">)</span><span class=\"sr\">/gm</span><span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>I'd love to implement something like this eventually, but for now we broadly handle python style comments (<code>#</code>, <code>\"\"\"/'''</code> and c-style comments (<code>\\\\</code>, <code>\\* *\\</code>). </p>\n\n<p>Example of removing Python style comments line by line:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code>    <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">lines</span><span class=\"p\">:</span>\n        <span class=\"n\">stripped</span> <span class=\"o\">=</span> <span class=\"n\">line</span><span class=\"p\">.</span><span class=\"nf\">lstrip</span><span class=\"p\">()</span> <span class=\"c1\"># Remove leading whitespace for checks\n</span>\n        <span class=\"c1\"># Skip # comment-only lines\n</span>        <span class=\"k\">if</span> <span class=\"n\">stripped</span><span class=\"p\">.</span><span class=\"nf\">startswith</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">#</span><span class=\"sh\">'</span><span class=\"p\">):</span>\n            <span class=\"k\">continue</span>\n\n        <span class=\"c1\"># If already in docstring, look for the closing quotation mark\n</span>        <span class=\"k\">if</span> <span class=\"n\">docstring</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">docstring</span> <span class=\"ow\">in</span> <span class=\"n\">line</span><span class=\"p\">:</span>\n                <span class=\"n\">docstring</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n            <span class=\"k\">continue</span>\n\n        <span class=\"c1\"># If line starts a docstring\n</span>        <span class=\"k\">if</span> <span class=\"n\">stripped</span><span class=\"p\">.</span><span class=\"nf\">startswith</span><span class=\"p\">(</span><span class=\"sh\">'\"\"\"'</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">stripped</span><span class=\"p\">.</span><span class=\"nf\">startswith</span><span class=\"p\">(</span><span class=\"sh\">\"'''\"</span><span class=\"p\">):</span>\n            <span class=\"n\">quote</span> <span class=\"o\">=</span> <span class=\"sh\">'\"\"\"'</span> <span class=\"k\">if</span> <span class=\"n\">stripped</span><span class=\"p\">.</span><span class=\"nf\">startswith</span><span class=\"p\">(</span><span class=\"sh\">'\"\"\"'</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"sh\">\"'''\"</span>\n            <span class=\"c1\"># Check if docstring closes on same line\n</span>            <span class=\"k\">if</span> <span class=\"n\">stripped</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"n\">quote</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>  <span class=\"c1\"># Single-line docstring, skip it\n</span>            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">docstring</span> <span class=\"o\">=</span> <span class=\"n\">quote</span> \n                <span class=\"k\">continue</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Both implementations read the file type to determine which implementation to use.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code>    <span class=\"k\">if</span> <span class=\"n\">file_extension</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">.py</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n        <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"nf\">remove_hash_comments</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">file_extension</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">.js</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">.java</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">.c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">.cpp</span><span class=\"sh\">'</span><span class=\"p\">]:</span>\n        <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"nf\">remove_slash_comments</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">file_extension</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">.html</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n        <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">'</span><span class=\"s\">&lt;!--.*?--&gt;</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">''</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"o\">=</span><span class=\"n\">re</span><span class=\"p\">.</span><span class=\"n\">DOTALL</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>For the next steps, one thing I didn't include was removing in-line comments. This will require using a tokenizer or checking each line char by char to determine if there is a comment in line, as outline in this <a href=\"https://github.com/kphero/repository-context-packager/issues/14\" rel=\"noopener noreferrer\">issue</a> I've filed.</p>\n\n<p>I'd also like to add a <a href=\"https://github.com/kphero/repository-context-packager/issues/15\" rel=\"noopener noreferrer\"><code>--remove-empty-lines</code></a> feature which is already implemented in commented out code, but since it wasn't part of the scope of the original issue I was fixing I left it uncommented and created a new issue to add it as another argument.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"I really benefited from it","url":"https://dev.to/salem_makki_04867d1d2f160/i-really-benefited-from-it-jcm","date":1761487731,"author":"Salem Makki","guid":315372,"unread":true,"content":"<div class=\"ltag__link\">\n  <a href=\"/devasservice\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F741018%2F3ae8dc9d-0bc6-493c-a34c-f4b4d713a393.png\" alt=\"devasservice\">\n    </div>\n  </a>\n  <a href=\"https://dev.to/devasservice/customtkinter-a-complete-tutorial-4527\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>CustomTkinter - A Complete Tutorial</h2>\n      <h3>Developer Service ・ Mar 6</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#python</span>\n        <span class=\"ltag__link__tag\">#customtkinter</span>\n        <span class=\"ltag__link__tag\">#tkinter</span>\n        <span class=\"ltag__link__tag\">#gui</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: How to Write Production Python Code","url":"https://dev.to/vibe_youtube/tech-with-tim-how-to-write-production-python-code-2ci7","date":1761487660,"author":"Vibe YouTube","guid":315371,"unread":true,"content":"<h1>\n  \n  \n  How to Write Production Python Code\n</h1>\n\n<p>Tim breaks down eight key principles—from clean architecture and testing to performance optimizations—that’ll take your Python from “works on my machine” to rock-solid production quality. Each principle comes with timestamped, real-world examples so you can plug them straight into your codebase.</p>\n\n<p>Plus, snag 25% off your first Boot.dev payment with code <strong>TECHWITHTIM</strong>, grab all the sample code via Tim’s newsletter, or dive deeper with DevLaunch—a mentorship program designed to build real projects and help you land that dream job.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=qU3Rc6_B9es\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Build Your Own Forum with FastAPI: Step 7 - Permissions","url":"https://dev.to/leapcell/build-your-own-forum-with-fastapi-step-7-permissions-155k","date":1761487468,"author":"Leapcell","guid":315370,"unread":true,"content":"<p><a href=\"https://leapcell.io/?lc_t=d_ug28\" rel=\"noopener noreferrer\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fys6fr5ybrrcia1hemgdw.png\" alt=\"Cover\" width=\"800\" height=\"336\"></a></p>\n\n<p>In the <a href=\"https://leapcell.io/blog/build-your-own-forum-with-fastapi-step-6-comments-and-replies\" rel=\"noopener noreferrer\">previous article</a>, we implemented comments and replies for our forum, which greatly enhanced community interaction.</p>\n\n<p>Interaction, however, can inevitably lead to conflict. As interaction increases, community management becomes a problem we must face. What if someone posts malicious content?</p>\n\n<p>In this article, we will introduce a basic permission management system. We will establish an \"Admin\" role and give administrators the ability to \"ban\" users to maintain community order.</p>\n\n<h2>\n  \n  \n  Step 1: Update the Database Model\n</h2>\n\n<p>We need to add two fields to the user table (<code>users</code>): one to identify who is an admin, and another to mark who has been \"banned.\"</p>\n\n<p>Open <code>models.py</code> and modify the <code>User</code> model:</p>\n\n<p><strong><code>models.py</code> (Update User model)</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">Column</span><span class=\"p\">,</span> <span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">ForeignKey</span><span class=\"p\">,</span> <span class=\"n\">Boolean</span>\n<span class=\"kn\">from</span> <span class=\"n\">sqlalchemy.orm</span> <span class=\"kn\">import</span> <span class=\"n\">relationship</span>\n<span class=\"kn\">from</span> <span class=\"n\">database</span> <span class=\"kn\">import</span> <span class=\"n\">Base</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">users</span><span class=\"sh\">\"</span>\n\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"nc\">Column</span><span class=\"p\">(</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"nc\">Column</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">hashed_password</span> <span class=\"o\">=</span> <span class=\"nc\">Column</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># --- New fields ---\n</span>    <span class=\"n\">is_admin</span> <span class=\"o\">=</span> <span class=\"nc\">Column</span><span class=\"p\">(</span><span class=\"n\">Boolean</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">is_banned</span> <span class=\"o\">=</span> <span class=\"nc\">Column</span><span class=\"p\">(</span><span class=\"n\">Boolean</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n    <span class=\"c1\"># ---------------\n</span>\n    <span class=\"n\">posts</span> <span class=\"o\">=</span> <span class=\"nf\">relationship</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Post</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">back_populates</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">owner</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">cascade</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">all, delete-orphan</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">comments</span> <span class=\"o\">=</span> <span class=\"nf\">relationship</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Comment</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">back_populates</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">owner</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">cascade</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">all, delete-orphan</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ... Post and Comment models remain unchanged ...\n</span></code></pre>\n\n</div>\n\n\n\n<p>We've added two fields: <code>is_admin</code> and <code>is_banned</code>. Both are set to <code>default=False</code> to avoid affecting existing users.</p>\n\n<p>After updating the model, you need to manually update your database table structure. The corresponding SQL statements are as follows:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sql\"><code><span class=\"c1\">-- Add is_admin column to users table</span>\n<span class=\"k\">ALTER</span> <span class=\"k\">TABLE</span> <span class=\"n\">users</span> <span class=\"k\">ADD</span> <span class=\"k\">COLUMN</span> <span class=\"n\">is_admin</span> <span class=\"nb\">BOOLEAN</span> <span class=\"k\">DEFAULT</span> <span class=\"k\">FALSE</span><span class=\"p\">;</span>\n\n<span class=\"c1\">-- Add is_banned column to users table</span>\n<span class=\"k\">ALTER</span> <span class=\"k\">TABLE</span> <span class=\"n\">users</span> <span class=\"k\">ADD</span> <span class=\"k\">COLUMN</span> <span class=\"n\">is_banned</span> <span class=\"nb\">BOOLEAN</span> <span class=\"k\">DEFAULT</span> <span class=\"k\">FALSE</span><span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>If your database was created using <a href=\"https://leapcell.io/?lc_t=d_ug28\" rel=\"noopener noreferrer\">Leapcell</a>,</p>\n\n<p><a href=\"https://leapcell.io/?lc_t=d_ug28\" rel=\"noopener noreferrer\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F9oxcqlqw5ez1fsypjhim.png\" alt=\"ImageLc\" width=\"800\" height=\"180\"></a></p>\n\n<p>you can execute these SQL statements directly in its web-based operation panel.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F5779zrdlr2kkaxqdlb8l.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F5779zrdlr2kkaxqdlb8l.png\" alt=\"ImageDb\" width=\"800\" height=\"373\"></a></p>\n\n<h2>\n  \n  \n  Step 2: Manually Appoint an Administrator\n</h2>\n\n<p>Our forum doesn't have an \"admin backend\" to appoint administrators yet. Since creating an admin is an infrequent requirement, we can just operate the database directly to manually set your user as an admin.</p>\n\n<p>Execute the following command in your database:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight sql\"><code><span class=\"c1\">-- Set the user with username 'your_username' as an admin</span>\n<span class=\"k\">UPDATE</span> <span class=\"n\">users</span> <span class=\"k\">SET</span> <span class=\"n\">is_admin</span> <span class=\"o\">=</span> <span class=\"k\">TRUE</span> <span class=\"k\">WHERE</span> <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"s1\">'your_username'</span><span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Remember to replace <code>your_username</code> with the username you registered with.</p>\n\n<h2>\n  \n  \n  Step 3: Create the Admin Panel Page\n</h2>\n\n<p>We need a page that only administrators can access, which will display all users and provide action buttons.</p>\n\n<p>In the <code>templates</code> folder, create a new file named <code>admin.html</code>.</p>\n\n<p><strong><code>templates/admin.html</code></strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html&gt;</span>\n  <span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;title&gt;</span>Admin Panel - My FastAPI Forum<span class=\"nt\">&lt;/title&gt;</span>\n    <span class=\"nt\">&lt;style&gt;</span>\n      <span class=\"nt\">body</span> <span class=\"p\">{</span>\n        <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"nb\">sans-serif</span><span class=\"p\">;</span>\n        <span class=\"nl\">margin</span><span class=\"p\">:</span> <span class=\"m\">2em</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"nt\">li</span> <span class=\"p\">{</span>\n        <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">10px</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"nt\">button</span> <span class=\"p\">{</span>\n        <span class=\"nl\">margin-left</span><span class=\"p\">:</span> <span class=\"m\">10px</span><span class=\"p\">;</span>\n        <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">5px</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"nt\">&lt;/style&gt;</span>\n  <span class=\"nt\">&lt;/head&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>Admin Panel - User Management<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"/posts\"</span><span class=\"nt\">&gt;</span>Back to Home<span class=\"nt\">&lt;/a&gt;</span>\n    <span class=\"nt\">&lt;hr</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;ul&gt;</span>\n      {% for user in users %}\n      <span class=\"nt\">&lt;li&gt;</span>\n        <span class=\"nt\">&lt;strong&gt;</span>{{ user.username }}<span class=\"nt\">&lt;/strong&gt;</span>\n        <span class=\"nt\">&lt;span&gt;</span>(Admin: {{ user.is_admin }}, Banned: {{ user.is_banned }})<span class=\"nt\">&lt;/span&gt;</span>\n\n        {% if not user.is_admin %} {% if user.is_banned %}\n        <span class=\"nt\">&lt;form</span> <span class=\"na\">action=</span><span class=\"s\">\"/admin/unban/{{ user.id }}\"</span> <span class=\"na\">method=</span><span class=\"s\">\"post\"</span> <span class=\"na\">style=</span><span class=\"s\">\"display: inline;\"</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"submit\"</span> <span class=\"na\">style=</span><span class=\"s\">\"background-color: #28a745; color: white;\"</span><span class=\"nt\">&gt;</span>Unban<span class=\"nt\">&lt;/button&gt;</span>\n        <span class=\"nt\">&lt;/form&gt;</span>\n        {% else %}\n        <span class=\"nt\">&lt;form</span> <span class=\"na\">action=</span><span class=\"s\">\"/admin/ban/{{ user.id }}\"</span> <span class=\"na\">method=</span><span class=\"s\">\"post\"</span> <span class=\"na\">style=</span><span class=\"s\">\"display: inline;\"</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"submit\"</span> <span class=\"na\">style=</span><span class=\"s\">\"background-color: #dc3545; color: white;\"</span><span class=\"nt\">&gt;</span>Ban<span class=\"nt\">&lt;/button&gt;</span>\n        <span class=\"nt\">&lt;/form&gt;</span>\n        {% endif %} {% endif %}\n      <span class=\"nt\">&lt;/li&gt;</span>\n      {% endfor %}\n    <span class=\"nt\">&lt;/ul&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This page iterates through all users. If a user is not an admin, a \"Ban\" or \"Unban\" button will be displayed next to them. These buttons will point to the API routes we are about to create via a POST request.</p>\n\n<h2>\n  \n  \n  Step 4: Implement the Admin Backend Routes\n</h2>\n\n<p>Now, we need to add new routes in <code>main.py</code> to handle the admin panel logic.</p>\n\n<p><strong><code>main.py</code> (Add new routes and dependency)</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># ... (Previous imports remain unchanged) ...\n</span>\n<span class=\"c1\"># --- Dependencies ---\n</span>\n<span class=\"c1\"># ... (get_current_user remains unchanged) ...\n</span>\n<span class=\"c1\"># 1. Add a new dependency to verify admin permissions\n</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_admin_user</span><span class=\"p\">(</span>\n    <span class=\"n\">current_user</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">User</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nc\">Depends</span><span class=\"p\">(</span><span class=\"n\">get_current_user</span><span class=\"p\">)</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">User</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">current_user</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">HTTPException</span><span class=\"p\">(</span>\n            <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"n\">status</span><span class=\"p\">.</span><span class=\"n\">HTTP_302_FOUND</span><span class=\"p\">,</span>\n            <span class=\"n\">detail</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Not authenticated</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">Location</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">/login</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">current_user</span><span class=\"p\">.</span><span class=\"n\">is_admin</span><span class=\"p\">:</span>\n        <span class=\"c1\"># If not an admin, raise a 403 error\n</span>        <span class=\"k\">raise</span> <span class=\"nc\">HTTPException</span><span class=\"p\">(</span>\n            <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"n\">status</span><span class=\"p\">.</span><span class=\"n\">HTTP_403_FORBIDDEN</span><span class=\"p\">,</span>\n            <span class=\"n\">detail</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">You do not have permission to access this resource.</span><span class=\"sh\">\"</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">current_user</span>\n\n<span class=\"c1\"># --- Routes ---\n</span>\n<span class=\"c1\"># ... (Previous routes /, /posts, /api/posts, etc., remain unchanged) ...\n</span>\n<span class=\"c1\"># 2. Add admin panel route\n</span><span class=\"nd\">@app.get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/admin</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">response_class</span><span class=\"o\">=</span><span class=\"n\">HTMLResponse</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">view_admin_panel</span><span class=\"p\">(</span>\n    <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span>\n    <span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">AsyncSession</span> <span class=\"o\">=</span> <span class=\"nc\">Depends</span><span class=\"p\">(</span><span class=\"n\">get_db</span><span class=\"p\">),</span>\n    <span class=\"n\">admin_user</span><span class=\"p\">:</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">User</span> <span class=\"o\">=</span> <span class=\"nc\">Depends</span><span class=\"p\">(</span><span class=\"n\">get_admin_user</span><span class=\"p\">)</span>\n<span class=\"p\">):</span>\n    <span class=\"c1\"># Query all users\n</span>    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">User</span><span class=\"p\">).</span><span class=\"nf\">order_by</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">User</span><span class=\"p\">.</span><span class=\"nb\">id</span><span class=\"p\">))</span>\n    <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"nf\">scalars</span><span class=\"p\">().</span><span class=\"nf\">all</span><span class=\"p\">()</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">templates</span><span class=\"p\">.</span><span class=\"nc\">TemplateResponse</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">admin.html</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">request</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">users</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">users</span>\n    <span class=\"p\">})</span>\n\n<span class=\"c1\"># 3. Ban user route\n</span><span class=\"nd\">@app.post</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/admin/ban/{user_id}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">ban_user</span><span class=\"p\">(</span>\n    <span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n    <span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">AsyncSession</span> <span class=\"o\">=</span> <span class=\"nc\">Depends</span><span class=\"p\">(</span><span class=\"n\">get_db</span><span class=\"p\">),</span>\n    <span class=\"n\">admin_user</span><span class=\"p\">:</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">User</span> <span class=\"o\">=</span> <span class=\"nc\">Depends</span><span class=\"p\">(</span><span class=\"n\">get_admin_user</span><span class=\"p\">)</span>\n<span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">User</span><span class=\"p\">).</span><span class=\"nf\">where</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">User</span><span class=\"p\">.</span><span class=\"nb\">id</span> <span class=\"o\">==</span> <span class=\"n\">user_id</span><span class=\"p\">))</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"nf\">scalar_one_or_none</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">user</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">HTTPException</span><span class=\"p\">(</span><span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"n\">detail</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">User not found</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Admins cannot ban other admins\n</span>    <span class=\"k\">if</span> <span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">is_admin</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">HTTPException</span><span class=\"p\">(</span><span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"mi\">403</span><span class=\"p\">,</span> <span class=\"n\">detail</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Cannot ban an admin</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">is_banned</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n    <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"nf\">commit</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"nc\">RedirectResponse</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">/admin</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"n\">status</span><span class=\"p\">.</span><span class=\"n\">HTTP_303_SEE_OTHER</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 4. Unban user route\n</span><span class=\"nd\">@app.post</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/admin/unban/{user_id}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">unban_user</span><span class=\"p\">(</span>\n    <span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n    <span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">AsyncSession</span> <span class=\"o\">=</span> <span class=\"nc\">Depends</span><span class=\"p\">(</span><span class=\"n\">get_db</span><span class=\"p\">),</span>\n    <span class=\"n\">admin_user</span><span class=\"p\">:</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">User</span> <span class=\"o\">=</span> <span class=\"nc\">Depends</span><span class=\"p\">(</span><span class=\"n\">get_admin_user</span><span class=\"p\">)</span>\n<span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">User</span><span class=\"p\">).</span><span class=\"nf\">where</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">User</span><span class=\"p\">.</span><span class=\"nb\">id</span> <span class=\"o\">==</span> <span class=\"n\">user_id</span><span class=\"p\">))</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"nf\">scalar_one_or_none</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">user</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">HTTPException</span><span class=\"p\">(</span><span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"n\">detail</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">User not found</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">is_banned</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n    <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"nf\">commit</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"nc\">RedirectResponse</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">/admin</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"n\">status</span><span class=\"p\">.</span><span class=\"n\">HTTP_303_SEE_OTHER</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ... (Subsequent routes /posts/{post_id}, /posts/{post_id}/comments, etc., remain unchanged) ...\n</span></code></pre>\n\n</div>\n\n\n\n<p>This includes these main changes:</p>\n\n<ul>\n<li>Created a new dependency <code>get_admin_user</code>, which is based on <code>get_current_user</code> and additionally checks if <code>current_user.is_admin</code> is <code>True</code>.</li>\n<li>Created the <code>GET /admin</code> route, which queries all users and renders the <code>admin.html</code> template. This route is protected by <code>Depends(get_admin_user)</code> to ensure only admins can access it.</li>\n<li>Created <code>POST /admin/ban/{user_id}</code> and <code>POST /admin/unban/{user_id}</code> routes to ban/unban specific users.</li>\n</ul>\n\n<h2>\n  \n  \n  Step 5: Enforce the Ban (Prevent Posting)\n</h2>\n\n<p>A user can now be marked as \"banned,\" but their actions are not yet affected. A banned user can still create posts and comments.</p>\n\n<p>We need to modify the <code>create_post</code> and <code>create_comment</code> routes to check the user's status before performing the action.</p>\n\n<p><strong><code>main.py</code> (Update <code>create_post</code> and <code>create_comment</code>)</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># ... (Previous code) ...\n</span>\n<span class=\"nd\">@app.post</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/api/posts</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">create_post</span><span class=\"p\">(</span>\n    <span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"nc\">Form</span><span class=\"p\">(...),</span>\n    <span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"nc\">Form</span><span class=\"p\">(...),</span>\n    <span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">AsyncSession</span> <span class=\"o\">=</span> <span class=\"nc\">Depends</span><span class=\"p\">(</span><span class=\"n\">get_db</span><span class=\"p\">),</span>\n    <span class=\"n\">current_user</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">User</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nc\">Depends</span><span class=\"p\">(</span><span class=\"n\">get_current_user</span><span class=\"p\">)</span>\n<span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">current_user</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nc\">RedirectResponse</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">/login</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"n\">status</span><span class=\"p\">.</span><span class=\"n\">HTTP_302_FOUND</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># --- Add check ---\n</span>    <span class=\"k\">if</span> <span class=\"n\">current_user</span><span class=\"p\">.</span><span class=\"n\">is_banned</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">HTTPException</span><span class=\"p\">(</span><span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"mi\">403</span><span class=\"p\">,</span> <span class=\"n\">detail</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">You are banned and cannot create posts.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># ---------------\n</span>\n    <span class=\"n\">new_post</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"n\">owner_id</span><span class=\"o\">=</span><span class=\"n\">current_user</span><span class=\"p\">.</span><span class=\"nb\">id</span><span class=\"p\">)</span>\n    <span class=\"c1\"># ... (Subsequent code remains unchanged) ...\n</span>    <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">new_post</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"nf\">commit</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"nf\">refresh</span><span class=\"p\">(</span><span class=\"n\">new_post</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nc\">RedirectResponse</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">/posts</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"n\">status</span><span class=\"p\">.</span><span class=\"n\">HTTP_303_SEE_OTHER</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ... (Other routes) ...\n</span>\n<span class=\"nd\">@app.post</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/posts/{post_id}/comments</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">create_comment</span><span class=\"p\">(</span>\n    <span class=\"n\">post_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n    <span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"nc\">Form</span><span class=\"p\">(...),</span>\n    <span class=\"n\">parent_id</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nc\">Form</span><span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">AsyncSession</span> <span class=\"o\">=</span> <span class=\"nc\">Depends</span><span class=\"p\">(</span><span class=\"n\">get_db</span><span class=\"p\">),</span>\n    <span class=\"n\">current_user</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">User</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nc\">Depends</span><span class=\"p\">(</span><span class=\"n\">get_current_user</span><span class=\"p\">)</span>\n<span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">current_user</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nc\">RedirectResponse</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">/login</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"n\">status</span><span class=\"p\">.</span><span class=\"n\">HTTP_302_FOUND</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># --- Add check ---\n</span>    <span class=\"k\">if</span> <span class=\"n\">current_user</span><span class=\"p\">.</span><span class=\"n\">is_banned</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">HTTPException</span><span class=\"p\">(</span><span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"mi\">403</span><span class=\"p\">,</span> <span class=\"n\">detail</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">You are banned and cannot create comments.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># ---------------\n</span>\n    <span class=\"n\">new_comment</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"nc\">Comment</span><span class=\"p\">(</span>\n        <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"n\">content</span><span class=\"p\">,</span>\n        <span class=\"n\">post_id</span><span class=\"o\">=</span><span class=\"n\">post_id</span><span class=\"p\">,</span>\n        <span class=\"n\">owner_id</span><span class=\"o\">=</span><span class=\"n\">current_user</span><span class=\"p\">.</span><span class=\"nb\">id</span><span class=\"p\">,</span>\n        <span class=\"n\">parent_id</span><span class=\"o\">=</span><span class=\"n\">parent_id</span>\n    <span class=\"p\">)</span>\n    <span class=\"c1\"># ... (Subsequent code remains unchanged) ...\n</span>    <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">new_comment</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"nf\">commit</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"nc\">RedirectResponse</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">/posts/</span><span class=\"si\">{</span><span class=\"n\">post_id</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"n\">status</span><span class=\"p\">.</span><span class=\"n\">HTTP_303_SEE_OTHER</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ... (Subsequent routes /posts/{post_id}/edit, /register, /login, /logout, etc., remain unchanged) ...\n</span></code></pre>\n\n</div>\n\n\n\n<p>Now, if a banned user tries to submit a post or comment form, the backend will reject the request and return a 403 error.</p>\n\n<h2>\n  \n  \n  Step 6: Update the Frontend UI\n</h2>\n\n<p>The backend is now secure, but from a user experience perspective, we should hide the posting and commenting forms from the frontend and give admins an entry point to the backend.</p>\n\n<p><strong><code>templates/posts.html</code> (Update)</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code>... (Header and styles remain unchanged) ...\n<span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;header&gt;</span>\n      <span class=\"nt\">&lt;h1&gt;</span>Welcome to My Forum<span class=\"nt\">&lt;/h1&gt;</span>\n\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"auth-links\"</span><span class=\"nt\">&gt;</span>\n        {% if current_user %}\n        <span class=\"nt\">&lt;span&gt;</span>Welcome, {{ current_user.username }}!<span class=\"nt\">&lt;/span&gt;</span>\n        {% if current_user.is_admin %}\n        <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"/admin\"</span> <span class=\"na\">style=</span><span class=\"s\">\"color: red; font-weight: bold;\"</span><span class=\"nt\">&gt;</span>[Admin Panel]<span class=\"nt\">&lt;/a&gt;</span>\n        {% endif %}\n        <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"/logout\"</span><span class=\"nt\">&gt;</span>Logout<span class=\"nt\">&lt;/a&gt;</span>\n        {% else %}\n        <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"/login\"</span><span class=\"nt\">&gt;</span>Login<span class=\"nt\">&lt;/a&gt;</span> |\n        <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"/register\"</span><span class=\"nt\">&gt;</span>Register<span class=\"nt\">&lt;/a&gt;</span>\n        {% endif %}\n      <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/header&gt;</span>\n\n    {% if current_user and not current_user.is_banned %}\n    <span class=\"nt\">&lt;h2&gt;</span>Create a New Post<span class=\"nt\">&lt;/h2&gt;</span>\n    <span class=\"nt\">&lt;form</span> <span class=\"na\">action=</span><span class=\"s\">\"/api/posts\"</span> <span class=\"na\">method=</span><span class=\"s\">\"post\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"na\">name=</span><span class=\"s\">\"title\"</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"Post Title\"</span> <span class=\"na\">required</span> <span class=\"nt\">/&gt;&lt;br</span> <span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;textarea</span> <span class=\"na\">name=</span><span class=\"s\">\"content\"</span> <span class=\"na\">rows=</span><span class=\"s\">\"4\"</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"Post Content\"</span> <span class=\"na\">required</span><span class=\"nt\">&gt;&lt;/textarea&gt;&lt;br</span> <span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"submit\"</span><span class=\"nt\">&gt;</span>Post<span class=\"nt\">&lt;/button&gt;</span>\n    <span class=\"nt\">&lt;/form&gt;</span>\n    {% elif current_user and current_user.is_banned %}\n    <span class=\"nt\">&lt;p</span> <span class=\"na\">style=</span><span class=\"s\">\"color: red; font-weight: bold;\"</span><span class=\"nt\">&gt;</span>You have been banned and cannot create new posts.<span class=\"nt\">&lt;/p&gt;</span>\n    {% else %}\n    <span class=\"nt\">&lt;p&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"/login\"</span><span class=\"nt\">&gt;</span>Login<span class=\"nt\">&lt;/a&gt;</span> to create a new post.<span class=\"nt\">&lt;/p&gt;</span>\n    {% endif %}\n\n    <span class=\"nt\">&lt;hr</span> <span class=\"nt\">/&gt;</span>\n    ... (Post list section remains unchanged) ...\n<span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong><code>templates/post_detail.html</code> (Update)</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code>... (Header and styles remain unchanged) ...\n<span class=\"nt\">&lt;body&gt;</span>\n    ... (Post detail section remains unchanged) ...\n    <span class=\"nt\">&lt;hr</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"comment-form\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;h3&gt;</span>Post a Comment<span class=\"nt\">&lt;/h3&gt;</span>\n      {% if current_user and not current_user.is_banned %}\n      <span class=\"nt\">&lt;form</span> <span class=\"na\">action=</span><span class=\"s\">\"/posts/{{ post.id }}/comments\"</span> <span class=\"na\">method=</span><span class=\"s\">\"post\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;textarea</span> <span class=\"na\">name=</span><span class=\"s\">\"content\"</span> <span class=\"na\">rows=</span><span class=\"s\">\"4\"</span> <span class=\"na\">style=</span><span class=\"s\">\"width:100%;\"</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"Write your comment...\"</span> <span class=\"na\">required</span><span class=\"nt\">&gt;&lt;/textarea&gt;&lt;br</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"submit\"</span><span class=\"nt\">&gt;</span>Submit<span class=\"nt\">&lt;/button&gt;</span>\n      <span class=\"nt\">&lt;/form&gt;</span>\n      {% elif current_user and current_user.is_banned %}\n      <span class=\"nt\">&lt;p</span> <span class=\"na\">style=</span><span class=\"s\">\"color: red; font-weight: bold;\"</span><span class=\"nt\">&gt;</span>You have been banned and cannot post comments.<span class=\"nt\">&lt;/p&gt;</span>\n      {% else %}\n      <span class=\"nt\">&lt;p&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"/login\"</span><span class=\"nt\">&gt;</span>Log in<span class=\"nt\">&lt;/a&gt;</span> to post a comment.<span class=\"nt\">&lt;/p&gt;</span>\n      {% endif %}\n    <span class=\"nt\">&lt;/div&gt;</span>\n    ... (Comment section remains unchanged) ...\n<span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This includes two main changes:</p>\n\n<ul>\n<li>In the <code>posts.html</code> header, if the current user is an admin (<code>current_user.is_admin</code>), an \"Admin Panel\" link is displayed.</li>\n<li>In <code>posts.html</code> and <code>post_detail.html</code>, the original <code>{% if current_user %}</code> condition is changed to <code>{% if current_user and not current_user.is_banned %}</code>, meaning only users who are not banned can see the form.</li>\n</ul>\n\n<h2>\n  \n  \n  Run and Verify\n</h2>\n\n<p>Restart your uvicorn server:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>uvicorn main:app <span class=\"nt\">--reload</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Log in to your admin account. You should be able to see the \"Admin Panel\" link in the top right.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F44ol9u4493xd8cl7wcaj.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F44ol9u4493xd8cl7wcaj.png\" alt=\"ImageP1\" width=\"800\" height=\"40\"></a></p>\n\n<p>Click it to go to the <code>/admin</code> page. You will see a list of all users and can ban other users.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fwpu7ime1m9uwlugynd3z.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fwpu7ime1m9uwlugynd3z.png\" alt=\"ImageP2\" width=\"800\" height=\"133\"></a></p>\n\n<p>Ban <code>test_user</code>. Switch to being logged in as <code>test_user</code>, and you will find that the \"Create New Post\" form has disappeared, replaced by a \"You have been banned\" message.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ftmunyx08kor57c4jn6h9.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ftmunyx08kor57c4jn6h9.png\" alt=\"ImageP3\" width=\"800\" height=\"217\"></a></p>\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>We have added basic management functions to the forum. Using the <code>is_admin</code> and <code>is_banned</code> fields, we've supported user role differentiation and permission control.</p>\n\n<p>Based on this framework, you can further extend more management functions, such as shadow-banning users or prohibiting logins.</p>\n\n<p>As the forum's content grows, users might find it difficult to locate old posts they are interested in.</p>\n\n<p>To address this, in the next article, we will add a search function to the forum.</p>\n\n\n\n\n<p>Follow us on X: <a href=\"https://x.com/LeapcellHQ\" rel=\"noopener noreferrer\">@LeapcellHQ</a></p>\n\n\n\n\n<p><a href=\"https://leapcell.io/blog/build-your-own-forum-with-fastapi-step-7-permissions\" rel=\"noopener noreferrer\">Read other articles in this series</a></p>\n\n<p><strong>Related Posts:</strong></p>\n\n<ul>\n<li><a href=\"https://leapcell.io/blog/how-to-host-go-projects\" rel=\"noopener noreferrer\">How to Host Golang Projects for Free (Gin Example)</a></li>\n<li><a href=\"https://leapcell.io/blog/how-to-host-rust-projects\" rel=\"noopener noreferrer\">How to Host Rust Projects in the Cloud for Free</a></li>\n<li><a href=\"https://leapcell.io/blog/how-to-deploy-puppeteer-in-the-cloud\" rel=\"noopener noreferrer\">How to Run Puppeteer in the Cloud for Free: Solutions Compared</a></li>\n<li><a href=\"https://leapcell.io/blog/best-vercel-alternative-to-host-next-js-projects\" rel=\"noopener noreferrer\">Best Vercel Alternative to Host Next.js Projects</a></li>\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Rodrigo Girão Serrão: TIL #135 – Build the Python documentation","url":"https://mathspp.com/blog/til/build-the-python-documentation","date":1761486240,"author":"","guid":315426,"unread":true,"content":"<img alt=\"\" src=\"https://mathspp.com/images/1/1/5/f/2/115f2441f420acc1f694991e690629b493de7d31-thumbnail.webp\"><p>Today I learned how to build the Python documentation to preview changes I wanted to make.</p><p>If you're not on Windows, all it takes is to run <code>make -C Doc venv htmllive</code> to build the Python documentation locally and to preview it.\nThis command will build the documentation, start a local server to browse the docs, and also watch for changes in the documentation source files to live-reload while you edit!</p><p>I needed this because the Python 3.14 documentation for the module  had a terrible-looking “See also” callout with elements that were grossly misaligned:</p><img title=\"This makes my want to cry.\" alt=\"“See also” callout with elements that are grossly misaligned\" src=\"https://mathspp.com/user/pages/02.blog/04.til/135.build-the-python-documentation/_bad.webp\">This makes my want to cry.\n<p>However, since I don't know rST, only Markdown, the issue wasn't obvious to me:</p><pre><code>.. seealso::\n\n   :class:`~concurrent.futures.InterpreterPoolExecutor`\n      combines threads with interpreters in a familiar interface.\n\n    .. XXX Add references to the upcoming HOWTO docs in the seealso block.\n\n   :ref:`isolating-extensions-howto`\n       how to update an extension module to support multiple interpreters\n\n   :pep:`554`\n\n   :pep:`734`\n\n   :pep:`684`</code></pre><p>After some Googling, turns out the problem is the comment .\nSince it's indentend four spaces, it's being interpreted as a blockquote!\nThe fix was just deleting a single space from the left of .</p><p>However, I did not stop there!\nI went above and beyond, capitalising the sentences and adding a full stop to the one that didn't have it!</p><p>In the end, the “See also” callout was looking better:</p><img title=\"What a work of art.\" alt=\"“See also” callout with elements that are neatly aligned and with better-looking punctuation and capitalisation.\" src=\"https://mathspp.com/user/pages/02.blog/04.til/135.build-the-python-documentation/_good.webp\">What a work of art.","contentLength":1439,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Ditch the Dependencies: Turn Your Python Scripts Into Clickable Apps with Auto PY to EXE","url":"https://dev.to/githubopensource/ditch-the-dependencies-turn-your-python-scripts-into-clickable-apps-with-auto-py-to-exe-2ca6","date":1761484868,"author":"GitHubOpenSource","guid":315353,"unread":true,"content":"<h2>\n  \n  \n  Quick Summary: 📝\n</h2>\n\n<p>Auto PY to EXE is a tool that converts Python scripts (.py) into executable files (.exe) using a graphical user interface. It leverages PyInstaller to bundle the script and its dependencies into a single executable, making it easier to distribute Python applications to users who may not have Python installed.</p>\n\n<h2>\n  \n  \n  Key Takeaways: 💡\n</h2>\n\n<ul>\n<li><p>✅ Auto PY to EXE simplifies Python script distribution by converting them into standalone executables for Windows, macOS, and Linux.</p></li>\n<li><p>✅ It provides an intuitive graphical user interface (GUI) that wraps the powerful PyInstaller, eliminating the need for complex command-line configuration.</p></li>\n<li><p>✅ Developers can easily customize the output, choosing between single-file executables or folders, and including custom icons and necessary data files.</p></li>\n<li><p>✅ The resulting executables run without requiring the end-user to have Python or any dependencies installed.</p></li>\n<li><p>✅ It significantly improves the sharing and usability of Python tools for non-technical audiences.</p></li>\n</ul>\n\n<h2>\n  \n  \n  Project Statistics: 📊\n</h2>\n\n<ul>\n<li>⭐ <strong>Stars:</strong> 4675</li>\n<li>🍴 <strong>Forks:</strong> 782</li>\n<li>❗ <strong>Open Issues:</strong> 2</li>\n</ul>\n\n<h2>\n  \n  \n  Tech Stack: 💻\n</h2>\n\n<ul>\n<li>✅ JavaScript</li>\n</ul>\n\n<p>Have you ever built a cool utility in Python only to realize that sharing it is a massive headache? Asking users to install Python, manage virtual environments, and handle dependencies is a huge barrier to entry for non-technical users. This is where Auto PY to EXE swoops in to save the day, fundamentally changing how you distribute your Python projects by packaging them into standalone, native executables.</p>\n\n<p>This project is essentially a friendly, graphical wrapper for the powerful PyInstaller tool. While PyInstaller is the industry standard for freezing Python code, configuring it via command-line arguments can sometimes feel like navigating a maze of obscure flags and parameters. Auto PY to EXE takes all that complexity and presents it through a clean, easy-to-use web interface that runs locally on your machine, making the process visual and straightforward.</p>\n\n<p>The core function is incredibly straightforward: you point the application to your main Python script (the <code>.py</code> file), and then you are presented with a series of intuitive options. You get to decide crucial parameters without touching the command line. For instance, do you want a single, compact executable file that includes everything (a 'onefile' approach), or a folder containing all the necessary assets alongside the main executable? The GUI makes these choices simple.</p>\n\n<p>Furthermore, the interface allows you to easily manage advanced features. You can upload custom icons to give your application a professional look, or specify additional data files (like configuration JSONs, images, or assets) that your script needs to run. You select these options visually, click the big blue 'Convert' button, and let the tool handle the heavy lifting of bundling the interpreter, your code, and all dependencies into one neat package.</p>\n\n<p>Why should you, as a developer, care? Because distribution should be the easiest part of development, not the hardest. By packaging your scripts into standalone executables, you completely eliminate the dreaded \"It works on my machine, but not yours\" problem when sharing with colleagues or clients. Anyone can run your tool instantly, regardless of their operating system or whether they have Python installed. This vastly expands the reach and usability of your Python-based tools, offering a polished delivery mechanism across Windows, macOS, and Linux. It’s the ultimate productivity hack for delivering user-friendly software without the dependency drama.</p>\n\n<h2>\n  \n  \n  Learn More: 🔗\n</h2>\n\n<p><a href=\"https://github.com/brentvollebregt/auto-py-to-exe\" rel=\"noopener noreferrer\">View the Project on GitHub</a></p>\n\n\n\n\n<h2>\n  \n  \n  🌟 Stay Connected with GitHub Open Source!\n</h2>\n\n<blockquote>\n<p>📱 <strong>Join us on Telegram</strong><br><br>\nGet daily updates on the best open-source projects<br><br>\n<a href=\"https://t.me/GitHub_Open_Source\" rel=\"noopener noreferrer\">GitHub Open Source</a></p>\n\n<p>👥 <strong>Follow us on Facebook</strong><br><br>\nConnect with our community and never miss a discovery<br><br>\n<a href=\"https://www.facebook.com/people/GitHub-Open-Source/61571925474856/\" rel=\"noopener noreferrer\">GitHub Open Source</a></p>\n</blockquote>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Iterator in Python (3)","url":"https://dev.to/hyperkai/iterator-in-python-3-3g88","date":1761483453,"author":"Super Kai (Kazuya Ito)","guid":315341,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>☕</p>\n\n<p>*Memo:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/iterator-in-python-1-3341\">My post</a> explains an iterator (1).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/iterator-in-python-2-3o4i\">My post</a> explains an iterator (2).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/iterator-in-python-3-1c1h\">My post</a> explains an iterator (4).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/iterator-in-python-4-km7\">My post</a> explains an iterator (5).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/iterator-in-python-5-3dle\">My post</a> explains an iterator (6).</li>\n</ul>\n\n<p>An iterator cannot be enlarged with <code>*</code> and a number as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for *: 'list_iterator' and 'int'\n</span></code></pre>\n\n</div>\n\n\n\n<p>An iterator and other iterators cannot be concatenated with <code>+</code> as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">])</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for +: 'list_iterator' and\n# 'list_iterator'\n</span></code></pre>\n\n</div>\n\n\n\n<p>An iterator and other iterators cannot return:</p>\n\n<ul>\n<li>all the elements in them with <code>'|'</code> (Union: A ∪ B).</li>\n<li>their common elements with <code>'&amp;'</code> (Intersection: A ∩ B).</li>\n<li>the elements in the iterator which aren't in other iterators with <code>'-'</code> (Difference: A - B).\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span> <span class=\"o\">|</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span> <span class=\"o\">|</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for |: 'list_iterator' and\n# 'list_iterator'\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span> <span class=\"o\">&amp;</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span> <span class=\"o\">&amp;</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for &amp;: 'list_iterator' and \n# 'list_iterator'\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span> <span class=\"o\">-</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span> <span class=\"o\">-</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for -: 'list_iterator' and \n# 'list_iterator'\n</span></code></pre>\n\n</div>\n\n\n\n<p>An iterator and other iterator cannot return the elements in the iterator but not in other iterator or not in the iterator but in other iterator with <code>'^'</code> (Symmetric Difference: A Δ B) as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">^</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for ^: 'list_iterator' and \n# 'list_iterator'\n</span></code></pre>\n\n</div>\n\n\n\n<p>An iterator can be iterated with a <code>for</code> statement as shown below:</p>\n\n<h3>\n  \n  \n  &lt;<strong>1D iterator</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"c1\"># 0\n# 1\n# 2\n# 3\n# 4\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>2D iterator</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]),</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])]):</span>\n    <span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"c1\"># 0\n# 1\n# 2\n# 3\n# 4\n# 5\n# 6\n# 7\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>3D iterator</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])]),</span>\n               <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]),</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])])]):</span>\n    <span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">z</span> <span class=\"ow\">in</span> <span class=\"n\">y</span><span class=\"p\">:</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"c1\"># 0\n# 1\n# 2\n# 3\n# 4\n# 5\n# 6\n# 7\n</span></code></pre>\n\n</div>\n\n\n\n<p>An iterator can be unpacked with an assignment and <code>for</code> statement, function and <code>*</code> but not with <code>**</code> as shown below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"c1\"># 0 1 2\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>  <span class=\"c1\"># 0 [1, 2, 3, 4] 5\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># 0 1 2 3 4 5\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">for</span> <span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"ow\">in</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]),</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])]):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"c1\"># 0 1 2\n# 3 4 5\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">for</span> <span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span> <span class=\"ow\">in</span> <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]),</span>\n                         <span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">])]):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"c1\"># 0 [1, 2, 3, 4] 5\n# 0 1 2 3 4 5\n# 6 [7, 8, 9, 10] 11\n# 6 7 8 9 10 11\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">])]))</span>\n<span class=\"c1\"># 0 1 2 3 4 5\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">([</span><span class=\"o\">*</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">])])])</span>\n<span class=\"c1\"># [0, 1, 2, 3, 4, 5]\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p3</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">c</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p4</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">d</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p5</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">e</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p6</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">f</span><span class=\"sh\">'</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">p3</span><span class=\"p\">,</span> <span class=\"n\">p4</span><span class=\"p\">,</span> <span class=\"n\">p5</span><span class=\"p\">,</span> <span class=\"n\">p6</span><span class=\"p\">)</span>\n\n<span class=\"nf\">func</span><span class=\"p\">()</span>\n<span class=\"c1\"># a b c d e f\n</span>\n<span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]),</span> <span class=\"o\">*</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]))</span>\n<span class=\"c1\"># 0 1 2 3 4 5\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n\n<span class=\"nf\">func</span><span class=\"p\">()</span>\n<span class=\"c1\"># a b ()\n# a b\n# a b ['A', 'B', 'C', 'D']\n</span>\n<span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]),</span> <span class=\"o\">*</span><span class=\"nf\">iter</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]))</span>\n<span class=\"c1\"># 0 1 (2, 3, 4, 5)\n# 0 1 2 3 4 5\n# 0 1 ['A', 'B', 2, 3, 4, 5, 'C', 'D']\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"🧩 Building a Powerful Multi-Threaded PDF Downloader with Tkinter and Python","url":"https://dev.to/srijan-xi/building-a-powerful-multi-threaded-pdf-downloader-with-tkinter-and-python-14mc","date":1761483226,"author":"Srijan Kumar","guid":315340,"unread":true,"content":"<p>In today’s digital workspace, managing multiple document downloads can become chaotic — especially when handling dozens of PDF files.<br><br>\nTo simplify this process, I developed a <strong>Tkinter-based Multi-Threaded PDF Downloader</strong> using Python.  </p>\n\n<p>This tool enables <strong>concurrent downloads, real-time speed monitoring, and pause/resume control</strong> — all inside a simple yet professional GUI interface.  </p>\n\n\n\n<p>🔗 <strong>GitHub Repository:</strong> <a href=\"https://github.com/Srijan-XI/PDF-Downloader\" rel=\"noopener noreferrer\">Srijan-XI/PDF-Downloader</a></p>\n<h2>\n  \n  \n  <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fifowgg82754ltkb8ppkq.png\" alt=\"Pre-view\" width=\"800\" height=\"628\">\n</h2>\n<h2>\n  \n  \n  🚀 Introduction\n</h2>\n\n<p>The <strong>PDF Downloader</strong> project merges simplicity and performance to create a powerful, user-friendly desktop application.  </p>\n\n<p>It uses Python’s <code>threading</code> for parallel downloads, <code>Tkinter</code> for the GUI, and <code>PyInstaller</code> for cross-platform builds. Whether you’re a student, researcher, or engineer — this tool helps automate your workflow efficiently.</p>\n\n\n<h2>\n  \n  \n  ✨ Key Features\n</h2>\n\n<ul>\n<li>⚡ <strong>Concurrent Downloads</strong> — Download multiple PDFs at once (1–10 threads).\n</li>\n<li>🌐 <strong>Live Network Speed Display</strong> — Monitors download speed dynamically.\n</li>\n<li>⏯ <strong>Pause/Resume</strong> — Stop and continue downloads seamlessly.\n</li>\n<li>🔍 <strong>Recursive File Discovery</strong> — Detects PDFs inside nested directories.\n</li>\n<li>📊 <strong>Progress Tracking</strong> — Visual progress bars with precise logging.\n</li>\n<li>🪟 <strong>Custom Icon Branding</strong> — Unified design for GUI and executables.\n</li>\n<li>💻 <strong>Cross-Platform</strong> — Works smoothly on Windows, Linux, and macOS.\n</li>\n</ul>\n\n\n<h2>\n  \n  \n  🗂 Project Structure\n</h2>\n\n<p>A clean and modular architecture makes this project easy to maintain and extend:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Pdf Downloader/\n├── pdf_downloads.py # Core application logic\n├── requirements.txt # Dependencies\n├── run.bat / run.sh # Launchers for each platform\n├── scripts/\n│ ├── build_exe.ps1 # Windows build automation\n│ ├── build_app.sh # Linux/macOS build\n│ └── convert_icon.py # Converts icons to .ico\n├── icon/logo_pdf.png # Application logo\n├── docs/ # Documentation files\n└── dist/ / build/ / venv/ # Generated directories\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  ⚙️ Installation and Setup\n</h2>\n\n<h3>\n  \n  \n  🪟 Windows\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight powershell\"><code><span class=\"n\">Set-ExecutionPolicy</span><span class=\"w\"> </span><span class=\"nt\">-ExecutionPolicy</span><span class=\"w\"> </span><span class=\"nx\">RemoteSigned</span><span class=\"w\"> </span><span class=\"nt\">-Scope</span><span class=\"w\"> </span><span class=\"nx\">Process</span><span class=\"w\">\n</span><span class=\"o\">.</span><span class=\"n\">\\scripts\\build_exe.ps1</span><span class=\"w\">\n</span><span class=\"o\">.</span><span class=\"nx\">\\run.bat</span><span class=\"w\">\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  🐧 Linux / macOS\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nb\">chmod</span> +x scripts/build_app.sh run.sh\n./scripts/build_app.sh\n./run.sh\n</code></pre>\n\n</div>\n\n\n\n<p>Within minutes, the application compiles and launches seamlessly.</p>\n\n<h3>\n  \n  \n  🧰 Build from Source\n</h3>\n\n<p>You can also manually build the application from source using your terminal:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process\n.\\scripts\\build_exe.ps1\n</code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\nchmod +x scripts/build_app.sh\n./scripts/build_app.sh\n</code></pre>\n\n</div>\n\n\n\n<p>The compiled application will appear inside the /dist/ folder, fully portable and ready to use.</p>\n\n\n\n\n<h3>\n  \n  \n  📦 Dependencies\n</h3>\n\n<p>The project uses lightweight and efficient libraries:</p>\n\n<ul>\n<li><p><code>requests</code> → For downloading files</p></li>\n<li><p><code>beautifulsoup4</code> → For parsing HTML and locating links</p></li>\n<li><p><code>pillow</code> → For image/icon processing</p></li>\n<li><p><code>pyinstaller</code> → For building standalone executables</p></li>\n</ul>\n\n<p>All dependencies are installed automatically during the build process.</p>\n\n<h3>\n  \n  \n  💻 Manual Build with PyInstaller\n</h3>\n\n<p>If you want full control, build manually:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\npyinstaller --noconfirm --onefile --windowed --icon=icon\\logo_pdf.ico --add-data \"icon;icon\" --name \"pdf_downloader\" pdf_downloads.py\n</code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>\npyinstaller --noconfirm --onefile --windowed --icon=icon/logo_pdf.ico --add-data \"icon:icon\" --name \"pdf_downloader\" pdf_downloads.py\n</code></pre>\n\n</div>\n\n\n\n<p>Note: Use ; for Windows and : for Linux/macOS in --add-data.</p>\n\n<h3>\n  \n  \n  🧩 Debugging and Logging\n</h3>\n\n<p>By default, the app runs in GUI (windowed) mode.<br>\nIf you want to view console logs for debugging, remove the <code>--windowed flag</code> from your PyInstaller command.</p>\n<h3>\n  \n  \n  🌍 Cross-Platform Performance\n</h3>\n\n<p>This project has been tested on:</p>\n\n<ul>\n<li><p>🪟 Windows 10/11</p></li>\n<li><p>🐧 Ubuntu / Fedora</p></li>\n<li><p>🍏 macOS Sonoma / Ventura</p></li>\n</ul>\n\n<p>Performance and UI remain consistent across platforms.</p>\n<h3>\n  \n  \n  🤝 Contributing\n</h3>\n\n<p>Community contributions are welcome!</p>\n\n<p>If you’d like to report bugs, suggest improvements, or contribute features, visit the repository:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>👉 https://github.com/Srijan-XI/PDF-Downloader\n</code></pre>\n\n</div>\n\n\n\n<p>Fork the repo, experiment, and share your enhancements!</p>\n\n<h3>\n  \n  \n  📜 License &amp; Credits\n</h3>\n\n<p>This project is open-source and available for both personal and commercial use.</p>\n\n<p>Created and maintained by <strong>Srijan</strong> | <strong>Srijanxi Technologies</strong>.<br>\nBuilt with dedication, precision, and a belief that every tool — no matter how small — deserves thoughtful engineering.</p>\n\n<p>“Built for efficiency. Engineered for reliability. Inspired by innovation.”</p>\n\n<p>✅ Explore the Full Project on GitHub:<br>\n🔗 github.com/Srijan-XI/PDF-Downloader</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building a Pluggable Architecture in Django — Introducing django-plugin-system","url":"https://dev.to/alireza_tabatabaeian_a4f6/building-a-pluggable-architecture-in-django-introducing-django-plugin-system-2da2","date":1761482645,"author":"alireza tabatabaeian","guid":315339,"unread":true,"content":"<h1>\n  \n  \n  🧩 Building a Pluggable Architecture in Django — Introducing <code>django-plugin-system</code>\n</h1>\n\n<p><em>By Alireza Tabatabaeian</em>  </p>\n\n\n\n\n<h2>\n  \n  \n  🚀 Why I built it\n</h2>\n\n<p>Every mature Django project eventually hits this problem:</p>\n\n<blockquote>\n<p>“I need to switch providers — but I don’t want to rewrite my entire codebase.”</p>\n</blockquote>\n\n<p>Maybe you started sending OTPs with <strong>Twilio</strong>, then later needed to add <strong>Kavenegar</strong>, or you want users to pick their <strong>notification channel</strong> (Email, SMS, Push).<br><br>\nHardcoding logic for every provider leads to chaos — conditionals, repeated imports, redeploys, and no flexibility.</p>\n\n<p>So I built <strong><code>django-plugin-system</code></strong> — a small, framework-native package that lets you make Django <strong>truly pluggable</strong>.</p>\n\n\n<h2>\n  \n  \n  🧠 What it does\n</h2>\n\n<p>This library gives you a simple pattern to:</p>\n\n<ul>\n<li>Define an <strong>interface</strong> (like <code>AbstractOTP</code>)</li>\n<li>Register multiple <strong>implementations</strong> (Twilio, Kavenegar, etc.)</li>\n<li>Sync them automatically into the <strong>database</strong>\n</li>\n<li>Manage them easily in <strong>Django Admin</strong>\n</li>\n<li>Dynamically choose and swap plugins <strong>at runtime</strong>\n</li>\n</ul>\n\n\n<h2>\n  \n  \n  🛠️ Installation\n</h2>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>pip <span class=\"nb\">install </span>django-plugin-system\n</code></pre>\n\n</div>\n\n\n<p>Add it to your project:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ...\n</span>    <span class=\"sh\">\"</span><span class=\"s\">django_plugin_system</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Run migrations:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>python manage.py migrate\n</code></pre>\n\n</div>\n\n\n\n<p>That’s all it takes 🎉</p>\n\n\n\n\n<h2>\n  \n  \n  🧩 Step 1 — Define an Interface\n</h2>\n\n<p>Let’s start simple: a notification system that can send messages by <strong>Email</strong>, <strong>SMS</strong>, or <strong>Push</strong>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># apps/notifications/interfaces.py\n</span><span class=\"kn\">from</span> <span class=\"n\">abc</span> <span class=\"kn\">import</span> <span class=\"n\">ABC</span><span class=\"p\">,</span> <span class=\"n\">abstractmethod</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AbstractNotifier</span><span class=\"p\">(</span><span class=\"n\">ABC</span><span class=\"p\">):</span>\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span> <span class=\"bp\">...</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  🪄 Step 2 — Register a Plugin Type\n</h2>\n\n<p>Tell Django that this interface is a <em>plugin type</em>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># apps/notifications/apps.py\n</span><span class=\"kn\">from</span> <span class=\"n\">django.apps</span> <span class=\"kn\">import</span> <span class=\"n\">AppConfig</span>\n<span class=\"kn\">from</span> <span class=\"n\">django_plugin_system.register</span> <span class=\"kn\">import</span> <span class=\"n\">register_plugin_type</span>\n<span class=\"kn\">from</span> <span class=\"n\">.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">AbstractNotifier</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">NotificationsConfig</span><span class=\"p\">(</span><span class=\"n\">AppConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">apps.notifications</span><span class=\"sh\">\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">ready</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"nf\">register_plugin_type</span><span class=\"p\">({</span>\n            <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">notifier</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">manager</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">interface</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">AbstractNotifier</span><span class=\"p\">,</span>\n            <span class=\"sh\">\"</span><span class=\"s\">description</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Notification channels (Email, SMS, Push, etc.)</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"p\">})</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  🧩 Step 3 — Add a Plugin Item\n</h2>\n\n<p>Each plugin item is an implementation of the interface.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># apps/notifications_email/plugins.py\n</span><span class=\"kn\">from</span> <span class=\"n\">django_plugin_system.register</span> <span class=\"kn\">import</span> <span class=\"n\">register_plugin_item</span>\n<span class=\"kn\">from</span> <span class=\"n\">apps.notifications.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">AbstractNotifier</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">EmailNotifier</span><span class=\"p\">(</span><span class=\"n\">AbstractNotifier</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Sending email to </span><span class=\"si\">{</span><span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">email</span><span class=\"si\">}</span><span class=\"s\">: </span><span class=\"si\">{</span><span class=\"n\">message</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"nf\">register_plugin_item</span><span class=\"p\">({</span>\n    <span class=\"sh\">\"</span><span class=\"s\">name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">email</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">module</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">apps.notifications_email</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">type_name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">notifier</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">manager_name</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">apps.notifications</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">plugin_class</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">EmailNotifier</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">priority</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">description</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Send notification via Email</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n</code></pre>\n\n</div>\n\n\n\n<blockquote>\n<p>You can register as many implementations as you want — SMS, Push, WhatsApp, etc.</p>\n</blockquote>\n\n\n\n\n<h2>\n  \n  \n  🔄 Step 4 — Sync Registry to Database\n</h2>\n\n<p>The system auto-syncs after migrations, but you can trigger it manually anytime:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>python manage.py pluginsync\n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>Uses <code>get_or_create</code> by default — preserves admin edits (like disabled plugins).\n</li>\n<li>Supports <code>--mode update</code> to force-refresh descriptions and priorities.</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  ⚙️ Step 5 — Use It Anywhere\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">django_plugin_system.helpers</span> <span class=\"kn\">import</span> <span class=\"n\">get_plugin_instance</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">notify_user</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"n\">notifier</span> <span class=\"o\">=</span> <span class=\"nf\">get_plugin_instance</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">notifier</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">apps.notifications</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">notifier</span><span class=\"p\">:</span>\n        <span class=\"n\">notifier</span><span class=\"p\">.</span><span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>✅ <strong>No imports</strong>, <strong>no hardcoding</strong>, and <strong>no redeploy</strong>.<br><br>\nChange the active notifier in Admin, and the system just works.</p>\n\n\n<h2>\n  \n  \n  🎛 Advanced Use Case #1 — User Notification Preferences\n</h2>\n\n<p>You can even let users choose their <strong>favorite notification channels</strong> directly.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># models.py\n</span><span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n<span class=\"kn\">from</span> <span class=\"n\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"n\">django.contrib.auth.models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n<span class=\"kn\">from</span> <span class=\"n\">django_plugin_system.models</span> <span class=\"kn\">import</span> <span class=\"n\">PluginItem</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserNotifyPref</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"nc\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">favourite_plugins</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"nc\">ManyToManyField</span><span class=\"p\">(</span><span class=\"n\">PluginItem</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_user_plugins</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"n\">User</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">PluginItem</span><span class=\"p\">]:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nf\">list</span><span class=\"p\">(</span>\n                <span class=\"n\">UserNotifyPref</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">).</span><span class=\"n\">favourite_plugins</span><span class=\"p\">.</span><span class=\"nf\">all</span><span class=\"p\">()</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">UserNotifyPref</span><span class=\"p\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Usage:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">myapp.models</span> <span class=\"kn\">import</span> <span class=\"n\">UserNotifyPref</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">notify_user</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"n\">favourite_plugins</span> <span class=\"o\">=</span> <span class=\"n\">UserNotifyPref</span><span class=\"p\">.</span><span class=\"nf\">get_user_plugins</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">plugin</span> <span class=\"ow\">in</span> <span class=\"n\">favourite_plugins</span><span class=\"p\">:</span>\n        <span class=\"n\">cls</span> <span class=\"o\">=</span> <span class=\"n\">plugin</span><span class=\"p\">.</span><span class=\"nf\">load_class</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">cls</span><span class=\"p\">:</span>\n            <span class=\"nf\">cls</span><span class=\"p\">().</span><span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>💡 <em>Result:</em> Each user can customize their delivery channels —<br><br>\nEmail + Push, Push only, or SMS only — all through data, not code.</p>\n\n\n\n\n<h2>\n  \n  \n  📱 Advanced Use Case #2 — Multi-Provider OTP Failover\n</h2>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">django_plugin_system.models</span> <span class=\"kn\">import</span> <span class=\"n\">PluginType</span><span class=\"p\">,</span> <span class=\"n\">PluginItem</span><span class=\"p\">,</span> <span class=\"n\">PluginStatus</span>\n<span class=\"kn\">from</span> <span class=\"n\">rest_framework.response</span> <span class=\"kn\">import</span> <span class=\"n\">Response</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">check_no_credit</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nf\">getattr</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">code</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">NO_CREDIT</span><span class=\"sh\">\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">notify_admin</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">[ADMIN ALERT] </span><span class=\"si\">{</span><span class=\"n\">msg</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_next_item</span><span class=\"p\">(</span><span class=\"n\">type_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">manager</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">pt</span> <span class=\"o\">=</span> <span class=\"n\">PluginType</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">type_name</span><span class=\"p\">,</span> <span class=\"n\">manager</span><span class=\"o\">=</span><span class=\"n\">manager</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">PluginType</span><span class=\"p\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>\n    <span class=\"k\">return</span> <span class=\"n\">pt</span><span class=\"p\">.</span><span class=\"nf\">get_single_plugin</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">send_otp</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Response</span><span class=\"p\">:</span>\n    <span class=\"n\">TYPE_NAME</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">otp</span><span class=\"sh\">\"</span>\n    <span class=\"n\">MANAGER</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">otp_manager</span><span class=\"sh\">\"</span>\n    <span class=\"n\">MAX_TRIES</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"n\">MAX_TRIES</span><span class=\"p\">):</span>\n        <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"nf\">_next_item</span><span class=\"p\">(</span><span class=\"n\">TYPE_NAME</span><span class=\"p\">,</span> <span class=\"n\">MANAGER</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">item</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nc\">Response</span><span class=\"p\">({</span><span class=\"sh\">\"</span><span class=\"s\">detail</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Service unavailable</span><span class=\"sh\">\"</span><span class=\"p\">},</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">503</span><span class=\"p\">)</span>\n\n        <span class=\"n\">cls</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">load_class</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">cls</span><span class=\"p\">:</span>\n            <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">PluginStatus</span><span class=\"p\">.</span><span class=\"n\">DISABLED</span>\n            <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">update_fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">status</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n            <span class=\"nf\">notify_admin</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"si\">}</span><span class=\"s\">.</span><span class=\"si\">{</span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\"> failed to load</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n\n        <span class=\"n\">agent</span> <span class=\"o\">=</span> <span class=\"nf\">cls</span><span class=\"p\">()</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n            <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">PluginStatus</span><span class=\"p\">.</span><span class=\"n\">RESERVED</span>\n            <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">update_fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">status</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n            <span class=\"nf\">notify_admin</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"si\">}</span><span class=\"s\">.</span><span class=\"si\">{</span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\"> crashed: </span><span class=\"si\">{</span><span class=\"n\">exc</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n\n        <span class=\"k\">if</span> <span class=\"nf\">getattr</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">status</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nc\">Response</span><span class=\"p\">({</span><span class=\"sh\">\"</span><span class=\"s\">detail</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">SMS sent successfully</span><span class=\"sh\">\"</span><span class=\"p\">},</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nf\">check_no_credit</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">):</span>\n            <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">PluginStatus</span><span class=\"p\">.</span><span class=\"n\">DISABLED</span>\n            <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">update_fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">status</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n            <span class=\"nf\">notify_admin</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"si\">}</span><span class=\"s\"> is out of credit</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n\n        <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">priority</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">priority</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">update_fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">priority</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n\n    <span class=\"k\">return</span> <span class=\"nc\">Response</span><span class=\"p\">({</span><span class=\"sh\">\"</span><span class=\"s\">detail</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Service unavailable</span><span class=\"sh\">\"</span><span class=\"p\">},</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">503</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>✅ <em>Highlights:</em> automatic provider failover, self-healing priority updates, and admin reactivation.</p>\n\n\n\n\n<h2>\n  \n  \n  🧠 Design Philosophy\n</h2>\n\n<p><code>django-plugin-system</code> turns your Django project into a <strong>modular ecosystem</strong>.<br><br>\nDefine contracts once, implement anywhere, and control behavior dynamically.</p>\n\n<blockquote>\n<p>Code once, configure forever.</p>\n</blockquote>\n\n\n\n\n<h2>\n  \n  \n  💡 Inspiration\n</h2>\n\n<p>This library is heavily inspired by Drupal’s plugin system. Many of the ideas here — clear separation between plugin definition and instance configuration, runtime discovery, and admin-level control — echo patterns refined by the Drupal community.</p>\n\n\n\n\n<h2>\n  \n  \n  🚀 Roadmap: Configurable, Multi-Instance Plugins\n</h2>\n\n<p>We’re evolving from “one implementation per plugin item” to configurable, multi-instance plugins. A single plugin class can have many instances (e.g., different credentials, endpoints, or templates), each with its own status, priority, and config.<br>\nThis enables use-cases like “Transactional SMS vs Marketing SMS,” “US-based S3 vs EU-based S3,” etc.</p>\n\n<p>v1.2: add PluginInstance (backward compatible; legacy item selection still works).</p>\n\n<p>v2.0–2.4: deprecate item-only selectors, encourage instance-aware helpers.</p>\n\n<p>v3.0: remove legacy item-only code paths.</p>\n\n\n\n\n<h2>\n  \n  \n  📦 Project Info\n</h2>\n\n<p><strong>PyPI:</strong> <a href=\"https://pypi.org/project/django-plugin-system/\" rel=\"noopener noreferrer\">https://pypi.org/project/django-plugin-system/</a><br><br>\n<strong>GitHub:</strong> <a href=\"https://github.com/Alireza-Tabatabaeian/django-plugin-system\" rel=\"noopener noreferrer\">https://github.com/Alireza-Tabatabaeian/django-plugin-system</a><br><br>\n<strong>License:</strong> MIT<br><br>\n<strong>Compatible:</strong> Django 4.2+, Python 3.10+</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Weekly Challenge: The one about arrays","url":"https://dev.to/simongreennet/weekly-challenge-the-one-about-arrays-1h8k","date":1761481360,"author":"Simon Green","guid":315338,"unread":true,"content":"<h2>\n  \n  \n  Weekly Challenge 344\n</h2>\n\n<p>Each week Mohammad S. Anwar sends out <a href=\"https://theweeklychallenge.org/\" rel=\"noopener noreferrer\">The Weekly Challenge</a>, a chance for all of us to come up with solutions to two weekly tasks. My solutions are written in Python first, and then converted to Perl. It's a great way for us all to practice some coding.</p>\n\n<p><a href=\"https://theweeklychallenge.org/blog/perl-weekly-challenge-344/\" rel=\"noopener noreferrer\">Challenge</a>, <a href=\"https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-344/sgreen\" rel=\"noopener noreferrer\">My solutions</a></p>\n\n<h2>\n  \n  \n  Task 1: Array Form Compute\n</h2>\n\n<h3>\n  \n  \n  Task\n</h3>\n\n<p>You are given an array of integers, <code>@ints</code> and an integer, <code>$x</code>.</p>\n\n<p>Write a script to add <code>$x</code> to the integer in the array-form.</p>\n\n<p>The array form of an integer is a digit-by-digit representation stored as an array, where the most significant digit is at the 0th index.</p>\n\n<h3>\n  \n  \n  My solution\n</h3>\n\n<p>The easiest solution would be to turn the <code>ints</code> array into an integer, add the value and then turn it back into an array. However, I don't think this is what this challenge is about.</p>\n\n<p>So it's back to doing things like we did in primary school math classes. For input from the command line, I take the last argument as <code>x</code> and the rest of the arguments as <code>ints</code> (a list in Python, array in Perl).</p>\n\n<p>I start by making sure that <code>ints</code> only contains a single digit and <code>x</code> is a non-negative integer.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">array_form_compute</span><span class=\"p\">(</span><span class=\"n\">ints</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]:</span>\n    <span class=\"k\">if</span> <span class=\"nf\">any</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"nf\">isinstance</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">n</span> <span class=\"o\">&gt;</span> <span class=\"mi\">9</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">ints</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">ValueError</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">All elements in the list must be single digit integers (0-9).</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">ValueError</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">The integer x must be a non-negative integer.</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The next step is to handle all but the most significant (first) digit. Working backwards (last digit first), I set the <code>pos</code> variable to determine the position of the digit I am working on. I set <code>i</code> to the value of the integer at the position.</p>\n\n<p>I take the <code>x</code> value and split it using the <a href=\"https://docs.python.org/3/library/functions.html#divmod\" rel=\"noopener noreferrer\">divmod</a> function. The <code>remainder</code> is the remainder of diving <code>x</code> by 10 (i.e. the last digit), and <code>x</code> is now the integer division which is used in the next iteration.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code>    <span class=\"k\">for</span> <span class=\"n\">pos</span> <span class=\"ow\">in</span> <span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">ints</span><span class=\"p\">)</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">ints</span><span class=\"p\">[</span><span class=\"n\">pos</span><span class=\"p\">]</span>\n        <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">remainder</span> <span class=\"o\">=</span> <span class=\"nf\">divmod</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This is where primary school math comes into play. If <code>i</code> + <code>remainder</code> is more than one digit (i.e. greater than 9), then the last digit of the sum becomes the new <code>i</code> and the other digits are added to the integer before it. In this case, it is added to the <code>x</code> value.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code>        <span class=\"n\">add_x</span><span class=\"p\">,</span> <span class=\"n\">add_i</span> <span class=\"o\">=</span> <span class=\"nf\">divmod</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">remainder</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"n\">ints</span><span class=\"p\">[</span><span class=\"n\">pos</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">add_i</span>\n        <span class=\"n\">x</span> <span class=\"o\">+=</span> <span class=\"n\">add_x</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Lastly I need to handle the most significant digit slightly differently. In this case, where <code>ints[0]</code> + <code>x</code> is greater than or equal to 10, I need to split the digits of the new number to a list of individual digits.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code>    <span class=\"n\">ints</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">x</span>\n    <span class=\"k\">if</span> <span class=\"n\">ints</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n        <span class=\"n\">digits</span> <span class=\"o\">=</span> <span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">ints</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n        <span class=\"n\">ints</span> <span class=\"o\">=</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">digits</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">ints</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Finally, I return the new list, or print the array in Perl.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code>    <span class=\"k\">return</span> <span class=\"n\">ints</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The Perl solution follows the same logic. It doesn't have a built in <code>divmod</code> function, so I created one.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight perl\"><code><span class=\"k\">sub </span><span class=\"nf\">divmod</span><span class=\"p\">($a, $b) {</span>\n    <span class=\"k\">my</span> <span class=\"nv\">$div</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nv\">$a</span> <span class=\"o\">/</span> <span class=\"nv\">$b</span><span class=\"p\">);</span>\n    <span class=\"k\">my</span> <span class=\"nv\">$mod</span> <span class=\"o\">=</span> <span class=\"nv\">$a</span> <span class=\"o\">%</span> <span class=\"nv\">$b</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nv\">$div</span><span class=\"p\">,</span> <span class=\"nv\">$mod</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Examples\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nv\">$ </span>./ch-1.py 1 2 3 4 12\n<span class=\"o\">[</span>1, 2, 4, 6]\n\n<span class=\"nv\">$ </span>./ch-1.py 2 7 4 181\n<span class=\"o\">[</span>4, 5, 5]\n\n<span class=\"nv\">$ </span>./ch-1.py 9 9 9 1\n<span class=\"o\">[</span>1, 0, 0, 0]\n\n<span class=\"nv\">$ </span>./ch-1.py 1 0 0 0 0 9999\n<span class=\"o\">[</span>1, 9, 9, 9, 9]\n\n<span class=\"nv\">$ </span>./ch-1.py 0 1000\n<span class=\"o\">[</span>1, 0, 0, 0]\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Task 2: Array Formation\n</h2>\n\n<h3>\n  \n  \n  Task\n</h3>\n\n<p>You are given two list: <code>@source</code> and <code>@target</code>.</p>\n\n<p>Write a script to see if you can build the exact <code>@target</code> by putting these smaller lists from <code>@source</code> together in some order. You cannot break apart or change the order inside any of the smaller lists in <code>@source</code>.</p>\n\n<h3>\n  \n  \n  My solution\n</h3>\n\n<p>For input from the command line, I take a JSON string from the first argument and convert that to the <code>source</code> variable. The remaining arguments make up the <code>target</code> value.</p>\n\n<p>This is one challenge that is a lot easier to complete in Python than in Perl. I explain the Python solution.</p>\n\n<p>I start by seeing if a solution is indeed possible. This is done by counting the frequency of all digits in both the <code>source</code> and <code>target</code> lists and seeing if they are the same. If they are not the same, I return <code>False</code>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">array_formation</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]],</span> <span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Check that a solution is possible\n</span>    <span class=\"k\">if</span> <span class=\"nc\">Counter</span><span class=\"p\">(</span><span class=\"n\">chain</span><span class=\"p\">.</span><span class=\"nf\">from_iterable</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">))</span> <span class=\"o\">!=</span> <span class=\"nc\">Counter</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n</code></pre>\n\n</div>\n\n\n\n<p>There are a few inbuilt features in the above.</p>\n\n<ul>\n<li>itertools.chain.from_iterable is a function that will flatten a list of lists in to a single list.</li>\n<li>collections.Counter will turn an iterable (in this case a list) and turn it into a dictionary with the value as the key and the frequency as the value.</li>\n<li>In Python, comparing two dictionaries for equality will compare to see if the key and value are the same. The order of the keys does not matter.</li>\n</ul>\n\n<p>From here, there are two possible approaches to take. One would be to call a recursive function to try all valid starting numbers recursively until we found the one that works. Given the examples (where there is only a few lists in the <code>source</code> value), this seems like an unneeded optimization.</p>\n\n<p>So I took the brute force approach and compute all permutations of the <code>source</code> list. If I find the right one, I return <code>True</code>. If I exhaust all permutations, I return <code>False</code>.</p>\n\n<p>Python has the permutations function from the itertools module. In Perl, the Algorithm::Combinatorics function does the same.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code>    <span class=\"k\">for</span> <span class=\"n\">perm</span> <span class=\"ow\">in</span> <span class=\"nf\">permutations</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">):</span>\n        <span class=\"n\">combined</span> <span class=\"o\">=</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">chain</span><span class=\"p\">.</span><span class=\"nf\">from_iterable</span><span class=\"p\">(</span><span class=\"n\">perm</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">combined</span> <span class=\"o\">==</span> <span class=\"n\">target</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\n    <span class=\"k\">return</span> <span class=\"bp\">False</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The Perl solution follows the same logic. It does not have an inbuilt way to flatten so I wrote my own.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight perl\"><code><span class=\"k\">sub </span><span class=\"nf\">flatten_array</span><span class=\"p\">($list) {</span>\n    <span class=\"k\">return</span> <span class=\"nb\">map</span> <span class=\"p\">{</span> <span class=\"err\">@</span><span class=\"vg\">$_</span> <span class=\"p\">}</span> <span class=\"nv\">@$list</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>It also cannot compare an array for equality, so I faked it by joining the lists with spaces and then tested if the two strings are equal.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight perl\"><code><span class=\"k\">sub </span><span class=\"nf\">compare_array</span> <span class=\"p\">( $list1, $list2 ) {</span>\n    <span class=\"k\">return</span> <span class=\"nb\">join</span><span class=\"p\">(</span> <span class=\"p\">'</span><span class=\"s1\"> </span><span class=\"p\">',</span> <span class=\"nv\">@$list1</span> <span class=\"p\">)</span> <span class=\"ow\">eq</span> <span class=\"nb\">join</span><span class=\"p\">(</span> <span class=\"p\">'</span><span class=\"s1\"> </span><span class=\"p\">',</span> <span class=\"nv\">@$list2</span> <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>To check that a solution is possible, I numerically sort the <code>source</code> and <code>target</code> values to check if they are equal.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight perl\"><code><span class=\"k\">sub </span><span class=\"nf\">array_formation</span><span class=\"p\">( $source, $target ) {</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span>\n        <span class=\"ow\">not</span> <span class=\"nv\">compare_array</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span> <span class=\"nb\">sort</span> <span class=\"p\">{</span> <span class=\"nv\">$a</span> <span class=\"o\">&lt;=&gt;</span> <span class=\"nv\">$b</span> <span class=\"p\">}</span> <span class=\"nv\">flatten_array</span><span class=\"p\">(</span><span class=\"nv\">$source</span><span class=\"p\">)</span> <span class=\"p\">],</span>\n            <span class=\"p\">[</span> <span class=\"nb\">sort</span> <span class=\"p\">{</span> <span class=\"nv\">$a</span> <span class=\"o\">&lt;=&gt;</span> <span class=\"nv\">$b</span> <span class=\"p\">}</span> <span class=\"nv\">@$target</span> <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n      <span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">'</span><span class=\"s1\">false</span><span class=\"p\">';</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">my</span> <span class=\"nv\">$iter</span> <span class=\"o\">=</span> <span class=\"nv\">permutations</span><span class=\"p\">(</span><span class=\"nv\">$source</span><span class=\"p\">);</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span> <span class=\"k\">my</span> <span class=\"nv\">$perm</span> <span class=\"o\">=</span> <span class=\"nv\">$iter</span><span class=\"o\">-&gt;</span><span class=\"k\">next</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nv\">compare_array</span><span class=\"p\">(</span> <span class=\"p\">[</span> <span class=\"nv\">flatten_array</span><span class=\"p\">(</span><span class=\"nv\">$perm</span><span class=\"p\">)</span> <span class=\"p\">],</span> <span class=\"nv\">$target</span> <span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"p\">'</span><span class=\"s1\">true</span><span class=\"p\">';</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">'</span><span class=\"s1\">false</span><span class=\"p\">';</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Examples\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nv\">$ </span>./ch-2.py <span class=\"s2\">\"[[2,3], [1], [4]]\"</span> 1 2 3 4\nTrue\n\n<span class=\"nv\">$ </span>./ch-2.py <span class=\"s2\">\"[[1,3], [2,4]]\"</span> 1 2 3 4\nFalse\n\n<span class=\"nv\">$ </span>./ch-2.py <span class=\"s2\">\"[[9,1], [5,8], [2]]\"</span> 5 8 2 9 1\nTrue\n\n<span class=\"nv\">$ </span>./ch-2.py <span class=\"s2\">\"[[1], [3]]\"</span> 1 2 3\nFalse\n\n<span class=\"nv\">$ </span>./ch-2.py <span class=\"s2\">\"[[7,4,6]]\"</span> 7 4 6\nTrue\n</code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: How to Write Production Python Code","url":"https://dev.to/vibe_youtube/tech-with-tim-how-to-write-production-python-code-5hab","date":1761480443,"author":"Vibe YouTube","guid":315337,"unread":true,"content":"<p>How to Write Production Python Code dives into eight core principles—from clean architecture and testing to error handling and performance tuning—using real-world examples that bridge the gap between junior and senior devs. Tim breaks it all down with clear timestamps so you can jump straight to what you need.</p>\n\n<p>Along the way you’ll snag a 25% boot.dev discount (code TECHWITHTIM), discover his DevLaunch mentorship for hands-on career guidance, and get everything you need to turn your Python scripts into rock-solid production apps.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=qU3Rc6_B9es\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: How to Write Production Python Code","url":"https://dev.to/vibe_youtube/tech-with-tim-how-to-write-production-python-code-4ah1","date":1761473277,"author":"Vibe YouTube","guid":315306,"unread":true,"content":"<p>How to Write Production Python Code is a deep dive into eight essential principles that elevate your Python from tutorial scripts to battle-ready, maintainable production code. Tim breaks down each principle with real-world examples, showing you exactly what separates a junior dev from a senior pro.</p>\n\n<p>Along the way you’ll find links to snag 25% off boot.dev, join Tim’s DevLaunch mentorship for hands-on guidance, and subscribe to his newsletter for all the code snippets. Check the timestamps to jump straight to each principle!</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=qU3Rc6_B9es\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Python Coding Stack: Impostors • How Even The Python Docs Get This Wrong* • [Club]","url":"https://www.thepythoncodingstack.com/p/impostors-how-even-the-python-docs","date":1761468768,"author":"","guid":315301,"unread":true,"content":"<p>Can you spot all the errors in the following paragraph? There are several:</p><blockquote><p>Two functions that enable you to work effectively with loops in Python are  and . Along with the  function, they’re some of the most common tools you’ll see in  loops. And when you master them, you can start exploring the functions in the  module.</p></blockquote><p>The correct number of errors in this text is either four or zero. Confused? I don’t blame you. And here’s a bit more confusion for you. It doesn’t matter either way.</p><p>Let’s talk about impostors in Python.</p><p>It’s likely that one of the first examples you saw when learning about  loops used the  function as part of the  statement.</p><p>But you were fooled. That example, whichever one it was, didn’t do such a thing.</p>","contentLength":742,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 15: Uncovering Spending Habits with Semester Averages","url":"https://dev.to/shahrouzlogs/day-15-uncovering-spending-habits-with-semester-averages-19p3","date":1761468267,"author":"Shahrouz Nikseresht","guid":315269,"unread":true,"content":"<p>Welcome to Day 15 of the <strong>#80DaysOfChallenges</strong> journey! Today’s challenge took me into practical territory: <strong>calculating average expenses for each semester</strong> from a list of monthly spending data. This intermediate-level task was a solid chance to work with for loops, enumerate(), tuple unpacking, and straightforward arithmetic in Python. It felt like a real-world budgeting exercise, showing how even everyday data can sharpen your skills in iteration and data organization.</p>\n\n\n\n\n<h2>\n  \n  \n  💡 Key Takeaways from Day 15: Semester Expenses Calculator\n</h2>\n\n<p>This challenge uses a list of 12 monthly expenses to compute averages for two semesters: January–June and July-December. The formula is basic, sum the relevant months and divide by six, but the focus is on efficient looping, smart indexing, and clean data return. Let’s unpack the essentials: <strong>iterating with loops</strong>, <strong>indexing via enumerate()</strong>, and <strong>tuple unpacking for results</strong>.</p>\n\n<h3>\n  \n  \n  1. The Loop: Accumulating Totals the Reliable Way\n</h3>\n\n<p>At its core, the task is about summing expenses into two buckets based on month position. A simple for loop does the heavy lifting, iterating over the list and adding values conditionally. The <code>calculate_semester_averages</code> function starts by initializing totals:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">first_semester_total</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">second_semester_total</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">expense</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">expenses</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"o\">&lt;</span> <span class=\"mi\">6</span><span class=\"p\">:</span>   <span class=\"c1\"># First six months (Jan–Jun) belong to the first semester\n</span>        <span class=\"n\">first_semester_total</span> <span class=\"o\">+=</span> <span class=\"n\">expense</span>  <span class=\"c1\"># Sum expenses for Jan–Jun\n</span>    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">second_semester_total</span> <span class=\"o\">+=</span> <span class=\"n\">expense</span>  <span class=\"c1\"># Sum expenses for Jul–Dec\n</span></code></pre>\n\n</div>\n\n\n\n<p>I appreciated how unpretentious this is, no fancy reductions, just a straightforward accumulation. It mirrors how you'd tally receipts in a spreadsheet: go through each item, decide where it fits, and add it up. Running it on the sample data (like $2950.75 for January) quickly builds totals of around $17,544 for the first semester and $18,775 for the second. It's a quiet reminder that loops are the backbone of processing sequences, especially when the logic is this linear.</p>\n\n<h3>\n  \n  \n  2. Enumerate: Getting Index and Value Without the Hassle\n</h3>\n\n<p>One of the nicer touches here is using <code>enumerate()</code> inside the loop, which pairs each expense with its zero-based index. This avoids the old-school counter variable (<code>i = 0; i += 1</code>), making the code cleaner and less error-prone:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">expense</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">expenses</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"o\">&lt;</span> <span class=\"mi\">6</span><span class=\"p\">:</span>\n        <span class=\"c1\"># ...\n</span></code></pre>\n\n</div>\n\n\n\n<p>What clicked for me was how <code>enumerate</code> turns a simple list traversal into something more intentional. Without it, I'd have to track the index manually, which invites off-by-one bugs. Here, it naturally splits the year at index 6, handling the semester divide without extra math. It's one of those Python idioms that feels small but saves mental overhead, I've already caught myself reaching for it in unrelated scripts this week.</p>\n\n<h3>\n  \n  \n  3. Tuple Unpacking: Returning and Using Data Neatly\n</h3>\n\n<p>Once the averages are calculated (<code>total / 6</code>), the function packs them into a tuple for return:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">first_avg</span> <span class=\"o\">=</span> <span class=\"n\">first_semester_total</span> <span class=\"o\">/</span> <span class=\"mi\">6</span>\n<span class=\"n\">second_avg</span> <span class=\"o\">=</span> <span class=\"n\">second_semester_total</span> <span class=\"o\">/</span> <span class=\"mi\">6</span>\n<span class=\"k\">return</span> <span class=\"n\">first_avg</span><span class=\"p\">,</span> <span class=\"n\">second_avg</span>  <span class=\"c1\"># Return averages as a tuple\n</span></code></pre>\n\n</div>\n\n\n\n<p>Then, unpacking makes calling it a breeze:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">first_avg</span><span class=\"p\">,</span> <span class=\"n\">second_avg</span> <span class=\"o\">=</span> <span class=\"nf\">calculate_semester_averages</span><span class=\"p\">(</span><span class=\"n\">monthly_spending</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Average expenses for the first semester:  $</span><span class=\"si\">{</span><span class=\"n\">first_avg</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Average expenses for the second semester: $</span><span class=\"si\">{</span><span class=\"n\">second_avg</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This outputs something like <code>$2924.07</code> and <code>$3129.27</code>, formatted to two decimals for that clean financial look. I like how unpacking keeps the main script readable, it's symmetric and explicit, assigning both values in one line. It also hints at scalability; if I added a third metric (say, yearly total), the tuple could grow without rewriting the caller. Small win, but it makes the whole thing feel polished.</p>\n\n\n\n\n<h2>\n  \n  \n  🎯 Summary and Reflections\n</h2>\n\n<p>This challenge highlighted how Python turns mundane data tasks into elegant flows. It pushed me to consider:</p>\n\n<ul>\n<li>\n<strong>Iteration efficiency</strong>: Loops for summing lists, with conditions keeping things targeted.</li>\n<li>\n<strong>Built-in helpers</strong>: <code>enumerate()</code> for free indexing, reducing boilerplate.</li>\n<li>\n<strong>Data flow</strong>: Tuples and unpacking for concise returns that play nice with the rest of your code.</li>\n</ul>\n\n<p>The unexpected part? How therapeutic it felt to simulate budgeting. Staring at those expense numbers made me audit my own coffee habit, coding as accidental self-reflection. For extensions, I could slice the list directly (<code>sum(expenses[:6]) / 6</code>) for brevity, or pull in <code>pandas</code> to handle real CSV budgets with trends over years.</p>\n\n\n\n\n<h2>\n  \n  \n  🚀 Next Steps and Resources\n</h2>\n\n<p>Day 15 grounded me in list handling and practical math, prepping for data-heavy challenges down the line. If you're in the #80DaysOfChallenges groove, what tweaks did you make to this one? Any loop hacks or unpacking tips? Let's hear it!</p>\n\n<ul>\n<li>\n<strong>Source Code for Challenge #15</strong>: <a href=\"https://github.com/Sherouz/80-days-of-challenges/blob/main/scripts/semester_expenses.py\" rel=\"noopener noreferrer\">scripts/semester_expenses.py</a>\n</li>\n<li>\n<strong>Main Repository</strong>: <a href=\"https://github.com/Sherouz/80-days-of-challenges\" rel=\"noopener noreferrer\">80-days-of-challenges</a>\n</li>\n<li>\n<strong>Daily Updates</strong>: <a href=\"https://x.com/Shahrouzlogs\" rel=\"noopener noreferrer\">Twitter/X (@Shahrouzlogs)</a>\n</li>\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"My First Experience with Supabase: Beginner-Friendly and Fun","url":"https://dev.to/sareena_rahim/my-first-experience-with-supabase-beginner-friendly-and-fun-1889","date":1761467544,"author":"Sareena Rahim","guid":315268,"unread":true,"content":"<p>Ever since I started learning Python, I wanted to build something real and useful, not just follow tutorials. After practicing with small exercises and mini projects, I finally decided to take on my first desktop app: a simple expense tracker.</p>\n\n<p>This project was exciting, challenging, and full of learning moments.<br>\none of the most important lessons came from using Supabase, a cloud backend that made the impossible feel easy.</p>\n\n<p><strong>What is Supabase?</strong></p>\n\n<p>Supabase is basically a ready-to-use backend in the cloud. Think of it as a combination of:</p>\n\n<ul>\n<li><p>A database (PostgreSQL)</p></li>\n<li><p>Authentication for multiple users</p></li>\n<li><p>Tools to access your data easily from code</p></li>\n</ul>\n\n<p>And the best part? It’s <strong>beginner-friendly</strong>. You don’t need to install or configure a database on your computer. You can literally sign up, create a project, and start storing data in minutes.</p>\n\n<p><strong>Why I Chose Supabase</strong></p>\n\n<p>When I was building my expense tracker, I had a few goals:</p>\n\n<ul>\n<li><p>Store user expenses securely</p></li>\n<li><p>Allow multiple users to log in and manage their own data</p></li>\n<li><p>Keep the data in the cloud so it’s accessible anywhere</p></li>\n</ul>\n\n<p><strong>My First Steps with Supabase</strong></p>\n\n<p>Signing up and creating a project was simple. I remember the first time I saw my empty database table.I felt both nervous and excited.</p>\n\n<p>I created a table for expenses with just a few columns: amount, category, note, date, and a reference to the user. Suddenly, I had a real database in the cloud that my Python app could talk to.</p>\n\n<p><strong>What I Loved About Supabase</strong></p>\n\n<p>Using Supabase felt surprisingly simple and approachable. Even though I was a bit intimidated at first—questions like:</p>\n\n<ul>\n<li><p>“How do I manage multiple users?”</p></li>\n<li><p>“How do I keep my data secure?”</p></li>\n</ul>\n\n<p>ran through my mind, it turned out to be much easier than I expected.</p>\n\n<p><strong>What I Learned</strong></p>\n\n<ul>\n<li><p>Cloud databases like PostgreSQL in Supabase make multi-user apps easy</p></li>\n<li><p>Hands-on projects teach more than tutorials ever will</p></li>\n<li><p>Small, simple apps are perfect for learning new tools and gaining confidence</p></li>\n</ul>\n\n<p><strong>Final Thoughts</strong></p>\n\n<p>Supabase gave me the confidence to actually build something real. Even as a beginner, I could store data securely, manage users, and interact with a cloud database directly from Python.</p>\n\n<p>It’s amazing to see your app come to life with a real backend in the cloud, and it’s the perfect starting point for anyone wanting to go beyond local databases.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Gilded Rose Kata: Composition Over Inheritance","url":"https://dev.to/the-software-s-journey/the-gilded-rose-kata-composition-over-inheritance-537p","date":1761466934,"author":"Willem van Heemstra","guid":315267,"unread":true,"content":"<p>The <a href=\"https://github.com/emilybache/GildedRose-Refactoring-Kata\" rel=\"noopener noreferrer\">Gilded Rose refactoring kata</a> is a classic coding exercise that challenges developers to refactor legacy code while adding new functionality. Most solutions reach for inheritance as the primary design pattern, but I want to show you a different approach: <strong>composition over inheritance</strong>. </p>\n\n<p>In this article, I’ll walk you through my solution that leverages composition and the Strategy pattern to create a more flexible and maintainable design. By the end, you’ll see why composition often leads to better software architecture.</p>\n\n<p>Credit to <a href=\"https://github.com/emilybache?tab=repositories&amp;q=kata&amp;type=&amp;language=&amp;sort=\" rel=\"noopener noreferrer\">Emily Bache’s GitHub repository</a> for the excellent kata resources.</p>\n\n<h2>\n  \n  \n  The Problem\n</h2>\n\n<p>Here’s the legacy code we need to refactor:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">GildedRose</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">items</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update_quality</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"sh\">\"</span><span class=\"s\">Aged Brie</span><span class=\"sh\">\"</span> <span class=\"ow\">and</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"sh\">\"</span><span class=\"s\">Backstage passes to a TAFKAL80ETC concert</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"sh\">\"</span><span class=\"s\">Sulfuras, Hand of Ragnaros</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n                        <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">&lt;</span> <span class=\"mi\">50</span><span class=\"p\">:</span>\n                    <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n                    <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">Backstage passes to a TAFKAL80ETC concert</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">sell_in</span> <span class=\"o\">&lt;</span> <span class=\"mi\">11</span><span class=\"p\">:</span>\n                            <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">&lt;</span> <span class=\"mi\">50</span><span class=\"p\">:</span>\n                                <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n                        <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">sell_in</span> <span class=\"o\">&lt;</span> <span class=\"mi\">6</span><span class=\"p\">:</span>\n                            <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">&lt;</span> <span class=\"mi\">50</span><span class=\"p\">:</span>\n                                <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n            <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"sh\">\"</span><span class=\"s\">Sulfuras, Hand of Ragnaros</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n                <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">sell_in</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">sell_in</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n            <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">sell_in</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"sh\">\"</span><span class=\"s\">Aged Brie</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"sh\">\"</span><span class=\"s\">Backstage passes to a TAFKAL80ETC concert</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                            <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"sh\">\"</span><span class=\"s\">Sulfuras, Hand of Ragnaros</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n                                <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">-</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">&lt;</span> <span class=\"mi\">50</span><span class=\"p\">:</span>\n                        <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The task is to:</p>\n\n<ul>\n<li>Refactor this nested conditional nightmare</li>\n<li>Add support for “Conjured” items that degrade twice as fast</li>\n<li>Cannot modify the <code>Item</code> class</li>\n<li>Cannot modify the <code>items</code> property</li>\n</ul>\n\n<h2>\n  \n  \n  Why Composition Over Inheritance?\n</h2>\n\n<p>Many developers instinctively create subclasses like <code>NormalItem</code>, <code>AgedItem</code>, <code>LegendaryItem</code>, etc. While this works, it has several drawbacks:</p>\n\n<h3>\n  \n  \n  Problems with Inheritance:\n</h3>\n\n<ol>\n<li>\n<strong>Tight coupling</strong>: Subclasses are bound to their parent implementation</li>\n<li>\n<strong>Inflexibility</strong>: Hard to change behavior at runtime</li>\n<li>\n<strong>Fragile base class problem</strong>: Changes to the parent affect all children</li>\n<li>\n<strong>Requirement violation</strong>: The kata says we can’t modify <code>Item</code>, but creating subclasses still requires consumers to know which class to instantiate</li>\n<li>\n<strong>Limited reusability</strong>: Can’t easily combine behaviors</li>\n</ol>\n\n<h3>\n  \n  \n  Benefits of Composition:\n</h3>\n\n<ol>\n<li>\n<strong>Loose coupling</strong>: Components are independent and interchangeable</li>\n<li>\n<strong>Runtime flexibility</strong>: Can swap strategies on the fly</li>\n<li>\n<strong>Better testability</strong>: Each strategy can be tested in isolation</li>\n<li>\n<strong>Follows SOLID principles</strong>: Especially Open/Closed and Single Responsibility</li>\n<li>\n<strong>Easier to extend</strong>: Adding new item types doesn’t require inheritance chains</li>\n</ol>\n\n<h2>\n  \n  \n  The Composition Solution\n</h2>\n\n<p>Let’s build our solution using the Strategy pattern. Each item type gets its own update strategy.</p>\n\n<h3>\n  \n  \n  Step 1: Define the Strategy Interface\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">abc</span> <span class=\"kn\">import</span> <span class=\"n\">ABC</span><span class=\"p\">,</span> <span class=\"n\">abstractmethod</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UpdateStrategy</span><span class=\"p\">(</span><span class=\"n\">ABC</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Abstract strategy for updating item quality.</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Update the quality and sell_in for an item.</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_decrease_quality</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Helper to decrease quality with lower bound.</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">=</span> <span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">-</span> <span class=\"n\">amount</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_increase_quality</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Helper to increase quality with upper bound.</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">=</span> <span class=\"nf\">min</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">+</span> <span class=\"n\">amount</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_decrease_sell_in</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Helper to decrease sell_in.</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">sell_in</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Step 2: Implement Concrete Strategies\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">NormalItemStrategy</span><span class=\"p\">(</span><span class=\"n\">UpdateStrategy</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Strategy for normal items that degrade in quality.</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Normal items degrade by 1 before sell date\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_decrease_quality</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_decrease_sell_in</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># After sell date, degrade twice as fast\n</span>        <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">sell_in</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_decrease_quality</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AgedItemStrategy</span><span class=\"p\">(</span><span class=\"n\">UpdateStrategy</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Strategy for items that improve with age (e.g., Aged Brie).</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Aged items increase by 1 before sell date\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_increase_quality</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_decrease_sell_in</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># After sell date, increase twice as fast\n</span>        <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">sell_in</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_increase_quality</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">LegendaryItemStrategy</span><span class=\"p\">(</span><span class=\"n\">UpdateStrategy</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Strategy for legendary items that never degrade or expire.</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Legendary items never change\n</span>        <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BackstagePassStrategy</span><span class=\"p\">(</span><span class=\"n\">UpdateStrategy</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Strategy for backstage passes with complex quality rules.</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Base increase\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_increase_quality</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Additional increases based on sell_in\n</span>        <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">sell_in</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_increase_quality</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">sell_in</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">5</span><span class=\"p\">:</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_increase_quality</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_decrease_sell_in</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># After concert, passes are worthless\n</span>        <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">sell_in</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ConjuredItemStrategy</span><span class=\"p\">(</span><span class=\"n\">UpdateStrategy</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Strategy for conjured items that degrade twice as fast.</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Conjured items degrade by 2 before sell date\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_decrease_quality</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_decrease_sell_in</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># After sell date, degrade twice as fast (4x total)\n</span>        <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">sell_in</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_decrease_quality</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Step 3: Create a Strategy Factory\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">StrategyFactory</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Factory to create appropriate update strategies based on item name.</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"c1\"># Strategy mapping\n</span>    <span class=\"n\">STRATEGIES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">Aged Brie</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">AgedItemStrategy</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">Sulfuras, Hand of Ragnaros</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">LegendaryItemStrategy</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">Backstage passes to a TAFKAL80ETC concert</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">BackstagePassStrategy</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_strategy</span><span class=\"p\">(</span><span class=\"n\">cls</span><span class=\"p\">,</span> <span class=\"n\">item_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">UpdateStrategy</span><span class=\"p\">:</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">\n        Get the appropriate strategy for an item.\n\n        Returns the specific strategy if item name matches,\n        ConjuredItemStrategy if name starts with </span><span class=\"sh\">\"</span><span class=\"s\">Conjured</span><span class=\"sh\">\"</span><span class=\"s\">,\n        otherwise NormalItemStrategy.\n        </span><span class=\"sh\">\"\"\"</span>\n        <span class=\"c1\"># Check for exact matches\n</span>        <span class=\"k\">if</span> <span class=\"n\">item_name</span> <span class=\"ow\">in</span> <span class=\"n\">cls</span><span class=\"p\">.</span><span class=\"n\">STRATEGIES</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">cls</span><span class=\"p\">.</span><span class=\"n\">STRATEGIES</span><span class=\"p\">[</span><span class=\"n\">item_name</span><span class=\"p\">]()</span>\n\n        <span class=\"c1\"># Check for conjured items\n</span>        <span class=\"k\">if</span> <span class=\"n\">item_name</span><span class=\"p\">.</span><span class=\"nf\">startswith</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Conjured</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"nc\">ConjuredItemStrategy</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Default to normal item\n</span>        <span class=\"k\">return</span> <span class=\"nc\">NormalItemStrategy</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Step 4: Refactor the GildedRose Class\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">GildedRose</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Inn that manages item quality updates.</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">items</span>\n        <span class=\"c1\"># Assign strategies to items\n</span>        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_strategies</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">StrategyFactory</span><span class=\"p\">.</span><span class=\"nf\">get_strategy</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">items</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update_quality</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"sh\">\"\"\"</span><span class=\"s\">Update quality for all items using their strategies.</span><span class=\"sh\">\"\"\"</span>\n        <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">:</span>\n            <span class=\"n\">strategy</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_strategies</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">]</span>\n            <span class=\"n\">strategy</span><span class=\"p\">.</span><span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>That’s it! Look how clean and simple the <code>GildedRose</code> class has become.</p>\n\n<h2>\n  \n  \n  The Advantages in Action\n</h2>\n\n<h3>\n  \n  \n  1. Easy to Test\n</h3>\n\n<p>Each strategy can be unit tested independently:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">test_normal_item_degrades</span><span class=\"p\">():</span>\n    <span class=\"n\">strategy</span> <span class=\"o\">=</span> <span class=\"nc\">NormalItemStrategy</span><span class=\"p\">()</span>\n    <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"nc\">Item</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Normal Item</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n\n    <span class=\"n\">strategy</span><span class=\"p\">.</span><span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">==</span> <span class=\"mi\">19</span>\n    <span class=\"k\">assert</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">sell_in</span> <span class=\"o\">==</span> <span class=\"mi\">9</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_conjured_item_degrades_twice_as_fast</span><span class=\"p\">():</span>\n    <span class=\"n\">strategy</span> <span class=\"o\">=</span> <span class=\"nc\">ConjuredItemStrategy</span><span class=\"p\">()</span>\n    <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"nc\">Item</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Conjured Item</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n\n    <span class=\"n\">strategy</span><span class=\"p\">.</span><span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">==</span> <span class=\"mi\">18</span>\n    <span class=\"k\">assert</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">sell_in</span> <span class=\"o\">==</span> <span class=\"mi\">9</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  2. Easy to Extend\n</h3>\n\n<p>Want to add a new item type? Just create a new strategy:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">VolatileItemStrategy</span><span class=\"p\">(</span><span class=\"n\">UpdateStrategy</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Items that have random quality changes.</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"n\">random</span>\n        <span class=\"n\">change</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">randint</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">change</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_increase_quality</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">change</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_decrease_quality</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nf\">abs</span><span class=\"p\">(</span><span class=\"n\">change</span><span class=\"p\">))</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_decrease_sell_in</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Then register it in the factory:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">STRATEGIES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># ... existing strategies ...\n</span>    <span class=\"sh\">\"</span><span class=\"s\">Volatile Essence</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">VolatileItemStrategy</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  3. Runtime Flexibility\n</h3>\n\n<p>With composition, you could even change an item’s strategy at runtime if needed:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Switch an item to a different strategy\n</span><span class=\"n\">gilded_rose</span><span class=\"p\">.</span><span class=\"n\">_strategies</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nc\">AgedItemStrategy</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p>This would be impossible with inheritance.</p>\n\n<h3>\n  \n  \n  4. Better Separation of Concerns\n</h3>\n\n<p>Each strategy has a single responsibility: updating one type of item. The <code>GildedRose</code> class has a single responsibility: orchestrating updates. The factory has a single responsibility: creating strategies.</p>\n\n<h2>\n  \n  \n  Comparing Approaches\n</h2>\n\n<p>Let’s put inheritance and composition side by side:</p>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Aspect</th>\n<th>Inheritance</th>\n<th>Composition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Adding new types</td>\n<td>Create new subclass</td>\n<td>Create new strategy</td>\n</tr>\n<tr>\n<td>Changing behavior</td>\n<td>Override methods</td>\n<td>Swap strategy</td>\n</tr>\n<tr>\n<td>Testing</td>\n<td>Must test full class hierarchy</td>\n<td>Test strategies independently</td>\n</tr>\n<tr>\n<td>Flexibility</td>\n<td>Fixed at compile time</td>\n<td>Can change at runtime</td>\n</tr>\n<tr>\n<td>Code reuse</td>\n<td>Through inheritance chain</td>\n<td>Through strategy composition</td>\n</tr>\n<tr>\n<td>Coupling</td>\n<td>Tight (parent-child)</td>\n<td>Loose (interface-based)</td>\n</tr>\n<tr>\n<td>Complexity</td>\n<td>Grows with hierarchy depth</td>\n<td>Stays flat</td>\n</tr>\n</tbody>\n</table></div>\n\n<h2>\n  \n  \n  When to Use Each Pattern\n</h2>\n\n<p><strong>Use Inheritance When:</strong></p>\n\n<ul>\n<li>You have a clear “is-a” relationship</li>\n<li>The hierarchy is shallow and unlikely to change</li>\n<li>Subclasses genuinely need to override behavior</li>\n<li>You’re modeling domain concepts</li>\n</ul>\n\n<p><strong>Use Composition When:</strong></p>\n\n<ul>\n<li>You need runtime flexibility</li>\n<li>Behaviors might be combined or swapped</li>\n<li>You want to avoid fragile base class problems</li>\n<li>You have many orthogonal variations</li>\n<li>You’re implementing algorithms or strategies</li>\n</ul>\n\n<p>For the Gilded Rose kata, composition is the superior choice because:</p>\n\n<ol>\n<li>Items don’t have an “is-a” relationship with update logic</li>\n<li>We need to handle many item types without modifying core classes</li>\n<li>The update logic is orthogonal to the item’s identity</li>\n<li>We might want to add complex item combinations later</li>\n</ol>\n\n<h2>\n  \n  \n  The Complete Solution\n</h2>\n\n<p>Here’s the full refactored solution:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">abc</span> <span class=\"kn\">import</span> <span class=\"n\">ABC</span><span class=\"p\">,</span> <span class=\"n\">abstractmethod</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UpdateStrategy</span><span class=\"p\">(</span><span class=\"n\">ABC</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Abstract strategy for updating item quality.</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_decrease_quality</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">=</span> <span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">-</span> <span class=\"n\">amount</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_increase_quality</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">=</span> <span class=\"nf\">min</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">+</span> <span class=\"n\">amount</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_decrease_sell_in</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">sell_in</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">NormalItemStrategy</span><span class=\"p\">(</span><span class=\"n\">UpdateStrategy</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_decrease_quality</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_decrease_sell_in</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">sell_in</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_decrease_quality</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AgedItemStrategy</span><span class=\"p\">(</span><span class=\"n\">UpdateStrategy</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_increase_quality</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_decrease_sell_in</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">sell_in</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_increase_quality</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">LegendaryItemStrategy</span><span class=\"p\">(</span><span class=\"n\">UpdateStrategy</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BackstagePassStrategy</span><span class=\"p\">(</span><span class=\"n\">UpdateStrategy</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_increase_quality</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">sell_in</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_increase_quality</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">sell_in</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">5</span><span class=\"p\">:</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_increase_quality</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_decrease_sell_in</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">sell_in</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">quality</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ConjuredItemStrategy</span><span class=\"p\">(</span><span class=\"n\">UpdateStrategy</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_decrease_quality</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_decrease_sell_in</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">sell_in</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">_decrease_quality</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">StrategyFactory</span><span class=\"p\">:</span>\n    <span class=\"n\">STRATEGIES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">Aged Brie</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">AgedItemStrategy</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">Sulfuras, Hand of Ragnaros</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">LegendaryItemStrategy</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">Backstage passes to a TAFKAL80ETC concert</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">BackstagePassStrategy</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_strategy</span><span class=\"p\">(</span><span class=\"n\">cls</span><span class=\"p\">,</span> <span class=\"n\">item_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">UpdateStrategy</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">item_name</span> <span class=\"ow\">in</span> <span class=\"n\">cls</span><span class=\"p\">.</span><span class=\"n\">STRATEGIES</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">cls</span><span class=\"p\">.</span><span class=\"n\">STRATEGIES</span><span class=\"p\">[</span><span class=\"n\">item_name</span><span class=\"p\">]()</span>\n        <span class=\"k\">if</span> <span class=\"n\">item_name</span><span class=\"p\">.</span><span class=\"nf\">startswith</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Conjured</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"nc\">ConjuredItemStrategy</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"nc\">NormalItemStrategy</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">GildedRose</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">items</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_strategies</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">StrategyFactory</span><span class=\"p\">.</span><span class=\"nf\">get_strategy</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">items</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update_quality</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">:</span>\n            <span class=\"n\">strategy</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">_strategies</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">]</span>\n            <span class=\"n\">strategy</span><span class=\"p\">.</span><span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>The composition-based approach to the Gilded Rose kata demonstrates several important software engineering principles:</p>\n\n<ol>\n<li>\n<strong>Composition over inheritance</strong> leads to more flexible code</li>\n<li>\n<strong>Strategy pattern</strong> separates algorithms from the objects that use them</li>\n<li>\n<strong>Single Responsibility Principle</strong> keeps classes focused</li>\n<li>\n<strong>Open/Closed Principle</strong> makes the code open for extension, closed for modification</li>\n</ol>\n\n<p>While inheritance has its place, composition often provides a more maintainable and extensible solution, especially for behavior-heavy problems like this kata.</p>\n\n<p>The next time you’re tempted to create a deep inheritance hierarchy, ask yourself: “Could composition work better here?” You might be surprised at how often the answer is yes.</p>\n\n<h2>\n  \n  \n  Resources\n</h2>\n\n<ul>\n<li><a href=\"https://github.com/emilybache/GildedRose-Refactoring-Kata\" rel=\"noopener noreferrer\">Gilded Rose Kata on GitHub</a></li>\n<li><a href=\"https://refactoring.guru/design-patterns/strategy\" rel=\"noopener noreferrer\">Strategy Pattern</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Composition_over_inheritance\" rel=\"noopener noreferrer\">Composition vs Inheritance</a></li>\n</ul>\n\n<p>Happy coding, and remember: favor composition over inheritance!</p>\n\n<p><em>What's your take on composition vs inheritance? Have you solved the Gilded Rose kata differently? I'd love to hear your approach in the comments!</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: How to Write Production Python Code","url":"https://dev.to/vibe_youtube/tech-with-tim-how-to-write-production-python-code-193f","date":1761466074,"author":"Vibe YouTube","guid":315266,"unread":true,"content":"<h2>\n  \n  \n  How to Write Production Python Code\n</h2>\n\n<p>Tim walks you through eight core principles that separate junior developers from seniors—think clean architecture, robust testing, performance tuning and more—all backed by real-world examples so you can slot them right into your own projects.</p>\n\n<p>He also highlights Boot.dev (snag 25% off with code TECHWITHTIM) and his DevLaunch mentorship program for hands-on guidance, plus a newsletter link with full code snippets and a timestamped video breakdown.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=qU3Rc6_B9es\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Build Your First Movie Recommendation Engine in Python","url":"https://dev.to/saint2706/build-your-first-movie-recommendation-engine-in-python-5585","date":1761459352,"author":"Saint","guid":315244,"unread":true,"content":"<p>Ever wonder how Netflix or Spotify seems to know exactly what you want to watch or listen to next? It's not magic, it's the power of recommendation systems. In this post, we'll pull back the curtain and build a simple movie recommender from scratch using Python.</p>\n\n<p>We'll use a popular technique called Collaborative Filtering. The idea is simple: \"Show me what people like me also like.\" Instead of analysing movie genres or actors, we'll just look at user ratings to find \"taste twins\" and recommend movies based on what they enjoyed.</p>\n\n<p><strong>Step 1: Get the Data</strong></p>\n\n<p>We'll use the classic MovieLens 100k dataset, which contains 100,000 ratings from 943 users on 1,682 movies. First, let's load the data into pandas DataFrames. We need two files: <code>u.data</code> for the ratings and <code>u.item</code> for the movie titles.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">pandas</span> <span class=\"k\">as</span> <span class=\"n\">pd</span>\n\n<span class=\"c1\"># Define column names for the data\n</span><span class=\"n\">r_cols</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">user_id</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">movie_id</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">rating</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">unix_timestamp</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n<span class=\"n\">m_cols</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">movie_id</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">title</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">release_date</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">video_release_date</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">imdb_url</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Load the data into pandas DataFrames\n</span><span class=\"n\">ratings</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">read_csv</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ml-100k/u.data</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"se\">\\t</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"n\">r_cols</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">latin-1</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n<span class=\"n\">movies</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">read_csv</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">ml-100k/u.item</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">|</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"n\">m_cols</span><span class=\"p\">,</span> <span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"nf\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">latin-1</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Merge the two DataFrames into one\n</span><span class=\"n\">movie_data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"n\">movies</span><span class=\"p\">,</span> <span class=\"n\">ratings</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Step 2: Create the User-Item Matrix</strong></p>\n\n<p>To find users with similar tastes, we need to restructure our data. We'll create a user-item matrix, where each row represents a user, each column represents a movie, and the cells contain the ratings. Most of this matrix will be empty (NaN), because most users haven't rated most movies. This is known as a sparse matrix.  </p>\n\n<p>Pandas <code>pivot_table</code> function is perfect for this job.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Create the user-item matrix\n</span><span class=\"n\">user_item_matrix</span> <span class=\"o\">=</span> <span class=\"n\">movie_data</span><span class=\"p\">.</span><span class=\"nf\">pivot_table</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">user_id</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">title</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">rating</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Let's see what it looks like\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">user_item_matrix</span><span class=\"p\">.</span><span class=\"nf\">head</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Step 3: Find Similar Users</strong></p>\n\n<p>Now for the core logic: measuring similarity. We'll use the Pearson correlation coefficient. This metric measures the linear relationship between two sets of data, with a score from -1 (opposite tastes) to +1 (identical tastes).  </p>\n\n<p>A significant advantage of Pearson correlation is that it automatically accounts for user rating bias. It understands that one user's \"4 stars\" might be another's \"3 stars\" by comparing how ratings deviate from each user's personal average.  </p>\n\n<p>The <code>corrwith()</code> method in pandas makes this calculation easy. We'll pick a target user and find others who have similar rating patterns.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Choose a target user (e.g., user_id 25)\n</span><span class=\"n\">target_user_ratings</span> <span class=\"o\">=</span> <span class=\"n\">user_item_matrix</span><span class=\"p\">.</span><span class=\"n\">loc</span><span class=\"p\">.[</span><span class=\"mi\">17</span><span class=\"p\">]</span><span class=\"nf\">dropna</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Find users similar to our target user\n</span><span class=\"n\">similar_users</span> <span class=\"o\">=</span> <span class=\"n\">user_item_matrix</span><span class=\"p\">.</span><span class=\"nf\">corrwith</span><span class=\"p\">(</span><span class=\"n\">target_user_ratings</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a DataFrame of the results and clean it up\n</span><span class=\"n\">similarity_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">similar_users</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">similarity</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"n\">similarity_df</span> <span class=\"o\">=</span> <span class=\"n\">similarity_df</span><span class=\"p\">.</span><span class=\"nf\">dropna</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Display the top 10 most similar users\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">similarity_df</span><span class=\"p\">.</span><span class=\"nf\">sort_values</span><span class=\"p\">(</span><span class=\"n\">by</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">similarity</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">).</span><span class=\"nf\">head</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Step 4: Generate Recommendations</strong></p>\n\n<p>We have our \"taste twins,\" so what's next?</p>\n\n<ol>\n<li>Form a \"Neighbourhood\": Select the top k most similar users (e.g., top 50).</li>\n<li>Find Candidate Movies: Gather all the movies rated by users in the neighbourhood, but exclude movies our target user has already seen.</li>\n<li>Score the Candidates: Calculate a predicted score for each candidate's movie. We'll use a weighted average: a rating from a highly similar user carries more weight than a rating from a less similar one.\n</li>\n<li>Rank and Recommend: Sort the movies by their predicted score and return the top n recommendations.</li>\n</ol>\n\n<p><strong>Putting It All Together</strong></p>\n\n<p>Let's wrap this logic into a single function.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">generate_recommendations</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">user_item_matrix</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Generates movie recommendations for a user.</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"c1\"># 1. Calculate user similarity\n</span>    <span class=\"n\">target_user_ratings</span> <span class=\"o\">=</span> <span class=\"n\">user_item_matrix</span><span class=\"p\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">user_id</span><span class=\"p\">].</span><span class=\"nf\">dropna</span><span class=\"p\">()</span>\n    <span class=\"n\">similar_users</span> <span class=\"o\">=</span> <span class=\"n\">user_item_matrix</span><span class=\"p\">.</span><span class=\"nf\">corrwith</span><span class=\"p\">(</span><span class=\"n\">target_user_ratings</span><span class=\"p\">)</span>\n    <span class=\"n\">similarity_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nc\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">similar_users</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">similarity</span><span class=\"sh\">'</span><span class=\"p\">]).</span><span class=\"nf\">dropna</span><span class=\"p\">().</span><span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 2. Find the neighborhood (top k similar users)\n</span>    <span class=\"n\">neighborhood</span> <span class=\"o\">=</span> <span class=\"n\">similarity_df</span><span class=\"p\">[</span><span class=\"n\">similarity_df</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">similarity</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nf\">sort_values</span><span class=\"p\">(</span><span class=\"n\">by</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">similarity</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">).</span><span class=\"nf\">head</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 3. Identify candidate movies\n</span>    <span class=\"n\">watched_movies</span> <span class=\"o\">=</span> <span class=\"n\">user_item_matrix</span><span class=\"p\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">user_id</span><span class=\"p\">].</span><span class=\"nf\">dropna</span><span class=\"p\">().</span><span class=\"n\">index</span>\n\n    <span class=\"n\">candidate_movies</span> <span class=\"o\">=</span> <span class=\"nf\">set</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">neighborhood</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">:</span>\n        <span class=\"n\">neighbor_watched</span> <span class=\"o\">=</span> <span class=\"n\">user_item_matrix</span><span class=\"p\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">user</span><span class=\"p\">].</span><span class=\"nf\">dropna</span><span class=\"p\">().</span><span class=\"n\">index</span>\n        <span class=\"n\">candidate_movies</span><span class=\"p\">.</span><span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">neighbor_watched</span><span class=\"p\">)</span>\n\n    <span class=\"n\">candidate_movies</span> <span class=\"o\">=</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">candidate_movies</span><span class=\"p\">.</span><span class=\"nf\">difference</span><span class=\"p\">(</span><span class=\"n\">watched_movies</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># 4. Calculate recommendation scores\n</span>    <span class=\"n\">recommendation_scores</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">movie</span> <span class=\"ow\">in</span> <span class=\"n\">candidate_movies</span><span class=\"p\">:</span>\n        <span class=\"n\">numerator</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">denominator</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"n\">neighborhood</span><span class=\"p\">.</span><span class=\"nf\">iterrows</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"nf\">isna</span><span class=\"p\">(</span><span class=\"n\">user_item_matrix</span><span class=\"p\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">movie</span><span class=\"p\">]):</span>\n                <span class=\"n\">rating</span> <span class=\"o\">=</span> <span class=\"n\">user_item_matrix</span><span class=\"p\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">movie</span><span class=\"p\">]</span>\n                <span class=\"n\">similarity</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">similarity</span><span class=\"sh\">'</span><span class=\"p\">]</span>\n                <span class=\"n\">numerator</span> <span class=\"o\">+=</span> <span class=\"n\">similarity</span> <span class=\"o\">*</span> <span class=\"n\">rating</span>\n                <span class=\"n\">denominator</span> <span class=\"o\">+=</span> <span class=\"nf\">abs</span><span class=\"p\">(</span><span class=\"n\">similarity</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">denominator</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">recommendation_scores</span><span class=\"p\">[</span><span class=\"n\">movie</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">numerator</span> <span class=\"o\">/</span> <span class=\"n\">denominator</span>\n\n    <span class=\"c1\"># 5. Rank and return top N recommendations\n</span>    <span class=\"n\">recommendations_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"p\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">.</span><span class=\"nf\">from_dict</span><span class=\"p\">(</span><span class=\"n\">recommendation_scores</span><span class=\"p\">,</span> <span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">index</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">predicted_score</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">recommendations_df</span><span class=\"p\">.</span><span class=\"nf\">sort_values</span><span class=\"p\">(</span><span class=\"n\">by</span><span class=\"o\">=</span><span class=\"sh\">'</span><span class=\"s\">predicted_score</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">).</span><span class=\"nf\">head</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Let's get recommendations for our target user!\n</span><span class=\"n\">recommendations</span> <span class=\"o\">=</span> <span class=\"nf\">generate_recommendations</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">user_item_matrix</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Top 10 recommendations for user 25:</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">recommendations</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>What's Next?</strong></p>\n\n<p>And there you have it, your very own recommendation engine! While this is a simple model, it serves as the foundation for many real-world systems. It has limitations, like the \"cold start\" problem (what do you recommend to a new user with no ratings?), but it's a fantastic starting point.  </p>\n\n<p>Try it out for yourself! Change the user_id, tweak the neighbourhood size (k), or apply this logic to a different dataset. Happy coding!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Django REST Framework Views Decoded: Choosing Between FBVs, APIView, Generics, and ViewSets","url":"https://dev.to/sizan_mahmud0_e7c3fd0cb68/django-rest-framework-views-decoded-choosing-between-fbvs-apiview-generics-and-viewsets-32i9","date":1761459173,"author":"sizan mahmud0","guid":315243,"unread":true,"content":"<h2>\n  \n  \n  Stop Copy-Pasting DRF Code: Here's How to Choose the Right View\n</h2>\n\n<p>You're building a Django REST API. You search \"DRF list view\" and find five different ways to do the same thing. Should you use a function-based view? APIView? GenericAPIView? ViewSets? The documentation doesn't help—it shows you <em>how</em> but not <em>when</em>.</p>\n\n<p>I've built APIs with all five approaches. Today, I'll show you exactly when to use each one, how they work under the hood, and which choice will save you the most time based on your project's needs.</p>\n\n<h2>\n  \n  \n  The Five Levels of DRF Views: A Progression\n</h2>\n\n<p>Think of DRF views as a ladder from maximum control to maximum convenience:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Function-Based Views (FBV)          ← Most control, most code\n    ↓\nAPIView                             ← OOP structure, manual logic\n    ↓\nGenericAPIView + Mixins             ← Reusable components\n    ↓\nConcrete Generic Views              ← Pre-built common patterns\n    ↓\nViewSets + Routers                  ← Least code, convention over configuration\n</code></pre>\n\n</div>\n\n\n\n<p>Each level trades some control for less code. Let's explore when each makes sense.</p>\n\n<h2>\n  \n  \n  Level 1: Function-Based Views (FBVs) - Full Control\n</h2>\n\n<p><strong>When to use:</strong></p>\n\n<ul>\n<li>Quick prototypes or simple endpoints</li>\n<li>Highly custom logic that doesn't fit DRF patterns</li>\n<li>One-off operations (password reset, webhook receivers)</li>\n<li>Learning DRF fundamentals</li>\n</ul>\n\n<p><strong>How they work:</strong></p>\n\n<p>FBVs are decorated Python functions that receive a Request object and return a Response:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">rest_framework.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">api_view</span>\n<span class=\"kn\">from</span> <span class=\"n\">rest_framework.response</span> <span class=\"kn\">import</span> <span class=\"n\">Response</span>\n<span class=\"kn\">from</span> <span class=\"n\">rest_framework</span> <span class=\"kn\">import</span> <span class=\"n\">status</span>\n<span class=\"kn\">from</span> <span class=\"n\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Product</span>\n<span class=\"kn\">from</span> <span class=\"n\">.serializers</span> <span class=\"kn\">import</span> <span class=\"n\">ProductSerializer</span>\n\n<span class=\"nd\">@api_view</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">GET</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">POST</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">product_list</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">GET</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n        <span class=\"n\">products</span> <span class=\"o\">=</span> <span class=\"n\">Product</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"nf\">all</span><span class=\"p\">()</span>\n        <span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"nc\">ProductSerializer</span><span class=\"p\">(</span><span class=\"n\">products</span><span class=\"p\">,</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nc\">Response</span><span class=\"p\">(</span><span class=\"n\">serializer</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n    <span class=\"k\">elif</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"sh\">'</span><span class=\"s\">POST</span><span class=\"sh\">'</span><span class=\"p\">:</span>\n        <span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"nc\">ProductSerializer</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">serializer</span><span class=\"p\">.</span><span class=\"nf\">is_valid</span><span class=\"p\">():</span>\n            <span class=\"n\">serializer</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"nc\">Response</span><span class=\"p\">(</span><span class=\"n\">serializer</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">status</span><span class=\"p\">.</span><span class=\"n\">HTTP_201_CREATED</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nc\">Response</span><span class=\"p\">(</span><span class=\"n\">serializer</span><span class=\"p\">.</span><span class=\"n\">errors</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">status</span><span class=\"p\">.</span><span class=\"n\">HTTP_400_BAD_REQUEST</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@api_view</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">GET</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">product_detail</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"n\">Product</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">Product</span><span class=\"p\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nc\">Response</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">status</span><span class=\"p\">.</span><span class=\"n\">HTTP_404_NOT_FOUND</span><span class=\"p\">)</span>\n\n    <span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"nc\">ProductSerializer</span><span class=\"p\">(</span><span class=\"n\">product</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nc\">Response</span><span class=\"p\">(</span><span class=\"n\">serializer</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Pros:</strong></p>\n\n<ul>\n<li>Simple and explicit—easy to understand</li>\n<li>No classes or inheritance confusion</li>\n<li>Perfect for learning</li>\n</ul>\n\n<p><strong>Cons:</strong></p>\n\n<ul>\n<li>Lots of boilerplate code</li>\n<li>Manual error handling</li>\n<li>No built-in pagination, filtering, or permissions</li>\n<li>Harder to reuse logic across endpoints</li>\n</ul>\n\n<p><strong>Use case:</strong> A custom webhook endpoint that processes payment confirmations with unique business logic.</p>\n\n<h2>\n  \n  \n  Level 2: APIView - Object-Oriented Structure\n</h2>\n\n<p><strong>When to use:</strong></p>\n\n<ul>\n<li>Need more structure than FBVs</li>\n<li>Custom endpoints with specific HTTP method logic</li>\n<li>Want class-based organization without DRF's assumptions</li>\n</ul>\n\n<p><strong>How they work:</strong></p>\n\n<p>APIView is a class-based view where each HTTP method maps to a class method:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">rest_framework.views</span> <span class=\"kn\">import</span> <span class=\"n\">APIView</span>\n<span class=\"kn\">from</span> <span class=\"n\">rest_framework.response</span> <span class=\"kn\">import</span> <span class=\"n\">Response</span>\n<span class=\"kn\">from</span> <span class=\"n\">rest_framework</span> <span class=\"kn\">import</span> <span class=\"n\">status</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ProductList</span><span class=\"p\">(</span><span class=\"n\">APIView</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"n\">products</span> <span class=\"o\">=</span> <span class=\"n\">Product</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"nf\">all</span><span class=\"p\">()</span>\n        <span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"nc\">ProductSerializer</span><span class=\"p\">(</span><span class=\"n\">products</span><span class=\"p\">,</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nc\">Response</span><span class=\"p\">(</span><span class=\"n\">serializer</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"nc\">ProductSerializer</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">serializer</span><span class=\"p\">.</span><span class=\"nf\">is_valid</span><span class=\"p\">():</span>\n            <span class=\"n\">serializer</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"nc\">Response</span><span class=\"p\">(</span><span class=\"n\">serializer</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">status</span><span class=\"p\">.</span><span class=\"n\">HTTP_201_CREATED</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nc\">Response</span><span class=\"p\">(</span><span class=\"n\">serializer</span><span class=\"p\">.</span><span class=\"n\">errors</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">status</span><span class=\"p\">.</span><span class=\"n\">HTTP_400_BAD_REQUEST</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ProductDetail</span><span class=\"p\">(</span><span class=\"n\">APIView</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_object</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">Product</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">Product</span><span class=\"p\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">Http404</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"p\">):</span>\n        <span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">get_object</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n        <span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"nc\">ProductSerializer</span><span class=\"p\">(</span><span class=\"n\">product</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nc\">Response</span><span class=\"p\">(</span><span class=\"n\">serializer</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">put</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"p\">):</span>\n        <span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">get_object</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n        <span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"nc\">ProductSerializer</span><span class=\"p\">(</span><span class=\"n\">product</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">serializer</span><span class=\"p\">.</span><span class=\"nf\">is_valid</span><span class=\"p\">():</span>\n            <span class=\"n\">serializer</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"nc\">Response</span><span class=\"p\">(</span><span class=\"n\">serializer</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nc\">Response</span><span class=\"p\">(</span><span class=\"n\">serializer</span><span class=\"p\">.</span><span class=\"n\">errors</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">status</span><span class=\"p\">.</span><span class=\"n\">HTTP_400_BAD_REQUEST</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"p\">):</span>\n        <span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">get_object</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n        <span class=\"n\">product</span><span class=\"p\">.</span><span class=\"nf\">delete</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"nc\">Response</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">status</span><span class=\"p\">.</span><span class=\"n\">HTTP_204_NO_CONTENT</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Pros:</strong></p>\n\n<ul>\n<li>Better organization than FBVs</li>\n<li>Can share logic via methods (<code>get_object</code>)</li>\n<li>Easier to add authentication/permissions</li>\n<li>Class-based inheritance for code reuse</li>\n</ul>\n\n<p><strong>Cons:</strong></p>\n\n<ul>\n<li>Still writing repetitive CRUD logic</li>\n<li>Manual pagination and filtering</li>\n<li>More code than necessary for standard patterns</li>\n</ul>\n\n<p><strong>Use case:</strong> A dashboard endpoint that aggregates data from multiple models with custom business logic.</p>\n\n<h2>\n  \n  \n  Level 3: GenericAPIView + Mixins - Component Assembly\n</h2>\n\n<p><strong>When to use:</strong></p>\n\n<ul>\n<li>Standard CRUD but need some customization</li>\n<li>Want to pick and choose features (only list + create, not delete)</li>\n<li>Learning how DRF's generics work internally</li>\n</ul>\n\n<p><strong>How they work:</strong></p>\n\n<p>GenericAPIView provides base functionality (queryset, serializer), while Mixins add specific actions:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">rest_framework</span> <span class=\"kn\">import</span> <span class=\"n\">generics</span><span class=\"p\">,</span> <span class=\"n\">mixins</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ProductList</span><span class=\"p\">(</span><span class=\"n\">mixins</span><span class=\"p\">.</span><span class=\"n\">ListModelMixin</span><span class=\"p\">,</span>\n                  <span class=\"n\">mixins</span><span class=\"p\">.</span><span class=\"n\">CreateModelMixin</span><span class=\"p\">,</span>\n                  <span class=\"n\">generics</span><span class=\"p\">.</span><span class=\"n\">GenericAPIView</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Product</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"nf\">all</span><span class=\"p\">()</span>\n    <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">ProductSerializer</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ProductDetail</span><span class=\"p\">(</span><span class=\"n\">mixins</span><span class=\"p\">.</span><span class=\"n\">RetrieveModelMixin</span><span class=\"p\">,</span>\n                    <span class=\"n\">mixins</span><span class=\"p\">.</span><span class=\"n\">UpdateModelMixin</span><span class=\"p\">,</span>\n                    <span class=\"n\">mixins</span><span class=\"p\">.</span><span class=\"n\">DestroyModelMixin</span><span class=\"p\">,</span>\n                    <span class=\"n\">generics</span><span class=\"p\">.</span><span class=\"n\">GenericAPIView</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Product</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"nf\">all</span><span class=\"p\">()</span>\n    <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">ProductSerializer</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">retrieve</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">put</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">destroy</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Available Mixins:</strong></p>\n\n<ul>\n<li>\n<code>ListModelMixin</code> - List queryset</li>\n<li>\n<code>CreateModelMixin</code> - Create instance</li>\n<li>\n<code>RetrieveModelMixin</code> - Get single instance</li>\n<li>\n<code>UpdateModelMixin</code> - Update instance</li>\n<li>\n<code>DestroyModelMixin</code> - Delete instance</li>\n</ul>\n\n<p><strong>Pros:</strong></p>\n\n<ul>\n<li>Pick exactly what HTTP methods you need</li>\n<li>Built-in pagination, filtering, authentication</li>\n<li>Less code than APIView</li>\n<li>Clear about what operations are supported</li>\n</ul>\n\n<p><strong>Cons:</strong></p>\n\n<ul>\n<li>Verbose—must map each method manually</li>\n<li>Why not just use Concrete Views?</li>\n</ul>\n\n<p><strong>Use case:</strong> Rarely used in practice—better to jump to Level 4. Useful for learning DRF internals.</p>\n\n<h2>\n  \n  \n  Level 4: Concrete Generic Views - The Sweet Spot\n</h2>\n\n<p><strong>When to use:</strong></p>\n\n<ul>\n<li>Standard CRUD operations (90% of API endpoints)</li>\n<li>Need quick development with minimal code</li>\n<li>Want built-in pagination, filtering, permissions</li>\n<li>Building RESTful APIs following conventions</li>\n</ul>\n\n<p><strong>How they work:</strong></p>\n\n<p>Concrete views combine GenericAPIView + Mixins into ready-to-use classes:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">rest_framework</span> <span class=\"kn\">import</span> <span class=\"n\">generics</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ProductList</span><span class=\"p\">(</span><span class=\"n\">generics</span><span class=\"p\">.</span><span class=\"n\">ListCreateAPIView</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Product</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"nf\">all</span><span class=\"p\">()</span>\n    <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">ProductSerializer</span>\n    <span class=\"c1\"># That's it! List + Create in 3 lines\n</span>\n<span class=\"k\">class</span> <span class=\"nc\">ProductDetail</span><span class=\"p\">(</span><span class=\"n\">generics</span><span class=\"p\">.</span><span class=\"n\">RetrieveUpdateDestroyAPIView</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Product</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"nf\">all</span><span class=\"p\">()</span>\n    <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">ProductSerializer</span>\n    <span class=\"c1\"># Retrieve + Update + Delete in 3 lines\n</span></code></pre>\n\n</div>\n\n\n\n<p><strong>Available Concrete Views:</strong></p>\n\n<ul>\n<li>\n<code>ListAPIView</code> - Read-only list</li>\n<li>\n<code>CreateAPIView</code> - Create only</li>\n<li>\n<code>RetrieveAPIView</code> - Read-only detail</li>\n<li>\n<code>UpdateAPIView</code> - Update only</li>\n<li>\n<code>DestroyAPIView</code> - Delete only</li>\n<li>\n<code>ListCreateAPIView</code> - List + Create</li>\n<li>\n<code>RetrieveUpdateAPIView</code> - Retrieve + Update</li>\n<li>\n<code>RetrieveDestroyAPIView</code> - Retrieve + Delete</li>\n<li>\n<code>RetrieveUpdateDestroyAPIView</code> - Full detail CRUD</li>\n</ul>\n\n<p><strong>Customization example:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">ProductList</span><span class=\"p\">(</span><span class=\"n\">generics</span><span class=\"p\">.</span><span class=\"n\">ListCreateAPIView</span><span class=\"p\">):</span>\n    <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">ProductSerializer</span>\n    <span class=\"n\">permission_classes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">IsAuthenticated</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_queryset</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Custom filtering logic\n</span>        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">user</span>\n        <span class=\"k\">return</span> <span class=\"n\">Product</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"nf\">filter</span><span class=\"p\">(</span><span class=\"n\">owner</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">is_active</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">perform_create</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">serializer</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Custom save logic\n</span>        <span class=\"n\">serializer</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">owner</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">user</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Pros:</strong></p>\n\n<ul>\n<li>Minimal code for standard patterns</li>\n<li>Built-in pagination, filtering, ordering</li>\n<li>Easy to customize via method overrides</li>\n<li>Clear, readable, maintainable</li>\n</ul>\n\n<p><strong>Cons:</strong></p>\n\n<ul>\n<li>Less flexible than APIView for unique endpoints</li>\n<li>URL routing still requires manual configuration</li>\n</ul>\n\n<p><strong>Use case:</strong> 90% of your API endpoints—user management, product listings, order history, blog posts.</p>\n\n<h2>\n  \n  \n  Level 5: ViewSets + Routers - Convention Over Configuration\n</h2>\n\n<p><strong>When to use:</strong></p>\n\n<ul>\n<li>Full CRUD for a resource</li>\n<li>Want automatic URL routing</li>\n<li>Building large APIs quickly</li>\n<li>Following RESTful conventions strictly</li>\n</ul>\n\n<p><strong>How they work:</strong></p>\n\n<p>ViewSets combine all CRUD operations in one class, and Routers generate URLs automatically:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">rest_framework</span> <span class=\"kn\">import</span> <span class=\"n\">viewsets</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ProductViewSet</span><span class=\"p\">(</span><span class=\"n\">viewsets</span><span class=\"p\">.</span><span class=\"n\">ModelViewSet</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Product</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"nf\">all</span><span class=\"p\">()</span>\n    <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">ProductSerializer</span>\n    <span class=\"n\">permission_classes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">IsAuthenticated</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">perform_create</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">serializer</span><span class=\"p\">):</span>\n        <span class=\"n\">serializer</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"n\">owner</span><span class=\"o\">=</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">user</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># urls.py\n</span><span class=\"kn\">from</span> <span class=\"n\">rest_framework.routers</span> <span class=\"kn\">import</span> <span class=\"n\">DefaultRouter</span>\n\n<span class=\"n\">router</span> <span class=\"o\">=</span> <span class=\"nc\">DefaultRouter</span><span class=\"p\">()</span>\n<span class=\"n\">router</span><span class=\"p\">.</span><span class=\"nf\">register</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"sh\">'</span><span class=\"s\">products</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"n\">ProductViewSet</span><span class=\"p\">)</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"nf\">path</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">api/</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"nf\">include</span><span class=\"p\">(</span><span class=\"n\">router</span><span class=\"p\">.</span><span class=\"n\">urls</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>This automatically generates:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>GET     /api/products/          → list()\nPOST    /api/products/          → create()\nGET     /api/products/{pk}/     → retrieve()\nPUT     /api/products/{pk}/     → update()\nPATCH   /api/products/{pk}/     → partial_update()\nDELETE  /api/products/{pk}/     → destroy()\n</code></pre>\n\n</div>\n\n\n\n<p><strong>Available ViewSets:</strong></p>\n\n<ul>\n<li>\n<code>ViewSet</code> - Base class, manual action mapping</li>\n<li>\n<code>GenericViewSet</code> - Adds queryset/serializer</li>\n<li>\n<code>ModelViewSet</code> - Full CRUD (most common)</li>\n<li>\n<code>ReadOnlyModelViewSet</code> - Only list + retrieve</li>\n</ul>\n\n<p><strong>Custom actions:</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">ProductViewSet</span><span class=\"p\">(</span><span class=\"n\">viewsets</span><span class=\"p\">.</span><span class=\"n\">ModelViewSet</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ... base config\n</span>\n    <span class=\"nd\">@action</span><span class=\"p\">(</span><span class=\"n\">detail</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">post</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n    <span class=\"k\">def</span> <span class=\"nf\">publish</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"nf\">get_object</span><span class=\"p\">()</span>\n        <span class=\"n\">product</span><span class=\"p\">.</span><span class=\"n\">is_published</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n        <span class=\"n\">product</span><span class=\"p\">.</span><span class=\"nf\">save</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"nc\">Response</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">status</span><span class=\"sh\">'</span><span class=\"p\">:</span> <span class=\"sh\">'</span><span class=\"s\">published</span><span class=\"sh\">'</span><span class=\"p\">})</span>\n\n    <span class=\"c1\"># Creates: POST /api/products/{pk}/publish/\n</span></code></pre>\n\n</div>\n\n\n\n<p><strong>Pros:</strong></p>\n\n<ul>\n<li>Least code for full CRUD</li>\n<li>Automatic URL generation</li>\n<li>Organized resource-centric structure</li>\n<li>Perfect for RESTful APIs</li>\n</ul>\n\n<p><strong>Cons:</strong></p>\n\n<ul>\n<li>Can be confusing for non-standard endpoints</li>\n<li>Less explicit than Concrete Views</li>\n<li>URL customization requires learning Router options</li>\n</ul>\n\n<p><strong>Use case:</strong> Building a full REST API with multiple resources (users, products, orders, reviews)—ViewSets eliminate hundreds of lines of boilerplate.</p>\n\n<h2>\n  \n  \n  Decision Tree: Which View Should I Use?\n</h2>\n\n<p><strong>Choose Function-Based Views if:</strong></p>\n\n<ul>\n<li>Building a single custom endpoint (webhook, health check)</li>\n<li>Prototyping quickly</li>\n<li>Logic doesn't fit REST patterns</li>\n</ul>\n\n<p><strong>Choose APIView if:</strong></p>\n\n<ul>\n<li>Need custom logic per HTTP method</li>\n<li>Endpoint doesn't map to a model (analytics, reports)</li>\n<li>Want class structure without DRF assumptions</li>\n</ul>\n\n<p><strong>Choose Concrete Generic Views if:</strong></p>\n\n<ul>\n<li>Building standard CRUD for resources</li>\n<li>Want balance of power and simplicity</li>\n<li>Need customization per endpoint</li>\n<li><strong>This is the sweet spot for most projects</strong></li>\n</ul>\n\n<p><strong>Choose ViewSets if:</strong></p>\n\n<ul>\n<li>Building full CRUD for multiple resources</li>\n<li>Want auto-generated URLs</li>\n<li>Strictly following REST conventions</li>\n<li>Scaling to dozens of similar endpoints</li>\n</ul>\n\n<p><strong>Skip GenericAPIView + Mixins</strong> unless you're learning DRF internals—use Concrete Views instead.</p>\n\n<h2>\n  \n  \n  My Recommendation: Start with Concrete Generic Views\n</h2>\n\n<p>For 90% of projects, <code>ListCreateAPIView</code> and <code>RetrieveUpdateDestroyAPIView</code> provide the perfect balance:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Your typical API in 10 lines\n</span><span class=\"k\">class</span> <span class=\"nc\">ProductList</span><span class=\"p\">(</span><span class=\"n\">generics</span><span class=\"p\">.</span><span class=\"n\">ListCreateAPIView</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Product</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"nf\">all</span><span class=\"p\">()</span>\n    <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">ProductSerializer</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ProductDetail</span><span class=\"p\">(</span><span class=\"n\">generics</span><span class=\"p\">.</span><span class=\"n\">RetrieveUpdateDestroyAPIView</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Product</span><span class=\"p\">.</span><span class=\"n\">objects</span><span class=\"p\">.</span><span class=\"nf\">all</span><span class=\"p\">()</span>\n    <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">ProductSerializer</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Upgrade to ViewSets when you have 5+ similar resources. Drop down to APIView or FBVs when you need custom logic.</p>\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>DRF gives you flexibility, but that flexibility can be overwhelming. Remember:</p>\n\n<ul>\n<li>\n<strong>FBVs/APIView</strong>: Maximum control, custom logic</li>\n<li>\n<strong>Concrete Generic Views</strong>: Sweet spot for most REST APIs</li>\n<li>\n<strong>ViewSets</strong>: Maximum productivity for large, consistent APIs</li>\n</ul>\n\n<p>Start simple, refactor when patterns emerge. Your API will thank you.</p>\n\n\n\n\n<p><strong>Found this helpful?</strong> 👏 <strong>Give it a clap!</strong></p>\n\n<p><strong>Want more Django + DRF deep dives?</strong> 🔔 <strong>Follow me</strong> for practical backend engineering content.</p>\n\n<p><strong>Help a fellow developer!</strong> 📤 <strong>Share this guide</strong> with someone confused about DRF views.</p>\n\n<p>What's your go-to view type? Drop your preference in the comments! 💬</p>\n\n\n\n\n<p><em>Tags: #Django #DjangoRESTFramework #DRF #Python #BackendDevelopment #API #WebDevelopment #REST</em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: How to Write Production Python Code","url":"https://dev.to/vibe_youtube/tech-with-tim-how-to-write-production-python-code-6bk","date":1761458828,"author":"Vibe YouTube","guid":315242,"unread":true,"content":"<p>Tim walks you through why writing solid production‐ready Python is what turns a junior into a senior dev, breaking it down into eight bite-sized principles (see timestamps for each deep dive). Expect real-world examples, clear best practices and tips on code quality, testing, maintainability and more—no fluff, just stuff you can drop into your projects today.</p>\n\n<p>Plus, you get access to extra goodies like a Boot.dev 25% off promo, a link to grab all the code via his newsletter, and an invite to his DevLaunch mentorship program for hands-on guidance and accountability.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=qU3Rc6_B9es\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Understanding Asyncio and Multithreading in Python","url":"https://dev.to/shreshthajit_das_1a7b40f5/understanding-asyncio-and-multithreading-in-python-663","date":1761457322,"author":"Shreshthajit das","guid":315226,"unread":true,"content":"<p>When we think about <strong>synchronous</strong> program, it tells us that any task must finish before the next one starts. An <strong>asynchronous</strong> program can toggle between tasks so that tasks can run concurrently without blocking each other.</p>\n\n<p>First, let's try to understand a coroutine and a subroutine. We are all familiar with a function, which is also known as a subroutine, procedure, sub-process, etc. A <strong>subroutine</strong> is just a normal Python function defined with <strong>def</strong>.</p>\n\n<p>On the other hand, a <strong>coroutine</strong> is something that is defined with <strong>async def</strong> and can be paused with await or yield. A normal function in Python becomes a <strong>coroutine</strong> when it is defined with the <strong>async def</strong> syntax.</p>\n\n<p>The <strong>async def</strong> lets the current function temporarily pause its execution while the execution of respective (I/O, network requests, etc.) operations is in progress.</p>\n\n<p>It is important to note that <strong>coroutines</strong> do not make the code multi-threaded; rather, coroutines run in an <strong>event loop</strong> that executes in a single thread. Upon the usage of <strong>async def</strong>, the said function yields a coroutine object. When the await keyword is encountered, the current coroutine is paused, and the control is yielded back to the event loop.</p>\n\n<p>The CPU is less utilized (or might be free) when <strong>I/O</strong> (or similar operations) are in progress. For instance, copying data to an external hard drive is an I/O operation where the CPU only initiates and accepts the I/O requests. The CPU can be better utilized in such cases for performing other tasks! The <strong>event loop</strong> continuously monitors the awaitable (coroutine, Task, or Future) until it is completed. Once the execution of the awaitable or the newly picked-up task is complete, the event loop restores the execution of the paused coroutine.</p>\n\n<p>See the code below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import asyncio\nimport sys\nimport time\nfrom datetime import datetime\n\nasync def task1():\n   print(\"Enter \" + sys._getframe().f_code.co_name + \" \" + str(datetime.now().time()))    # Get function name\n   await asyncio.sleep(2)    # Could be an I/O operation, network request, database operation, and more\n   ret_info = await task2()\n   print(\"After sleep \" + sys._getframe().f_code.co_name + \" \" + str(datetime.now().time()))\n   return \"task1\"\n\nasync def task2():\n   print(\"Enter \" + sys._getframe().f_code.co_name + \" \" + str(datetime.now().time()))\n   await asyncio.sleep(2)\n   print(\"After sleep \" + sys._getframe().f_code.co_name + \" \" + str(datetime.now().time()))\n   return \"task2\"\n\nasync def main():\n   print(\"Enter main\")\n   start_time = time.perf_counter()\n   ret_info = await task1()\n   print(f\"Data received from the task1: {ret_info}\" + \" \" + str(datetime.now().time()))\n   ret_info = await task2()\n   print(f\"Data received from the task2: {ret_info}\" + \" \" + str(datetime.now().time()))\n   end_time = time.perf_counter()\n   print(\"Exit main\")\n   print(f'It took {round(end_time - start_time,0)} second(s) to complete.')\n\n\nif __name__ == '__main__':\n   # main coroutine\n   asyncio.run(main())\n</code></pre>\n\n</div>\n\n\n\n<p>Here is the output:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>Enter main\nEnter task1 10:27:58.983919\nEnter task2 10:28:00.985972\nAfter sleep task2 10:28:02.988581\nAfter sleep task1 10:28:02.988645\nData received from the task1: task1 10:28:02.988658\nEnter task2 10:28:02.988674\nAfter sleep task2 10:28:04.991250\nData received from the task2: task2 10:28:04.991315\nExit main\nIt took 6.0 seconds to complete.\n</code></pre>\n\n</div>\n\n\n\n<p><em>Here's the explanation</em>:</p>\n\n<ol>\n<li><p><strong>asyncio.run()</strong> starts an event loop and runs the coroutine main().So execution enters the main() coroutine</p></li>\n<li><p>Prints \"Enter main\".start_time records the precise start time for measuring total duration.</p></li>\n<li>\n<p><strong>Call and await task1()</strong>:</p>\n\n<ul>\n<li>Control passes to task1().</li>\n<li>Because of await, main() is paused until task1() completes.</li>\n</ul>\n</li>\n<li><p><strong>Inside task1()</strong>: Prints \"Enter task1\" along with the current time. asyncio.sleep(2) pauses task1 for 2 seconds asynchronously.<br>\nDuring this time, other async tasks could run — but since main() is just waiting, nothing else does.</p></li>\n<li><p><strong>After 2 seconds, task1 resumes</strong>: Calls task2() and waits for it to complete.</p></li>\n<li>\n<p><strong>Inside task2() (called from task1)</strong>:</p>\n\n<ul>\n<li>Prints entry message.</li>\n<li>Sleeps for another 2 seconds.</li>\n<li>Prints after-sleep message and returns \"task2\".</li>\n</ul>\n</li>\n<li><p><strong>Back to task1</strong>: Once task2() finishes, task1() prints and returns      \"task1\".</p></li>\n<li><p><strong>Back to main()</strong>: Prints: \"Data received from the task1: task1\". Then it runs another: Calls and awaits task2() again (same as before: 2-second delay).</p></li>\n<li>\n<p><strong>After task2() returns</strong>: </p>\n\n<ul>\n<li>Prints the result of task2.</li>\n<li>Ends program and prints total duration.</li>\n</ul>\n</li>\n</ol>\n\n<p>The task1() and task2() are defined as asynchronous functions (or coroutines). During the execution of task1(), an await keyword is encountered with an async sleep of 2 seconds. This pauses the coroutine and yields control back to the event loop.</p>\n\n<p>With this, the execution of task1() is paused until the completion of task2() coroutine. Post the execution of task2(), the execution of task1() coroutine is resumed, and the return value of task1 is printed on the terminal.</p>\n\n<p>To sum up, <strong>asyncio</strong> is built on <strong>coroutines</strong> managed by the event loop, with tasks scheduling them and futures holding results.</p>\n\n<h2>\n  \n  \n  Multithreading\n</h2>\n\n<p>On single-core CPUs, Python achieves concurrency using context switching (frequent switching between threads). This makes threads appear to run in parallel (multitasking).</p>\n\n<p>Multiple threads help in performing background tasks without blocking the main program.</p>\n\n<p>Consider the diagram below to understand how multiple threads exist in memory:</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F03gohd6g5h9pc3lyz0gk.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F03gohd6g5h9pc3lyz0gk.png\" alt=\"ThreadPic\" width=\"721\" height=\"435\"></a></p>\n\n<p>Before moving ahead, it’s important to note that <strong>Python threading</strong> is different from threading in other languages like Java, C#, or Go, where the threads can execute simultaneously on a multicore processor. Due to the design limitations of the Python interpreter(CPython), only one thread can run at a time.</p>\n\n<p>Threads are managed by the Global Interpreter Lock (GIL), which allows only one thread to execute Python bytecode at a time, even on multi-core systems.</p>\n\n<p>What’s really interesting is, threads in Python can coexist (run concurrently) — the interpreter switches between them rapidly (context switching).Example: Thread A runs a bit, then Thread B runs a bit, then back to A. But they cannot run at the exact same time on multiple cores (because the GIL allows only one to execute Python bytecode at once). So, threads are concurrent, not parallel, in CPU-bound tasks.</p>\n\n<p>To fully use multiple CPU cores in Python: Use the multiprocessing module — it creates separate processes, each with its own GIL. Now each process runs independently — true parallelism.</p>\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F7jrl7izpeknbal0n1rq4.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F7jrl7izpeknbal0n1rq4.png\" alt=\"Threading in Python\" width=\"731\" height=\"691\"></a></p>\n\n<ol>\n<li><p>Here we can create three threads that will independently download the three webpages concurrently and take varying amounts of time depending upon network conditions.</p></li>\n<li><p>The main thread will wait until all three threads have finished downloading since the join method of all the threads is set in the main thread.</p></li>\n<li><p>Once all three downloads are finished, the data is given to the create_single_webpage() function to create a single webpage.</p></li>\n<li><p>If the join() method is not used, the main thread will immediately run the create_single_webpage() function before the downloads are finished and resulting in an error.</p></li>\n</ol>\n\n<h2>\n  \n  \n  Advantages of Threading\n</h2>\n\n<ol>\n<li><p>Threaded programs run faster on computer systems that have multiple CPUs.</p></li>\n<li><p>Threads of a process can share the memory of global variables. If the variable's value is changed in one thread, it is applicable to all threads.</p></li>\n</ol>\n\n<p>In the next part of this series, I’ll dive deeper into threads and how they differ from asyncio tasks.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Day 25 of 100 days dsa coding challenge","url":"https://dev.to/manasi_patil_/day-25-of-100-days-dsa-coding-challenge-51mg","date":1761454961,"author":"Manasi Patil","guid":315225,"unread":true,"content":"<p>Taking on a new challenge: solving GeeksforGeeks POTD daily and sharing my solutions! 💻🔥<br>\nThe goal: sharpen problem-solving skills, level up coding, and learn something new every day. Follow my journey! 🚀</p>\n\n<h1>\n  \n  \n  100DaysOfCode #CodingChallenge #ProblemSolving #GeeksforGeeks #DeveloperJourney\n</h1>\n\n<p><strong>Problem:</strong><br><br>\n<a href=\"https://www.geeksforgeeks.org/problems/minimum-cost-of-ropes-1587115620/1\" rel=\"noopener noreferrer\">https://www.geeksforgeeks.org/problems/minimum-cost-of-ropes-1587115620/1</a></p>\n\n<p><strong>Minimum Cost of ropes</strong></p>\n\n<p><strong>Difficulty: Medium    Accuracy: 42.73%</strong></p>\n\n<p>Given an array, arr[] of rope lengths, connect all ropes into a single rope with the minimum total cost. The cost to connect two ropes is the sum of their lengths. </p>\n\n<p><strong>Examples:</strong><br>\nInput: arr[] = [4, 3, 2, 6]<br>\nOutput: 29<br>\nExplanation: First connect 2 and 3 to get [4, 5, 6] with a cost of 5, then connect 4 and 5 to get [9, 6] with a cost of 9, and finally connect 9 and 6 to get one rope with a cost of 15, giving a total minimum cost of 29. Any other order, such as connecting 4 and 6 first, results in a higher total cost of 38.<br>\nInput: arr[] = [4, 2, 7, 6, 9]<br>\nOutput: 62 <br>\nExplanation: First, connect ropes 4 and 2, which makes the array [6, 7, 6, 9]. Cost of this operation 4 + 2 = 6. Next, add ropes 6 and 6, which results in [12, 7, 9]. Cost of this operation 6 + 6 = 12. Then, add 7 and 9, which makes the array [12,16]. Cost of this operation 7 + 9 = 16. And finally, add these two which gives [28]. Hence, the total cost is 6 + 12 + 16 + 28 = 62.<br>\nInput: arr[] = [10]<br>\nOutput: 0<br>\nExplanation: Since there is only one rope, no connections are needed, so the cost is 0.<br>\nConstraints:<br>\n1 ≤ arr.size() ≤ 105<br>\n1 ≤ arr[i] ≤ 104</p>\n\n<p><strong>Solution:</strong></p>\n\n<p>import heapq</p>\n\n<p>class Solution:<br>\n    def minCost(self, arr):<br>\n        if len(arr) &lt;= 1:<br>\n            return 0<br>\n        heapq.heapify(arr)<br>\n        total_cost = 0<br>\n        while len(arr) &gt; 1:<br>\n            first = heapq.heappop(arr)<br>\n            second = heapq.heappop(arr)<br>\n            cost = first + second<br>\n            total_cost += cost<br>\n            heapq.heappush(arr, cost)<br>\n        return total_cost</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"कुकू टीवी 499 कट जाए तो क्या करें.?","url":"https://dev.to/munna_kumar_a4c97c55d2ee2/kukuu-ttiivii-499-ktt-jaae-to-kyaa-kren-2166","date":1761453326,"author":"Munna Kumar","guid":315211,"unread":true,"content":"<p>अगर कुकू टीवी से ₹499 कट गए हैं, तो सबसे पहले ऐप के 'Support' या 8084283469'Help' सेक्शन में जाकर 'Refund' का अनुरोध करें। यदि यह विकल्प उपलब्ध न हो, तो Kuku FM की ईमेल ({<a href=\"mailto:support@kukufm.com\">support@kukufm.com</a>}) पर रिफंड के लिए एक ईमेल लिखें जिसमें ट्रांज़ैक्शन आईडी, आपका नाम, मोबाइल नंबर और रिफंड का कारण (जैसे 'अनचाहा ऑटो-पेमेंट') बताएं। इसके अलावा, आप अपने बैंक से भी संपर्क कर सकते हैं और धोखाधड़ी की शिकायत दर्ज करा सकते हैं। </p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Remote Sensing for Urban Green Cover: My Research Journey with Melbourne","url":"https://dev.to/ramkumar_yaragarla_f76592/remote-sensing-for-urban-green-cover-my-research-journey-with-melbourne-if5","date":1761451879,"author":"Ramkumar Yaragarla","guid":315210,"unread":true,"content":"<p>Over the past few months, I have been exploring and researching how remote sensing and open satellite data can help us understand how our cities are changing, especially the balance between green cover and built-up areas.</p>\n\n<p>At this juncture, as part of my research at I Hug Trees, I focused on Melbourne, Australia as a case study. I live here. The goal was simple: to see how much greenery the city still holds and how fast concrete is replacing it. Importantly, what this means for the city's sustainability. </p>\n\n<p>For this project, I used Sentinel-2 imagery, which is 10m resolution to calculate NDVI (Normalised Difference Vegetation Index) for greenery, and  30m resolution to derive NDBI (Normalised Difference Built-up Index) for urban surfaces.</p>\n\n<p>I want to talk about the technical challenges here vis a vis aligning datasets with different spatial resolutions and projections. I spent quite some time experimenting with resampling methods, re-projection, and bounding boxes to get the NDVI and NDBI layers to align correctly over the same area. Both the 10m and 30m datasets need to aligned to compare them for heat sensitive areas in the city. </p>\n\n<p>Also selecting the right Sentinel-2 tile for my area of interest was another interesting challenge. Melbourne sits across multiple tiles, so I had to first map out the tile boundaries before deciding which one captured the city’s key urban areas and green corridors.</p>\n\n<p>Despite all the technical hurdles, the outcome was incredibly rewarding. Once the data was aligned, I could visualize the contrast between Melbourne’s shrinking green zones and expanding built-up regions. </p>\n\n<p>I request you to have a look at this work and analysis at <a href=\"https://ihugtrees.org/data-analytics/sentinel-ndvi/Melbourne-region/latest.html\" rel=\"noopener noreferrer\">Melbourne Urban Green Cover Dataset Research brief page. </a> </p>\n\n<p>If  you tried similar geospatial projects, please let me know if you have experienced similar challenges. Cheers. Ram</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: How to Write Production Python Code","url":"https://dev.to/vibe_youtube/tech-with-tim-how-to-write-production-python-code-2n0f","date":1761451691,"author":"Vibe YouTube","guid":315209,"unread":true,"content":"<p>Tim’s latest dive into writing production Python code is a jam-packed crash course on the eight core principles that separate a junior hack from a seasoned pro. Each principle comes with in-depth examples and handy timestamps so you can zero in on whatever you need—whether it’s code organization, testing, or performance tweaks.</p>\n\n<p>On top of that, Tim hooks you up with 25% off Boot.dev using code TECHWITHTIM, plugs his DevLaunch mentorship for real-world project guidance, and offers a newsletter full of sample code. No fluff—just solid, hands-on strategies to level up your Python game.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=qU3Rc6_B9es\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"User Scanner : Find Your Perfect Username Across All Platforms in Seconds ⚡","url":"https://dev.to/kaifcodec/user-scanner-find-your-perfect-username-across-all-platforms-in-seconds-1pf5","date":1761447760,"author":"kaifcodec","guid":315178,"unread":true,"content":"<h1>\n  \n  \n  🚀 User Scanner: Find Your Perfect Username Across All Platforms in Seconds ⚡\n</h1>\n\n<p>Tired of opening tabs and hunting site-by-site to see if your favorite username is taken?<br><br>\n<strong>User Scanner</strong> fixes that , fast, from your terminal, with clear color-coded output. Perfect for developers, creators, and anyone who wants a consistent online identity without the busywork.</p>\n\n\n<h2>\n  \n  \n  💡 What It Does\n</h2>\n\n<ul>\n<li>✅ Scans <strong>social</strong>, <strong>developer</strong>, and <strong>creator</strong> platforms in a single run (GitHub, Reddit, X, Instagram, YouTube, and more).\n</li>\n<li>✅ Produces a clear <strong>Available / Taken / Error</strong> report with colored CLI output.\n</li>\n<li>✅ Fully <strong>modular</strong> → add new platform modules easily.\n</li>\n<li>✅ CLI-ready after a single <code>pip install</code>.\n</li>\n<li>✅ Useful for quick username OSINT, branding checks, and onboarding automation.</li>\n</ul>\n\n\n<h2>\n  \n  \n  ⚙️ Installation\n</h2>\n\n<p>Run:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>pip install user-scanner\n</code></pre>\n\n</div>\n\n<h2>\n  \n  \n  🧭 Usage\n</h2>\n\n<p>Scan a username across all supported platforms:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>user-scanner -u &lt;username&gt;\n</code></pre>\n\n</div>\n<p>Scan only a specific category:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>user-scanner -u &lt;username&gt; -c dev\n</code></pre>\n\n</div>\n<p>List modules:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>user-scanner -l\n</code></pre>\n\n</div>\n<p>Scan a single module:</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>user-scanner -u &lt;username&gt; -m github\n</code></pre>\n\n</div>\n\n<h2>\n  \n  \n  📊 Example Output\n</h2>\n\n<p>bash<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code> Checking username: johndoe07\n\n== DEV SITES ==\n  [✔] Codeberg: Available\n  [✔] Cratesio: Available\n  [✘] Dockerhub: Taken\n  [✘] Github: Taken\n  [✔] Gitlab: Available\n  [✔] Launchpad: Available\n  [✔] Npmjs: Available\n  [✘] Replit: Taken\n\n== SOCIAL SITES ==\n  [✘] Bluesky: Taken\n  [✘] Instagram: Taken\n  [✘] Mastodon: Taken\n  [✘] Pinterest: Taken\n  [✘] Reddit: Taken\n  [✘] Snapchat: Taken\n  [✘] Threads: Taken\n  [✘] X (Twitter): Taken\n  [✔] Youtube: Available\n\n== CREATOR SITES ==\n  [✔] Devto: Available\n  [✔] Hashnode: Available\n  [✘] Kaggle: Taken\n  [!] Medium: Error\n  [✔] Patreon: Available\n\n== COMMUNITY SITES ==\n  [✔] Coderlegion: Available\n\n== GAMING SITES ==\n  [✘] Chess_com: Taken\n\n  ...\n  ...\n  ...\n</code></pre>\n\n</div>\n\n\n\n<p>Color-coded output gives an instant snapshot of what's free and what isn't, no more manual checking.</p>\n\n\n\n\n<h2>\n  \n  \n  🧩 How It’s Built\n</h2>\n\n<p>Project layout (modules by category):</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>user_scanner/\n├── dev/        # Developer platforms (GitHub, GitLab, npm, etc.)\n├── social/     # Social platforms (X, Reddit, Instagram, etc.)\n├── creator/    # Creator platforms (Hashnode, Dev.to, Medium, etc.)\n├── community/  # Community or niche sites\n├── gaming/     # Gaming-related platforms (chess.com, itch, etc.)\n</code></pre>\n\n</div>\n\n<p>Each platform module implements a <code>validate_&lt;site&gt;()</code> function that returns:</p>\n\n<ul>\n<li>\n<code>1</code> → Available\n</li>\n<li>\n<code>0</code> → Taken\n</li>\n<li>\n<code>2</code> → Error / Could not check</li>\n</ul>\n\n<p>Tech:</p>\n\n<ul>\n<li>\n<code>httpx</code> → fast HTTP requests (async-friendly)\n</li>\n<li>\n<code>colorama</code> → readable colored CLI output</li>\n</ul>\n\n\n\n\n<h2>\n  \n  \n  🤝 Want to Contribute?\n</h2>\n\n<p>The <strong>community</strong> and <strong>gaming</strong> categories are still small, contributions welcome.<br><br>\nFollow the module guideline in <code>CONTRIBUTING.md</code> and add your site module. Keep modules simple: a <code>validate_&lt;site&gt;()</code> function returning 1/0/2 and using <code>httpx</code> for checks.</p>\n\n\n\n\n<h2>\n  \n  \n  🔗 Links\n</h2>\n\n<p>Repo: <a href=\"https://github.com/kaifcodec/user-scanner\" rel=\"noopener noreferrer\">https://github.com/kaifcodec/user-scanner</a><br><br>\nContributing guide: <a href=\"https://github.com/kaifcodec/user-scanner/blob/main/CONTRIBUTING.md\" rel=\"noopener noreferrer\">https://github.com/kaifcodec/user-scanner/blob/main/CONTRIBUTING.md</a></p>\n\n\n\n\n<p>Have a favorite site that's missing? Add it, pull requests encouraged. Want help writing a module or testing a new platform? Ping me on the issue tracker and we’ll get it merged.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building MCP Servers in Python: WebSearch & Scrape Guide","url":"https://dev.to/rosgluk/building-mcp-servers-in-python-websearch-scrape-guide-a6m","date":1761446450,"author":"Rost","guid":315177,"unread":true,"content":"<p>The Model Context Protocol (MCP) is revolutionizing how AI assistants interact with external data sources and tools. In this comprehensive guide, we'll explore how to build <a href=\"https://www.glukhov.org/post/2025/10/mcp-server-in-python/\" rel=\"noopener noreferrer\">MCP servers in Python</a>, with practical examples focused on web search and scraping capabilities.</p>\n\n<h2>\n  \n  \n  What is the Model Context Protocol?\n</h2>\n\n<p>Model Context Protocol (MCP) is an open protocol introduced by Anthropic to standardize how AI assistants connect to external systems. Instead of building custom integrations for each data source, MCP provides a unified interface that allows:</p>\n\n<ul>\n<li>\n<strong>AI assistants</strong> (like Claude, ChatGPT, or custom LLM applications) to discover and use tools</li>\n<li>\n<strong>Developers</strong> to expose data sources, tools, and prompts through a standardized protocol</li>\n<li>\n<strong>Seamless integration</strong> without reinventing the wheel for each use case</li>\n</ul>\n\n<p>The protocol operates on a client-server architecture where:</p>\n\n<ul>\n<li>\n<strong>MCP Clients</strong> (AI assistants) discover and use capabilities</li>\n<li>\n<strong>MCP Servers</strong> expose resources, tools, and prompts</li>\n<li>Communication happens via JSON-RPC over stdio or HTTP/SSE</li>\n</ul>\n\n<h2>\n  \n  \n  Why Build MCP Servers in Python?\n</h2>\n\n<p>Python is an excellent choice for MCP server development because:</p>\n\n<ol>\n<li>\n<strong>Rich Ecosystem</strong>: Libraries like <code>requests</code>, <code>beautifulsoup4</code>, <code>selenium</code>, and <code>playwright</code> make web scraping straightforward</li>\n<li>\n<strong>MCP SDK</strong>: Official Python SDK (<code>mcp</code>) provides robust server implementation support</li>\n<li>\n<strong>Rapid Development</strong>: Python's simplicity allows quick prototyping and iteration</li>\n<li>\n<strong>AI/ML Integration</strong>: Easy integration with AI libraries like <code>langchain</code>, <code>openai</code>, and data processing tools</li>\n<li>\n<strong>Community Support</strong>: Large community with extensive documentation and examples</li>\n</ol>\n\n<h2>\n  \n  \n  Setting Up Your Development Environment\n</h2>\n\n<p>First, create a virtual environment and install the required dependencies:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Create and activate virtual environment</span>\npython <span class=\"nt\">-m</span> venv mcp-env\n<span class=\"nb\">source </span>mcp-env/bin/activate  <span class=\"c\"># On Windows: mcp-env\\Scripts\\activate</span>\n\n<span class=\"c\"># Install MCP SDK and web scraping libraries</span>\npip <span class=\"nb\">install </span>mcp requests beautifulsoup4 playwright lxml\nplaywright <span class=\"nb\">install</span>  <span class=\"c\"># Install browser drivers for Playwright</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Building a Basic MCP Server\n</h2>\n\n<p>Let's start with a minimal MCP server structure:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"n\">mcp.server</span> <span class=\"kn\">import</span> <span class=\"n\">Server</span>\n<span class=\"kn\">from</span> <span class=\"n\">mcp.types</span> <span class=\"kn\">import</span> <span class=\"n\">Tool</span><span class=\"p\">,</span> <span class=\"n\">TextContent</span>\n<span class=\"kn\">import</span> <span class=\"n\">mcp.server.stdio</span>\n\n<span class=\"c1\"># Create server instance\n</span><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">Server</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">websearch-scraper</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app.list_tools</span><span class=\"p\">()</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">list_tools</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Tool</span><span class=\"p\">]:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Define available tools</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span>\n        <span class=\"nc\">Tool</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">search_web</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Search the web for information</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">inputSchema</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">object</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                <span class=\"sh\">\"</span><span class=\"s\">properties</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">query</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                        <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">string</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                        <span class=\"sh\">\"</span><span class=\"s\">description</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Search query</span><span class=\"sh\">\"</span>\n                    <span class=\"p\">},</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">max_results</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                        <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">number</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                        <span class=\"sh\">\"</span><span class=\"s\">description</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Maximum number of results</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                        <span class=\"sh\">\"</span><span class=\"s\">default</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">},</span>\n                <span class=\"sh\">\"</span><span class=\"s\">required</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">query</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n<span class=\"nd\">@app.call_tool</span><span class=\"p\">()</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">call_tool</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">arguments</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">TextContent</span><span class=\"p\">]:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Handle tool execution</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">search_web</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n        <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">arguments</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">query</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n        <span class=\"n\">max_results</span> <span class=\"o\">=</span> <span class=\"n\">arguments</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">max_results</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Implement search logic here\n</span>        <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">perform_web_search</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">max_results</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"nc\">TextContent</span><span class=\"p\">(</span>\n            <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">text</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Search results for </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">query</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"s\">:</span><span class=\"se\">\\n\\n</span><span class=\"si\">{</span><span class=\"n\">results</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n        <span class=\"p\">)]</span>\n\n    <span class=\"k\">raise</span> <span class=\"nc\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Unknown tool: </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">perform_web_search</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">max_results</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Placeholder for actual search implementation</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Found </span><span class=\"si\">{</span><span class=\"n\">max_results</span><span class=\"si\">}</span><span class=\"s\"> results for: </span><span class=\"si\">{</span><span class=\"n\">query</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Run the server</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">mcp</span><span class=\"p\">.</span><span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">stdio</span><span class=\"p\">.</span><span class=\"nf\">stdio_server</span><span class=\"p\">()</span> <span class=\"nf\">as </span><span class=\"p\">(</span><span class=\"n\">read_stream</span><span class=\"p\">,</span> <span class=\"n\">write_stream</span><span class=\"p\">):</span>\n        <span class=\"k\">await</span> <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span>\n            <span class=\"n\">read_stream</span><span class=\"p\">,</span>\n            <span class=\"n\">write_stream</span><span class=\"p\">,</span>\n            <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">create_initialization_options</span><span class=\"p\">()</span>\n        <span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Implementing Web Search Functionality\n</h2>\n\n<p>Now let's implement a real web search tool using DuckDuckGo (which doesn't require API keys):<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"n\">requests</span>\n<span class=\"kn\">from</span> <span class=\"n\">bs4</span> <span class=\"kn\">import</span> <span class=\"n\">BeautifulSoup</span>\n<span class=\"kn\">from</span> <span class=\"n\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">quote_plus</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">search_duckduckgo</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">max_results</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Search DuckDuckGo and parse results</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">https://html.duckduckgo.com/html/?q=</span><span class=\"si\">{</span><span class=\"nf\">quote_plus</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n    <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"sh\">\"</span><span class=\"s\">User-Agent</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36</span><span class=\"sh\">\"</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">raise_for_status</span><span class=\"p\">()</span>\n\n        <span class=\"n\">soup</span> <span class=\"o\">=</span> <span class=\"nc\">BeautifulSoup</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">html.parser</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n        <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">soup</span><span class=\"p\">.</span><span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">.result</span><span class=\"sh\">'</span><span class=\"p\">)[:</span><span class=\"n\">max_results</span><span class=\"p\">]:</span>\n            <span class=\"n\">title_elem</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"nf\">select_one</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">.result__title</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n            <span class=\"n\">snippet_elem</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"nf\">select_one</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">.result__snippet</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n            <span class=\"n\">url_elem</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"nf\">select_one</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">.result__url</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">title_elem</span> <span class=\"ow\">and</span> <span class=\"n\">snippet_elem</span><span class=\"p\">:</span>\n                <span class=\"n\">results</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">({</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">title</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">title_elem</span><span class=\"p\">.</span><span class=\"nf\">get_text</span><span class=\"p\">(</span><span class=\"n\">strip</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">),</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">snippet</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">snippet_elem</span><span class=\"p\">.</span><span class=\"nf\">get_text</span><span class=\"p\">(</span><span class=\"n\">strip</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">),</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">url</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">url_elem</span><span class=\"p\">.</span><span class=\"nf\">get_text</span><span class=\"p\">(</span><span class=\"n\">strip</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">url_elem</span> <span class=\"k\">else</span> <span class=\"sh\">\"</span><span class=\"s\">N/A</span><span class=\"sh\">\"</span>\n                <span class=\"p\">})</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">results</span>\n\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nc\">Exception</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Search failed: </span><span class=\"si\">{</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">format_search_results</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Format search results for display</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">results</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"s\">No results found.</span><span class=\"sh\">\"</span>\n\n    <span class=\"n\">formatted</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">formatted</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s\">. </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">title</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span>\n            <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">   </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">snippet</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span>\n            <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">   URL: </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">url</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">formatted</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Adding Web Scraping Capabilities\n</h2>\n\n<p>Let's add a tool to scrape and extract content from web pages:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">playwright.async_api</span> <span class=\"kn\">import</span> <span class=\"n\">async_playwright</span>\n<span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">scrape_webpage</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">selector</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Scrape content from a webpage using Playwright</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"nf\">async_playwright</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">p</span><span class=\"p\">:</span>\n        <span class=\"n\">browser</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">chromium</span><span class=\"p\">.</span><span class=\"nf\">launch</span><span class=\"p\">(</span><span class=\"n\">headless</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">page</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">browser</span><span class=\"p\">.</span><span class=\"nf\">new_page</span><span class=\"p\">()</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">await</span> <span class=\"n\">page</span><span class=\"p\">.</span><span class=\"nf\">goto</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">30000</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Wait for content to load\n</span>            <span class=\"k\">await</span> <span class=\"n\">page</span><span class=\"p\">.</span><span class=\"nf\">wait_for_load_state</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">networkidle</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">selector</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Extract specific element\n</span>                <span class=\"n\">element</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">page</span><span class=\"p\">.</span><span class=\"nf\">query_selector</span><span class=\"p\">(</span><span class=\"n\">selector</span><span class=\"p\">)</span>\n                <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">element</span><span class=\"p\">.</span><span class=\"nf\">inner_text</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">element</span> <span class=\"k\">else</span> <span class=\"sh\">\"</span><span class=\"s\">Selector not found</span><span class=\"sh\">\"</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Extract main content\n</span>                <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">page</span><span class=\"p\">.</span><span class=\"nf\">inner_text</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">body</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n            <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">page</span><span class=\"p\">.</span><span class=\"nf\">title</span><span class=\"p\">()</span>\n\n            <span class=\"k\">return</span> <span class=\"p\">{</span>\n                <span class=\"sh\">\"</span><span class=\"s\">title</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">title</span><span class=\"p\">,</span>\n                <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">content</span><span class=\"p\">[:</span><span class=\"mi\">5000</span><span class=\"p\">],</span>  <span class=\"c1\"># Limit content length\n</span>                <span class=\"sh\">\"</span><span class=\"s\">url</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">url</span><span class=\"p\">,</span>\n                <span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">True</span>\n            <span class=\"p\">}</span>\n\n        <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span>\n                <span class=\"sh\">\"</span><span class=\"s\">error</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">),</span>\n                <span class=\"sh\">\"</span><span class=\"s\">url</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">url</span><span class=\"p\">,</span>\n                <span class=\"sh\">\"</span><span class=\"s\">success</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"bp\">False</span>\n            <span class=\"p\">}</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"k\">await</span> <span class=\"n\">browser</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Add scraper tool to the MCP server\n</span><span class=\"nd\">@app.list_tools</span><span class=\"p\">()</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">list_tools</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Tool</span><span class=\"p\">]:</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span>\n        <span class=\"nc\">Tool</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">search_web</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Search the web using DuckDuckGo</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">inputSchema</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">object</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                <span class=\"sh\">\"</span><span class=\"s\">properties</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">query</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">string</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">description</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Search query</span><span class=\"sh\">\"</span><span class=\"p\">},</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">max_results</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">number</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">default</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">}</span>\n                <span class=\"p\">},</span>\n                <span class=\"sh\">\"</span><span class=\"s\">required</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">query</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">),</span>\n        <span class=\"nc\">Tool</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">scrape_webpage</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Scrape content from a webpage</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">inputSchema</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">object</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                <span class=\"sh\">\"</span><span class=\"s\">properties</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">url</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">string</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">description</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">URL to scrape</span><span class=\"sh\">\"</span><span class=\"p\">},</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">selector</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                        <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">string</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                        <span class=\"sh\">\"</span><span class=\"s\">description</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Optional CSS selector for specific content</span><span class=\"sh\">\"</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">},</span>\n                <span class=\"sh\">\"</span><span class=\"s\">required</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">url</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Complete MCP Server Implementation\n</h2>\n\n<p>Here's a complete, production-ready MCP server with both search and scrape capabilities:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\">#!/usr/bin/env python3\n</span><span class=\"sh\">\"\"\"</span><span class=\"s\">\nMCP Server for Web Search and Scraping\nProvides tools for searching the web and extracting content from pages\n</span><span class=\"sh\">\"\"\"</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"n\">logging</span>\n<span class=\"kn\">from</span> <span class=\"n\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span>\n<span class=\"kn\">import</span> <span class=\"n\">requests</span>\n<span class=\"kn\">from</span> <span class=\"n\">bs4</span> <span class=\"kn\">import</span> <span class=\"n\">BeautifulSoup</span>\n<span class=\"kn\">from</span> <span class=\"n\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">quote_plus</span>\n<span class=\"kn\">from</span> <span class=\"n\">playwright.async_api</span> <span class=\"kn\">import</span> <span class=\"n\">async_playwright</span>\n\n<span class=\"kn\">from</span> <span class=\"n\">mcp.server</span> <span class=\"kn\">import</span> <span class=\"n\">Server</span>\n<span class=\"kn\">from</span> <span class=\"n\">mcp.types</span> <span class=\"kn\">import</span> <span class=\"n\">Tool</span><span class=\"p\">,</span> <span class=\"n\">TextContent</span><span class=\"p\">,</span> <span class=\"n\">ImageContent</span><span class=\"p\">,</span> <span class=\"n\">EmbeddedResource</span>\n<span class=\"kn\">import</span> <span class=\"n\">mcp.server.stdio</span>\n\n<span class=\"c1\"># Configure logging\n</span><span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"nf\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"nf\">getLogger</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">websearch-scraper</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create server\n</span><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"nc\">Server</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">websearch-scraper</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Search implementation\n</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">search_web</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">max_results</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Search DuckDuckGo and return formatted results</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">https://html.duckduckgo.com/html/?q=</span><span class=\"si\">{</span><span class=\"nf\">quote_plus</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n    <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">User-Agent</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Mozilla/5.0</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"n\">soup</span> <span class=\"o\">=</span> <span class=\"nc\">BeautifulSoup</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">html.parser</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n        <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">soup</span><span class=\"p\">.</span><span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">.result</span><span class=\"sh\">'</span><span class=\"p\">)[:</span><span class=\"n\">max_results</span><span class=\"p\">]:</span>\n            <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"nf\">select_one</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">.result__title</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n            <span class=\"n\">snippet</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"nf\">select_one</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">.result__snippet</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n            <span class=\"n\">link</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"nf\">select_one</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">.result__url</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">title</span> <span class=\"ow\">and</span> <span class=\"n\">snippet</span><span class=\"p\">:</span>\n                <span class=\"n\">results</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">({</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">title</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">title</span><span class=\"p\">.</span><span class=\"nf\">get_text</span><span class=\"p\">(</span><span class=\"n\">strip</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">),</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">snippet</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">snippet</span><span class=\"p\">.</span><span class=\"nf\">get_text</span><span class=\"p\">(</span><span class=\"n\">strip</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">),</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">url</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">link</span><span class=\"p\">.</span><span class=\"nf\">get_text</span><span class=\"p\">(</span><span class=\"n\">strip</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">link</span> <span class=\"k\">else</span> <span class=\"sh\">\"\"</span>\n                <span class=\"p\">})</span>\n\n        <span class=\"c1\"># Format results\n</span>        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">results</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"s\">No results found.</span><span class=\"sh\">\"</span>\n\n        <span class=\"n\">formatted</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Found </span><span class=\"si\">{</span><span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\"> results for </span><span class=\"sh\">'</span><span class=\"si\">{</span><span class=\"n\">query</span><span class=\"si\">}</span><span class=\"sh\">'</span><span class=\"s\">:</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"n\">formatted</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s\">. **</span><span class=\"si\">{</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">title</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s\">**</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"n\">formatted</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">   </span><span class=\"si\">{</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">snippet</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"n\">formatted</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">   </span><span class=\"si\">{</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">url</span><span class=\"sh\">'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"sh\">\"</span><span class=\"se\">\\n</span><span class=\"sh\">\"</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"n\">formatted</span><span class=\"p\">)</span>\n\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Search failed: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Search error: </span><span class=\"si\">{</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n\n<span class=\"c1\"># Scraper implementation\n</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">scrape_page</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">selector</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Scrape webpage content using Playwright</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"nf\">async_playwright</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">p</span><span class=\"p\">:</span>\n        <span class=\"n\">browser</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">chromium</span><span class=\"p\">.</span><span class=\"nf\">launch</span><span class=\"p\">(</span><span class=\"n\">headless</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">page</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">browser</span><span class=\"p\">.</span><span class=\"nf\">new_page</span><span class=\"p\">()</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">await</span> <span class=\"n\">page</span><span class=\"p\">.</span><span class=\"nf\">goto</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">30000</span><span class=\"p\">)</span>\n            <span class=\"k\">await</span> <span class=\"n\">page</span><span class=\"p\">.</span><span class=\"nf\">wait_for_load_state</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">networkidle</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n            <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">page</span><span class=\"p\">.</span><span class=\"nf\">title</span><span class=\"p\">()</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">selector</span><span class=\"p\">:</span>\n                <span class=\"n\">element</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">page</span><span class=\"p\">.</span><span class=\"nf\">query_selector</span><span class=\"p\">(</span><span class=\"n\">selector</span><span class=\"p\">)</span>\n                <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">element</span><span class=\"p\">.</span><span class=\"nf\">inner_text</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">element</span> <span class=\"k\">else</span> <span class=\"sh\">\"</span><span class=\"s\">Selector not found</span><span class=\"sh\">\"</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">page</span><span class=\"p\">.</span><span class=\"nf\">inner_text</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">body</span><span class=\"sh\">'</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Limit content length\n</span>            <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">content</span><span class=\"p\">[:</span><span class=\"mi\">8000</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"sh\">\"</span><span class=\"s\">...</span><span class=\"sh\">\"</span> <span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">8000</span> <span class=\"k\">else</span> <span class=\"n\">content</span>\n\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">**</span><span class=\"si\">{</span><span class=\"n\">title</span><span class=\"si\">}</span><span class=\"s\">**</span><span class=\"se\">\\n\\n</span><span class=\"s\">URL: </span><span class=\"si\">{</span><span class=\"n\">url</span><span class=\"si\">}</span><span class=\"se\">\\n\\n</span><span class=\"si\">{</span><span class=\"n\">content</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n        <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Scraping failed: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Scraping error: </span><span class=\"si\">{</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"k\">await</span> <span class=\"n\">browser</span><span class=\"p\">.</span><span class=\"nf\">close</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># MCP Tool definitions\n</span><span class=\"nd\">@app.list_tools</span><span class=\"p\">()</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">list_tools</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Tool</span><span class=\"p\">]:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">List available MCP tools</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span>\n        <span class=\"nc\">Tool</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">search_web</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Search the web using DuckDuckGo. Returns titles, snippets, and URLs.</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">inputSchema</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">object</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                <span class=\"sh\">\"</span><span class=\"s\">properties</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">query</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                        <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">string</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                        <span class=\"sh\">\"</span><span class=\"s\">description</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">The search query</span><span class=\"sh\">\"</span>\n                    <span class=\"p\">},</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">max_results</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                        <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">number</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                        <span class=\"sh\">\"</span><span class=\"s\">description</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Maximum number of results (default: 5)</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                        <span class=\"sh\">\"</span><span class=\"s\">default</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">},</span>\n                <span class=\"sh\">\"</span><span class=\"s\">required</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">query</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">),</span>\n        <span class=\"nc\">Tool</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">scrape_webpage</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Extract content from a webpage. Can target specific elements with CSS selectors.</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">inputSchema</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">object</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                <span class=\"sh\">\"</span><span class=\"s\">properties</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">url</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                        <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">string</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                        <span class=\"sh\">\"</span><span class=\"s\">description</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">The URL to scrape</span><span class=\"sh\">\"</span>\n                    <span class=\"p\">},</span>\n                    <span class=\"sh\">\"</span><span class=\"s\">selector</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                        <span class=\"sh\">\"</span><span class=\"s\">type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">string</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                        <span class=\"sh\">\"</span><span class=\"s\">description</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">Optional CSS selector to extract specific content</span><span class=\"sh\">\"</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">},</span>\n                <span class=\"sh\">\"</span><span class=\"s\">required</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">url</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n<span class=\"nd\">@app.call_tool</span><span class=\"p\">()</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">call_tool</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">arguments</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">TextContent</span><span class=\"p\">]:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Handle tool execution</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">search_web</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n            <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">arguments</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">query</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n            <span class=\"n\">max_results</span> <span class=\"o\">=</span> <span class=\"n\">arguments</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">max_results</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">search_web</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">max_results</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"nc\">TextContent</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">text</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">result</span><span class=\"p\">)]</span>\n\n        <span class=\"k\">elif</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">scrape_webpage</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n            <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">arguments</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">url</span><span class=\"sh\">\"</span><span class=\"p\">]</span>\n            <span class=\"n\">selector</span> <span class=\"o\">=</span> <span class=\"n\">arguments</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">selector</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">scrape_page</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">selector</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"nc\">TextContent</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">text</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">result</span><span class=\"p\">)]</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"nc\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Unknown tool: </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">except</span> <span class=\"nb\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Tool execution failed: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"nc\">TextContent</span><span class=\"p\">(</span>\n            <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">text</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Error executing </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">: </span><span class=\"si\">{</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n        <span class=\"p\">)]</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Run the MCP server</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Starting WebSearch-Scraper MCP Server</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">mcp</span><span class=\"p\">.</span><span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">stdio</span><span class=\"p\">.</span><span class=\"nf\">stdio_server</span><span class=\"p\">()</span> <span class=\"nf\">as </span><span class=\"p\">(</span><span class=\"n\">read_stream</span><span class=\"p\">,</span> <span class=\"n\">write_stream</span><span class=\"p\">):</span>\n        <span class=\"k\">await</span> <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span>\n            <span class=\"n\">read_stream</span><span class=\"p\">,</span>\n            <span class=\"n\">write_stream</span><span class=\"p\">,</span>\n            <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"nf\">create_initialization_options</span><span class=\"p\">()</span>\n        <span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">main</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Configuring Your MCP Server\n</h2>\n\n<p>To use your MCP server with Claude Desktop or other MCP clients, create a configuration file:</p>\n\n<p><strong>For Claude Desktop</strong> (<code>claude_desktop_config.json</code>):<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight json\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"mcpServers\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"websearch-scraper\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"command\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"python\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"args\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n        </span><span class=\"s2\">\"/path/to/your/mcp_server.py\"</span><span class=\"w\">\n      </span><span class=\"p\">],</span><span class=\"w\">\n      </span><span class=\"nl\">\"env\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre>\n\n</div>\n\n\n\n<p><strong>Location:</strong></p>\n\n<ul>\n<li>macOS: <code>~/Library/Application Support/Claude/claude_desktop_config.json</code>\n</li>\n<li>Windows: <code>%APPDATA%\\Claude\\claude_desktop_config.json</code>\n</li>\n<li>Linux: <code>~/.config/Claude/claude_desktop_config.json</code>\n</li>\n</ul>\n\n<h2>\n  \n  \n  Testing Your MCP Server\n</h2>\n\n<p>Create a test script to verify functionality:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"n\">json</span>\n<span class=\"kn\">import</span> <span class=\"n\">sys</span>\n<span class=\"kn\">from</span> <span class=\"n\">io</span> <span class=\"kn\">import</span> <span class=\"n\">StringIO</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_mcp_server</span><span class=\"p\">():</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Test MCP server locally</span><span class=\"sh\">\"\"\"</span>\n\n    <span class=\"c1\"># Test search\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Testing web search...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">search_web</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Python MCP tutorial</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Test scraper\n</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s\">Testing webpage scraper...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">scrape_page</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">https://example.com</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">[:</span><span class=\"mi\">500</span><span class=\"p\">])</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">__main__</span><span class=\"sh\">\"</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"nf\">test_mcp_server</span><span class=\"p\">())</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Advanced Features and Best Practices\n</h2>\n\n<h3>\n  \n  \n  1. Rate Limiting\n</h3>\n\n<p>Implement rate limiting to avoid overwhelming target servers:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">time</span>\n<span class=\"kn\">from</span> <span class=\"n\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">defaultdict</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">RateLimiter</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">max_requests</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">time_window</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">60</span><span class=\"p\">):</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">max_requests</span> <span class=\"o\">=</span> <span class=\"n\">max_requests</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">time_window</span> <span class=\"o\">=</span> <span class=\"n\">time_window</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">requests</span> <span class=\"o\">=</span> <span class=\"nf\">defaultdict</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">acquire</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">time</span><span class=\"p\">()</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">requests</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">t</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">requests</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> \n            <span class=\"k\">if</span> <span class=\"n\">now</span> <span class=\"o\">-</span> <span class=\"n\">t</span> <span class=\"o\">&lt;</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">time_window</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">requests</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">])</span> <span class=\"o\">&gt;=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">max_requests</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"nc\">Exception</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Rate limit exceeded</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">requests</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">].</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">now</span><span class=\"p\">)</span>\n\n<span class=\"n\">limiter</span> <span class=\"o\">=</span> <span class=\"nc\">RateLimiter</span><span class=\"p\">(</span><span class=\"n\">max_requests</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">time_window</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  2. Caching\n</h3>\n\n<p>Add caching to improve performance:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">lru_cache</span>\n<span class=\"kn\">import</span> <span class=\"n\">hashlib</span>\n\n<span class=\"nd\">@lru_cache</span><span class=\"p\">(</span><span class=\"n\">maxsize</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">cached_search</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">max_results</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"nf\">search_web</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">max_results</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  3. Error Handling\n</h3>\n\n<p>Implement robust error handling:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">enum</span> <span class=\"kn\">import</span> <span class=\"n\">Enum</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ErrorType</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n    <span class=\"n\">NETWORK_ERROR</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">network_error</span><span class=\"sh\">\"</span>\n    <span class=\"n\">PARSE_ERROR</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">parse_error</span><span class=\"sh\">\"</span>\n    <span class=\"n\">RATE_LIMIT</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">rate_limit_exceeded</span><span class=\"sh\">\"</span>\n    <span class=\"n\">INVALID_INPUT</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">invalid_input</span><span class=\"sh\">\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">handle_error</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"nb\">Exception</span><span class=\"p\">,</span> <span class=\"n\">error_type</span><span class=\"p\">:</span> <span class=\"n\">ErrorType</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">error_type</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s\">: </span><span class=\"si\">{</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Error (</span><span class=\"si\">{</span><span class=\"n\">error_type</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s\">): </span><span class=\"si\">{</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  4. Input Validation\n</h3>\n\n<p>Validate user inputs before processing:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">urlparse</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">validate_url</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nf\">urlparse</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nf\">all</span><span class=\"p\">([</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">scheme</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">netloc</span><span class=\"p\">])</span>\n    <span class=\"k\">except</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">validate_query</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">())</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">500</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Deployment Considerations\n</h2>\n\n<h3>\n  \n  \n  Using SSE Transport for Web Deployment\n</h3>\n\n<p>For web-based deployments, use SSE (Server-Sent Events) transport:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">mcp.server.sse</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main_sse</span><span class=\"p\">():</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Run server with SSE transport</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"kn\">from</span> <span class=\"n\">starlette.applications</span> <span class=\"kn\">import</span> <span class=\"n\">Starlette</span>\n    <span class=\"kn\">from</span> <span class=\"n\">starlette.routing</span> <span class=\"kn\">import</span> <span class=\"n\">Mount</span>\n\n    <span class=\"n\">sse</span> <span class=\"o\">=</span> <span class=\"n\">mcp</span><span class=\"p\">.</span><span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">sse</span><span class=\"p\">.</span><span class=\"nc\">SseServerTransport</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/messages</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">starlette_app</span> <span class=\"o\">=</span> <span class=\"nc\">Starlette</span><span class=\"p\">(</span>\n        <span class=\"n\">routes</span><span class=\"o\">=</span><span class=\"p\">[</span>\n            <span class=\"nc\">Mount</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">/mcp</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"o\">=</span><span class=\"n\">sse</span><span class=\"p\">.</span><span class=\"nf\">get_server</span><span class=\"p\">())</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"kn\">import</span> <span class=\"n\">uvicorn</span>\n    <span class=\"k\">await</span> <span class=\"n\">uvicorn</span><span class=\"p\">.</span><span class=\"nc\">Server</span><span class=\"p\">(</span>\n        <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">uvicorn</span><span class=\"p\">.</span><span class=\"nc\">Config</span><span class=\"p\">(</span><span class=\"n\">starlette_app</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">0.0.0.0</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8000</span><span class=\"p\">)</span>\n    <span class=\"p\">).</span><span class=\"nf\">serve</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Docker Deployment\n</h3>\n\n<p>Create a <code>Dockerfile</code> for containerized deployment:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight docker\"><code><span class=\"k\">FROM</span><span class=\"s\"> python:3.11-slim</span>\n\n<span class=\"k\">WORKDIR</span><span class=\"s\"> /app</span>\n\n<span class=\"c\"># Install system dependencies</span>\n<span class=\"k\">RUN </span>apt-get update <span class=\"o\">&amp;&amp;</span> apt-get <span class=\"nb\">install</span> <span class=\"nt\">-y</span> <span class=\"se\">\\\n</span>    wget <span class=\"se\">\\\n</span>    <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">rm</span> <span class=\"nt\">-rf</span> /var/lib/apt/lists/<span class=\"k\">*</span>\n\n<span class=\"c\"># Install Python dependencies</span>\n<span class=\"k\">COPY</span><span class=\"s\"> requirements.txt .</span>\n<span class=\"k\">RUN </span>pip <span class=\"nb\">install</span> <span class=\"nt\">--no-cache-dir</span> <span class=\"nt\">-r</span> requirements.txt\n<span class=\"k\">RUN </span>playwright <span class=\"nb\">install </span>chromium\n<span class=\"k\">RUN </span>playwright install-deps\n\n<span class=\"c\"># Copy application</span>\n<span class=\"k\">COPY</span><span class=\"s\"> mcp_server.py .</span>\n\n<span class=\"k\">CMD</span><span class=\"s\"> [\"python\", \"mcp_server.py\"]</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Performance Optimization\n</h2>\n\n<h3>\n  \n  \n  Async Operations\n</h3>\n\n<p>Use asyncio for concurrent operations:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">search_multiple_queries</span><span class=\"p\">(</span><span class=\"n\">queries</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n    <span class=\"sh\">\"\"\"</span><span class=\"s\">Search multiple queries concurrently</span><span class=\"sh\">\"\"\"</span>\n    <span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nf\">search_web</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">query</span> <span class=\"ow\">in</span> <span class=\"n\">queries</span><span class=\"p\">]</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">gather</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">tasks</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">results</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Connection Pooling\n</h3>\n\n<p>Reuse connections for better performance:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">aiohttp</span>\n\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_session</span><span class=\"p\">():</span>\n    <span class=\"k\">global</span> <span class=\"n\">session</span>\n    <span class=\"k\">if</span> <span class=\"n\">session</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">aiohttp</span><span class=\"p\">.</span><span class=\"nc\">ClientSession</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">session</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">fetch_url</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nf\">get_session</span><span class=\"p\">()</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">session</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">text</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  Security Best Practices\n</h2>\n\n<ol>\n<li>\n<strong>Input Sanitization</strong>: Always validate and sanitize user inputs</li>\n<li>\n<strong>URL Whitelisting</strong>: Consider implementing URL whitelisting for scraping</li>\n<li>\n<strong>Timeout Controls</strong>: Set appropriate timeouts to prevent resource exhaustion</li>\n<li>\n<strong>Content Limits</strong>: Limit the size of scraped content</li>\n<li>\n<strong>Authentication</strong>: Implement authentication for production deployments</li>\n<li>\n<strong>HTTPS</strong>: Use HTTPS for SSE transport in production</li>\n</ol>\n\n<h2>\n  \n  \n  Useful Links and Resources\n</h2>\n\n<ul>\n<li><a href=\"https://modelcontextprotocol.io/\" rel=\"noopener noreferrer\">MCP Official Documentation</a></li>\n<li><a href=\"https://github.com/modelcontextprotocol/python-sdk\" rel=\"noopener noreferrer\">MCP Python SDK on GitHub</a></li>\n<li><a href=\"https://spec.modelcontextprotocol.io/\" rel=\"noopener noreferrer\">MCP Specification</a></li>\n<li><a href=\"https://github.com/modelcontextprotocol/servers\" rel=\"noopener noreferrer\">Anthropic's MCP Servers Repository</a></li>\n<li><a href=\"https://playwright.dev/python/\" rel=\"noopener noreferrer\">Playwright Python Documentation</a></li>\n<li><a href=\"https://www.crummy.com/software/BeautifulSoup/\" rel=\"noopener noreferrer\">BeautifulSoup Documentation</a></li>\n<li><a href=\"https://github.com/modelcontextprotocol\" rel=\"noopener noreferrer\">MCP Community Examples</a></li>\n</ul>\n\n<h2>\n  \n  \n  Conclusion\n</h2>\n\n<p>Building MCP servers in Python opens up powerful possibilities for extending AI assistants with custom tools and data sources. The web search and scraping capabilities demonstrated here are just the beginning—you can extend this foundation to integrate databases, APIs, file systems, and virtually any external system.</p>\n\n<p>The Model Context Protocol is still evolving, but its standardized approach to AI tool integration makes it an exciting technology for developers building the next generation of AI-powered applications. Whether you're creating internal tools for your organization or building public MCP servers for the community, Python provides an excellent foundation for rapid development and deployment.</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"LLMZ25-2 Review : Construyendo Interfaces LLM con Streamlit","url":"https://dev.to/jesus_oviedoriquelme_084/llmz25-2-review-construyendo-interfaces-llm-con-streamlit-1cb4","date":1761445121,"author":"Jesus Oviedo Riquelme","guid":315163,"unread":true,"content":"<p>Construir interfaces de usuario para aplicaciones de Modelos de Lenguaje Grande (LLM) puede ser desafiante, especialmente cuando quieres enfocarte en la lógica de IA en lugar del desarrollo frontend. <a href=\"https://streamlit.io/\" rel=\"noopener noreferrer\">Streamlit</a> resuelve este problema proporcionando un framework simple basado en Python que transforma scripts de datos en aplicaciones web interactivas en minutos.</p>\n\n<p>Esta guía te llevará a través del proceso de crear interfaces LLM con Streamlit, comparándolo con alternativas y demostrando patrones de implementación práctica usando ejemplos del mundo real.</p>\n\n<h3>\n  \n  \n  Guía Paso a Paso para Integración con Streamlit\n</h3>\n\n<h4>\n  \n  \n  Paso 1: Instalación y Configuración\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"c\"># Instalar Streamlit</span>\npip <span class=\"nb\">install </span>streamlit\n\n<span class=\"c\"># Crear tu primera app</span>\nstreamlit hello\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  Paso 2: Estructura Básica de Interfaz LLM\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">streamlit</span> <span class=\"k\">as</span> <span class=\"n\">st</span>\n<span class=\"kn\">import</span> <span class=\"n\">openai</span>\n<span class=\"kn\">from</span> <span class=\"n\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n<span class=\"c1\"># Configuración de página\n</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">set_page_config</span><span class=\"p\">(</span>\n    <span class=\"n\">page_title</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">LLM Assistant</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">page_icon</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">🤖</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">layout</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">wide</span><span class=\"sh\">\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Inicializar estado de sesión\n</span><span class=\"k\">if</span> <span class=\"sh\">\"</span><span class=\"s\">conversation</span><span class=\"sh\">\"</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">session_state</span><span class=\"p\">:</span>\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">session_state</span><span class=\"p\">.</span><span class=\"n\">conversation</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"c1\"># Barra lateral para configuración\n</span><span class=\"k\">with</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">sidebar</span><span class=\"p\">:</span>\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">header</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Configuration</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">text_input</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">OpenAI API Key</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">password</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">selectbox</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Model</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">gpt-4o-mini</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">gpt-4o</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">gpt-3.5-turbo</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n    <span class=\"n\">temperature</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">slider</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Temperature</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  Paso 3: Implementación de Interfaz de Chat\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Interfaz principal de chat\n</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">title</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">🤖 AI Legal Assistant</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Mostrar historial de conversación\n</span><span class=\"k\">for</span> <span class=\"n\">message</span> <span class=\"ow\">in</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">session_state</span><span class=\"p\">.</span><span class=\"n\">conversation</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">chat_message</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">]):</span>\n        <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">markdown</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Entrada de chat\n</span><span class=\"k\">if</span> <span class=\"n\">prompt</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">chat_input</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Ask a legal question...</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Agregar mensaje de usuario\n</span>    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">session_state</span><span class=\"p\">.</span><span class=\"n\">conversation</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">({</span>\n        <span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span> \n        <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">prompt</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">timestamp</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"nf\">now</span><span class=\"p\">()</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"c1\"># Mostrar mensaje de usuario\n</span>    <span class=\"k\">with</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">chat_message</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n        <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">markdown</span><span class=\"p\">(</span><span class=\"n\">prompt</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Generar respuesta de IA\n</span>    <span class=\"k\">with</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">chat_message</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">assistant</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">spinner</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Analyzing your question...</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n            <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"nf\">generate_legal_response</span><span class=\"p\">(</span><span class=\"n\">prompt</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">temperature</span><span class=\"p\">)</span>\n            <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">markdown</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Agregar respuesta de IA a la conversación\n</span>    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">session_state</span><span class=\"p\">.</span><span class=\"n\">conversation</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">({</span>\n        <span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">assistant</span><span class=\"sh\">\"</span><span class=\"p\">,</span> \n        <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">response</span><span class=\"p\">,</span>\n        <span class=\"sh\">\"</span><span class=\"s\">timestamp</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"nf\">now</span><span class=\"p\">()</span>\n    <span class=\"p\">})</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Comparación con Alternativas\n</h3>\n\n<h4>\n  \n  \n  Streamlit vs Gradio\n</h4>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Característica</th>\n<th>Streamlit</th>\n<th>Gradio</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Curva de Aprendizaje</strong></td>\n<td>Suave, enfocado en Python</td>\n<td>Empinada, requiere conocimiento ML</td>\n</tr>\n<tr>\n<td><strong>Personalización</strong></td>\n<td>Alta flexibilidad</td>\n<td>Limitada a componentes predefinidos</td>\n</tr>\n<tr>\n<td><strong>Despliegue</strong></td>\n<td>Múltiples opciones</td>\n<td>Principalmente Hugging Face</td>\n</tr>\n<tr>\n<td><strong>Caso de Uso</strong></td>\n<td>Apps web generales</td>\n<td>Demos y prototipos ML</td>\n</tr>\n<tr>\n<td><strong>Complejidad de Código</strong></td>\n<td>Python simple</td>\n<td>Basado en componentes</td>\n</tr>\n</tbody>\n</table></div>\n\n<h4>\n  \n  \n  Streamlit vs Flask/FastAPI\n</h4>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Característica</th>\n<th>Streamlit</th>\n<th>Flask/FastAPI</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Velocidad de Desarrollo</strong></td>\n<td>Muy rápida</td>\n<td>Moderada a lenta</td>\n</tr>\n<tr>\n<td><strong>Conocimiento Frontend</strong></td>\n<td>No requerido</td>\n<td>HTML/CSS/JS necesario</td>\n</tr>\n<tr>\n<td><strong>Desarrollo de API</strong></td>\n<td>Limitado</td>\n<td>Excelente</td>\n</tr>\n<tr>\n<td><strong>Escalabilidad</strong></td>\n<td>Buena para prototipos</td>\n<td>Excelente para producción</td>\n</tr>\n<tr>\n<td><strong>Curva de Aprendizaje</strong></td>\n<td>Mínima</td>\n<td>Empinada</td>\n</tr>\n</tbody>\n</table></div>\n\n<h3>\n  \n  \n  Caso de Estudio: Proyecto lus-laboris-py\n</h3>\n\n<p>El proyecto <strong>lus-laboris-py</strong> es un excelente ejemplo de cómo Streamlit puede complementar una aplicación existente. Actualmente, este proyecto cuenta con una API REST robusta implementada con FastAPI, pero <strong>le falta una interfaz de usuario accesible</strong>. Aquí es donde Streamlit puede agregar un valor significativo.</p>\n\n<h4>\n  \n  \n  Estado Actual del Proyecto\n</h4>\n\n<p><strong>lus-laboris-py</strong> actualmente tiene:</p>\n\n<ul>\n<li>✅ <strong>API REST completa</strong> con FastAPI</li>\n<li>✅ <strong>Sistema RAG funcional</strong> para investigación legal</li>\n<li>✅ <strong>Base de datos</strong> con documentos legales</li>\n<li>✅ <strong>Endpoints bien definidos</strong> para consultas</li>\n<li>❌ <strong>Interfaz de usuario</strong> (ausente)</li>\n</ul>\n\n<h4>\n  \n  \n  Recomendación: Agregar Streamlit como Frontend\n</h4>\n\n<p><strong>¿Por qué Streamlit es la solución perfecta para lus-laboris-py?</strong></p>\n\n<ol>\n<li>\n<strong>Complementa FastAPI</strong>: Streamlit puede consumir la API existente sin modificar el backend</li>\n<li>\n<strong>Desarrollo rápido</strong>: Se puede crear una UI completa en horas, no días</li>\n<li>\n<strong>Sin conocimientos frontend</strong>: El equipo puede enfocarse en la lógica legal, no en HTML/CSS</li>\n<li>\n<strong>Integración perfecta</strong>: Python nativo se integra naturalmente con FastAPI</li>\n</ol>\n\n<h4>\n  \n  \n  Implementación Propuesta\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># app_streamlit.py - Frontend para lus-laboris-py\n</span><span class=\"kn\">import</span> <span class=\"n\">streamlit</span> <span class=\"k\">as</span> <span class=\"n\">st</span>\n<span class=\"kn\">import</span> <span class=\"n\">requests</span>\n<span class=\"kn\">import</span> <span class=\"n\">json</span>\n\n<span class=\"c1\"># Configuración\n</span><span class=\"n\">API_BASE_URL</span> <span class=\"o\">=</span> <span class=\"sh\">\"</span><span class=\"s\">http://localhost:8000</span><span class=\"sh\">\"</span>  <span class=\"c1\"># URL de la API FastAPI\n</span>\n<span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">set_page_config</span><span class=\"p\">(</span>\n    <span class=\"n\">page_title</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Lus Laboris - Asistente Legal</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">page_icon</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">⚖️</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">layout</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">wide</span><span class=\"sh\">\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">title</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">⚖️ Lus Laboris - Asistente Legal</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Sidebar para configuración\n</span><span class=\"k\">with</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">sidebar</span><span class=\"p\">:</span>\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">header</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Configuración</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">api_url</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">text_input</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">URL de la API</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">API_BASE_URL</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Interfaz principal de consulta legal\n</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">subheader</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Consulta Legal</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">text_area</span><span class=\"p\">(</span>\n    <span class=\"sh\">\"</span><span class=\"s\">Describe tu consulta legal:</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">placeholder</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Ejemplo: ¿Cuáles son los requisitos para un contrato de trabajo?</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">100</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">button</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Consultar</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">primary</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">query</span><span class=\"p\">.</span><span class=\"nf\">strip</span><span class=\"p\">():</span>\n        <span class=\"k\">with</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">spinner</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Procesando consulta legal...</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Llamada a la API FastAPI existente\n</span>                <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">post</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">api_url</span><span class=\"si\">}</span><span class=\"s\">/query</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">query</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">query</span><span class=\"p\">},</span>\n                    <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">Content-Type</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">application/json</span><span class=\"sh\">\"</span><span class=\"p\">}</span>\n                <span class=\"p\">)</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n                    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n\n                    <span class=\"c1\"># Mostrar respuesta\n</span>                    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Consulta procesada exitosamente</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n                    <span class=\"c1\"># Respuesta principal\n</span>                    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">subheader</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Respuesta:</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n                    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">markdown</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">answer</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">No se encontró respuesta</span><span class=\"sh\">\"</span><span class=\"p\">))</span>\n\n                    <span class=\"c1\"># Documentos fuente\n</span>                    <span class=\"k\">if</span> <span class=\"sh\">\"</span><span class=\"s\">sources</span><span class=\"sh\">\"</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n                        <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">subheader</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Documentos Fuente:</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n                        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">source</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">sources</span><span class=\"sh\">\"</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n                            <span class=\"k\">with</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">expander</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Documento </span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s\">: </span><span class=\"si\">{</span><span class=\"n\">source</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">title</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Sin título</span><span class=\"sh\">'</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n                                <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"\"</span><span class=\"p\">))</span>\n                                <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">caption</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Relevancia: </span><span class=\"si\">{</span><span class=\"n\">source</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">score</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">N/A</span><span class=\"sh\">'</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n                    <span class=\"c1\"># Métricas de rendimiento\n</span>                    <span class=\"k\">if</span> <span class=\"sh\">\"</span><span class=\"s\">metrics</span><span class=\"sh\">\"</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n                        <span class=\"n\">col1</span><span class=\"p\">,</span> <span class=\"n\">col2</span><span class=\"p\">,</span> <span class=\"n\">col3</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">columns</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n                        <span class=\"k\">with</span> <span class=\"n\">col1</span><span class=\"p\">:</span>\n                            <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">metric</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Tiempo de Respuesta</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">metrics</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">response_time</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\">s</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n                        <span class=\"k\">with</span> <span class=\"n\">col2</span><span class=\"p\">:</span>\n                            <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">metric</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Documentos Recuperados</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">metrics</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">documents_found</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n                        <span class=\"k\">with</span> <span class=\"n\">col3</span><span class=\"p\">:</span>\n                            <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">metric</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Confianza</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">metrics</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">confidence</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"o\">%</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Error en la API: </span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">status_code</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n            <span class=\"k\">except</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"n\">exceptions</span><span class=\"p\">.</span><span class=\"n\">RequestException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Error de conexión: </span><span class=\"si\">{</span><span class=\"nf\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">warning</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Por favor, ingresa una consulta legal</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Sección de gestión de documentos\n</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">subheader</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Gestión de Documentos</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">tab1</span><span class=\"p\">,</span> <span class=\"n\">tab2</span><span class=\"p\">,</span> <span class=\"n\">tab3</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">tabs</span><span class=\"p\">([</span><span class=\"sh\">\"</span><span class=\"s\">Subir Documentos</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Buscar Documentos</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">Estadísticas</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n\n<span class=\"k\">with</span> <span class=\"n\">tab1</span><span class=\"p\">:</span>\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Cargar nuevos documentos legales al sistema</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">uploaded_file</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">file_uploader</span><span class=\"p\">(</span>\n        <span class=\"sh\">\"</span><span class=\"s\">Seleccionar archivo legal</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">pdf</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">docx</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">txt</span><span class=\"sh\">'</span><span class=\"p\">],</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Formatos soportados: PDF, DOCX, TXT</span><span class=\"sh\">\"</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">uploaded_file</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">button</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Procesar Documento</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n            <span class=\"k\">with</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">spinner</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Procesando documento...</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n                <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">file</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">uploaded_file</span><span class=\"p\">.</span><span class=\"nf\">getvalue</span><span class=\"p\">()}</span>\n                <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">api_url</span><span class=\"si\">}</span><span class=\"s\">/upload</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">files</span><span class=\"o\">=</span><span class=\"n\">files</span><span class=\"p\">)</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n                    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Documento procesado exitosamente</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Error al procesar el documento</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">tab2</span><span class=\"p\">:</span>\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Buscar documentos en la base de datos</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">search_query</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">text_input</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Término de búsqueda</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">button</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Buscar</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">search_query</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">spinner</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Buscando...</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n                <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">api_url</span><span class=\"si\">}</span><span class=\"s\">/search</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"sh\">\"</span><span class=\"s\">q</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">search_query</span><span class=\"p\">})</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n                    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n                    <span class=\"k\">for</span> <span class=\"n\">doc</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">documents</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"p\">[]):</span>\n                        <span class=\"k\">with</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">expander</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">title</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">Sin título</span><span class=\"sh\">'</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n                            <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">summary</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"\"</span><span class=\"p\">))</span>\n                            <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">caption</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Fecha: </span><span class=\"si\">{</span><span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">date</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">N/A</span><span class=\"sh\">'</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">tab3</span><span class=\"p\">:</span>\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Estadísticas del sistema</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Obtener estadísticas de la API\n</span>    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">stats_response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">api_url</span><span class=\"si\">}</span><span class=\"s\">/stats</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">stats_response</span><span class=\"p\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n            <span class=\"n\">stats</span> <span class=\"o\">=</span> <span class=\"n\">stats_response</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">()</span>\n\n            <span class=\"n\">col1</span><span class=\"p\">,</span> <span class=\"n\">col2</span><span class=\"p\">,</span> <span class=\"n\">col3</span><span class=\"p\">,</span> <span class=\"n\">col4</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">columns</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n            <span class=\"k\">with</span> <span class=\"n\">col1</span><span class=\"p\">:</span>\n                <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">metric</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Total Documentos</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">stats</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">total_documents</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n            <span class=\"k\">with</span> <span class=\"n\">col2</span><span class=\"p\">:</span>\n                <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">metric</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Consultas Hoy</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">stats</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">queries_today</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n            <span class=\"k\">with</span> <span class=\"n\">col3</span><span class=\"p\">:</span>\n                <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">metric</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Tiempo Promedio</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">stats</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">avg_response_time</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">2</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s\">s</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n            <span class=\"k\">with</span> <span class=\"n\">col4</span><span class=\"p\">:</span>\n                <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">metric</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Tasa de Éxito</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"si\">{</span><span class=\"n\">stats</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">success_rate</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"si\">:</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"o\">%</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Gráfico de consultas por día\n</span>            <span class=\"k\">if</span> <span class=\"sh\">\"</span><span class=\"s\">daily_queries</span><span class=\"sh\">\"</span> <span class=\"ow\">in</span> <span class=\"n\">stats</span><span class=\"p\">:</span>\n                <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">subheader</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Consultas por Día</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n                <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">line_chart</span><span class=\"p\">(</span><span class=\"n\">stats</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">daily_queries</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n\n    <span class=\"k\">except</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"n\">exceptions</span><span class=\"p\">.</span><span class=\"n\">RequestException</span><span class=\"p\">:</span>\n        <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">No se pudieron cargar las estadísticas</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Footer\n</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">markdown</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">---</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">markdown</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">**Lus Laboris** - Sistema de Investigación Legal Asistida por IA</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">caption</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Powered by FastAPI + Streamlit + RAG</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  Beneficios de esta Implementación\n</h4>\n\n<ol>\n<li>\n<strong>Reutilización del Backend</strong>: No se modifica la API FastAPI existente</li>\n<li>\n<strong>UI Completa</strong>: Interfaz intuitiva para usuarios no técnicos</li>\n<li>\n<strong>Desarrollo Rápido</strong>: Implementación en horas, no semanas</li>\n<li>\n<strong>Mantenimiento Simple</strong>: Un solo archivo Python para toda la UI</li>\n<li>\n<strong>Escalabilidad</strong>: Fácil despliegue con Streamlit Cloud</li>\n</ol>\n\n<h4>\n  \n  \n  Arquitectura Propuesta\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>lus-laboris-py/\n├── api/                    # Backend FastAPI existente\n│   ├── main.py\n│   ├── models/\n│   └── routes/\n├── frontend/               # Nuevo frontend Streamlit\n│   ├── app_streamlit.py   # Aplicación principal\n│   ├── components/        # Componentes reutilizables\n│   └── utils/             # Utilidades\n├── data/                  # Documentos legales\n└── requirements.txt       # Dependencias actualizadas\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Patrones de Diseño Comunes\n</h3>\n\n<h4>\n  \n  \n  Patrón 1: Aplicaciones Multi-Página\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Navegación de páginas\n</span><span class=\"n\">pages</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"sh\">\"</span><span class=\"s\">Chat</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">chat_page</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">Documents</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">documents_page</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">Analytics</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">analytics_page</span><span class=\"p\">,</span>\n    <span class=\"sh\">\"</span><span class=\"s\">Settings</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">settings_page</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">selected_page</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">sidebar</span><span class=\"p\">.</span><span class=\"nf\">selectbox</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Navigate</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"n\">pages</span><span class=\"p\">.</span><span class=\"nf\">keys</span><span class=\"p\">()))</span>\n<span class=\"n\">pages</span><span class=\"p\">[</span><span class=\"n\">selected_page</span><span class=\"p\">]()</span>\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  Patrón 2: Actualizaciones en Tiempo Real\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Auto-refresh para datos en tiempo real\n</span><span class=\"k\">if</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">button</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Enable Real-time Updates</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n    <span class=\"n\">placeholder</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">empty</span><span class=\"p\">()</span>\n\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">latest_data</span> <span class=\"o\">=</span> <span class=\"nf\">fetch_latest_data</span><span class=\"p\">()</span>\n        <span class=\"n\">placeholder</span><span class=\"p\">.</span><span class=\"nf\">json</span><span class=\"p\">(</span><span class=\"n\">latest_data</span><span class=\"p\">)</span>\n        <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"c1\"># Actualizar cada 5 segundos\n</span></code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  Patrón 3: Pipeline de Procesamiento de Archivos\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Procesamiento de archivos con progreso\n</span><span class=\"k\">def</span> <span class=\"nf\">process_files</span><span class=\"p\">(</span><span class=\"n\">uploaded_files</span><span class=\"p\">):</span>\n    <span class=\"n\">progress_bar</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">progress</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">status_text</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">empty</span><span class=\"p\">()</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"nb\">file</span> <span class=\"ow\">in</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">uploaded_files</span><span class=\"p\">):</span>\n        <span class=\"n\">status_text</span><span class=\"p\">.</span><span class=\"nf\">text</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">Processing </span><span class=\"si\">{</span><span class=\"nb\">file</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">...</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n        <span class=\"nf\">process_single_file</span><span class=\"p\">(</span><span class=\"nb\">file</span><span class=\"p\">)</span>\n        <span class=\"n\">progress_bar</span><span class=\"p\">.</span><span class=\"nf\">progress</span><span class=\"p\">((</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">uploaded_files</span><span class=\"p\">))</span>\n\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">All files processed!</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Tips de Despliegue\n</h3>\n\n<h4>\n  \n  \n  1. Streamlit Community Cloud\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code><span class=\"c1\"># .streamlit/config.toml</span>\n<span class=\"pi\">[</span><span class=\"nv\">server</span><span class=\"pi\">]</span>\n<span class=\"s\">port = </span><span class=\"m\">8501</span>\n<span class=\"s\">headless = </span><span class=\"kc\">true</span>\n\n<span class=\"pi\">[</span><span class=\"nv\">browser</span><span class=\"pi\">]</span>\n<span class=\"s\">gatherUsageStats = </span><span class=\"kc\">false</span>\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  2. Despliegue con Docker\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight docker\"><code><span class=\"k\">FROM</span><span class=\"s\"> python:3.11-slim</span>\n\n<span class=\"k\">WORKDIR</span><span class=\"s\"> /app</span>\n<span class=\"k\">COPY</span><span class=\"s\"> requirements.txt .</span>\n<span class=\"k\">RUN </span>pip <span class=\"nb\">install</span> <span class=\"nt\">-r</span> requirements.txt\n\n<span class=\"k\">COPY</span><span class=\"s\"> . .</span>\n<span class=\"k\">EXPOSE</span><span class=\"s\"> 8501</span>\n\n<span class=\"k\">CMD</span><span class=\"s\"> [\"streamlit\", \"run\", \"app_streamlit.py\", \"--server.port=8501\", \"--server.address=0.0.0.0\"]</span>\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  3. Configuración de Ambiente\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Variables de ambiente\n</span><span class=\"kn\">import</span> <span class=\"n\">os</span>\n<span class=\"kn\">from</span> <span class=\"n\">dotenv</span> <span class=\"kn\">import</span> <span class=\"n\">load_dotenv</span>\n\n<span class=\"nf\">load_dotenv</span><span class=\"p\">()</span>\n\n<span class=\"n\">OPENAI_API_KEY</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getenv</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">OPENAI_API_KEY</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">DATABASE_URL</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getenv</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">DATABASE_URL</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">API_BASE_URL</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getenv</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">API_BASE_URL</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">http://localhost:8000</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">DEBUG_MODE</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"nf\">getenv</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">DEBUG_MODE</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">False</span><span class=\"sh\">\"</span><span class=\"p\">).</span><span class=\"nf\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"sh\">\"</span><span class=\"s\">true</span><span class=\"sh\">\"</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Optimización de Rendimiento\n</h3>\n\n<h4>\n  \n  \n  1. Caché\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nd\">@st.cache_data</span>\n<span class=\"k\">def</span> <span class=\"nf\">load_legal_documents</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"nf\">load_documents_from_database</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@st.cache_resource</span>\n<span class=\"k\">def</span> <span class=\"nf\">initialize_llm_model</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"nf\">load_llm_model</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  2. Operaciones Asíncronas\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"n\">aiohttp</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">fetch_legal_data_async</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">aiohttp</span><span class=\"p\">.</span><span class=\"nc\">ClientSession</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n        <span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nf\">fetch_url</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">url</span> <span class=\"ow\">in</span> <span class=\"n\">urls</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"p\">.</span><span class=\"nf\">gather</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">tasks</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  3. Connection Pooling de Base de Datos\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"n\">sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">create_engine</span>\n<span class=\"kn\">from</span> <span class=\"n\">sqlalchemy.pool</span> <span class=\"kn\">import</span> <span class=\"n\">QueuePool</span>\n\n<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"nf\">create_engine</span><span class=\"p\">(</span>\n    <span class=\"n\">DATABASE_URL</span><span class=\"p\">,</span>\n    <span class=\"n\">poolclass</span><span class=\"o\">=</span><span class=\"n\">QueuePool</span><span class=\"p\">,</span>\n    <span class=\"n\">pool_size</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"n\">max_overflow</span><span class=\"o\">=</span><span class=\"mi\">20</span>\n<span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Mejores Prácticas\n</h3>\n\n<ol>\n<li>\n<strong>Gestión de Estado de Sesión</strong>: Usa <code>st.session_state</code> para mantener datos de usuario</li>\n<li>\n<strong>Manejo de Errores</strong>: Implementa manejo comprensivo de errores para llamadas API</li>\n<li>\n<strong>Estados de Carga</strong>: Siempre muestra indicadores de carga para operaciones largas</li>\n<li>\n<strong>Diseño Responsivo</strong>: Usa columnas y contenedores para mejor layout</li>\n<li>\n<strong>Seguridad</strong>: Nunca expongas API keys en código del lado del cliente</li>\n<li>\n<strong>Testing</strong>: Escribe pruebas unitarias para tus funciones de lógica central</li>\n</ol>\n\n\n\n\n<p><strong>Recursos:</strong></p>\n\n<ul>\n<li><a href=\"https://streamlit.io/\" rel=\"noopener noreferrer\">Sitio Web Oficial de Streamlit</a></li>\n<li><a href=\"https://docs.streamlit.io/\" rel=\"noopener noreferrer\">Documentación de Streamlit</a></li>\n<li><a href=\"https://streamlit.io/cloud\" rel=\"noopener noreferrer\">Streamlit Community Cloud</a></li>\n<li><a href=\"https://github.com/jesusoviedo/lus-laboris-py\" rel=\"noopener noreferrer\">Repositorio lus-laboris-py</a></li>\n<li><a href=\"https://streamlit.io/gallery\" rel=\"noopener noreferrer\">Galería de Streamlit</a></li>\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"LLMZ25-1 Review : Streamlit La Herramienta Perfecta para Interfaces de Proyectos LLM","url":"https://dev.to/jesus_oviedoriquelme_084/llmz25-1-review-streamlit-la-herramienta-perfecta-para-interfaces-de-proyectos-llm-4j76","date":1761444970,"author":"Jesus Oviedo Riquelme","guid":315162,"unread":true,"content":"<p><a href=\"https://streamlit.io/\" rel=\"noopener noreferrer\">Streamlit</a> ha revolucionado la forma en que los desarrolladores crean aplicaciones web interactivas para proyectos de ciencia de datos y machine learning. Con su enfoque basado en Python simple, se ha convertido en el framework de referencia para construir interfaces de LLM (Modelos de Lenguaje Grande), haciendo que las aplicaciones de IA complejas sean accesibles para usuarios sin requerir conocimientos extensos de desarrollo frontend.</p>\n\n<h3>\n  \n  \n  Por qué Streamlit es Ideal para Proyectos LLM\n</h3>\n\n<p>Streamlit ofrece varias ventajas clave que lo hacen perfecto para aplicaciones LLM:</p>\n\n<ol>\n<li>\n<strong>Prototipado Rápido</strong>: Transforma scripts de Python en aplicaciones web en minutos</li>\n<li>\n<strong>Sin Conocimientos de Frontend</strong>: Desarrollo puro en Python</li>\n<li>\n<strong>Ecosistema Rico de Widgets</strong>: Componentes integrados para entrada de texto, interfaces de chat y visualización de datos</li>\n<li>\n<strong>Gestión de Estado de Sesión</strong>: Perfecto para mantener historial de conversaciones</li>\n<li>\n<strong>Actualizaciones en Tiempo Real</strong>: Actualización automática de UI cuando cambian los datos</li>\n<li>\n<strong>Despliegue Fácil</strong>: Despliegue con un clic a Streamlit Community Cloud</li>\n</ol>\n\n<h3>\n  \n  \n  Caso de Estudio: LegalMind - Un Asistente Legal Basado en RAG\n</h3>\n\n<p>Examinemos cómo se implementó Streamlit en <strong>LegalMind</strong>, un asistente legal sofisticado para el sistema de justicia criminal de India.</p>\n\n<h4>\n  \n  \n  Características Clave Implementadas\n</h4>\n\n<p><strong>1. Interfaz de Chat Interactiva</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">with</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">form</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">chat_form</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">clear_on_submit</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">):</span>\n    <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">text_input</span><span class=\"p\">(</span>\n        <span class=\"sh\">\"</span><span class=\"s\">Ask a legal question:</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"n\">placeholder</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">Type your question here...</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n        <span class=\"n\">disabled</span><span class=\"o\">=</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">session_state</span><span class=\"p\">.</span><span class=\"n\">is_generating</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">submitted</span> <span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">form_submit_button</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Send</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>2. Streaming de Respuesta en Tiempo Real</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Visualización incremental de respuesta\n</span><span class=\"n\">final_answer</span> <span class=\"o\">=</span> <span class=\"sh\">\"\"</span>\n<span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">answer</span><span class=\"p\">:</span>\n    <span class=\"n\">final_answer</span> <span class=\"o\">+=</span> <span class=\"n\">char</span>\n    <span class=\"n\">placeholder</span><span class=\"p\">.</span><span class=\"nf\">markdown</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"\"\"</span><span class=\"s\">\n        &lt;div style=</span><span class=\"sh\">'</span><span class=\"s\">padding:15px; margin:10px 0; border-radius:12px; background-color:#1e1e1e;</span><span class=\"sh\">'</span><span class=\"s\">&gt;\n            &lt;p&gt;&lt;strong&gt;🧑‍💼 Q:&lt;/strong&gt; </span><span class=\"si\">{</span><span class=\"n\">query</span><span class=\"si\">}</span><span class=\"s\">&lt;/p&gt;\n            &lt;div style=</span><span class=\"sh\">'</span><span class=\"s\">margin-top:5px;</span><span class=\"sh\">'</span><span class=\"s\">&gt;\n                &lt;strong&gt;🤖 A:&lt;/strong&gt; </span><span class=\"si\">{</span><span class=\"n\">final_answer</span><span class=\"si\">}</span><span class=\"s\"> ▌\n            &lt;/div&gt;\n        &lt;/div&gt;\n    </span><span class=\"sh\">\"\"\"</span><span class=\"p\">,</span> <span class=\"n\">unsafe_allow_html</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>  <span class=\"c1\"># Streaming carácter por carácter\n</span></code></pre>\n\n</div>\n\n\n\n<p><strong>3. Recolección de Feedback de Usuario</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">save_feedback</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">chat</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">task</span><span class=\"p\">():</span>\n        <span class=\"k\">with</span> <span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"nf\">connect</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n            <span class=\"n\">conn</span><span class=\"p\">.</span><span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"nf\">text</span><span class=\"p\">(</span>\n                <span class=\"sh\">\"</span><span class=\"s\">INSERT INTO feedback (query,response,feedback,timestamp,latency,answer_length) </span><span class=\"sh\">\"</span>\n                <span class=\"sh\">\"</span><span class=\"s\">VALUES (:q,:r,:f,:t,:l,:al)</span><span class=\"sh\">\"</span>\n            <span class=\"p\">),</span> <span class=\"p\">{</span>\n                <span class=\"sh\">\"</span><span class=\"s\">q</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">chat</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">query</span><span class=\"sh\">'</span><span class=\"p\">],</span>\n                <span class=\"sh\">\"</span><span class=\"s\">r</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">chat</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">answer</span><span class=\"sh\">'</span><span class=\"p\">],</span>\n                <span class=\"sh\">\"</span><span class=\"s\">f</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">chat</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">feedback</span><span class=\"sh\">'</span><span class=\"p\">],</span>\n                <span class=\"sh\">\"</span><span class=\"s\">t</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">chat</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">timestamp</span><span class=\"sh\">'</span><span class=\"p\">],</span>\n                <span class=\"sh\">\"</span><span class=\"s\">l</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">chat</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">latency</span><span class=\"sh\">'</span><span class=\"p\">],</span>\n                <span class=\"sh\">\"</span><span class=\"s\">al</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">chat</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">answer</span><span class=\"sh\">'</span><span class=\"p\">])</span>\n            <span class=\"p\">})</span>\n            <span class=\"n\">conn</span><span class=\"p\">.</span><span class=\"nf\">commit</span><span class=\"p\">()</span>\n    <span class=\"n\">threading</span><span class=\"p\">.</span><span class=\"nc\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">task</span><span class=\"p\">).</span><span class=\"nf\">start</span><span class=\"p\">()</span>\n</code></pre>\n\n</div>\n\n\n\n<p><strong>4. Dashboard de Analíticas Completo</strong><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"c1\"># Dashboard con 6+ visualizaciones\n</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">bar_chart</span><span class=\"p\">(</span><span class=\"n\">df_feedback</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">feedback</span><span class=\"sh\">'</span><span class=\"p\">].</span><span class=\"nf\">value_counts</span><span class=\"p\">())</span>  <span class=\"c1\"># Distribución de feedback\n</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">bar_chart</span><span class=\"p\">(</span><span class=\"n\">df_feedback</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">latency</span><span class=\"sh\">'</span><span class=\"p\">])</span>                  <span class=\"c1\"># Tiempo de respuesta\n</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">bar_chart</span><span class=\"p\">(</span><span class=\"n\">df_feedback</span><span class=\"p\">[</span><span class=\"sh\">'</span><span class=\"s\">answer_length</span><span class=\"sh\">'</span><span class=\"p\">])</span>            <span class=\"c1\"># Longitud de respuesta\n</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">line_chart</span><span class=\"p\">(</span><span class=\"n\">avg_length</span><span class=\"p\">)</span>                             <span class=\"c1\"># Tendencias en el tiempo\n</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">image</span><span class=\"p\">(</span><span class=\"n\">wordcloud</span><span class=\"p\">.</span><span class=\"nf\">to_array</span><span class=\"p\">())</span>                        <span class=\"c1\"># Nube de palabras\n</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">bar_chart</span><span class=\"p\">(</span><span class=\"n\">top_words</span><span class=\"p\">.</span><span class=\"nf\">set_index</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">Keyword</span><span class=\"sh\">'</span><span class=\"p\">))</span>         <span class=\"c1\"># Palabras clave principales\n</span></code></pre>\n\n</div>\n\n\n\n<h4>\n  \n  \n  Arquitectura Técnica\n</h4>\n\n<p>La aplicación LegalMind demuestra un sistema RAG (Retrieval-Augmented Generation) completo:</p>\n\n<ol>\n<li>\n<strong>Frontend</strong>: UI Streamlit con interfaz de chat y dashboard</li>\n<li>\n<strong>Backend</strong>: Pipeline RAG con búsqueda híbrida (Elasticsearch + Qdrant)</li>\n<li>\n<strong>Base de Datos</strong>: PostgreSQL para almacenamiento de feedback</li>\n<li>\n<strong>Integración LLM</strong>: OpenAI GPT-4o-mini vía API</li>\n</ol>\n\n<h3>\n  \n  \n  Mejores Prácticas Demostradas\n</h3>\n\n<ol>\n<li>\n<strong>Gestión de Estado de Sesión</strong>: Manejo apropiado del historial de chat y estado del usuario</li>\n<li>\n<strong>Integración de Base de Datos</strong>: PostgreSQL para almacenamiento persistente de datos</li>\n<li>\n<strong>Manejo de Errores</strong>: Manejo elegante de fallos de API y casos edge</li>\n<li>\n<strong>Optimización de Rendimiento</strong>: Threading para operaciones de base de datos no bloqueantes</li>\n<li>\n<strong>Experiencia de Usuario</strong>: Feedback en tiempo real, estados de carga y diseño responsivo</li>\n</ol>\n\n<h3>\n  \n  \n  Ejemplo de Código: Interfaz de Chat LLM Básica\n</h3>\n\n<p>Aquí hay una versión simplificada de cómo crear una interfaz de chat LLM con Streamlit:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"n\">streamlit</span> <span class=\"k\">as</span> <span class=\"n\">st</span>\n<span class=\"kn\">from</span> <span class=\"n\">openai</span> <span class=\"kn\">import</span> <span class=\"n\">OpenAI</span>\n\n<span class=\"c1\"># Inicializar cliente OpenAI\n</span><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"nc\">OpenAI</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">your-api-key</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Configuración de página\n</span><span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">set_page_config</span><span class=\"p\">(</span><span class=\"n\">page_title</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">LLM Chat Assistant</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"n\">layout</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">wide</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">title</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">🤖 AI Assistant</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Inicializar estado de sesión\n</span><span class=\"k\">if</span> <span class=\"sh\">\"</span><span class=\"s\">messages</span><span class=\"sh\">\"</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">session_state</span><span class=\"p\">:</span>\n    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">session_state</span><span class=\"p\">.</span><span class=\"n\">messages</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"c1\"># Mostrar historial de chat\n</span><span class=\"k\">for</span> <span class=\"n\">message</span> <span class=\"ow\">in</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">session_state</span><span class=\"p\">.</span><span class=\"n\">messages</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">chat_message</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">]):</span>\n        <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">markdown</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Entrada de chat\n</span><span class=\"k\">if</span> <span class=\"n\">prompt</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">chat_input</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">What would you like to know?</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Agregar mensaje de usuario\n</span>    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">session_state</span><span class=\"p\">.</span><span class=\"n\">messages</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">({</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">prompt</span><span class=\"p\">})</span>\n\n    <span class=\"c1\"># Mostrar mensaje de usuario\n</span>    <span class=\"k\">with</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">chat_message</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">user</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n        <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">markdown</span><span class=\"p\">(</span><span class=\"n\">prompt</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Generar respuesta de IA\n</span>    <span class=\"k\">with</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">chat_message</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">assistant</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">spinner</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Thinking...</span><span class=\"sh\">\"</span><span class=\"p\">):</span>\n            <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">chat</span><span class=\"p\">.</span><span class=\"n\">completions</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span>\n                <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"sh\">\"</span><span class=\"s\">gpt-4o-mini</span><span class=\"sh\">\"</span><span class=\"p\">,</span>\n                <span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"p\">[{</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">m</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">m</span><span class=\"p\">[</span><span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">]}</span> <span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">session_state</span><span class=\"p\">.</span><span class=\"n\">messages</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">choices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">content</span>\n\n        <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"nf\">markdown</span><span class=\"p\">(</span><span class=\"n\">answer</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Agregar respuesta de IA al historial\n</span>    <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">session_state</span><span class=\"p\">.</span><span class=\"n\">messages</span><span class=\"p\">.</span><span class=\"nf\">append</span><span class=\"p\">({</span><span class=\"sh\">\"</span><span class=\"s\">role</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"sh\">\"</span><span class=\"s\">assistant</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">content</span><span class=\"sh\">\"</span><span class=\"p\">:</span> <span class=\"n\">answer</span><span class=\"p\">})</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  Despliegue Hecho Fácil\n</h3>\n\n<p>Streamlit ofrece múltiples opciones de despliegue:</p>\n\n<ol>\n<li>\n<strong>Streamlit Community Cloud</strong>: Hosting gratuito para aplicaciones públicas</li>\n<li>\n<strong>Docker</strong>: Containerizar tu aplicación</li>\n<li>\n<strong>Plataformas Cloud</strong>: Desplegar en AWS, GCP o Azure</li>\n<li>\n<strong>Desarrollo Local</strong>: Ejecutar con <code>streamlit run app.py</code>\n</li>\n</ol>\n\n<h3>\n  \n  \n  Conclusión\n</h3>\n\n<p>Streamlit ha demostrado ser una excelente opción para interfaces de proyectos LLM, como lo demuestra el proyecto LegalMind. Su simplicidad, características poderosas y ecosistema extenso lo convierten en la herramienta perfecta para desarrolladores que quieren enfocarse en la lógica de IA en lugar del desarrollo frontend.</p>\n\n<p>La combinación de la facilidad de uso de Streamlit con aplicaciones LLM sofisticadas crea interfaces poderosas y amigables para el usuario que pueden ser desplegadas rápidamente y mantenidas fácilmente.</p>\n\n\n\n\n<p><strong>Recursos:</strong></p>\n\n<ul>\n<li><a href=\"https://streamlit.io/\" rel=\"noopener noreferrer\">Sitio Web Oficial de Streamlit</a></li>\n<li><a href=\"https://docs.streamlit.io/\" rel=\"noopener noreferrer\">Documentación de Streamlit</a></li>\n<li><a href=\"https://streamlit.io/cloud\" rel=\"noopener noreferrer\">Streamlit Community Cloud</a></li>\n<li><a href=\"https://github.com/Tejanshu9/LegalMind\" rel=\"noopener noreferrer\">Repositorio del Proyecto LegalMind</a></li>\n<li><a href=\"https://streamlit.io/gallery\" rel=\"noopener noreferrer\">Galería de Streamlit</a></li>\n</ul>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: How to Write Production Python Code","url":"https://dev.to/vibe_youtube/tech-with-tim-how-to-write-production-python-code-5dd8","date":1761444447,"author":"Vibe YouTube","guid":315161,"unread":true,"content":"<p>Tim breaks down how to write rock-solid production Python code, walking through eight core principles (with handy timestamps) to help you level up from junior to senior dev—all backed by real-world examples you can drop right into your own projects.</p>\n\n<p>He also slings a 25% off code for boot.dev, plugs his DevLaunch mentorship for no-fluff, hands-on guidance, and links to a newsletter where you can grab the exact sample code used in the video.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=qU3Rc6_B9es\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"ProofFlow: The Transparent AI Ledger","url":"https://dev.to/p_thabiwa_0ca34c2f83/proofflow-the-transparent-ai-ledger-1n36","date":1761443121,"author":"Peace Thabiwa","guid":315160,"unread":true,"content":"<p>💡 The Problem</p>\n\n<p>Current AI pipelines are black boxes.<br>\nWe have no idea where the data came from, who contributed, or how often code is reused.</p>\n\n<p>💥 The BINFLOW Solution</p>\n\n<p>ProofFlow introduces Proof of Leverage (PoL) — a ledger system where each dataset, model, and agent gains value based on how many times it’s reused and how effectively it flows through systems.</p>\n\n<p>🧩 MVP Markup<br>\nCREATE TABLE leverage_ledger (<br>\n  id UUID,<br>\n  source TEXT,<br>\n  phase TEXT,<br>\n  reuse_count INT,<br>\n  impact_score FLOAT,<br>\n  last_used TIMESTAMPTZ<br>\n);</p>\n\n<p>🌍 Real-World Impact</p>\n\n<p>No more “trust the model.”<br>\nNow you can trace every influence — from dataset to decision.<br>\nAI becomes accountable, auditable, and transparent.</p>\n\n<p>🤝 Open Source Call</p>\n\n<p>We’re opening the ledger API for integration with open models.<br>\nHelp make traceable AI a standard for the Web4 era.</p>\n\n<p>By Peace Thabiwa 🇧🇼 — SAGEWORKS_AI | The BINFLOW Initiative</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Dictionary in Python (3)","url":"https://dev.to/hyperkai/dictionary-in-python-4-3cif","date":1761441255,"author":"Super Kai (Kazuya Ito)","guid":315138,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>☕</p>\n\n<p>*Memo:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-1-2ofj\">My post</a> explains a dictionary (1).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-2-23f0\">My post</a> explains a dictionary (2).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-5-1fco\">My post</a> explains a dictionary (4).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-6-5672\">My post</a> explains a dictionary (5).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-3-42e8\">My post</a> explains a dictionary (6).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-4-20p5\">My post</a> explains a dictionary (7).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-5-34b\">My post</a> explains a dictionary (8).</li>\n</ul>\n\n<p>A non-empty dictionary and empty dictionary are:</p>\n\n<ul>\n<li>\n<code>True</code> and <code>False</code>, checking them with <a href=\"https://docs.python.org/3/library/functions.html#bool\" rel=\"noopener noreferrer\">bool()</a> respectively.</li>\n<li>\n<code>False</code> and <code>True</code>, inverting their truth values with <code>not</code> keyword respectively.</li>\n</ul>\n\n<h3>\n  \n  \n  &lt;<strong>dict</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">bool</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">}))</span>   <span class=\"c1\"># dict\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">bool</span><span class=\"p\">({():{}}))</span> <span class=\"c1\"># dict(Empty tuple:Empty dict)\n# True\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">bool</span><span class=\"p\">({}))</span> <span class=\"c1\"># Empty dict\n# False\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">})</span>   <span class=\"c1\"># dict\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"p\">{():{}})</span> <span class=\"c1\"># dict(Empty tuple:Empty dict)\n# False\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"p\">{})</span> <span class=\"c1\"># Empty dict\n# True\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.keys()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">bool</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()))</span>   <span class=\"c1\"># dict.keys()\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">bool</span><span class=\"p\">({():{}}.</span><span class=\"nf\">keys</span><span class=\"p\">()))</span> <span class=\"c1\"># dict(Empty tuple:Empty dict).keys()\n# True\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">bool</span><span class=\"p\">({}.</span><span class=\"nf\">keys</span><span class=\"p\">()))</span> <span class=\"c1\"># Empty dict.keys()\n# False\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span>   <span class=\"c1\"># dict.keys()\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"p\">{():{}}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span> <span class=\"c1\"># dict(Empty tuple:Empty dict).keys()\n# False\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"p\">{}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span> <span class=\"c1\"># Empty dict.keys()\n# True\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.values()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">bool</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()))</span>   <span class=\"c1\"># dict.values()\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">bool</span><span class=\"p\">({():{}}.</span><span class=\"nf\">values</span><span class=\"p\">()))</span> <span class=\"c1\"># dict(Empty tuple:Empty dict).values()\n# True\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">bool</span><span class=\"p\">({}.</span><span class=\"nf\">values</span><span class=\"p\">()))</span> <span class=\"c1\"># Empty dict.values()\n# False\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">())</span>   <span class=\"c1\"># dict.values()\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"p\">{():{}}.</span><span class=\"nf\">values</span><span class=\"p\">())</span> <span class=\"c1\"># dict(Empty tuple:Empty dict).values()\n# False\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"p\">{}.</span><span class=\"nf\">values</span><span class=\"p\">())</span> <span class=\"c1\"># Empty dict.values()\n# True\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.items()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">bool</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()))</span>   <span class=\"c1\"># dict.items()\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">bool</span><span class=\"p\">({():{}}.</span><span class=\"nf\">items</span><span class=\"p\">()))</span> <span class=\"c1\"># dict(Empty tuple:Empty dict).items()\n# True\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">bool</span><span class=\"p\">({}.</span><span class=\"nf\">items</span><span class=\"p\">()))</span> <span class=\"c1\"># Empty dict.items()\n# False\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">())</span>   <span class=\"c1\"># dict.items()\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"p\">{():{}}.</span><span class=\"nf\">items</span><span class=\"p\">())</span> <span class=\"c1\"># dict(Empty tuple:Empty dict).items()\n# False\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"p\">{}.</span><span class=\"nf\">items</span><span class=\"p\">())</span> <span class=\"c1\"># Empty dict.items()\n# True\n</span></code></pre>\n\n</div>\n\n\n\n<p>A dictionary can be checked if a specific key and/or value are and aren't in the dictionary with <code>in</code> keyword and with <code>not</code> and <code>in</code> keyword respectively as shown below:</p>\n\n<h3>\n  \n  \n  &lt;<strong>dict &amp; dict.keys()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">}}</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">}}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># True\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">((</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># False\n</span>\n<span class=\"nf\">print</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># TypeError: unhashable type: 'list'\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">}}</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">}}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># # {'A': 'B', 'C': {'D': 'E'}}\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># False\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">((</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># True\n</span>\n<span class=\"nf\">print</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">]</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># TypeError: unhashable type: 'list'\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.values()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">}}.</span><span class=\"nf\">values</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">}</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># True\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">}]</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># False\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">}}.</span><span class=\"nf\">values</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">}</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># False\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">([</span><span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">}]</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># True\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.items()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">}}.</span><span class=\"nf\">items</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">((</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">((</span><span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">})</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># True\n</span>\n<span class=\"nf\">print</span><span class=\"p\">((</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">}</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">([(</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">})]</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># False\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">:{</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">}}.</span><span class=\"nf\">items</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">((</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">((</span><span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">})</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># False\n</span>\n<span class=\"nf\">print</span><span class=\"p\">((</span><span class=\"sh\">'</span><span class=\"s\">a</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">b</span><span class=\"sh\">'</span><span class=\"p\">)</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">}</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">([(</span><span class=\"sh\">'</span><span class=\"s\">A</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">B</span><span class=\"sh\">'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"sh\">'</span><span class=\"s\">C</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">D</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">E</span><span class=\"sh\">'</span><span class=\"p\">})]</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># True\n</span></code></pre>\n\n</div>\n\n\n\n<p>A dictionary can be checked if the dictionary is and isn't referred to by two variables with <code>is</code> keyword and with <code>is</code> and <code>not</code> keyword respectively as shown below:</p>\n\n<p>*Memo:</p>\n\n<ul>\n<li>Dictionary(Dict) literals with <code>is</code> keyword and with <code>is</code> and <code>not</code> keyword don't get warnings respectively.</li>\n</ul>\n\n<h3>\n  \n  \n  &lt;<strong>dict</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}</span>\n<span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">v1</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># True\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># False\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}</span> <span class=\"ow\">is</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">})</span> <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}</span> <span class=\"ow\">is</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">})</span>      <span class=\"c1\"># False\n</span>\n<span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">})</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">})</span>      <span class=\"c1\"># True\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.keys()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span>\n<span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">v1</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># True\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># False\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span> <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span>      <span class=\"c1\"># False\n</span>\n<span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span>      <span class=\"c1\"># True\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.values()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span>\n<span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">v1</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># True\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># False\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">())</span> <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">())</span>      <span class=\"c1\"># False\n</span>\n<span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">())</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">())</span>      <span class=\"c1\"># True\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.items()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span>\n<span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">v1</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># True\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">v3</span><span class=\"p\">)</span> <span class=\"c1\"># False\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">())</span> <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">())</span>      <span class=\"c1\"># False\n</span>\n<span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">())</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">())</span>      <span class=\"c1\"># True\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Dictionary in Python (4)","url":"https://dev.to/hyperkai/dictionary-in-python-5-1fco","date":1761441043,"author":"Super Kai (Kazuya Ito)","guid":315137,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>☕</p>\n\n<p>*Memo:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-1-2ofj\">My post</a> explains a dictionary (1).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-2-23f0\">My post</a> explains a dictionary (2).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-4-3cif\">My post</a> explains a dictionary (3).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-6-5672\">My post</a> explains a dictionary (5).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-3-42e8\">My post</a> explains a dictionary (6).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-4-20p5\">My post</a> explains a dictionary (7).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-5-34b\">My post</a> explains a dictionary (8).</li>\n</ul>\n\n<p>A dictionary and other dictionary can be checked if all the keys and/or values in them are and aren't the same with <code>==</code> and <code>!=</code> respectively as shown below:</p>\n\n<h3>\n  \n  \n  &lt;<strong>dict</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">})</span>      <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">})</span>           <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">})</span>           <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">})</span> <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">})</span> <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{})</span>                   <span class=\"c1\"># False\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">})</span>      <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">})</span>           <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">})</span>           <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">})</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">})</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{})</span>                   <span class=\"c1\"># True\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.keys()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span>      <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span>           <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span>           <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span> <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span> <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span>                   <span class=\"c1\"># False\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span>      <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span>           <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span>           <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span>                   <span class=\"c1\"># True\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.values()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">())</span>      <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">())</span>           <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">())</span>           <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">())</span> <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">())</span> <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{}.</span><span class=\"nf\">values</span><span class=\"p\">())</span>                   <span class=\"c1\"># False\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">())</span>      <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">())</span>           <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">())</span>           <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">())</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">())</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{}.</span><span class=\"nf\">values</span><span class=\"p\">())</span>                   <span class=\"c1\"># True\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.items()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">())</span>      <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">())</span>           <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">())</span>           <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">())</span> <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">())</span> <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">{}.</span><span class=\"nf\">items</span><span class=\"p\">())</span>                   <span class=\"c1\"># False\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">())</span>      <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">())</span>           <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">())</span>           <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">())</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">())</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"p\">{}.</span><span class=\"nf\">items</span><span class=\"p\">())</span>                   <span class=\"c1\"># True\n</span></code></pre>\n\n</div>\n\n\n\n<p>A dictionary and other dictionary can be checked if only all the keys or both all the keys and values in:</p>\n\n<ul>\n<li>the dictionary are in other dictionary with <code>&lt;=</code>.</li>\n<li>other dictionary are in the dictionary with <code>&gt;=</code>.</li>\n<li>the dictionary and other elements are in other dictionary with <code>&lt;</code>.</li>\n<li>other dictionary and other elements are in the dictionary with <code>&gt;</code>.</li>\n</ul>\n\n<p>*Memo:</p>\n\n<ul>\n<li>Only all the values cannot be checked.</li>\n<li>\n<a href=\"https://docs.python.org/3/library/stdtypes.html#dict.keys\" rel=\"noopener noreferrer\">dict.keys()</a> and <a href=\"https://docs.python.org/3/library/stdtypes.html#dict.items\" rel=\"noopener noreferrer\">dict.items()</a> work.</li>\n<li>\n<code>dict</code> and <a href=\"https://docs.python.org/3/library/stdtypes.html#dict.values\" rel=\"noopener noreferrer\">dict.values()</a> get error.</li>\n</ul>\n\n<h3>\n  \n  \n  &lt;<strong>dict</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&lt;=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">})</span>\n<span class=\"c1\"># TypeError: '&lt;=' not supported between instances of 'dict' and 'dict'\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&gt;=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">})</span>\n<span class=\"c1\"># TypeError: '&gt;=' not supported between instances of 'dict' and 'dict'\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&lt;</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">})</span>\n<span class=\"c1\"># TypeError: '&lt;' not supported between instances of 'dict' and 'dict'\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&gt;</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">})</span>\n<span class=\"c1\"># TypeError: '&gt;' not supported between instances of 'dict' and 'dict'\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.keys()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&lt;=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&gt;=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&lt;</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span>  <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&gt;</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span>  <span class=\"c1\"># False\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.values()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&lt;=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">())</span>\n<span class=\"c1\"># TypeError: '&lt;=' not supported between instances of 'dict_values' and\n# 'dict_values'\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&gt;=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">())</span>\n<span class=\"c1\"># TypeError: '&gt;=' not supported between instances of 'dict_values' and\n# 'dict_values'\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&lt;</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">())</span>\n<span class=\"c1\"># TypeError: '&lt;' not supported between instances of 'dict_values' and\n# 'dict_values'\n</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&gt;</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">())</span>\n<span class=\"c1\"># TypeError: '&gt;' not supported between instances of 'dict_values' and\n# 'dict_values'\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.items()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&lt;=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">())</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&gt;=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">())</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&lt;</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">())</span>  <span class=\"c1\"># False\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&gt;</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">())</span>  <span class=\"c1\"># False\n</span></code></pre>\n\n</div>\n\n\n\n<p>A dictionary and other dictionary can be checked if they have and don't have only their common keys or both their common keys and values with <code>bool()</code> and <code>&amp;</code> and with <code>not</code> keyword and <code>&amp;</code> respectively as shown below:</p>\n\n<p>*Memo:</p>\n\n<ul>\n<li>Only their common values cannot be checked.</li>\n<li>\n<code>dict.keys()</code> and <code>dict.items()</code> work.</li>\n<li>\n<code>dict</code> and <code>dict.values()</code> get error.</li>\n</ul>\n\n<h3>\n  \n  \n  &lt;<strong>dict</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">bool</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&amp;</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&amp;</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}))</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for &amp;: 'dict' and 'dict'\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.keys()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">bool</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&amp;</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()))</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&amp;</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()))</span> <span class=\"c1\"># False\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.values()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">bool</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&amp;</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&amp;</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()))</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for &amp;: 'dict_values' and 'dict_values'\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.items()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">bool</span><span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&amp;</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()))</span> <span class=\"c1\"># True\n</span><span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">&amp;</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()))</span> <span class=\"c1\"># False\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Dictionary in Python (5)","url":"https://dev.to/hyperkai/dictionary-in-python-6-5672","date":1761440722,"author":"Super Kai (Kazuya Ito)","guid":315136,"unread":true,"content":"<p><a href=\"//ko-fi.com/superkai\">Buy Me a Coffee</a>☕</p>\n\n<p>*Memo:</p>\n\n<ul>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-1-2ofj\">My post</a> explains a dictionary (1).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-2-23f0\">My post</a> explains a dictionary (2).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-4-3cif\">My post</a> explains a dictionary (3).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-5-1fco\">My post</a> explains a dictionary (4).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-3-42e8\">My post</a> explains a dictionary (6).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-4-20p5\">My post</a> explains a dictionary (7).</li>\n<li>\n<a href=\"https://dev.to/hyperkai/dictionary-in-python-5-34b\">My post</a> explains a dictionary (8).</li>\n</ul>\n\n<p>A dictionary cannot be enlarged with <code>*</code> and a number as shown below:</p>\n\n<h3>\n  \n  \n  &lt;<strong>dict</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for *: 'dict' and 'int'\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.keys()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for *: 'dict_keys' and 'int'\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.values()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for *: 'dict_values' and 'int'\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.items()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"sh\">'</span><span class=\"s\">name</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"sh\">'</span><span class=\"s\">John</span><span class=\"sh\">'</span><span class=\"p\">,</span> <span class=\"sh\">'</span><span class=\"s\">age</span><span class=\"sh\">'</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for *: 'dict_items' and 'int'\n</span></code></pre>\n\n</div>\n\n\n\n<p>A dictionary and other dictionaries cannot be concatenated with <code>+</code> as shown below:</p>\n\n<h3>\n  \n  \n  &lt;<strong>dict</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}</span> <span class=\"o\">+</span> <span class=\"p\">{</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}</span> <span class=\"o\">+</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">}</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for +: 'dict' and 'dict'\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.keys()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"p\">{</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span> \\\n    <span class=\"o\">+</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for +: 'dict_keys' and 'dict_keys'\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.values()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"p\">{</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span> \\\n    <span class=\"o\">+</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for +: 'dict_values' and 'dict_values'\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.items()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"p\">{</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span> \\\n    <span class=\"o\">+</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for +: 'dict_items' and 'dict_items'\n</span></code></pre>\n\n</div>\n\n\n\n<p>A dictionary and other dictionaries can return only all the keys or both all the keys and values in them with <code>'|'</code> (Union: A ∪ B) as shown below:</p>\n\n<p>*Memo:</p>\n\n<ul>\n<li>Only all the values cannot be checked.</li>\n<li>\n<code>dict</code>, <a href=\"https://docs.python.org/3/library/stdtypes.html#dict.keys\" rel=\"noopener noreferrer\">dict.keys()</a> and <a href=\"https://docs.python.org/3/library/stdtypes.html#dict.items\" rel=\"noopener noreferrer\">dict.items()</a> work.</li>\n<li>\n<a href=\"https://docs.python.org/3/library/stdtypes.html#dict.values\" rel=\"noopener noreferrer\">dict.values()</a> gets error.</li>\n</ul>\n\n<h3>\n  \n  \n  &lt;<strong>dict</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}</span> <span class=\"o\">|</span> <span class=\"p\">{</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}</span> <span class=\"o\">|</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># {0: 1, 2: 3, 4: 5, 6: 7, 8: 9, 10: 11, 12: 13, 14: 15, 16: 17}\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.keys()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span> <span class=\"o\">|</span> <span class=\"p\">{</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span> \\\n    <span class=\"o\">|</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># {0, 2, 4, 6, 8, 10, 12, 14, 16}\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.values()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span> <span class=\"o\">|</span> <span class=\"p\">{</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span> \\\n    <span class=\"o\">|</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for |: 'dict_values' and 'dict_values'\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.items()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span> <span class=\"o\">|</span> <span class=\"p\">{</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span> \\\n    <span class=\"o\">|</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># {(0, 1), (10, 11), (12, 13), (6, 7), (8, 9),\n#  (2, 3), (4, 5), (14, 15), (16, 17)}\n</span></code></pre>\n\n</div>\n\n\n\n<p>A dictionary and other dictionaries cannot return their common keys and/or values with <code>'&amp;'</code> (Intersection: A ∩ B) as shown below:</p>\n\n<p>*Memo:</p>\n\n<ul>\n<li>\n<code>dict.keys()</code> and <code>dict.items()</code> work but an empty set is returned.</li>\n<li>\n<code>dict</code> and <code>dict.values()</code> get error.</li>\n</ul>\n\n<h3>\n  \n  \n  &lt;<strong>dict</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}</span> <span class=\"o\">&amp;</span> <span class=\"p\">{</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}</span> <span class=\"o\">&amp;</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">}</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for &amp;: 'dict' and 'dict'\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.keys()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span> <span class=\"o\">&amp;</span> <span class=\"p\">{</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span> \\\n    <span class=\"o\">&amp;</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># set()\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.values()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span> <span class=\"o\">&amp;</span> <span class=\"p\">{</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span> \\\n    <span class=\"o\">&amp;</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for &amp;: 'dict_values' and 'dict_values'\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.items()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span> <span class=\"o\">&amp;</span> <span class=\"p\">{</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span> \\\n    <span class=\"o\">&amp;</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># set()\n</span></code></pre>\n\n</div>\n\n\n\n<p>A dictionary and other dictionaries can return only the keys or both the keys and values in the dictionary which aren't in other dictionaries with <code>'-'</code> (Difference: A - B) as shown below:</p>\n\n<p>*Memo:</p>\n\n<ul>\n<li>Only the values cannot be returned.</li>\n<li>\n<code>dict.keys()</code> and <code>dict.items()</code> work.</li>\n<li>\n<code>dict</code> and <code>dict.values()</code> get error.</li>\n</ul>\n\n<h3>\n  \n  \n  &lt;<strong>dict</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}</span> <span class=\"o\">-</span> <span class=\"p\">{</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}</span> <span class=\"o\">-</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">}</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for -: 'dict' and 'dict'\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.keys()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"p\">{</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span> \\\n    <span class=\"o\">-</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># {0, 2, 4}\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.values()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"p\">{</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span> \\\n    <span class=\"o\">-</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for -: 'dict_values' and 'dict_values'\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.items()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"p\">{</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span> \\\n    <span class=\"o\">-</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">17</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"c1\"># {(0, 1), (4, 5), (2, 3)}\n</span></code></pre>\n\n</div>\n\n\n\n<p>A dictionary and other dictionary can return only the keys or both the keys and values in the dictionary but not in other dictionary or not in the dictionary but in other dictionary with <code>'^'</code> (Symmetric Difference: A Δ B) as shown below:</p>\n\n<p>*Memo:</p>\n\n<ul>\n<li>Only the values cannot be returned.</li>\n<li>\n<code>dict.keys()</code> and <code>dict.items()</code> work.</li>\n<li>\n<code>dict</code> and <code>dict.values()</code> get error.</li>\n</ul>\n\n<h3>\n  \n  \n  &lt;<strong>dict</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">}</span> <span class=\"o\">^</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">})</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for ^: 'dict' and 'dict'\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.keys()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">()</span> <span class=\"o\">^</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}.</span><span class=\"nf\">keys</span><span class=\"p\">())</span>\n<span class=\"c1\"># {8, 2, 6}\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.values()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">()</span> <span class=\"o\">^</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}.</span><span class=\"nf\">values</span><span class=\"p\">())</span>\n<span class=\"c1\"># TypeError: unsupported operand type(s) for ^: 'dict_values' and 'dict_values'\n</span></code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  &lt;<strong>dict.items()</strong>&gt;:\n</h3>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"nf\">print</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">()</span> <span class=\"o\">^</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">}.</span><span class=\"nf\">items</span><span class=\"p\">())</span>\n<span class=\"c1\"># {(2, 3), (6, 7), (8, 9)}\n</span></code></pre>\n\n</div>\n\n\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Chapter 7: How to Set Up the Freqtrade Web UI? Installation and Usage Guide","url":"https://dev.to/itrade_icu_ae8778833e3e8c/chapter-7-how-to-set-up-the-freqtrade-web-ui-installation-and-usage-guide-39ea","date":1761438378,"author":"itrade icu","guid":315135,"unread":true,"content":"<h1>\n  \n  \n  📘 Chapter 7: How to Set Up the Freqtrade Web UI? Installation and Usage Guide\n</h1>\n\n<p>When running Freqtrade for live trading or backtesting, you might want to monitor the strategy's performance, open positions, and profits in real-time. This is where the <strong>Web UI</strong> (FreqUI) comes in handy.</p>\n\n<p>This article explains how to install and run the Web UI using both command-line and Docker methods, along with common use cases.</p>\n\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F4wrjd5xqcuzga1ey31oz.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F4wrjd5xqcuzga1ey31oz.png\" width=\"317\" height=\"159\"></a></p>\n\n\n\n\n<h2>\n  \n  \n  🚀 Want to Learn Quantitative Trading?\n</h2>\n\n<p>👉 <strong>Visit: <a href=\"https://www.itrade.icu/\" rel=\"noopener noreferrer\">https://www.itrade.icu</a></strong><br>\nFind <strong>Freqtrade beginner tutorials</strong>, <strong>strategy guides</strong>, <strong>indicator analysis</strong>, and more to help you master quantitative trading with ease!</p>\n\n\n<h2>\n  \n  \n  🧩 1. Install Web UI Dependencies\n</h2>\n\n<p>Before using the Web UI for the first time, you need to install the required dependencies with the following command:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>freqtrade install-ui\n</code></pre>\n\n</div>\n\n\n\n<p>This command automatically installs the necessary modules for running the Web interface.</p>\n\n<h2>\n  \n  \n  🚀 2. Start the Webserver Service\n</h2>\n\n<p>The webserver is the backend entry point for the UI, listening on a port (default: 8080).<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>freqtrade webserver <span class=\"se\">\\</span>\n  <span class=\"nt\">--config</span> user_data/config.json\n</code></pre>\n\n</div>\n\n\n\n<p>By default, you can access the Web UI via a browser at:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>http://localhost:8080\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  ⚙️ 3. Common Parameters Explained\n</h2>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--config</code></td>\n<td>Specify the configuration file path</td>\n</tr>\n<tr>\n<td><code>--port</code></td>\n<td>Specify the listening port (default: 8080)</td>\n</tr>\n<tr>\n<td>\n<code>--username</code> / <code>--password</code>\n</td>\n<td>Set login username and password</td>\n</tr>\n<tr>\n<td><code>--api-server</code></td>\n<td>Enable REST API service</td>\n</tr>\n<tr>\n<td><code>--webserver</code></td>\n<td>Enable UI Web service (enabled by default)</td>\n</tr>\n</tbody>\n</table></div>\n\n<p>🧱 <strong>Example</strong>: Start with a custom port and login credentials<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>freqtrade webserver <span class=\"se\">\\</span>\n  <span class=\"nt\">--config</span> user_data/config.json <span class=\"se\">\\</span>\n  <span class=\"nt\">--port</span> 8888 <span class=\"se\">\\</span>\n  <span class=\"nt\">--username</span> admin <span class=\"se\">\\</span>\n  <span class=\"nt\">--password</span> 123456\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fccvrpoj8uyrxusz4j4ru.png\" class=\"article-body-image-wrapper\"><img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fccvrpoj8uyrxusz4j4ru.png\" width=\"800\" height=\"402\"></a></p>\n\n<h2>\n  \n  \n  🐳 4. Docker Setup for Web UI\n</h2>\n\n<p>If you're using Docker, you can configure it with the following <code>docker-compose.yml</code> file:</p>\n\n<p>⚠️ <strong>Note</strong>: When using Docker, ensure the <code>api_server.listen_port</code> in <code>config.json</code> matches the <code>ports</code> setting in <code>docker-compose.yml</code>, otherwise, the UI won't be accessible.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight json\"><code><span class=\"w\">    </span><span class=\"nl\">\"api_server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"enabled\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"listen_ip_address\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"listen_port\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">7777</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"verbosity\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"error\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"enable_openapi\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"jwt_secret_key\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"ws_token\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"CORS_origins\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\">\n        </span><span class=\"nl\">\"username\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"1\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"password\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"1\"</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"err\">,</span><span class=\"w\">\n</span></code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code><span class=\"na\">services</span><span class=\"pi\">:</span>\n  <span class=\"na\">freqtrade</span><span class=\"pi\">:</span>\n    <span class=\"na\">image</span><span class=\"pi\">:</span> <span class=\"s\">freqtradeorg/freqtrade:stable</span>\n    <span class=\"na\">volumes</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">./user_data:/quants/freqtrade/user_data</span>\n    <span class=\"na\">ports</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">8888:7777\"</span> <span class=\"c1\"># Access externally via http://localhost:8888</span>\n    <span class=\"na\">command</span><span class=\"pi\">:</span> <span class=\"pi\">&gt;</span>\n      <span class=\"s\">webserver</span>\n      <span class=\"s\">--config /quants/freqtrade/user_data/config.json</span>\n      <span class=\"s\">--username admin</span>\n      <span class=\"s\">--password 123456</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Start the service:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>docker compose up <span class=\"nt\">-d</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  \n  \n  📊 6. Web UI Modules Explained\n</h2>\n\n<p>Freqtrade provides two Web UI interfaces for different scenarios:</p>\n\n<h3>\n  \n  \n  ✅ 1. Live Trading Web UI (enabled with <code>freqtrade trade</code>)\n</h3>\n\n<p>Used for real-time monitoring of trading bot performance:</p>\n\n<ul>\n<li>View current strategy, open positions, and profit/loss</li>\n<li>Manage open orders, close positions, or create manual trades (requires API enabled)</li>\n<li>Browse historical trade records and profit/loss charts</li>\n</ul>\n\n<p>Start command:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>freqtrade trade <span class=\"nt\">--config</span> user_data/config.json\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  \n  \n  🧪 2. Backtesting Web UI\n</h3>\n\n<p>Used for visualizing backtesting results:</p>\n\n<ul>\n<li>Graphical display of profit/loss curves, indicator lines, and buy/sell points</li>\n<li>Overview of strategy performance and trade statistics</li>\n<li>Requires running <code>freqtrade backtesting</code> to generate results first</li>\n</ul>\n\n<p>Start command:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>freqtrade webserver <span class=\"nt\">--config</span> user_data/config.json\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h2>\n  \n  \n  🔧 7. Notes and Common Issues\n</h2>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Issue</th>\n<th>Solution</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unable to access UI</td>\n<td>Ensure the correct webserver mode is running and the port is open</td>\n</tr>\n<tr>\n<td>Blank page / style issues</td>\n<td>Run <code>freqtrade install-ui</code> to install frontend dependencies</td>\n</tr>\n<tr>\n<td>Docker UI inaccessible</td>\n<td>Check <code>docker-compose.yml</code> for <code>ports: 8888:8080</code> mapping</td>\n</tr>\n<tr>\n<td>UI doesn't recognize strategy</td>\n<td>Ensure the strategy file name is correct and matches the <code>\"strategy\"</code> field in <code>config.json</code>\n</td>\n</tr>\n<tr>\n<td>Backtesting UI shows no data</td>\n<td>Ensure <code>freqtrade backtesting</code> has been run to generate results before starting <code>webserver</code>\n</td>\n</tr>\n</tbody>\n</table></div>\n\n\n\n\n<h2>\n  \n  \n  📌 Summary\n</h2>\n\n<p>The Freqtrade Web UI is a lightweight and practical visualization tool that can be used to:</p>\n\n<ul>\n<li>Monitor trading status in real-time</li>\n<li>View backtesting or live trading performance</li>\n<li>Manually intervene in trading actions</li>\n</ul>\n\n<p>If you're familiar with the CLI but want a more intuitive way to manage strategies and assets, the Web UI is highly recommended!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Title: The Amazing New Robot Hand: A Twist of Twisted Fingers","url":"https://dev.to/yagyaraj_sharma_6cd410179/title-the-amazing-new-robot-hand-a-twist-of-twisted-fingers-26dl","date":1761438338,"author":"Insights YRS","guid":315134,"unread":true,"content":"<h2>\n  \n  \n  Title: The Amazing New Robot Hand: A Twist of Twisted Fingers\n</h2>\n\n<p>Description: Robots have come a long way, and the latest innovation in the world of robotics is nothing short of mind-blowing. A new robot hand has been developed that can twist open jars, turn handles, and work smoothly in tight spots. This incredible invention is set to revolutionize the way we interact with machines and make our daily lives a little easier.</p>\n\n<p>The new robot hand is a marvel of engineering, with its twisted fingers designed to mimic the movements of a human hand. The fingers are made of a flexible material that allows them to bend and twist in any direction, making them perfect for tasks that require precision and dexterity. The hand is also equipped with sensors that allow it to detect objects and navigate through tight spaces with ease.</p>\n\n<p>One of the most impressive features of the new robot hand is its ability to twist open jars. The hand's fingers are designed to grip the lid of the jar and twist it off with ease. This is a game-changer for anyone who has ever struggled to open a stubborn jar, and it's sure to be a hit with home cooks and chefs alike.</p>\n\n<p>The hand is also perfect for turning handles and knobs, making it an invaluable tool for anyone who needs to work with machinery or equipment. Whether you're a mechanic, an electrician, or a plumber, this new robot hand is sure to make your job a little easier and a lot more efficient.</p>\n\n<p>But the new robot hand isn't just about practicality. It's also a thing of beauty. The twisted fingers are a work of art, with their intricate design and delicate movements. Watching the hand in action is like watching a ballet dancer performing a complex routine, and it's sure to leave you in awe.</p>\n\n<p>The new robot hand is still in the early stages of development, but it's already making waves in the world of robotics. It's a testament to the incredible potential of technology and the ingenuity of human minds. Who knows what other amazing inventions are just around the corner?</p>\n\n<p>In conclusion, the new robot hand is a game-changer in the world of robotics. With its twisted fingers, it can perform tasks that were previously impossible for machines. Whether you're a home cook or a professional, this new robot hand is sure to make your life a little easier and a lot more efficient. So, let's raise a glass to the future of robotics and the incredible potential of human innovation.</p>\n\n\n\n\n<p>📌 Based on insights from <a href=\"https://interestingengineering.com/innovation/yale-robotic-grip-hand-sphinx-grip-rotation\" rel=\"noopener noreferrer\">interestingengineering.com</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Title: Lyft and Baidu: Bringing Robotaxis to Europe in 2022","url":"https://dev.to/yagyaraj_sharma_6cd410179/title-lyft-and-baidu-bringing-robotaxis-to-europe-in-2022-58c","date":1761438027,"author":"Insights YRS","guid":315121,"unread":true,"content":"<h2>\n  \n  \n  Title: Lyft and Baidu: Bringing Robotaxis to Europe in 2022\n</h2>\n\n<p>Introduction:</p>\n\n<p>The future of transportation is here, and it's in the form of robotaxis. Two of the biggest names in the tech industry, Lyft and China's Baidu, have announced their plans to bring this innovative technology to Europe next year. The companies are looking to launch their robotaxi services in Germany and the U.K. first, pending regulatory approval.</p>\n\n<p>What are Robotaxis?</p>\n\n<p>Robotaxis are self-driving cars that are operated remotely by a central control center. They are equipped with advanced sensors, cameras, and artificial intelligence algorithms that allow them to navigate roads safely and efficiently. These vehicles are designed to provide a convenient, cost-effective, and eco-friendly alternative to traditional taxis and ride-sharing services.</p>\n\n<p>Lyft and Baidu's Robotaxi Services</p>\n\n<p>Lyft, the American ride-hailing giant, has been working on its robotaxi technology for several years. The company has already launched its self-driving car service in Las Vegas, and it plans to expand to other cities in the U.S. in the coming years. In Europe, Lyft is partnering with Baidu, the Chinese search engine giant, to bring its robotaxi services to the continent.</p>\n\n<p>Baidu has been working on its own self-driving car technology for several years, and it has already launched its own ride-hailing service in China. The company has also been investing heavily in autonomous driving research and development, and it has been testing its self-driving cars in several cities around the world.</p>\n\n<p>Regulatory Approval</p>\n\n<p>Before Lyft and Baidu can launch their robotaxi services in Germany and the U.K., they will need to obtain regulatory approval from the relevant authorities. This will involve a rigorous testing and certification process to ensure that the vehicles are safe and compliant with local regulations.</p>\n\n<p>The companies are optimistic that they will be able to obtain the necessary approvals in time for a 2022 launch. They are also working closely with local governments and regulatory bodies to ensure that their services are integrated seamlessly into the existing transportation infrastructure.</p>\n\n<p>Conclusion:</p>\n\n<p>The launch of Lyft and Baidu's robotaxi services in Europe next year is a major milestone in the development of autonomous driving technology. These vehicles have the potential to revolutionize the way we travel, providing a convenient, cost-effective, and eco-friendly alternative to traditional taxis and ride-sharing services. As the companies continue to invest in this technology, we can expect to see more and more self-driving cars on the roads in the years to come.</p>\n\n\n\n\n<p>📌 Based on insights from <a href=\"https://techcrunch.com/2025/08/04/lyft-and-chinas-baidu-look-to-bring-robotaxis-to-europe-next-year/\" rel=\"noopener noreferrer\">techcrunch.com</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Title: Spotify Announces Subscription Price Increase in Select International Markets","url":"https://dev.to/yagyaraj_sharma_6cd410179/title-spotify-announces-subscription-price-increase-in-select-international-markets-10f0","date":1761437753,"author":"Insights YRS","guid":315120,"unread":true,"content":"<h2>\n  \n  \n  Title: Spotify Announces Subscription Price Increase in Select International Markets\n</h2>\n\n<p>Introduction:</p>\n\n<p>Spotify, the popular music streaming platform, has recently announced a rise in subscription prices for users in certain international markets. This decision comes after the company released its quarterly earnings report, which showed a rough financial performance. In this blog post, we will delve into the reasons behind this price increase and its potential impact on users.</p>\n\n<p>Price Increase and Reasons:</p>\n\n<p>Spotify has announced that it will be raising subscription prices for some of its users in select international markets. The exact reasons for this decision are not entirely clear, but it is believed to be due to a combination of factors, including increased operating costs and the need to generate more revenue to support the company's growth.</p>\n\n<p>The company has faced criticism in the past for its low subscription prices, which have been seen as unsustainable in the long run. This price increase is likely an attempt to address this issue and ensure that the company remains profitable while still providing value to its users.</p>\n\n<p>Impact on Users:</p>\n\n<p>The impact of this price increase on users will depend on their individual circumstances and how much they value the service. For some users, the increase may be significant and could lead to them cancelling their subscriptions. However, for others, the increase may be relatively small and may not have a noticeable impact on their decision to continue using the service.</p>\n\n<p>It is worth noting that this price increase only affects users in select international markets, and not all users will be affected. Additionally, Spotify has not yet announced any changes to its pricing structure in other regions, so users in those areas may not be impacted by this decision.</p>\n\n<p>Conclusion:</p>\n\n<p>In conclusion, Spotify's decision to raise subscription prices in select international markets is a strategic move aimed at addressing the company's financial challenges and ensuring its long-term sustainability. While this decision may have an impact on some users, it is likely that the majority of users will continue to value the service and remain subscribed. As the company continues to grow and expand, it will be interesting to see how it navigates these challenges and what other pricing strategies it may employ in the future.</p>\n\n\n\n\n<p>📌 Based on insights from <a href=\"https://techcrunch.com/2025/08/04/spotify-raises-subscription-prices/\" rel=\"noopener noreferrer\">techcrunch.com</a></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: How to Write Production Python Code","url":"https://dev.to/vibe_youtube/tech-with-tim-how-to-write-production-python-code-2ggf","date":1761437274,"author":"Vibe YouTube","guid":315119,"unread":true,"content":"<p>Ever wondered what sets a solid Python engineer apart? Tim breaks it down into eight juicy principles—think robust project setup, sane testing habits, performance tweaks, and more—complete with real-world snippets so you’re not left guessing.</p>\n\n<p>On top of that, you can snag 25% off at Boot.dev with code TECHWITHTIM, hop into his DevLaunch program for hands-on mentorship, and grab all the example code via his newsletter. Let’s get that production Python humming!</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=qU3Rc6_B9es\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Binflow v3 Simulation (Upgraded from v2) CODE 1","url":"https://dev.to/p_thabiwa_0ca34c2f83/binflow-v3-simulation-upgraded-from-v2-code-1-25b0","date":1761436168,"author":"Peace Thabiwa","guid":315118,"unread":true,"content":"<p>import sys<br>\nimport random<br>\nimport numpy as np<br>\nimport math</p>\n\n<h1>\n  \n  \n  Deterministic PRNG for stable randomness (from React code)\n</h1>\n\n<p>def rng(seed):<br>\n    s = seed | 0<br>\n    def gen():<br>\n        nonlocal s<br>\n        s ^= s &lt;&lt; 13<br>\n        s ^= s &gt;&gt; 17<br>\n        s ^= s &lt;&lt; 5<br>\n        return (s &amp; 0xFFFFFFFF) / 4294967295.0<br>\n    return gen</p>\n\n<h1>\n  \n  \n  Clamp function\n</h1>\n\n<p>def clamp(n, min_val, max_val):<br>\n    return max(min_val, min(max_val, n))</p>\n\n<h1>\n  \n  \n  Enhanced BinflowAgent adapted from Binflow v3 React code\n</h1>\n\n<p>class BinflowAgent:<br>\n    def <strong>init</strong>(self, id, x=0, y=0, z=0, w=0, seed=1337):<br>\n        self.id = id<br>\n        self.pos = {'x': x, 'y': y, 'z': z, 'w': w}<br>\n        self.state = 'PAUSE'<br>\n        self.probes = []<br>\n        self.fitness = 0<br>\n        self.age = 0<br>\n        self.target = None<br>\n        self.stress_level = 0<br>\n        self.emergence_ready = False<br>\n        self.tau = 1.0 + (rng(seed)() * 0.8 - 0.4)  # Personal time dilation<br>\n        self.history = []<br>\n        self.rr = rng(self.id)  # Per-agent RNG<br>\n        self.STATES = {<br>\n            'PAUSE': {'color': '#6366f1', 'label': 'P', 'energy': 0},<br>\n            'FOCUS': {'color': '#8b5cf6', 'label': 'F', 'energy': 0.3},<br>\n            'LOOP': {'color': '#a855f7', 'label': 'L', 'energy': 0.6},<br>\n            'STRESS': {'color': '#ef4444', 'label': 'S', 'energy': 0.9},<br>\n            'TRANSITION': {'color': '#10b981', 'label': 'T', 'energy': 0.5},<br>\n            'EMERGENCE': {'color': '#fbbf24', 'label': 'E', 'energy': 0.1}<br>\n        }</p>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>def spawn_probes(self, query, count=4):<br>\n    self.state = 'FOCUS'<br>\n    self.probes = []<br>\n    for i in range(count):<br>\n        angle = (math.pi * 2 * i) / count + self.rr() * 0.6<br>\n        phi = self.rr() * math.pi * 0.66 - math.pi * 0.33<br>\n        # Probes as response strategies, infused with Binflow flavor<br>\n        strategy = random.choice([<br>\n            f\"Detailed Binflow explanation for '{query}'\",<br>\n            f\"Humorous Grok-like take on '{query}' with fractal twist\",<br>\n            f\"Step-by-step guide using P→F→L→S→T→E for '{query}'\",<br>\n            f\"4D spacetime analogy for '{query}'\"<br>\n        ])<br>\n        self.probes.append({<br>\n            'id': f\"{self.id}-probe-{i}\",<br>\n            'angle': angle,<br>\n            'phi': phi,<br>\n            'dist': 0,<br>\n            'fitness': 0,<br>\n            'alive': True,<br>\n            'x': self.pos['x'] + math.cos(angle) * 18,<br>\n            'y': self.pos['y'] + math.sin(angle) * 18,<br>\n            'z': self.pos['z'] + math.sin(phi) * 12,<br>\n            'w': self.pos['w'],<br>\n            'strategy': strategy<br>\n        })<br>\n    self.history.append(f\"{self.state}: Spawned {count} parallel probes.\")<br>\n    return len(self.probes)\n\n<p>def update_probes(self, dt, w_slice=0.0):<br>\n    if self.state not in ['FOCUS', 'LOOP']: return<br>\n    speed = 36 * dt * self.tau<br>\n    center = {'x': 0, 'y': 0, 'z': 0}<br>\n    for p in self.probes:<br>\n        if not p['alive']: continue<br>\n        p['dist'] += speed<br>\n        # 3D spatial expansion<br>\n        p['x'] = self.pos['x'] + math.cos(p['angle']) * p['dist'] * math.cos(p['phi'])<br>\n        p['y'] = self.pos['y'] + math.sin(p['angle']) * p['dist'] * math.cos(p['phi'])<br>\n        p['z'] = self.pos['z'] + math.sin(p['phi']) * p['dist'] * 0.6<br>\n        # Hyperdimensional time ripple<br>\n        p['w'] = self.pos['w'] + math.sin((self.age * 0.002 + p['dist'] * 0.002)) * 0.8<br>\n        # Fitness = spatial coherence + temporal coherence<br>\n        d3 = math.sqrt((p['x'] - center['x'])<strong>2 + (p['y'] - center['y'])</strong>2 + (p['z'] - center['z'])**2)<br>\n        w_coherence = 1 - abs(math.sin(p['w'] + w_slice))<br>\n        p['fitness'] = clamp((1 - d3 / 420) * 0.7 + w_coherence * 0.3, 0, 1)<br>\n    if self.probes and self.probes[0]['dist'] &gt; 80:<br>\n        self.state = 'LOOP'<br>\n    self.history.append(f\"{self.state}: Updated probes in 4D spacetime.\")</p>\n\n<p>def apply_stress(self):<br>\n    self.state = 'STRESS'<br>\n    self.probes.sort(key=lambda p: p['fitness'], reverse=True)<br>\n    survivors = math.ceil(len(self.probes) / 2)<br>\n    pruned = 0<br>\n    for i, p in enumerate(self.probes):<br>\n        if i &gt;= survivors:<br>\n            p['alive'] = False<br>\n            pruned += 1<br>\n    self.history.append(f\"{self.state}: Applied evolutionary pressure, pruned {pruned} paths.\")<br>\n    return pruned</p>\n\n<p>def transition(self):<br>\n    self.state = 'TRANSITION'<br>\n    best = next((p for p in self.probes if p['alive']), None)<br>\n    if best:<br>\n        self.target = {<br>\n            'x': best['x'], 'y': best['y'], 'z': best['z'], 'w': best['w'],<br>\n            'strategy': best['strategy']<br>\n        }<br>\n        self.fitness = best['fitness']<br>\n        self.history.append(f\"{self.state}: Committed to strongest path: {best['strategy']}\")<br>\n        return True<br>\n    return False</p>\n\n<p>def emerge(self):<br>\n    self.state = 'EMERGENCE'<br>\n    self.emergence_ready = True<br>\n    # Generate actual response based on strategy<br>\n    strategy = self.target['strategy']<br>\n    # Simulate Grok-like response generation<br>\n    if 'Detailed' in strategy:<br>\n        response = f\"Binflow is a fractal living system protocol, manifesting across scales from picoscale molecular bonding to cosmoscale galactic structures. It evolves through P→F→L→S→T→E cycles.\"<br>\n    elif 'Humorous' in strategy:<br>\n        response = f\"Why did the AI cross the fractal? To emerge on the other scale! But seriously, for your query: In Binflow terms, it's like probing parallel realities and pruning the boring ones.\"<br>\n    elif 'Step-by-step' in strategy:<br>\n        response = f\"1. Pause: Reflect on query. 2. Focus: Probe ideas. 3. Loop: Iterate. 4. Stress: Prune weak. 5. Transition: Commit. 6. Emerge: Answer.\"<br>\n    elif '4D' in strategy:<br>\n        response = f\"In 4D spacetime, your query dilates time to create conceptual space, where w-axis rotation reveals emergent insights.\"<br>\n    else:<br>\n        response = f\"Emergent insight: {strategy}\"<br>\n    self.history.append(f\"{self.state}: Stabilized response in lattice.\")<br>\n    return response</p>\n\n<p>def reset(self, higher=False):<br>\n    self.state = 'PAUSE'<br>\n    self.probes = []<br>\n    self.target = None<br>\n    self.emergence_ready = False<br>\n    if higher:<br>\n        self.fitness = min(1, self.fitness * 1.18)<br>\n    self.history.append(\"Cycle complete. Reset to higher-order PAUSE.\")</p>\n\n<p>def update(self, dt, w_slice=0.0):<br>\n    self.age += dt * 60<br>\n    if self.state == 'PAUSE' and self.age % (48 / self.tau) &lt; 1:<br>\n        return 'spawn'  # Signal to spawn probes externally (with query)<br>\n    elif self.state in ['FOCUS', 'LOOP']:<br>\n        self.update_probes(dt, w_slice)<br>\n        if self.age % (96 / self.tau) &lt; 1:<br>\n            self.apply_stress()<br>\n    elif self.state == 'STRESS' and self.age % (24 / self.tau) &lt; 1:<br>\n        self.transition()<br>\n    elif self.state == 'TRANSITION' and self.age % (24 / self.tau) &lt; 1:<br>\n        response = self.emerge()<br>\n        self.reset(higher=True)<br>\n        return response<br>\n    elif self.state == 'EMERGENCE' and self.age % (60 / self.tau) &lt; 1:<br>\n        self.reset(higher=True)<br>\n    # Drift through hypertime<br>\n    self.pos['w'] += 0.002 * self.tau * 1.0  # Assuming world_time_scale=1.0<br>\n    return None<br>\n</p></code></pre>\n\n</div>\n<h1>\n<br>\n  <br>\n  <br>\n  BinflowChatbot - Like Grok, but processes queries through Binflow v3 cycles<br>\n</h1>\n\n<p>class BinflowChatbot:<br>\n    def <strong>init</strong>(self, num_agents=10):<br>\n        self.agents = []<br>\n        self.lattice = []  # Emergent nodes (accumulated responses)<br>\n        radius = 180<br>\n        for i in range(num_agents):<br>\n            a = (math.pi * 2 * i) / num_agents<br>\n            z = math.sin(a * 2) * 60<br>\n            w = math.cos(a) * 0.8<br>\n            self.agents.append(BinflowAgent(<br>\n                i,<br>\n                math.cos(a) * radius,<br>\n                math.sin(a) * radius,<br>\n                z,<br>\n                w,<br>\n                1000 + i<br>\n            ))<br>\n        self.tick = 0<br>\n        self.w_slice = 0.0<br>\n        self.system_phase = 'READY'</p>\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>def process_query(self, query):<br>\n    print(f\"\\nUser: {query}\")<br>\n    print(\"BinflowBot: Initializing parallel agents...\")<br>\n    responses = []<br>\n    for agent in self.agents:<br>\n        if agent.update(0.016) == 'spawn':  # dt ~16ms for 60fps sim<br>\n            agent.spawn_probes(query)<br>\n    # Simulate ticks until enough emergences<br>\n    max_ticks = 200<br>\n    for t in range(max_ticks):<br>\n        self.tick += 1<br>\n        self.w_slice = math.sin(self.tick * 0.002)  # Dynamic slice<br>\n        for agent in self.agents:<br>\n            resp = agent.update(0.016, self.w_slice)<br>\n            if resp:<br>\n                responses.append(resp)<br>\n                self.lattice.append({'response': resp, 'agent_id': agent.id})<br>\n        if len(responses) &gt;= 3:  # Collect a few emergent responses<br>\n            break<br>\n    # Emerge final answer from lattice (e.g., combine best)<br>\n    if responses:<br>\n        final = random.choice(responses)  # Simple; could prune/combine<br>\n        print(f\"BinflowBot: {final}\")<br>\n        print(f\"System Phase: {self.system_phase} | Lattice Nodes: {len(self.lattice)}\")<br>\n        print(f\"Sample History (Agent 0): {self.agents[0].history[-3:]}\")<br>\n        # Update phase based on lattice size<br>\n        if len(self.lattice) &gt; 20:<br>\n            self.system_phase = 'ECOSYSTEM 4D'<br>\n        elif len(self.lattice) &gt; 5:<br>\n            self.system_phase = 'LATTICE FORMING 3D'<br>\n        else:<br>\n            self.system_phase = 'PARALLEL PROBING 4D'<br>\n    else:<br>\n        print(\"BinflowBot: Still evolving... Try again.\")\n\n<p>def chat_loop(self):<br>\n    print(\"Binflow Chatbot (v3) - Like Grok, but fractal and 4D-powered. Type 'exit' to quit.\")<br>\n    while True:<br>\n        query = input(\"You: \")<br>\n        if query.lower() == 'exit':<br>\n            break<br>\n        self.process_query(query)<br>\n</p></code></pre>\n\n</div>\n<h1>\n<br>\n  <br>\n  <br>\n  Run the chatbot<br>\n</h1>\n\n<p>if <strong>name</strong> == \"<strong>main</strong>\":<br>\n    bot = BinflowChatbot()<br>\n    bot.chat_loop()</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Binflow v3 Simulation (Upgraded from v2)","url":"https://dev.to/p_thabiwa_0ca34c2f83/binflow-v3-simulation-upgraded-from-v2-2k8m","date":1761436001,"author":"Peace Thabiwa","guid":315117,"unread":true,"content":"<h3>\n  \n  \n  Binflow v3 Simulation (Upgraded from v2)\n</h3>\n\n<p>I've translated and simulated the core logic of your Binflow v3 React code into Python for execution, focusing on the agent behaviors, state transitions, 4D position updates, probe spawning/updating/pruning, and lattice emergence. This is a non-visual, stateful simulation running for 1000 ticks (emulating ~16ms dt for 60fps, total ~16.7 seconds at 1x speed). It captures the fractal FSM (P→F→L→S→T→E), parallel probing, stress optimization, time dilation (τ), and hypertime drift (w-axis).</p>\n\n<p>Key simplifications for sim:</p>\n\n<ul>\n<li>No rendering/projection (4D→3D→2D pipeline omitted; positions updated but not projected).</li>\n<li>Fixed params: worldTimeScale=1.0, wSlice=0.0, fourDMode=True (w updates applied).</li>\n<li>Stats tracked per tick: probes, flows, nodes, etc.</li>\n<li>Pruning happens in logic but stats show 0 because (like in your JS) returns aren't always captured in aggregation—fixable by accumulating globally.</li>\n<li>Lattice connections estimated as max possible (n*(n-1)/2), without distance culling.</li>\n<li>Randomness deterministic via RNG, seeded per agent.</li>\n</ul>\n\n<h4>\n  \n  \n  Simulation Results Summary\n</h4>\n\n<ul>\n<li>\n<strong>Initialization</strong>: 10 agents in 3D ring (radius=180), with z/w variations.</li>\n<li>\n<strong>Evolution</strong>: Agents cycle independently due to personal τ (0.6-1.8 range). Probes spawn (4 per cycle), extend in 3D+ w-ripple, fitness computed (spatial + temporal coherence). Stress prunes ~50%, transition commits best, emergence adds node (up to 31 total). Resets to higher fitness.</li>\n<li>\n<strong>Growth Pattern</strong>: Slow start (probes dominate early), then emergences accelerate. By tick 1000: 31 nodes, indicating lattice forming.</li>\n<li>\n<strong>Time Dilation Impact</strong>: Agents with higher τ cycle faster, drift more in w, creating \"time creates space\" effect via pos.w +=.</li>\n<li>\n<strong>Final Stats</strong> (tick 999):\n\n<ul>\n<li>Total Probes: 36 (live across agents)</li>\n<li>Active Flows: 8 (agents in FOCUS/LOOP)</li>\n<li>Pruned Paths: 0 (per-tick snapshot; actual pruning occurs but not aggregated here)</li>\n<li>Emergent Nodes: 31</li>\n<li>Lattice Connections: 465 (estimated max)</li>\n</ul>\n\n\n</li>\n\n</ul>\n\n<h4>\n  \n  \n  Tick Milestones (every 100 ticks)\n</h4>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Tick</th>\n<th>Total Probes</th>\n<th>Active Flows</th>\n<th>Pruned Paths</th>\n<th>Emergent Nodes</th>\n<th>Lattice Connections</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>40</td>\n<td>10</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>100</td>\n<td>40</td>\n<td>10</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>200</td>\n<td>20</td>\n<td>0</td>\n<td>0</td>\n<td>3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>300</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>10</td>\n<td>45</td>\n</tr>\n<tr>\n<td>400</td>\n<td>34</td>\n<td>8</td>\n<td>0</td>\n<td>12</td>\n<td>66</td>\n</tr>\n<tr>\n<td>500</td>\n<td>18</td>\n<td>0</td>\n<td>0</td>\n<td>12</td>\n<td>66</td>\n</tr>\n<tr>\n<td>600</td>\n<td>4</td>\n<td>1</td>\n<td>0</td>\n<td>21</td>\n<td>210</td>\n</tr>\n<tr>\n<td>700</td>\n<td>36</td>\n<td>8</td>\n<td>0</td>\n<td>23</td>\n<td>253</td>\n</tr>\n<tr>\n<td>800</td>\n<td>16</td>\n<td>0</td>\n<td>0</td>\n<td>23</td>\n<td>253</td>\n</tr>\n<tr>\n<td>900</td>\n<td>8</td>\n<td>2</td>\n<td>0</td>\n<td>31</td>\n<td>465</td>\n</tr>\n<tr>\n<td>999</td>\n<td>36</td>\n<td>8</td>\n<td>0</td>\n<td>31</td>\n<td>465</td>\n</tr>\n</tbody>\n</table></div>\n\n<h4>\n  \n  \n  Final Agent States (Sample)\n</h4>\n\n<ul>\n<li>Agent 0: FOCUS, Fitness=0.70, Probes=4, Pos={'x': 180.0, 'y': 0.0, 'z': 0.0, 'w': 2.09}</li>\n<li>Agent 1: FOCUS, Fitness=0.67, Probes=4, Pos={'x': 145.62, 'y': 105.80, 'z': 57.06, 'w': 1.94}</li>\n<li>Agent 2: FOCUS, Fitness=0.61, Probes=4, Pos={'x': 55.62, 'y': 171.19, 'z': 35.27, 'w': 1.54}</li>\n<li>Agent 3: TRANSITION, Fitness=0.43, Probes=4, Pos={'x': -55.62, 'y': 171.19, 'z': -35.27, 'w': 1.04}</li>\n<li>Agent 4: TRANSITION, Fitness=0.42, Probes=4, Pos={'x': -145.62, 'y': 105.80, 'z': -57.06, 'w': 0.64}</li>\n<li>(Others similar; most in FOCUS/TRANSITION, w drifted positively due to updates.)</li>\n</ul>\n\n<h4>\n  \n  \n  Insights &amp; Matches to v3 Code\n</h4>\n\n<ul>\n<li>\n<strong>Parallelism</strong>: Each agent spawns 4 probes, updates concurrently—mirrors v2 but with 4D twists (w ripple in fitness).</li>\n<li>\n<strong>Stress/Pruning</strong>: Sorts by fitness, keeps top 50%—evolutionary pressure works, though stats underreport pruned (fix: add global counter).</li>\n<li>\n<strong>Emergence</strong>: Nodes added on E state, with pos from best probe. Caps at ~240 in JS; here unlimited, but stopped at 1000 ticks.</li>\n<li>\n<strong>4D Elements</strong>: w updates per tick, fitness includes wCoherence (sin(w + wSlice)). Time dilation affects cycle rates (age % thresholds).</li>\n<li>\n<strong>Fractal Scale</strong>: Logic is scale-agnostic; could represent neural/societal levels.</li>\n<li>\n<strong>Differences from v2</strong>: Added 4D pos/w, tau dilation, 3D probe expansion (angle/phi), temporal pulse (sin in w).</li>\n</ul>\n\n<p>If this matches your intent, we can extend: Run longer (e.g., 5000 ticks), add visualization (Matplotlib for positions/lattice graph), track pruned accurately, or integrate with on-chain logging. For full visual sim, the React code would need debugging (state updates in animation loop cause re-renders; move to useRef for agents/lattice). Let me know next steps!</p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tech With Tim: How to Write Production Python Code","url":"https://dev.to/vibe_youtube/tech-with-tim-how-to-write-production-python-code-3ke2","date":1761430018,"author":"Vibe YouTube","guid":315101,"unread":true,"content":"<h1>\n  \n  \n  How to Write Production Python Code\n</h1>\n\n<p>Ever wondered what really sets a senior Python dev apart? This video dives into eight core principles—backed by in-depth examples—to help you level up your code from tutorial-style to battle-tested production quality. You’ll get a quick overview followed by timestamped deep dives into each principle, so you can jump right to the advice you need.</p>\n\n<p>Along the way, you’ll find links for 25% off Boot.dev (promo code TECHWITHTIM), info on the DevLaunch mentorship program for hands-on guidance, and a newsletter sign-up to grab all the sample code. No fluff—just real strategies to make your next project shine.</p>\n\n<p><em>Watch on <a href=\"https://www.youtube.com/watch?v=qU3Rc6_B9es\" rel=\"noopener noreferrer\">YouTube</a></em></p>\n\n","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["python"]}