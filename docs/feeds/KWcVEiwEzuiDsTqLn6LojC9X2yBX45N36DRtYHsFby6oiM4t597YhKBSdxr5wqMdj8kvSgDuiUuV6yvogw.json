{"id":"KWcVEiwEzuiDsTqLn6LojC9X2yBX45N36DRtYHsFby6oiM4t597YhKBSdxr5wqMdj8kvSgDuiUuV6yvogw","title":"GitHub All Languages Daily Trending","displayTitle":"Github Trending","url":"https://mshibanami.github.io/GitHubTrendingRSS/daily/all.xml","feedLink":"http://mshibanami.github.io/GitHubTrendingRSS","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":21,"items":[{"title":"catchorg/Catch2","url":"https://github.com/catchorg/Catch2","date":1739672933,"author":"","guid":489,"unread":true,"content":"<p>A modern, C++-native, test framework for unit-tests, TDD and BDD - using C++14, C++17 and later (C++11 support is in v2.x branch, and C++03 on the Catch1.x branch)</p><p>Catch2 is mainly a unit testing framework for C++, but it also provides basic micro-benchmarking features, and simple BDD macros.</p><p>Catch2's main advantage is that using it is both simple and natural. Test names do not have to be valid identifiers, assertions look like normal C++ boolean expressions, and sections provide a nice and local way to share set-up and tear-down code in tests.</p><pre><code>#include &lt;catch2/catch_test_macros.hpp&gt;\n\n#include &lt;cstdint&gt;\n\nuint32_t factorial( uint32_t number ) {\n    return number &lt;= 1 ? number : factorial(number-1) * number;\n}\n\nTEST_CASE( \"Factorials are computed\", \"[factorial]\" ) {\n    REQUIRE( factorial( 1) == 1 );\n    REQUIRE( factorial( 2) == 2 );\n    REQUIRE( factorial( 3) == 6 );\n    REQUIRE( factorial(10) == 3'628'800 );\n}\n</code></pre><pre><code>#include &lt;catch2/catch_test_macros.hpp&gt;\n#include &lt;catch2/benchmark/catch_benchmark.hpp&gt;\n\n#include &lt;cstdint&gt;\n\nuint64_t fibonacci(uint64_t number) {\n    return number &lt; 2 ? number : fibonacci(number - 1) + fibonacci(number - 2);\n}\n\nTEST_CASE(\"Benchmark Fibonacci\", \"[!benchmark]\") {\n    REQUIRE(fibonacci(5) == 5);\n\n    REQUIRE(fibonacci(20) == 6'765);\n    BENCHMARK(\"fibonacci 20\") {\n        return fibonacci(20);\n    };\n\n    REQUIRE(fibonacci(25) == 75'025);\n    BENCHMARK(\"fibonacci 25\") {\n        return fibonacci(25);\n    };\n}\n</code></pre><p><em>Note that benchmarks are not run by default, so you need to run it explicitly with the  tag.</em></p><h2>Catch2 v3 has been released!</h2><p>You are on the  branch, where the v3 version is being developed. v3 brings a bunch of significant changes, the big one being that Catch2 is no longer a single-header library. Catch2 now behaves as a normal library, with multiple headers and separately compiled implementation.</p><p>The documentation is slowly being updated to take these changes into account, but this work is currently still ongoing.</p><p>For migrating from the v2 releases to v3, you should look at <a href=\"https://raw.githubusercontent.com/catchorg/Catch2/devel/docs/migrate-v2-to-v3.md#top\">our documentation</a>. It provides a simple guidelines on getting started, and collects most common migration problems.</p><p>This documentation comprises these three parts:</p>","contentLength":2190,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"block/goose","url":"https://github.com/block/goose","date":1739672933,"author":"","guid":490,"unread":true,"content":"<p>an open source, extensible AI agent that goes beyond code suggestions - install, execute, edit, and test with any LLM</p><p align=\"center\"><strong>an open-source, extensible AI agent that goes beyond code suggestionsinstall, execute, edit, and test with any LLM</strong></p>","contentLength":231,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"pointfreeco/swift-composable-architecture","url":"https://github.com/pointfreeco/swift-composable-architecture","date":1739672933,"author":"","guid":491,"unread":true,"content":"<p>A library for building applications in a consistent and understandable way, with composition, testing, and ergonomics in mind.</p><p>The Composable Architecture (TCA, for short) is a library for building applications in a consistent and understandable way, with composition, testing, and ergonomics in mind. It can be used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, iPadOS, visionOS, tvOS, and watchOS).</p><h2>What is the Composable Architecture?</h2><p>This library provides a few core tools that can be used to build applications of varying purpose and complexity. It provides compelling stories that you can follow to solve many problems you encounter day-to-day when building applications, such as:</p><ul><li><p> How to manage the state of your application using simple value types, and share state across many screens so that mutations in one screen can be immediately observed in another screen.</p></li><li><p> How to break down large features into smaller components that can be extracted to their own, isolated modules and be easily glued back together to form the feature.</p></li><li><p> How to let certain parts of the application talk to the outside world in the most testable and understandable way possible.</p></li><li><p> How to not only test a feature built in the architecture, but also write integration tests for features that have been composed of many parts, and write end-to-end tests to understand how side effects influence your application. This allows you to make strong guarantees that your business logic is running in the way you expect.</p></li><li><p> How to accomplish all of the above in a simple API with as few concepts and moving parts as possible.</p></li></ul><p>The Composable Architecture was designed over the course of many episodes on <a href=\"https://www.pointfree.co\">Point-Free</a>, a video series exploring functional programming and the Swift language, hosted by <a href=\"https://twitter.com/mbrandonw\">Brandon Williams</a> and <a href=\"https://twitter.com/stephencelis\">Stephen Celis</a>.</p><p>You can watch all of the episodes <a href=\"https://www.pointfree.co/collections/composable-architecture\">here</a>, as well as a dedicated, <a href=\"https://www.pointfree.co/collections/tours/composable-architecture-1-0\">multipart tour</a> of the architecture from scratch.</p><a href=\"https://www.pointfree.co/collections/tours/composable-architecture-1-0\"><img alt=\"video poster image\" src=\"https://d3rccdn33rt8ze.cloudfront.net/episodes/0243.jpeg\" width=\"600\"></a><p>This repo comes with  of examples to demonstrate how to solve common and complex problems with the Composable Architecture. Check out <a href=\"https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples\">this</a> directory to see them all, including:</p><p>Looking for something more substantial? Check out the source code for <a href=\"https://github.com/pointfreeco/isowords\">isowords</a>, an iOS word search game built in SwiftUI and the Composable Architecture.</p><p>To build a feature using the Composable Architecture you define some types and values that model your domain:</p><ul><li>: A type that describes the data your feature needs to perform its logic and render its UI.</li><li>: A type that represents all of the actions that can happen in your feature, such as user actions, notifications, event sources and more.</li><li>: A function that describes how to evolve the current state of the app to the next state given an action. The reducer is also responsible for returning any effects that should be run, such as API requests, which can be done by returning an  value.</li><li>: The runtime that actually drives your feature. You send all user actions to the store so that the store can run the reducer and effects, and you can observe state changes in the store so that you can update UI.</li></ul><p>The benefits of doing this are that you will instantly unlock testability of your feature, and you will be able to break large, complex features into smaller domains that can be glued together.</p><p>As a basic example, consider a UI that shows a number along with \"+\" and \"−\" buttons that increment and decrement the number. To make things interesting, suppose there is also a button that when tapped makes an API request to fetch a random fact about that number and displays it in the view.</p><p>To implement this feature we create a new type that will house the domain and behavior of the feature, and it will be annotated with the  macro:</p><pre><code>import ComposableArchitecture\n\n@Reducer\nstruct Feature {\n}\n</code></pre><p>In here we need to define a type for the feature's state, which consists of an integer for the current count, as well as an optional string that represents the fact being presented:</p><pre><code>@Reducer\nstruct Feature {\n  @ObservableState\n  struct State: Equatable {\n    var count = 0\n    var numberFact: String?\n  }\n}\n</code></pre><blockquote><p>[!Note] We've applied the  macro to  in order to take advantage of the observation tools in the library.</p></blockquote><p>We also need to define a type for the feature's actions. There are the obvious actions, such as tapping the decrement button, increment button, or fact button. But there are also some slightly non-obvious ones, such as the action that occurs when we receive a response from the fact API request:</p><pre><code>@Reducer\nstruct Feature {\n  @ObservableState\n  struct State: Equatable { /* ... */ }\n  enum Action {\n    case decrementButtonTapped\n    case incrementButtonTapped\n    case numberFactButtonTapped\n    case numberFactResponse(String)\n  }\n}\n</code></pre><p>And then we implement the  property, which is responsible for composing the actual logic and behavior for the feature. In it we can use the  reducer to describe how to change the current state to the next state, and what effects need to be executed. Some actions don't need to execute effects, and they can return  to represent that:</p><pre><code>@Reducer\nstruct Feature {\n  @ObservableState\n  struct State: Equatable { /* ... */ }\n  enum Action { /* ... */ }\n\n  var body: some Reducer&lt;State, Action&gt; {\n    Reduce { state, action in\n      switch action {\n      case .decrementButtonTapped:\n        state.count -= 1\n        return .none\n\n      case .incrementButtonTapped:\n        state.count += 1\n        return .none\n\n      case .numberFactButtonTapped:\n        return .run { [count = state.count] send in\n          let (data, _) = try await URLSession.shared.data(\n            from: URL(string: \"http://numbersapi.com/\\(count)/trivia\")!\n          )\n          await send(\n            .numberFactResponse(String(decoding: data, as: UTF8.self))\n          )\n        }\n\n      case let .numberFactResponse(fact):\n        state.numberFact = fact\n        return .none\n      }\n    }\n  }\n}\n</code></pre><p>And then finally we define the view that displays the feature. It holds onto a  so that it can observe all changes to the state and re-render, and we can send all user actions to the store so that state changes:</p><pre><code>struct FeatureView: View {\n  let store: StoreOf&lt;Feature&gt;\n\n  var body: some View {\n    Form {\n      Section {\n        Text(\"\\(store.count)\")\n        Button(\"Decrement\") { store.send(.decrementButtonTapped) }\n        Button(\"Increment\") { store.send(.incrementButtonTapped) }\n      }\n\n      Section {\n        Button(\"Number fact\") { store.send(.numberFactButtonTapped) }\n      }\n      \n      if let fact = store.numberFact {\n        Text(fact)\n      }\n    }\n  }\n}\n</code></pre><p>It is also straightforward to have a UIKit controller driven off of this store. You can observe state changes in the store in , and then populate the UI components with data from the store. The code is a bit longer than the SwiftUI version, so we have collapsed it here:</p><p>Once we are ready to display this view, for example in the app's entry point, we can construct a store. This can be done by specifying the initial state to start the application in, as well as the reducer that will power the application:</p><pre><code>import ComposableArchitecture\n\n@main\nstruct MyApp: App {\n  var body: some Scene {\n    WindowGroup {\n      FeatureView(\n        store: Store(initialState: Feature.State()) {\n          Feature()\n        }\n      )\n    }\n  }\n}\n</code></pre><p>And that is enough to get something on the screen to play around with. It's definitely a few more steps than if you were to do this in a vanilla SwiftUI way, but there are a few benefits. It gives us a consistent manner to apply state mutations, instead of scattering logic in some observable objects and in various action closures of UI components. It also gives us a concise way of expressing side effects. And we can immediately test this logic, including the effects, without doing much additional work.</p><blockquote><p>[!Note] For more in-depth information on testing, see the dedicated <a href=\"https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/testing\">testing</a> article.</p></blockquote><p>To test use a , which can be created with the same information as the , but it does extra work to allow you to assert how your feature evolves as actions are sent:</p><pre><code>@Test\nfunc basics() async {\n  let store = TestStore(initialState: Feature.State()) {\n    Feature()\n  }\n}\n</code></pre><p>Once the test store is created we can use it to make an assertion of an entire user flow of steps. Each step of the way we need to prove that state changed how we expect. For example, we can simulate the user flow of tapping on the increment and decrement buttons:</p><pre><code>// Test that tapping on the increment/decrement buttons changes the count\nawait store.send(.incrementButtonTapped) {\n  $0.count = 1\n}\nawait store.send(.decrementButtonTapped) {\n  $0.count = 0\n}\n</code></pre><p>Further, if a step causes an effect to be executed, which feeds data back into the store, we must assert on that. For example, if we simulate the user tapping on the fact button we expect to receive a fact response back with the fact, which then causes the  state to be populated:</p><pre><code>await store.send(.numberFactButtonTapped)\n\nawait store.receive(\\.numberFactResponse) {\n  $0.numberFact = ???\n}\n</code></pre><p>However, how do we know what fact is going to be sent back to us?</p><p>Currently our reducer is using an effect that reaches out into the real world to hit an API server, and that means we have no way to control its behavior. We are at the whims of our internet connectivity and the availability of the API server in order to write this test.</p><p>It would be better for this dependency to be passed to the reducer so that we can use a live dependency when running the application on a device, but use a mocked dependency for tests. We can do this by adding a property to the  reducer:</p><pre><code>@Reducer\nstruct Feature {\n  let numberFact: (Int) async throws -&gt; String\n  // ...\n}\n</code></pre><p>Then we can use it in the  implementation:</p><pre><code>case .numberFactButtonTapped:\n  return .run { [count = state.count] send in \n    let fact = try await self.numberFact(count)\n    await send(.numberFactResponse(fact))\n  }\n</code></pre><p>And in the entry point of the application we can provide a version of the dependency that actually interacts with the real world API server:</p><pre><code>@main\nstruct MyApp: App {\n  var body: some Scene {\n    WindowGroup {\n      FeatureView(\n        store: Store(initialState: Feature.State()) {\n          Feature(\n            numberFact: { number in\n              let (data, _) = try await URLSession.shared.data(\n                from: URL(string: \"http://numbersapi.com/\\(number)\")!\n              )\n              return String(decoding: data, as: UTF8.self)\n            }\n          )\n        }\n      )\n    }\n  }\n}\n</code></pre><p>But in tests we can use a mock dependency that immediately returns a deterministic, predictable fact:</p><pre><code>@Test\nfunc basics() async {\n  let store = TestStore(initialState: Feature.State()) {\n    Feature(numberFact: { \"\\($0) is a good number Brent\" })\n  }\n}\n</code></pre><p>With that little bit of upfront work we can finish the test by simulating the user tapping on the fact button, and then receiving the response from the dependency to present the fact:</p><pre><code>await store.send(.numberFactButtonTapped)\n\nawait store.receive(\\.numberFactResponse) {\n  $0.numberFact = \"0 is a good number Brent\"\n}\n</code></pre><p>We can also improve the ergonomics of using the  dependency in our application. Over time the application may evolve into many features, and some of those features may also want access to , and explicitly passing it through all layers can get annoying. There is a process you can follow to “register” dependencies with the library, making them instantly available to any layer in the application.</p><blockquote><p>[!Note] For more in-depth information on dependency management, see the dedicated <a href=\"https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/dependencymanagement\">dependencies</a> article.</p></blockquote><p>We can start by wrapping the number fact functionality in a new type:</p><pre><code>struct NumberFactClient {\n  var fetch: (Int) async throws -&gt; String\n}\n</code></pre><p>And then registering that type with the dependency management system by conforming the client to the  protocol, which requires you to specify the live value to use when running the application in simulators or devices:</p><pre><code>extension NumberFactClient: DependencyKey {\n  static let liveValue = Self(\n    fetch: { number in\n      let (data, _) = try await URLSession.shared\n        .data(from: URL(string: \"http://numbersapi.com/\\(number)\")!\n      )\n      return String(decoding: data, as: UTF8.self)\n    }\n  )\n}\n\nextension DependencyValues {\n  var numberFact: NumberFactClient {\n    get { self[NumberFactClient.self] }\n    set { self[NumberFactClient.self] = newValue }\n  }\n}\n</code></pre><p>With that little bit of upfront work done you can instantly start making use of the dependency in any feature by using the  property wrapper:</p><pre><code> @Reducer\n struct Feature {\n-  let numberFact: (Int) async throws -&gt; String\n+  @Dependency(\\.numberFact) var numberFact\n   \n   …\n\n-  try await self.numberFact(count)\n+  try await self.numberFact.fetch(count)\n }\n</code></pre><p>This code works exactly as it did before, but you no longer have to explicitly pass the dependency when constructing the feature's reducer. When running the app in previews, the simulator or on a device, the live dependency will be provided to the reducer, and in tests the test dependency will be provided.</p><p>This means the entry point to the application no longer needs to construct dependencies:</p><pre><code>@main\nstruct MyApp: App {\n  var body: some Scene {\n    WindowGroup {\n      FeatureView(\n        store: Store(initialState: Feature.State()) {\n          Feature()\n        }\n      )\n    }\n  }\n}\n</code></pre><p>And the test store can be constructed without specifying any dependencies, but you can still override any dependency you need to for the purpose of the test:</p><pre><code>let store = TestStore(initialState: Feature.State()) {\n  Feature()\n} withDependencies: {\n  $0.numberFact.fetch = { \"\\($0) is a good number Brent\" }\n}\n\n// ...\n</code></pre><p>That is the basics of building and testing a feature in the Composable Architecture. There are  more things to be explored, such as composition, modularity, adaptability, and complex effects. The <a href=\"https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples\">Examples</a> directory has a bunch of projects to explore to see more advanced usages.</p><p>The documentation for releases and  are available here:</p><p>There are a number of articles in the documentation that you may find helpful as you become more comfortable with the library:</p><p>If you want to discuss the Composable Architecture or have a question about how to use it to solve a particular problem, there are a number of places you can discuss with fellow <a href=\"http://www.pointfree.co\">Point-Free</a> enthusiasts:</p><p>You can add ComposableArchitecture to an Xcode project by adding it as a package dependency.</p><ol><li>From the  menu, select <strong>Add Package Dependencies...</strong></li><li>Depending on how your project is structured: \n  <ul><li>If you have a single application target that needs access to the library, then add  directly to your application.</li><li>If you want to use this library from multiple Xcode targets, or mix Xcode targets and SPM targets, you must create a shared framework that depends on  and then depend on that framework in all of your targets. For an example of this, check out the <a href=\"https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/Examples/TicTacToe\">Tic-Tac-Toe</a> demo application, which splits lots of features into modules and consumes the static library in this fashion using the  Swift package.</li></ul></li></ol><p>The Composable Architecture is built with extensibility in mind, and there are a number of community-supported libraries available to enhance your applications:</p><p>If you'd like to contribute a library, please <a href=\"https://github.com/pointfreeco/swift-composable-architecture/edit/main/README.md\">open a PR</a> with a link to it!</p><p>The following translations of this README have been contributed by members of the community:</p><p>If you'd like to contribute a translation, please <a href=\"https://github.com/pointfreeco/swift-composable-architecture/edit/main/README.md\">open a PR</a> with a link to a <a href=\"https://gist.github.com\">Gist</a>!</p><p>We have a <a href=\"https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/faq\">dedicated article</a> for all of the most frequently asked questions and comments people have concerning the library.</p><p>The following people gave feedback on the library at its early stages and helped make the library what it is today:</p><p>Paul Colton, Kaan Dedeoglu, Matt Diephouse, Josef Doležal, Eimantas, Matthew Johnson, George Kaimakas, Nikita Leonov, Christopher Liscio, Jeffrey Macko, Alejandro Martinez, Shai Mishali, Willis Plummer, Simon-Pierre Roy, Justin Price, Sven A. Schmidt, Kyle Sherman, Petr Šíma, Jasdev Singh, Maxim Smirnov, Ryan Stone, Daniel Hollis Tavares, and all of the <a href=\"https://www.pointfree.co\">Point-Free</a> subscribers 😁.</p><p>Special thanks to <a href=\"https://twitter.com/liscio\">Chris Liscio</a> who helped us work through many strange SwiftUI quirks and helped refine the final API.</p><p>And thanks to <a href=\"https://github.com/freak4pc\">Shai Mishali</a> and the <a href=\"https://github.com/CombineCommunity/CombineExt/\">CombineCommunity</a> project, from which we took their implementation of , which we use in  to help bridge delegate and callback-based APIs, making it much easier to interface with 3rd party frameworks.</p><p>The Composable Architecture was built on a foundation of ideas started by other libraries, in particular <a href=\"https://elm-lang.org\">Elm</a> and <a href=\"https://redux.js.org/\">Redux</a>.</p><p>There are also many architecture libraries in the Swift and iOS community. Each one of these has their own set of priorities and trade-offs that differ from the Composable Architecture.</p><p>This library is released under the MIT license. See <a href=\"https://raw.githubusercontent.com/pointfreeco/swift-composable-architecture/main/LICENSE\">LICENSE</a> for details.</p>","contentLength":16689,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"nocodb/nocodb","url":"https://github.com/nocodb/nocodb","date":1739672933,"author":"","guid":492,"unread":true,"content":"<p>🔥 🔥 🔥 Open Source Airtable Alternative</p><p align=\"center\"> NocoDB is the fastest and easiest way to build databases online. </p><img src=\"https://static.scarf.sh/a.png?x-pxid=c12a77cc-855e-4602-8a0f-614b2d0da56a\"><a href=\"https://discord.gg/5RgZmkW\" target=\"_blank\"><img src=\"https://discordapp.com/api/guilds/661905455894888490/widget.png?style=banner3\" alt=\"\"></a><pre><code>docker run -d \\\n  --name noco \\\n  -v \"$(pwd)\"/nocodb:/usr/app/data/ \\\n  -p 8080:8080 \\\n  nocodb/nocodb:latest\n</code></pre><pre><code>docker run -d \\\n  --name noco \\\n  -v \"$(pwd)\"/nocodb:/usr/app/data/ \\\n  -p 8080:8080 \\\n  -e NC_DB=\"pg://host.docker.internal:5432?u=root&amp;p=password&amp;d=d1\" \\\n  -e NC_AUTH_JWT_SECRET=\"569a1821-0a93-45e8-87ab-eb857f20a010\" \\\n  nocodb/nocodb:latest\n</code></pre><pre><code>nix run github:nocodb/nocodb\n</code></pre><p>To use NocoDB as a NixOS module, a flake.nix would be as follows:</p><pre><code>{\n  description = \"Bane's NixOS configuration\";\n\n  inputs = {\n    nixpkgs.url = \"github:nixos/nixpkgs/nixos-unstable\";\n    nocodb.url = \"github:nocodb/nocodb\";\n  };\n\n  outputs = inputs@{ nixpkgs, nocodb, ... }: {\n    nixosConfigurations = {\n      hostname = nixpkgs.lib.nixosSystem {\n        system = \"x86_64-linux\";\n        modules = [\n          ./configuration.nix\n          nocodb.nixosModules.nocodb\n\n          {\n            services.nocodb.enable = true;\n          }\n        ];\n      };\n    };\n  };\n}\n</code></pre><p>Auto-upstall is a single command that sets up NocoDB on a server for production usage. Behind the scenes it auto-generates docker-compose for you.</p><pre><code>bash &lt;(curl -sSL http://install.nocodb.com/noco.sh) &lt;(mktemp)\n</code></pre><p>Auto-upstall does the following: 🕊</p><ul><li>🐳 Automatically installs all pre-requisites like docker, docker-compose</li><li>🚀 Automatically installs NocoDB with PostgreSQL, Redis, Minio, Traefik gateway using Docker Compose. 🐘 🗄️ 🌐</li><li>🔄 Automatically upgrades NocoDB to the latest version when you run the command again.</li><li>🔒 Automatically setups SSL and also renews it. Needs a domain or subdomain as input while installation.</li></ul><blockquote><p>Binaries are only for quick testing locally.</p></blockquote><table><thead><tr></tr></thead><tbody><tr><td><code>curl http://get.nocodb.com/macos-arm64 -o nocodb -L &amp;&amp; chmod +x nocodb &amp;&amp; ./nocodb</code></td></tr><tr><td><code>curl http://get.nocodb.com/macos-x64 -o nocodb -L &amp;&amp; chmod +x nocodb &amp;&amp; ./nocodb</code></td></tr><tr><td><code>curl http://get.nocodb.com/linux-arm64 -o nocodb -L &amp;&amp; chmod +x nocodb &amp;&amp; ./nocodb</code></td></tr><tr><td><code>curl http://get.nocodb.com/linux-x64 -o nocodb -L &amp;&amp; chmod +x nocodb &amp;&amp; ./nocodb</code></td></tr><tr><td><code>iwr http://get.nocodb.com/win-arm64.exe -OutFile Noco-win-arm64.exe &amp;&amp; .\\Noco-win-arm64.exe</code></td></tr><tr><td><code>iwr http://get.nocodb.com/win-x64.exe -OutFile Noco-win-x64.exe &amp;&amp; .\\Noco-win-x64.exe</code></td></tr></tbody></table><p>For more installation methods, please refer to <a href=\"https://docs.nocodb.com/category/installation\">our docs</a></p><h3>Rich Spreadsheet Interface</h3><ul><li>⚡ &nbsp;Basic Operations: Create, Read, Update and Delete Tables, Columns, and Rows</li><li>⚡ &nbsp;Fields Operations: Sort, Filter, Group, Hide / Unhide Columns</li><li>⚡ &nbsp;Multiple Views Types: Grid (By default), Gallery, Form, Kanban and Calendar View</li><li>⚡ &nbsp;View Permissions Types: Collaborative Views, &amp; Locked Views</li><li>⚡ &nbsp;Share Bases / Views: either Public or Private (with Password Protected)</li><li>⚡ &nbsp;Variant Cell Types: ID, Links, Lookup, Rollup, SingleLineText, Attachment, Currency, Formula, User, etc</li><li>⚡ &nbsp;Access Control with Roles: Fine-grained Access Control at different levels</li></ul><h3>App Store for Workflow Automations</h3><p>We provide different integrations in three main categories. See <a href=\"https://docs.nocodb.com/account-settings/oss-specific-details/#app-store\" target=\"_blank\">App Store</a> for details.</p><ul><li>⚡ &nbsp;Chat: Slack, Discord, Mattermost, and etc</li><li>⚡ &nbsp;Email: AWS SES, SMTP, MailerSend, and etc</li><li>⚡ &nbsp;Storage: AWS S3, Google Cloud Storage, Minio, and etc</li></ul><p>We provide the following ways to let users programmatically invoke actions. You can use a token (either JWT or Social Auth) to sign your requests for authorization to NocoDB.</p><ul></ul><p>Most internet businesses equip themselves with either spreadsheet or a database to solve their business needs. Spreadsheets are used by Billion+ humans collaboratively every single day. However, we are way off working at similar speeds on databases which are way more powerful tools when it comes to computing. Attempts to solve this with SaaS offerings have meant horrible access controls, vendor lock-in, data lock-in, abrupt price changes &amp; most importantly a glass ceiling on what's possible in the future.</p><p>Our mission is to provide the most powerful no-code interface for databases that is open source to every single internet business in the world. This would not only democratise access to a powerful computing tool but also bring forth a billion+ people who will have radical tinkering-and-building abilities on the internet.</p><p> This project is licensed under <a href=\"https://raw.githubusercontent.com/nocodb/nocodb/develop/LICENSE\">AGPLv3</a>. </p><p>Thank you for your contributions! We appreciate all the contributions from the community.</p><a href=\"https://github.com/nocodb/nocodb/graphs/contributors\"><img src=\"https://contrib.rocks/image?repo=nocodb/nocodb\"></a>","contentLength":4299,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"vercel/ai-chatbot","url":"https://github.com/vercel/ai-chatbot","date":1739672933,"author":"","guid":493,"unread":true,"content":"<p>A full-featured, hackable Next.js AI chatbot built by Vercel</p><a href=\"https://chat.vercel.ai/\"><img alt=\"Next.js 14 and App Router-ready AI chatbot.\" src=\"https://raw.githubusercontent.com/vercel/ai-chatbot/main/app/(chat)/opengraph-image.png\"></a><p align=\"center\"> An Open-Source AI Chatbot Template Built With Next.js and the AI SDK by Vercel. </p><ul><li><a href=\"https://nextjs.org\">Next.js</a> App Router \n  <ul><li>Advanced routing for seamless navigation and performance</li><li>React Server Components (RSCs) and Server Actions for server-side rendering and increased performance</li></ul></li><li><a href=\"https://sdk.vercel.ai/docs\">AI SDK</a><ul><li>Unified API for generating text, structured objects, and tool calls with LLMs</li><li>Hooks for building dynamic chat and generative user interfaces</li><li>Supports OpenAI (default), Anthropic, Cohere, and other model providers</li></ul></li></ul><p>You can deploy your own version of the Next.js AI Chatbot to Vercel with one click:</p><blockquote><p>Note: You should not commit your  file or it will expose secrets that will allow others to control access to your various OpenAI and authentication provider accounts.</p></blockquote><ol><li>Install Vercel CLI: </li><li>Link local instance with Vercel and GitHub accounts (creates  directory): </li><li>Download your environment variables: </li></ol>","contentLength":916,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"datawhalechina/llm-cookbook","url":"https://github.com/datawhalechina/llm-cookbook","date":1739672933,"author":"","guid":494,"unread":true,"content":"<p>面向开发者的 LLM 入门教程，吴恩达大模型系列课程中文版</p><p>本项目是一个面向开发者的大模型手册，针对国内开发者的实际需求，主打 LLM 全方位入门实践。本项目基于吴恩达老师大模型系列课程内容，对原课程内容进行筛选、翻译、复现和调优，覆盖从 Prompt Engineering 到 RAG 开发、模型微调的全部流程，用最适合国内学习者的方式，指导国内开发者如何学习、入门 LLM 相关项目。</p><p>针对不同内容的特点，我们对共计 11 门吴恩达老师的大模型课程进行了翻译复现，并结合国内学习者的实际情况，对不同课程进行了分级和排序，初学者可以先系统学习我们的必修类课程，掌握入门 LLM 所有方向都需要掌握的基础技能和概念，再选择性地学习我们的选修类课程，在自己感兴趣的方向上不断探索和学习。</p><p>如果有你非常喜欢但我们还没有进行复现的吴恩达老师大模型课程，我们欢迎每一位开发者参考我们已有课程的格式和写法来对课程进行复现并提交 PR，在 PR 审核通过后，我们会根据课程内容将课程进行分级合并。欢迎每一位开发者的贡献！</p><p>LLM 正在逐步改变人们的生活，而对于开发者，如何基于 LLM 提供的 API 快速、便捷地开发一些具备更强能力、集成LLM 的应用，来便捷地实现一些更新颖、更实用的能力，是一个急需学习的重要能力。</p><p>由吴恩达老师与 OpenAI 合作推出的大模型系列教程，从大模型时代开发者的基础技能出发，深入浅出地介绍了如何基于大模型 API、LangChain 架构快速开发结合大模型强大能力的应用。其中，《Prompt Engineering for Developers》教程面向入门 LLM 的开发者，深入浅出地介绍了对于开发者，如何构造 Prompt 并基于 OpenAI 提供的 API 实现包括总结、推断、转换等多种常用功能，是入门 LLM 开发的经典教程；《Building Systems with the ChatGPT API》教程面向想要基于 LLM 开发应用程序的开发者，简洁有效而又系统全面地介绍了如何基于 ChatGPT API 打造完整的对话系统；《LangChain for LLM Application Development》教程结合经典大模型开源框架 LangChain，介绍了如何基于 LangChain 框架开发具备实用功能、能力全面的应用程序，《LangChain Chat With Your Data》教程则在此基础上进一步介绍了如何使用 LangChain 架构结合个人私有数据开发个性化大模型应用；《Building Generative AI Applications with Gradio》、《Evaluating and Debugging Generative AI》教程分别介绍了两个实用工具 Gradio 与 W&amp;B，指导开发者如何结合这两个工具来打造、评估生成式 AI 应用。</p><p>上述教程非常适用于开发者学习以开启基于 LLM 实际搭建应用程序之路。因此，我们将该系列课程翻译为中文，并复现其范例代码，也为其中一个视频增加了中文字幕，支持国内中文学习者直接使用，以帮助中文学习者更好地学习 LLM 开发；我们也同时实现了效果大致相当的中文 Prompt，支持学习者感受中文语境下 LLM 的学习使用，对比掌握多语言语境下的 Prompt 设计与 LLM 开发。未来，我们也将加入更多 Prompt 高级技巧，以丰富本课程内容，帮助开发者掌握更多、更巧妙的 Prompt 技能。</p><p>所有具备基础 Python 能力，想要入门 LLM 的开发者。</p><p>《ChatGPT Prompt Engineering for Developers》、《Building Systems with the ChatGPT API》等教程作为由吴恩达老师与 OpenAI 联合推出的官方教程，在可预见的未来会成为 LLM 的重要入门教程，但是目前还只支持英文版且国内访问受限，打造中文版且国内流畅访问的教程具有重要意义；同时，GPT 对中文、英文具有不同的理解能力，本教程在多次对比、实验之后确定了效果大致相当的中文 Prompt，支持学习者研究如何提升 ChatGPT 在中文语境下的理解与生成能力。</p><p>本教程适用于所有具备基础 Python 能力，想要入门 LLM 的开发者。</p><ol><li>至少一个 LLM API（最好是 OpenAI，如果是其他 API，你可能需要参考<a href=\"https://github.com/datawhalechina/llm-universe\">其他教程</a>对 API 调用代码进行修改）</li><li>能够使用 Python Jupyter Notebook</li></ol><p>本教程共包括 11 门课程，分为必修类、选修类两个类别。必修类课程是我们认为最适合初学者学习以入门 LLM 的课程，包括了入门 LLM 所有方向都需要掌握的基础技能和概念，我们也针对必修类课程制作了适合阅读的在线阅读和 PDF 版本，在学习必修类课程时，我们建议学习者按照我们列出的顺序进行学习；选修类课程是在必修类课程上的拓展延伸，包括了 RAG 开发、模型微调、模型评估等多个方面，适合学习者在掌握了必修类课程之后选择自己感兴趣的方向和课程进行学习。</p><ol><li>面向开发者的 Prompt Engineering。基于吴恩达老师《ChatGPT Prompt Engineering for Developers》课程打造，面向入门 LLM 的开发者，深入浅出地介绍了对于开发者，如何构造 Prompt 并基于 OpenAI 提供的 API 实现包括总结、推断、转换等多种常用功能，是入门 LLM 开发的第一步。</li><li>搭建基于 ChatGPT 的问答系统。基于吴恩达老师《Building Systems with the ChatGPT API》课程打造，指导开发者如何基于 ChatGPT 提供的 API 开发一个完整的、全面的智能问答系统。通过代码实践，实现了基于 ChatGPT 开发问答系统的全流程，介绍了基于大模型开发的新范式，是大模型开发的实践基础。</li><li>使用 LangChain 开发应用程序。基于吴恩达老师《LangChain for LLM Application Development》课程打造，对 LangChain 展开深入介绍，帮助学习者了解如何使用 LangChain，并基于 LangChain 开发完整的、具备强大能力的应用程序。</li><li>使用 LangChain 访问个人数据。基于吴恩达老师《LangChain Chat with Your Data》课程打造，深入拓展 LangChain 提供的个人数据访问能力，指导开发者如何使用 LangChain 开发能够访问用户个人数据、提供个性化服务的大模型应用。</li></ol><ol><li>使用 Gradio 搭建生成式 AI 应用。基于吴恩达老师《Building Generative AI Applications with Gradio》课程打造，指导开发者如何使用 Gradio 通过 Python 接口程序快速、高效地为生成式 AI 构建用户界面。</li><li>评估改进生成式 AI。基于吴恩达老师《Evaluating and Debugging Generative AI》课程打造，结合 wandb，提供一套系统化的方法和工具，帮助开发者有效地跟踪和调试生成式 AI 模型。</li><li>微调大语言模型。基于吴恩达老师《Finetuning Large Language Model》课程打造，结合 lamini 框架，讲述如何便捷高效地在本地基于个人数据微调开源大语言模型。</li><li>大模型与语义检索。基于吴恩达老师《Large Language Models with Semantic Search》课程打造，针对检索增强生成，讲述了多种高级检索技巧以实现更准确、高效的检索增强 LLM 生成效果。</li><li>基于 Chroma 的高级检索。基于吴恩达老师《Advanced Retrieval for AI with Chroma》课程打造，旨在介绍基于 Chroma 的高级检索技术，提升检索结果的准确性。</li><li>搭建和评估高级 RAG 应用。基于吴恩达老师《Building and Evaluating Advanced RAG Applications》课程打造，介绍构建和实现高质量RAG系统所需的关键技术和评估框架。</li><li>LangChain 的 Functions、Tools 和 Agents。基于吴恩达老师《Functions, Tools and Agents with LangChain》课程打造，介绍如何基于 LangChain 的新语法构建 Agent。</li><li>Prompt 高级技巧。包括 CoT、自我一致性等多种 Prompt 高级技巧的基础理论与代码实现。</li></ol><pre><code>content：基于原课程复现的双语版代码，可运行的 Notebook，更新频率最高，更新速度最快。\n\ndocs：必修类课程文字教程版在线阅读源码，适合阅读的 md。\n\nfigures：图片文件。\n</code></pre><ul><li><a href=\"https://github.com/0-yy-0\">高立业</a>（内容创作者-DataWhale成员-算法工程师）</li><li><a href=\"https://github.com/6forwater29\">陈逸涵</a> (内容创作者-Datawhale意向成员-AI爱好者)</li><li><a href=\"https://yetingyun.blog.csdn.net\">曾浩龙</a>（内容创作者-Datawhale 意向成员-JLU AI 研究生）</li></ul><a href=\"https://datawhalechina.github.io/llm-cookbook/graphs/contributors\"><img src=\"https://contrib.rocks/image?repo=datawhalechina/llm-cookbook\"></a><div align=\"center\"><img src=\"https://raw.githubusercontent.com/datawhalechina/llm-cookbook/main/figures/qrcode.jpeg\" width=\"180\" height=\"180\"></div> Datawhale 是一个专注于数据科学与 AI 领域的开源组织，汇集了众多领域院校和知名企业的优秀学习者，聚合了一群有开源精神和探索精神的团队成员。微信搜索公众号Datawhale可以加入我们。 \n","contentLength":8557,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"FujiwaraChoki/MoneyPrinterV2","url":"https://github.com/FujiwaraChoki/MoneyPrinterV2","date":1739672933,"author":"","guid":495,"unread":true,"content":"<p>Automate the process of making money online.</p><p>An Application that automates the process of making money online. MPV2 (MoneyPrinter Version 2) is, as the name suggests, the second version of the MoneyPrinter project. It is a complete rewrite of the original project, with a focus on a wider range of features and a more modular architecture.</p><blockquote><p> MPV2 needs Python 3.9 to function effectively. Watch the YouTube video <a href=\"https://youtu.be/wAZ_ZSuIqfk\">here</a></p></blockquote><p>MoneyPrinter has different versions for multiple languages developed by the community for the community. Here are some known versions:</p><p>If you would like to submit your own version/fork of MoneyPrinter, please open an issue describing the changes you made to the fork.</p><blockquote><p>⚠️ If you are planning to reach out to scraped businesses per E-Mail, please first install the <a href=\"https://golang.org/\">Go Programming Language</a>.</p></blockquote><pre><code>git clone https://github.com/FujiwaraChoki/MoneyPrinterV2.git\n\ncd MoneyPrinterV2\n# Copy Example Configuration and fill out values in config.json\ncp config.example.json config.json\n\n# Create a virtual environment\npython -m venv venv\n\n# Activate the virtual environment - Windows\n.\\venv\\Scripts\\activate\n\n# Activate the virtual environment - Unix\nsource venv/bin/activate\n\n# Install the requirements\npip install -r requirements.txt\n</code></pre><pre><code># Run the application\npython src/main.py\n</code></pre><p>All relevant document can be found <a href=\"https://raw.githubusercontent.com/FujiwaraChoki/MoneyPrinterV2/main/docs/\">here</a>.</p><p>For easier usage, there are some scripts in the  directory, that can be used to directly access the core functionality of MPV2, without the need of user interaction.</p><p>All scripts need to be run from the root directory of the project, e.g. <code>bash scripts/upload_video.sh</code>.</p><p>Please read <a href=\"https://raw.githubusercontent.com/FujiwaraChoki/MoneyPrinterV2/main/CONTRIBUTING.md\">CONTRIBUTING.md</a> for details on our code of conduct, and the process for submitting pull requests to us. Check out <a href=\"https://raw.githubusercontent.com/FujiwaraChoki/MoneyPrinterV2/main/docs/Roadmap.md\">docs/Roadmap.md</a> for a list of features that need to be implemented.</p><p>Please read <a href=\"https://raw.githubusercontent.com/FujiwaraChoki/MoneyPrinterV2/main/CODE_OF_CONDUCT.md\">CODE_OF_CONDUCT.md</a> for details on our code of conduct, and the process for submitting pull requests to us.</p><p>MoneyPrinterV2 is licensed under <code>Affero General Public License v3.0</code>. See <a href=\"https://raw.githubusercontent.com/FujiwaraChoki/MoneyPrinterV2/main/LICENSE\">LICENSE</a> for more information.</p><p>This project is for educational purposes only. The author will not be responsible for any misuse of the information provided. All the information on this website is published in good faith and for general information purpose only. The author does not make any warranties about the completeness, reliability, and accuracy of this information. Any action you take upon the information you find on this website (FujiwaraChoki/MoneyPrinterV2), is strictly at your own risk. The author will not be liable for any losses and/or damages in connection with the use of our website.</p>","contentLength":2565,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"wger-project/wger","url":"https://github.com/wger-project/wger","date":1739672933,"author":"","guid":496,"unread":true,"content":"<p>Self hosted FLOSS fitness/workout, nutrition and weight tracker</p><img src=\"https://raw.githubusercontent.com/wger-project/wger/master/wger/core/static/images/logos/logo.png\" width=\"100\" height=\"100\" alt=\"wger logo\"><p>wger (ˈvɛɡɐ) Workout Manager is a free, open source web application that helps you manage your personal workouts, weight and diet plans and can also be used as a simple gym management utility. It offers a REST API as well, for easy integration with other projects and tools.</p><h3>Production with docker compose</h3><p>If you want to host your own instance, take a look at the provided docker compose file. This config will persist your database and uploaded images:</p><p>If you just want to try it out:</p><pre><code>    docker run -ti --name wger.demo --publish 8000:80 wger/demo\n</code></pre><p>Please note that this image will not persist any data and overwrite your database when you pull a new version, it is only intended as an easy to setup demo</p><p>Feel free to contact us if you found this useful or if there was something that didn't behave as you expected. We can't fix what we don't know about, so please report liberally. If you're not sure if something is a bug or not, feel free to file a bug anyway.</p><p>All the code and the content is available on github:</p><p>Translate the app to your language on <a href=\"https://hosted.weblate.org/engage/wger/\">Weblate</a>.</p><p>The application is licensed under the Affero GNU General Public License 3 or later (AGPL 3+).</p><p>The initial exercise and ingredient data is licensed additionally under one of the Creative Commons licenses, see the individual exercises for more details.</p><p>The documentation is released under a CC-BY-SA: either version 4 of the License, or (at your option) any later version.</p><p>Some images were taken from Wikipedia, see the SOURCES file in their respective folders for more details.</p>","contentLength":1597,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"souzatharsis/podcastfy","url":"https://github.com/souzatharsis/podcastfy","date":1739672933,"author":"","guid":497,"unread":true,"content":"<p>An Open Source Python alternative to NotebookLM's podcast feature: Transforming Multimodal Content into Captivating Multilingual Audio Conversations with GenAI</p><p>Podcastfy is an open-source Python package that transforms multi-modal content (text, images) into engaging, multi-lingual audio conversations using GenAI. Input content includes websites, PDFs, images, YouTube videos, as well as user provided topics.</p><p>Unlike closed-source UI-based tools focused primarily on research synthesis (e.g. NotebookLM ❤️), Podcastfy focuses on open source, programmatic and bespoke generation of engaging, conversational content from a multitude of multi-modal sources, enabling customization and scale.</p><blockquote><p>\"Love that you casually built an open source version of the most popular product Google built in the last decade\"</p></blockquote><blockquote><p>\"Loving this initiative and the best I have seen so far especially for a 'non-techie' user.\"</p></blockquote><blockquote><p>\"Your library was very straightforward to work with. You did Amazing work brother 🙏\"</p></blockquote><blockquote><p>\"I think it's awesome that you were inspired/recognize how hard it is to beat NotebookLM's quality, but you did an  job with this! It sounds incredible, and it's open-source! Thank you for being amazing!\"</p></blockquote><p>Sample 1: Senecio, 1922 (Paul Klee) and Connection of Civilizations (2017) by Gheorghe Virtosu</p><p>Sample 2: The Great Wave off Kanagawa, 1831 (Hokusai) and Takiyasha the Witch and the Skeleton Spectre, c. 1844 (Kuniyoshi)</p><p>Sample 3: Pop culture icon Taylor Swift and Mona Lisa, 1503 (Leonardo da Vinci)</p><table><tbody><tr><td>Lex Fridman Podcast: 5h interview with Dario Amodei Anthropic's CEO</td></tr><tr><td>Benjamin Franklin's Autobiography</td></tr></tbody></table><table><thead><tr></tr></thead><tbody><tr><td>Election polls in São Paulo</td></tr></tbody></table><ul><li> (for audio processing)</li></ul><ol><li><p>Install from PyPI </p></li></ol><pre><code>from podcastfy.client import generate_podcast\n\naudio_file = generate_podcast(urls=[\"&lt;url1&gt;\", \"&lt;url2&gt;\"])\n</code></pre><pre><code>python -m podcastfy.client --url &lt;url1&gt; --url &lt;url2&gt;\n</code></pre><p>Podcastfy offers a range of customization options to tailor your AI-generated podcasts:</p><ul><li>Generate conversational content from multiple sources and formats (images, text, websites, YouTube, and PDFs).</li><li>Generate shorts (2-5 minutes) or longform (30+ minutes) podcasts.</li><li>Customize transcript and audio generation (e.g., style, language, structure).</li><li>Generate transcripts using 100+ LLM models (OpenAI, Anthropic, Google etc).</li><li>Leverage local LLMs for transcript generation for increased privacy and control.</li><li>Integrate with advanced text-to-speech models (OpenAI, Google, ElevenLabs, and Microsoft Edge).</li><li>Provide multi-language support for global content creation.</li><li>Integrate seamlessly with CLI and Python packages for automated workflows.</li></ul><ul><li>Released new Multi-Speaker TTS model (is it the one NotebookLM uses?!?)</li><li>Generate short or longform podcasts</li><li>Generate podcasts from input topic using grounded real-time web search</li><li>Integrate with 100+ LLM models (OpenAI, Anthropic, Google etc) for transcript generation</li></ul><p>This software is licensed under <a href=\"https://raw.githubusercontent.com/souzatharsis/podcastfy/main/LICENSE\">Apache 2.0</a>. See <a href=\"https://raw.githubusercontent.com/souzatharsis/podcastfy/main/usage/license-guide.md\">instructions</a> if you would like to use podcastfy in your software.</p><p>We welcome contributions! See <a href=\"https://raw.githubusercontent.com/souzatharsis/podcastfy/main/GUIDELINES.md\">Guidelines</a> for more details.</p><ul><li><p> can use  to convert blog posts, articles, or multimedia content into podcast-style audio, enabling them to reach broader audiences. By transforming content into an audio format, creators can cater to users who prefer listening over reading.</p></li><li><p> can transform lecture notes, presentations, and visual materials into audio conversations, making educational content more accessible to students with different learning preferences. This is particularly beneficial for students with visual impairments or those who have difficulty processing written information.</p></li><li><p> can convert research papers, visual data, and technical content into conversational audio. This makes it easier for a wider audience, including those with disabilities, to consume and understand complex scientific information. Researchers can also create audio summaries of their work to enhance accessibility.</p></li><li><p> can use  to promote digital accessibility by providing a tool that converts multimodal content into auditory formats. This helps individuals with visual impairments, dyslexia, or other disabilities that make it challenging to consume written or visual content.</p></li></ul><a href=\"https://github.com/souzatharsis/podcastfy/graphs/contributors\"><img alt=\"contributors\" src=\"https://contrib.rocks/image?repo=souzatharsis/podcastfy\"></a>","contentLength":4093,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"tpn/pdfs","url":"https://github.com/tpn/pdfs","date":1739672933,"author":"","guid":498,"unread":true,"content":"<p>Technically-oriented PDF Collection (Papers, Specs, Decks, Manuals, etc)</p>","contentLength":72,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"go-playground/validator","url":"https://github.com/go-playground/validator","date":1739657072,"author":"","guid":391,"unread":true,"content":"<p>💯Go Struct and Field validation, including Cross Field, Cross Struct, Map, Slice and Array diving</p><p>Package validator implements value validations for structs and individual fields based on tags.</p><p>It has the following  features:</p><ul><li>Cross Field and Cross Struct validations by using validation tags or custom validators.</li><li>Slice, Array and Map diving, which allows any or all levels of a multidimensional field to be validated.</li><li>Ability to dive into both map keys and values for validation</li><li>Handles type interface by determining it's underlying type prior to validation.</li><li>Handles custom field types such as sql driver Valuer see <a href=\"https://golang.org/src/database/sql/driver/types.go?s=1210:1293#L29\">Valuer</a></li><li>Alias validation tags, which allows for mapping of several validations to a single tag for easier defining of validations on structs</li><li>Extraction of custom defined Field Name e.g. can specify to extract the JSON name while validating and have it available in the resulting FieldError</li><li>Customizable i18n aware error messages.</li><li>Default validator for the <a href=\"https://github.com/gin-gonic/gin\">gin</a> web framework; upgrading from v8 to v9 in gin see <a href=\"https://github.com/go-playground/validator/tree/master/_examples/gin-upgrading-overriding\">here</a></li></ul><p>Please read the discussiong started <a href=\"https://github.com/go-playground/validator/discussions/1330\">here</a> if you are interested in contributing/helping maintain this package.</p><pre><code>go get github.com/go-playground/validator/v10\n</code></pre><p>Then import the validator package into your own code.</p><pre><code>import \"github.com/go-playground/validator/v10\"\n</code></pre><p>Validation functions return type error</p><p>They return type error to avoid the issue discussed in the following, where err is always != nil:</p><p>Validator returns only InvalidValidationError for bad validation input, nil or ValidationErrors as type error; so, in your code all you need to do is check if the error returned is not nil, and if it's not check if error is InvalidValidationError ( if necessary, most of the time it isn't ) type cast it to type ValidationErrors like so:</p><pre><code>err := validate.Struct(mystruct)\nvalidationErrors := err.(validator.ValidationErrors)\n</code></pre><ul><li>If new to using validator it is highly recommended to initialize it using the <code>WithRequiredStructEnabled</code> option which is opt-in to new behaviour that will become the default behaviour in v11+. See documentation for more details.</li></ul><pre><code>validate := validator.New(validator.WithRequiredStructEnabled())\n</code></pre><table><tbody><tr><td>Field Equals Another Field (relative)</td></tr><tr><td>Field Equals Another Field</td></tr><tr><td>Check the indicated characters are present in the Field</td></tr><tr><td>Check the indicated characters are not present in the field</td></tr><tr><td>Field Greater Than Another Relative Field</td></tr><tr><td>Field Greater Than or Equal To Another Relative Field</td></tr><tr><td>Field Greater Than or Equal To Another Field</td></tr><tr><td>Field Greater Than Another Field</td></tr><tr><td>Less Than Another Relative Field</td></tr><tr><td>Less Than or Equal To Another Relative Field</td></tr><tr><td>Less Than or Equal To Another Field</td></tr><tr></tr><tr><td>Field Does Not Equal Another Field (relative)</td></tr><tr><td>Field Does Not Equal Another Field</td></tr></tbody></table><table><tbody><tr><td>Classless Inter-Domain Routing CIDR</td></tr><tr><td>Classless Inter-Domain Routing CIDRv4</td></tr><tr><td>Classless Inter-Domain Routing CIDRv6</td></tr><tr><td>Full Qualified Domain Name (FQDN)</td></tr><tr></tr><tr><td>Internet Protocol Address IP</td></tr><tr><td>Internet Protocol Address IPv4</td></tr><tr><td>Internet Protocol Address IPv6</td></tr><tr><td>Internet Protocol Address IP</td></tr><tr><td>Internet Protocol Address IPv4</td></tr><tr><td>Internet Protocol Address IPv6</td></tr><tr><td>Media Access Control Address MAC</td></tr><tr><td>Transmission Control Protocol Address TCPv4</td></tr><tr><td>Transmission Control Protocol Address TCPv6</td></tr><tr><td>Transmission Control Protocol Address TCP</td></tr><tr><td>User Datagram Protocol Address UDPv4</td></tr><tr><td>User Datagram Protocol Address UDPv6</td></tr><tr><td>User Datagram Protocol Address UDP</td></tr><tr><td>Unix domain socket end point Address</td></tr><tr></tr></tbody></table><table><tbody><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr></tbody></table><table><tbody><tr></tr><tr></tr><tr><td>Business Identifier Code (ISO 9362)</td></tr><tr></tr><tr><td>Bitcoin Bech32 Address (segwit)</td></tr><tr></tr><tr><td>mongodb_connection_string</td><td>MongoDB Connection String</td></tr><tr><td>SpiceDb ObjectID/Permission/Type</td></tr><tr><td>e164 formatted phone number</td></tr><tr></tr><tr><td>International Standard Book Number</td></tr><tr><td>International Standard Book Number 10</td></tr><tr><td>International Standard Book Number 13</td></tr><tr><td>International Standard Serial Number</td></tr><tr><td>Two-letter country code (ISO 3166-1 alpha-2)</td></tr><tr><td>Three-letter country code (ISO 3166-1 alpha-3)</td></tr><tr><td>Numeric country code (ISO 3166-1 numeric)</td></tr><tr><td>Country subdivision code (ISO 3166-2)</td></tr><tr></tr><tr><td>Luhn Algorithm Checksum (for strings and (u)int)</td></tr><tr></tr><tr><td>postcode_iso3166_alpha2_field</td></tr><tr><td>Social Security Number SSN</td></tr><tr><td>Universally Unique Identifier UUID</td></tr><tr><td>Universally Unique Identifier UUID v3</td></tr><tr><td>Universally Unique Identifier UUID v3 RFC4122</td></tr><tr><td>Universally Unique Identifier UUID v4</td></tr><tr><td>Universally Unique Identifier UUID v4 RFC4122</td></tr><tr><td>Universally Unique Identifier UUID v5</td></tr><tr><td>Universally Unique Identifier UUID v5 RFC4122</td></tr><tr><td>Universally Unique Identifier UUID RFC4122</td></tr><tr><td>Semantic Versioning 2.0.0</td></tr><tr><td>Universally Unique Lexicographically Sortable Identifier ULID</td></tr><tr><td>Common Vulnerabilities and Exposures Identifier (CVE id)</td></tr></tbody></table><table><tbody><tr></tr><tr></tr></tbody></table><table><tbody><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr></tbody></table><table><tbody><tr><td>hexcolor|rgb|rgba|hsl|hsla</td></tr><tr><td>iso3166_1_alpha2|iso3166_1_alpha3|iso3166_1_alpha_numeric</td></tr></tbody></table><h6>Run on MacBook Pro Max M3</h6><pre><code>go version go1.23.3 darwin/arm64\ngoos: darwin\ngoarch: arm64\ncpu: Apple M3 Max\npkg: github.com/go-playground/validator/v10\nBenchmarkFieldSuccess-16                                                42461943                27.88 ns/op            0 B/op          0 allocs/op\nBenchmarkFieldSuccessParallel-16                                        486632887                2.289 ns/op           0 B/op          0 allocs/op\nBenchmarkFieldFailure-16                                                 9566167               121.3 ns/op           200 B/op          4 allocs/op\nBenchmarkFieldFailureParallel-16                                        17551471                83.68 ns/op          200 B/op          4 allocs/op\nBenchmarkFieldArrayDiveSuccess-16                                        7602306               155.6 ns/op            97 B/op          5 allocs/op\nBenchmarkFieldArrayDiveSuccessParallel-16                               20664610                59.80 ns/op           97 B/op          5 allocs/op\nBenchmarkFieldArrayDiveFailure-16                                        4659756               252.9 ns/op           301 B/op         10 allocs/op\nBenchmarkFieldArrayDiveFailureParallel-16                                8010116               152.9 ns/op           301 B/op         10 allocs/op\nBenchmarkFieldMapDiveSuccess-16                                          2834575               421.2 ns/op           288 B/op         14 allocs/op\nBenchmarkFieldMapDiveSuccessParallel-16                                  7179700               171.8 ns/op           288 B/op         14 allocs/op\nBenchmarkFieldMapDiveFailure-16                                          3081728               384.4 ns/op           376 B/op         13 allocs/op\nBenchmarkFieldMapDiveFailureParallel-16                                  6058137               204.0 ns/op           377 B/op         13 allocs/op\nBenchmarkFieldMapDiveWithKeysSuccess-16                                  2544975               464.8 ns/op           288 B/op         14 allocs/op\nBenchmarkFieldMapDiveWithKeysSuccessParallel-16                          6661954               181.4 ns/op           288 B/op         14 allocs/op\nBenchmarkFieldMapDiveWithKeysFailure-16                                  2435484               490.7 ns/op           553 B/op         16 allocs/op\nBenchmarkFieldMapDiveWithKeysFailureParallel-16                          4249617               282.0 ns/op           554 B/op         16 allocs/op\nBenchmarkFieldCustomTypeSuccess-16                                      14943525                77.35 ns/op           32 B/op          2 allocs/op\nBenchmarkFieldCustomTypeSuccessParallel-16                              64051954                20.61 ns/op           32 B/op          2 allocs/op\nBenchmarkFieldCustomTypeFailure-16                                      10721384               107.1 ns/op           184 B/op          3 allocs/op\nBenchmarkFieldCustomTypeFailureParallel-16                              18714495                69.77 ns/op          184 B/op          3 allocs/op\nBenchmarkFieldOrTagSuccess-16                                            4063124               294.3 ns/op            16 B/op          1 allocs/op\nBenchmarkFieldOrTagSuccessParallel-16                                   31903756                41.22 ns/op           18 B/op          1 allocs/op\nBenchmarkFieldOrTagFailure-16                                            7748558               146.8 ns/op           216 B/op          5 allocs/op\nBenchmarkFieldOrTagFailureParallel-16                                   13139854                92.05 ns/op          216 B/op          5 allocs/op\nBenchmarkStructLevelValidationSuccess-16                                16808389                70.25 ns/op           16 B/op          1 allocs/op\nBenchmarkStructLevelValidationSuccessParallel-16                        90686955                14.47 ns/op           16 B/op          1 allocs/op\nBenchmarkStructLevelValidationFailure-16                                 5818791               200.2 ns/op           264 B/op          7 allocs/op\nBenchmarkStructLevelValidationFailureParallel-16                        11115874               107.5 ns/op           264 B/op          7 allocs/op\nBenchmarkStructSimpleCustomTypeSuccess-16                                7764956               151.9 ns/op            32 B/op          2 allocs/op\nBenchmarkStructSimpleCustomTypeSuccessParallel-16                       52316265                30.37 ns/op           32 B/op          2 allocs/op\nBenchmarkStructSimpleCustomTypeFailure-16                                4195429               277.2 ns/op           416 B/op          9 allocs/op\nBenchmarkStructSimpleCustomTypeFailureParallel-16                        7305661               164.6 ns/op           432 B/op         10 allocs/op\nBenchmarkStructFilteredSuccess-16                                        6312625               186.1 ns/op           216 B/op          5 allocs/op\nBenchmarkStructFilteredSuccessParallel-16                               13684459                93.42 ns/op          216 B/op          5 allocs/op\nBenchmarkStructFilteredFailure-16                                        6751482               171.2 ns/op           216 B/op          5 allocs/op\nBenchmarkStructFilteredFailureParallel-16                               14146070                86.93 ns/op          216 B/op          5 allocs/op\nBenchmarkStructPartialSuccess-16                                         6544448               177.3 ns/op           224 B/op          4 allocs/op\nBenchmarkStructPartialSuccessParallel-16                                13951946                88.73 ns/op          224 B/op          4 allocs/op\nBenchmarkStructPartialFailure-16                                         4075833               287.5 ns/op           440 B/op          9 allocs/op\nBenchmarkStructPartialFailureParallel-16                                 7490805               161.3 ns/op           440 B/op          9 allocs/op\nBenchmarkStructExceptSuccess-16                                          4107187               281.4 ns/op           424 B/op          8 allocs/op\nBenchmarkStructExceptSuccessParallel-16                                 15979173                80.86 ns/op          208 B/op          3 allocs/op\nBenchmarkStructExceptFailure-16                                          4434372               264.3 ns/op           424 B/op          8 allocs/op\nBenchmarkStructExceptFailureParallel-16                                  8081367               154.1 ns/op           424 B/op          8 allocs/op\nBenchmarkStructSimpleCrossFieldSuccess-16                                6459542               183.4 ns/op            56 B/op          3 allocs/op\nBenchmarkStructSimpleCrossFieldSuccessParallel-16                       41013781                37.95 ns/op           56 B/op          3 allocs/op\nBenchmarkStructSimpleCrossFieldFailure-16                                4034998               292.1 ns/op           272 B/op          8 allocs/op\nBenchmarkStructSimpleCrossFieldFailureParallel-16                       11348446               115.3 ns/op           272 B/op          8 allocs/op\nBenchmarkStructSimpleCrossStructCrossFieldSuccess-16                     4448528               267.7 ns/op            64 B/op          4 allocs/op\nBenchmarkStructSimpleCrossStructCrossFieldSuccessParallel-16            26813619                48.33 ns/op           64 B/op          4 allocs/op\nBenchmarkStructSimpleCrossStructCrossFieldFailure-16                     3090646               384.5 ns/op           288 B/op          9 allocs/op\nBenchmarkStructSimpleCrossStructCrossFieldFailureParallel-16             9870906               129.5 ns/op           288 B/op          9 allocs/op\nBenchmarkStructSimpleSuccess-16                                         10675562               109.5 ns/op             0 B/op          0 allocs/op\nBenchmarkStructSimpleSuccessParallel-16                                 131159784                8.932 ns/op           0 B/op          0 allocs/op\nBenchmarkStructSimpleFailure-16                                          4094979               286.6 ns/op           416 B/op          9 allocs/op\nBenchmarkStructSimpleFailureParallel-16                                  7606663               157.9 ns/op           416 B/op          9 allocs/op\nBenchmarkStructComplexSuccess-16                                         2073470               576.0 ns/op           224 B/op          5 allocs/op\nBenchmarkStructComplexSuccessParallel-16                                 7821831               161.3 ns/op           224 B/op          5 allocs/op\nBenchmarkStructComplexFailure-16                                          576358              2001 ns/op            3042 B/op         48 allocs/op\nBenchmarkStructComplexFailureParallel-16                                 1000000              1171 ns/op            3041 B/op         48 allocs/op\nBenchmarkOneof-16                                                       22503973                52.82 ns/op            0 B/op          0 allocs/op\nBenchmarkOneofParallel-16                                                8538474               140.4 ns/op             0 B/op          0 allocs/op\n</code></pre><p>Here is a list of software that complements using this library either pre or post validation.</p><ul><li><a href=\"https://github.com/go-playground/form\">form</a> - Decodes url.Values into Go value(s) and Encodes Go value(s) into url.Values. Dual Array and Full map support.</li><li><a href=\"https://github.com/go-playground/mold\">mold</a> - A general library to help modify or set data within data structures and other objects</li></ul><h2>Maintenance and support for SDK major versions</h2><p>See prior discussion <a href=\"https://github.com/go-playground/validator/discussions/1342\">here</a> for more details.</p><p>This package is aligned with the <a href=\"https://go.dev/doc/devel/release\">Go release policy</a> in that support is guaranteed for the two most recent major versions.</p><p>This does not mean the package will not work with older versions of Go, only that we reserve the right to increase the MSGV(Minimum Supported Go Version) when the need arises to address Security issues/patches, OS issues &amp; support or newly introduced functionality that would greatly benefit the maintenance and/or usage of this package.</p><p>If and when the MSGV is increased it will be done so in a minimum of a  release bump.</p><p>Distributed under MIT License, please see license file within the code for more details.</p><p>This project has grown large enough that more than one person is required to properly support the community. If you are interested in becoming a maintainer please reach out to me <a href=\"https://github.com/deankarn\">https://github.com/deankarn</a></p>","contentLength":14908,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Oliveriver/5d-diplomacy-with-multiverse-time-travel","url":"https://github.com/Oliveriver/5d-diplomacy-with-multiverse-time-travel","date":1739657072,"author":"","guid":392,"unread":true,"content":"<p>5D Diplomacy With Multiverse Time Travel</p><p>A new standard in measuring how galaxy-brained you are, 5D Diplomacy With Multiverse Time Travel combines the classic game of pure negotiation with the modern classic game of pure disorientation. Can you convince your opponent to support an attack in the present while simultaneously backstabbing them five years ago and seven timelines over?</p><p>Inspired by and indebted to the board game <a href=\"https://instructions.hasbro.com/en-us/instruction/avalon-hill-diplomacy-cooperative-strategy-board-game\">Diplomacy</a> and the video game <a href=\"https://www.5dchesswithmultiversetimetravel.com/\">5D Chess With Multiverse Time Travel</a>. Both are excellent in their own right, so we recommend picking up a copy of each to understand the rules for 5D Diplomacy.</p><p> is a trademark of Avalon Hill. <em>5D Chess With Multiverse Time Travel</em> is a trademark of Thunkspace, LLC. <em>5D Diplomacy With Multiverse Time Travel</em> and its creators are not affiliated with either  or <em>5D Chess With Multiverse Time Travel</em>.</p><p>If you find a bug, please raise an <a href=\"https://github.com/Oliveriver/5d-diplomacy-with-multiverse-time-travel/issues\">issue</a>.</p><p>Note that official development of new features has come to an end. Issues requesting new or modified gameplay features will probably be rejected. Only bug fixes, performance improvements, and quality of life adjustments are likely to be accepted as suggestions.</p><p>Feel free to fork this repo and modify the code there if you wish to experiment with more radical changes to the rules or UI. Visit the <a href=\"https://discord.gg/g7TvjPfkVu\">5D Diplomacy Discord server</a> to discuss new rules and theory with others.</p><p>There are currently two options for installing 5D Diplomacy. Use quick installation if you just want to play the game. Use manual installation if you want to make code changes.</p><ul><li>The correct version of <a href=\"https://docker.com/\">Docker</a> for your operating system.</li></ul><ul><li>Open Docker and leave it running.</li><li>Open the CLI for your operating system and navigate inside the folder where you've downloaded this repository. If you don't know how to do this, <a href=\"https://www.freecodecamp.org/news/how-to-use-the-cli-beginner-guide/\">use this tutorial</a>.</li><li>Via the CLI, run the command <code>docker compose build frontend backend</code> and wait for it to complete.</li><li>Via the CLI, run the command  and wait for it to complete.</li><li>Wait an extra few seconds for the server to start up. If you experience errors creating a game in the next step, try waiting longer.</li></ul><p>If you ever update the code (manually or via a pull from this repository), you will need to run <code>docker compose down --rmi local</code>, then run through the steps above again. Note that this may result in the database being wiped.</p><p>To read server logs, run <code>docker compose logs -f backend</code>.</p><p>The game consists of two components, found in the  and  directories. You must set up and run both to play 5D Diplomacy, unless you're connecting to someone else's server or have implemented a custom client.</p><p>The  directory contains the original proof of concept from 2021. None of its contents are required for running the latest version of 5D Diplomacy.</p><ul><li>Navigate to the  directory.</li><li>(Optional) If you want to connect to a custom database, copy  to create a new file in the same directory called <code>appsettings.Development.json</code>. Add your database's connection string as the value for the appropriate provider under , then set the value for  to match the name of the connection string.</li><li>Run one of the following commands, depending on your configuration: \n  <ul><li>If you aren't using a custom database, i.e. if you didn't follow the optional step above, run <code>dotnet ef database update --context SqliteGameContext</code>.</li><li>If you're using a custom SQLite database, run <code>dotnet ef database update --context SqliteGameContext</code>.</li><li>If you're using a custom SQL Server database, run <code>dotnet ef database update --context SqlServerGameContext</code>.</li></ul></li><li>Run  to start the server.</li><li>The server will print its address to the console, likely <a href=\"http://localhost:5000\">http://localhost:5000</a> but it may be different. Note this down for later.</li></ul><p>Note that if you ever update the code with changes that affect the database schema (e.g. if you pull a change from this repository that includes a new migration), you will have to run the appropriate <code>dotnet ef database update</code> command again.</p><ul><li>Navigate to the  directory.</li><li>Copy  to create a new file in the same directory called .</li><li>Inside , replace  with the address of the server noted earlier.</li><li>Run  to start the client in the default browser.</li></ul><p>First see installation instructions above. 5D Diplomacy can be set to run normal games (where seven players join and enter orders individually) or sandbox games (where a single user enters all orders).</p><p>If you wish to play a normal game or let other people see one of your sandbox games, you'll need to expose the domains of your client and/or server (if everyone has set up the client themselves, only a server needs to be exposed). There are various ways to do this, although this guide does not cover them.</p><p>If you modify the code and host a game that others interact with, <strong>you must provide a link to your modified source code to comply with the terms of the AGPL license.</strong> We suggest updating the link to the source code in <code>client/src/components/pages/LandingPage.tsx</code>.</p><p>To create a normal game, one player must choose the new game option from the main menu. They must choose the adjacency setting (see game rules below). After a game has been created, the initiating player enters the game and sees the game ID in the top left corner, which they must copy and send to other players.</p><p>Other players can then use the join game option from the main menu to join with the supplied game ID.</p><p>Note that 5D Diplomacy has no in-built messaging system. Unless you want to play without press, you require a separate program to send and receive press, e.g. a messaging app or voice calls.</p><p>A possible exploit exists when playing multiplayer games. Since 5D Diplomacy has no user logins or verification, a player can join as someone else and enter their orders before them. The alternative - allowing each nation to join only once - would mean players can't rejoin after a break or connection issues. While Diplomacy is a game about breaking trust, you'll simply have to trust players not to be quite this devious.</p><p>To create a sandbox game, select new game from the main menu and choose the sandbox option. Also set the adjacency setting (see game rules below).</p><p>In sandbox mode, turns advance after submission whether all nations have orders or not.</p><p>The rules of 5D Diplomacy generally extend the rules of regular Diplomacy. This guide covers only deviations from the rules of the base game.</p><p>The game world consists of a grid of Diplomacy boards. Each row is a timeline, and each timeline progresses with boards following the standard Diplomacy turns (Spring 1901, then Fall 1901, then Winter 1901, then Spring 1902, etc.).</p><p>At a given time, only units on the active boards (those furthest to the right in each timeline) can have new orders assigned. Other units are locked into their pre-existing orders, which can't be changed, though their resolution can.</p><p>Units in spring or fall turns can be given hold, move, support or convoy orders. These are validated against standard Diplomacy adjacency rules, with extra possibilities for multiverse travel. The adjacency strictness setting (chosen when a new game is created) determines how units can move through the multiverse.</p><p>With strict adjacencies, a unit can move/support/convoy to:</p><ul><li>Any adjacent region on its own board.</li><li>The same region on a different board exactly one timeline up or down, e.g. moving from Paris in Timeline 2 to Paris in Timeline 1.</li><li>The same region on a different board exactly one board in the past, e.g. moving from Berlin in Fall 1901 to Berlin in Spring 1901. Note that moving to winter boards is forbidden and these are skipped when determining board adjacencies, so Spring 1902 is adjacent to Fall 1901.</li><li>Any region it is successfully convoyed to (see below).</li></ul><p>With loose adjacencies, a unit can move/support/convoy to:</p><ul><li>Any adjacent region on its own board.</li><li>The same region on a different board exactly one timeline up or down, or any region adjacent to that region within its board, e.g. moving from Paris in Timeline 2 to Gascony in Timeline 1.</li><li>The same region on a different board exactly one board in the past, or any region adjacent to that region within its board, e.g. moving from Berlin in Fall 1901 to Kiel in Spring 1901. Winter boards are still ignored.</li><li>Any region it is successfully convoyed to (see below).</li></ul><p>In either case, note in particular that movement one board diagonally is not permitted (without a convoy).</p><p>Convoys extend the quirk of standard Diplomacy that allows armies to move an arbitrary distance in a single turn if a chain of convoying fleets exists. Providing each fleet is adjacent to the next and all are ordered to perform the same convoy, an army could go almost anywhere.</p><p>Units are however forbidden from moving into boards that don't exist yet, even with convoys. Convoys and supports though can anticipate a future unit moving back in time, so the player can use the ghost board to enter supports/convoys via an arbitrary location in the multiverse.</p><p>Any units in (spring or fall) boards not assigned orders are given a hold order by default.</p><p>The rule of thumb for adjudication: each time all orders for a turn are submitted, all orders in the entire world are adjudicated together, as if in a single enormous Diplomacy board.</p><p>In particular, new orders could affect a prior resolution of existing orders, e.g. a unit that bounced now has support and so moves successfully. This extends to supports/convoys across time, e.g. convoys that were previously invalid may become valid if the future army appears and performs the expected move.</p><ul><li>If the new resolution matches an existing child board that spawned from this one, then no new timeline splits. So if two units bounced and both receive one new support from their relative future next turn, they still bounce and no new board is created (assuming no other changes elsewhere on this board).</li><li>If the new resolution does not match an existing child board that spawned from this one, a new timeline appears. New timelines always appear below all existing timelines, and are always created in a canonical order (earliest board first; if boards are of equal age, lowest timeline number first).</li></ul><p>Note that this is different to 5D Chess where boards can spawn above or below existing timelines, potentially changing the coordinates of existing boards. There's no concept of a turn belonging to a player in Diplomacy (instead, they belong to everyone simultaneously) and 5D Diplomacy extends this thinking, so timelines spawn in only one direction. Board coordinates also never change.</p><p>Main turns (spring and fall) and winter boards adjudicate simultaneously if all are at the end of their respective timelines. So a player may be creating builds on one board and creating moves on another in the same turn. Though of course these must be kept separate, so building is not permitted on movement boards and vice versa.</p><p>Build/disband counts are per board. If a player controls fewer centres than they have units in one timeline but more in another, the difference does not cancel out: they must disband in the former and may build only in the latter. If they fail to enter enough disbands on a given board, units are removed from that board at random.</p><p>If any board requires retreats, adjudication pauses for all boards without retreats. Retreats may only move to an adjacent region on the same board.</p><p>A player achieves victory under one of the following conditions:</p><ul><li>They are the only player to control at least 18 unique supply centres across all active boards. Unique here means unique by region name, so controlling Serbia in Timeline 1 and Serbia in Timeline 2 counts as only one supply centre.</li><li>If more than one player controls more than 18 unique supply centres, they are the only one with a clear majority. It's possible for two players to reach 18 centres in the same turn, e.g. if they have targeted different timelines.</li></ul><p>As with regular Diplomacy, it's possible for 5D Diplomacy to feature variant maps with completely different region arrangements. Other variants, such as variants with new rules, are not supported.</p><p>Modifying the server to adjudicate custom variants in 5D is simple. First, edit the list of nations in . Then edit the JSON files in the folder  to match the intended board. Any subsequent run of the server will use those to create and adjudicate worlds.</p><ul><li>Modify  to change supply centres and starting/home centres.</li><li>Modify  to change connections between regions.</li><li>Modify  to change regions.</li><li>Modify  to change starting units.</li></ul><p>Modifying the client is tricker as it is much more tied to this particular Diplomacy board. While <code>client/src/data/regions.ts</code> contains the list of regions and associated data, you will also need to replace the SVG files in  and then reference them in <code>client/src/hooks/useRegionSvg.tsx</code>.</p>","contentLength":12562,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"juspay/hyperswitch","url":"https://github.com/juspay/hyperswitch","date":1739657072,"author":"","guid":393,"unread":true,"content":"<p>An open source payments switch written in Rust to make payments fast, reliable and affordable</p><div align=\"center\">\n  Single API to access the payments ecosystem and its features \n</div><a href=\"https://raw.githubusercontent.com/juspay/hyperswitch/main/#introduction\"></a> Juspay, founded in 2012, is a global leader in payment orchestration and checkout solutions, trusted by 400+ leading enterprises and brands worldwide. Hyperswitch is Juspay's new generation of composable, commercial open-source payments platform for merchant and brands. It is an enterprise-grade, transparent and modular payments platform designed to provide digital businesses access to the best payments infrastructure. \n<p>Here are the key components of Hyperswitch that deliver the whole solution:</p><ul><li><p><a href=\"https://github.com/juspay/hyperswitch\">Hyperswitch Backend</a>: Hyperswitch backend enables seamless payment processing with comprehensive support for various payment flows - authorization, authentication, void and capture workflows along with robust management of post-payment processes like refunds and chargeback handling. Additionally, Hyperswitch supports non-payment use cases by enabling connections with external FRM or authentication providers as part of the payment flow. The backend optimizes payment routing with customizable workflows, including success rate-based routing, rule-based routing, volume distribution, fallback handling, and intelligent retry mechanisms for failed payments based on specific error codes.</p></li><li><p><a href=\"https://github.com/juspay/hyperswitch-web\">SDK (Frontend)</a>: The SDK, available for web, <a href=\"https://github.com/juspay/hyperswitch-client-core\">Android, and iOS</a>, unifies the payment experience across various methods such as cards, wallets, BNPL, bank transfers, and more, while supporting the diverse payment flows of underlying PSPs. When paired with the locker, it surfaces the user's saved payment methods.</p></li><li><p><a href=\"https://github.com/juspay/hyperswitch-control-center\">Control Center</a>: The Control Center enables users to manage the entire payments stack without any coding. It allows the creation of workflows for routing, payment retries, and defining conditions to invoke 3DS, fraud risk management (FRM), and surcharge modules. The Control Center provides access to transaction, refund, and chargeback operations across all integrated PSPs, transaction-level logs for initial debugging, and detailed analytics and insights into payment performance.</p></li></ul><a href=\"https://raw.githubusercontent.com/juspay/hyperswitch/main/#architectural-overview\"></a><img src=\"https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/features.png\"><img src=\"https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/non-functional-features.png\"><img src=\"https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/imgs/hyperswitch-architecture-v1.png\"><a href=\"https://raw.githubusercontent.com/juspay/hyperswitch/main/#try-hyperswitch\"></a><p>You can run Hyperswitch on your system using Docker compose after cloning this repository.</p><pre><code>git clone --depth 1 --branch latest https://github.com/juspay/hyperswitch\ncd hyperswitch\ndocker compose up -d\n</code></pre><p>Check out the <a href=\"https://raw.githubusercontent.com/juspay/hyperswitch/main/docs/try_local_system.md\">local setup guide</a> for a more details on setting up the entire stack or component wise. This takes 15-mins and gives the following output</p><pre><code>[+] Running 2/2\n✔ hyperswitch-control-center Pulled 2.9s\n✔ hyperswitch-server Pulled 3.0s\n[+] Running 6/0\n\n✔ Container hyperswitch-pg-1 Created 0.0s\n✔ Container hyperswitch-redis-standalone-1 Created 0.0s\n✔ Container hyperswitch-migration_runner-1 Created 0.0s\n✔ Container hyperswitch-hyperswitch-server-1 Created 0.0s\n✔ Container hyperswitch-hyperswitch-web-1 Created 0.0s\n✔ Container hyperswitch-hyperswitch-control-center-1 Created 0.0s\n\nAttaching to hyperswitch-control-center-1, hyperswitch-server-1, hyperswitch-web-1, migration_runner-1, pg-1, redis-standalone-1\n</code></pre><p>The fastest and easiest way to try Hyperswitch on AWS is via our CDK scripts</p><ol><li><p>Click on the following button for a quick standalone deployment on AWS, suitable for prototyping. No code or setup is required in your system and the deployment is covered within the AWS free-tier setup.</p></li><li><p>Sign-in to your AWS console.</p></li><li><p>Follow the instructions provided on the console to successfully deploy Hyperswitch. This takes 30-45mins and gives the following output</p></li></ol><table><tbody><tr><td><code>http://hyperswitch-&lt;host-id.region&gt;.elb.amazonaws.com</code></td></tr><tr><td><code>http://&lt;cloudfront.host-id&gt;/0.103.1/v0/HyperLoader.js</code></td></tr><tr><td>Control center server running on</td><td><code>http://hyperswitch-control-center-&lt;host-id.region&gt;.elb.amazonaws.com</code>, Login with Email: </td></tr><tr><td>Hyperswitch Demo Store running on</td><td><code>http://hyperswitch-sdk-demo-&lt;host-id.region&gt;.elb.amazonaws.com</code></td></tr><tr><td><code>http://hyperswitch-logs-&lt;host-id.region&gt;.elb.amazonaws.com</code>, Login with username: , password: </td></tr></tbody></table><p>We support deployment on GCP and Azure via Helm charts which takes 30-45mins. You can read more at <a href=\"https://docs.hyperswitch.io/hyperswitch-open-source/deploy-on-kubernetes-using-helm\">Hyperswitch docs</a>.</p><p>You can experience the product by signing up for our <a href=\"https://app.hyperswitch.io/\">hosted sandbox</a>. The signup process accepts any email ID and provides access to the entire Control Center. You can set up connectors, define workflows for routing and retries, and even try payments from the dashboard.</p><a href=\"https://raw.githubusercontent.com/juspay/hyperswitch/main/support-feature-requests\"><h2>Support, Feature requests &amp; Bugs</h2></a><p>For any support, join the conversation in <a href=\"https://join.slack.com/t/hyperswitch-io/shared_invite/zt-2jqxmpsbm-WXUENx022HjNEy~Ark7Orw\">Slack</a></p><p>For new product features, enhancements, roadmap discussions, or to share queries and ideas, visit our <a href=\"https://github.com/juspay/hyperswitch/discussions\">GitHub Discussions</a></p><a href=\"https://raw.githubusercontent.com/juspay/hyperswitch/main/our-vision\"></a><p>Payments are evolving rapidly worldwide, with hundreds of processors, fraud detection systems, authentication modules, and new payment methods and flows emerging. Businesses building or managing their own payment stacks often face similar challenges, struggle with comparable issues, and find it hard to innovate at the desired pace.</p><p>Hyperswitch serves as a well-architected designed reference platform, built on best-in-class design principles, empowering businesses to own and customize their payment stack. It provides a reusable core payments stack that can be tailored to specific requirements while relying on the Hyperswitch team for enhancements, support, and continuous innovation.</p><ol><li>Embrace Payments Diversity: It will drive innovation in the ecosystem in multiple ways.</li><li>Make it Open Source: Increases trust; Improves the quality and reusability of software.</li><li>Be community driven: It enables participatory design and development.</li><li>Build it like Systems Software: This sets a high bar for Reliability, Security and Performance SLAs.</li><li>Maximise Value Creation: For developers, customers &amp; partners.</li></ol><p>This project is being created and maintained by <a href=\"https://juspay.io\">Juspay</a></p><a href=\"https://raw.githubusercontent.com/juspay/hyperswitch/main/#versioning\"></a><a href=\"https://raw.githubusercontent.com/juspay/hyperswitch/main/#copyright-and-license\"></a><a href=\"https://raw.githubusercontent.com/juspay/hyperswitch/main/team-behind-hyperswitch\"></a><p>The core team of 150+ engineers building Hyperswitch. Keep up the great work! 🥂</p><a href=\"https://github.com/juspay/hyperswitch/graphs/contributors\"><img src=\"https://contributors-img.web.app/image?repo=juspay/hyperswitch\" alt=\"Contributors\"></a>","contentLength":5742,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"GitHubDaily/GitHubDaily","url":"https://github.com/GitHubDaily/GitHubDaily","date":1739657072,"author":"","guid":394,"unread":true,"content":"<p>坚持分享 GitHub 上高质量、有趣实用的开源技术教程、开发者工具、编程网站、技术资讯。A list cool, interesting projects of GitHub.</p><p>多年以前，我曾看到 GitHub 开源项目作者、全栈工程师 TJ Holowaychunk 说过这么一句话：</p><p>\"I don't read books, never went to school, I just read other people's code and always wonder how things work\"。</p><p>从那时起，我便认为，通过阅读源码，站在前辈的角度上，去思考代码架构与程序逻辑，乃是提升编程技巧最好的方式。</p><p>因此，GitHub 也自然而然的，成为我最喜爱的开发者平台。</p><p>秉着挖掘开源价值的初衷，GitHubDaily 自 2015 年 10 月 10 日正式成立。</p><p>我们希望能通过这一举措，帮助开发者们发现当下最火的开源项目，掌控最新技术动态, 扩大技术视野, 并从开源项目的学习中获得编程能力的提升。</p><p>目前，GitHubDaily 已累积分享超过 8000 个开源项目，内容包括但不限于 GitHub 上的开源技术资料、开发者工具、编程网站以及成熟应用。</p><p>除了 GitHub 之外，我们也开始在下面多个社交媒体平台，帮助开发者传播与分享优质开源项目，挖掘其未来的技术应用前景。</p><p>如果你想接收最新的 GitHub 开源项目资讯，可以关注一下👇</p><blockquote><p>有不错的开源项目，也欢迎到本仓库的 <a href=\"https://github.com/GitHubDaily/GitHubDaily/issues/new\">issues</a> 推荐或自荐项目，我们期待你的分享。</p></blockquote><p>下面是对 GitHubDaily 在 2024 年所推荐的项目进行分类整理，方便大家查找以往分享过的内容。</p>","contentLength":1556,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"cypress-io/cypress","url":"https://github.com/cypress-io/cypress","date":1739657072,"author":"","guid":395,"unread":true,"content":"<p>Fast, easy and reliable testing for anything that runs in a browser.</p><h3 align=\"center\"> The web has evolved. Finally, testing has too. </h3><p align=\"center\"> Fast, easy and reliable testing for anything that runs in a browser. </p><p>Install Cypress for Mac, Linux, or Windows, then <a href=\"https://on.cypress.io/install\">get started</a>.</p><pre><code>npm install cypress --save-dev\n</code></pre><pre><code>pnpm add cypress --save-dev\n</code></pre><p>This project is licensed under the terms of the <a href=\"https://raw.githubusercontent.com/cypress-io/cypress/develop/LICENSE\">MIT license</a>.</p><p>Configure a badge for your project's README to show your test status or test count in the <a href=\"https://www.cypress.io/cloud\">Cypress Cloud</a>.</p><p>Or let the world know your project is using Cypress with the badge below.</p><pre><code>[![Cypress.io](https://img.shields.io/badge/tested%20with-Cypress-04C38E.svg)](https://www.cypress.io/)\n</code></pre>","contentLength":647,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"microsoft/markitdown","url":"https://github.com/microsoft/markitdown","date":1739657072,"author":"","guid":396,"unread":true,"content":"<p>Python tool for converting files and office documents to Markdown.</p><blockquote><p>[!IMPORTANT] MarkItDown 0.0.2 alpha 1 (0.0.2a1) introduces a plugin-based architecture. As much as was possible, command-line and Python interfaces have remained the same as 0.0.1a3 to support backward compatibility. Please report any issues you encounter. Some interface changes may yet occur as we continue to refine MarkItDown to a first non-alpha release.</p></blockquote><p>MarkItDown is a utility for converting various files to Markdown (e.g., for indexing, text analysis, etc). It supports:</p><ul><li>Images (EXIF metadata and OCR)</li><li>Audio (EXIF metadata and speech transcription)</li><li>Text-based formats (CSV, JSON, XML)</li><li>ZIP files (iterates over contents)</li></ul><p>To install MarkItDown, use pip: . Alternatively, you can install it from the source:</p><pre><code>git clone git@github.com:microsoft/markitdown.git\ncd markitdown\npip install -e packages/markitdown\n</code></pre><pre><code>markitdown path-to-file.pdf &gt; document.md\n</code></pre><p>Or use  to specify the output file:</p><pre><code>markitdown path-to-file.pdf -o document.md\n</code></pre><p>You can also pipe content:</p><pre><code>cat path-to-file.pdf | markitdown\n</code></pre><p>MarkItDown also supports 3rd-party plugins. Plugins are disabled by default. To list installed plugins:</p><pre><code>markitdown --list-plugins\n</code></pre><pre><code>markitdown --use-plugins path-to-file.pdf\n</code></pre><p>To find available plugins, search GitHub for the hashtag . To develop a plugin, see <code>packages/markitdown-sample-plugin</code>.</p><h3>Azure Document Intelligence</h3><p>To use Microsoft Document Intelligence for conversion:</p><pre><code>markitdown path-to-file.pdf -o document.md -d -e \"&lt;document_intelligence_endpoint&gt;\"\n</code></pre><p>More information about how to set up an Azure Document Intelligence Resource can be found <a href=\"https://learn.microsoft.com/en-us/azure/ai-services/document-intelligence/how-to-guides/create-document-intelligence-resource?view=doc-intel-4.0.0\">here</a></p><pre><code>from markitdown import MarkItDown\n\nmd = MarkItDown(enable_plugins=False) # Set to True to enable plugins\nresult = md.convert(\"test.xlsx\")\nprint(result.text_content)\n</code></pre><p>Document Intelligence conversion in Python:</p><pre><code>from markitdown import MarkItDown\n\nmd = MarkItDown(docintel_endpoint=\"&lt;document_intelligence_endpoint&gt;\")\nresult = md.convert(\"test.pdf\")\nprint(result.text_content)\n</code></pre><p>To use Large Language Models for image descriptions, provide  and :</p><pre><code>from markitdown import MarkItDown\nfrom openai import OpenAI\n\nclient = OpenAI()\nmd = MarkItDown(llm_client=client, llm_model=\"gpt-4o\")\nresult = md.convert(\"example.jpg\")\nprint(result.text_content)\n</code></pre><pre><code>docker build -t markitdown:latest .\ndocker run --rm -i markitdown:latest &lt; ~/your-file.pdf &gt; output.md\n</code></pre><p>This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit <a href=\"https://cla.opensource.microsoft.com\">https://cla.opensource.microsoft.com</a>.</p><p>When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.</p><p>You can help by looking at issues or helping review PRs. Any issue or PR is welcome, but we have also marked some as 'open for contribution' and 'open for reviewing' to help facilitate community contributions. These are ofcourse just suggestions and you are welcome to contribute in any way you like.</p><ul><li><p>Navigate to the MarkItDown package:</p></li><li><p>Install  in your environment and run tests:</p><pre><code>pip install hatch  # Other ways of installing hatch: https://hatch.pypa.io/dev/install/\nhatch shell\nhatch test\n</code></pre><p>(Alternative) Use the Devcontainer which has all the dependencies installed:</p><pre><code># Reopen the project in Devcontainer and run:\nhatch test\n</code></pre></li><li><p>Run pre-commit checks before submitting a PR: <code>pre-commit run --all-files</code></p></li></ul><h3>Contributing 3rd-party Plugins</h3><p>You can also contribute by creating and sharing 3rd party plugins. See <code>packages/markitdown-sample-plugin</code> for more details.</p><p>This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow <a href=\"https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general\">Microsoft's Trademark &amp; Brand Guidelines</a>. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party's policies.</p>","contentLength":4183,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"codecrafters-io/build-your-own-x","url":"https://github.com/codecrafters-io/build-your-own-x","date":1739657072,"author":"","guid":397,"unread":true,"content":"<p><em>What I cannot create, I do not understand — Richard Feynman.</em></p>","contentLength":62,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"zaidmukaddam/scira","url":"https://github.com/zaidmukaddam/scira","date":1739657072,"author":"","guid":398,"unread":true,"content":"<p>Scira (Formerly MiniPerplx) is a minimalistic AI-powered search engine that helps you find information on the internet. Powered by Vercel AI SDK! Search with models like Grok 2.0.</p><p>A minimalistic AI-powered search engine that helps you find information on the internet.</p><ul><li><a href=\"https://tavily.com\">Tavily AI</a> - For search grounding and web search capabilities</li></ul><ul><li>: Get answers to your questions using Anthropic's Models.</li><li>: Search the web using Tavily's API.</li><li>: Get information from a specific URL.</li><li>: Get the current weather for any location using OpenWeather's API.</li><li>: Run code snippets in multiple languages using E2B's API.</li><li>: Get the location of any place using Google Maps API, Mapbox API, and TripAdvisor API.</li><li>: Track flights using AviationStack's API.</li><li><strong>Trending Movies and TV Shows</strong>: Get information about trending movies and TV shows.</li><li>: Get information about any movie or TV show.</li></ul><h2>Set Scira as your default search engine</h2><ol><li><p><strong>Open the Chrome browser settings</strong>:</p><ul><li>Click on the three vertical dots in the upper right corner of the browser.</li><li>Select \"Settings\" from the dropdown menu.</li></ul></li><li><p><strong>Go to the search engine settings</strong>:</p><ul><li>In the left sidebar, click on \"Search engine.\"</li><li>Then select \"Manage search engines and site search.\"</li></ul></li><li><ul><li>Click on \"Add\" next to \"Site search.\"</li></ul></li><li><p><strong>Set the search engine name</strong>:</p><ul><li>Enter  in the \"Search engine\" field.</li></ul></li><li><p><strong>Set the search engine URL</strong>:</p><ul><li>Enter  in the \"URL with %s in place of query\" field.</li></ul></li><li><p><strong>Set the search engine shortcut</strong>:</p><ul><li>Enter  in the \"Shortcut\" field.</li></ul></li><li><ul><li>Click on the three dots next to the search engine you just added.</li><li>Select \"Make default\" from the dropdown menu.</li></ul></li></ol><p>After completing these steps, you should be able to use Scira as your default search engine in Chrome.</p><p>To run the example locally you need to:</p><ol><li>Sign up for accounts with the AI providers you want to use. OpenAI and Anthropic are required, Tavily is required for the web search feature.</li><li>Obtain API keys for each provider.</li><li>Set the required environment variables as shown in the  file, but in a new file called .</li><li> to install the required dependencies.</li><li> to launch the development server.</li></ol><p>This project is licensed under the MIT License - see the <a href=\"https://raw.githubusercontent.com/zaidmukaddam/scira/main/LICENSE\">LICENSE</a> file for details.</p>","contentLength":2064,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"kuchin/awesome-cto","url":"https://github.com/kuchin/awesome-cto","date":1739657072,"author":"","guid":399,"unread":true,"content":"<p>— Hello, my name is Dima and I'm a CTO</p>","contentLength":40,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"golang/go","url":"https://github.com/golang/go","date":1739657072,"author":"","guid":400,"unread":true,"content":"<p>The Go programming language</p><p>Go is an open source programming language that makes it easy to build simple, reliable, and efficient software.</p><p>Unless otherwise noted, the Go source files are distributed under the BSD-style license found in the LICENSE file.</p><p>If a binary distribution is not available for your combination of operating system and architecture, visit <a href=\"https://go.dev/doc/install/source\">https://go.dev/doc/install/source</a> for source installation instructions.</p><p>Go is the work of thousands of contributors. We appreciate your help!</p><p>Note that the Go project uses the issue tracker for bug reports and proposals only. See <a href=\"https://go.dev/wiki/Questions\">https://go.dev/wiki/Questions</a> for a list of places to ask questions about the Go language.</p>","contentLength":677,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Zipstack/unstract","url":"https://github.com/Zipstack/unstract","date":1739657072,"author":"","guid":401,"unread":true,"content":"<p>No-code LLM Platform to launch APIs and ETL Pipelines to structure unstructured documents</p><p>Prompt Studio's primary reason for existence is so you can develop the necessary prompts for document data extraction super efficiently. It is a purpose-built environment that makes this not just easy for you—but, lot of fun! The document sample, its variants, the prompts you're developing, outputs from different LLMs, the schema you're developing, costing details of the extraction and various tools that let you measure the effectiveness of your prompts are just a click away and easily accessible. Prompt Studio is designed for effective and high speed development and iteration of prompts for document data extraction. Welcome to IDP 2.0!</p><h2>🧘‍♀️ Three step nirvana with Workflow Studio</h2><p>Automate critical business processes that involve complex documents with a human in the loop. Go beyond RPA with the power of Large Language Models.</p><p>🌟 : Add documents to no-code Prompt Studio and do prompt engineering to extract required fields  🌟 : Configure Prompt Studio project as API deployment or configure input source and output destination for ETL Pipeline 🌟 : Deploy Workflows as unstructured data APIs or unstructured data ETL Pipelines!</p><ul><li>Linux or MacOS (Intel or M-series)</li><li>Docker Compose (if you need to install it separately)</li></ul><p>Next, either download a release or clone this repo and do the following:</p><p>That's all there is to it!</p><p>Follow <a href=\"https://raw.githubusercontent.com/Zipstack/unstract/main/backend/README.md#authentication\">these steps</a> to change the default username and password.</p><p>See <a href=\"https://docs.unstract.com/unstract/unstract_platform/user_guides/run_platform\">user guide</a> for more details on managing the platform. Another really quick way to experience Unstract is by signing up for our <a href=\"https://us-central.unstract.com/\">hosted version</a>. It comes with a 14 day free trial!</p><p>Unstract comes well documented. You can get introduced to the <a href=\"https://docs.unstract.com/unstract/\">basics of Unstract</a>, and <a href=\"https://docs.unstract.com/unstract/unstract_platform/setup_accounts/whats_needed\">learn how to connect</a> various systems like LLMs, Vector Databases, Embedding Models and Text Extractors to it. The easiest way to wet your feet is to go through our <a href=\"https://docs.unstract.com/unstract/unstract_platform/quick_start\">Quick Start Guide</a> where you actually get to do some prompt engineering in Prompt Studio and launch an API to structure varied credit card statements!</p><p>Contributions are welcome! Please see <a href=\"https://raw.githubusercontent.com/Zipstack/unstract/main/CONTRIBUTING.md\">CONTRIBUTING.md</a> for further details to get started easily.</p><h2>👋 Join the LLM-powered automation community</h2><p>Do copy the value of  config in either  or  file to a secure location.</p><p>Adapter credentials are encrypted by the platform using this key. Its loss or change will make all existing adapters inaccessible!</p><p>In full disclosure, Unstract integrates Posthog to track usage analytics. As you can inspect the relevant code here, we collect the minimum possible metrics. Posthog can be disabled if desired by setting  to  in the frontend's .env file.</p>","contentLength":2651,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["trending"]}