{"id":"Lx2uDWR7f1yr334","title":"Programming","displayTitle":"Programming","url":"","feedLink":"","isQuery":true,"isEmpty":false,"isHidden":false,"itemCount":82,"items":[{"title":"Proj Ideas üí° - Willing to lock in for Go (2025)","url":"https://www.reddit.com/r/golang/comments/1iqp4re/proj_ideas_willing_to_lock_in_for_go_2025/","date":1739700252,"author":"/u/ComfortableAcadia839","guid":533,"unread":true,"content":"<p>I'm a full stack JS/TS developer but just recently tried Go, built an in memory key-value Redis clone.. I've realised the language makes me enjoy coding ---&gt; </p><p>Can y'all recommend some project ideas (intermediate to advanced difficulty)</p><p>I want to build some solid projects ;)</p>","contentLength":272,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"NASA has a list of 10 rules for software development","url":"https://www.cs.otago.ac.nz/cosc345/resources/nasa-10-rules.htm","date":1739696879,"author":"/u/namanyayg","guid":521,"unread":true,"content":"<h2>NASA has a list of 10 rules for software development</h2><p>Those rules were written from the point of view of people writing\nembedded software for extremely expensive spacecraft, where tolerating\na lot of programming pain is a good tradeoff for not losing a mission.\nI do not know why someone in that situation does not use the SPARK\nsubset of Ada, which subset was explicitly designed for verification,\nand is simply a better starting point for embedded programming than C.\n</p><p>I am criticising them from the point of view of people writing\nprogramming language processors (compilers, interpreters, editors)\nand application software.\n</p><p>We are supposed to teach critical thinking.  This is an example.\n</p><ul><li>How have Gerard J. Holzmann's and my different contexts affected\nour judgement?\n</li><li>Can you blindly follow his advice without considering \ncontext?\n</li><li>Can you blindly follow  advice without considering\nyour context?\n</li><li>Would these rules necessarily apply to a different/better\nprogramming language?  What if <a href=\"https://www.cs.otago.ac.nz/cosc345/resources/nasa-10-rules.htm#ppar\">function pointers\nwere tamed</a>?  What if the language provided opaque abstract\ndata types as Ada does?\n</li></ul><h3>1. Restrict all code to very simple control flow constructs ‚Äî\ndo not use  statements,\n or  constructs,\nand direct or indirect .</h3><p>Note that  and \nare how C does exception handling, so this rule bans any use\nof exception handling.\n\n</p><p>It is true that banning recursion and jumps and loops without\nexplicit bounds means that you  your program is\ngoing to terminate.  It is also true that recursive functions\ncan be proven to terminate about as often as loops can, with\nreasonably well-understood methods.  What's more important here is\nthat ‚Äúsure to terminate‚Äù does not imply\n‚Äúsure to terminate in my lifetime‚Äù:\n</p><pre>    int const N = 1000000000;\n    for (x0 = 0; x0 != N; x0++)\n    for (x1 = 0; x1 != N; x1++)\n    for (x2 = 0; x2 != N; x2++)\n    for (x3 = 0; x3 != N; x3++)\n    for (x4 = 0; x4 != N; x4++)\n    for (x5 = 0; x5 != N; x5++)\n    for (x6 = 0; x6 != N; x6++)\n    for (x7 = 0; x7 != N; x7++)\n    for (x8 = 0; x8 != N; x8++)\n    for (x9 = 0; x9 != N; x9++)\n        -- do something --;\n</pre><p>This does a bounded number of iterations.  The bound is N.\nIn this case, that's 10.  If each iteration of the loop body\ntakes 1 nsec, that's 10 seconds, or about 7.9√ó10\nyears.  What is the  difference between ‚Äúwill stop\nin 7,900,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000\nyears‚Äù and ‚Äúwill never stop‚Äù?\n\n</p><p>Worse still, taking a problem that is  expressed\nusing recursion and contorting it into something that manipulates an\nexplicit stack, while possible, turns clear maintainable code into\nbuggy spaghetti.  (I've done it, several times.  There's an example\non this web site.  It is  a good idea.)\n\n</p><h3>2. All loops must have a fixed upper-bound.  It must be trivially\npossible for a checking tool to prove statically that a preset\nupper-bound on the number of iterations of a loop cannot be exceeded.\nIf the loop-bound cannot be proven statically, the rule is considered\nviolated.</h3><p>This is an old idea.  As the example above shows, it is not enough\nby itself to be of any practical use.  You have to try to make the\nbounds reasonably , and you have to regard hitting an\nartificial bound as a run-time error.\n\n</p><p>By the way, note that putting depth bounds on recursive procedures\nmakes them every bit as safe as loops with fixed bounds.\n\n</p><h3>3. Do not use dynamic memory allocation after initialization.</h3><p>This is also a very old idea.  Some languages designed for embedded\nwork don't even  dynamic memory allocation.  The big\nthing, of course, is that embedded applications have a fixed amount of\nmemory to work with, are never going to get any more, and should not\ncrash because they couldn't handle another record.\n\n</p><p>Note that the rationale actually supports a much stronger rule:\ndon't even  dynamic memory allocation.  You can of\ncourse manage your own storage pool:\n</p><pre>    typedef struct Foo_Record *foo;\n    struct Foo_Record {\n\tfoo next;\n\t...\n    };\n    #define MAX_FOOS ...\n    static struct Foo_Record foo_zone[MAX_FOOS];\n    foo foo_free_list = 0;\n\n    void init_foo_free_list() {\n\tfor (int i = MAX_FOOS - 1; i &gt;= 0; i--) {\n\t    foo_zone[i].next = foo_free_list;\n\t    foo_free_list = &amp;foo_zone[i];\n\t}\n    }\n\n    foo malloc_foo() {\n\tfoo r = foo_free_list;\n\tif (r == 0) report_error();\n\tfoo_free_list = r-&gt;next;\n\treturn r;\n    }\n\n    void free_foo(foo x) {\n\tx-&gt;next = foo_free_list;\n\tfoo_free_list = x;\n    }\n</pre><p>This  satisfies the rule, but it\nviolates the  of the rule.  Simulating malloc()\nand free() this way is  than using the real\nthing, because the memory in foo_zone is permanently tied up\nfor Foo_Records, even if we don't need any of those at the\nmoment but do desperately need the memory for something else.\n\n</p><p>What you really need to do is to use a memory allocator\nwith known behaviour, and to prove that the amount of memory\nin use at any given time (data bytes + headers) is bounded\nby a known value.\n\n</p><p>Note also that SPlint can verify at compile time that\nthe errors NASA speak of do not occur.\n\n</p><p>One of the reasons given for the ban is that the performance\nof malloc() and free() is unpredictable.  Are these the only\nfunctions we use with unpredictable performance?  Is there\nanything about malloc() and free() which makes them\n unpredictable?  The existence of\nhard-real-time garbage collectors suggests not.\n\n</p><p>The rationale for this rule says that\n</p><blockquote>\nNote that the only way\nto dynamically claim memory in the absence of memory allocation from the\nheap is to use stack memory.  In the absence of recursion (Rule 1), an\nupper bound on the use of stack memory can derived statically, thus\nmaking it possible to prove that an application will always live within\nits pre-allocated memory means.\n</blockquote><p>Unfortunately, the sunny optimism shown here is unjustified.  Given\nthe ISO C standard (any version, C89, C99, or C11) it is \nto determine an upper bound on the use of stack memory.  There is not even\nany standard way to determine how much memory a compiler will use for the\nstack frame of a given function.  (There could have been.  There just isn't.)\nThere isn't even any requirement that two invocations of the same function\nwith the same arguments will use the same amount of memory.\nSuch a bound can only be calculated for a  version of a\nspecific compiler with specific options.  Here's a trivial example:\n</p><pre>void f() {\n    char a[100000];\n}\n</pre><p>How much memory will that take on the stack?  Compiled for debugging,\nit might take a full stack frame (however big that is) plus traceback\ninformation plus a million bytes for a[].  Compiled with optimisation,\nthe compiler might notice that a[] isn't used, and might even compile\ncalls to f() inline so that they generate no code and take no space.\nThat's an extreme example, but not really unfair.  If you want bounds\nyou can rely on, you had better  what your compiler does,\nand recheck every time anything about the compiler changes.\n\n</p><h3>4.  No function should be longer than what can be printed on\na single sheet of paper in a standard reference format with one line per\nstatement and one line per declaration.  Typically, this means no more\nthan about 60 lines of code per function.</h3><p>Since programmers these days typically read their code on-screen,\nnot on paper, it's not clear why the size of a sheet of paper is\nrelevant any longer.\n\n</p><p>The rule is arguably stated about the wrong thing.  The thing that\nneeds to be bounded is not the size of a function, but the size of a\nchunk that a programmer needs to read and comprehend.\n\n</p><p>There are also question marks about how to interpret this if you\nare using a sensible language (like Algol 60, Simula 67, Algol 68,\nPascal, Modula2, Ada, Lisp, functional languages like ML, O'CAML,\nF#, Clean, Haskell, or Fortran) that allows nested procedures.\nSuppose you have a folding editor that presents a procedure to\nyou like this:\n</p><pre>function Text_To_Floating(S: string, E: integer): Double;\n   ÔøΩ variables ÔøΩ\n   ÔøΩ procedure Mul(Carry: integer) ÔøΩ\n   ÔøΩ function Evaluate: Double ÔøΩ\n\n   Base, Sign, Max, Min, Point, Power := 10, 0, 0, 1, 0, 0;\n   for N := 1 to S.length do begin\n       C := S[N];\n       if C = '.' then begin\n          Point := -1\n       end else\n       if C = '_' then begin\n          Base := Round(Evaluate);\n          Max, Min, Power := 0, 1, 0\n       end else\n       if Char ‚â† ' ' then begin\n          Q := ord(C) - ord('0');\n          if Q &gt; 9 then Q := ord(C) - ord('A') + 10\n          Power := Point + Point\n          Mul(Q)\n       end\n    end;\n    Power := Power + Exp;\n    Value := Evaluate;\n    if Sign &lt; 0 then Value := -Value;\nend;\n</pre><p>which would be much bigger if the declarations\nwere expanded out instead of being hidden behind ÔøΩfoldsÔøΩ.\nWhich size do we count?  The folded size or the unfolded size?\n</p><p>I was using a folding editor called Apprentice on the Classic Mac\nback in the 1980s.  It was written by Peter McInerny and was lightning\nfast.\n\n</p><h3>5.  The  of the code should average to a minimum of\ntwo assertions per function.</h3><p>Assertions are wonderful documentation and the very best debugging tool\nI know of.  I have never seen any real code that had too many assertions.\n\n</p><p>The example here is one of the ugliest pieces of code I've seen in a while.\n</p><pre>if (!c_assert(p &gt;= 0) == true) {\n    return ERROR;\n}\n</pre><p>It should, of course, just be\n</p><pre>if (!c_assert(p &gt;= 0)) {\n    return ERROR;\n}\n</pre><p>Better still, it should be something like\n</p><pre>#ifdef NDEBUG\n#define check(e, c) (void)0\n#else\n#define check(e, c) if (!(c)) return bugout(c), (e)\n#ifdef NDEBUG_LOG\n#define bugout(c) (void)0\n#else\n#define bugout(c) \\\n    fprintf(stderr, \"%s:%d: assertion '%s' failed.\\n\", \\\n    __FILE__, __LINE__, #s)\n#endif\n#endif\n</pre><p>Ahem.  The more interesting part is the required density.\nI just checked an open source project from a large telecoms\ncompany, and 23 out of 704 files (not functions) contained\nat least one assertion.  I just checked my own Smalltalk\nsystem and one SLOC out of every 43 was an assertion, but\nthe average Smalltalk ‚Äúfunction‚Äù is only a few\nlines.  If the biggest function allowed is 60 lines, then\nlet's suppose the average function is about 36 lines, so\nthis rule requires 1 assertion per 18 lines.\n</p><p>Assertions are good, but what they are especially good\nfor is expressing the requirements on data that come\nfrom outside the function.  I suggest then that\n</p><ul><li>Every argument whose validity is not guaranteed by\nits typed should have an assertion to check it.\n</li><li>Every datum that is obtained from an external\nsource (file, data base, message) whose validity is\nnot guaranteed by its type should have an assertion\nto check it.\n</li></ul><p>The NASA 10 rules are written for embedded systems, where\nreading stuff from sensors is fairly common.\n\n</p><h3>6.  Data objects must be declared at the smallest possible level of\nscope.</h3><p>This is excellent advice, but why limit it to data objects?\nOh yeah, the rules were written for crippled languages where you\n declare functions in the right place.\n\n</p><p>People using Ada, Pascal (Delphi), JavaScript, or functional\nlanguages should also declare types and functions as locally as\npossible.\n\n</p><h3>7.  The return value of non-void functions must be checked by each\ncalling function, and the validity of parameters must be checked inside\neach function.</h3><p>This again is mainly about C, or any other language that indicates\nfailure by returning special values.  ‚ÄúStandard libraries\nfamously violate this rule‚Äù?  No, the  library does.\n\n</p><p>You have to be reasonable about this: it simply isn't practical\nto check  aspect of validity for \nargument.  Take the C function\n</p><pre>void *bsearch(\n    void const *key  /* what we are looking for */,\n    void const *base /* points to an array of things like that */,\n    size_t      n    /* how many elements base has */,\n    size_t      size /* the common size of key and base's elements */\n    int (*      cmp)(void const *, void const *)\n);\n</pre><p>This does a binary search in an array.  We must have key‚â†0,\nbase‚â†0, size‚â†0, cmp‚â†0, cmp(key,key)=0, and for all\n1&lt;i&lt;n,\n</p><pre>cmp((char*)base+size*(i-1), (char*)base+size*i) &lt;= 0\n</pre><p>Checking the validity in full would mean checking\nthat [key..key+size) is a range of readable addresses,\n[base..base+size*n) is a range of readable addresses,\nand doing n calls to cmp.  But the whole point of binary\nsearch is to do O(log(n)) calls to cmp.\n\n</p><p>The fundamental rules here are\n</p><ul><li>Don't let run-time errors go un-noticed, and\n</li><li>any check is safer than no check.\n</li></ul><h3>8. The use of the preprocessor must be limited to the inclusion of\nheader files and simple macro definitions.  Token pasting, variable\nargument lists (ellipses), and recursive macro calls are not allowed.</h3><p>Recursive macro calls don't really work in C, so no quarrel there.\nVariable argument lists were introduced into macros in\nC99 so that you could write code like\n</p><pre>#define err_printf(level, ...) \\\n    if (debug_level &gt;= level) fprintf(stderr, __VA_ARGS__)\n...\n    err_printf(HIGH, \"About to frob %d\\n\", control_index);\n</pre><p>This is a  thing; conditional tracing like this is a\npowerful debugging aid.  It should be , not banned.\n\n</p><p>The rule goes on to ban macros that expand into things that are\nnot complete syntactic units.  This would, for example, prohibit\nsimulating try-catch blocks with macros.  (Fair enough, an earlier rule\nbanned exception handling anyway.)  Consider this code fragment, from\nan actual program.\n</p><pre>    row_flag = border;     \n    if (row_flag) printf(\"\\\\hline\");\n    for_each_element_child(e0, i, j, e1)\n        printf(row_flag ? \"\\\\\\\\\\n\" : \"\\n\");\n        row_flag = true;  \n        col_flag = false;\n        for_each_element_child(e1, k, l, e2)\n            if (col_flag) printf(\" &amp; \");\n            col_flag = true;\n            walk_paragraph(\"\", e2, \"\");\n        end_each_element_child\n    end_each_element_child\n    if (border) printf(\"\\\\\\\\\\\\hline\");\n    printf(\"\\n\\\\end{tabular}\\n\");\n</pre><p>It's part of a program converting slides written in something like HTML\ninto another notation for formatting.  The \n‚Ä¶  loops walk over a tree.  Using\nthese macros means that the programmer has no need to know and no reason to\ncare how the tree is represented and how the loop actually works.\nYou can easily see that  must have at\nleast one unmatched { and  must have at least one\nunmatched }.  That's the kind of macro that's banned by requiring\ncomplete syntactic units.  Yet the readability and maintainability of\nthe code is  improved by these macros.\n\n</p><p>One thing the rule covers, but does not at the beginning stress, is\n‚Äúno  macro processing‚Äù.  That is,\nno #if.  The argument against it is, I'm afraid, questionable.  If there\nare 10 conditions, there are 2 combinations to test,\nwhether they are expressed as compile-time conditionals or run-time\nconditionals.\n\n</p><p>In particular, the rule against conditional macro processing\nwould prevent you defining your own <a href=\"https://www.cs.otago.ac.nz/cosc345/resources/nasa-10-rules.htm#check\">assertion macros</a>.\nIt is not obvious that that's a good idea.\n\n</p><h3>9.  The use of pointers should be restricted.  Specifically, no more\nthan one level of dereferencing is allowed.  Pointer dereference\noperations may not be hidden in macro definitions or inside typedef\ndeclarations.  Function pointers are not permitted.</h3><p>Let's look at the last point first.\n\n</p><pre>double integral(double (*f)(double), double lower, double upper, int n) {\n    // Compute the integral of f from lower to upper \n    // using Simpson's rule with n+1 points.\n    double const h = (upper - lower) / n;\n    double       s;\n    double       t;\n    int          i;\n    \n    s = 0.0;\n    for (i = 0; i &lt; n; i++) s += f((lower + h/2.0) + h*i);\n    t = 0.0;\n    for (i = 1; i &lt; n; i++) t += f(lower + h*i);\n    return (f(lower) + f(upper) + s*4.0 + t*2.0) * (h/6.0);\n}\n</pre><p>This kind of code has been important in numerical calculations since\nthe very earliest days.  Pascal could do it.  Algol 60 could do it.\nIn the 1950s, Fortran could do it.  And NASA would ban it, because in\nC,  is a function pointer.\n\n</p><p>Now it's important to write functions like this once and only once.\nFor example, the code has at least one error.  The comment says n+1\npoints, but the function is actually evaluated at 2n+1 points.  If we\nneed to bound the number of calls to f in order to meet a deadline,\nhaving that number off by a factor of two will not help.\n</p><p>It's nice to have just one place to fix.\nPerhaps I should not have copied that code from a well-known source (:-).\nCertainly I should not have more than one copy!\n\n</p><p>What can we do if we're not allowed to use function pointers?\nSuppose there are four functions foo, bar, ugh, and zoo that we need\nto integrate.  Now we can write\n</p><pre>enum Fun {FOO, BAR, UGH, ZOO};\n\ndouble call(enum Fun which, double what) {\n    switch (which) {\n        case FOO: return foo(what);\n        case BAR: return bar(what);\n        case UGH: return ugh(what);\n        case ZOO: return zoo(what);\n    }\n}\n\ndouble integral(enum Fun which, double lower, double upper, int n) {\n    // Compute the integral of a function from lower to upper \n    // using Simpson's rule with n+1 points.\n    double const h = (upper - lower) / n;\n    double       s;\n    double       t;\n    int          i;\n    \n    s = 0.0;\n    for (i = 0; i &lt; n; i++) s += call(which, (lower + h/2.0) + h*i);\n    t = 0.0;\n    for (i = 1; i &lt; n; i++) t += call(which, lower + h*i);\n    return (call(which, lower) + call(which, upper) + s*4.0 + t*2.0) * (h/6.0);\n}\n</pre><p>Has obeying NASA's rule made the code more reliable?  No, it has made\nthe code  to understand,  maintainable, and\n that it wasn't before.  Here's a call\nillustrating the mistake:\n</p><pre>x = integral(4, 0.0, 1.0, 10);</pre><p>I have checked this with two C compilers and a static checker at their\nhighest settings, and they are completely silent about this.\n\n</p><p>So there are legitimate uses for function pointers, and simulating\nthem makes programs , not better.\n\n</p><p>Now  in Fortran,\nAlgol 60, or Pascal.  Those languages had procedure \nbut not procedure . You could pass a subprogram name as\na parameter, and such a parameter could be passed on, but you could not\nstore them in variables.  You could have a  of C which\nallowed function pointer parameters, but made all function pointer\nvariables read-only.  That would give you a statically checkable subset\nof C that allowed integral().\n\n</p><p>The other use of function pointers is simulating object-orientation.\nImagine for example\n</p><pre>struct Channel {\n    void (*send)(struct Channel *, Message const *);\n    bool (*recv)(struct Channel *, Message *);\n    ...\n};\ninline void send(struct Channel *c, Message const *m) {\n    c-&gt;send(c, m);\n}\ninline bool recv(struct Channel *c, Message *m) {\n    return c-&gt;recv(c, m);\n}\n</pre><p>This lets us use a common interface for sending and receiving\nmessages on different kinds of channels.  This approach has been\nused extensively in operating systems (at least as far back as\nthe Burroughs MCP in the 1960s) to decouple the code that uses\na device from the actual device driver.     I would expect any\nprogram that controls more than one hardware device to do something\nlike this.  It's one of our key tools for controlling complexity.\n</p><p>Again, we can simulate this, but it makes adding a new kind of\nchannel harder than it should be, and the code is \nwhen we do it, not better.\n\n</p><p>The rule against more than one level of dereferencing is also\nan assault on good programming.  One of the key ideas that was\ndeveloped in the 1960s is the idea of ;\nthe idea that it should be possible for one module to define a\ndata type and operations on it and another module to use instances\nof that data type and its operations <em>without having to know\nanything about what the data type is</em>.\n</p><p>One of the things I detest about Java is that it spits in the\nface of the people who worked out that idea.  Yes, Java (now) has\ngeneric type parameters, and that's good, but you cannot use a\n type without knowing what that type is.\n\n</p><p>Suppose I have a module that offers operations\n</p><ul></ul><p>And suppose that I have two interfaces in mind.  One of them\nuses integers as tokens.\n</p><pre>// stasher.h, version 1.\ntypedef int token;\nextern token stash(item);\nextern item  recall(token);\nextern void  delete(token);\n</pre><p>Another uses pointers as tokens.\n</p><pre>// stasher.h, version 2.\ntypedef struct Hidden *token;\nextern  token stash(item);\nextern  item  recall(token);\nextern  void  delete(token);\n</pre><pre>void snoo(token *ans, item x, item y) {\n    if (better(x, y)) {\n\t*ans = stash(x);\n    } else {\n\t*ans = stash(y);\n    }\n}\n</pre><p>By the NASA rule, the function snoo() would not be accepted or rejected on\nits own merits.  With stasher.h, version 1, it would be accepted.\nWith stasher.h, version 2, it would be rejected.\n\n</p><p>One reason to prefer version 2 to version 1 is that version 2 gets\nmore use out of type checking.  There are ever so many ways to get an\nint in C.  Ask yourself if it ever makes sense to do\n</p><pre>token t1 = stash(x);\ntoken t2 = stash(y);\ndelete(t1*t2);\n</pre><p>I really do not like the idea of banning abstract data types.\n\n</p><h3>10.  All code must be compiled, from the first day of development,\nwith all compiler warnings enabled at the compiler‚Äôs\nmost pedantic setting.  All code must compile with these setting without\nany warnings.  All code must be checked daily with at least one, but\npreferably more than one, state-of-the-art static source code analyzer\nand should pass the analyses with zero warnings.</h3><p>This one is good advice.  Rule 9 is really about making your code\nworse in order to get more benefit from limited static checkers.  (Since\nC has no standard way to construct new functions at run time, the set of\nfunctions that a particular function pointer  point to can\nbe determined by a fixed-point data flow analysis, at least for most\nprograms.)  So is rule 1.  \n\n\n\n</p>","contentLength":21484,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1iqode3/nasa_has_a_list_of_10_rules_for_software/"},{"title":"Resigning as Asahi Linux project lead","url":"https://marcan.st/2025/02/resigning-as-asahi-linux-project-lead/","date":1739696473,"author":"/u/namanyayg","guid":530,"unread":true,"content":"<p>Back in the late 2000s, I was a major contributor to the Wii homebrew scene. At the time, I worked on software (people call them ‚Äújailbreaks‚Äù these days) to allow users to run their own unofficial apps on the Nintendo Wii.</p><p>I was passionate about my work and the team I was part of (Team Twiizers, later fail0verflow). Despite that, I ended up burning out, primarily due to the very large fraction of entitled users. Most people using our software just wanted to play pirated games (something we did not support, condone, or directly enable). We kept playing a cat and mouse game with the manufacturer to keep the platform open, only to see our efforts primarily used by people who just wanted to steal other people‚Äôs work, and very loudly felt entitled to it. It got really old after a while. As newer game consoles were released, I ended up focusing on Linux ports purely for fun, and didn‚Äôt attempt to build a community nor work on the jailbreaks/exploits that would end up becoming a tool used by pirates.</p><p>When Apple released the M1, I realized that making it run Linux was my dream project. The technical challenges were the same as my console homebrew projects of the past (in fact, much bigger), but this time, the platform was already open - there was no need for a jailbreak, and no drama and entitled users who want to pirate software to worry about. And running Linux on an M1 was a  bigger deal than running it on a PS4.</p><p>I launched the Asahi Linux project, and received an immense amount of support and donations. Incredibly, I had the support I needed to make the project happen just a few days after my call to action, so I got to work. The first couple of years were amazing, as we brought the platform from nothing to one of the smoothest Linux experiences you can get on a laptop. Sure, there were/are still some bits and pieces of hardware support missing, but the overall experience rivaled or exceeded what you could get on most x86 laptops. And we built it all from scratch, with zero vendor support or documentation. It was an impossible feat, something that had never been done before, and we pulled it off.</p><p>Unfortunately, things became less fun after a while. First, there were the issues upstreaming code to the Linux kernel, which I‚Äôve already spoken at length about and I won‚Äôt repeat here. Suffice it to say, being in a position to have to upstream code across practically every Linux subsystem, touching drivers of all categories as well as some common code, is an  frustrating experience. (<em>Clarification: This has nothing to do with Rust at this point, it‚Äôs well before R4L was even merged. Upstreaming to Linux is a terrible experience in C too.</em>)</p><p>But then also came the entitled users. This time, it wasn‚Äôt about stealing games, it was about features. ‚ÄúWhen is Thunderbolt coming?‚Äù ‚ÄúAsahi is useless to me until I can use monitors over USB-C‚Äù ‚ÄúThe battery life sucks compared to macOS‚Äù (nobody ever complained when compared to x86 laptops‚Ä¶) ‚ÄúI can‚Äôt even check my CPU temperature‚Äù (yes, I seriously got that one). (<em>Edit: This wasn‚Äôt just a few instances; I‚Äôve seen variations on the first three posted hundreds of times by now, including takes like ‚ÄúThunderbolt/DP Alt are never going to happen‚Äù. A few times is fine, but the same thing repeated over and over again every day while we‚Äôre trying to make these things happen will get to anyone.</em>)</p><p>And, of course, ‚ÄúWhen is M3/M4 support coming?‚Äù</p><p>For a long time, well after we had a stable release, people kept claiming Asahi Linux and Fedora Asahi Remix in particular were ‚Äúalpha‚Äù and ‚Äúunstable‚Äù and ‚Äúnot suitable for a daily driver‚Äù (despite <a href=\"https://stats.asahilinux.org\">thousands of users</a>, myself included, daily driving it and even using it for servers).</p><p>No matter how much we did, how many impossible feats we pulled off, people always wanted more. And more. Meanwhile, donations and pledges kept slowly , and have done so since the project launched. Not enough to spell immediate doom for my dream of working on Asahi full time in the short term, but enough to make me wonder if any of this was really appreciated. The all-time peak monthly donation volume was the very first month or two. It seemed the more things we accomplished, the less support we had.</p><p>I knew burnout was a very real risk and managed this by limiting my time spent on certain areas, such as kernel upstreaming. This worked reasonably well and was mostly sustainable at the time.</p><p>Then 2024 happened. Last year was incredibly tumultuous for me due to personal reasons which I won‚Äôt go into detail about. Suffice it to say, I ended up traveling for most of the year, all the while having to handle various abusers and stalkers who harassed and attacked me and my family (and continue to do so).</p><p>I did make some progress in 2024, but this left me in a very vulnerable position. I hadn‚Äôt gotten nearly as much Asahi work done as I‚Äôd liked, and the users weren‚Äôt getting any quieter about demanding more features and machine support.</p><p>We shipped conformant Vulkan drivers and a whole emulation stack for x86-64 games and apps, but we were still stuck without DP Alt Mode (a feature which required deep reverse engineering, debugging, and kernel surgery to pull off, and which, if it were to be implemented properly and robustly, would require a major refactor of certain kernel subsystems or perhaps even the introduction of an entirely new subsystem).</p><p>I slowly started to ramp work up again at the beginning of this year, feeling very stressed out and guilty about having gotten very little work done for the previous year. ‚ÄúFull‚Äù DP Alt support was still a ways away, but we were hoping to ship a limited version that only worked on a specific Type C port for each machine type in the first month or two of the year. Sven had gotten some progress into the PHY code in December, so I picked it up and ended up beating the code of three drivers into enough shape that it mostly worked reliably. Even though it wasn‚Äôt the best approach, it was the most I could manage without having another huge bikeshed discussion with the kernel community (I did <a href=\"https://lore.kernel.org/lkml/fda8b831-1ffc-4087-8e7b-d97779b3ecc5@marcan.st/T/#u\">try</a> to bring the subject up on the mailing lists, but it didn‚Äôt get much response).</p><p>The issues Rust for Linux has had surviving as an upstream Linux project are well documented, so I won‚Äôt repeat them in detail here. Suffice it to say, I consider Linus‚Äô handling of the integration of Rust into Linux a major failure of leadership. Such a large project needs significant support from major stakeholders to survive, while his approach seems to have been to just wait and see. Meanwhile, multiple subsystem maintainers downstream of him have done their best to stonewall or hinder the project, issue unacceptable verbal abuse, and generally hurt morale, with no consequence. One major Rust for Linux maintainer already resigned a few months ago.</p><p>As you know, this is deeply personal to me, as we‚Äôve made a bet on Rust for Linux for Asahi. Not just for fun (or just for memory safety), either: Rust is the entire reason our GPU driver was able to succeed in the time it did. We have two more Rust drivers in our downstream tree now, and a third one on track to be rewritten from C to Rust, because Rust is simply much better suited to the unique challenges we face, and the C driver is becoming unmaintainable. This is, by the way, the same reason the new Nova driver for Nvidia GPUs is being written in Rust. More modern programming languages are better suited to writing drivers for more modern hardware with more complexity and novel challenges, unsurprisingly.</p><p>Some might be wondering why we can‚Äôt just let the Rust situation play out on its own over a longer period of time, perhaps several more years, and simply maintain things downstream until then. One reason is that, of course, this situation is hurting developer morale in the present. Another is that our Apple GPU driver is itself major evidence that Rust for Linux is fit for purpose (it was the first big driver to be written from scratch in Rust and brought along with it lots of development in Rust kernel abstractions). Simply not aiming for upstream might be seen as lack of interest, and hurt the chances of survival of the Rust for Linux effort. But there‚Äôs more.</p><p>In fact, the Linux kernel development model is (perhaps paradoxically) designed to encourage upstreaming and punish downstream forks. While it is possible to just not care about upstream and maintain an outright hard fork, this is not a viable long-term solution (that‚Äôs how you get vendor Android kernel trees that die off in 2 years). The Asahi Linux downstream tree is continuously rebased on top of the latest upstream kernel, and that means that every extra patch we carry downstream increases our maintenance workload, sometimes significantly. But it goes deeper than that: Kernel/Mesa policy states that upstream Mesa support for a GPU driver cannot be merged and enabled until the kernel side is ready for merge. This means that we also have to ship a Mesa fork to users. While our GPU driver is 99% upstreamed into Mesa, it is intentionally hard-disabled and we are not allowed to submit a change that would enable it until the kernel side lands. This, in practice, means that users cannot have GPU acceleration work together with container technologies (such as Docker/Podman, but also including things like Waydroid), since standard container images will ship upstream Mesa builds, which would not be compatible. We have a <a href=\"https://pagure.io/fedora-asahi/mesa-asahi-flatpak\">partial workaround</a> for Flatpak, but all other container systems are out of luck. Due to all this and more, the difficulty of upstreaming to the Linux kernel is hurting our downstream users today.</p><p>I‚Äôm not the kind to let injustices go when I see them, so when yet another long-term maintainer abused his position to attempt to hinder R4L and block upstreaming progress, I spoke out. And the response (which has been pretty widely covered) was the last drop that put me over the edge. I resigned from my position as an upstream maintainer for Apple ARM support, as I no longer want to be involved with that community. Later in that thread, another major maintainer unironically stated <a href=\"https://lore.kernel.org/lkml/20250208204416.GL1130956@mit.edu/\">‚ÄúWe\nare the ‚Äòthin blue line‚Äô‚Äù</a>, and nobody cared, which just further confirmed to me that I don‚Äôt want to have anything to do with them. This is the same person that previously prompted a Rust for Linux maintainer to <a href=\"https://lore.kernel.org/lkml/20240828211117.9422-1-wedsonaf@gmail.com/\">quit</a>.</p><p>But it goes well beyond the public incident. In the days that followed, I learned that some members of the kernel and adjacent Linux spaces have been playing a two-faced game with me, where they feigned support for me and Asahi Linux while secretly resenting me and rallying resentment behind closed doors. All this occurred without anyone ever sending me any private email or otherwise clueing me into what was going on. I heard that one of these people, one who has a high level position in multiple projects that Asahi Linux must interact with to survive, had sided with and continues to side with individuals who have abused and harassed me directly. Apparently there were also implied falsehoods, such as the idea that I am employed by someone to work on Asahi (I am not, we have zero corporate sponsorship other than <a href=\"https://bunny.net/\">bunny.net</a> giving us free CDN credits for the hosting).</p><p>I get that some people might not have liked my Mastodon posts. Yes, I can be abrasive sometimes, and that is a fault I own up to. But this is simply not okay. I cannot work with people who form cliques behind the scenes and lie about their intentions. I cannot work with those who place blame on the messenger, instead of those who are truly toxic in the community. I cannot work with those who resent public commentary and claim things are better handled in private despite the fact that nothing ever seems to change in private. I cannot work with those who denounce calling out misbehavior on social media to thousands of followers, while themselves roasting people both on social media and on mailing lists with thousands of subscribers. I cannot work with those in high-level positions who use politically charged and discriminatory language in public and face no repercussions. I cannot work with those who say I‚Äôm the problem and everything is going great, while major supporters and maintainers are actively resigning and I keep receiving messages from all kinds of people saying they won‚Äôt touch the Linux kernel with a 10-foot pole.</p><p>When Apple released the M1, Linus Torvalds <a href=\"https://thenextweb.com/news/linus-torvalds-wants-apples-new-m1-powered-macs-to-run-linux\">wished it could run Linux</a>, but didn‚Äôt have much hope it would ever happen. We made it happen, and Linux 5.19 was <a href=\"https://lore.kernel.org/lkml/CAHk-=wgrz5BBk=rCz7W28Fj_o02s0Xi0OEQ3H1uQgOdFvHgx0w@mail.gmail.com/T/#u\">released from an M2 MacBook Air running Asahi Linux</a>. I had hoped his enthusiasm would translate to some support for our community and help with our upstreaming struggles. Sadly, that never came to pass. In November 2023 I sent him <a href=\"https://gist.github.com/marcan/fe70ee6648f3d5ae94eb8332265b8d95\">an invitation</a> to discuss the challenges of kernel contributions and maintenance and see how we could help. He never replied.</p><p>Back in 2011, Con Kolivas <a href=\"https://web.archive.org/web/20110707151924/http://apcmag.com/why_i_quit_kernel_developer_con_kolivas.htm\">left the Linux kernel community</a>. An anaesthetist by day, he was arguably the last great Linux kernel hobbyist hacker. In the years since it seems things have, if anything, only gotten worse. Today, it is practically impossible to survive being a significant Linux maintainer or cross-subsystem contributor if you‚Äôre not employed to do it by a corporation. Linux started out as a hobbyist project, but it has well and truly lost its hobbyist roots.</p><p>When I started Asahi Linux, I let it take over most of my life. I gave up most of my hobbies (after all, this was my dream hobby), and spent significantly more than full time working on the project. It was fun back then, but it‚Äôs not fun any more. I have an M3 Pro in a box and I haven‚Äôt even turned it on yet. I dread doing the bring-up work. It doesn‚Äôt feel worth the trouble.</p><p>I miss having free time where I can relax and not worry about the features we haven‚Äôt shipped yet. I miss <a href=\"https://youtube.com/@TsuiokuCircuit\">making music</a>. I miss attending jam sessions. I miss going out for dinner with my friends and family and not having to worry about how much we haven‚Äôt upstreamed. I miss being able to sit down and play a game or watch a movie without feeling guilty.</p><p>I‚Äôm resigning as lead of the Asahi Linux project, effective immediately. The project will <a href=\"https://asahilinux.org/2025/02/passing-the-torch/\">continue on without me</a>, and I‚Äôm working with the rest of the team to handle transfer of responsibilities and administrative credentials. My personal Patreon will be paused, and those who supported me personally are encouraged to transfer their support to the <a href=\"https://opencollective.com/asahilinux\">Asahi Linux OpenCollective</a> (GitHub Sponsors does not allow me to unilaterally pause payments, but my sponsors will be notified of this change so they can manually cancel their sponsorship).</p><p>I want to thank the entire Asahi Linux team, without whom I would‚Äôve never gotten anywhere alone. You all know who you are. I also give my utmost gratitude to all of my Patreon and GitHub sponsors, who made the project a viable reality to begin with.</p><p>If you are interested in hiring me or know someone who might be, please get in touch. Remote positions only please, on a consulting or flexible time/non exclusive basis. Contact: <a href=\"mailto:marcan@marcan.st\">marcan@marcan.st</a>.</p><p>: A lot of the discussion around this post and the interactions that led to it brings up the term ‚Äúbrigading‚Äù. Please read <a href=\"https://hachyderm.io/@chandlerc/114001000657957325\">this excellent Fedi post</a> for a discussion of what is and isn‚Äôt brigading.</p>","contentLength":15365,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1iqoa4n/resigning_as_asahi_linux_project_lead/"},{"title":"Are Fast Programming Languages Gaining in Popularity?","url":"https://developers.slashdot.org/story/25/02/16/0332258/are-fast-programming-languages-gaining-in-popularity?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1739694840,"author":"EditorDavid","guid":520,"unread":true,"content":"In January the TIOBE Index (estimating programming language popularity) declared Python their language of the year. (Though it was already #1 in their rankings, it had showed a 9.3% increase in their ranking system, notes InfoWorld.) TIOBE CEO Paul Jansen says this reflects how easy Python is to learn, adding that \"The demand for new programmers is still very high\" (and that \"developing applications completely in AI is not possible yet.\") \n\nIn fact on February's version of the index, the top ten looks mostly static. The only languages dropping appear to be very old languages. Over the last 12 months C and PHP have both fallen on the index ‚Äî C from the #2 to the #4 spot, and PHP from #10 all the way to #14. (Also dropping is Visual Basic, which fell from #9 to #10.) \n\nBut TechRepublican cites another factor that seems to be affecting the rankings: language speed.\n\n\nFast programming languages are gaining popularity, TIOBE CEO Paul Jansen said in the TIOBE Programming Community Index in February. Fast programming languages he called out include C++ [#2], Go [#8], and Rust [#13 ‚Äî up from #18 a year ago]. \n\nAlso, according to the updated TIOBE rankings... \n- C++ held onto its place at second from the top of the leaderboard.\n- Mojo and Zig are following trajectories likely to bring them into the top 50, and reached #51 and #56 respectively in February. \n\n\"Now that the world needs to crunch more and more numbers per second, and hardware is not evolving fast enough, speed of programs is getting important. Having said this, it is not surprising that the fast programming languages are gaining ground in the TIOBE index,\" Jansen wrote. The need for speed helped Mojo [#51] and Zig [#56] rise... \n\nRust reached its all-time high in the proprietary points system (1.47%.), and Jansen expects Go to be a common sight in the top 10 going forward.\n","contentLength":1863,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Which approach to rust is more idiomatic (Helix vs Zed)?","url":"https://www.reddit.com/r/rust/comments/1iqnats/which_approach_to_rust_is_more_idiomatic_helix_vs/","date":1739692206,"author":"/u/No_Penalty2781","guid":529,"unread":true,"content":"<p>Hi! I am curious what is the current \"meta\" (by \"meta\" I mean the current rust's community  and  way of doing things) of rust programming. I am studying source code of 2 editors I am using: <a href=\"https://github.com/helix-editor/helix/\">Helix</a> and <a href=\"https://github.com/zed-industries/zed/\">Zed</a>. And I can see that while they are doing a lot of similar things (like using LSP and parsing it outputs for example) the code is kinda different.</p><p>It starts from the file structure: in Helix there are not that many folders to look at (like you have <a href=\"https://github.com/helix-editor/helix/tree/master/helix-core\">helix-core</a> which contains features like \"diagnostic\", \"diff\", \"history\", etc but in Zed every single one of them is a different crate , which approach is more \"idiomatic\"? To divide every feature as a separate crate or to use more \"packed\" crates like \"core\".</p><p>Then the code itself is kinda different, for example I am currently looking at LSP implementation in both of them and in Helix's case I can follow along and understand the code much more easily (here is the <a href=\"https://github.com/helix-editor/helix/blob/master/helix-lsp/src/lib.rs\">file</a> I am referring to. But in Zed's case it is kinda hard to understand the code because of \"type level programming\" stuff like <a href=\"https://github.com/zed-industries/zed/blob/main/crates/lsp/src/lsp.rs#L397\">this one</a> for example. It also doesn't help that files have a lot of SLOC in them (over 1500 in normal in Zed's repository, is it also how you do rust?) Maybe I am just used to lean functions from other languages (I mainly did TypeScript and Elixir in my career).</p><p>Other thing I see is that Helix has more comments about \"why the thing is doing that in the first place\" which I find very helpful (on the other hand in seems that Zed's is abusing a lot of \"type level\" programming to have a self-documented code but it is harder to reason about at least for me) which approach here you prefer?</p>","contentLength":1635,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[R] A Survey of Logical Reasoning Capabilities in Large Language Models: Frameworks, Methods, and Evaluation","url":"https://www.reddit.com/r/MachineLearning/comments/1iqmjal/r_a_survey_of_logical_reasoning_capabilities_in/","date":1739688936,"author":"/u/Successful-Western27","guid":522,"unread":true,"content":"<p>This new survey provides a comprehensive analysis of logical reasoning capabilities in LLMs, examining different reasoning types, evaluation methods, and current limitations.</p><p>Key technical aspects: - Categorizes logical reasoning into deductive, inductive, and abductive frameworks - Evaluates performance across multiple benchmarks and testing methodologies - Analyzes the relationship between model size and reasoning capability - Reviews techniques for improving logical reasoning, including prompt engineering and chain-of-thought methods</p><p>Main findings: - LLMs show strong performance on basic logical tasks but struggle with complex multi-step reasoning - Model size alone doesn't determine reasoning ability - training methods and problem-solving strategies play crucial roles - Current evaluation methods may not effectively distinguish between true reasoning and pattern matching - Performance degrades significantly when problems require combining multiple reasoning types</p><p>I think the most important contribution here is the systematic breakdown of where current models succeed and fail at logical reasoning. This helps identify specific areas where we need to focus research efforts, rather than treating reasoning as a monolithic capability.</p><p>I think this work highlights the need for better benchmarks - many current tests don't effectively measure true reasoning ability. The field needs more robust evaluation methods that can differentiate between memorization and actual logical inference.</p><p>TLDR: Comprehensive survey of logical reasoning in LLMs showing strong basic capabilities but significant limitations in complex reasoning. Highlights need for better evaluation methods and targeted improvements in specific reasoning types.</p>","contentLength":1740,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Speedrunning Guide: Junior to Staff Engineer in 3 years","url":"https://blog.algomaster.io/p/speedrunning-guide-junior-to-staff","date":1739680258,"author":"Ashish Pratap Singh","guid":510,"unread":true,"content":"<p>Today‚Äôs newsletter features a special guest, , who was promoted from Junior to Staff Engineer at Meta in just 3 years.</p><p>In this article, Ryan will share his insights on how to fast track your career growth and get promoted faster.</p><p>Once you land that first software engineering job, the next big question becomes: how do you get promoted? Many engineers fall into the day-to-day routine of writing code without a clear idea of how to grow their careers.</p><p>This happened to me. At my first job at Amazon, I landed code without knowing what I could do to grow my skills. I left that job within eight months because I felt I wasn‚Äôt growing as an engineer. Three years later, I made it to Staff Software Engineer at Instagram after tons of mentorship. Early on, I learned that being good at coding wasn‚Äôt enough to get promoted; you have to think strategically about your career and often need to develop new behaviors to move up.</p><p>In this article, I‚Äôll share everything that helped me fast-track my way up the ladder, from developing the right mindset to making key moves that many overlook. Even if rapid growth isn‚Äôt your goal, this guide has learnings for all tech career paths.</p><ul><li><p>Software Engineering Levels</p></li><li><p>An Algorithm for Promotion</p></li><li><p>Junior (IC3) ‚Üí Mid-level (IC4)</p></li><li><p>Mid-level (IC4) ‚Üí Senior (IC5)</p></li><li><p>Senior (IC5) ‚Üí Staff (IC6)</p></li></ul><h2>Software Engineering Levels</h2><p><em>Note: ‚ÄúIC‚Äù = ‚ÄúIndividual Contributor‚Äù</em></p><p>In software engineering, companies measure career progression by levels that measure both behaviors and impact within the company. While the exact titles and structure can vary between companies, most tech companies follow a similar system:</p><ul><li><p> - Early in your career, working on smaller, well-defined tasks with guidance from more experienced engineers.</p></li><li><p> - More autonomous, handling moderately complex projects, and beginning to take initiative in improving the codebase and what they build.</p></li><li><p> - Leading larger projects with team-level influence. You‚Äôll mentor and guide the team while having a broad impact on the codebase.</p></li><li><p>: Focusing on cross-team collaboration and solving org-wide challenges. Staff engineers are strategic thinkers who influence the technical direction of their organization.</p></li><li><p><strong>Senior Staff Engineer and Beyond (IC7+): </strong>Senior staff engineers and up operate with top technical expertise, driving large-scale initiatives that have a broad impact on the company. Senior staff engineers mentor staff engineers and work closely with executive leadership to meet business objectives.</p></li></ul><p>Your impact and compensation increase as you progress, which is a lot more satisfying in my experience. Not to mention that the skills that get you promoted also let you control what you and the company work on.</p><p>Also, many companies consider only senior engineers (IC5) and higher to be ‚Äúterminal levels.‚Äù You must eventually get promoted to IC5, or you‚Äôll be managed out. Most engineers are promoted in time, so it‚Äôs not meant to scare you but to encourage you to grow.</p><h2>An Algorithm For Promotion</h2><p>There‚Äôs a common set of steps across all promotions that will get you to Staff:</p><p><strong>1) Exceed expectations at your current level</strong> - Your manager will be hesitant to find you opportunities at the next level if they have concerns about your performance at the current level. Also, when your manager puts together a promotion packet, it‚Äôll contain a history of your past ratings. The promotion committee will have concerns about your packet if you have a history of only meeting expectations for your level. Work with your manager to understand the expectations for your level and how to exceed them.</p><p><strong>2) Be direct with your manager about promotion </strong>- Once you know you‚Äôre exceeding expectations for your level, ask your manager what next-level performance looks like. Your manager plays a huge role in your promotion. They build your case and advocate for it, so they have a lot of influence on this process. Also, the lower the level, the more control your manager has. IC3 -&gt; IC4 promotions are straightforward, so your manager‚Äôs perspective is usually what happens. For IC5 -&gt; IC6, there is a lot more ambiguity, so <a href=\"https://www.developing.dev/p/how-promotions-and-ratings-work\">your manager serves more as a middleman between you and the promotion committee</a>. Your manager still plays a significant role in writing your packet and delivering feedback.</p><p><strong>3) Find next-level scope - </strong>If you only work on projects that fit your level‚Äôs behaviors, you won‚Äôt get any closer to promotion, no matter how good your work is. One simple pattern for finding next-level scope is brainstorming projects with engineers who are 1-2 levels higher than you are. Often, they will have a lot of projects sitting in their backlog that are big enough to help you get promoted. If you take on one of their projects, they‚Äôll often help mentor you, review your designs and code, and give you strong peer feedback for your future promotion packet. I wrote <a href=\"https://www.developing.dev/p/a-simple-pattern-for-finding-next\">more on this here</a>. Make sure to confirm with your manager that they agree that what you‚Äôre working on fits the behaviors of the next level.<strong>4) Maintain next-level behaviors and impact </strong>- The duration you need to perform at the next level varies depending on your level and your company. At minimum though, you need to maintain that performance for 6-12 months. This is because promotions are ‚Äúlagging‚Äù in tech. You must prove that you‚Äôre already operating at the next level before getting promoted. This reduces the risk of failing to meet expectations at the new level.</p><p>Getting promoted faster is a matter of doing steps (1), (2) and (3) as fast as possible. The best you can do is immediately start exceeding expectations in your first half and working with your manager on the next level.</p><p>Almost every team has scope for more Senior Engineers (IC5). You can get promoted up to that level if you have the skills and behaviors. Past that, situation and business scope play a much larger role. <a href=\"https://www.developing.dev/p/staff-career-growth-product-or-infra\">Many teams don‚Äôt need someone who has Staff-level leadership and technical skills</a>. If you find yourself stuck at any point due to your situation, you‚Äôll likely have to switch teams to continue growing your career.</p><p>Now that you have the algorithm that applies at any of these levels let‚Äôs get into the level-specific strategies. I‚Äôll share what got me promoted and what I would change if I did it again.</p><h2>Junior (IC3) ‚Üí Mid-level (IC4)</h2><p>The main difference between these levels is in the size of the scope that you can handle independently. Here‚Äôs a rule of thumb:</p><ul><li><p>IC3 - Can handle individual tasks (&lt;2 weeks of work) with minimal guidance</p></li><li><p>IC4 - Can handle medium-to-large features (&lt;2 months of work) with minimal guidance</p></li></ul><p>‚ÄúMinimal guidance‚Äù doesn‚Äôt mean that you can‚Äôt ask for help‚Äîit simply means that you can unblock yourself and make consistent progress. Asking good questions is one of the most effective ways to unblock yourself.</p><p>You should drive full features and do the project management for them. You should break your project into tasks, set reasonable timelines, and keep stakeholders updated.</p><p>You will not be expected to come up with the projects yet at this level‚ÄîSenior Engineers will often outline them. However, at the IC4 level, you‚Äôre expected to take more initiative:</p><ul><li><p>Initiate refactoring and code cleanups, and <a href=\"https://www.developing.dev/p/how-to-start-reviewing-code\">give thoughtful code reviews</a>. Leave the code in a better state than you found it.</p></li><li><p><strong>Contributing to production excellence - Participate in the team‚Äôs oncall, and help debug production breakages.</strong></p></li><li><p><strong>Own the health of what you build - Add test coverage, logging, and build dashboards to monitor correctness.</strong></p></li></ul><p>Optimize your dev velocity to grow faster at this level. <a href=\"https://www.developing.dev/p/shipping-code-faster\">Shipping code faster</a> creates a shorter feedback loop, accelerating your learning process. This core skill will help you ship IC4-scope projects and improve as an engineer.</p><p>Here‚Äôs an example of several promotion timelines for what you can expect:</p><ol><li><p><strong>Promotion in 6 months (exceptional) - </strong>Rare since this means meeting IC4 expectations while onboarding. This is easier for high-performing return interns since they skip onboarding and may have some past track record already.</p></li><li><p><strong>Promotion in 12 months (great) - I‚Äôd shoot for this timeline. It‚Äôs challenging yet reasonable since it gives you six months to onboard and then start meeting IC4 expectations.</strong></p></li></ol><p>Here‚Äôs my promotion timeline as an example:<strong>H1 (L3 Exceeds Expectations)</strong> - First, I took on any task that came my way. These were nice-to-have features that others didn‚Äôt have time for. I completed them quickly and started on a larger pipeline rewrite (L4 scope) that my tech lead offered me. Outside of my main project work, I made many contributions to removing dead code and speeding up existing code because I enjoyed it.</p><p>I started to hit L4 expectations in the last few months of the half. But, since I didn‚Äôt have six months track record, I didn‚Äôt meet the promotion criteria.</p><p><strong>H2 (L3‚ÜíL4 Promotion, Greatly Exceeds Expectations)</strong> - I continued driving my L4-scope project independently with high engineering quality. I came up with the idea to build a test harness to validate this rewrite that was ‚Äúcomparable to L5 quality‚Äù execution. I continued my passion for improving the codebase and led the company in adding static type annotations that MonkeyType couldn‚Äôt.</p><p>At this point, I had delivered on L4 scope for over six months, so the promotion made sense.</p><p><strong>What I Would Have Changed:</strong></p><p>Looking back, I would have discussed what IC4 growth looked like with my manager. I wasted our one-on-one time on project updates instead of career growth. This led to two problems:</p><ul><li><p><strong>Spent time on work that wasn‚Äôt impactful</strong> - I took on any work that was passed my way, even though not all of it was impactful. I probably could‚Äôve gotten more out of my time.</p></li></ul><ul><li><p><strong>Didn‚Äôt have accurate expectations</strong> - I had another engineer tell me my work was IC4 level and that I should get promoted in my first half. I knew nothing then, so I took their word for it. I was surprised when I didn‚Äôt get promoted, which could have been avoided if I had been in sync with my manager.</p></li></ul><p>Although I could have been more calculated, writing as much code as I did opened doors. My tech lead trusted me with an IC4 project because I showed I could handle it. Similarly, some of the engineering craft work I did for my own personal pleasure ended up being part of what got me promoted too. <strong>The more work you do, the luckier you get.</strong></p><h2>Mid-level (IC4) ‚Üí Senior (IC5)</h2><p>The IC4 to IC5 gap is larger than the IC3 to IC4 one. This is because IC5 promotion requires significant behavior changes. Raw code output is no longer the top priority. You <a href=\"https://www.developing.dev/p/how-some-engineers-always-lead\">need to lead</a> and <a href=\"https://www.developing.dev/p/how-to-influence-without-authority\">have a larger influence</a> within your team too. Here are a few examples of those differences:</p><p>Example 1 - Improving the codebase</p><ul><li><p>IC4 - Initiates refactoring and code cleanups.</p></li><li><p>IC5 - Identifies areas of improvement, <strong>influences the team to take goals on improving it together</strong>, then leads the charge on those goals.</p></li></ul><p>Example 2 - Production excellence</p><ul><li><p>IC4 - Participates in team‚Äôs oncall and mitigating outages.</p></li><li><p>IC5 - Creates an ‚Äúoncall improvement‚Äù workstream and <strong>builds a process for everyone to improve the team‚Äôs oncall.</strong></p></li></ul><p>Example 3 - Project direction</p><ul><li><p>IC4 - Owns the project management of a medium-to-large feature.</p></li><li><p>IC5 - <strong>Drives team planning and builds a roadmap</strong> of several medium-to-large features.</p></li></ul><p>I wouldn‚Äôt say the IC5 examples are harder, but they require a mindset shift to own things at the team level.</p><p>Also, you‚Äôll need to work on projects of sufficient scope for an IC5. There are a few ways that tech companies measure scope. Here‚Äôs a comparison of the criteria for IC4 and IC5 levels:</p><p>These criteria aren‚Äôt a checklist. Your work can be IC5 scope by meeting only some of these criteria.</p><p>IC5 is also the first time engineers begin to focus on growing others. At this level, you should mentor others and build up the team‚Äôs culture, which includes <a href=\"https://www.developing.dev/p/how-to-drive-meetings\">driving meetings</a>, knowledge sharing, recruiting activities, and organizing team activities. Starting mentorship relationships early is a good idea since you can‚Äôt rush mentorship.</p><p>If you can learn the above behaviors quickly, you can expect promotion on these timelines:</p><ol><li><p><strong>Promotion in 6 months (exceptional) - </strong>This is rare since you need to exert team-level influence as soon as you join the team. I could see this happening for someone who was under-leveled and just got promoted to IC4.</p></li><li><p><strong>Promotion in 12 months (great) - </strong>If you‚Äôre ambitious, I‚Äôd aim for this goal. It is possible to do this if you find IC5 scope in your first half. If not, one more half should secure your promotion.</p></li></ol><p>Here‚Äôs my promotion timeline as an example:</p><p><strong>H1 (IC4 Exceeds Expectations)</strong> - This half I wrapped up the workstream that got me promoted to IC4 and picked up another IC4 project. I spent a ton of time on engineering craft this half because I enjoyed it. I deprecated a few legacy systems that no one else would because they were dangerous and not that impactful. I didn‚Äôt exhibit any IC5 behaviors this half.</p><p>My manager handed me an IC5 workstream (~6 eng) to <a href=\"https://about.instagram.com/blog/engineering/cutting-threads-send-latency-in-half\">cut video messaging latency in half</a>, which I led successfully. I also began a side project, which became a multiple-half collaboration with another team. Lastly, I took on an intern who did a phenomenal job helping me execute these two roadmaps I led. Although I started exhibiting IC5 behaviors, the company canceled performance reviews this half because of the pandemic.</p><p><strong>H3 (IC4 ‚Üí IC5 Promotion, Greatly Exceeds Expectations)</strong> - My impact this half could‚Äôve met expectations at the IC6 level. I doubled down on the cross-org scope I created in H2 and developed a multi-half roadmap. I influenced and led another team to invest several engineers to <a href=\"https://about.instagram.com/blog/engineering/making-instagram-video-ads-performant\">revamp the IG video ads pipeline</a> with great results. I built out a second workstream and mentored another engineer to deliver it. This half, I had massive impact, team-level influence, and mentorship, which is what got me promoted.</p><ul><li><p><strong>The Skill of Tech Leading</strong> - If you grew from L3 ‚Üí L4 right, you should be exceptional at landing code. The L5 behavior of team-level influence is just helping others do the same. In my first half of leading an initiative, I remember feeling unsure about it since I only had two years of experience. Leaning on my strong execution skills helped me become comfortable leading others.</p></li><li><p><strong>Working Hard Led To More Opportunities</strong> - I worked a lot and had a ton of workstreams in flight at the same time. This approach increased my chances of having one that had a ton of impact. At the time, I didn‚Äôt know it and was just throwing myself at any problems that came my way. Looking back, it was a great way to derisk my promotion.</p></li><li><p> - In my first half as an L4, I took on projects that were time-intensive and not impactful. I did these migrations because I loved cleaning up tech debt. I would‚Äôve had more impact if I had influenced someone else to do them while I found IC5 scope instead.</p></li></ul><h2>Senior (IC5) ‚Üí Staff (IC6)</h2><p>Staff Engineers (IC6) are at the same level as engineering managers. They solve problems that few others can and play a critical role in setting team direction. They lead major initiatives and influence the engineering culture of teams around them.</p><p>Some say that promotion from IC5 ‚Üí IC6 is harder than IC6 ‚Üí IC7 due to the significant behavior changes needed. There are a few major differences between IC5 and IC6.</p><p><strong>1) Influence Across Teams - </strong>Staff Engineer‚Äôs projects often extend beyond their team. They take on larger problems by influencing other teams without authority.</p><p>Once IC6s establish these workstreams, they tackle the hardest problems and work through others. They focus on outcomes and don‚Äôt always do the work themselves. <strong>Working through delegation and influence across teams is the biggest mindset shift from IC5 ‚Üí IC6.</strong></p><p>This style of working isn‚Äôt limited to their main project impact. IC6s should also use their influence to inspire a culture of higher engineering quality and reliability across teams.</p><p> - Senior Engineers (IC5) build roadmaps of several medium-to-large features that help achieve their team‚Äôs goals. In this case, the problem and its business impact are clear; we just need an engineer to create a plan to solve it.</p><p>Staff Engineers (L6) handle more ambiguity. They don‚Äôt just solve known problems; they create scope by finding impactful opportunities and problems. <strong>Managers work with their L6s to expand the scope of the team.</strong></p><p>- Big tech companies determine what level projects are in a few ways. Here‚Äôs a comparison of the criteria for L5 and L6 levels:</p><p>Project complexity also distinguishes IC6 scope. <strong>Problems that IC5s can‚Äôt solve are considered IC6 scope</strong>. This is why specialists often have IC6+ scope; others often can‚Äôt do their projects.</p><p>These criteria aren‚Äôt a checklist. Work can be IC6 scope by meeting only some of these. Your manager will use these criteria to argue that your work is IC6 scope. This is one of the reasons why it‚Äôs important to align with your manager on your work‚Äôs scope.</p><p> - Staff engineers uplift others around them. They should have the ability to help IC5 engineers grow. There are a few ways they uplift others:</p><ul><li><p>Mentorship - Dedicated mentorship, preferably with senior engineers</p></li><li><p>Knowledge sharing - Writing wikis, giving presentations, contributing to Q&amp;A groups</p></li><li><p>Collaborations - Growing others while working with them (e.g. code reviews, design reviews, discussions)</p></li></ul><p>IC6 engineers should also contribute to growing the organization. This means that they help with recruiting and partner with their manager to improve team health.</p><p>Getting to the Staff Engineering level can take a long time. Since IC5 is considered ‚Äúterminal,‚Äù there is no external pressure to achieve IC6 fast. However, if you are eager to grow as fast as possible, here‚Äôs how fas you can expect promotion:</p><ul><li><p><strong>Promotion in 1 half (Ridiculous)</strong> - You‚Äôd need to start influencing outside your team as soon as you join. Even then, it‚Äôs unlikely you‚Äôd get promoted this fast unless you create something company-changing.</p></li><li><p><strong>Promotion in 2 halves (Exceptional) </strong>- Finding IC6 opportunities on your team is not always possible this fast. It‚Äôs a combination of situation and skill to get promoted in two halves, even if you execute well.</p></li><li><p><strong>Promotion in 3 halves (Great) </strong>- If you‚Äôre ambitious I‚Äôd aim for this goal. It gives you a year to find IC6 scope, which is a reasonable amount of time to pivot if needed. Also, your track record of successes in the first year will help build the narrative for promotion.</p></li></ul><p><strong>H1 (IC5 Exceeds Expectations)</strong> - I led two workstreams that were partnerships with other teams to hit our goals. I also landed a <a href=\"https://about.instagram.com/blog/engineering/making-instagram-video-ads-performant\">large win in an unplanned ads workstream</a>, which is what brought my rating above expectations. I was also one of the top contributors to code review and interviewing in my 70-person eng org. The hidden success here was that I bootstrapped a new workstream towards the end of the half that was certainly IC6 scope.</p><p><strong>H2 (IC5 ‚Üí IC6 Promotion, Greatly Exceeds Expectations)</strong> - The IC6 workstream I created turned out to be a massive opportunity. <a href=\"https://engineering.fb.com/2022/11/04/video-engineering/instagram-video-processing-encoding-reduction/\">This work was a huge success</a>, resulting in a company-wide award and <a href=\"https://www.linkedin.com/feed/update/urn:li:activity:6994387208375873536/\">public recognition from Mark Zuckerberg</a>. I also created a cross-org collaboration between 3 large orgs (70+ eng each), which received positive feedback from each director. Lastly, I ran infrastructure preparations for my org resulting in no major incidents during the most critical time of the year. The repeated influence and impact of these large initiatives is what got me promoted to IC6.</p><p> - My past context and relationships at Instagram helped me move a lot faster. I could lead several workstreams at once because I knew so much about the codebase. Also, it was easier to get work done in collaboration because I knew partner engineers from past work. Staying at one company for a longer time does have its benefits.</p><p> - When I was an IC4, I stumbled upon some IC6 scope without realizing it. I had strong initiative so I started solving problems without thinking through why it was impactful. I got lucky that the work had IC6 impact. I‚Äôve since learned the importance of understanding the ‚Äúwhy‚Äù before diving in. It helps you have consistent IC6 impact and makes it easier to get buy-in for your work.</p><p><strong>The Tech Lead Skillset Scales Well </strong>- In my promotion to Senior (IC5), I learned how to lead initiatives within my team. This skillset turned out to work well at higher levels too. The difference was just that more people were involved. This skill is a great way to continue your IC growth to the highest levels if you fit the ‚Äútech lead‚Äù archetype.</p><p>Growth to the Staff level can take a long time, and luck plays a role. As you move up the ladder, each promotion depends more and more on your situation in addition to your skill.</p><p>There are ways to increase your luck. For instance, you can go to growing companies and teams. You can pick business-critical projects. You can go where the most talented people are. None of these are foolproof, but they increase your chances.</p><p>Aside from picking your situation, one way to manufacture luck is to do as much good work as you can. Many growth opportunities came to me because of some past work I did. People would reach out to me to do more of it or because they wanted to ask me questions about something I had launched.</p><p>Although luck plays a role, there are aspects of getting promoted that rely less on luck. Here are four high-level areas:</p><p>Impact is any measurable and objective outcome that benefits your company. Promotions are a byproduct of your elevated, sustained impact. If you can learn what your organization considers impactful and you deliver that, you will be rewarded.</p><p><strong>2) Leverage is how you have more impact.</strong> Software engineers increase their leverage through people, writing, and code. Leverage is what differentiates higher-level ICs from lower-level ones. What I mean by each type of leverage:</p><ul><li><p>People - People leverage comes from technical leadership. This means setting direction, reviewing designs/code, and growing others.</p></li><li><p>Writing - Writing gives us leverage by influencing and helping others without your active involvement.</p></li><li><p>Code - Not all code is created equal. High-leverage code solves problems that few others can or helps engineers move faster at scale.</p></li></ul><p> When people hear ‚Äúpersonal brand,‚Äù their minds often go to social media. But the brand that matters most is your ‚Äúinternal brand.‚Äù What do people within your company think about your work and its value? This is the brand that you should care most about.</p><p>Most of the top ICs I know are not well-known outside of Meta. They are legendary within the company, though because people see their impressive work. Build your internal brand by doing great work and letting others know about it (<a href=\"https://www.developing.dev/p/be-visible\">further reading here</a>).</p><p><strong>4) Build your soft skills.</strong> Working with others is a necessity to do anything of consequence. Also, being someone others want to work with makes it easier to find mentors who will uplift you along the way.</p><p>Soft skills are underrated among software engineers. It‚Äôs important to be an excellent IC, but you can go so much further if you also communicate well. Also, engineers don‚Äôt often prioritize soft skills, so having them will help you stand out and lead.</p><p>One last thing I‚Äôll leave you with is something that I didn‚Äôt realize until looking back. When I first joined the industry, I was an absolute machine. I would get in early and stay until the last shuttle left at 9:27 PM. Although this might sound like hell to some people, I loved it. No one made me do that; I put in those hours because I enjoyed the work and thought it was interesting.</p><p>Looking back years later, I realize that was an unfair advantage I had. It let me put in a ton of work without getting burned out. Also, I got much more out of what I did because I was intrinsically motivated.</p><p>If there‚Äôs one thing I wish for you, it is that you find work at the intersection of what you enjoy and what will get you promoted. That is the best recipe for hyper-career growth.</p><p>Thanks for reading,Ryan Peterman</p><p>If you found it valuable, hit a like ‚ù§Ô∏è and consider subscribing for more such content every week.</p><p>If you have any questions or suggestions, leave a comment.</p><p> If you‚Äôre enjoying this newsletter and want to get even more value, consider becoming a .</p>","contentLength":24211,"flags":null,"enclosureUrl":"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0173844b-0e38-4ca8-b779-b34f7f778872_1600x413.png","enclosureMime":"","commentsUrl":null},{"title":"Fluvio: A Rust-powered streaming platform using WebAssembly for programmable data processing","url":"https://www.reddit.com/r/rust/comments/1iqgg02/fluvio_a_rustpowered_streaming_platform_using/","date":1739667635,"author":"/u/drc1728","guid":528,"unread":true,"content":"<div><p>I am in the process of writing an essay on composable streaming first architecture for data intensive applications. I am thinking of it as a follow up on this article.</p><p>Quick question for the Rust community:</p><ul><li>What information would help the Rust community know and experience Fluvio?</li><li>What would you like to see covered in the essay?</li></ul></div>   submitted by   <a href=\"https://www.reddit.com/user/drc1728\"> /u/drc1728 </a>","contentLength":357,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Show HN: Blunderchess.net ‚Äì blunder for your opponent every five moves","url":"https://blunderchess.net/","date":1739665321,"author":"eviledamame","guid":514,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43063970"},{"title":"Safe elimination of unnecessary bound checks.","url":"https://www.reddit.com/r/rust/comments/1iqev5s/safe_elimination_of_unnecessary_bound_checks/","date":1739663006,"author":"/u/tjientavara","guid":499,"unread":true,"content":"<p>Hi, I am working on a Unicode database that is pretty fast, it is a 2 step associated lookup.</p><p>Here is the code for getting the east-asian-width value of a Unicode code-point. Pay specific attention to the function. This function is a  function and the byte tables that it references are  as well. This will allow you to eventually run the unicode algorithms at both compile and run-time.</p><p>Since the tables are fixed at compile time, I can proof that all values from the table will result in values that will never break any bounds, so technically the bound checks are unnecessary.</p><p>There are two bound checks in the assembly output for this function.</p><ul><li>The check before accessing the EAST_ASIAN_WIDTH_COLUMN table (I use an assert! to do this, otherwise there will be double bound check).</li><li>And the check on the conversion to the enum.</li></ul><p>The two bound checks are the two compare + conditional-jump instructions in this code.</p><p>I could increase the size of the column table to remove one of the bound checks, but I want to keep the table small if possible.</p><p>Is there a way to safely (I don't want to use the unsafe code) proof to the compiler that those two checks are unnecessary?</p><p>P.S. technically there is a bound check before the index table a CMOV instruction, but it doubles as a way to also decompress the index table (last entry is repeated), so I feel this is not really a bound check.</p><p>I was able to concat the two tables, and use a byte offset. So now there is no way to get an out of bound access, and the bound checks are no longer emitted by the compiler.</p><p>I also added a manual check for out of bound on the enum and return zero instead, this becomes a CMOV and it eliminated all the panic code from the function.</p>","contentLength":1702,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Amazon AWS \"whoAMI\" Attack Exploits AMI Name Confusion to Take Over Cloud Instances","url":"https://www.reddit.com/r/programming/comments/1iqav3c/amazon_aws_whoami_attack_exploits_ami_name/","date":1739652192,"author":"/u/Dark-Marc","guid":513,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Incoming Rust intern need advice?","url":"https://www.reddit.com/r/rust/comments/1iq9oph/incoming_rust_intern_need_advice/","date":1739649133,"author":"/u/Helpful_Ad_9930","guid":471,"unread":true,"content":"<p>Hey everyone, I'm a 19-year-old college student who just landed a SWE internship at NVIDIA! My manager has me learning Rust and exploring one of its libraries, and I‚Äôm also reading up on operating systems and computer networking. I'm almost done with the OS book and plan to start the networking one next week.</p><p>I do have a bit of experience with embedded systems I completed two internships during my freshman year. However, so far I‚Äôm really enjoying Rust. I am quite a rookie compared to you experienced folks haha! But so far I love how Rust's compiler enforces safety, how Cargo makes dependency management a breeze compared to CMake, and the whole concept of ownership and borrowing is just super cool.</p><p>At the moment, I‚Äôm nearly finished with the Rust book. I am on the concurrency chapter. Guess I am just wondering what next? I really want this return offer and I just want to blow this opportunity out the park. I go too a state school and my manager told me he has high expectations for me after my interviews. I just do not want to let him down you know also plus kind of getting impostor syndrome a bit seeing all the other interns coming from schools such as MIT, Harvard, Standford, etc. Sorry for the vent I guess I just want to prove my worth? and show my manager they made the right choice?</p><ul><li>What fun, Rust projects have helped you learn a lot?</li><li>Are there any books you‚Äôd recommend that could help me out for the summer?</li></ul><p><strong>Books I want to read before I start summer:</strong></p><ul><li>Operating Systems (Three easy pieces)</li><li>Beej's Guide to Network Programming</li><li>C++ Concurrency in Action</li></ul>","contentLength":1578,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[D] Is my company missing out by avoiding deep learning?","url":"https://www.reddit.com/r/MachineLearning/comments/1iq9gtk/d_is_my_company_missing_out_by_avoiding_deep/","date":1739648562,"author":"/u/DatAndre","guid":257,"unread":true,"content":"<p>Disclaimer: obviously it does not make sense to use a neural network if a linear regression is enough. </p><p>I work at a company that strictly adheres to mathematical, explainable models. Their stance is that methods like Neural Networks or even Gradient Boosting Machines are too \"black-box\" and thus unreliable for decision-making. While I understand the importance of interpretability (especially in mission critical scenarios) I can't help but feel that this approach is overly restrictive. </p><p>I see a lot of research and industry adoption of these methods, which makes me wonder: are they really just black boxes, or is this an outdated view? Surely, with so many people working in this field, there must be ways to gain insights into these models and make them more trustworthy. </p><p>Am I also missing out on them, since I do not have work experience with such models?</p><p>EDIT: Context is formula one! However, races are a thing and support tools another. I too would avoid such models in anything strictly related to a race, unless completely necessary. I just feels that there's a bias that is context-independent here. </p>","contentLength":1110,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Zed for golang","url":"https://www.reddit.com/r/golang/comments/1iq8jsm/zed_for_golang/","date":1739646156,"author":"/u/MrBricole","guid":518,"unread":true,"content":"<p>I am considering using zed for writting go. Is it working out of the box with full syntax high light for noob like me such fmt.Println() ? I mean, I need to have it displaying functions under an import library.</p><p>Should I give it a try or is it only for advanced users ? </p>","contentLength":268,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Pushing autovectorization to the limit: utf-8 validator","url":"https://www.reddit.com/r/rust/comments/1iq7yn2/pushing_autovectorization_to_the_limit_utf8/","date":1739644600,"author":"/u/Laiho3","guid":483,"unread":true,"content":"   submitted by   <a href=\"https://www.reddit.com/user/Laiho3\"> /u/Laiho3 </a>","contentLength":29,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Introducing encode: Encoders/serializers made easy.","url":"https://www.reddit.com/r/rust/comments/1iq6pz7/introducing_encode_encodersserializers_made_easy/","date":1739641353,"author":"/u/Compux72","guid":282,"unread":true,"content":"<p> is a toolbox for building encoders and serializers in Rust. It is heavily inspired by the <a href=\"https://docs.rs/winnow/latest/winnow/\"></a> and <a href=\"https://docs.rs/nom/latest/nom/\"></a> crates, which are used for building parsers. It is meant to be a companion to these crates, providing a similar level of flexibility and ease of use for reversing the parsing process.</p><p>The main idea behind  is to provide a set of combinators for building serializers. These combinators can be used to build complex encoders from simple building blocks. This makes it easy to build encoders for different types of data, without having to write a lot of boilerplate code.</p><p>Another key feature of  is its support for  environments. This makes it suitable for use in embedded systems, where the standard library (and particularly the [] module) is not available.</p><p>See the <a href=\"https://github.com/Altair-Bueno/encode/tree/master/examples\"></a> folder for some examples of how to use . Also, check the <a href=\"https://docs.rs/encode/0.1.0/encode/combinators/index.html\"></a> module for a list of all the combinators provided by the crate.</p><ul><li>Ready to use combinators for minimizing boilerplate.</li></ul><ul><li>: Enables the  feature.</li><li>: Enables the use of the standard library.</li><li>: Enables the use of the  crate.</li><li>: Implements [] for [].</li></ul><h3>Why the  trait instead of ?</h3><blockquote><p>A buffer stores bytes in memory such that write operations are . The underlying storage may or may not be in contiguous memory. A BufMut value is a cursor into the buffer. Writing to BufMut advances the cursor position.</p></blockquote><p>The bytes crate was never designed with falible writes nor  targets in mind. This means that targets with little memory are forced to crash when memory is low, instead of gracefully handling errors.</p><h3>Why the  trait instead of ?</h3><ul><li>Because there is no alternative, at least that i know of, that supports  properly</li><li>Because it's easier to work with than  and </li><li>Because using  with binary data often leads to a lot of boilerplate</li></ul>","contentLength":1715,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Lil guy is trying his best","url":"https://www.reddit.com/r/artificial/comments/1iq6dyy/lil_guy_is_trying_his_best/","date":1739640466,"author":"/u/MetaKnowing","guid":292,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Transition from C++ to Rust","url":"https://www.reddit.com/r/rust/comments/1iq67vq/transition_from_c_to_rust/","date":1739640014,"author":"/u/Dvorakovsky","guid":281,"unread":true,"content":"<p>Guys, are here any people who were learning/coding in C++ and switched to Rust. How do you feel? I mean I could easily implement linked lists: singly, doubly in c++, but when I saw how it is implemented in Rust I'd say I got lost completely. I'm only learning rust... So yeah, I really like ownership model even tho it puts some difficulties into learning, but I think it's a benefit rather than a downside. Even tho compared to C++ syntax is a bit messy for me</p>","contentLength":461,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"No, your GenAI model isn't going to replace me","url":"https://marioarias.hashnode.dev/no-your-genai-model-isnt-going-to-replace-me","date":1739639200,"author":"/u/dh44t","guid":279,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1iq5wq0/no_your_genai_model_isnt_going_to_replace_me/"},{"title":"Type safe Go money library beta2!","url":"https://www.reddit.com/r/golang/comments/1iq5stk/type_safe_go_money_library_beta2/","date":1739638928,"author":"/u/HawkSecure4957","guid":288,"unread":true,"content":"<p>Hello, after I released beta1, I received many constructive feedback! mainly lacking of locale support.</p><p>This update brings locale formatting support and an improved interface for better usability. With Fulus, you can perform monetary operations safely and type-soundly. Plus, you can format money for any locale supported by CLDR. You can even define custom money types tailored specifically to your application's needs! </p><p>I still need to battle test it against production projects, I have none at the moment. I am aiming next for performance benchmarking and more improvement, and parsing from string!</p><p>I am open for more feedback. Thank you! </p>","contentLength":639,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Golang Mastery Exercises","url":"https://www.reddit.com/r/golang/comments/1iq5k7w/golang_mastery_exercises/","date":1739638307,"author":"/u/Temporary-Buy-7562","guid":289,"unread":true,"content":"<p>I made a repository which has a prompt for you to write many exercises, if you complete this, and then drill the exercises, I would be sure you would reach mastery with the core of the language.</p><p>I initially wanted to make some exercises for drilling syntax since I use copilot and lsps a lot, but ended up with quite a damn comprehensive list of things you would want to do with the language, and I find this more useful than working on leetcode to really adopt the language.</p>","contentLength":474,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[D] Have any LLM papers predicted a token in the middle rather than the next token?","url":"https://www.reddit.com/r/MachineLearning/comments/1iq4f0r/d_have_any_llm_papers_predicted_a_token_in_the/","date":1739635189,"author":"/u/TheWittyScreenName","guid":516,"unread":true,"content":"<p>I‚Äôm working on a project (unrelated to NLP) where we use essentially the same architecture and training as GPT-3, but we‚Äôre more interested in finding a series of tokens to connect a starting and ending ‚Äúword‚Äù than the next ‚Äúword‚Äù. Since we‚Äôre drawing a lot from LLMs in our setup, I‚Äôm wondering if there‚Äôs been any research into how models perform when the loss function isn‚Äôt based on the next token, but instead predicting a masked token somewhere in the input sequence. </p><p>Eventually we would like to expand this (maybe through fine tuning) to predict a longer series of missing tokens than just one but this seems like a good place to start. </p><p>I couldn‚Äôt find much about alternate unsupervised training schemes in the literature but it seems like someone must have tried this already. Any suggestions, or reasons that this is a bad idea?</p>","contentLength":859,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Alexandre Mutel a.k.a. xoofx is leaving Unity","url":"https://mastodon.social/@xoofx/113997304444307991","date":1739631212,"author":"/u/namanyayg","guid":275,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1iq2zwv/alexandre_mutel_aka_xoofx_is_leaving_unity/"},{"title":"Don't \"optimize\" conditional moves in shaders with mix()+step()","url":"https://iquilezles.org/articles/gpuconditionals/","date":1739631147,"author":"/u/namanyayg","guid":274,"unread":true,"content":"\nIn this article I want to correct a popular misconception that's been making the rounds in computer graphics aficionado circles for a long time now. It has to do with conditionals when selecting between two results in the GPUs. Unfortunately there are a couple of educational websites out there that are spreading some misinformation, and it would be nice correcting that. I tried contacting the authors without success, so without further ado, here goes my attempt to fix things up a little:\nSo, say I have this code, which I actually published the other day:<div> snap45(  v )\n{\n     s = (v);\n     x = (v.x);\n     x&gt;?(s.x,):\n           x&gt;?s*():\n                      (,s.y);\n}</div>\nThe exact details of what it does don't matter for this discussion. All we care about is the two ternary operations deciding what's the final value this function should return. Indeed, depending on the value of the variable , the function will return one of three results, which are simple to compute. I could also have implemented this function with regular  statements, and all that I'm going to say in this article stays true.<p>\nNow, here's the problem - when seeing code like this, somebody somewhere will step up and invariably propose the following \"optimization\", which replaces what they believe (erroneously) are \"conditional branches\" in the code, by arithmetic operations. They will suggest something like this:</p><div> snap45(  v )\n{\n     s = (v);\n     x = (v.x);\n\n     w0 = (,x);\n     w1 = (,x)*(-w0);\n     w2 = -w0-w1;\n\n     res0 = (s.x,);\n     res1 = (s.x,s.y)*();\n     res2 = (,s.y);\n\n     w0*res0 + w1*res1 + w2*res2;\n}</div>\nThere are two things wrong with this practice. The first one shows an incorrect understanding of how the GPU works. In particular, the original shader code had no conditional branching in it. Selecting between a few registers with a ternary operator or with a plain  statement does not lead to conditional branching; all it involves is a conditional move (a.k.a. \"select\"), which is a simple instruction to route the correct bits to the destination register. You can think of it as a bitwise AND+NAND+OR on the source registers, which is a simple combinational circuit. I'll repeat it again - there is no branching, the instruction pointer isn't manipulated, there's no prediction involved, no pipe to flush, no instruction cache to invalidation, no nothing.<p>\nFor the record, of course GPUs can do real branching, and those are fine and fast and totally worth it when big chunks of code and computation are to be skipped given a condition. As with all things computing, always check the generated machine code to know what is happening exactly and when. But one thing you can safely assume without having to check any generated code - when moving simple values or computations like in my original example, you are guaranteed to not branch. This has been true for decades at this point, with GPUs. And while I'm not an expert in CPUs, I am pretty sure this is true for them as well.</p><p>\nThe second wrong thing with the supposedly optimized version is that it actually runs much slower than the original version. You can measure it in a variety of hardware. I can only assume that's because the </p> function is probably implemented with some sort of conditional move or subtract + bit propagation + AND.<div> step(  x,  y )\n{\n     x &lt; y ?  : ;\n}</div>\nEither way, using the step() \"optimization\" are either using the ternary operation anyways, which produces the  or  which they will use to mask in and out the different potential outputs with a series of arithmetic multiplications and additions. Which is wasteful, the values could have been conditionally moved directly, which is what the original shader code did.<p>\nBut don't take my word for it, let's look at the generated machine code for the original code I published:</p><div><div>\nGLSL<div> x&gt;?(s.x,):\n       x&gt;?s*():\n                  (,s.y);</div></div><div>\nAMD Compiler<div>     s0,      v3, , v1\n     v4, , v0\n     s1,   vcc, (v2), s0\n v3, 0, v3, vcc\n v0, v0, v4, vcc\n vcc, (v2), s1\n v1, v1, v3, vcc\n v0, 0, v0, vcc</div></div><div>\nMicrosoft Compiler<div>   r0.xy, l(, ), v0.xy\n   r0.zw, v0.xy, l(, )\n r0.xy, -r0.xyxx, r0.zwzz\n r0.xy, r0.xyxx\n  r1.xyzw, r0.xyxy, l4()\n   r2.xy, l(,), v0.xx  r0.z, l()\n r1.xyzw, r2.yyyy, r1.xyzw, r0.zyzy\n o0.xyzw, r2.xxxx, r0.xzxz, r1.xyzw</div></div></div>\nHere we can confirm that the GPU is not branching, as I explained. Instead, according to the AMD compiler, it's performing the required comparisons ( and  - cmp=compare, gt=greater than, ngt=not greated than), and then using the result to mask the results with the bitwise operations mentioned earlier ( - cnd=conditional).<p>\nThe Microsoft compiler has expressed the same idea/implementation in a different format, but you can still see the comparison (</p> - \"lt\"=less than) and the masking or conditional move ( - mov=move, c=conditionally).<p>\nThere are no jump/branch instructions in these listings.</p><p>\nSomething not related to the discussion but interesting, is that some of the </p> GLSL calls I had in my shader before the ternary operator we are discussing, didn't become GPU instructions but rather instruction modifiers, which is the reason you see them in the listing. This means you can think of abs() calls as being free.\nSo, if you ever see somebody proposing this<div> a = ( b, c, ( y, x ) );</div>\nas an optimization to\nthen please correct them for me.","contentLength":5296,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1iq2z4j/dont_optimize_conditional_moves_in_shaders_with/"},{"title":"Altman: OpenAI not for sale, especially to competitor who is not able to beat us","url":"https://www.axios.com/2025/02/11/openai-altman-musk-offer","date":1739629077,"author":"/u/namanyayg","guid":472,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/artificial/comments/1iq29zz/altman_openai_not_for_sale_especially_to/"},{"title":"GitHub - yaitoo/xun: Xun is an HTTP web framework built on Go's built-in html/template and net/http package‚Äôs router (1.22).","url":"https://github.com/yaitoo/xun","date":1739628954,"author":"/u/imlangzi","guid":290,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/golang/comments/1iq28it/github_yaitooxun_xun_is_an_http_web_framework/"},{"title":"What is Event Sourcing?","url":"https://newsletter.scalablethread.com/p/what-is-event-sourcing","date":1739628306,"author":"/u/scalablethread","guid":278,"unread":true,"content":"<p>Traditional data storage typically focuses on the current state of an entity. For example, in an e-commerce system, you might store the current state of a customer's order: items, quantities, shipping address, etc. Event sourcing takes a different approach. Instead of storing the current state directly, it stores the events that led to that state. Each event represents a fact that happened in the past. Think of it as a detailed log of transactions on your bank statement. These events are immutable and stored in an append-only event store. The core idea is that an application's state can be derived by replaying events in the order they occurred, just like you can get your current bank balance by replaying all the transactions from the beginning. This makes Event Sourcing particularly useful for applications that require a high degree of audibility and traceability.</p><p>Every change to the application state is captured as an event object in an Event Sourcing system. These events are then stored in an event store, a database optimized for handling event data. Here's a step-by-step breakdown of how Event Sourcing works:</p><ol></ol><p>Reconstructing the state from events involves reading all the events related to an entity from the event store and applying them in sequence to reconstruct the current state. It's like simulating all the changes that have occurred to construct the current state. For example, consider an e-commerce application where an order goes through various states like \"Created,\" \"Paid,\" and \"Shipped.\" To determine the current state of an order, you would:</p><ol><li><p>Retrieve all events related to the order from the event store.</p></li><li><p>Initialize an empty order object.</p></li><li><p>Apply each event to the order object in the order in which they were stored.</p></li></ol><p>By the end of this process, the order object will reflect the current state of the order.</p><p>As the number of events grows, replaying the entire event stream to reconstruct the state can become slow and inefficient. This is where snapshots come in. A snapshot is a saved state of an entity at a specific point in time. Instead of replaying all events from the beginning, the application can load the latest snapshot and then replay only the events that occurred after the snapshot was taken. </p><ul></ul><ul></ul><p><em>If you enjoyed this article, please hit the ‚ù§Ô∏è like button.</em></p><p><em>If you think someone else will benefit from this, then please üîÅ share this post.</em></p>","contentLength":2380,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1iq20v8/what_is_event_sourcing/"},{"title":"Built a cli tool for generating .gitignore files","url":"https://www.reddit.com/r/golang/comments/1iq1ivv/built_a_cli_tool_for_generating_gitignore_files/","date":1739626739,"author":"/u/SoaringSignificant","guid":286,"unread":true,"content":"<p>I built this mostly as an excuse to play around with Charmbracelet‚Äôs libraries like Bubble Tea and make a nice TUI, but it also solves the annoying problem of constantly looking up .gitignore templates. It‚Äôs a simple CLI tool that lets you grab templates straight from GitHub, TopTal, or even your own custom repository, all from the terminal. You can search through templates using a TUI interface, combine multiple ones like mixing Go and CLion, and even save your own locally so you don‚Äôt have to redo them every time. If you‚Äôre always setting up new projects and find yourself dealing with .gitignore files over and over, this just makes life a bit easier, hopefully. If that sounds useful, check it out <a href=\"https://github.com/jasonuc/gignr\">here</a> and give it a try. And if you‚Äôve got ideas to make the TUI better or want to add something cool, feel free to open a PR. Always happy to get feedback or contributions!</p>","contentLength":890,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"ED25519 Digital Signatures In Go","url":"https://www.reddit.com/r/golang/comments/1iq1i84/ed25519_digital_signatures_in_go/","date":1739626679,"author":"/u/mejaz-01","guid":482,"unread":true,"content":"   submitted by   <a href=\"https://www.reddit.com/user/mejaz-01\"> /u/mejaz-01 </a>","contentLength":31,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Will AI Lead to the Disintermediation of Knowledge?","url":"https://www.datasciencecentral.com/will-ai-lead-to-the-disintermediation-of-knowledge/","date":1739626129,"author":"Bill Schmarzo","guid":63,"unread":true,"content":"<p>Key Blog Points: For decades, organizations have operated under the central assumption that knowledge flows downward. Senior leaders, industry veterans, and domain experts have traditionally been the primary gatekeepers of critical information. Their insights, honed over years of experience, have been the cornerstone of strategic decision-making. Enter artificial intelligence (AI). Many folks are concerned that‚Ä¶&nbsp;<a href=\"https://www.datasciencecentral.com/will-ai-lead-to-the-disintermediation-of-knowledge/\" rel=\"bookmark\">Read More ¬ª</a></p>","contentLength":431,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Show HN: I Built a Reddit-style Bluesky client ‚Äì still rough, but open to ideas","url":"https://threadsky.app/","date":1739625557,"author":"lakshikag","guid":453,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43058285"},{"title":"Chinese Vice Minister says China and the US must work together to control rogue AI: \"If not... I am afraid that the probability of the machine winning will be high.\"","url":"https://www.scmp.com/news/china/diplomacy/article/3298267/china-and-us-should-team-rein-risks-runaway-ai-former-diplomat-says","date":1739622429,"author":"/u/MetaKnowing","guid":293,"unread":true,"content":"<div datatype=\"p\" data-qa=\"Component-Component\">A former senior Chinese diplomat has called for China and the US to work together to head off the risks of rapid advances in <a target=\"_self\" href=\"https://www.scmp.com/topics/artificial-intelligence?module=inline&amp;pgtype=article\" data-qa=\"BaseLink-renderAnchor-StyledAnchor\"></a> (AI).</div><p datatype=\"p\" data-qa=\"Component-Component\">But the prospect of cooperation was bleak as geopolitical tensions rippled out through the technological landscape, former Chinese foreign vice-minister Fu Ying told a closed-door AI governing panel in Paris on Monday.</p><p datatype=\"p\" data-qa=\"Component-Component\">‚ÄúRealistically, many are not optimistic about US-China AI collaboration, and the tech world is increasingly subject to geopolitical distractions,‚Äù Fu said.</p><p datatype=\"p\" data-qa=\"Component-Component\">‚ÄúAs long as China and the US can cooperate and work together, they can always find a way to control the machine. [Nevertheless], if the countries are incompatible with each other ... I am afraid that the probability of the machine winning will be high.‚Äù</p><div datatype=\"p\" data-qa=\"Component-Component\">The panel discussion is part of a two-day global <a target=\"_self\" href=\"https://www.scmp.com/news/world/europe/article/3297992/trumps-ai-ambition-and-chinas-deepseek-overshadow-major-ai-summit-paris?module=Europe&amp;pgtype=section?module=inline&amp;pgtype=article\" data-qa=\"BaseLink-renderAnchor-StyledAnchor\"></a> that started in Paris on Monday.</div><p datatype=\"p\" data-qa=\"Component-Component\">Other panel members included Yoshua Bengio, the Canadian computer scientist recognised as a pioneer in the field, and Alondra Nelson, a central AI policy adviser to former US president Joe Biden‚Äôs administration and the United Nations.</p>","contentLength":1084,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/artificial/comments/1iq0b4t/chinese_vice_minister_says_china_and_the_us_must/"},{"title":"Building the MagicMirror in Rust with iced GUI Library ü¶Ä","url":"https://www.reddit.com/r/rust/comments/1ipzubj/building_the_magicmirror_in_rust_with_iced_gui/","date":1739620595,"author":"/u/amindiro","guid":283,"unread":true,"content":"<p>I recently embarked on a journey to build a custom MagicMirror using the Rust programming language, and I‚Äôd like to share my experiences. I wrost a blog post titled <a href=\"https://aminediro.com/posts/mirrors/#mirrors\">\"software you can love: miroir √î mon beau miroir\"</a> this project was my attempt to create a stable, resource-efficient application for the Raspberry Pi 3A.</p><p>Here's what I loved about using Rust and the iced GUI library:</p><ul><li><p><strong>Elm Architecture + Rust is a match made in heaven:</strong> iced was perfect for my needs with its Model, View, and Update paradigms. It helped keep my state management concise and leverage Rust type system</p></li><li><p> Opting for this lightweight rendering library reduced the size of the binary significantly, ending with a 9MB binary.</p></li><li><p> Although troublesome at first, I used ‚Äòcross‚Äô to cross compile Rust for armv7.</p></li></ul><p>If anyone is keen, I‚Äôm thinking of open-sourcing this project and sharing it with the community. Insights on enhancing the project's functionality or any feedback would be much appreciated!</p><p>Feel free to reach out if you're interested in the technical nitty-gritty or my experience with Rust GUI libraries in general.</p>","contentLength":1098,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"[P] Daily ArXiv filtering powered by LLM judge","url":"https://www.reddit.com/r/MachineLearning/comments/1ipz934/p_daily_arxiv_filtering_powered_by_llm_judge/","date":1739618056,"author":"/u/MadEyeXZ","guid":258,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Go Nullable with Generics v2.0.0 - now supports omitzero","url":"https://github.com/LukaGiorgadze/gonull","date":1739617221,"author":"/u/Money-Relative-1184","guid":487,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/golang/comments/1ipz22f/go_nullable_with_generics_v200_now_supports/"},{"title":"async-arp: library for probing hosts and sending advanced ARP (Address Resolution Protocol) requests.","url":"https://www.reddit.com/r/rust/comments/1ipywbp/asyncarp_library_for_probing_hosts_and_sending/","date":1739616505,"author":"/u/arcycar","guid":280,"unread":true,"content":"<p>After a few months of exploring and working with Rust, I am happy to share my first small Rust crate, <a href=\"https://crates.io/crates/async-arp\"></a> and I‚Äôd love to hear your thoughts! üöÄ</p><p>This library provides an  way to send and receive , making it useful for network discovery, debugging, and custom networking applications.</p><ul><li>üèé  Built on Tokio for non-blocking network operations</li><li>üîç  Easily detect active devices in a subnet</li><li>‚öôÔ∏è  Craft and send ARP packets dynamically</li></ul><p>You can find usage examples and API documentation here: üìñ <a href=\"https://docs.rs/async-arp/latest/async_arp/\"></a></p><p>Since this is my first crate, I‚Äôd really appreciate any feedback on:</p><ul><li>üìå  ‚Äì Is the interface intuitive and ergonomic?</li><li>üöÄ  ‚Äì Does it fit well into async Rust workflows?</li><li>üîç  ‚Äì Any improvements or best practices I may have missed?</li><li>ü¶Ä  ‚Äì Suggestions to make it more \"Rustacean\"?</li></ul><p>If you have further ideas, issues, or want to contribute, check it out on GitHub:</p><p>Thanks for checking it out‚Äîlet me know what you think! ü¶Ä</p>","contentLength":921,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"what do you use golang for?","url":"https://www.reddit.com/r/golang/comments/1ipykyd/what_do_you_use_golang_for/","date":1739615068,"author":"/u/Notalabel_4566","guid":291,"unread":true,"content":"<p>Is there any other major use than web development?</p>","contentLength":50,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Lessons from David Lynch: A Software Developer's Perspective","url":"https://lackofimagination.org/2025/02/lessons-from-david-lynch-a-software-developers-perspective/","date":1739612430,"author":"/u/aijan1","guid":277,"unread":true,"content":"<p>David Lynch passed away in January 2025, shortly after being evacuated from his Los Angeles home due to the Southern California wildfires. He‚Äôs perhaps best known for the groundbreaking TV series <a href=\"https://en.wikipedia.org/wiki/Twin_Peaks\">Twin Peaks</a>, which inspired countless shows, including The X-Files, The Sopranos, and Lost.</p><p>Lynch was genuinely a good human being who cared deeply for his actors and crew. He discovered extraordinary talent like Naomi Watts, who had struggled to land a major role in a Hollywood movie after 10 years of auditioning. From the interviews he gave, it quickly becomes apparent that he respected people of all kinds and never put anyone down ‚Äì even those who truly deserved it.</p><p>Lynch is famous for refusing to explain his movies. Although not a fan of his previous work, the great film critic Roger Ebert once wrote that <a href=\"https://en.wikipedia.org/wiki/Mulholland_Drive_(film)\">Mulholland Drive</a> remained compulsively watchable while refusing to yield to interpretation.</p><p>While Lynch offered very little in terms of what his movies meant, he was generous in sharing his views on creativity, work, and life in general. As a tribute to Lynch, I‚Äôd like to share my perspective on his life lessons from a software developer‚Äôs viewpoint.</p><blockquote><p>Ideas are like fish. If you want to catch little fish, you can stay in the shallow water. But if you want to catch the big fish, you‚Äôve got to go deeper.</p></blockquote><p>We‚Äôve all got hundreds or even thousands of ideas floating around in our brains. But the really big ones are few and far between. Once you catch a good one ‚Äìbecause they‚Äôre so rare‚Äì write it down immediately, says Lynch. From there, ideas attract other ideas and start to grow from their initial seed state. The final job is to translate those ideas into a medium, whether it‚Äôs a film, a painting, or software.</p><blockquote><p>The idea is the whole thing. If you stay true to the idea, it tells you everything you need to know, really. You just keep working to make it look like that idea looked, feel like it felt, sound like it sounded, and be the way it was.</p></blockquote><p>Software development is part art, part engineering. We don‚Äôt build the same software over and over again ‚Äì virtually all software is crafted by hand, sometimes with help from AI. If you ask two developers to create a non-trivial program, it‚Äôs very likely that the programs they produce will be different, even if the functionality is the same. Under the hood, the programming language, data structures, and overall architecture may be completely different. And on the surface, the user interfaces may look nothing alike.</p><p>It‚Äôs a good habit to listen to what users have to say, but they often can only describe their problems ‚Äì they rarely come up with good ideas to solve them. And that‚Äôs OK. It‚Äôs our job to find the right ideas, implement them well, and solve tricky problems in a way we, and hopefully the users, will love.</p><blockquote><p>My friend Bushnell Keeler, who was really responsible for me wanting to be a painter, said you need four hours of uninterrupted time to get one hour of good painting in, and that is really true.</p></blockquote><p>Like other creative fields, writing code requires deep concentration. We need to hold complex structures in our minds while working through problems. Switching between coding and other tasks disrupts  ‚Äì that magical state of mind where we lose track of time and produce code effortlessly. That‚Äôs why many developers hate meetings ‚Äì they are toxic to our productivity.</p><blockquote><p>I believe you need technical knowledge. And also, it‚Äôs really, really great to learn by doing. So, you should make a film.</p></blockquote><p>Software development is one of those rare fields where a college degree isn‚Äôt required to succeed. Yes, we should all know the basics, but in my experience, new college graduates often lack the practical knowledge to be effective developers.</p><p>The real learning happens through hands-on experience: building real projects, debugging tricky problems, collaborating with teams, and maintaining code over time. It‚Äôs crucial to never stop learning, experimenting, and iterating on our craft.</p><blockquote><p>Happy accidents are real gifts, and they can open the door to a future that didn‚Äôt even exist.</p></blockquote><p>Tim Berners-Lee invented the web in 1989, while working at CERN, the European Organization for Nuclear Research. Originally conceived to meet the demand for information sharing between scientists around the world, the web went mainstream within just a few years.</p><p>Linus Torvalds created Git due to a licensing dispute over BitKeeper, the original version control system used for Linux development. The need for a new tool led to Git becoming the most widely used version control system today.</p><blockquote><p>I feel that a set should be like a happy family. Almost like Thanksgiving every day, happily going down the road together.</p></blockquote><p>Be kind to your teammates, don‚Äôt embarrass them. They may not be perfect, but accept them for who they are. The most important trait of an effective software development team is psychological safety ‚Äìthat is, team members feel safe to take risks and be vulnerable in front of each other, as corroborated by <a href=\"https://rework.withgoogle.com/en/guides/understanding-team-effectiveness\">Google‚Äôs research</a> on the subject.</p><p>It‚Äôs OK to make mistakes, as long as you learn from them. Knowing that your team has your back when things go south is a wonderful feeling.</p><blockquote><p>Most of Hollywood is about making money - and I love money, but I don‚Äôt make the films thinking about money.</p></blockquote><p>Just like Lynch prioritizes creativity over financial gain, some of the most impactful software projects started with an open source model, and they literally changed the world, such as Linux, PostgreSQL, and Node.js, just to name a few.</p><p>What makes these projects remarkable is that they didn‚Äôt emerge from corporate boardrooms ‚Äì they were built by communities of passionate developers, collaborating across the world.</p><p>Money is just a means to an end. Unfortunately, many get this confused.</p><p>David, thank you for making the world a better place!</p>","contentLength":5845,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1ipy01t/lessons_from_david_lynch_a_software_developers/"},{"title":"[D] What's the most promising successor to the Transformer?","url":"https://www.reddit.com/r/MachineLearning/comments/1ipvau4/d_whats_the_most_promising_successor_to_the/","date":1739600221,"author":"/u/jsonathan","guid":259,"unread":true,"content":"<p>All I know about is MAMBA, which looks promising from an efficiency perspective (inference is linear instead of quadratic), but AFAIK nobody's trained a big model yet. There's also <a href=\"https://arxiv.org/pdf/2405.04517\">xLSTM</a> and <a href=\"https://arxiv.org/pdf/2405.13956\">Aaren</a>.</p><p>What do y'all think is the most promising alternative architecture to the transformer?</p>","contentLength":283,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Kafka Delay Queue: When Messages Need a Nap Before They Work","url":"https://beyondthesyntax.substack.com/p/kafka-delay-queue-when-messages-need","date":1739596108,"author":"/u/Sushant098123","guid":276,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1ipu9n3/kafka_delay_queue_when_messages_need_a_nap_before/"},{"title":"Webassembly and go 2025","url":"https://www.reddit.com/r/golang/comments/1ipu4wd/webassembly_and_go_2025/","date":1739595637,"author":"/u/KosekiBoto","guid":287,"unread":true,"content":"<div><p>so I found <a href=\"https://www.youtube.com/watch?v=HShIpUgCPp4\">this video </a>and was thinking about doing something similar for my game as a means to implement modding, however I also stumbled upon a 3 y/o post when looking into it essentially stating that it's a bad idea and I wasn't able to really find anything on the state of go wasm, so can someone please enlighten me as to the current state of WASM and Go, thank you</p></div>   submitted by   <a href=\"https://www.reddit.com/user/KosekiBoto\"> /u/KosekiBoto </a>","contentLength":402,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Bringing Nest.js to Rust: Meet Toni.rs, the Framework You‚Äôve Been Waiting For! üöÄ","url":"https://www.reddit.com/r/rust/comments/1iprsmo/bringing_nestjs_to_rust_meet_tonirs_the_framework/","date":1739587338,"author":"/u/Mysterious-Rust","guid":284,"unread":true,"content":"<p>As a Rust developer coming from TypeScript, I‚Äôve been missing a Nest.js-like framework ‚Äî its modularity, dependency injection, and CLI superpowers. But since the Rust ecosystem doesn‚Äôt have a direct counterpart (yet!), I decided to build one myself! üõ†Ô∏è</p><p>Introducing‚Ä¶ <a href=\"https://crates.io/crates/toni\">Toni.rs</a> ‚Äî a Rust framework inspired by the Nest.js architecture, designed to bring the same developer joy to our favorite language. And it‚Äôs live in beta! üéâ</p><p>Here‚Äôs what makes this project interesting:</p><p>Scalable maintainability üß©:</p><p>A modular architecture keeps your business logic decoupled and organized. Say goodbye to spaghetti code ‚Äî each module lives in its own context, clean and focused.</p><p>Need a complete CRUD setup? Just run a single CLI command. And I have lots of ideas for CLI ease. Who needs copy and paste?</p><p>Automatic Dependency Injection ü§ñ:</p><p>Stop wasting time wiring dependencies. Declare your providers, add them to your structure, and let the framework magically inject them. Less boilerplate, more coding.</p><p>Leave your thoughts below ‚Äî suggestions, questions, or even just enthusiasm! üöÄ </p>","contentLength":1089,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How I Became A Machine Learning Engineer (No CS Degree, No Bootcamp)","url":"https://towardsdatascience.com/how-i-became-a-machine-learning-engineer-no-cs-degree-no-bootcamp/","date":1739586781,"author":"Egor Howell","guid":10,"unread":true,"content":"<p>Machine learning and <a href=\"https://towardsdatascience.com/tag/ai/\" title=\"AI\">AI</a> are among the most popular topics nowadays, especially within the tech space. I am fortunate enough to work and develop with these technologies every day as a machine learning engineer!</p><p>In this article, I will walk you through my journey to becoming a machine learning engineer, shedding some light and advice on how you can become one yourself!</p><p>In one of my previous articles, I extensively wrote about my journey from school to securing my first <a href=\"https://towardsdatascience.com/tag/data-science/\" title=\"Data Science\">Data Science</a> job. I recommend you <a href=\"https://medium.com/towards-data-science/how-i-became-a-data-scientist-no-cs-degree-no-bootcamp-82c321904986\">check out that article</a>, but I will summarise the key timeline here.</p><p>Pretty much everyone in my family studied some sort of STEM subject. My great-grandad was an engineer, both my grandparents studied physics, and my mum is a maths teacher.</p><p><em>So, my path was always paved for me.</em></p><p>I chose to study physics at university after watching The Big Bang Theory at age 12; it‚Äôs fair to say everyone was very proud!</p><p>At school, I wasn‚Äôt dumb by any means. I was actually relatively bright, but I didn‚Äôt fully apply myself. I got decent grades, but definitely not what I was fully capable of.</p><p>I was very arrogant and thought I would do well with zero work.</p><p>I applied to top universities like Oxford and Imperial College, but given my work ethic, I was delusional thinking I had a chance. On results day, I ended up in clearing as I missed my offers. This was probably one of the saddest days of my life.</p><p>Clearing in the UK is where universities offer places to students on certain courses where they have space. It‚Äôs mainly for students who don‚Äôt have a university offer.</p><p>I was lucky enough to be offered a chance to study physics at the University of Surrey, and I went on to earn a first-class master‚Äôs degree in physics!</p><p>There is genuinely no substitute for hard work. It is a cringy cliche, but it is true!</p><p>My original plan was to do a PhD and be a full-time researcher or professor, but during my degree, I did a research year, and I just felt a career in research was not for me. Everything moved so slowly, and it didn‚Äôt seem there was much opportunity in the space.</p><p>During this time, DeepMind released their<a href=\"https://www.youtube.com/watch?v=WXuK6gekU1Y&amp;t=1539s\"></a>documentary on YouTube, which popped up on my home feed.</p><p>From the video, I started to understand how AI worked and learn about neural networks, reinforcement learning, and deep learning. To be honest, to this day I am still not an expert in these areas.</p><p>Naturally, I dug deeper and found that a data scientist uses AI and machine learning algorithms to solve problems. I immediately wanted in and started applying for data science graduate roles.</p><p>I spent countless hours coding, taking courses, and working on projects. I applied to and eventually landed my first data science graduate scheme in September 2021.</p><p><em>You can hear more about my journey from a <a href=\"https://tobeadatascientist.substack.com/p/overcoming-rejection-lessons-from-egor-howell\">podcast</a>.</em></p><p>I started my career in an insurance company, where I built various supervised learning models, mainly using gradient boosted tree packages like CatBoost, XGBoost, and<a href=\"https://medium.com/towards-data-science/breaking-down-generalized-linear-models-d9212526e51d?sk=fda0298cebcb8e9e0c20cb6af8ed4f06\"> generalised linear models (GLMs)</a>.</p><p>I built models to predict:</p><ul><li>‚Ää‚Äî‚ÄäDid someone fraudulently make a claim to profit.</li><li>‚Äî‚ÄäWhat‚Äôs the premium we should give someone.</li><li>‚Äî‚ÄäHow many claims will someone have.</li><li>‚Ää‚Äî‚ÄäWhat‚Äôs the average claim value someone will have.</li></ul><p>I made around six models spanning the regression and classification space. I learned so much here, especially in statistics, as I worked very closely with Actuaries, so my maths knowledge was excellent.</p><p>However, due to the company‚Äôs structure and setup, it was difficult for my models to advance past the PoC stage, so I felt I lacked the ‚Äútech‚Äù side of my toolkit and understanding of how companies use machine learning in production.</p><p>After a year, my previous employer reached out to me asking if I wanted to apply to a junior data scientist role that specialises in<a href=\"https://medium.com/@egorhowell/list/time-series-00bbfb9f5359\"> time series forecasting</a> and<a href=\"https://medium.com/@egorhowell/list/optimisation-algorithms-069bf9c6c8d5\"> optimisation</a> problems. I really liked the company, and after a few interviews, I was offered the job!</p><p>I worked at this company for about 2.5 years, where I became an expert in forecasting and combinatorial optimisation problems.</p><p>I developed many algorithms and deployed my models to production through AWS using software engineering best practices, such as unit testing, lower environment, shadow system, CI/CD pipelines, and much more.</p><p><em>Fair to say I learned a lot.&nbsp;</em></p><p>I worked very closely with software engineers, so I picked up a lot of engineering knowledge and continued self-studying machine learning and statistics on the side.</p><p>Over time, I realised the actual value of data science is using it to make live decisions. There is a good quote by<a href=\"https://www.linkedin.com/posts/pau-labarta-bajo-4432074b_machinelearning-mlops-realworldml-activity-7195694289178214400-gZyw\"> Pau Labarta Bajo</a></p><p>ML models inside Jupyter notebooks have a business value of $0</p><p>There is no point in building a really complex and sophisticated model if it will not produce results. Seeking out that extra 0.1% accuracy by staking multiple models is often not worth it.</p><p>You are better off building something simple that you can deploy, and that will bring real financial benefit to the company.</p><p>With this in mind, I started thinking about the future of data science. In my head, there are two avenues:</p><ul><li> -&gt; You work primarily to gain insight into what the business should be doing and what it should be looking into to boost its performance.</li><li> -&gt; You ship solutions (models, decision algorithms, etc.) that bring business value.</li></ul><p>I feel the data scientist who analyses and builds PoC models will become extinct in the next few years because, as we said above, they don‚Äôt provide tangible value to a business.</p><p>That‚Äôs not to say they are entirely useless; you have to think of it from the business perspective of their return on investment. Ideally, the value you bring in should be more than your salary.</p><p>You want to say that you did ‚ÄúX that produced Y‚Äù, which the above two avenues allow you to do.</p><p>The engineering side was the most interesting and enjoyable for me. I genuinely enjoy coding and building stuff that benefits people, and that they can use, so naturally, that‚Äôs where I gravitated towards.</p><p>To move to the ML engineering side, I asked my line manager if I could deploy the algorithms and ML models I was building myself. I would get help from software engineers, but I would write all the production code, do my own system design, and set up the deployment process independently.</p><p><em>And that‚Äôs exactly what I did.</em></p><p>Coincidentally, my current employer contacted me around this time and asked if I wanted to apply for a machine learning engineer role that specialises in general ML and optimisation at their company!</p><p>Call it luck, but clearly, the universe was telling me something. After several interview rounds, I was offered the role, and I am now a fully fledged machine learning engineer!</p><p>Fortunately, a role kind of ‚Äúfell to me,‚Äù but I created my own luck through up-skilling and documenting my learning. That is why I always tell people to show their work‚Ää‚Äî‚Ääyou don‚Äôt know what may come from it.</p><p>I want to share the main bits of advice that helped me transition from a machine learning engineer to a data scientist.</p><ul><li>‚Ää‚Äî‚ÄäA machine learning engineer is  an entry-level position in my opinion. You need to be well-versed in data science, machine learning, software engineering, etc. You don‚Äôt need to be an expert in all of them, but have good fundamentals across the board. That‚Äôs why I recommend having a couple of years of experience as either a software engineer or data scientist and self-study other areas.</li><li>‚Ää‚Äî‚ÄäIf you are from data science, you must learn to write good, well-tested production code. You must know things like typing, linting, unit tests, formatting, mocking and CI/CD. It‚Äôs not too difficult, but it just requires some practice. I recommend asking your current company to work with software engineers to gain this knowledge, it worked for me!</li><li>‚Ää‚Äî‚ÄäMost companies nowadays deploy many of their architecture and systems on the cloud, and machine learning models are no exception. So, it‚Äôs best to get practice with these tools and understand how they enable models to go live. I learned most of this on the job, to be honest, but there are courses you can take.</li><li>‚Ää‚Äî‚ÄäI am sure most of you know this already, but every tech professional should be proficient in the command line. You will use it extensively when deploying and writing production code. I have a basic guide you can checkout<a href=\"https://medium.com/towards-data-science/an-introduction-to-the-shell-676ee5b899df?sk=0c6e101165b4314b98ab39d11525366c\"> here</a>.</li><li><strong>Data Structures &amp; Algorithms‚Ää</strong>‚Äî‚ÄäUnderstanding the fundamental algorithms in computer science are very useful for MLE roles. Mainly because you will likely be asked about it in interviews. It‚Äôs not too hard to learn compared to machine learning; it just takes time. Any course will do the trick.</li><li>‚Ää‚Äî‚ÄäAgain, most tech professionals should know Git, but as an MLE, it is essential. How to squash commits, do code reviews, and write outstanding pull requests are musts.</li><li>‚Ää‚Äî‚ÄäMany MLE roles I saw required you to have some specialisation in a particular area. I specialise in time series forecasting, optimisation, and general ML based on my previous experience. This helps you stand out in the market, and most companies are looking for specialists nowadays.</li></ul><p>The main theme here is that I basically up-skilled my software engineering abilities. This makes sense as I already had all the math, stats, and machine learning knowledge from being a data scientist.</p><p>If I were a software engineer, the transition would likely be the reverse. This is why securing a machine learning engineer role can be quite challenging, as it requires proficiency across a wide range of skills.</p><h3><strong>Summary &amp; Further Thoughts</strong></h3><p>I have a free newsletter, <a href=\"https://dishingthedata.substack.com/\"></a>, where I share weekly tips and advice as a practising data scientist. Plus, when you subscribe, you will get my and<strong> short PDF version of my AI roadmap</strong>!</p>","contentLength":9683,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Introducing Impressions at Netflix","url":"https://netflixtechblog.com/introducing-impressions-at-netflix-e2b67c88c9fb?source=rss----2615bd06b42e---4","date":1739582000,"author":"Netflix Technology Blog","guid":31,"unread":true,"content":"<h4>Part 1: Creating the Source of Truth for Impressions</h4><p>Imagine scrolling through Netflix, where each movie poster or promotional banner competes for your attention. Every image you hover over isn‚Äôt just a visual placeholder; it‚Äôs a critical data point that fuels our sophisticated personalization engine. At Netflix, we call these images ‚Äòimpressions,‚Äô and they play a pivotal role in transforming your interaction from simple browsing into an immersive binge-watching experience, all tailored to your unique&nbsp;tastes.</p><p>Capturing these moments and turning them into a personalized journey is no simple feat. It requires a state-of-the-art system that can track and process these impressions while maintaining a detailed history of each profile‚Äôs exposure. This nuanced integration of data and technology empowers us to offer bespoke content recommendations.</p><p>In this multi-part blog series, we take you behind the scenes of our system that processes billions of impressions daily. We will explore the challenges we encounter and unveil how we are building a resilient solution that transforms these client-side impressions into a personalized content discovery experience for every Netflix&nbsp;viewer.</p><h3>Why do we need impression history?</h3><p>To tailor recommendations more effectively, it‚Äôs crucial to track what content a user has already encountered. Having impression history helps us achieve this by allowing us to identify content that has been displayed on the homepage but not engaged with, helping us deliver fresh, engaging recommendations.</p><p>By maintaining a history of impressions, we can implement frequency capping to prevent over-exposure to the same content. This ensures users aren‚Äôt repeatedly shown identical options, keeping the viewing experience vibrant and reducing the risk of frustration or disengagement.</p><h4>Highlighting New&nbsp;Releases</h4><p>For new content, impression history helps us monitor initial user interactions and adjust our merchandising efforts accordingly. We can experiment with different content placements or promotional strategies to boost visibility and engagement.</p><p>Additionally, impression history offers insightful information for addressing a number of platform-related analytics queries. Analyzing impression history, for example, might help determine how well a specific row on the home page is functioning or assess the effectiveness of a merchandising strategy.</p><p>The first pivotal step in managing impressions begins with the creation of a Source-of-Truth (SOT) dataset. This foundational dataset is essential, as it supports various downstream workflows and enables a multitude of use&nbsp;cases.</p><h4>Collecting Raw Impression Events</h4><p>As Netflix members explore our platform, their interactions with the user interface spark a vast array of raw events. These events are promptly relayed from the client side to our servers, entering a centralized event processing queue. This queue ensures we are consistently capturing raw events from our global user&nbsp;base.</p><p>After raw events are collected into a centralized queue, a custom event extractor processes this data to identify and extract all impression events. These extracted events are then routed to an Apache Kafka topic for immediate processing needs and simultaneously stored in an Apache Iceberg table for long-term retention and historical analysis. This dual-path approach leverages Kafka‚Äôs capability for low-latency streaming and Iceberg‚Äôs efficient management of large-scale, immutable datasets, ensuring both real-time responsiveness and comprehensive historical data availability.</p><h4>Filtering &amp; Enriching Raw Impressions</h4><p>Once the raw impression events are queued, a stateless Apache Flink job takes charge, meticulously processing this data. It filters out any invalid entries and enriches the valid ones with additional metadata, such as show or movie title details, and the specific page and row location where each impression was presented to users. This refined output is then structured using an Avro schema, establishing a definitive source of truth for Netflix‚Äôs impression data. The enriched data is seamlessly accessible for both real-time applications via Kafka and historical analysis through storage in an Apache Iceberg table. This dual availability ensures immediate processing capabilities alongside comprehensive long-term data retention.</p><h4>Ensuring High Quality Impressions</h4><p>Maintaining the highest quality of impressions is a top priority. We accomplish this by gathering detailed column-level metrics that offer insights into the state and quality of each impression. These metrics include everything from validating identifiers to checking that essential columns are properly filled. The data collected feeds into a comprehensive quality dashboard and supports a tiered threshold-based alerting system. These alerts promptly notify us of any potential issues, enabling us to swiftly address regressions. Additionally, while enriching the data, we ensure that all columns are in agreement with each other, offering in-place corrections wherever possible to deliver accurate&nbsp;data.</p><p>We handle a staggering volume of 1 to 1.5 million impression events globally every second, with each event approximately 1.2KB in size. To efficiently process this massive influx in real-time, we employ Apache Flink for its low-latency stream processing capabilities, which seamlessly integrates both batch and stream processing to facilitate efficient backfilling of historical data and ensure consistency across real-time and historical analyses. Our Flink configuration includes 8 task managers per region, each equipped with 8 CPU cores and 32GB of memory, operating at a parallelism of 48, allowing us to handle the necessary scale and speed for seamless performance delivery. The Flink job‚Äôs sink is equipped with a data mesh connector, as detailed in our <a href=\"https://netflixtechblog.com/data-mesh-a-data-movement-and-processing-platform-netflix-1288bcab2873\">Data Mesh platform</a> which has two outputs: Kafka and Iceberg. This setup allows for efficient streaming of real-time data through Kafka and the preservation of historical data in Iceberg, providing a comprehensive and flexible data processing and storage solution.</p><p>We utilize the ‚Äòisland model‚Äô for deploying our Flink jobs, where all dependencies for a given application reside within a single region. This approach ensures high availability by isolating regions, so if one becomes degraded, others remain unaffected, allowing traffic to be shifted between regions to maintain service continuity. Thus, all data in one region is processed by the Flink job deployed within that&nbsp;region.</p><h4>Addressing the Challenge of Unschematized Events</h4><p>Allowing raw events to land on our centralized processing queue unschematized offers significant flexibility, but it also introduces challenges. Without a defined schema, it can be difficult to determine whether missing data was intentional or due to a logging error. We are investigating solutions to introduce schema management that maintains flexibility while providing clarity.</p><h4>Automating Performance Tuning with Autoscalers</h4><p>Tuning the performance of our Apache Flink jobs is currently a manual process. The next step is to integrate with autoscalers, which can dynamically adjust resources based on workload demands. This integration will not only optimize performance but also ensure more efficient resource utilization.</p><h4>Improving Data Quality&nbsp;Alerts</h4><p>Right now, there‚Äôs a lot of business rules dictating when a data quality alert needs to be fired. This leads to a lot of false positives that require manual judgement. A lot of times it is difficult to track changes leading to regression due to inadequate data lineage information. We are investing in building a comprehensive data quality platform that more intelligently identifies anomalies in our impression stream, keeps track of data lineage and data governance, and also, generates alerts notifying producers of any regressions. This approach will enhance efficiency, reduce manual oversight, and ensure a higher standard of data integrity.</p><p>Creating a reliable source of truth for impressions is a complex but essential task that enhances personalization and discovery experience. Stay tuned for the next part of this series, where we‚Äôll delve into how we use this SOT dataset to create a microservice that provides impression histories. We invite you to share your thoughts in the comments and continue with us on this journey of discovering impressions.</p><p>We are genuinely grateful to our amazing colleagues whose contributions were essential to the success of Impressions: Julian Jaffe, Bryan Keller, Yun Wang, Brandon Bremen, Kyle Alford, Ron Brown and Shriya&nbsp;Arora.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e2b67c88c9fb\" width=\"1\" height=\"1\" alt=\"\">","contentLength":8607,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tabiew 0.8.4 Released","url":"https://www.reddit.com/r/rust/comments/1ipp72r/tabiew_084_released/","date":1739578902,"author":"/u/shshemi","guid":285,"unread":true,"content":"<p>Tabiew is a lightweight TUI application that allows users to view and query tabular data files, such as CSV, Parquet, Arrow, Sqlite, and ...</p><ul><li>üìä Support for CSV, Parquet, JSON, JSONL, Arrow, FWF, and Sqlite</li><li>üóÇÔ∏è Multi-table functionality</li></ul><ul><li>UI is updated to be more modern and responsive</li><li>Horizontally scrollable tables</li><li>Visible data frame can be referenced with name \"_\"</li><li>Compatibility with older versions of glibc</li><li>Two new themes (Tokyo Night and Catppuccin)</li></ul>","contentLength":450,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Conditional types in TypeScript","url":"https://2ality.com/2025/02/conditional-types-typescript.html","date":1739577600,"author":"Dr. Axel Rauschmayer","guid":175,"unread":true,"content":"<p>In TypeScript, conditional types let us make decisions (think if-then-else expressions) ‚Äì which is especially useful in generic types. They are also an essential tool for working with union types because they let use ‚Äúloop‚Äù over them. Read on if you want to know how all of that works.</p>","contentLength":291,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Show HN: VimLM ‚Äì A Local, Offline Coding Assistant for Vim","url":"https://github.com/JosefAlbers/VimLM","date":1739576081,"author":"JosefAlbers","guid":451,"unread":true,"content":"<p>VimLM is a local, offline coding assistant for Vim. It‚Äôs like Copilot but runs entirely on your machine‚Äîno APIs, no tracking, no cloud.</p><p>- Deep Context: Understands your codebase (current file, selections, references).  \n- Conversational: Iterate with follow-ups like \"Add error handling\".  \n- Vim-Native: Keybindings like `Ctrl-l` for prompts, `Ctrl-p` to replace code.  \n- Inline Commands: `!include` files, `!deploy` code, `!continue` long responses.</p><p>Perfect for privacy-conscious devs or air-gapped environments.</p><p>Try it:  \n```\npip install vimlm\nvimlm\n```</p>","contentLength":558,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43054244"},{"title":"Kay Hayen: Nuitka this week #16","url":"https://nuitka.net/posts/nuitka-this-week-16.html","date":1739574000,"author":"","guid":485,"unread":true,"content":"<p>Hey Nuitka users! This started out as an idea of a weekly update, but\nthat hasn‚Äôt happened, and so we will switch it over to just writing up\nwhen something interesting happens and then push it out relatively\nimmediately when it happens.</p><h2>Nuitka Onefile Gets More Flexible:  and </h2><p>We‚Äôve got a couple of exciting updates to Nuitka‚Äôs onefile mode that\ngive you more control and flexibility in how you deploy your\napplications. These enhancements stem from real-world needs and\ndemonstrate Nuitka‚Äôs commitment to providing powerful and adaptable\nsolutions.</p><h3>Taking Control of Onefile Unpacking: </h3><p>Onefile mode is fantastic for creating single-file executables, but the\nmanagement of the unpacking directory where the application expands has\nsometimes been a bit‚Ä¶ opaque. Previously, Nuitka would decide whether\nto clean up this directory based on whether the path used\nruntime-dependent variables. This made sense in theory, but in practice,\nit could lead to unexpected behavior and made debugging onefile issues\nharder.</p><p>Now, you have complete control! The new  option\nlets you explicitly specify what happens to the unpacking directory:</p><ul><li><p><code></code>: This is the default behavior. Nuitka\nwill remove the unpacking directory unless runtime-dependent values\nwere used in the path specification. This is the same behavior as\nprevious versions.</p></li><li><p><code></code>: The unpacking directory is \nremoved and becomes a persistent, cached directory. This is useful\nfor debugging, inspecting the unpacked files, or if you have a use\ncase that benefits from persistent caching of the unpacked data. The\nfiles will remain available for subsequent runs.</p></li><li><p><code></code>: The unpacking directory \nremoved after the program exits.</p></li></ul><p>This gives you the power to choose the behavior that best suits your\nneeds. No more guessing!</p><h3>Relative Paths with </h3><p>Another common request, particularly from users deploying applications\nin more restricted environments, was the ability to specify the onefile\nunpacking directory  to the executable itself. Previously, you\nwere limited to absolute paths or paths relative to the user‚Äôs temporary\ndirectory space.</p><p>We‚Äôve introduced a new variable, , that you can use in\nthe  option. This variable is dynamically\nreplaced at runtime with the full path to the directory containing the\nonefile executable.</p><div><div><pre></pre></div></div><p>This would create a directory named  the same\ndirectory as the  (or  on Linux/macOS)\nand unpack the application there. This is perfect for creating truly\nself-contained applications where all data and temporary files reside\nalongside the executable.</p><h3>Nuitka Commercial and Open Source</h3><p>These features, like many enhancements to Nuitka, originated from a\nrequest by a Nuitka commercial customer. This highlights the close\nrelationship between the commercial offerings and the open-source core.\nWhile commercial support helps drive development and ensures the\nlong-term sustainability of Nuitka, the vast majority of features are\nmade freely available to all users.</p><p>This change will be in 2.7 and is currently</p><p>We encourage you to try out these new features and let us know what you\nthink! As always, bug reports, feature requests, and contributions are\nwelcome on <a href=\"https://github.com/Nuitka/Nuitka/issues\">GitHub</a>.</p>","contentLength":3127,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Django Weblog: DjangoCongress JP 2025 Announcement and Live Streaming!","url":"https://www.djangoproject.com/weblog/2025/feb/14/djangocongress-jp-2025-announcement-and-livestream/","date":1739571130,"author":"","guid":169,"unread":true,"content":"<p>It will be streamed on the following YouTube Live channels:</p><p>This year there will be talks not only about Django, but also about FastAPI and other asynchronous web topics. There will also be talks on Django core development, Django Software Foundation (DSF) governance, and other topics from around the world. Simultaneous translation will be provided in both English and Japanese.</p><ul><li>The Async Django ORM: Where Is it?</li><li>Speed at Scale for Django Web Applications</li><li>Implementing Agentic AI Solutions in Django from scratch</li><li>Diving into DSF governance: past, present and future</li></ul><ul><li>Getting Knowledge from Django Hits: Using Grafana and Prometheus</li><li>Culture Eats Strategy for Breakfast: Why Psychological Safety Matters in Open Source</li><li>¬µDjango. The next step in the evolution of asynchronous microservices technology.</li></ul><p>A public viewing of the event will also be held in Tokyo. A reception will also be held, so please check the following connpass page if you plan to attend.</p>","contentLength":948,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Eli Bendersky: Decorator JITs - Python as a DSL","url":"https://eli.thegreenplace.net/2025/decorator-jits-python-as-a-dsl/","date":1739569771,"author":"","guid":168,"unread":true,"content":"<p>Spend enough time looking at Python programs and packages for machine learning,\nand you'll notice that the \"JIT decorator\" pattern is pretty popular. For\nexample, this JAX snippet:</p><div><pre></pre></div><div><pre></pre></div><p>In both cases, the function decorated with  doesn't get executed by the\nPython interpreter in the normal sense. Instead, the code inside is more like\na DSL (Domain Specific Language) processed by a special purpose compiler built\ninto the library (JAX or Triton). Another way to think about it is that Python\nis used as a  to describe computations.</p><p>In this post I will describe some implementation strategies used by libraries to\nmake this possible.</p><div><h2>Preface - where we're going</h2><p>The goal is to explain how different kinds of  decorators work by using\na simplified, educational example that implements several approaches from\nscratch. All the approaches featured in this post will be using this flow:</p> Expr IR --&gt; LLVM IR --&gt; Execution\" /&gt; Expr IR --&gt; LLVM IR --&gt; Execution\" class=\"align-center\" src=\"https://eli.thegreenplace.net/images/2025/decjit-python.png\" /&gt;\n<p>These are the steps that happen when a Python function wrapped with\nour educational  decorator is called:</p><ol><li>The function is translated to an \"expression IR\" - .</li><li>This expression IR is converted to LLVM IR.</li><li>Finally, the LLVM IR is JIT-executed.</li></ol><p>First, let's look at the  IR. Here we'll make a big simplification -\nonly supporting functions that define a single expression, e.g.:</p><div><pre></pre></div><p>Naturally, this can be easily generalized - after all, LLVM IR can be used to\nexpress fully general computations.</p><p>Here are the  data structures:</p><div><pre></pre></div><p>To convert an  into LLVM IR and JIT-execute it, we'll use this function:</p><div><pre></pre></div><p>It uses the  class to actually generate LLVM IR from .\nThis process is straightforward and covered extensively in the resources I\nlinked to earlier; take a look at <a href=\"https://github.com/eliben/code-for-blog/blob/main/2025/decjit/exprcode.py\">the full code here</a>.</p><p>My goal with this architecture is to make things simple, but .\nOn one hand - there are several simplifications: only single expressions are\nsupported, very limited set of operators, etc. It's very easy to extend this!\nOn the other hand, we could have just trivially evaluated the \nwithout resorting to LLVM IR; I do want to show a more complete compilation\npipeline, though, to demonstrate that an arbitrary amount of complexity can\nbe hidden behind these simple interfaces.</p><p>With these building blocks in hand, we can review the strategies used by\n decorators to convert Python functions into s.</p></div><div><p>Python comes with powerful code reflection and introspection capabilities out\nof the box. Here's the  decorator:</p><div><pre></pre></div><p>This is a standard Python decorator. It takes a function and returns another\nfunction that will be used in its place ( ensures that\nfunction attributes like the name and docstring of the wrapper match the\nwrapped function).</p><div><pre></pre></div><p>After  is applied to , what  holds is the\nwrapper. When  is called, the wrapper is invoked with\n.</p><p>The wrapper obtains the AST of the wrapped function, and then uses\n to convert this AST into an :</p><div><pre></pre></div><p>When  finishes visiting the AST it's given, its\n field will contain the  representing the function's\nreturn value. The wrapper then invokes  with this .</p><p>Note how our decorator interjects into the regular Python execution process.\nWhen  is called, instead of the standard Python compilation and\nexecution process (code is compiled into bytecode, which is then executed\nby the VM), we translate its code to our own representation and emit LLVM from\nit, and then JIT execute the LLVM IR. While it seems kinda pointless in this\nartificial example, in reality this means we can execute the function's code\nin any way we like.</p><div><h3>AST JIT case study: Triton</h3><p>This approach is almost exactly how the Triton language works. The body of a\nfunction decorated with  gets parsed to a Python AST, which then\n- through a series of internal IRs - ends up in LLVM IR; this in turn is lowered\nto <a href=\"https://docs.nvidia.com/cuda/parallel-thread-execution/\">PTX</a> by the\n<a href=\"https://llvm.org/docs/NVPTXUsage.html\">NVPTX LLVM backend</a>.\nThen, the code runs on a GPU using a standard CUDA pipeline.</p><p>Naturally, the subset of Python that can be compiled down to a GPU is limited;\nbut it's sufficient to run performant kernels, in a language that's much\nfriendlier than CUDA and - more importantly - lives in the same file with the\n\"host\" part written in regular Python. For example, if you want testing and\ndebugging, you can run Triton in \"interpreter mode\" which will just run the\nsame kernels locally on a CPU.</p><p>Note that Triton lets us import names from the  package\nand use them inside kernels; these serve as the  for the language\n- special calls the compiler handles directly.</p></div></div><div><p>Python is a fairly complicated language with  of features. Therefore,\nif our JIT has to support some large portion of Python semantics, it may make\nsense to leverage more of Python's own compiler. Concretely, we can have it\ncompile the wrapped function all the way <a href=\"https://github.com/python/cpython/blob/main/InternalDocs/interpreter.md\">to bytecode</a>,\nand start our translation from there.</p><p>Here's the  decorator that does just this :</p><div><pre></pre></div><p>The Python VM is a stack machine; so we emulate a stack to convert the\nfunction's bytecode to  IR (a bit like an <a href=\"https://en.wikipedia.org/wiki/Reverse_Polish_notation\">RPN evaluator</a>).\nAs before, we then use our  utility function to lower\n to LLVM IR and JIT execute it.</p><p>Using this JIT is as simple as the previous one - just swap \nfor :</p><div><pre></pre></div><div><h3>Bytecode JIT case study: Numba</h3><p><a href=\"https://numba.pydata.org/\">Numba</a> is a compiler for Python itself. The idea\nis that you can speed up specific functions in your code by slapping a\n decorator on them. What happens next is similar in spirit to\nour simple , but of course much more complicated because it\nsupports a very large portion of Python semantics.</p><p>Numba uses the Python compiler to emit bytecode, just as we did; it then\nconverts it into its own IR, and then to LLVM using .</p><p>By starting with the bytecode, Numba makes its life easier (no need to rewrite\nthe entire Python compiler). On the other hand, it also makes some analyses\n, because by the time we're in bytecode, a lot of semantic information\nexisting in higher-level representations is lost. For example, Numba has to\nsweat a bit to recover control flow information from the bytecode (by\nrunning it through a special interpreter first).</p></div></div><div><p>The two approaches we've seen so far are similar in many ways - both rely on\nPython's introspection capabilities to compile the source code of the JIT-ed\nfunction to some extent (one to AST, the other all the way to bytecode), and\nthen work on this lowered representation.</p><p>The tracing strategy is very different. It doesn't analyze the source code of\nthe wrapped function at all - instead, it  its execution by means of\nspecially-boxed arguments, leveraging overloaded operators and functions, and\nthen works on the generated trace.</p><p>The code implementing this for our smile demo is surprisingly compact:</p><div><pre></pre></div><p>Each runtime argument of the wrapped function is assigned a , and\nthat is placed in a , a placeholder class which lets us\ndo operator overloading:</p><div><pre></pre></div><p>The remaining key function is :</p><div><pre></pre></div><p>To understand how this works, consider this trivial example:</p><div><pre></pre></div><p>After the decorated function is defined,  holds the wrapper function\ndefined inside . When  is called, the wrapper runs:</p><ol><li>For each argument of  itself (that is  and ), it creates\na new  holding a . This denotes a named variable in\nthe  IR.</li><li>It then calls the wrapped function, passing it the boxes as runtime\nparameters.</li><li>When (the wrapped)  runs, it invokes . This is caught by the overloaded\n operator of , and it creates a new  with\nthe s representing  and  as children. This\n is then returned .</li><li>The wrapper unboxes the returned  and passes it to\n to emit LLVM IR from it and JIT execute it with the\nactual runtime arguments of the call: .</li></ol><p>This might be a little mind-bending at first, because there are two different\nexecutions that happen:</p><ul><li>The first is calling the wrapped  function itself, letting the Python\ninterpreter run it as usual, but with special arguments that build up the IR\ninstead of doing any computations. This is the .</li><li>The second is lowering this IR our tracing step built into LLVM IR and then\nJIT executing it with the actual runtime argument values ; this is\nthe .</li></ul><p>This tracing approach has some interesting characteristics. Since we don't\nhave to analyze the source of the wrapped functions but only trace through\nthe execution, we can \"magically\" support a much richer set of programs, e.g.:</p><div><pre></pre></div><p>This  with our basic . Since Python variables are\nplaceholders (references) for values, our tracing step is oblivious to them - it\nfollows the flow of values. Another example:</p><div><pre></pre></div><p>This also just works! The created  will be a long chain of \nadditions of 's runtime values through the loop, added to the \nfor .</p><p>This last example also leads us to a limitation of the tracing approach; the\nloop cannot be  - it cannot depend on the function's arguments,\nbecause the tracing step has no concept of runtime values and wouldn't know\nhow many iterations to run through; or at least, it doesn't know this unless\nwe want to perform the tracing run for every runtime execution .</p><div><h3>Tracing JIT case study: JAX</h3><p>The <a href=\"https://jax.readthedocs.io/en/latest/\">JAX ML framework</a> uses a tracing\napproach very similar to the one described here. The first code sample in this\npost shows the JAX notation. JAX cleverly wraps Numpy with its own version which\nis traced (similar to our , but JAX calls these boxes \"tracers\"),\nletting you write regular-feeling Numpy code that can be JIT optimized and\nexecuted on accelerators like GPUs and TPUs via <a href=\"https://github.com/openxla\">XLA</a>. JAX's tracer builds up an underlying IR (called\n<a href=\"https://jax.readthedocs.io/en/latest/jaxpr.html\">jaxpr</a>) which can then be\nemitted to XLA ops and passed to XLA for further lowering and execution.</p><p>For a fairly deep overview of how JAX works, I recommend reading the\n<a href=\"https://jax.readthedocs.io/en/latest/autodidax.html\">autodidax doc</a>.</p><p>As mentioned earlier, JAX has <a href=\"https://jax.readthedocs.io/en/latest/jit-compilation.html\">some limitations</a>\nwith things like data-dependent control flow in native Python. This won't work,\nbecause there's control flow\nthat depends on a runtime value ():</p><div><pre></pre></div><p>When  is executed, JAX will throw an exception, saying something\nlike:</p><blockquote>\nThis concrete value was not available in Python because it depends on the\nvalue of the argument count.</blockquote><p>As a remedy, JAX has its\nown built-in intrinsics from the <a href=\"https://jax.readthedocs.io/en/latest/jax.lax.html\">jax.lax package</a>.\nHere's the example rewritten in a way that actually works:</p><div><pre></pre></div><p> (and many other built-ins in the  package) is something JAX\ncan trace through, generating a corresponding XLA operation (XLA has support for\n<a href=\"https://openxla.org/xla/operation_semantics\">While loops</a>, to which this\n can be lowered).</p><p>The tracing approach has clear benefits for JAX as well; because it only cares\nabout the flow of values, it can handle arbitrarily complicated Python code,\nas long as the flow of values can be traced. Just like the local variables and\ndata-independent loops shown earlier, but also things like closures. This makes\nmeta-programming and templating easy .</p></div></div><div><p>The full code for this post is available <a href=\"https://github.com/eliben/code-for-blog/tree/main/2025/decjit\">on GitHub</a>.</p></div>","contentLength":10514,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"An art exhibit in Japan where a chained robot dog will try to attack you to showcase the need for AI safety.","url":"https://v.redd.it/sglstazd96je1","date":1739568243,"author":"/u/eternviking","guid":294,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/artificial/comments/1iple9t/an_art_exhibit_in_japan_where_a_chained_robot_dog/"},{"title":"OpenAI: The Age of AI Is Here!","url":"https://www.youtube.com/watch?v=97kQRYwL3P0","date":1739557087,"author":"Two Minute Papers","guid":329,"unread":true,"content":"<article>‚ù§Ô∏è Check out Lambda here and sign up for their GPU Cloud: https://lambdalabs.com/papers\n\nüìù The paper \"Competitive Programming with Large Reasoning Models\" is available here:\nhttps://arxiv.org/abs/2502.06807\n\nüìù My paper on simulations that look almost like reality is available for free here:\nhttps://rdcu.be/cWPfD \n\nOr this is the orig. Nature Physics link with clickable citations:\nhttps://www.nature.com/articles/s41567-022-01788-5\n\nüôè We would like to thank our generous Patreon supporters who make Two Minute Papers possible:\nBenji Rabhan, B Shang, Christian Ahlin, Gordon Child, John Le, Juan Benet, Kyle Davis, Loyal Alchemist, Lukas Biewald, Michael Tedder, Owen Skarpness, Richard Sundvall, Steef, Taras Bobrovytsky, Thomas Krcmar, Tybie Fitzhugh, Ueli GallizziIf you wish to appear here or pick up other perks, click here: https://www.patreon.com/TwoMinutePapers\n\nMy research: https://cg.tuwien.ac.at/~zsolnai/\nX/Twitter: https://twitter.com/twominutepapers\nThumbnail design: Fel√≠cia Zsolnai-Feh√©r - http://felicia.hu</article>","contentLength":1040,"flags":null,"enclosureUrl":"https://www.youtube.com/v/97kQRYwL3P0?version=3","enclosureMime":"","commentsUrl":null},{"title":"Roadmap to Becoming a Data Scientist, Part 4: Advanced Machine Learning","url":"https://towardsdatascience.com/roadmap-to-becoming-a-data-scientist-part-4-advanced-machine-learning/","date":1739552400,"author":"Vyacheslav Efimov","guid":9,"unread":true,"content":"<p>Data science is undoubtedly one of the most fascinating fields today.&nbsp;Following significant breakthroughs in machine learning about a decade ago, data science has surged in popularity within the tech community.&nbsp;Each year, we witness increasingly powerful tools that once seemed unimaginable.&nbsp;Innovations such as the&nbsp;,&nbsp;, the&nbsp;<em>Retrieval-Augmented Generation (RAG</em>) framework, and state-of-the-art&nbsp;&nbsp;‚Äî including&nbsp;&nbsp;‚Äî have had a profound impact on our world.</p><p>However, with the abundance of tools and the ongoing hype surrounding AI, it can be overwhelming ‚Äî especially for beginners ‚Äî to determine which skills to prioritize when aiming for a career in data science.&nbsp;Moreover, this field is highly demanding, requiring substantial dedication and perseverance.</p><p>The first three parts of this series outlined the necessary skills to become a data scientist in three key areas: <a href=\"https://towardsdatascience.com/roadmap-to-becoming-a-data-scientist-part-1-maths-2dc9beb69b27/\">math</a>, <a href=\"https://towardsdatascience.com/roadmap-to-becoming-a-data-scientist-part-2-software-engineering-e2fee3fe4d71/\">software engineering</a>, and <a href=\"https://towardsdatascience.com/roadmap-to-becoming-a-data-scientist-part-3-machine-learning-628248c96cb5/\">machine learning</a>.&nbsp;While knowledge of classical <a href=\"https://towardsdatascience.com/tag/machine-learning/\" title=\"Machine Learning\">Machine Learning</a> and neural network algorithms is an excellent starting point for aspiring data specialists, there are still many&nbsp;important topics in machine learning that must be mastered to work on more advanced projects.</p><blockquote><p><em>This article will focus solely on the math skills necessary to start a career in Data Science.&nbsp;Whether pursuing this path is a worthwhile choice based on your background and other factors will be discussed in a separate article.</em></p></blockquote><h2>The importance of learning evolution of methods in machine learning</h2><blockquote><p><em>The section below provides information about the evolution of methods in natural language processing (NLP).</em></p></blockquote><p>In contrast to previous articles in this series, I have decided to change the format in which I present the necessary skills for aspiring data scientists. Instead of directly listing specific competencies to develop and the motivation behind mastering them, I will briefly outline the most important approaches, presenting them in chronological order as they have been developed and used over the past decades in machine learning.</p><p>The reason is that I believe it is crucial to study these algorithms from the very beginning. In machine learning, many new methods are built upon older approaches, which is especially true for <a href=\"https://towardsdatascience.com/tag/nlp/\" title=\"NLP\">NLP</a> and computer vision.</p><p>For example, jumping directly into the implementation details of modern&nbsp;large language models (LLMs)&nbsp;without any preliminary knowledge may make it very difficult for beginners to grasp the motivation and underlying ideas of specific mechanisms.</p><p><em>Given this, in the next two sections, I will highlight in&nbsp;</em><em>&nbsp;the key concepts that should be studied.</em></p><p><strong>Natural language processing (NLP)</strong>&nbsp;is a broad field that focuses on processing textual information. Machine learning algorithms cannot work directly with raw text, which is why text is usually preprocessed and converted into numerical vectors that are then fed into neural networks.</p><p>Before being converted into vectors, words undergo&nbsp;, which includes simple techniques such as&nbsp;,&nbsp;<strong>stemming, lemmatization, normalization</strong>, or removing&nbsp;. After preprocessing, the resulting text is encoded into&nbsp;. Tokens represent the smallest textual elements in a collection of documents. Generally, a token can be a part of a word, a sequence of symbols, or an individual symbol. Ultimately, tokens are converted into numerical vectors.</p><p>The&nbsp;&nbsp;method is the most basic way to encode tokens, focusing on counting the frequency of tokens in each document. However, in practice, this is usually not sufficient, as it is also necessary to account for token importance ‚Äî a concept introduced in the&nbsp;&nbsp;and&nbsp;&nbsp;methods. While TF-IDF improves upon the naive counting approach of bag of words, researchers have developed a completely new approach called embeddings.</p><p>&nbsp;are numerical vectors whose components preserve the semantic meanings of words. Because of this, embeddings play a crucial role in NLP, enabling input data to be trained or used for model inference. Additionally, embeddings can be used to compare text similarity, allowing for the retrieval of the most relevant documents from a collection.</p><blockquote><p><em>Embeddings can also be used to encode other unstructured data, including images, audio, and videos.</em></p></blockquote><p>As a field, NLP has been evolving rapidly over the last 10‚Äì20 years to efficiently solve various text-related problems. Complex tasks like text translation and text generation were initially addressed using&nbsp;<strong>recurrent neural networks (RNNs)</strong>, which introduced the concept of memory, allowing neural networks to capture and retain key contextual information in long documents.</p><p>Although RNN performance gradually improved, it remained suboptimal for certain tasks. Moreover, RNNs are relatively slow, and their sequential prediction process does not allow for parallelization during training and inference, making them less efficient.</p><p>Additionally, the original Transformer architecture can be decomposed into two separate modules:&nbsp;&nbsp;and&nbsp;. Both of these form the foundation of the most state-of-the-art models used today to solve various NLP problems. Understanding their principles is valuable knowledge that will help learners advance further when studying or working with other&nbsp;<strong>large language models (LLMs)</strong>.</p><p>When it comes to LLMs, I strongly recommend studying the evolution of at least the first three GPT models, as they have had a significant impact on the AI world we know today. In particular, I would like to highlight the concepts of&nbsp;&nbsp;and&nbsp;, introduced in&nbsp;GPT-2, which enable LLMs to solve text generation tasks without explicitly receiving any training examples for them.</p><p>Another important technique developed in recent years is&nbsp;<strong>retrieval-augmented generation (RAG)</strong>.&nbsp;<em>The main limitation of LLMs is that they are only aware of the context used during their training.</em>&nbsp;As a result, they lack knowledge of any information beyond their training data.</p><p>The retriever converts the input prompt into an embedding, which is then used to query a vector database. The database returns the most relevant context based on the similarity to the embedding. This retrieved context is then combined with the original prompt and passed to a generative model. The model processes both the initial prompt and the additional context to generate a more informed and contextually accurate response.</p><blockquote><p><em>A good example of this limitation is the first version of the ChatGPT model, which was trained on data up to the year 2022 and had no knowledge of events that occurred from 2023 onward.</em></p></blockquote><p>To address this limitation, OpenAI researchers developed a RAG pipeline, which includes a constantly updated database containing new information from external sources. When ChatGPT is given a task that requires external knowledge, it queries the database to retrieve the most relevant context and integrates it into the final prompt sent to the machine learning model.</p><p>The goal of distillation is to create a smaller model that can imitate a larger one. In practice, this means that if a large model makes a prediction, the smaller model is expected to produce a similar result.</p><p>In the modern era, LLM development has led to models with millions or even billions of parameters. As a consequence, the overall size of these models may exceed the hardware limitations of standard computers or small portable devices, which come with many constraints.</p><p>Quantization is the process of reducing the memory required to store numerical values representing a model‚Äôs weights.</p><p>This is where optimization techniques become particularly useful, allowing LLMs to be compressed without significantly compromising their performance. The most commonly used techniques today include&nbsp;,, and&nbsp;.</p><p>Pruning refers to discarding the least important weights of a model.</p><p>Regardless of the area in which you wish to specialize, knowledge of&nbsp;&nbsp;is a must-have skill! Fine-tuning is a powerful concept that allows you to efficiently adapt a pre-trained model to a new task.</p><p>Fine-tuning is especially useful when working with very large models. For example, imagine you want to use BERT to perform semantic analysis on a specific dataset. While BERT is trained on general data, it might not fully understand the context of your dataset. At the same time, training BERT from scratch for your specific task would require a massive amount of resources.</p><p>Here is where fine-tuning comes in: it involves taking a pre-trained BERT (or another model) and freezing some of its layers (usually those at the beginning). As a result, BERT is retrained, but this time only on the new dataset provided. Since BERT updates only a subset of its weights and the new dataset is likely much smaller than the original one BERT was trained on, fine-tuning becomes a very efficient technique for adapting BERT‚Äôs rich knowledge to a specific domain.</p><blockquote><p><em>Fine-tuning is widely used not only in NLP but also across many other domains.</em></p></blockquote><p>As the name suggests,&nbsp;&nbsp;involves analyzing images and videos using machine learning. The most common tasks include image classification, object detection, image segmentation, and generation.</p><p>Most CV algorithms are based on neural networks, so it is essential to understand how they work in detail. In particular, CV uses a special type of network called&nbsp;<strong>convolutional neural networks (CNNs)</strong>. These are similar to fully connected networks, except that they typically begin with a set of specialized mathematical operations called&nbsp;.</p><blockquote><p><em>In simple terms, convolutions act as filters, enabling the model to extract the most important features from an image, which are then passed to fully connected layers for further analysis.</em></p></blockquote><p>The next step is to study the most popular CNN architectures for classification tasks, such as&nbsp;<strong>AlexNet, VGG, Inception, ImageNet</strong>, and&nbsp;.</p><p>Speaking of the object detection task, the&nbsp;&nbsp;algorithm is a clear winner. It is not necessary to study all of the dozens of versions of YOLO. In reality, going through the original paper of the first YOLO should be sufficient to understand how a relatively difficult problem like object detection is elegantly transformed into both classification and regression problems. This approach in YOLO also provides a nice intuition on how more complex CV tasks can be reformulated in simpler terms.</p><p>While there are many architectures for performing image segmentation, I would strongly recommend learning about&nbsp;, which introduces an encoder-decoder architecture.</p><p>Finally, image generation is probably one of the most challenging tasks in CV. Personally, I consider it an optional topic for learners, as it involves many advanced concepts. Nevertheless, gaining a high-level intuition of how&nbsp;<strong>generative adversial networks (GAN)</strong>&nbsp;function to generate images is a good way to broaden one‚Äôs horizons.</p><blockquote><p><em>In some problems, the training data might not be enough to build a performant model. In such cases, the data augmentation technique is commonly used. It involves the artificial generation of training data from already existing data (images). By feeding the model more diverse data, it becomes capable of learning and recognizing more patterns.</em></p></blockquote><p>It would be very hard to present in detail the <a href=\"https://towardsdatascience.com/tag/roadmaps/\" title=\"Roadmaps\">Roadmaps</a> for all existing machine learning domains in a single article. That is why, in this section, I would like to briefly list and explain some of the other most popular areas in data science worth exploring.</p><p>First of all,&nbsp;<strong>recommender systems (RecSys)</strong>&nbsp;have gained a lot of popularity in recent years. They are increasingly implemented in online shops, social networks, and streaming services. The key idea of most algorithms is to take a large initial matrix of all users and items and decompose it into a product of several matrices in a way that associates every user and every item with a high-dimensional embedding. This approach is very flexible, as it then allows different types of comparison operations on embeddings to find the most relevant items for a given user. Moreover, it is much more rapid to perform analysis on small matrices rather than the original, which usually tends to have huge dimensions.</p><p> often goes hand in hand with RecSys. When a RecSys has identified a set of the most relevant items for the user, ranking algorithms are used to sort them to determine the order in which they will be shown or proposed to the user. A good example of their usage is search engines, which filter query results from top to bottom on a web page.</p><p>Closely related to ranking, there is also a&nbsp;&nbsp;problem that aims to optimally map objects from two sets, A and B, in a way that, on average, every object pair&nbsp;is mapped ‚Äúwell‚Äù according to a matching criterion. A use case example might include distributing a group of students to different university disciplines, where the number of spots in each class is limited.</p><p>&nbsp;is an unsupervised machine learning task whose objective is to split a dataset into several regions (clusters), with each dataset object belonging to one of these clusters. The splitting criteria can vary depending on the task. Clustering is useful because it allows for grouping similar objects together. Moreover, further analysis can be applied to treat objects in each cluster separately.</p><p>The goal of clustering is to group dataset objects (on the left) into several categories (on the right) based on their similarity.</p><p>&nbsp;is another unsupervised problem, where the goal is to compress an input dataset. When the dimensionality of the dataset is large, it takes more time and resources for machine learning algorithms to analyze it. By identifying and removing noisy dataset features or those that do not provide much valuable information, the data analysis process becomes considerably easier.</p><p>&nbsp;is an area that focuses on designing algorithms and data structures (indexes) to optimize searches in a large database of embeddings (vector database). More precisely, given an input embedding and a vector database, the goal is to&nbsp;&nbsp;find the most similar embedding in the database relative to the input embedding.</p><p>The goal of similarity search is to approximately find the most similar embedding in a vector database relative to a query embedding.</p><p>The word ‚Äúapproximately‚Äù means that the search is not guaranteed to be 100% precise. Nevertheless, this is the main idea behind similarity search algorithms ‚Äî sacrificing a bit of accuracy in exchange for significant gains in prediction speed or data compression.</p><p>&nbsp;involves studying the behavior of a target variable over time. This problem can be solved using classical tabular algorithms. However, the presence of time introduces new factors that cannot be captured by standard algorithms. For instance:</p><ul><li>the target variable can have an overall&nbsp;, where in the long term its values increase or decrease&nbsp;<em>(e.g., the average yearly temperature rising due to global warming)</em>.</li><li>the target variable can have a&nbsp;&nbsp;which makes its values change based on the currently given period&nbsp;<em>(e.g. temperature is lower in winter and higher in summer)</em>.</li></ul><p>Most of the time series models take both of these factors into account. In general, time series models are mainly used a lot in financial, stock or demographic analysis.</p><p>Another advanced area I would recommend exploring is&nbsp;, which fundamentally changes the algorithm design compared to classical machine learning.&nbsp;In simple terms, its goal is to train an agent in an environment to make optimal decisions based on a reward system (also known as the&nbsp;<em>‚Äútrial and error approach‚Äù</em>).&nbsp;By taking an action, the agent receives a reward, which helps it understand whether the chosen action had a positive or negative effect.&nbsp;After that, the agent slightly adjusts its strategy, and the entire cycle repeats.</p><p>Reinforcement learning is particularly popular in complex environments where classical algorithms are not capable of solving a problem.&nbsp;Given the complexity of reinforcement learning algorithms and the computational resources they require, this area is not yet fully mature, but it has high potential to gain even more popularity in the future.</p><p>Currently the most popular applications are:</p><ul><li>.&nbsp;Existing approaches can design optimal game strategies and outperform humans.&nbsp;The most well-known examples are chess and Go.</li><li>.&nbsp;Advanced algorithms can be incorporated into robots to help them move, carry objects or complete routine tasks at home.</li><li>.&nbsp;Reinforcement learning methods can be developed to automatically drive cars, control helicopters or drones.</li></ul><p>This article was a logical continuation of the previous part and expanded the skill set needed to become a data scientist. While most of the mentioned topics require time to master, they can add significant value to your portfolio. This is especially true for the NLP and CV domains, which are in high demand today.</p><blockquote><p>After reaching a high level of expertise in data science, it is still crucial to stay motivated and consistently push yourself to learn new topics and explore emerging algorithms.</p></blockquote><p>Data science is a constantly evolving field, and in the coming years, we might witness the development of new state-of-the-art approaches that we could not have imagined in the past.</p><p><em>All images are by the author unless noted otherwise.</em></p>","contentLength":17044,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Unlocking global AI potential with next-generation subsea infrastructure","url":"https://engineering.fb.com/2025/02/14/connectivity/project-waterworth-ai-subsea-infrastructure/","date":1739550486,"author":"","guid":300,"unread":true,"content":"<p><a href=\"https://globaldigitalinclusion.org/wp-content/uploads/2024/01/GDIP-Good-Practices-for-Subsea-Cables-Policy-Investing-in-Digital-Inclusion.pdf\"></a></p><p><a href=\"https://engineering.fb.com/2021/03/28/connectivity/echo-bifrost/\"></a><a href=\"https://engineering.fb.com/2021/09/28/connectivity/2africa-pearls/\"></a></p>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Publish Interactive Data Visualizations for Free with Python and Marimo","url":"https://towardsdatascience.com/publish-interactive-data-visualizations-for-free-with-python-and-marimo/","date":1739548800,"author":"Sam Minot","guid":8,"unread":true,"content":"<p>Working in <a href=\"https://towardsdatascience.com/tag/data-science/\" title=\"Data Science\">Data Science</a>, it can be hard to share insights from complex datasets using only static figures. All the facets that describe the shape and meaning of interesting data are not always captured in a handful of pre-generated figures. While we have powerful technologies available for presenting interactive figures‚Ää‚Äî‚Ääwhere a viewer can rotate, filter, zoom, and generally explore complex data‚Ää ‚Äî‚Ää they always come with tradeoffs.</p><p>Here I present my experience using a recently released Python library‚Ää‚Äî‚Ää<a href=\"https://marimo.io\">marimo</a>‚Ää‚Äî‚Ääwhich opens up exciting new opportunities for publishing interactive visualizations across the entire field of data science.</p><h2>Interactive Data Visualization</h2><p>The tradeoffs to consider when selecting an approach for presenting data visualizations can be broken into three categories:</p><ul><li>‚Ää‚Äî‚Ääwhat visualizations and interactivity am I able to present to the user?</li><li>‚Ää‚Äî‚Ääwhat are the resources needed for displaying this visualization to users (e.g. running servers, hosting websites)?</li><li> ‚Äì how much of a new skillset / codebase do I need to learn upfront?</li></ul><p> is the foundation of portable interactivity. Every user has a web browser installed on their computer and there are many different frameworks available for displaying any degree of interactivity or visualization you might imagine (for example, this <a href=\"https://threejs.org/\">gallery of amazing things people have made with three.js</a>). Since the application is running on the user‚Äôs computer, no costly servers are needed. However, a significant drawback for the data science community is ease of use, as JS does not have many of the high-level (i.e. easy-to-use) libraries that data scientists use for data manipulation, plotting, and interactivity.</p><p> provides a useful point of comparison. Because of its <a href=\"https://flatironschool.com/blog/python-popularity-the-rise-of-a-global-programming-language/\">continually growing popularity</a>, some have called this the <a href=\"https://towardsdatascience.com/we-are-living-in-the-era-of-python-bc032d595f6a\">‚ÄúEra of Python‚Äù</a>. For data scientists in particular, Python stands alongside R as one of the foundational languages for quickly and effectively wielding complex data. While Python may be easier to use than Javascript, there are fewer options for presenting interactive visualizations. Some popular projects providing interactivity and visualization have been <a href=\"https://flask.palletsprojects.com/en/stable/\">Flask</a>, <a href=\"https://dash.plotly.com/\">Dash</a>, and <a href=\"https://streamlit.io/\">Streamlit</a> (also worth mentioning‚Ää‚Äî‚Ää<a href=\"https://docs.bokeh.org/en/latest/docs/gallery.html\">bokeh</a>, <a href=\"https://holoviews.org/\">HoloViews</a>, <a href=\"https://altair-viz.github.io/altair-tutorial/README.html\">altair</a>, and <a href=\"https://plotly.com/python/\">plotly</a>). The biggest tradeoff for using Python has been the cost for publishing ‚Äì delivering the tool to users. In the same way that <a href=\"https://www.shinyapps.io/\">shinyapps</a> require a running computer to serve up the visualization, these Python-based frameworks have exclusively been server-based. This is by no means prohibitive for authors with a budget to spend, but it does limit the number of users who can take advantage of a particular project.</p><p><a href=\"https://pyodide.org/en/stable/\"></a> is an intriguing middle ground‚Ää‚Äî‚ÄäPython code running directly in the web browser using <a href=\"https://webassembly.org/\">WebAssembly</a> (WASM). There are resource limitations (only 1 thread and 2GB memory) that make this impractical for doing the heavy lifting of data science. , this can be more than sufficient for building visualizations and updating based on user input. Because it runs in the browser, no servers are required for hosting. Tools that use Pyodide as a foundation are interesting to explore because they give data scientists an opportunity to write Python code which runs directly on users‚Äô computers without their having to install or run anything outside of the web browser.</p><p>As an aside, <a href=\"https://towardsdatascience.com/python-based-data-viz-with-no-installation-required-aaf2358c881\">I‚Äôve been interested previously in</a> one project that has tried this approach: <a href=\"https://github.com/whitphx/stlite\">stlite</a>, <a href=\"https://edit.share.stlite.net/\">an in-browser implementation of Streamlit</a> that lets you deploy these flexible and powerful apps to a broad range of users. However, a core limitation is that Streamlit itself is distinct from stlite (the port of Streamlit to WASM), which means that not all features are supported and that advancement of the project is dependent on two separate groups working along compatible lines.</p><ul><li>The interface resembles a Jupyter , which will be familiar to users.</li><li>Execution of cells is , so that updating one cell will rerun all cells which depend on its output.</li><li> can be captured with a flexible set of UI components.</li><li>Notebooks can be quickly converted into , hiding the code and showing only the input/output elements.</li><li>Apps can be run locally or converted into using WASM/Pyodide.</li></ul><p>marimo balances the tradeoffs of technology in a way that is well suited to the skill set of the typical data scientists:</p><ul><li>‚Ää‚Äî‚Ääuser input and visual display features are rather extensive, <a href=\"https://docs.marimo.io/guides/working_with_data/plotting/#reactive-plots\">supporting user input</a> via Altair and Plotly plots.</li><li>‚Ää‚Äî‚Äädeploying as static webpages is basically free‚Ää‚Äî‚Ääno servers required</li><li>‚Ää‚Äî‚Ääfor users familiar with Python notebooks, marimo will feel very familiar and be easy to pick up.</li></ul><h2>Publishing Marimo Apps on the Web</h2><p>As a simple example of the type of display that can be useful in data science, consisting of explanatory text interspersed with interactive displays, I have created a barebones <a href=\"https://github.com/FredHutch/marimo-publication\">GitHub repository</a>. Try it out yourself <a href=\"https://fredhutch.github.io/marimo-publication/\">here</a>.</p><p>Using just a little bit of code, users can:</p><ul><li>Generate visualizations with flexible interactivity</li><li>Write narrative text describing their findings</li><li>Publish to the web for free (i.e. using GitHub Pages)</li></ul><h2>Public App / Private Data</h2><p>This new technology offers an exciting new opportunity for collaboration‚Ää‚Äî‚Ääpublish the app publicly to the world, but users can only see specific datasets that they have permission to access.</p><p>Rather than building a dedicated data backend for every app, user data can be stored in a generic backend which can be securely authenticated and accessed using a Python client library‚Ää‚Äî‚Ääall contained within the user‚Äôs web browser. For example, the user is given an OAuth login link that will authenticate them with the backend and allow the app to temporarily access input data.</p><p>As a proof of concept, I built a simple visualization app which connects to <a href=\"https://cirro.bio\">the Cirro data platform</a>, which is used at my institution to manage scientific data. Full disclosure: I was part of the team that built this platform before it spun out as an independent company. In this manner users can:</p><ul><li>Load the public visualization app‚Ää‚Äî‚Äähosted on GitHub Pages</li><li>Connect securely to their private data store</li><li>Load the appropriate dataset for display</li><li>Share a link which will direct authorized collaborators to the same data</li></ul><p>As a data scientist, this approach of publishing free and open-source visualization apps which can be used to interact with private datasets is extremely exciting. Building and publishing a new app can take hours and days instead of weeks and years, letting researchers quickly share their insights with collaborators and then publish them to the wider world.</p>","contentLength":6594,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Hugo van Kemenade: Improving licence metadata","url":"https://hugovk.dev/blog/2025/improving-licence-metadata/","date":1739545860,"author":"","guid":167,"unread":true,"content":"<p><a href=\"https://peps.python.org/pep-0639/\" target=\"_blank\" rel=\"noreferrer\">PEP 639</a> defines a spec on how to document licences\nused in Python projects.</p><p>Change  as follows.</p><p>I usually use Hatchling as a build backend, and support was added in 1.27:</p><div><pre tabindex=\"0\"><code></code></pre></div><p>Replace the freeform  field with a valid SPDX license expression, and add\n which points to the licence files in the repo. There‚Äôs often only one,\nbut if you have more than one, list them all:</p><div><pre tabindex=\"0\"><code></code></pre></div><p>Optionally delete the deprecated licence classifier:</p><div><pre tabindex=\"0\"><code></code></pre></div><p>Then make sure to use a PyPI uploader that supports this.</p><p>pip can also show you the metadata:</p><div><pre tabindex=\"0\"><code></code></pre></div><p>A lot of work went into this. Thank you to PEP authors\n<a href=\"https://github.com/pombredanne\" target=\"_blank\" rel=\"noreferrer\">Philippe Ombredanne</a> for creating the first draft in\n2019, to <a href=\"https://github.com/cam-gerlach\" target=\"_blank\" rel=\"noreferrer\">C.A.M. Gerlach</a> for the second draft in 2021,\nand especially to <a href=\"https://karolinasurma.eu/\" target=\"_blank\" rel=\"noreferrer\">Karolina Surma</a> for getting the third\ndraft finish line and helping with the implementation.</p><p>And many projects were updated to support this, thanks to the maintainers and\ncontributors of at least:</p>","contentLength":878,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"5 Tips for Building a Data Science Portfolio","url":"https://www.kdnuggets.com/5-tips-building-data-science-portfolio","date":1739545225,"author":"Nate Rosidi","guid":252,"unread":true,"content":"<article>Not every data science portfolio is worth showcasing. Follow these five tips to build a portfolio that impresses employers and gets you a job.</article>","contentLength":142,"flags":null,"enclosureUrl":"https://www.kdnuggets.com/wp-content/uploads/Rosidi_5_Tips_for_Building_a_DS_Portfolio_4.png","enclosureMime":"","commentsUrl":null},{"title":"Show HN: Transform your codebase into a single Markdown doc for feeding into AI","url":"https://tesserato.web.app/posts/2025-02-12-CodeWeaver-launch/index.html","date":1739539403,"author":"tesserato","guid":450,"unread":true,"content":"<p>CodeWeaver is a command-line tool designed to weave your codebase into a single, easy-to-navigate Markdown document. It recursively scans a directory, generating a structured representation of your project's file hierarchy and embedding the content of each file within code blocks. This tool simplifies codebase sharing, documentation, and integration with AI/ML code analysis tools by providing a consolidated and readable Markdown output.\nThe output for the current repository can be found <a href=\"https://github.com/tesserato/CodeWeaver/blob/main/codebase.md\">here</a>.</p><ul><li><strong>Comprehensive Codebase Documentation:</strong> Generates a Markdown file that meticulously outlines your project's directory and file structure in a clear, tree-like format.</li><li> Embeds the complete content of each file directly within the Markdown document, enclosed in syntax-highlighted code blocks based on file extensions.</li><li>  Utilize regular expressions to define ignore patterns, allowing you to exclude specific files and directories from the generated documentation (e.g., , build artifacts, specific file types).</li><li> Choose to save lists of included and excluded file paths to separate files for detailed tracking and debugging of your ignore rules.</li><li><strong>Simple Command-Line Interface:</strong>  Offers an intuitive command-line interface with straightforward options for customization.</li></ul><p>If you have Go installed, run <code>go install github.com/tesserato/CodeWeaver@latest</code>to install the latest version of CodeWeaver or <code>go install github.com/tesserato/CodeWeaver@vX.Y.Z</code> to install a specific version.</p><p>Alternatively, download the appropriate pre built executable from the <a href=\"https://github.com/tesserato/CodeWeaver/releases\">releases page</a>.</p><p>If necessary, make the  executable by using the  command:</p><table><thead><tr></tr></thead><tbody><tr><td>The root directory to scan and document.</td></tr><tr><td>The name of the output Markdown file.</td></tr><tr><td><code>-ignore \"&lt;regex patterns&gt;\"</code></td><td>Comma-separated list of regular expression patterns for paths to exclude.</td></tr><tr><td><code>-included-paths-file &lt;filename&gt;</code></td><td>File to save the list of paths that were included in the documentation.</td></tr><tr><td><code>-excluded-paths-file &lt;filename&gt;</code></td><td>File to save the list of paths that were excluded from the documentation.</td></tr><tr><td>Display this help message and exit.</td></tr></tbody></table><h2><strong>Generate documentation for the current directory:</strong></h2><p>This will create a file named  in the current directory, documenting the structure and content of the current directory and its subdirectories (excluding paths matching the default ignore pattern ).</p><h2><strong>Specify a different input directory and output file:</strong></h2><pre><code>./codeweaver -dir=my_project -output=project_docs.md\n</code></pre><p>This command will process the  directory and save the documentation to .</p><h2><strong>Ignore specific file types and directories:</strong></h2><pre><code>./codeweaver -ignore=\"\\.log,temp,build\" -output=detailed_docs.md\n</code></pre><p>This example will generate , excluding any files or directories with names containing , , or . Regular expression patterns are comma-separated.</p><h2><strong>Save lists of included and excluded paths:</strong></h2><pre><code>./codeweaver -ignore=\"node_modules\" -included-paths-file=included.txt -excluded-paths-file=excluded.txt -output=code_overview.md\n</code></pre><p>This command will create  while also saving the list of included paths to  and the list of excluded paths (due to the  ignore pattern) to .</p><p>Contributions are welcome! If you encounter any issues, have suggestions for new features, or want to improve CodeWeaver, please feel free to open an issue or submit a pull request on the project's GitHub repository.</p><p>CodeWeaver is released under the <a href=\"https://tesserato.web.app/posts/2025-02-12-CodeWeaver-launch/LICENSE\">MIT License</a>. See the  file for complete license details.</p>","contentLength":3311,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43048027"},{"title":"Show HN: A New Way to Learn Languages","url":"https://www.langturbo.com/","date":1739534938,"author":"sebnun","guid":449,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43047554"},{"title":"The Real Python Podcast ‚Äì Episode #239: Behavior-Driven vs Test-Driven Development & Using Regex in Python","url":"https://realpython.com/podcasts/rpp/239/","date":1739534400,"author":"Real Python","guid":97,"unread":true,"content":"<p>What is behavior-driven development, and how does it work alongside test-driven development? How do you communicate requirements between teams in an organization? Christopher Trudeau is back on the show this week, bringing another batch of PyCoder's Weekly articles and projects.</p>","contentLength":279,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Daniel Roy Greenfeld: Building a playing card deck","url":"https://daniel.feldroy.com/posts/2025-02-deck-of-cards","date":1739526604,"author":"","guid":166,"unread":true,"content":"<article>Today is Valentine's Day. That makes it the perfect day to write a blog post about showing how to not just build a deck of cards, but show off cards from the heart suite.</article>","contentLength":170,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building a Data Engineering Center of Excellence","url":"https://towardsdatascience.com/building-a-data-engineering-center-of-excellence/","date":1739500548,"author":"Richie Bachala","guid":7,"unread":true,"content":"<p>As data continues to grow in importance and become more complex, the need for skilled data engineers has never been greater. But what is data engineering, and why is it so important? In this blog post, we will discuss the essential components of a functioning data engineering practice and why data engineering is becoming increasingly critical for businesses today, and how you can build your very own Data Engineering Center of Excellence!</p><p>I‚Äôve had the privilege to build, manage, lead, and foster a sizeable high-performing team of data warehouse &amp; ELT engineers for many years. With the help of my team, I have spent a considerable amount of time every year consciously planning and preparing to manage the growth of our data month-over-month and address the changing reporting and analytics needs for our&nbsp;<em>20000+ global data consumers</em>. We built many data warehouses to store and centralize massive amounts of data generated from many OLTP sources. We‚Äôve implemented Kimball methodology by creating star schemas both within our on-premise data warehouses and in the ones in the cloud.</p><p>The objective is to enable our user-base to perform fast analytics and reporting on the data; so our analysts‚Äô community and business users can make accurate data-driven decisions.</p><p>It took me about three years to transform&nbsp;&nbsp;() of data warehouse and ETL programmers into one cohesive Data Engineering team.</p><p><em>I have compiled some of my learnings building a global data engineering team in this post in hopes that Data professionals and leaders of all levels of technical proficiency can benefit.</em></p><h2>Evolution of the Data Engineer</h2><p>It has never been a better time to be a data engineer. Over the last decade, we have seen a massive awakening of enterprises now recognizing their data as the company‚Äôs heartbeat, making data engineering the job function that ensures accurate, current, and quality data flow to the solutions that depend on it.</p><p>Historically, the role of Data Engineers has evolved from that of&nbsp;<strong><em>data warehouse developers&nbsp;</em></strong>and the&nbsp;&nbsp;(extract, transform and load).</p><p>The data warehouse developers are responsible for designing, building, developing, administering, and maintaining data warehouses to meet an enterprise‚Äôs reporting needs. This is done primarily via extracting data from operational and transactional systems and piping it using extract transform load methodology (ETL/ ELT) to a storage layer like a data warehouse or a data lake. The data warehouse or the data lake is where data analysts, data scientists, and business users consume data. The developers also perform transformations to conform the ingested data to a data model with aggregated data for easy analysis.</p><blockquote><p>A data engineer‚Äôs prime responsibility is to produce and make data securely available for multiple consumers.</p></blockquote><p>Data engineers oversee the ingestion, transformation, modeling, delivery, and movement of data through every part of an organization. Data extraction happens from many different data sources &amp; applications. Data Engineers load the data into data warehouses and data lakes, which are transformed not just for the <a href=\"https://towardsdatascience.com/tag/data-science/\" title=\"Data Science\">Data Science</a> &amp; predictive analytics initiatives (as everyone likes to talk about) but primarily for data analysts. Data analysts &amp; data scientists perform operational reporting, exploratory analytics, service-level agreement (SLA) based business intelligence reports and dashboards on the catered data. In this book, we will address all of these job functions.</p><p>The role of a data engineer is to acquire, store, and aggregate data from both cloud and on-premise, new, and existing systems, with data modeling and feasible data architecture. Without the data engineers, analysts and data scientists won‚Äôt have valuable data to work with, and hence, data engineers are the first to be hired at the inception of every new data team. Based on the data and analytics tools available within an enterprise, data engineering teams‚Äô role profiles, constructs, and approaches have several options for what should be included in their responsibilities which we will discuss in this chapter.</p><p>Software is increasingly automating the historically manual and tedious tasks of data engineers. Data processing tools and technologies have evolved massively over several years and will continue to grow. For example, cloud-based data warehouses (Snowflake, for instance) have made data storage and processing affordable and fast. Data pipeline services (like&nbsp;<a href=\"https://www.informatica.com/blogs/welcome-to-informatica-intelligent-cloud-services.html\" rel=\"noreferrer noopener\" target=\"_blank\">Informatica IICS</a>,&nbsp;<a href=\"https://airflow.apache.org/\" rel=\"noreferrer noopener\" target=\"_blank\">Apache Airflow</a>,&nbsp;<a href=\"https://www.matillion.com/\" rel=\"noreferrer noopener\" target=\"_blank\">Matillion</a>,&nbsp;<a href=\"http://fivetran.com/\" rel=\"noreferrer noopener\" target=\"_blank\">Fivetran</a>) have turned data extraction into work that can be completed quickly and efficiently. The data engineering team should be leveraging such technologies as force multipliers, taking a consistent and cohesive approach to integration and management of enterprise data, not just relying on legacy siloed approaches to building custom data pipelines with fragile, non-performant, hard to maintain code. Continuing with the latter approach will stifle the pace of innovation within the said enterprise and force the future focus to be around managing data infrastructure issues rather than how to help generate value for your business.</p><p>The primary role of an enterprise Data Engineering team should be to&nbsp;&nbsp;into a shape that‚Äôs ready for analysis ‚Äî laying the foundation for real-world analytics and data science application.</p><p>The Data Engineering team should serve as the&nbsp;&nbsp;for enterprise-level data with the responsibility to curate the organization‚Äôs data and act as a resource for those who want to make use of it, such as Reporting &amp; Analytics teams, Data Science teams, and other groups that are doing more self-service or business group driven analytics leveraging the enterprise data platform. This team should serve as the&nbsp;&nbsp;of organizational knowledge, managing and refining the catalog so that analysis can be done more effectively. Let‚Äôs look at the essential responsibilities of a well-functioning Data Engineering team.</p><h2>Responsibilities of a Data Engineering Team</h2><p>The Data Engineering team should provide a&nbsp;&nbsp;within the enterprise that cuts across to support both the Reporting/Analytics and Data Science capabilities to provide access to clean, transformed, formatted, scalable, and secure data ready for analysis. The Data Engineering teams‚Äô core responsibilities should include:</p><blockquote><p>¬∑ Build, manage, and optimize the core data platform infrastructure</p><p>¬∑ Build and maintain custom and off-the-shelf data integrations and ingestion pipelines from a variety of structured and unstructured sources</p><p>¬∑ Manage overall data pipeline orchestration</p><p>¬∑ Manage transformation of data either before or after load of raw data through both technical processes and business logic</p><p>¬∑ Support analytics teams with design and performance optimizations of data warehouses</p></blockquote><p><strong><em>Data is an Enterprise Asset.</em></strong></p><p><strong><em>Data as an Asset should be shared and protected.</em></strong></p><p>Data should be valued as an Enterprise asset, leveraged across all Business Units to enhance the company‚Äôs value to its respective customer base by accelerating decision making, and improving competitive advantage with the help of data. Good data stewardship, legal and regulatory requirements dictate that we protect the data owned from unauthorized access and disclosure.</p><p>In other words,&nbsp;<strong><em>managing Security is a crucial responsibility.</em></strong></p><h2>Why Create a Centralized Data Engineering Team?</h2><p>Treating Data Engineering as a standard and core capability that underpins both the Analytics and Data Science capabilities will help an enterprise evolve how to approach Data and Analytics. The enterprise needs to stop vertically treating data based on the technology stack involved as we tend to see often and move to more of a horizontal approach of managing a&nbsp;&nbsp;or&nbsp;&nbsp;that cuts across the organization and can connect to various technologies as needed drive analytic initiatives. This is a new way of thinking and working, but it can drive efficiency as the various data organizations look to scale. Additionally ‚Äî there is value in creating a dedicated structure and career path for Data Engineering resources. Data engineering skill sets are in high demand in the market; therefore, hiring outside the company can be costly. Companies must enable programmers, database administrators, and software developers with a career path to gain the needed experience with the above-defined skillsets by working across technologies. Usually, forming a data engineering center of excellence or a capability center would be the first step for making such progression possible.</p><h2>Challenges for creating a centralized Data Engineering Team</h2><p>The centralization of the Data Engineering team as a service approach is different from how Reporting &amp; Analytics and Data Science teams operate. It does, in principle, mean&nbsp;<strong><em>giving up some level of control of resources</em></strong>&nbsp;and establishing new processes for how these teams will collaborate and work together to deliver initiatives.</p><p>The Data Engineering team will need to demonstrate that it can effectively support the needs of both Reporting &amp; Analytics and Data Science teams, no matter how large these teams are. Data Engineering teams must&nbsp;<strong><em>effectively prioritize workloads&nbsp;</em></strong>while ensuring they can bring the right skillsets and experience to assigned projects.</p><p>Data engineering is essential because it serves as the backbone of data-driven companies. It enables analysts to work with clean and well-organized data, necessary for deriving insights and making sound decisions. To build a functioning data engineering practice, you need the following critical components:</p><p>The Data Engineering team should be a core capability within the enterprise, but it should effectively serve as a support function involved in almost everything data-related. It should interact with the Reporting and Analytics and Data Science teams in a collaborative support role to make the entire team successful.</p><p>The&nbsp;<em>Data Engineering team doesn‚Äôt create direct business value</em>&nbsp;‚Äî but the value should come in making the Reporting and Analytics, and Data Science teams more productive and efficient to ensure delivery of maximum value to business stakeholders through Data &amp; Analytics initiatives. To make that possible, the six key responsibilities within the data engineering capability center would be as follow ‚Äì</p><p>Let‚Äôs review the&nbsp;<strong><em>6 pillars of responsibilities</em></strong>:</p><p><strong>1. Determine Central Data Location for Collation and Wrangling</strong></p><p>Understanding and having a strategy for a&nbsp;(<em>a centralized data repository or data warehouse for the mass consumption of data for analysis</em>). Defining requisite data tables and where they will be joined in the context of data engineering and subsequently converting raw data into digestible and valuable formats.</p><p><strong>2. Data Ingestion and Transformation</strong></p><p>Moving data from one or more sources to a new destination (<em>your data lake or cloud data warehouse)&nbsp;</em>where it can be stored and further analyzed and then converting data from the format of the source system to that of the destination</p><p>Extracting, transforming, and loading data from one or more sources into a destination system to represent the data in a new context or style.</p><p>Data modeling is an essential function of a data engineering team, granted not all data engineers excel with this capability. Formalizing relationships between data objects and business rules into a conceptual representation through understanding information system workflows, modeling required queries, designing tables, determining primary keys, and effectively utilizing data to create informed output.</p><p>I‚Äôve seen engineers in interviews mess up more with this than coding in technical discussions. It‚Äôs essential to understand the differences between Dimensions, Facts, Aggregate tables.</p><p>Ensuring that sensitive data is protected and implementing proper authentication and authorization to reduce the risk of a data breach</p><p><strong>6. Architecture and Administration</strong></p><p>Defining the models, policies, and standards that administer what data is collected, where and how it is stored, and how it such data is integrated into various analytical systems.</p><blockquote><p>The six pillars of responsibilities for data engineering capabilities center on the ability to determine a central data location for collation and wrangling, ingest and transform data, execute ETL/ELT operations, model data, secure access and administer an architecture. While all companies have their own specific needs with regards to these functions, it is important to ensure that your team has the necessary skillset in order to build a foundation for big data success.</p></blockquote><p>Besides the Data Engineering following are the other capability centers that need to be considered within an enterprise:</p><h2>Analytics Capability Center</h2><p>The analytics capability center enables consistent, effective, and efficient BI, analytics, and advanced analytics capabilities across the company. Assist business functions in triaging, prioritizing, and achieving their objectives and goals through reporting, analytics, and dashboard solutions, while providing operational reports and visualizations, self-service analytics, and required tools to automate the generation of such insights.</p><h2>Data Science Capability Center</h2><p>The data science capability center is for exploring cutting-edge technologies and concepts to unlock new insights and opportunities, better inform employees and create a culture of prescriptive information usage using Automated AI and Automated ML solutions such as&nbsp;<a href=\"https://medium.com/u/9aea625dfc27?source=post_page---user_mention--b83d51cedb6a---------------------------------------\" rel=\"noreferrer noopener\" target=\"_blank\">H2O.ai</a>,&nbsp;<a href=\"https://medium.com/u/27e43843bc9f?source=post_page---user_mention--b83d51cedb6a---------------------------------------\" rel=\"noreferrer noopener\" target=\"_blank\">Dataiku</a>,&nbsp;<a href=\"http://www.aible.com/\" rel=\"noreferrer noopener\" target=\"_blank\">Aible</a>, DataRobot,&nbsp;<a href=\"https://medium.com/u/3aaaf223f1e?source=post_page---user_mention--b83d51cedb6a---------------------------------------\" rel=\"noreferrer noopener\" target=\"_blank\">C3.ai</a></p><p>The data governance office empowers users with trusted, understood, and timely data to drive effectiveness while keeping the integrity and sanctity of data in the right hands for mass consumption.</p><blockquote><p><em>As your company grows, you will want to make sure that the data engineering capabilities are in place to support the six pillars of responsibilities. By doing this, you will be able to ensure that all aspects of data management and analysis are covered and that your data is safe and accessible by those who need it. Have you started thinking about how your company will grow? What steps have you taken to put a centralized data engineering team in place?</em></p></blockquote>","contentLength":14079,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"It's time to go ESM-only","url":"https://javascriptweekly.com/issues/723","date":1739491200,"author":"","guid":253,"unread":true,"content":"<p>ü§Ø Pfft, vehicle data is a joke without <a href=\"https://javascriptweekly.com/link/165818/rss\">CarsXE</a>. API goes brrrrr. VIN decoding, plate lookup, market value reports. <a href=\"https://javascriptweekly.com/link/165818/rss\">Get&nbsp;Serious!</a></p>","contentLength":130,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Mapped types in TypeScript","url":"https://2ality.com/2025/02/mapped-types-typescript.html","date":1739491200,"author":"Dr. Axel Rauschmayer","guid":174,"unread":true,"content":"<p>A mapped type is a loop over keys that produces an object or tuple type and looks as follows:</p><pre><code>{[]: }\n</code></pre><p>In this blog post, we examine how mapped types work and see examples of using them. Their most importing use cases are transforming objects and mapping tuples.</p>","contentLength":259,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"We Were Wrong About GPUs","url":"https://fly.io/blog/wrong-about-gpu/","date":1739491200,"author":"Fly","guid":408,"unread":true,"content":"<div><p>We‚Äôre building a public cloud, on hardware we own. We raised money to do that, and to place some bets; one of them: GPU-enabling our customers. A progress report: GPUs aren‚Äôt going anywhere, but: GPUs aren‚Äôt going anywhere.</p></div><p>A Fly Machine is a <a href=\"https://fly.io/blog/docker-without-docker/\">Docker/OCI container</a> running inside a hardware-virtualized virtual machine somewhere on our global fleet of bare-metal worker servers. A GPU Machine is a Fly Machine with a hardware-mapped Nvidia GPU. It‚Äôs a Fly Machine that can do fast CUDA.</p><p>Like everybody else in our industry, we were right about the importance of AI/ML. If anything, we underestimated its importance. But the product we came up with probably doesn‚Äôt fit the moment. It‚Äôs a bet that doesn‚Äôt feel like it‚Äôs paying off.</p><p><strong>If you‚Äôre using Fly GPU Machines, don‚Äôt freak out; we‚Äôre not getting rid of them.</strong> But if you‚Äôre waiting for us to do something bigger with them, a v2 of the product, you‚Äôll probably be waiting awhile.</p><p>GPU Machines were not a small project for us. Fly Machines run on an idiosyncratically small hypervisor (normally Firecracker, but for GPU Machines <a href=\"https://github.com/cloud-hypervisor/cloud-hypervisor\">Intel‚Äôs Cloud Hypervisor</a>, a very similar Rust codebase that supports PCI passthrough). The Nvidia ecosystem is not geared to supporting micro-VM hypervisors.</p><p>GPUs <a href=\"https://googleprojectzero.blogspot.com/2020/09/attacking-qualcomm-adreno-gpu.html\">terrified our security team</a>. A GPU is just about the worst case hardware peripheral: intense multi-directional direct memory transfers</p><div><p>(not even bidirectional: in common configurations, GPUs talk to each other)</p></div><p>with arbitrary, end-user controlled computation, all operating outside our normal security boundary.</p><p>We did a couple expensive things to mitigate the risk. We shipped GPUs on dedicated server hardware, so that GPU- and non-GPU workloads weren‚Äôt mixed. Because of that, the only reason for a Fly Machine to be scheduled on a GPU machine was that it needed a PCI BDF for an Nvidia GPU, and there‚Äôs a limited number of those available on any box. Those GPU servers were drastically less utilized and thus less cost-effective than our ordinary servers.</p><p>We funded two very large security assessments, from <a href=\"https://www.atredis.com/\">Atredis</a> and <a href=\"https://tetrelsec.com/\">Tetrel</a>, to evaluate our GPU deployment. Matt Braun is writing up those assessments now. They were not cheap, and they took time.</p><p>Security wasn‚Äôt directly the biggest cost we had to deal with, but it was an indirect cause for a subtle reason.</p><p>We could have shipped GPUs very quickly by doing what Nvidia recommended: standing up a standard K8s cluster to schedule GPU jobs on. Had we taken that path, and let our GPU users share a single Linux kernel, we‚Äôd have been on Nvidia‚Äôs driver happy-path.</p><p>Alternatively, we could have used a conventional hypervisor. Nvidia suggested VMware (heh). But they could have gotten things working had we used QEMU. We like QEMU fine, and could have talked ourselves into a security story for it, but the whole point of Fly Machines is that they take milliseconds to start. We could not have offered our desired Developer Experience on the Nvidia happy-path.</p><p>Instead, we burned months trying (and ultimately failing) to get Nvidia‚Äôs host drivers working to map <a href=\"https://www.nvidia.com/en-us/data-center/virtual-solutions/\">virtualized GPUs</a> into Intel Cloud Hypervisor. At one point, we hex-edited the closed-source drivers to trick them into thinking our hypervisor was QEMU.</p><p>I‚Äôm not sure any of this really mattered in the end. There‚Äôs a segment of the market we weren‚Äôt ever really able to explore because Nvidia‚Äôs driver support kept us from thin-slicing GPUs. We‚Äôd have been able to put together a really cheap offering for developers if we hadn‚Äôt run up against that, and developers love ‚Äúcheap‚Äù, but I can‚Äôt prove that those customers are real.</p><p>On the other hand, we‚Äôre committed to delivering the Fly Machine DX for GPU workloads. Beyond the PCI/IOMMU drama, just getting an entire hardware GPU working in a Fly Machine was a lift. We needed Fly Machines that would come up with the right Nvidia drivers; our stack was built assuming that the customer‚Äôs OCI container almost entirely defined the root filesystem for a Machine. We had to engineer around that in our  orchestrator. And almost everything people want to do with GPUs involves efficiently grabbing huge files full of model weights. Also annoying!</p><p>And, of course, we bought GPUs. A lot of GPUs. Expensive GPUs.</p><p>The biggest problem: developers don‚Äôt want GPUs. They don‚Äôt even want AI/ML models. They want LLMs.  may have smart, fussy opinions on how to get their models loaded with CUDA, and what the best GPU is. But  don‚Äôt care about any of that. When a software developer shipping an app comes looking for a way for their app to deliver prompts to an LLM, you can‚Äôt just give them a GPU.</p><p>For those developers, who probably make up most of the market, it doesn‚Äôt seem plausible for an insurgent public cloud to compete with OpenAI and Anthropic. Their APIs are fast enough, and developers thinking about performance in terms of ‚Äútokens per second‚Äù aren‚Äôt counting milliseconds.</p><div><p>(you should all feel sympathy for us)</p></div><p>This makes us sad because we really like the point in the solution space we found. Developers shipping apps on Amazon will outsource to other public clouds to get cost-effective access to GPUs. But then they‚Äôll faceplant trying to handle data and model weights, backhauling gigabytes (at significant expense) from S3. We have app servers, GPUs, and object storage all under the same top-of-rack switch. But inference latency just doesn‚Äôt seem to matter yet, so the market doesn‚Äôt care.</p><p>Past that, and just considering the system engineers who do care about GPUs rather than LLMs: the hardware product/market fit here is really rough.</p><p>People doing serious AI work want galactically huge amounts of GPU compute. A whole enterprise A100 is a compromise position for them; they want an SXM cluster of H100s.</p><div><p>Near as we can tell, MIG gives you a UUID to talk to the host driver, not a PCI device.</p></div><p>We think there‚Äôs probably a market for users doing lightweight ML work getting tiny GPUs. <a href=\"https://www.nvidia.com/en-us/technologies/multi-instance-gpu/\">This is what Nvidia MIG does</a>, slicing a big GPU into arbitrarily small virtual GPUs. But for fully-virtualized workloads, it‚Äôs not baked; we can‚Äôt use it. And I‚Äôm not sure how many of those customers there are, or whether we‚Äôd get the density of customers per server that we need.</p><p><a href=\"https://fly.io/blog/cutting-prices-for-l40s-gpus-in-half\">That leaves the L40S customers</a>. There are a bunch of these! We dropped L40S prices last year, not because we were sour on GPUs but because they‚Äôre the one part we have in our inventory people seem to get a lot of use out of. We‚Äôre happy with them. But they‚Äôre just another kind of compute that some apps need; they‚Äôre not a driver of our core business. They‚Äôre not the GPU bet paying off.</p><p>Really, all of this is just a long way of saying that for most software developers, ‚ÄúAI-enabling‚Äù their app is best done with API calls to things like Claude and GPT, Replicate and RunPod.</p><p>A very useful way to look at a startup is that it‚Äôs a race to learn stuff. So, what‚Äôs our report card?</p><p>First off, when we embarked down this path in 2022, we were (like many other companies) operating in a sort of phlogiston era of AI/ML. The industry attention to AI had not yet collapsed around a small number of foundational LLM models. We expected there to be a diversity of  models, the world <a href=\"https://github.com/elixir-nx/bumblebee\" title=\"\">Elixir Bumblebee</a> looks forward to, where people pull different AI workloads off the shelf the same way they do Ruby gems.</p><p>But <a href=\"https://www.cursor.com/\" title=\"\">Cursor happened</a>, and, as they say, how are you going to keep ‚Äòem down on the farm once they‚Äôve seen Karl Hungus? It seems much clearer where things are heading.</p><p>GPUs were a test of a Fly.io company credo: as we think about core features, we design for 10,000 developers, not for 5-6. It took a minute, but the credo wins here: GPU workloads for the 10,001st developer are a niche thing.</p><p>Another way to look at a startup is as a series of bets. We put a lot of chips down here. But the buy-in for this tournament gave us a lot of chips to play with. Never making a big bet of any sort isn‚Äôt a winning strategy. I‚Äôd rather we‚Äôd flopped the nut straight, but I think going in on this hand was the right call.</p><p>A really important thing to keep in mind here, and something I think a lot of startup thinkers sleep on, is the extent to which this bet involved acquiring assets. Obviously, some of our <a href=\"https://fly.io/blog/the-exit-interview-jp/\" title=\"\">costs here aren‚Äôt recoverable</a>. But the hardware parts that aren‚Äôt generating revenue will ultimately get liquidated; like with <a href=\"https://fly.io/blog/32-bit-real-estate/\" title=\"\">our portfolio of IPv4 addresses</a>, I‚Äôm even more comfortable making bets backed by tradable assets with durable value.</p><p>In the end, I don‚Äôt think GPU Fly Machines were going to be a hit for us no matter what we did. Because of that, one thing I‚Äôm very happy about is that we didn‚Äôt compromise the rest of the product for them. Security concerns slowed us down to where we probably learned what we needed to learn a couple months later than we could have otherwise, but we‚Äôre scaling back our GPU ambitions without having sacrificed <a href=\"https://fly.io/blog/sandboxing-and-workload-isolation/\" title=\"\">any of our isolation story</a>, and, ironically, GPUs  are making that story a lot more important. The same thing goes for our Fly Machine developer experience.</p><p>We started this company building a Javascript runtime for edge computing. We learned that our customers didn‚Äôt want a new Javascript runtime; they just wanted their native code to work. <a href=\"https://news.ycombinator.com/item?id=22616857\" title=\"\">We shipped containers</a>, and no convincing was needed. We were wrong about Javascript edge functions, and I think we were wrong about GPUs. That‚Äôs usually how we figure out the right answers:  by being wrong about a lot of stuff.</p>","contentLength":9514,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Show HN: SQL Noir ‚Äì Learn SQL by solving crimes","url":"https://www.sqlnoir.com/","date":1739483356,"author":"chrisBHappy","guid":448,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=43041827"},{"title":"Bojan Mihelac: Prefixed Parameters for Django querystring tag","url":"http://code.informatikamihelac.com/en/query-string-with-prefixed-parameters/","date":1739482638,"author":"","guid":165,"unread":true,"content":"<article>An overview of Django 5.1's new querystring tag and how to add support for prefixed parameters.</article>","contentLength":95,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Learnings from a Machine Learning Engineer ‚Äî Part 5: The Training","url":"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-5-the-training/","date":1739480672,"author":"David Martin","guid":6,"unread":true,"content":"<p>In this fifth part of my series, I will outline the steps for creating a Docker container for training your image classification model, evaluating performance, and preparing for deployment.</p><p>AI/ML engineers would prefer to focus on model training and data engineering, but the reality is that we also need to understand the infrastructure and mechanics behind the scenes.</p><p>I hope to share some tips, not only to get your training run running, but how to streamline the process in a cost efficient manner on cloud resources such as Kubernetes.</p><p>I will reference elements from my previous articles for getting the best model performance, so be sure to check out&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-1-the-data/\">Part 1</a>&nbsp;and&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-2-the-data-sets/\">Part 2</a>&nbsp;on the data sets, as well as&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/\">Part 3</a>&nbsp;and&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-4-the-model/\">Part 4</a>&nbsp;on model evaluation.</p><p>Here are the learnings that I will share with you, once we lay the groundwork on the infrastructure:</p><ul><li>Building your Docker container</li><li>Executing your training run</li></ul><p>First, let me provide a brief description of the setup that I created, specifically around Kubernetes. Your setup may be entirely different, and that is just fine. I simply want to set the stage on the infrastructure so that the rest of the discussion makes sense.</p><p>This is a server you deploy that provides a user interface to for your subject matter experts to label and evaluate images for the image classification application. The server can run as a pod on your Kubernetes cluster, but you may find that running a dedicated server with faster disk may be better.</p><p>Image files are stored in a directory structure like the following, which is self-documenting and easily modified.</p><pre><code>Image_Library/\n  - cats/\n    - image1001.png\n  - dogs/\n    - image2001.png</code></pre><p>Ideally, these files would reside on local server storage (instead of cloud or cluster storage) for better performance. The reason for this will become clear as we see what happens as the image library grows.</p><p><a href=\"https://towardsdatascience.com/tag/cloud-storage/\" title=\"Cloud Storage\">Cloud Storage</a> allows for a virtually limitless and convenient way to share files between systems. In this case, the image library on your management system could access the same files as your Kubernetes cluster or Docker engine.</p><p>However, the downside of cloud storage is the latency to open a file. Your image library will have&nbsp;&nbsp;of images, and the latency to read each file will have a significant impact on your training run time. Longer training runs means more cost for using the expensive GPU processors!</p><p>The way that I found to speed things up is to create a&nbsp;&nbsp;file of your image library on your management system and copy them to cloud storage. Even better would be to create multiple tar files&nbsp;, each containing 10,000 to 20,000 images.</p><p>This way you only have network latency on a handful of files (which contain thousands, once extracted) and you start your training run much sooner.</p><h3>Kubernetes or Docker engine</h3><p>A Kubernetes cluster, with proper configuration, will allow you to dynamically scale up/down nodes, so you can perform your model training on GPU hardware as needed. Kubernetes is a rather heavy setup, and there are other container engines that will work.</p><blockquote><p>The technology options change constantly!</p></blockquote><p>The main idea is that you want to spin up the resources you need ‚Äî for only as long as you need them ‚Äî then scale down to reduce your time (and therefore cost) of running expensive GPU resources.</p><p>Once your GPU node is started and your <a href=\"https://towardsdatascience.com/tag/docker/\" title=\"Docker\">Docker</a> container is running, you can extract the&nbsp;&nbsp;files above to&nbsp;&nbsp;storage, such as an&nbsp;, on your node. The node typically has high-speed SSD disk, ideal for this type of workload. There is one caveat ‚Äî the storage capacity on your node must be able to handle your image library.</p><p>Assuming we are good, let‚Äôs talk about building your Docker container so that you can train your model on your image library.</p><h2>Building your Docker container</h2><p>Being able to execute a training run in a consistent manner lends itself perfectly to building a Docker container. You can ‚Äúpin‚Äù the version of libraries so you know exactly how your scripts will run every time. You can version control your containers as well, and revert to a known good image in a pinch. What is really nice about Docker is you can run the container pretty much anywhere.</p><p>The tradeoff when running in a container, especially with an <a href=\"https://towardsdatascience.com/tag/image-classification/\" title=\"Image Classification\">Image Classification</a> model, is the speed of file storage. You can attach any number of volumes to your container, but they are usually&nbsp;&nbsp;attached, so there is latency on each file read. This may not be a problem if you have a small number of files. But when dealing with hundreds of thousands of files like image data, that latency adds up!</p><p>This is why using the&nbsp;&nbsp;file method outlined above can be beneficial.</p><p>Also, keep in mind that Docker containers could be terminated unexpectedly, so you should make sure to store important information outside the container, on cloud storage or a database. I‚Äôll show you how below.</p><p>Knowing that you will need to run on GPU hardware (here I will assume Nvidia), be sure to select the right base image for your Dockerfile, such as&nbsp;&nbsp;with the ‚Äúdevel&nbsp;flavor that will contain the right drivers.</p><p>Next, you will add the script files to your container, along with a ‚Äúbatch‚Äù script to coordinate the execution. Here is an example Dockerfile, and then I‚Äôll describe what each of the scripts will be doing.</p><pre><code>#####   Dockerfile   #####\nFROM nvidia/cuda:12.8.0-devel-ubuntu24.04\n\n# Install system software\nRUN apt-get -y update &amp;&amp; apg-get -y upgrade\nRUN apt-get install -y python3-pip python3-dev\n\n# Setup python\nWORKDIR /app\nCOPY requirements.txt\nRUN python3 -m pip install --upgrade pip\nRUN python3 -m pip install -r requirements.txt\n\n# Pythong and batch scripts\nCOPY ExtractImageLibrary.py .\nCOPY Training.py .\nCOPY Evaluation.py .\nCOPY ScorePerformance.py .\nCOPY ExportModel.py .\nCOPY BulkIdentification.py .\nCOPY BatchControl.sh .\n\n# Allow for interactive shell\nCMD tail -f /dev/null</code></pre><p>Dockerfiles are declarative, almost like a cookbook for building a small server ‚Äî you know what you‚Äôll get every time. Python libraries benefit, too, from this declarative approach. Here is a sample&nbsp;&nbsp;file that loads the TensorFlow libraries with CUDA support for GPU acceleration.</p><pre><code>#####   requirements.txt   #####\nnumpy==1.26.3\npandas==2.1.4\nscipy==1.11.4\nkeras==2.15.0\ntensorflow[and-cuda]</code></pre><h3>Extract Image Library script</h3><p>In <a href=\"https://towardsdatascience.com/tag/kubernetes/\" title=\"Kubernetes\">Kubernetes</a>, the Docker container can access local, high speed storage on the physical node. This can be achieved via the&nbsp;&nbsp;volume type. As mentioned before, this will only work if the local storage on your node can handle the size of your library.</p><pre><code>#####   sample 25GB emptyDir volume in Kubernetes   #####\ncontainers:\n  - name: training-container\n    volumeMounts:\n      - name: image-library\n        mountPath: /mnt/image-library\nvolumes:\n  - name: image-library\n    emptyDir:\n      sizeLimit: 25Gi</code></pre><p>You would want to have another&nbsp;&nbsp;to your cloud storage where you have the&nbsp;&nbsp;files. What this looks like will depend on your provider, or if you are using a persistent volume claim, so I won‚Äôt go into detail here.</p><p>Now you can extract the&nbsp;&nbsp;files ‚Äî ideally in parallel for an added performance boost ‚Äî to the local mount point.</p><p>As AI/ML engineers, the model training is where we want to spend most of our time.</p><blockquote><p>This is where the magic happens!</p></blockquote><p>With your image library now extracted, we can create our train-validation-test sets, load a pre-trained model or build a new one, fit the model, and save the results.</p><p>One key technique that has served me well is to load the most recently trained model as my base. I discuss this in more detail in&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-4-the-model/\">Part 4</a>&nbsp;under ‚ÄúFine tuning‚Äù, this results in faster training time and significantly improved model performance.</p><p>Be sure to take advantage of the local storage to checkpoint your model during training since the models are quite large and you are paying for the GPU even while it sits idle writing to disk.</p><p>This of course raises a concern about what happens if the Docker container dies part-way though the training. The risk is (hopefully) low from a cloud provider, and you may not want an incomplete training anyway. But if that does happen, you will at least want to understand&nbsp;, and this is where saving the main log file to cloud storage (described below) or to a package like MLflow comes in handy.</p><p>After your training run has completed and you have taken proper precaution on saving your work, it is time to see how well it performed.</p><p>Normally this evaluation script will pick up on the model that just finished. But you may decide to point it at a previous model version through an interactive session. This is why have the script as stand-alone.</p><p>With it being a separate script, that means it will need to read the completed model from disk ‚Äî ideally local disk for speed. I like having two separate scripts (training and evaluation), but you might find it better to combine these to avoid reloading the model.</p><p>Now that the model is loaded, the evaluation script should generate predictions on&nbsp;&nbsp;image in the training, validation, test, and benchmark sets. I save the results as a&nbsp;&nbsp;matrix with the softmax confidence score for each class label. So, if there are 1,000 classes and 100,000 images, that‚Äôs a table with 100 million scores!</p><p>I save these results in&nbsp;&nbsp;files that are then used in the score generation next.</p><p>Taking the matrix of scores produced by the evaluation script above, we can now create various metrics of model performance. Again, this process could be combined with the evaluation script above, but my preference is for independent scripts. For example, I might want to regenerate scores on previous training runs. See what works for you.</p><p>Here are some of the&nbsp;&nbsp;functions that produce useful insights like F1, log loss, AUC-ROC, Matthews correlation coefficient.</p><pre><code>from sklearn.metrics import average_precision_score, classification_report\nfrom sklearn.metrics import log_loss, matthews_corrcoef, roc_auc_score</code></pre><p>Aside from these basic statistical analyses for each dataset (train, validation, test, and benchmark), it is also useful to identify:</p><ul><li>Which&nbsp;&nbsp;labels get the most number of errors?</li><li>Which&nbsp;&nbsp;labels get the most number of incorrect guesses?</li><li>How many&nbsp;<strong>ground-truth-to-predicted</strong>&nbsp;label pairs are there? In other words, which classes are easily confused?</li><li>What is the&nbsp;&nbsp;when applying a minimum softmax confidence score threshold?</li><li>What is the&nbsp;&nbsp;above that softmax threshold?</li><li>For the ‚Äúdifficult‚Äù benchmark sets, do you get a sufficiently&nbsp;&nbsp;score?</li><li>For the ‚Äúout-of-scope‚Äù benchmark sets, do you get a sufficiently&nbsp;&nbsp;score?</li></ul><p>As you can see, there are multiple calculations and it‚Äôs not easy to come up with a single evaluation to decide if the trained model is good enough to be moved to production.</p><p>In fact, for an image classification model, it is helpful to manually review the images that the model got wrong, as well as the ones that got a low softmax confidence score. Use the scores from this script to create a list of images to manually review, and then get a&nbsp;&nbsp;for how well the model performs.</p><p>Check out&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/\">Part 3</a>&nbsp;for more in-depth discussion on evaluation and scoring.</p><p>All of the heavy lifting is done by this point. Since your Docker container will be shutdown soon, now is the time to copy the model artifacts to cloud storage and prepare them for being put to use.</p><p>The example Python code snippet below is more geared to Keras and TensorFlow. This will take the trained model and export it as a&nbsp;. Later, I will show how this is used by TensorFlow Serving in the&nbsp;&nbsp;section below.</p><pre><code># Increment current version of model and create new directory\nnext_version_dir, version_number = create_new_version_folder()\n\n# Copy model artifacts to the new directory\ncopy_model_artifacts(next_version_dir)\n\n# Create the directory to save the model export\nsaved_model_dir = os.path.join(next_version_dir, str(version_number))\n\n# Save the model export for use with TensorFlow Serving\ntf.keras.backend.set_learning_phase(0)\nmodel = tf.keras.models.load_model(keras_model_file)\ntf.saved_model.save(model, export_dir=saved_model_dir)</code></pre><p>This script also copies the other training run artifacts such as the model evaluation results, score summaries, and log files generated from model training. Don‚Äôt forget about your label map so you can give human readable names to your classes!</p><h3>Bulk identification script</h3><p>Your training run is complete, your model has been scored, and a new version is exported and ready to be served. Now is the time to use this latest model to assist you on trying to identify unlabeled images.</p><p>As I described in&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-4-the-model/\">Part 4</a>, you may have a collection of ‚Äúunknowns‚Äù ‚Äî really good pictures, but no idea what they are. Let your new model provide a best guess on these and record the results to a file or a database. Now you can create filters based on closest match and by high/low scores. This allows your subject matter experts to leverage these filters to find new image classes, add to existing classes, or to remove images that have very low scores and are no good.</p><p>By the way, I put this step inside the GPU container since you may have thousands of ‚Äúunknown‚Äù images to process and the accelerated hardware will make light work of it. However, if you are not in a hurry, you could perform this step on a separate CPU node, and shutdown your GPU node sooner to save cost. This would especially make sense if your ‚Äúunknowns‚Äù folder is on slower cloud storage.</p><p>All of the scripts described above perform a specific task ‚Äî from extracting your image library, executing model training, performing evaluation and scoring, exporting the model artifacts for deployment, and perhaps even bulk identification.</p><blockquote><p>One script to rule them all</p></blockquote><p>To coordinate the entire show, this batch script gives you the entry point for your container and an easy way to trigger everything. Be sure to produce a log file in case you need to analyze any failures along the way. Also, be sure to write the log to your cloud storage in case the container dies unexpectedly.</p><pre><code>#!/bin/bash\n# Main batch control script\n\n# Redirect standard output and standard error to a log file\nexec &gt; /cloud_storage/batch-logfile.txt 2&gt;&amp;1\n\n/app/ExtractImageLibrary.py\n/app/Training.py\n/app/Evaluation.py\n/app/ScorePerformance.py\n/app/ExportModel.py\n/app/BulkIdentification.py</code></pre><h2>Executing your training run</h2><p>So, now it‚Äôs time to put everything in motion‚Ä¶</p><p>Let‚Äôs go through the steps to prepare your image library, fire up your Docker container to train your model, and then examine the results.</p><h3>Image library ‚Äòtar‚Äô files</h3><p>Your image management system should now create a&nbsp;&nbsp;file backup of your data. Since&nbsp;&nbsp;is a single-threaded function, you will get significant speed improvement by creating multiple tar files in parallel, each with a portion of you data.</p><p>Now these files can be copied to your shared cloud storage for the next step.</p><p>All the hard work you put into creating your container (described above) will be put to the test. If you are running Kubernetes, you can create a Job that will execute the&nbsp;&nbsp;script.</p><p>Inside the Kubernetes Job definition, you can pass environment variables to adjust the execution of your script. For example, the batch size and number of epochs are set here and then pulled into your Python scripts, so you can alter the behavior without changing your code.</p><pre><code>#####   sample Job in Kubernetes   #####\ncontainers:\n  - name: training-job\n    env:\n      - name: BATCH_SIZE\n        value: 50\n      - name: NUM_EPOCHS\n        value: 30\n    command: [\"/app/BatchControl.sh\"]</code></pre><p>Once the Job is completed, be sure to verify that the GPU node properly scales back down to zero according to your scaling configuration in Kubernetes ‚Äî you don‚Äôt want to be saddled with a huge bill over a simple configuration error.</p><p>With the training run complete, you should now have model artifacts saved and can examine the performance. Look through the metrics, such as F1 and log loss, and benchmark accuracy for high softmax confidence scores.</p><p>As mentioned earlier, the reports only tell part of the story. It is worth the time and effort to manually review the images that the model got wrong or where it produced a low confidence score.</p><p>Don‚Äôt forget about the bulk identification. Be sure to leverage these to locate new images to fill out your data set, or to find new classes.</p><p>Once you have reviewed your model performance and are satisfied with the results, it is time to modify your TensorFlow Serving container to put the new model into production.</p><p>TensorFlow Serving is available as a Docker container and provides a very quick and convenient way to serve your model. This container can listen and respond to API calls for your model.</p><p>Let‚Äôs say your new model is version 7, and your&nbsp;&nbsp;script (see above) has saved the model in your cloud share as&nbsp;<em>/image_application/models/007</em>. You can start the TensorFlow Serving container with that volume mount. In this example, the&nbsp;&nbsp;points to folder for version 007.</p><pre><code>#####   sample TensorFlow pod in Kubernetes   #####\ncontainers:\n  - name: tensorflow-serving\n    image: bitnami/tensorflow-serving:2.18.0\n    ports:\n      - containerPort: 8501\n    env:\n      - name: TENSORFLOW_SERVING_MODEL_NAME\n        value: \"image_application\"\n    volumeMounts:\n      - name: models-subfolder\n        mountPath: \"/bitnami/model-data\"\n\nvolumes:\n  - name: models-subfolder\n    azureFile:\n      shareName: \"image_application/models/007\"</code></pre><p>A subtle note here ‚Äî the export script should create a sub-folder, named 007 (same as the base folder), with the saved model export. This may seem a little confusing, but TensorFlow Serving will mount this share folder as&nbsp;&nbsp;and detect the numbered sub-folder inside it for the version to serve. This will allow you to query the API for the model version as well as the identification.</p><p>As I mentioned at the start of this article, this setup has worked for my situation. This is certainly not the only way to approach this challenge, and I invite you to customize your own solution.</p><p>I wanted to share my hard-fought learnings as I embraced cloud services in Kubernetes, with the desire to keep costs under control. Of course, doing all this while maintaining a high level of model performance is an added challenge, but one that you can achieve.</p><p>I hope I have provided enough information here to help you with your own endeavors. Happy learnings!</p>","contentLength":18226,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Learnings from a Machine Learning Engineer ‚Äî Part 3: The Evaluation","url":"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/","date":1739480406,"author":"David Martin","guid":5,"unread":true,"content":"<p>In this third part of my series, I will explore the evaluation process which is a critical piece that will lead to a cleaner data set and elevate your model performance. We will see the difference between evaluation of a&nbsp;&nbsp;model (one not yet in production), and evaluation of a&nbsp;&nbsp;model (one making real-world predictions).</p><p>In&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-1-the-data/\">Part 1</a>, I discussed the process of labelling your image data that you use in your <a href=\"https://towardsdatascience.com/tag/image-classification/\" title=\"Image Classification\">Image Classification</a> project. I showed how to define ‚Äúgood‚Äù images and create sub-classes. In&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-2-the-data-sets/\">Part 2</a>, I went over various data sets, beyond the usual train-validation-test sets, such as benchmark sets, plus how to handle synthetic data and duplicate images.</p><h2><strong>Evaluation of the trained model</strong></h2><p>As machine learning engineers we look at accuracy, F1, log loss, and other metrics to decide if a model is ready to move to production. These are all important measures, but from my experience, these scores can be deceiving especially as the number of classes grows.</p><p>Although it can be time consuming, I find it very important to manually review the images that the model gets&nbsp;, as well as the images that the model gives a&nbsp;&nbsp;softmax ‚Äúconfidence‚Äù score to. This means adding a step immediately after your training run completes to calculate scores for&nbsp;&nbsp;images ‚Äî training, validation, test, and the benchmark sets. You only need to bring up for manual review the ones that the model had problems with. This should only be a small percentage of the total number of images. See the Double-check process below</p><p>What you do during the manual evaluation is to put yourself in a ‚Äú‚Äù to ensure that the labelling standards are being followed that you setup in <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-1-the-data/\">Part 1</a>. Ask yourself:</p><ul><li>‚ÄúIs this a good image?‚Äù Is the subject front and center, and can you clearly see all the features?</li><li>‚ÄúIs this the correct label?‚Äù Don‚Äôt be surprised if you find wrong labels.</li></ul><p>You can either remove the bad images or fix the labels if they are wrong. Otherwise you can keep them in the data set and force the model to do better next time. Other questions I ask are:</p><ul><li>‚ÄúWhy did the model get this wrong?‚Äù</li><li>‚ÄúWhy did this image get a low score?‚Äù</li><li>‚ÄúWhat is it about the image that caused confusion?‚Äù</li></ul><p>Sometimes the answer has nothing to do with&nbsp;&nbsp;specific image. Frequently, it has to do with the&nbsp;&nbsp;images, either in the ground truth class or in the predicted class. It is worth the effort to Double-check all images in both sets if you see a consistently bad guess. Again, don‚Äôt be surprised if you find poor images or wrong labels.</p><p>When doing the evaluation of the trained model (above), we apply a lot of subjective analysis ‚Äî ‚ÄúWhy did the model get this wrong?‚Äù and ‚ÄúIs this a good image?‚Äù From these, you may only get a&nbsp;.</p><p>Frequently, I will decide to hold off moving a model forward to production based on that gut feel. But how can you justify to your manager that you want to hit the brakes? This is where putting a more&nbsp;&nbsp;analysis comes in by creating a weighted average of the softmax ‚Äúconfidence‚Äù scores.</p><p>In order to apply a weighted evaluation, we need to identify sets of classes that deserve adjustments to the score. Here is where I create a list of ‚Äúcommonly confused‚Äù classes.</p><h2><strong>Commonly confused classes</strong></h2><p>Certain animals at our zoo can easily be mistaken. For example, African elephants and Asian elephants have different ear shapes. If your model gets these two mixed up, that is not as bad as guessing a giraffe! So perhaps you give partial credit here. You and your subject matter experts (SMEs) can come up with a list of these pairs and a weighted adjustment for each.</p><p>This weight can be factored into a modified cross-entropy loss function in the equation below. The back half of this equation will reduce the impact of being wrong for specific pairs of ground truth and prediction by using the ‚Äúweight‚Äù function as a lookup. By default, the weighted adjustment would be 1 for all pairings, and the commonly confused classes would get something like 0.5.</p><p>In other words, it‚Äôs better to be unsure (have a&nbsp;&nbsp;confidence score) when you are wrong, compared to being super confident and wrong.</p><p>Once this weighted log loss is calculated, I can compare to previous training runs to see if the new model is ready for production.</p><h2><strong>Confidence threshold report</strong></h2><p>Another valuable measure that incorporates the confidence threshold (in my example, 95) is to report on accuracy and false positive rates. Recall that when we apply the confidence threshold before presenting results, we help reduce false positives from being shown to the end user.</p><p>In this table, we look at the breakdown of ‚Äútrue positive above 95‚Äù for each data set. We get a sense that when a ‚Äúgood‚Äù picture comes through (like the ones from our train-validation-test set) it is very likely to surpass the threshold, thus the user is ‚Äúhappy‚Äù with the outcome. Conversely, the ‚Äúfalse positive above 95‚Äù is extremely low for good pictures, thus only a small number of our users will be ‚Äúsad‚Äù about the results.</p><p>We expect the train-validation-test set results to be exceptional since our data is curated. So, as long as people take ‚Äúgood‚Äù pictures, the model should do very well. But to get a sense of how it does on extreme situations, let‚Äôs take a look at our benchmarks.</p><p>The ‚Äúdifficult‚Äù benchmark has more modest true positive and false positive rates, which reflects the fact that the images are more challenging. These values are much easier to compare across training runs, so that lets me set a min/max target. So for example, if I target a minimum of 80% for true positive, and maximum of 5% for false positive on this benchmark, then I can feel confident moving this to production.</p><p>The ‚Äúout-of-scope‚Äù benchmark has no true positive rate because&nbsp;&nbsp;of the images belong to any class the model can identify. Remember, we picked things like a bag of popcorn, etc., that are not zoo animals, so there cannot be any true positives. But we do get a false positive rate, which means the model gave a confident score to that bag of popcorn as some animal. And if we set a target maximum of 10% for this benchmark, then we may not want to move it to production.</p><p>Right now, you may be thinking, ‚ÄúWell, what animal did it pick for the bag of popcorn?‚Äù Excellent question! Now you understand the importance of doing a manual review of the images that get bad results.</p><h2><strong>Evaluation of the deployed model</strong></h2><p>The evaluation that I described above applies to a model immediately after&nbsp;. Now, you want to evaluate how your model is doing in the&nbsp;. The process is similar, but requires you to shift to a ‚Äú‚Äù and asking yourself, ‚ÄúDid the model get this correct?‚Äù and ‚ÄúShould it have gotten this correct?‚Äù and ‚ÄúDid we tell the user the right thing?‚Äù</p><p>So, imagine that you are logging in for the morning ‚Äî after sipping on your&nbsp;<a href=\"https://medium.com/@dmartin0409/cold-brew-coffee-0aabd53a1f3e\">cold brew coffee</a>, of course ‚Äî and are presented with 500 images that your zoo guests took yesterday of different animals. Your job is to determine how satisfied the guests were using your model to identify the zoo animals.</p><p>Using the softmax ‚Äúconfidence‚Äù score for each image, we have a threshold before presenting results. Above the threshold, we tell the guest what the model predicted. I‚Äôll call this the ‚Äúhappy path‚Äù. And below the threshold is the ‚Äúsad path‚Äù where we ask them to try again.</p><p>Your review interface will first show you all the ‚Äúhappy path‚Äù images one at a time. This is where you ask yourself, ‚ÄúDid we get this right?‚Äù Hopefully, yes!</p><p>But if not, this is where things get tricky. So now you have to ask, ‚ÄúWhy not?‚Äù Here are some things that it could be:</p><ul><li>‚ÄúBad‚Äù picture ‚Äî Poor lighting, bad angle, zoomed out, etc ‚Äî refer to your labelling standards.</li><li>Out-of-scope ‚Äî It‚Äôs a zoo animal, but unfortunately one that isn‚Äôt found in&nbsp;&nbsp;zoo. Maybe it belongs to another zoo (your guest likes to travel and try out your app). Consider adding these to your data set.</li><li>Out-of-scope ‚Äî It‚Äôs not a zoo animal. It could be an animal in your zoo, but not one typically&nbsp;&nbsp;there, like a neighborhood sparrow or mallard duck. This might be a candidate to add.</li><li>Out-of-scope ‚Äî It‚Äôs something found in the zoo. A zoo usually has interesting trees and shrubs, so people might try to identify those. Another candidate to add.</li><li>Prankster ‚Äî Completely out-of-scope. Because people like to play with technology, there‚Äôs the possibility you have a prankster that took a picture of a bag of popcorn, or a soft drink cup, or even a selfie. These are hard to prevent, but hopefully get a low enough score (below the threshold) so the model did not identify it as a zoo animal. If you see enough pattern in these, consider creating a class with special handling on the front-end.</li></ul><p>After reviewing the ‚Äúhappy path‚Äù images, you move on to the ‚Äúsad path‚Äù images ‚Äî the ones that got a low confidence score and the app gave a ‚Äúsorry, try again‚Äù message. This time you ask yourself, ‚Äú&nbsp;the model have given this image a higher score?‚Äù which would have put it in the ‚Äúhappy path‚Äù. If so, then you want to ensure these images are added to the training set so next time it will do better. But most of time, the low score reflects many of the ‚Äúbad‚Äù or out-of-scope situations mentioned above.</p><p>Perhaps your model performance is suffering and it has nothing to do with your model. Maybe it is the ways you users interacting with the app. Keep an eye out of non-technical problems and share your observations with the rest of your team. For example:</p><ul><li>Are your users using the application in the ways you expected?</li><li>Are they not following the instructions?</li><li>Do the instructions need to be stated more clearly?</li><li>Is there anything you can do to improve the experience?</li></ul><h2><strong>Collect statistics and new images</strong></h2><p>Both of the manual evaluations above open a gold mine of data. So, be sure to collect these statistics and feed them into a dashboard ‚Äî your manager and your future self will thank you!</p><p>Keep track of these stats and generate reports that you and your can reference:</p><ul><li>How often the model is being called?</li><li>What times of the day, what days of the week is it used?</li><li>Are your system resources able to handle the peak load?</li><li>What classes are the most common?</li><li>After evaluation, what is the accuracy for each class?</li><li>What is the breakdown for confidence scores?</li><li>How many scores are above and below the confidence threshold?</li></ul><p>The single best thing you get from a deployed model is the additional real-world images! You can add these now images to improve coverage of your existing zoo animals. But more importantly, they provide you insight on&nbsp;&nbsp;classes to add. For example, let‚Äôs say people enjoy taking a picture of the large walrus statue at the gate. Some of these may make sense to incorporate into your data set to provide a better user experience.</p><p>Creating a new class, like the walrus statue, is not a huge effort, and it avoids the false positive responses. It would be more embarrassing to identify a walrus statue as an elephant! As for the prankster and the bag of popcorn, you can configure your front-end to quietly handle these. You might even get creative and have fun with it like, ‚ÄúThank you for visiting the food court.‚Äù</p><p>It is a good idea to double-check your image set when you suspect there may be problems with your data. I‚Äôm not suggesting a top-to-bottom check, because that would a monumental effort! Rather specific classes that you suspect could contain bad data that is degrading your model performance.</p><p>Immediately after my training run completes, I have a script that will use this new model to generate predictions for my&nbsp;&nbsp;data set. When this is complete, it will take the list of incorrect identifications, as well as the low scoring predictions, and automatically feed that list into the Double-check interface.</p><p>This interface will show, one at a time, the image in question, alongside an example image of the ground truth and an example image of what the model predicted. I can visually compare the three, side-by-side. The first thing I do is ensure the original image is a ‚Äúgood‚Äù picture, following my labelling standards. Then I check if the ground-truth label is indeed correct, or if there is something that made the model think it was the predicted label.</p><ul><li>Remove the original image if the image quality is poor.</li><li>Relabel the image if it belongs in a different class.</li></ul><p>During this manual evaluation, you might notice dozens of the same wrong prediction. Ask yourself why the model made this mistake when the images seem perfectly fine. The answer may be some incorrect labels on images in the ground truth, or even in the predicted class!</p><p>Don‚Äôt hesitate to add those classes and sub-classes back into the Double-check interface and step through them all. You may have 100‚Äì200 pictures to review, but there is a good chance that one or two of the images will stand out as being the culprit.</p><p>With a different mindset for a trained model versus a deployed model, we can now evaluate performances to decide which models are ready for production, and how well a production model is going to serve the public. This relies on a solid Double-check process and a critical eye on your data. And beyond the ‚Äúgut feel‚Äù of your model, we can rely on the benchmark scores to support us.</p><p>In&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-4-the-model/\">Part 4</a>, we kick off the training run, but there are some subtle techniques to get the most out of the process and even ways to leverage throw-away models to expand your library image data.<a href=\"https://medium.com/tag/machine-learning?source=post_page-----e4a8dbb035e0---------------------------------------\"></a></p>","contentLength":13463,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Build a dynamic, role-based AI agent using Amazon Bedrock inline agents","url":"https://aws.amazon.com/blogs/machine-learning/build-a-dynamic-role-based-ai-agent-using-amazon-bedrock-inline-agents/","date":1739480188,"author":"Ishan Singh","guid":132,"unread":true,"content":"<p>AI agents continue to gain momentum, as businesses use the power of generative AI to reinvent customer experiences and automate complex workflows. We are seeing <a href=\"https://aws.amazon.com/bedrock/agents/\" target=\"_blank\" rel=\"noopener\">Amazon Bedrock Agents</a> applied in investment research, insurance claims processing, root cause analysis, advertising campaigns, and much more. Agents use the reasoning capability of foundation models (FMs) to break down user-requested tasks into multiple steps. They use developer-provided instructions to create an orchestration plan and carry out that plan by securely invoking company APIs and accessing knowledge bases using Retrieval Augmented Generation (RAG) to accurately handle the user‚Äôs request.</p><p>Although organizations see the benefit of agents that are defined, configured, and tested as managed resources, we have increasingly seen the need for an additional, more dynamic way to invoke agents. Organizations need solutions that adjust on the fly‚Äîwhether to test new approaches, respond to changing business rules, or customize solutions for different clients. This is where the new <a href=\"https://docs.aws.amazon.com/bedrock/latest/userguide/agents-create-inline.html\" target=\"_blank\" rel=\"noopener\">inline agents</a> capability in Amazon Bedrock Agents becomes transformative. It allows you to dynamically adjust your agent‚Äôs behavior at runtime by changing its instructions, tools, guardrails, knowledge bases, prompts, and even the FMs it uses‚Äîall without redeploying your application.</p><p>In this post, we explore how to build an application using Amazon Bedrock inline agents, demonstrating how a single AI assistant can adapt its capabilities dynamically based on user roles.</p><h2>Inline agents in Amazon Bedrock Agents</h2><p>This runtime flexibility enabled by inline agents opens powerful new possibilities, such as:</p><ul><li> ‚Äì Inline agents minimize the time-consuming create/update/prepare cycles traditionally required for agent configuration changes. Developers can instantly test different combinations of models, tools, and knowledge bases, dramatically accelerating the development process.</li><li><strong>A/B testing and experimentation</strong> ‚Äì Data science teams can systematically evaluate different model-tool combinations, measure performance metrics, and analyze response patterns in controlled environments. This empirical approach enables quantitative comparison of configurations before production deployment.</li><li><strong>Subscription-based personalization</strong> ‚Äì Software companies can adapt features based on each customer‚Äôs subscription level, providing more advanced tools for premium users.</li><li><strong>Persona-based data source integration</strong> ‚Äì Institutions can adjust content complexity and tone based on the user‚Äôs profile, providing persona-appropriate explanations and resources by changing the knowledge bases associated to the agent on the fly.</li><li> ‚Äì Developers can create applications with hundreds of APIs, and quickly and accurately carry out tasks by dynamically choosing a small subset of APIs for the agent to consider for a given request. This is particularly helpful for large software as a service (SaaS) platforms needing multi-tenant scaling.</li></ul><p>Inline agents expand your options for building and deploying agentic solutions with Amazon Bedrock Agents. For workloads needing managed and versioned agent resources with a pre-determined and tested configuration (specific model, instructions, tools, and so on), developers can continue to use InvokeAgent on resources created with CreateAgent. For workloads that need dynamic runtime behavior changes for each agent invocation, you can use the new <a href=\"https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeInlineAgent.html\" target=\"_blank\" rel=\"noopener\">InvokeInlineAgent API</a>. With either approach, your agents will be secure and scalable, with configurable guardrails, a flexible set of model inference options, native access to knowledge bases, code interpretation, session memory, and more.</p><p>Our HR assistant example shows how to build a single AI assistant that adapts to different user roles using the new inline agent capabilities in Amazon Bedrock Agents. When users interact with the assistant, the assistant dynamically configures agent capabilities (such as model, instructions, knowledge bases, action groups, and guardrails) based on the user‚Äôs role and their specific selections. This approach creates a flexible system that adjusts its functionality in real time, making it more efficient than creating separate agents for each user role or tool combination. The complete code for this HR assistant example is available on our <a href=\"https://github.com/awslabs/amazon-bedrock-agent-samples/tree/main/examples/agents_ux/inline-agent-hr-assistant\" target=\"_blank\" rel=\"noopener\">GitHub repo</a>.</p><p>This dynamic tool selection enables a personalized experience. When an employee logs in without direct reports, they see a set of tools that they have access to based on their role. They can select from options like requesting vacation time, checking company policies using the knowledge base, using a code interpreter for data analysis, or submitting expense reports. The inline agent assistant is then configured with only these selected tools, allowing it to assist the employee with their chosen tasks. In a real-world example, the user would not need to make the selection, because the application would make that decision and automatically configure the agent invocation at runtime. We make it explicit in this application so that you can demonstrate the impact.</p><p>Similarly, when a manager logs in to the same system, they see an extended set of tools reflecting their additional permissions. In addition to the employee-level tools, managers have access to capabilities like running performance reviews. They can select which tools they want to use for their current session, instantly configuring the inline agent with their choices.</p><p>The inclusion of knowledge bases is also adjusted based on the user‚Äôs role. Employees and managers see different levels of company policy information, with managers getting additional access to confidential data like performance review and compensation details. For this demo, we‚Äôve implemented <a href=\"https://aws.amazon.com/blogs/machine-learning/amazon-bedrock-knowledge-bases-now-supports-metadata-filtering-to-improve-retrieval-accuracy/\" target=\"_blank\" rel=\"noopener\">metadata filtering</a> to retrieve only the appropriate level of documents based on the user‚Äôs access level, further enhancing efficiency and security.</p><p>Let‚Äôs look at how the interface adapts to different user roles.</p><p>The employee view provides access to essential HR functions like vacation requests, expense submissions, and company policy lookups. Users can select which of these tools they want to use for their current session.</p><p>The manager view extends these options to include supervisory functions like compensation management, demonstrating how the inline agent can be configured with a broader set of tools based on user permissions.</p><p>The manager view extends these capabilities to include supervisory functions like compensation management, demonstrating how the inline agent dynamically adjusts its available tools based on user permissions. Without inline agents, we would need to build and maintain two separate agents.</p><p>As shown in the preceding screenshots, the same HR assistant offers different tool selections based on the user‚Äôs role. An employee sees options like Knowledge Base, Apply Vacation Tool, and Submit Expense, whereas a manager has additional options like Performance Evaluation. Users can select which tools they want to add to the agent for their current interaction.</p><p>This flexibility allows for quick adaptation to user needs and preferences. For instance, if the company introduces a new policy for creating business travel requests, the tool catalog can be quickly updated to include a Create Business Travel Reservation tool. Employees can then choose to add this new tool to their agent configuration when they need to plan a business trip, or the application could automatically do so based on their role.</p><p>With Amazon Bedrock inline agents, you can create a catalog of actions that is dynamically selected by the application or by users of the application. This increases the level of flexibility and adaptability of your solutions, making them a perfect fit for navigating the complex, ever-changing landscape of modern business operations. Users have more control over their AI assistant‚Äôs capabilities, and the system remains efficient by only loading the necessary tools for each interaction.</p><h2>Technical foundation: Dynamic configuration and action selection</h2><p>Inline agents allow dynamic configuration at runtime, enabling a single agent to effectively perform the work of many. By specifying action groups and modifying instructions on the fly, even within the same session, you can create versatile AI applications that adapt to various scenarios without multiple agent deployments.</p><p>The following are key points about inline agents:</p><ul><li> ‚Äì Change the agent‚Äôs configuration, including its FM, at runtime. This enables rapid experimentation and adaptation without redeploying the application, reducing development cycles.</li><li> ‚Äì Apply governance and access control at the tool level. With agents changing dynamically at runtime, tool-level governance helps maintain security and compliance regardless of the agent‚Äôs configuration.</li><li> ‚Äì Provide only necessary tools and instructions at runtime to reduce token usage and improve the agent accuracy. With fewer tools to choose from, it‚Äôs less complicated for the agent to select the right one, reducing hallucinations in the tool selection process. This approach can also lead to lower costs and improved latency compared to static agents because removing unnecessary tools, knowledge bases, and instructions reduces the number of input and output tokens being processed by the agent‚Äôs large language model (LLM).</li><li> ‚Äì Create reusable actions for dynamic selection based on specific needs. This modular approach simplifies maintenance, updates, and scalability of your AI applications.</li></ul><p>The following are examples of reusable actions:</p><ul><li><strong>Enterprise system integration</strong> ‚Äì Connect with systems like Salesforce, GitHub, or databases</li><li> ‚Äì Perform common tasks such as sending emails or managing calendars</li><li> ‚Äì Interact with specialized internal tools and services</li><li> ‚Äì Analyze text, structured data, or other information</li><li> ‚Äì Fetch weather updates, stock prices, or perform web searches</li><li> ‚Äì Use specific machine learning (ML) models for targeted tasks</li></ul><p>When using inline agents, you configure parameters for the following:</p><ul><li>Contextual tool selection based on user intent or conversation flow</li><li>Adaptation to different user roles and permissions</li><li>Switching between communication styles or personas</li><li>Model selection based on task complexity</li></ul><p>The inline agent uses the configuration you provide at runtime, allowing for highly flexible AI assistants that efficiently handle various tasks across different business contexts.</p><h2>Building an HR assistant using inline agents</h2><p>Let‚Äôs look at how we built our HR Assistant using Amazon Bedrock inline agents:</p><ol><li> ‚Äì We developed a demo catalog of HR-related tools, including: \n  <ul type=\"a\"><li> ‚Äì Using <a href=\"https://aws.amazon.com/bedrock/knowledge-bases/\" target=\"_blank\" rel=\"noopener\">Amazon Bedrock Knowledge Bases</a> for accessing company policies and guidelines based on the role of the application user. In order to filter the knowledge base content based on the user‚Äôs role, you also need to provide a metadata file specifying the type of employee‚Äôs roles that can access each file</li><li>‚Äì For requesting and tracking time off.</li><li>‚Äì For submitting and managing expense reports.</li><li> ‚Äì For performing calculations and data analysis.</li><li>‚Äì for conducting and reviewing employee compensation assessments (manager only access).</li></ul></li><li> ‚Äì We defined multiple conversation tones to suit different interaction styles: \n  <ul><li> ‚Äì For formal, business-like interactions.</li><li> ‚Äì For friendly, everyday support.</li><li> ‚Äì For upbeat, encouraging assistance.</li></ul></li><li> ‚Äì We implemented role-based access control. The application backend checks the user‚Äôs role (employee or manager) and provides access to appropriate tools and information and passes this information to the inline agent. The role information is also used to configure metadata filtering in the knowledge bases to generate relevant responses. The system allows for dynamic tool use at runtime. Users can switch personas or add and remove tools during their session, allowing the agent to adapt to different conversation needs in real time.</li><li><strong>Integrate the agent with other services and tools</strong> ‚Äì We connected the inline agent to: \n  <ul><li>Amazon Bedrock Knowledge Bases for company policies, with metadata filtering for role-based access.</li><li><a href=\"http://aws.amazon.com/lambda\" target=\"_blank\" rel=\"noopener\">AWS Lambda</a> functions for executing specific actions (such as submitting vacation requests or expense reports).</li><li>A code interpreter tool for performing calculations and data analysis.</li></ul></li><li> ‚Äì We created a Flask-based UI that performs the following actions: \n  <ul><li>Displays available tools based on the user‚Äôs role.</li><li>Allows users to select different personas.</li><li>Provides a chat window for interacting with the HR assistant.</li></ul></li></ol><p>To understand how this dynamic role-based functionality works under the hood, let‚Äôs examine the following system architecture diagram.</p><p>As shown in preceding architecture diagram, the system works as follows:</p><ol><li>The end-user logs in and is identified as either a manager or an employee.</li><li>The user selects the tools that they have access to and makes a request to the HR assistant.</li><li>The agent breaks down the problems and uses the available tools to solve for the query in steps, which may include: \n  <ol><li>Amazon Bedrock Knowledge Bases (with metadata filtering for role-based access).</li><li>Lambda functions for specific actions.</li><li>Code interpreter tool for calculations.</li><li>Compensation tool (accessible only to managers to submit base pay raise requests).</li></ol></li><li>The application uses the Amazon Bedrock inline agent to dynamically pass in the appropriate tools based on the user‚Äôs role and request.</li><li>The agent uses the selected tools to process the request and provide a response to the user.</li></ol><p>This approach provides a flexible, scalable solution that can quickly adapt to different user roles and changing business needs.</p><p>In this post, we introduced the Amazon Bedrock inline agent functionality and highlighted its application to an HR use case. We dynamically selected tools based on the user‚Äôs roles and permissions, adapted instructions to set a conversation tone, and selected different models at runtime. With inline agents, you can transform how you build and deploy AI assistants. By dynamically adapting tools, instructions, and models at runtime, you can:</p><ul><li>Create personalized experiences for different user roles</li><li>Optimize costs by matching model capabilities to task complexity</li><li>Streamline development and maintenance</li><li>Scale efficiently without managing multiple agent configurations</li></ul><p>For organizations demanding highly dynamic behavior‚Äîwhether you‚Äôre an AI startup, SaaS provider, or enterprise solution team‚Äîinline agents offer a scalable approach to building intelligent assistants that grow with your needs. To get started, explore our <a href=\"https://github.com/aws-samples/amazon-bedrock-samples/blob/main/agents-and-function-calling/bedrock-agents/features-examples/15-invoke-inline-agents/inline-agent-api-usage.ipynb\" target=\"_blank\" rel=\"noopener\">GitHub repo</a> and <a href=\"https://github.com/awslabs/amazon-bedrock-agent-samples/tree/main/examples/agents_ux/inline-agent-hr-assistant\" target=\"_blank\" rel=\"noopener\">HR assistant demo application</a>, which demonstrate key implementation patterns and best practices.</p><p>To learn more about how to be most successful in your agent journey, read our two-part blog series:</p><p>To get started with Amazon Bedrock Agents, check out the following <a href=\"https://github.com/awslabs/amazon-bedrock-agent-samples/\" target=\"_blank\" rel=\"noopener\">GitHub repository</a> with example code.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/10/blog-image-ishansin-1.jpeg\" alt=\"\" width=\"100\" height=\"133\">&nbsp;is a Generative AI Data Scientist at Amazon Web Services, where he helps customers build innovative and responsible generative AI solutions and products. With a strong background in AI/ML, Ishan specializes in building Generative AI solutions that drive business value. Outside of work, he enjoys playing volleyball, exploring local bike trails, and spending time with his wife and dog, Beau.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/10/mttanke-225x300-1-1.jpg\" alt=\"\" width=\"100\" height=\"133\">&nbsp;is a Senior Generative AI Data Scientist at AWS. With a background in machine learning, she has over 10 years of experience architecting and building AI applications with customers across industries. As a technical lead, she helps customers accelerate their achievement of business value through generative AI solutions on Amazon Bedrock. In her free time, Maira enjoys traveling, playing with her cat, and spending time with her family someplace warm.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/10/roymark-225x300-1-1.jpg\" alt=\"\" width=\"100\" height=\"133\"> is a Principal Machine Learning Architect for AWS, helping customers design and build generative AI solutions. His focus since early 2023 has been leading solution architecture efforts for the launch of Amazon Bedrock, the flagship generative AI offering from AWS for builders. Mark‚Äôs work covers a wide range of use cases, with a primary interest in generative AI, agents, and scaling ML across the enterprise. He has helped companies in insurance, financial services, media and entertainment, healthcare, utilities, and manufacturing. Prior to joining AWS, Mark was an architect, developer, and technology leader for over 25 years, including 19 years in financial services. Mark holds six AWS certifications, including the ML Specialty Certification.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/10/enitin.jpeg\" alt=\"\" width=\"100\" height=\"133\"> is a Sr. Enterprise Solutions Architect at AWS, experienced in Software Engineering, Enterprise Architecture, and AI/ML. He is deeply passionate about exploring the possibilities of generative AI. He collaborates with customers to help them build well-architected applications on the AWS platform, and is dedicated to solving technology challenges and assisting with their cloud journey.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/10/Image-from-iOS-244x300-1.jpg\" alt=\"\" width=\"100\" height=\"123\"> is a Software Development Engineer at Amazon Web Services (AWS). He specializes in backend system design, distributed architectures, and scalable solutions, contributing to the development and launch of high-impact systems at Amazon. Outside of work, he spends his time playing ping pong and hiking through Cascade trails, enjoying the outdoors as much as he enjoys building systems.</p><p> is a Software Development Engineer at Amazon Web Services (AWS), working in Agents for Amazon Bedrock. He focuses on developing scalable systems on the cloud that enable AI applications frameworks and orchestrations. Shubham also has a background in building distributed, scalable, high-volume-high-throughput systems in IoT architectures.</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2018/09/18/vivekbh-100.jpg\" alt=\"\" width=\"100\" height=\"134\"> is a Principal Engineer for Amazon Bedrock.&nbsp;He focuses on building deep learning-based AI and computer vision solutions for AWS customers. Oustide of work, Vivek enjoys trekking and following cricket.</p>","contentLength":17760,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Learnings from a Machine Learning Engineer ‚Äî Part 1: The Data","url":"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-1-the-data/","date":1739480153,"author":"David Martin","guid":4,"unread":true,"content":"<p>It is said that in order for a machine learning model to be successful, you need to have good data. While this is true (and pretty much obvious), it is extremely difficult to define, build, and sustain good data. Let me share with you the unique processes that I have learned over several years building an ever-growing image classification system and how you can apply these techniques to your own application.</p><p>With persistence and diligence, you can avoid the classic ‚Äúgarbage in, garbage out‚Äù, maximize your model accuracy, and demonstrate real business value.</p><p>In this series of articles, I will dive into the care and feeding of a multi-class, single-label image classification app and what it takes to reach the highest level of performance. I won‚Äôt get into any coding or specific user interfaces, just the main concepts that you can incorporate to suit your needs with the tools at your disposal.</p><p>Here is a brief description of the articles. You will notice that the model is last on the list since we need to focus on curating the data first and foremost:</p><p>Over the past six years, I have been primarily focused on building and maintaining an image classification application for a manufacturing company. Back when I started, most of the software did not exist or was too expensive, so I created these from scratch. In this time, I have deployed two identifier applications, the largest handles 1,500 classes and achieves 97‚Äì98% accuracy.</p><p>It was about eight years ago that I started online studies for <a href=\"https://towardsdatascience.com/tag/data-science/\" title=\"Data Science\">Data Science</a> and machine learning. So, when the exciting opportunity to create an AI application presented itself, I was prepared to build the tools I needed to leverage the latest advancements. I jumped in with both feet!</p><p>I quickly found that building and deploying a model is probably the easiest part of the job. Feeding high quality data into the model is the best way to improve performance, and that requires focus and patience. Attention to detail is what I do best, so this was a perfect fit.</p><h2><strong>It all starts with the data</strong></h2><p>I feel that so much attention is given to the model selection (deciding which neural network is best) and that the data is just an afterthought. I have found the hard way that even one or two pieces of bad data can significantly impact model performance, so that is where we need to focus.</p><p>For example, let‚Äôs say you train the classic cat versus dog image classifier. You have 50 pictures of cats and 50 pictures of dogs, however one of the ‚Äúcats‚Äù is clearly (objectively) a picture of a dog. The computer doesn‚Äôt have the luxury of ignoring the mislabelled image, and instead adjusts the model weights to make it fit. Square peg meets round hole.</p><p>Another example would be a picture of a cat that climbed up into a tree. But when you take a wholistic view of it, you would describe it as a picture of a tree (first) with a cat (second). Again, the computer doesn‚Äôt know to ignore the big tree and focus on the cat ‚Äî it will start to identify trees as cats, even if there is a dog. You can think of these pictures as outliers and should be removed.</p><p>It doesn‚Äôt matter if you have the best neural network in the world, you can count on the model making poor predictions when it is trained on ‚Äúbad‚Äù data. I‚Äôve learned that any time I see the model make mistakes, it‚Äôs time to review the data.</p><h2><strong>Example Application ‚Äî Zoo animals</strong></h2><p>For the rest of this write-up, I will use an example of identifying zoo animals. Let‚Äôs assume your goal is to create a mobile app where guests at the zoo can take pictures of the animals they see and have the app identify them. Specifically, this is a multi-class, single-label application.</p><ul><li>&nbsp;‚Äî There are a lot of different animals at the zoo and many of them look very similar.</li><li>&nbsp;‚Äî Guests using the app don‚Äôt always take good pictures (zoomed out, blurry, too dark), so we don‚Äôt want to provide an answer if the image is poor.</li><li>&nbsp;‚Äî The zoo keeps expanding and adding new species all the time.</li><li>&nbsp;‚Äî Occasionally you might find that people take pictures of the sparrows near the food court grabbing some dropped popcorn.</li><li>&nbsp;‚Äî Just for fun, guests may take a picture of the bag of popcorn just to see what it comes back with.</li></ul><p>These are all real challenges ‚Äî being able to tell the subtle differences between animals, handling out-of-scope cases, and just plain poor images.</p><p>Before we get there, let‚Äôs start from the beginning.</p><p>There are a lot of tools these days to help you with this part of the process, but the challenge remains the same ‚Äî collecting, labelling, and curating the data.</p><p>Having data to collect is challenge #1. Without images, you have nothing to train. You may need to get creative on sourcing the data, or even creating synthetic data. More on that later.</p><p>A quick note about image pre-processing. I convert all my images to the input size of my neural network and save them as PNG. Inside this square PNG, I preserve the aspect ratio of the original picture and fill the background black. I don‚Äôt stretch the image nor crop any features out. This also helps center the subject.</p><p>Challenge #2 is to establish standards for data quality‚Ä¶and ensure that these standards are followed! These standards will guide you toward that ‚Äúgood‚Äù data. And this assumes, of course, correct labels. Having both is much easier said than done!</p><p>I hope to show how ‚Äúgood‚Äù and ‚Äúcorrect‚Äù actually go hand-in-hand, and how important it is to apply these standards to every image.</p><p>First, I want to point out that the image data discussed here is for the training set. What qualifies as a good image for&nbsp;&nbsp;is a bit different than what qualifies as a good image for&nbsp;. More on that in <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/\">Part 3</a>.</p><p>So, what is ‚Äúgood‚Äù data when talking about images? ‚ÄúA picture is worth a thousand words‚Äù, and if the&nbsp;&nbsp;you use to describe the picture do not include the subject you are trying to label, then it is not good and you need remove it from your training set.</p><p>For example, let‚Äôs say you are shown a picture of a zebra and (removing bias toward your application) you describe it as an ‚Äúopen field with a zebra in the distance‚Äù. In other words, if ‚Äúopen field‚Äù is the first thing you notice, then you likely do&nbsp;&nbsp;want to use that image. The opposite is also true ‚Äî if the picture is way too close, you would described it as ‚Äúzebra pattern‚Äù.</p><p>What you want is a description like, ‚Äúa zebra, front and center‚Äù. This would have your subject taking up about 80‚Äì90% of the total frame. Sometimes I will take the time to crop the original image so the subject is framed properly.</p><p>Keep in mind the use of image augmentation at the time of training. Having that buffer around the edges will allow ‚Äúzoom in‚Äù augmentation. And ‚Äúzoom out‚Äù augmentation will simulate smaller subjects, so don‚Äôt start out less than 50% of the total frame for your subject since you lose detail.</p><p>Another aspect of a ‚Äúgood‚Äù image relates to the label. If you can only see the back side of your zoo animal, can you really tell, for example, that it is a cheetah versus a leopard? The key identifying features need to be visible. If a human struggles to identify it, you can‚Äôt expect the computer to learn anything.</p><p>What does a ‚Äúbad‚Äù image look like? Here is what I frequently watch out for:</p><ul><li>Wide angle lens stretching</li><li>High contrast or dark shadows</li><li>‚ÄúDoctored‚Äù images, drawn lines and arrows</li><li>‚ÄúUnusual‚Äù angles or situations</li><li>Picture of a mobile device that has a picture of your subject</li></ul><p>If you have a team of subject matter experts (SMEs) on hand to label the images, you are in a good starting position. Animal trainers at the zoo know the various species, and can spot the differences between, for example, a chimpanzee and a bonobo.</p><p>To a <a href=\"https://towardsdatascience.com/tag/machine-learning-engineer/\" title=\"Machine Learning Engineer\">Machine Learning Engineer</a>, it is easy for you to assume all labels from your SMEs are correct and move right on to training the model. However, even experts make mistakes, so if you can get a second opinion on the labels, your error rate should go down.</p><p>In reality, it can be prohibitively expensive to get one, let alone two, subject matter experts to review image labels. The SME usually has years of experience that make them more valuable to the business in other areas of work. My experience is that the machine learning engineer (that‚Äôs you and me) becomes the second opinion, and often the first opinion as well.</p><p>Over time, you can become pretty adept at labelling, but certainly not an SME. If you do have the luxury of access to an expert, explain to them the labelling standards and how these are required for the application to be successful. Emphasize ‚Äúquality over quantity‚Äù.</p><p>It goes without saying that having a&nbsp;&nbsp;label is so important. However, all it takes is one or two mislabelled images to degrade performance. These can easily slip into your data set with careless or hasty labelling. So, take the time to get it right.</p><p>Ultimately, we as the ML engineer are responsible for model performance. So, if we take the approach of only working on model training and deployment, we will find ourselves wondering why performance is falling short.</p><p>A lot of times, you will come across a really good picture of a very interesting subject, but have no idea what it is! It would be a shame to simply dispose of it. What you can do is assign it a generic label, like ‚ÄúUnknown Bird‚Äù or ‚ÄúRandom Plant‚Äù that are&nbsp;&nbsp;included in your training set. Later in <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-4-the-model/\">Part 4</a>, you‚Äôll see how to come back to these images at a later date when you have a better idea what they are, and you‚Äôll be glad you saved them.</p><p>If you have done any image labelling, then you know how time consuming and difficult it can be. But this is where having a model, even a less-than-perfect model, can help you.</p><p>Typically, you have a large collection of unlabelled image and you need to go through them one at a time to assign labels. Simply having the model offer a best guess and display the top 3 results lets you step through each image in a matter of seconds!</p><p>Even if the top 3 results are wrong, this can help you narrow down your search. Over time, newer models will get better, and the labelling process can even be somewhat fun!</p><p>In <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-4-the-model/\">Part 4</a>, I will show how you can bulk identify images and take this to the next level for faster labelling.</p><p>I mentioned the example above of two species that look very similar, the chimpanzee and the bonobo. When you start out building your data set, you may have very sparse coverage of one or both of these species. In machine learning terms, we these ‚Äúclasses‚Äù. One option is to roll with what you have and hope that the model picks up on the differences with only a handful of example images.</p><p>The option that I have used is to merge two or more classes into one, at least temporarily. So, in this case I would create a class called ‚Äúchimp-bonobo‚Äù, which is composed of the limited example pictures of chimpanzee and bonobo species classes. Combined, these may give me enough to train the model on ‚Äúchimp-bonobo‚Äù, with the trade-off that it‚Äôs a more generic identification.</p><p>Sub-classes can even be normal variations. For example,&nbsp;&nbsp;pink flamingos are grey instead of pink. Or, male and female orangutans have distinct facial features. You wan to have a fairly balanced number of images for these normal variations, and keeping sub-classes will allow you to accomplish this.</p><p>Don‚Äôt be concerned that you are merging completely different looking classes ‚Äî the neural network does a nice job of applying the ‚ÄúOR‚Äù operator. This works both ways ‚Äî it can help you identify male or female variations as one species, but it can hurt you when ‚Äúbad‚Äù outlier images sneak in like the example ‚Äúopen field with a zebra in the distance.‚Äù</p><p>Over time, you will (hopefully) be able to collect more images of the sub-classes and then be able to successfully split them apart (if necessary) and train the model to identify them separately. This process has worked very well for me. Just be sure to double-check all the images when you split them to ensure the labels didn‚Äôt get accidentally mixed up ‚Äî it will be time well spent.</p><p>All of this certainly depends on your user requirements, and you can handle this in different ways either by creating a unique class label like ‚Äúchimp-bonobo‚Äù, or at the front-end presentation layer where you notify the user that you have intentionally merged these classes and provide guidance on further refining the results. Even after you decide to split the two classes, you may want to caution the user that the model could be wrong since the two classes are so similar.</p><p>I realize this was a long write-up for something that on the surface seems intuitive, but these are all areas that I have tripped me up in the past because I didn‚Äôt give them enough attention. Once you have a solid understanding of these principles, you can go on to build a successful application.</p><p>In&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-2-the-data-sets/\">Part 2</a>, we will take the curated data we collected here to create the classic data sets, with a custom benchmark set that will further enhance your data. Then we will see how best to evaluate our trained model using a specific ‚Äútraining mindset‚Äù, and switch to a ‚Äúproduction mindset‚Äù when evaluating a deployed model.</p>","contentLength":13198,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Learnings from a Machine Learning Engineer ‚Äî Part 4: The Model","url":"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-4-the-model/","date":1739480022,"author":"David Martin","guid":3,"unread":true,"content":"<p>In this latest part of my series, I will share what I have learned on selecting a model for <a href=\"https://towardsdatascience.com/tag/image-classification/\" title=\"Image Classification\">Image Classification</a> and how to fine tune that model. I will also show how you can leverage the model to accelerate your labelling process, and finally how to justify your efforts by generating usage and performance statistics.</p><p>In&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-1-the-data/\">Part 1</a>, I discussed the process of labelling your image data that you use in your image classification project. I showed how define ‚Äúgood‚Äù images and create sub-classes. In&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-2-the-data-sets/\">Part 2</a>, I went over various data sets, beyond the usual train-validation-test sets, with benchmark sets, plus how to handle synthetic data and duplicate images. In <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/\">Part 3</a>, I explained how to apply different evaluation criteria to a trained model versus a deployed model, and using benchmarks to determine when to deploy a model.</p><p>So far I have focused a lot of time on labelling and curating the set of images, and also evaluating model performance, which is like putting the cart before the horse. I‚Äôm not trying to minimize what it takes to design a massive neural network ‚Äî this is a very important part of the application you are building. In my case, I spent a few weeks experimenting with different available models before settling on one that fit the bill.</p><p>Once you pick a model structure, you usually don‚Äôt make any major changes to it. For me, six years into deployment, I‚Äôm still using the same one. Specifically, I chose Inception V4 because it has a large input image size and an adequate number of layers to pick up on subtle image features. It also performs inference fast enough on CPU, so I don‚Äôt need to run expensive hardware to serve the model.</p><p>Your mileage may vary. But again, the main takeaway is that focusing on your data will pay dividends versus searching for the best model.</p><p>I will share a process that I found to work extremely well. Once I decided on the model to use, I randomly initialized the weights and let the model train for about 120 epoch before improvements plateau at a fairly modest accuracy, like 93%. At this point, I performed the evaluation of the trained model (see <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/\">Part 3</a>) to clean up the data set. I also incorporated new images as part of the data pipeline (see <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-1-the-data/\">Part 1</a>) and prepared the data sets for the next training run.</p><p>Before starting the next training run, I simply take the last trained model, pop the output layer, and add it back in with random weights. Since the number of output classes are constantly increasing in my case, I have to pop that layer anyway to account for the new number of classes. Importantly, I leave the rest of the trained weights as they were and allow them to continue updating for the new classes.</p><p>This allows the model to train much faster before improvements stall. After repeating this process dozens of times, the training reaches plateau after about 20 epochs, and the test accuracy can reach 99%! The model is building upon the low-level features that it established from the previous runs while re-learning the output weights to prevent overfitting.</p><p>It took me a while to trust this process, and for a few years I would train from scratch every time. But after I attempted this and saw the training time (not to mention the cost of cloud GPU) go down while the accuracy continued to go up, I started to embrace the process. More importantly, I continue to see the evaluation metrics of the deployed model return solid performances.</p><p>During training, you can apply transformations on your images (called ‚Äúaugmentation‚Äù) to give you more diversity from you data set. With our zoo animals, it is fairly safe to apply left-right flop, slight rotations clockwise and counterclockwise, and slight resize that will zoom in and out.</p><p>With these transformations in mind, make sure your images are still able to act as good training images. In other words, an image where the subject is already small will be even smaller with a zoom out, so you probably want to discard the original. Also, some of your original pictures may need to be re-oriented by 90 degrees to be upright since a further rotation would make them look unusual.</p><p>As I mentioned in <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-1-the-data/\">Part 1</a>, you can use the trained model to assist you in labelling images one at a time. But the way to take this even further is to have your newly trained model identify hundreds at a time while building a list of the results that you can then filter.</p><p>Typically, we have large collections of&nbsp;&nbsp;images that have come in either through regular usage of the application or some other means. Recall from <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-1-the-data/\">Part 1</a> assigning ‚Äúunknown‚Äù labels to interesting pictures but you have no clue what it is. By using the bulk identification method, we can sift through the collections quickly to target the labelling once we know what they are.</p><p>By combining your current image counts with the bulk identification results, you can target classes that need expanded coverage. Here are a few ways you can leverage bulk identification:</p><ul><li><strong>Increase low image counts</strong>&nbsp;‚Äî Some of your classes may have just barely made the cutoff to be included in the training set, which means you need more examples to improve coverage. Filter for images that have low counts.</li><li><strong>Replace staged or synthetic images</strong>&nbsp;‚Äî Some classes may be built entirely using non-real-world images. These pictures may be good enough to get started with, but may cause performance issues down the road because they look different than what typically comes through. Filter for classes that depend on staged images.</li><li>&nbsp;‚Äî A class in your data set may look like another one. For example, let‚Äôs say your model can identify an antelope, and that looks like a gazelle which your model cannot identify yet. Setting a filter for antelope and a lower confidence score may reveal gazelle images that you can label.</li><li>&nbsp;‚Äî You may not have known how to identify the dozens of cute wallaby pictures, so you saved them under ‚ÄúUnknown‚Äù because it was a good image. Now that you know what it is, you can filter for its look-alike kangaroo and quickly add a new class.</li><li><strong>Mass removal of low scores</strong>&nbsp;‚Äî As a way to clean out your large collection of unlabelled images that have nothing worth labelling, set a filter for lowest scores.</li></ul><p>Recall the decision I made to have image cutoffs from <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-2-the-data-sets/\">Part 2</a>, which allows us to ensure an adequate number of example images of a class before we train and server a model to the public. The problem is that you may have a number of classes that are&nbsp;&nbsp;below your cutoff (in my case, 40) and don‚Äôt make it into the model.</p><p>The way I approach this is with a ‚Äúthrow-away‚Äù training run that I do not intend to move to production. I will decrease the lower cutoff from 40 to perhaps 35, build my train-validation-test sets, then train and evaluate like I normally do. The most important part of this is the bulk identification at the end!</p><p>There is a chance that somewhere in the large collection of unlabelled images I will find the few that I need. Doing the bulk identification with this throw-away model helps find them.</p><p>One very important aspect of any machine learning application is being able to show usage and performance reports. Your manager will likely want to see how many times the application is being used to justify the expense, and you as the ML engineer will want to see how the latest model is performing compared to the previous one.</p><p>You should build logging into your model serving to record every transaction going through the system. Also, the manual evaluations from <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/\">Part 3</a> should be recorded so you can report on performance for such things as accuracy over time, by model version, by confidence scores, by class, etc. You will be able to detect trends and make adjustments to improve the overall solution.</p><p>There are a lot of reporting tools, so I won‚Äôt recommend one over the other. Just make sure you are collecting as much information as you can to build these dashboards. This will justify the time, effort, and cost associated with maintaining the application.</p><p>We covered a lot of ground across this four-part series on building an image classification project and deploying it in the real world. It all starts with the data, and by investing the time and effort into maintaining the highest quality image library, you can reach impressive levels of model performance that will gain the trust and confidence of your business partners.</p><p>As a <a href=\"https://towardsdatascience.com/tag/machine-learning-engineer/\" title=\"Machine Learning Engineer\">Machine Learning Engineer</a>, you are primarily responsible for building and deploying your model. But it doesn‚Äôt stop there ‚Äî dive into the data. The more familiar you are with the data, the better you will understand the strengths and weaknesses of your model. Take a close look at the evaluations and use them as an opportunity to adjust the data set.</p><p>I hope these articles have helped you find new ways to improve your own machine learning project. And by the way, don‚Äôt let the machine do all the learning ‚Äî as humans, our job is to continue our own learning, so don‚Äôt ever stop!</p><p>Thank you for taking this deep dive with me into a data-driven approach to model optimization. I look forward to your feedback and how you can apply this to your own application.<a href=\"https://medium.com/tag/machine-learning?source=post_page-----7f530bc91383---------------------------------------\"></a></p>","contentLength":9124,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Use language embeddings for zero-shot classification and semantic search with Amazon Bedrock","url":"https://aws.amazon.com/blogs/machine-learning/use-language-embeddings-for-zero-shot-classification-and-semantic-search-with-amazon-bedrock/","date":1739480012,"author":"Tom Rogers","guid":131,"unread":true,"content":"<p>In this post, we discuss what embeddings are, show how to practically use language embeddings, and explore how to use them to add functionality such as zero-shot classification and semantic search. We then use <a href=\"https://aws.amazon.com/bedrock/\" target=\"_blank\" rel=\"noopener\">Amazon Bedrock</a> and language embeddings to add these features to a <a href=\"https://en.wikipedia.org/wiki/RSS\" target=\"_blank\" rel=\"noopener\">really simple syndication (RSS)</a> aggregator application.</p><p>Amazon Bedrock is a fully managed service that makes <a href=\"https://aws.amazon.com/what-is/foundation-models/\" target=\"_blank\" rel=\"noopener\">foundation models</a> (FMs) from leading AI startups and Amazon available through an API, so you can choose from a wide range of FMs to find the model that is best suited for your use case. Amazon Bedrock offers a serverless experience, so you can get started quickly, privately customize FMs with your own data, and integrate and deploy them into your applications using <a href=\"https://aws.amazon.com/\" target=\"_blank\" rel=\"noopener\">Amazon Web Services</a> (AWS) services without having to manage infrastructure. For this post, we use the <a href=\"https://aws.amazon.com/bedrock/cohere-command-embed/\" target=\"_blank\" rel=\"noopener\">Cohere v3 Embed</a> model on Amazon Bedrock to create our language embeddings.</p><p>To demonstrate some of the possible uses of these language embeddings, we developed an RSS aggregator website. RSS is a web feed that allows publications to publish updates in a standardized, computer-readable way. On our website, users can subscribe to an RSS feed and have an aggregated, categorized list of the new articles. We use embeddings to add the following functionalities:</p><p>This post uses this application as a reference point to discuss the technical implementation of the semantic search and zero-shot classification features.</p><p>This solution uses the following services:</p><p>The following diagram illustrates the solution architecture.</p><p>This section offers a quick primer on what embeddings are and how they can be used.</p><p>Embeddings are numerical representations of concepts or objects, such as language or images. In this post, we discuss language embeddings. By reducing these concepts to numerical representations, we can then use them in a way that a computer can understand and operate on.</p><p>Let‚Äôs take Berlin and Paris as an example. As humans, we understand the conceptual links between these two words. Berlin and Paris are both cities, they‚Äôre capitals of their respective countries, and they‚Äôre both in Europe. We understand their conceptual similarities almost instinctively, because we can create a model of the world in our head. However, computers have no built-in way of representing these concepts.</p><p>To represent these concepts in a way a computer can understand, we convert them into language embeddings. Language embeddings are high dimensional vectors that learn their relationships with each other through the training of a neural network. During training, the neural network is exposed to enormous amounts of text and learns patterns based on how words are colocated and relate to each other in different contexts.</p><p>Embedding vectors allow computers to model the world from language. For instance, if we embed ‚ÄúBerlin‚Äù and ‚ÄúParis,‚Äù we can now perform mathematical operations on these embeddings. We can then observe some fairly interesting relationships. For instance, we could do the following: Paris ‚Äì France + Germany ~= Berlin. This is because the embeddings capture the relationships between the words ‚ÄúParis‚Äù and ‚ÄúFrance‚Äù and between ‚ÄúGermany‚Äù and ‚ÄúBerlin‚Äù‚Äîspecifically, that Paris and Berlin are both capital cities of their respective countries.</p><p>The following graph shows the word vector distance between countries and their respective capitals.</p><p>Subtracting ‚ÄúFrance‚Äù from ‚ÄúParis‚Äù removes the country semantics, leaving a vector representing the concept of a capital city. Adding ‚ÄúGermany‚Äù to this vector, we are left with something closely resembling ‚ÄúBerlin,‚Äù the capital of Germany. The vectors for this relationship are shown in the following graph.</p><p>For our use case, we use the pre-trained Cohere Embeddings model in Amazon Bedrock, which embeds entire texts rather than a single word. The embeddings represent the meaning of the text and can be operated on using mathematical operations. This property can be useful to map relationships such as similarity between texts.</p><p>One way in which we use language embeddings is by using their properties to calculate how similar an article is to one of the topics.</p><p>To do this, we break down a topic into a series of different and related embeddings. For instance, for culture, we have a set of embeddings for sports, TV programs, music, books, and so on. We then embed the incoming title and description of the RSS articles, and calculate the similarity against the topic embeddings. From this, we can assign topic labels to an article.</p><p>The following figure illustrates how this works. The embeddings that Cohere generates are highly dimensional, containing 1,024 values (or dimensions). However, to demonstrate how this system works, we use an algorithm designed to reduce the dimensionality of the embeddings, <a href=\"https://en.wikipedia.org/wiki/T-distributed_stochastic_neighbor_embedding\" target=\"_blank\" rel=\"noopener\">t-distributed Stochastic Neighbor Embedding (t-SNE)</a>, so that we can view them in two dimensions. The following image uses these embeddings to visualize how topics are clustered based on similarity and meaning.</p><p>You can use the embedding of an article and check the similarity of the article against the preceding embeddings. You can then say that if an article is clustered closely to one of these embeddings, it can be classified with the associated topic.</p><p>This is the <a href=\"https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm\" target=\"_blank\" rel=\"noopener\">k-nearest neighbor (k-NN) algorithm</a>. This algorithm is used to perform classification and regression tasks. In k-NN, you can make assumptions around a data point based on its proximity to other data points. For instance, you can say that an article that has proximity to the music topic shown in the preceding diagram can be tagged with the culture topic.</p><p>The following figure demonstrates this with an <a href=\"https://arstechnica.com/science/2024/07/the-climate-is-changing-so-fast-that-we-havent-seen-how-bad-extreme-weather-could-get/\" target=\"_blank\" rel=\"noopener\">ArsTechnica article</a>. We plot against the embedding of an article‚Äôs title and description: (The climate is changing so fast that we haven‚Äôt seen how bad extreme weather could get: Decades-old statistics no longer represent what is possible in the present day).</p><p>The advantage of this approach is that you can add custom, user-generated topics. You can create a topic by first creating a series of embeddings of conceptually related items. For instance, an AI topic would be similar to the embeddings for AI, Generative AI, LLM, and Anthropic, as shown in the following screenshot.</p><p>In a traditional classification system, we‚Äôd be required to train a classifier‚Äîa supervised learning task where we‚Äôd need to provide a series of examples to establish whether an article belongs to its respective topic. Doing so can be quite an intensive task, requiring labeled data and training the model. For our use case, we can provide examples, create a cluster, and tag articles without having to provide labeled examples or train additional models. This is shown in the following screenshot of results page of our website.</p><p>In our application, we ingest new articles on a schedule. We use EventBridge schedules to periodically call a Lambda function, which checks if there are new articles. If there are, it creates an embedding from them using Amazon Bedrock and Cohere.</p><p>We calculate the article‚Äôs distance to the different topic embeddings, and can then determine whether the article belongs to that category. This is done with Aurora PostgreSQL with pgvector. We store the embeddings of the topics and then calculate their distance using the following SQL query:</p><div><pre><code>const topics = await sqlClient.then(it=&gt; it.query(\n    `SELECT name, embedding_description, similarity\n     FROM (SELECT topic_id as name, embedding_description, (1- ABS( 1 ‚Äì(embed.embedding &lt;-&gt; $1))) AS \"similarity\" FROM topic_embedding_link embed)  topics\n     ORDER BY similarity desc`,\n    [toSql(articleEmbedding)]\n  ))\n</code></pre></div><p>The &lt;-&gt; operator in the preceding code calculates the Euclidean distance between the article and the topic embedding. This number allows us to understand how close an article is to one of the topics. We can then determine the appropriateness of a topic based on this ranking.</p><p>We then tag the article with the topic. We do this so that the subsequent request for a topic is as computationally as light as possible; we do a simple join rather than calculating the Euclidean distance.</p><div><div><pre><code>const formattedTopicInsert = pgformat(\n    `INSERT INTO feed_article_topic_link(topic_id, feed_article_id) VALUES %L ON CONFLICT DO NOTHING`,\n    topicLinks\n  )</code></pre></div></div><p>We also cache a specific topic/feed combination because these are calculated hourly and aren‚Äôt expected to change in the interim.</p><p>As previously discussed, the embeddings produced by Cohere contain a multitude of features; they embed the meanings and semantics of a word of phrase. We‚Äôve also found that we can perform mathematical operations on these embeddings to do things such as calculate the similarity between two phrases or words.</p><p>We can use these embeddings and calculate the similarity between a search term and an embedding of an article with the k-NN algorithm to find articles that have similar semantics and meanings to the search term we‚Äôve provided.</p><p>For example, in one of our RSS feeds, we have a lot of different articles that rate products. In a traditional search system, we‚Äôd rely on keyword matches to provide relevant results. Although it might be simple to find a specific article (for example, by searching ‚Äúbest digital notebooks‚Äù), we would need a different method to capture multiple product list articles.</p><p>In a semantic search system, we first transform the term ‚ÄúProduct list‚Äù in an embedding. We can then use the properties of this embedding to perform a search within our embedding space. Using the k-NN algorithm, we can find articles that are semantically similar. As shown in the following screenshot, despite not containing the text ‚ÄúProduct list‚Äù in either the title or description, we‚Äôve been able to find articles that contain a product list. This is because we were able to capture the semantics of the query and match it to the existing embeddings we have for each article.</p><p>In our application, we store these embeddings using pgvector on Aurora PostgreSQL. pgvector is an open source extension that enables vector similarity search in PostgreSQL. We transform our search term into an embedding using Amazon Bedrock and Cohere v3 Embed.</p><p>After we‚Äôve converted the search term to an embedding, we can compare it with the embeddings on the article that have been saved during the ingestion process. We can then use pgvector to find articles that are clustered together. The SQL code for that is as follows:</p><div><pre><code>SELECT *\nFROM (\n    SELECT feed_articles.id as id, title, feed_articles.feed_id as feed, feedName, slug, description, url, author, image, published_at as published, 1 - ABS(1 - (embedding &lt;-&gt; $2)) AS \"similarity\"\n    FROM feed_articles\n    INNER JOIN (select feed_id, name as feedName from feed_user_subscription fus where fus.user_id=$1) sub on feed_articles.feed_id=sub.feed_id\n    ${feedId != undefined ? `WHERE feed_articles.feed_id = $4` : \"\"}\n)\nWHERE similarity &gt; 0.95\nORDER BY similarity desc\nLIMIT $3;\n</code></pre></div><p>This code calculates the distance between the topics, and the embedding of this article as ‚Äúsimilarity.‚Äù If this distance is close, then we can assume that the topic of the article is related, and we therefore attach the topic to the article.</p><p>To deploy this application in your own account, you need the following prerequisites:</p><ul><li>Model access for Cohere Embed English. On the Amazon Bedrock console, choose  in the navigation pane, then choose . Select the FMs of your choice and request access.</li></ul><p>When the prerequisite steps are complete, you‚Äôre ready to set up the solution:</p><ol start=\"2\"><li>Navigate to the solution directory:</li></ol><ol start=\"3\"><li>In your terminal, export your AWS credentials for a role or user in ACCOUNT_ID. The role needs to have all necessary permissions for AWS CDK deployment: \n  <ul><li><strong>export AWS_REGION=‚Äù&lt;region&gt;‚Äù</strong> ‚Äì The <a href=\"https://docs.aws.amazon.com/glossary/latest/reference/glos-chap.html#region\" target=\"_blank\" rel=\"noopener\">AWS Region</a> you want to deploy the application to</li><li><strong>export AWS_ACCESS_KEY_ID=‚Äù&lt;access-key&gt;‚Äù</strong> ‚Äì The access key of your role or user</li><li><strong>export AWS_SECRET_ACCESS_KEY=‚Äù&lt;secret-key&gt;‚Äù</strong> ‚Äì The secret key of your role or user</li></ul></li></ol><ol start=\"4\"><li>If you‚Äôre deploying the AWS CDK for the first time, run the following command:</li></ol><ol start=\"5\"><li>To synthesize the <a href=\"http://aws.amazon.com/cloudformation\" target=\"_blank\" rel=\"noopener\">AWS CloudFormation</a> template, run the following command:<code>cdk synth -c vpc_id=&lt;ID Of your VPC&gt;</code></li></ol><ol start=\"6\"><li>To deploy, use the following command:<code>cdk deploy -c vpc_id=&lt;ID Of your VPC&gt;</code></li></ol><p>When deployment is finished, you can check these deployed stacks by visiting the AWS CloudFormation console, as shown in the following screenshot.</p><p>Run the following command in the terminal to delete the CloudFormation stack provisioned using the AWS CDK:</p><p>In this post, we explored what language embeddings are and how they can be used to enhance your application. We‚Äôve learned how, by using the properties of embeddings, we can implement a real-time zero-shot classifier and can add powerful features such as semantic search.</p><p>The code for this application can be found on the accompanying <a href=\"https://github.com/aws-samples/rss-aggregator-using-cohere-embeddings-bedrock\" target=\"_blank\" rel=\"noopener\">GitHub repo</a>. We encourage you to experiment with language embeddings and find out what powerful features they can enable for your applications!</p><p><img loading=\"lazy\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/02/06/ML-17434-About-Author.jpeg\" alt=\"About the Author\" width=\"100\" height=\"133\">is a Solutions Architect based in Amsterdam, the Netherlands. He has a background in software engineering. At AWS, Thomas helps customers build cloud solutions, focusing on modernization, data, and integrations.</p>","contentLength":13247,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Learnings from a Machine Learning Engineer ‚Äî Part 2: The Data Sets","url":"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-2-the-data-sets/","date":1739478579,"author":"David Martin","guid":2,"unread":true,"content":"<p>In&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-1-the-data/\">Part 1</a>, we discussed the importance of collecting good image data and assigning proper labels for your <a href=\"https://towardsdatascience.com/tag/image-classification/\" title=\"Image Classification\">Image Classification</a> project to be successful. Also, we talked about classes and sub-classes of your data. These may seem pretty straight forward concepts, but it‚Äôs important to have a solid understanding going forward. So, if you haven‚Äôt, please check it out.</p><p>Now we will discuss how to build the various data sets and the techniques that have worked well for my application. Then in the <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/\">next part</a>, we will dive into the evaluation of your models, beyond simple accuracy.</p><p>I will again use the example zoo animals image classification app.</p><p>As machine learning engineers, we are all familiar with the train-validation-test sets, but when we include the concept of sub-classes discussed in <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-1-the-data/\">Part 1</a>, and incorporate to concepts discussed below to set a minimum and maximum image count per class, as well as staged and synthetic data to the mix, the process gets a bit more complicated. I had to create a custom script to handle these options.</p><p>I will walk you through these concepts before we split the data for training:</p><ul><li>&nbsp;‚Äî Too few images and your model performance will suffer. Too many and you spend more time training than it‚Äôs worth.</li><li>&nbsp;‚Äî Your model indicates how confident it is in the predictions. Let‚Äôs use that to decide when to present results to the user.</li><li>&nbsp;‚Äî Real-world data is messy and the benchmark sets should reflect that. These need to stretch the model to the limit and help us decide when it is ready for production.</li><li><strong>Staged and synthetic data</strong>&nbsp;‚Äî Real-world data is king, but sometimes you need to produce the your own or even generate data to get off the ground. Be careful it doesn‚Äôt hurt performance.</li><li>&nbsp;‚Äî Repeat data can skew your results and give you a false sense of performance. Make sure your data is diverse.</li><li>&nbsp;‚Äî Combine sub-classes, apply cutoffs, and create your train-validation-test sets. Now we are ready to get the show started.</li></ul><p>In my experience, using a minimum of 40 images per class provides descent performance. Since I like to use 10% each for the test set and validation set, that means at least 4 images will be used to check the training set, which feels just barely adequate. Using fewer than 40 images per class, I notice my model evaluation tends to suffer.</p><p>On the other end, I set a maximum of about 125 images per class. I have found that the performance gains tend to plateau beyond this, so having more data will slow down the training run with little to show for it. Having more than the maximum is fine, and these ‚Äúoverflow‚Äù can be added to the test set, so they don‚Äôt go to waste.</p><p>There are times when I will drop the minimum cutoff to, say 35, with no intention of moving the trained model to production. Instead, the purpose is to leverage this throw-away model to find more images from my unlabelled set. This is a technique that I will go into more detail in <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/\">Part 3</a>.</p><p>You are likely familiar with the softmax score. As a reminder, softmax is the probability assigned to each label. I like to think of it as a confidence score, and we are interested in the class that receives the highest confidence. Softmax is a value between zero and one, but I find it easier to interpret confidence scores between zero and 100, like a percentage.</p><p>In order to decide if the model is confident enough with its prediction, I have chosen a threshold of 95. I use this threshold when determining if I want to present results to the user.</p><p>Scores above the threshold have a better changes of being right, so I can confidently provide the results. Scores below the threshold may not be right ‚Äî in fact it could be ‚Äúout-of-scope‚Äù, meaning it‚Äôs something the model doesn‚Äôt know how to identify. So, instead of taking the risk of presenting incorrect results, I instead prompt the user to try again and offer suggestions on how to take a ‚Äúgood‚Äù picture.</p><p>Admittedly this is somewhat arbitrary cutoff, and you should decide for your use-case what is appropriate. In fact, this score could probably be adjusted for each trained model, but this would make it harder to compare performance across models.</p><p>I will refer to this confidence score frequently in the evaluations section in <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/\">Part 3</a>.</p><p>Let me introduce what I call the benchmark sets, which you can think of as extended test sets. These are hand-picked images designed to stretch the limits of your model, and provide a measure for specific classes of your data. Use these benchmarks to justify moving your model to production, and for an objective measure to show to your manager.</p><ul><li>&nbsp;‚Äî These are the ‚Äúextra credit‚Äù images, like the bonus questions a professor would add to the quiz to see which students are paying attention. You need a keen eye to spot the difference between the ground truth and a similar looking class. For example, a cheetah sleeping in the shade that could pass as a leopard if you don‚Äôt look closely.</li><li>&nbsp;‚Äî These are the ‚Äútrick question‚Äù images. Our model is trained on zoo animals, but people are known for not following the rules. For example, a zoo guest takes a picture of their child wearing cheetah face paint.</li><li>&nbsp;‚Äî These are your ‚Äúbread and butter‚Äù classes that need to get near perfect scores and zero errors. This would be a make-or-break benchmark for moving to production.</li><li>&nbsp;‚Äî These are your ‚Äúrare but exceptional‚Äù classes that again need to be correct, but reach a minimum score like the confidence threshold.</li></ul><p>When looking for images to add to the benchmarks, you can likely find them in real-world images from your deployed model. See the evaluation in <a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/\">Part 3</a>.</p><p>For each benchmark, calculate the min, max, median, and mean scores, and also how many images get scores above and below the confidence threshold. Now you can compare these measures against what is currently in production, and against your minimum requirements, to help decide if the new model is production worthy.</p><p>Perhaps the biggest hurdle to any supervised machine learning application is having data to train the model. Clearly, ‚Äúreal-world‚Äù data that comes from actual users of the application is ideal. However you can‚Äôt really collect these until the model is deployed. Chicken and egg problem.</p><p>One way to get started to is to have volunteers collect ‚Äústaged‚Äù images for you, trying to act like real users. So, let‚Äôs have our zoo staff go around taking pictures of the animals. This is a good start, but there will be a certain level of bias introduced in these images. For example, the staff may take the photos over a few days, so you may not get the year-round weather conditions.</p><p>Another way to get pictures is use computer-generated ‚Äúsynthetic‚Äù images. I would avoid these at all costs, to be honest. Based on my experience, the model struggles with these because they look‚Ä¶different. The lighting is not natural, the subject may superimposed on a background and so the edges look too sharp, etc. Granted, some of the AI generated images look very realistic, but if you look closely you may spot something unusual. The neural network in your model will notice these, so be careful.</p><p>The way that I handle these staged or synthetic images is as a sub-class that gets merged into the training set, but only&nbsp;&nbsp;giving preference to the real-world images. I cap the number of staged images to 60, so if I have 10 real-world, I now only need 50 staged. Eventually, these staged and synthetic images are phased out completely, and I rely entirely on real-world.</p><p>One problem that can creep into your image set are duplicate images. These can be exact copies of pictures, or they can be extremely similar. You may think that this is harmless, but imagine having 100 pictures of an elephant that are exactly the same ‚Äî your model will not know what to do with a different angle of the elephant.</p><p>Now, let‚Äôs say you have only&nbsp;&nbsp;pictures that are nearly the same. Not so bad, right? Well, here is what can happen to them:</p><ul><li>Both pictures go in the training set ‚Äî The model doesn‚Äôt learn anything from the repeated image and it wastes time processing them.</li><li>One goes into the training set, the other goes into the test set ‚Äî Your test score will be higher, but it is not an accurate evaluation.</li><li>Both are in the test set ‚Äî Your test score will be compounded either higher or lower than it should be.</li></ul><p>None of these will help your model.</p><p>There are a few ways to find duplicates. The approach I have taken is to calculate a hamming distance on all the pictures and identify the ones that are very close. I have an interface that displays the duplicates and I decide which one I like best, and remove the other.</p><p>Another way (I haven‚Äôt tried this yet) is to create a vector representation of your images. Store these a vector database, and you can do a similarity search to find nearly identical images.</p><p>Whatever method you use, it is important to clean up the duplicates.</p><p>Now we are ready to build the traditional training, validation, and test sets. This is no longer a straight forward task since I want to:</p><ol><li>Merge sub-classes into a main class.</li><li>Prioritize real-world images over staged or synthetic images.</li><li>Apply a minimum number of images per class.</li><li>Apply a maximum number of images per class, sending the ‚Äúoverflow‚Äù to the test set.</li></ol><p>This process is somewhat complicated and depends on how you manage your image library. First, I would recommend keeping your images in a folder structure that has sub-class folders. You can get image counts by using a script to simply read the folders. Second is to keep a configuration of how the sub-classes are merged. To really set yourself up for success, put these image counts and merge rules in a database for faster lookups.</p><p>My train-validation-test set splits are usually 90‚Äì10‚Äì0. I originally started out using 80‚Äì10‚Äì10, but with diligence on keeping the entire data set clean, I noticed validation and test scores became pretty even. This allowed me to increase the training set size, and use ‚Äúoverflow‚Äù to become the test set, as well as using the benchmark sets.</p><p>In this part, we‚Äôve built our data sets by merging sub-classes and using the image count cutoffs. Plus we handle staged and synthetic data as well as cleaning up duplicate images. We also created benchmark sets and defined confidence thresholds, which help us decide when to move a model to production.</p><p>In&nbsp;<a href=\"https://towardsdatascience.com/learnings-from-a-machine-learning-engineer-part-3-the-evaluation/\">Part 3</a>, we will discuss how we are going to evaluate the different model performances. And then finally we will get to the actual model training and the techniques to enhance accuracy.<a href=\"https://medium.com/tag/machine-learning?source=post_page-----1948daf60483---------------------------------------\"></a></p>","contentLength":10545,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Coding Interviews were HARD Until I Learned These 20 Tips","url":"https://blog.algomaster.io/p/20-coding-interviews-tips","date":1739467827,"author":"Ashish Pratap Singh","guid":403,"unread":true,"content":"<p>I gave my first  in 2016‚Äîand failed. I failed the next five interviews as well before finally landing my first job at .</p><p>Since then, I‚Äôve interviewed with many companies and faced my fair share of rejections. However, over the years, my failure rate in coding interviews dropped significantly.</p><p>By 2022, with just 1.5 months of focused preparation, I successfully cleared interviews at  and .</p><p>Surprisingly, my success wasn‚Äôt due to a dramatic improvement in problem-solving skills. The real game-changer was my approach‚Äî and  during the interview.</p><p>In this article, I‚Äôll share  that made coding interviews significantly easier for me.</p><p>These tips cover everything you need to know, including:</p><ul><li><p>How to systematically approach coding interview problems</p></li><li><p>Key concepts and patterns you should know</p></li><li><p>The type of problems you should practice</p></li><li><p>How to choose the right algorithm for a given problem</p></li><li><p>Techniques to optimize your solution</p></li><li><p>How to communicate your thought process effectively</p></li></ul><p>By applying these strategies, you‚Äôll be able to tackle coding interviews with confidence and massively increase your chances of success.</p><p>In a coding interview, interviewers want to see how well you , , and  under pressure.</p><p>Here's a breakdown of what they look for:</p><ol><li><p><strong>Understanding the problem</strong>: Do you ask clarifying questions instead of making assumptions to ensure you fully understand the problem?</p></li><li><p>: Can you decompose the problem into smaller, manageable parts?</p></li><li><p>: Can you design an optimal solution in terms of time and space complexity?</p></li><li><p>: Do you handle edge cases like empty inputs, duplicates, large values, or special conditions?</p></li><li><p>: Can you explain why one approach is better than another?</p></li><li><p>: Do you have a strong grasp of data structures and algorithms, and can you choose the right one for the problem?</p></li><li><p>Can you quickly compute the time and space complexity of your solution?</p></li><li><p><strong>Explaining your thought process</strong>: Can you clearly articulate your approach and why it works?</p></li><li><p>: Are you receptive to hints and able to adjust your approach accordingly?</p></li><li><p>: Do you follow good coding practices (meaningful variable names, proper indentation, modular functions etc..)?</p></li><li><p><strong>Improving the initial solution</strong>: Can you optimize and refine your first solution when prompted?</p></li><li><p>Are you able to tackle variations of the original problem?</p></li><li><p>Can you manually walk through your code with sample inputs to verify correctness?</p></li></ol><p>Most coding interviews last </p><p>Depending on the company and interviewer, you may be asked to solve 2-3easy/medium problems or 1 hard problem with follow-ups.</p><p>Lets assume you are given one problem, with a follow up in a 45-minute interview. Here‚Äôs how you can optimally allocate your time:</p><ol><li><p>The interviewer may ask you to introduce yourself. Prepare a concise 1-2 minute introduction that highlights your background, experience, and key strengths. Practice it beforehand so that you can deliver it smoothly.</p></li><li><p><strong>Understand the Problem (5-10 mins):  </strong>Carefully read the problem statement, ask clarifying questions, and walk through sample inputs and expected outputs.</p></li><li><p><strong>Plan the Approach (10-20 mins): </strong>Brainstorm possible solutions, evaluate trade-offs, and discuss time and space complexity.</p></li><li><p><strong>Implement the Code (20-30 mins): </strong>Write a clean, modular and readable code.</p></li><li><p>Dry-run your code with sample inputs, debug any issues, and ensure edge cases are handled.</p></li><li><p><strong>Follow-ups and Wrap Up (35-45 mins): </strong>Answer follow up questions, and ask thoughtful questions to the interviewer about the company, role, or team.</p></li></ol><p>One of the biggest mistakes candidates make in coding interviews is jumping into coding too soon.</p><p>If you don't fully understand the question, you might end up solving the </p><p>Here‚Äôs how to ensure you grasp the problem before coding:</p><h4><strong>Read the Problem Carefully</strong></h4><p>Take a moment to absorb the problem statement. Rephrase it in your own words to confirm your understanding. </p><p>Identify the expected input/output format and any hidden constraints.</p><p>If anything is unclear, ask questions before diving into the solution. Interviewers appreciate when you seek clarity. Never assume details that aren‚Äôt explicitly mentioned in the problem statement.</p><p>Common clarifications include:</p><ul><li><p>Are there duplicate values?</p></li><li><p>Can the input be empty? If so, what should the output be?</p></li><li><p>Should the solution handle negative numbers?</p></li><li><p>Should the output maintain the original order of elements?</p></li><li><p>Is the graph directed or undirected?</p></li><li><p>Does the input contain only lowercase English letters, or can it have uppercase, digits, or special characters?</p></li><li><p>What should happen if multiple solutions exist? Should I return any valid solution, or does the problem have specific requirements?</p></li></ul><h4><strong>Walk Through Input/Output Examples</strong></h4><p>Once you understand the problem statement and constraints, go over a few input and output examples to make sure you get it.</p><p>Draw them out if it helps, especially for visual data structures like trees or graphs.</p><p>Try to take examples that cover different scenarios of the problem. Think about any  that might come up.</p>","contentLength":4908,"flags":null,"enclosureUrl":"https://substack-post-media.s3.amazonaws.com/public/images/61c3f6c0-4027-4d37-b4a7-a30fc183fa12_1602x1032.png","enclosureMime":"","commentsUrl":null},{"title":"Looking back at our Bug Bounty program in 2024","url":"https://engineering.fb.com/2025/02/13/security/looking-back-at-our-bug-bounty-program-in-2024/","date":1739466046,"author":"","guid":299,"unread":true,"content":"<ul><li aria-level=\"1\"><a href=\"https://about.fb.com/news/2019/01/designing-security-for-billions/\" target=\"_blank\" rel=\"noopener\"></a></li></ul><h2></h2><ul></ul><h2></h2><h2></h2><p><b>Ads audience tools designed to help people choose a target audience for their ads: </b><a href=\"https://bugbounty.meta.com/payout-guidelines/ads-audience/\" target=\"_blank\" rel=\"noopener\"></a><a href=\"https://www.facebook.com/business/help/717368264947302\" target=\"_blank\" rel=\"noopener\"></a><a href=\"https://bugbounty.meta.com/payout-guidelines/ads-audience/\" target=\"_blank\" rel=\"noopener\"></a></p><p><b>Mixed reality hardware products:</b><a href=\"http://hardwear.io\" target=\"_blank\" rel=\"noopener\"></a></p><h2></h2><p><b>Organizing community events and presenting joint research:</b></p><p><b>Providing resources and timely updates for the research community:</b></p>","contentLength":239,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Python vs R for data science: Which should you choose?","url":"https://www.datasciencecentral.com/python-vs-r-for-data-science-which-should-you-choose/","date":1739461072,"author":"Mike Steven","guid":62,"unread":true,"content":"<p>Welcome to another comparison article where you will understand the features, intricacies, pros, and cons of two different stacks of the information technology industry. Today‚Äôs comparison blog is especially for data scientists who spend their day and night with datasets, insights, trends, and analysis of many other factors. From a long list of skills that‚Ä¶&nbsp;<a href=\"https://www.datasciencecentral.com/python-vs-r-for-data-science-which-should-you-choose/\" rel=\"bookmark\">Read More ¬ª</a></p>","contentLength":377,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"A new tool for visualizing Rust lifetimes","url":"https://www.youtube.com/watch?v=NV6Xo_el_2o","date":1739458834,"author":"Let's Get Rusty","guid":372,"unread":true,"content":"<article>See how RustOwl can help you understand lifetimes in a real Rust codebase. A brand-new tool designed to visualize Rust lifetimes and make learning Rust easier. Check it out and see how it can change the way you write Rust!\n\nFree Rust training: https://letsgetrusty.com/bootcamp\n\nRustOwl: https://github.com/cordx56/rustowl\n\nCorrections:\n- Bacon is a CLI tool, not a library. Check it out here: https://github.com/Canop/bacon</article>","contentLength":424,"flags":null,"enclosureUrl":"https://www.youtube.com/v/NV6Xo_el_2o?version=3","enclosureMime":"","commentsUrl":null},{"title":"Bridging the Gap: Democratizing AI for All","url":"https://www.kdnuggets.com/bridging-gap-democratizing-ai","date":1739458803,"author":"Vidhi Chugh","guid":251,"unread":true,"content":"<article>Let‚Äôs explore how democratizing AI can level the playing field and create opportunities for all, no matter the background or resources.</article>","contentLength":137,"flags":null,"enclosureUrl":"https://www.kdnuggets.com/wp-content/uploads/chugh_Bridging-the-Gap-Democratizing-AI-for-All_1.png","enclosureMime":"","commentsUrl":null},{"title":"Rust vs C++ Performance","url":"https://www.youtube.com/watch?v=WnMin9cf78g","date":1739457041,"author":"Anton Putra","guid":314,"unread":true,"content":"<article>C++ vs Rust Speed.\n\nüî¥ To support my channel, I'd like to offer Mentorship/On-the-Job Support/Consulting (me@antonputra.com)\n\nüçø Benchmarks: https://youtube.com/playlist?list=PLiMWaCMwGJXmcDLvMQeORJ-j_jayKaLVn&amp;si=p-UOaVM_6_SFx52H\n\nüëã AWS is expensive - Infra Support Fund: https://buymeacoffee.com/antonputra\n\n‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ Experience &amp; Location üíº ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨\n‚ñ∫  I‚Äôm a Senior Software Engineer at Juniper Networks (13+ years of experience)\n‚ñ∫  Located in San Francisco Bay Area, CA (US citizen)\n\n‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ Connect with me üëã ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨\n‚ñ∫  LinkedIn: https://www.linkedin.com/in/anton-putra\n‚ñ∫  Twitter/X: https://twitter.com/antonvputra\n‚ñ∫  GitHub: https://github.com/antonputra\n‚ñ∫  Email: me@antonputra.com\n\n‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ Source Code üìö ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨\n‚ñ∫ Original Source Code: https://github.com/antonputra/tutorials/tree/245/lessons/245\n\nPR to improve Rust - https://github.com/antonputra/tutorials/pull/429\nPR to improve Rust - https://github.com/antonputra/tutorials/pull/431\nPR to improve Rust - https://github.com/antonputra/tutorials/pull/433\n\n#rust #golang #devops</article>","contentLength":1133,"flags":null,"enclosureUrl":"https://www.youtube.com/v/WnMin9cf78g?version=3","enclosureMime":"","commentsUrl":null},{"title":"How to Scale Sklearn with Dask","url":"https://www.kdnuggets.com/how-to-scale-sklearn-dask","date":1739451649,"author":"Iv√°n Palomares Carrascosa","guid":250,"unread":true,"content":"<article>Here's how Dask applies the building blocks of sklearn to bring ML modeling workflows to the next level of scalability via high-performance parallel computing</article>","contentLength":158,"flags":null,"enclosureUrl":"https://www.kdnuggets.com/wp-content/uploads/crVYYGyvTE2Jilsmvukhpw.jpeg","enclosureMime":"","commentsUrl":null},{"title":"Peter Bengtsson: get in JavaScript is the same as property in Python","url":"http://www.peterbe.com/plog/get-in-javascript-is-the-same-as-property-in-python","date":1739450516,"author":"","guid":164,"unread":true,"content":"<article>Prefix a function, in an object or class, with `get` and then that acts as a function call without brackets. Just like Python's `property` decorator.</article>","contentLength":149,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["dev"]}