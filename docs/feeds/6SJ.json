{"id":"6SJ","title":"Go","displayTitle":"Go","url":"","feedLink":"","isQuery":true,"isEmpty":false,"isHidden":false,"itemCount":50,"items":[{"title":"Is Real-Time Pushing in Go Too Hard? Try Sponge SSE and Get It Done in One Click!","url":"https://dev.to/zhufuyi/is-real-time-pushing-in-go-too-hard-try-sponge-sse-and-get-it-done-in-one-click-3c94","date":1751442064,"author":"zhuyasen","guid":180405,"unread":true,"content":"<p>Hey Gophers! Have you ever encountered scenarios like these:</p><ul><li>  You're developing a backend monitoring system and want to display real-time data like CPU usage and memory consumption on the frontend, but the only way is to have the frontend send a request every few seconds, exhausting the server?</li><li>  You want to build an information feed similar to Facebook or Twitter, where new messages are instantly \"dinged\" and pushed to the user's page, instead of waiting for them to scratch their heads and manually refresh?</li><li>  Or, you simply want to notify a user: \"Your delivery has been picked up by [Handsome John Doe] and is speeding your way!\", rather than having them stare anxiously at the order page?</li></ul><p>If you nodded to any of the questions above, then congratulations, you've probably been using the old method of \"polling.\" It's like sending a subordinate to the kitchen every five seconds to ask, \"Is the food ready yet?\". Not only does the subordinate run their legs off, but the chef gets annoyed too.</p><p>Isn't there a more elegant way? Of course, there is! Today's star is , and it's here to save the day! And the Go <a href=\"https://github.com/go-dev-frame/sponge/tree/main/pkg/sse\" rel=\"noopener noreferrer\">SSE</a> library we're about to introduce will give you this superpower with \"one click\"!</p><h3>\n  \n  \n  What is SSE? How is it different from WebSocket?\n</h3><p>Before diving into the code, let's explain the principle in plain language.</p><p>, as the name suggests, are \"events sent by the server.\" It's built on a standard HTTP connection, but this connection is a \"long-lived\" and  one.</p><p>Think of it as a :</p><ul><li>  The  is the radio station that broadcasts 24/7.</li><li>  The  is the radio.</li></ul><p>Once you tune your radio to the right channel (establish a connection), the station (server) can send you news and music (data) at any time, and you don't need to call every minute to ask, \"Are there any new programs?\".</p><p><strong>So, how is it different from WebSocket?</strong></p><ul><li>: It's a . Only the server can push data to the client. It's simple, lightweight, based on standard HTTP, and natively supports auto-reconnect. It's perfect for scenarios that only require server-to-client information pushing.</li><li>: It's a . The client and server can \"shout\" at each other at any time. It's more powerful, but the protocol is also more complex. It's suitable for scenarios like online chat and collaborative editing that require frequent two-way communication.</li></ul><p>In summary, if your requirement is one-way notification from \"server -&gt; client,\" then SSE is the simpler, more appropriate \"wheel\" for the job.</p><h3>\n  \n  \n  What features does this Go library offer?\n</h3><p>There are many SSE libraries on the market, but many only offer basic functionality. This  library, however, is incredibly thoughtful, like an all-in-one butler:</p><ul><li>: Excellent underlying design, capable of easily managing thousands of client connections.</li><li>: Network jitter? User accidentally closed and reopened the page? No worries! The library has built-in mechanisms for automatic reconnection and event resending, ensuring no important messages are lost! (Requires persistent storage).</li><li>: You can store historical events in Redis, MySQL, or anywhere you like. Mom no longer has to worry about losing messages after a server restart.</li><li>: Automatically detects \"zombie connections\" and cleans them up in time, keeping the connection pool healthy.</li><li>: You can \"whisper\" to one or more specific users, or \"shout\" a broadcast to all online users.</li></ul><p>Sounds cool, right? Just wait, seeing the code is even cooler!</p><h3>\n  \n  \n  Get Started in Three Minutes: Build Your First SSE Service\n</h3><p>Let's use a simple example to see how easy it is to quickly set up a service with the  library. Suppose we want to build a service that broadcasts \"Hello World\" to all clients every 5 seconds.</p><h4>\n  \n  \n  1. Server-side Code ()\n</h4><p>You'll need a Go environment and the Gin framework installed (this example uses Gin, but you can also use Go's native ).</p><div><pre><code>go get github.com/gin-gonic/gin\ngo get github.com/go-dev-frame/sponge/pkg/sse\n</code></pre></div><p>Then, create a  file:</p><div><pre><code></code></pre></div><p>See? It's super clear! Initialize Hub -&gt; Create connection point -&gt; Push message. Done!</p><h4>\n  \n  \n  2. Client-side Code ()\n</h4><p>Now, we need a \"radio\" to receive the messages. This library also provides a client implementation, which is very convenient.</p><div><pre><code></code></pre></div><p>Now, first run , then open another terminal and run .</p><p>You will see that the client prints a new message from the server every 5 seconds, without the client needing to do anything extra! That's the magic of SSE!</p><p>Of course, you can also use other clients for testing.</p><h3>\n  \n  \n  Advanced Usage: Make Your SSE Service More Powerful\n</h3><p>The power of the  library goes far beyond this.</p><h4>\n  \n  \n  Scenario 1: I don't want to lose a single message!\n</h4><p>Imagine your service is pushing critical stock prices. If a client disconnects for 10 seconds due to network issues, they could miss out on a fortune!</p><p>This is where  and  come into play.</p><p>You just need to implement a simple  interface to tell the  library how to save and read events (e.g., using Redis).</p><div><pre><code></code></pre></div><p>It's that simple! Now, when a client disconnects and reconnects, it will automatically include the ID of the last message it received. The server, upon seeing this, will fetch all the missed messages from your Redis and send them all at once. The fortune is saved!</p><h4>\n  \n  \n  Scenario 2: I want to know if a message was successfully delivered.\n</h4><p>Sometimes, you want to know if a message pushed to a specific user failed (for example, if that user has gone offline). You can set up a \"failure callback function.\"</p><div><pre><code></code></pre></div><p>This way, you can log, alert, or perform other compensatory actions for failed push events.</p><p>Server-Sent Events (SSE) is a powerful tool for building modern real-time applications. Especially when dealing with one-way data streams from the server to the client, it is lighter and simpler than WebSocket.</p><p>And this  library is like a well-equipped Swiss Army knife. It not only provides the core functionality of SSE but also thoughtfully prepares a series of \"deluxe features\" for you, such as persistence, auto-reconnection, failure handling, and performance monitoring. It frees developers from the tedious tasks of connection management and exception handling, allowing them to focus on implementing business logic.</p><p>So, the next time your product manager comes up with a \"real-time update\" requirement, don't frown and write polling code anymore. Confidently puff out your chest and tell them, \"No problem, I'll get it done in minutes!\" Then, gracefully <code>import \"github.com/go-dev-frame/sponge/pkg/sse\"</code> and let the magic happen!</p>","contentLength":6397,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Building a Dynamic Reverse Proxy with Go: Hot Reload, Load Balancing & CI/CD","url":"https://dev.to/yusufbender/building-a-dynamic-reverse-proxy-with-go-hot-reload-load-balancing-cicd-4fgk","date":1751438472,"author":"Yusuf Bender","guid":180404,"unread":true,"content":"<p>Have you ever wanted to build your own reverse proxy from scratch, with all the flexibility of dynamic configuration, hot reload, and load balancing—without relying on Nginx or Traefik?</p><p>In this project, I built a fully working reverse proxy server in Go, supporting features like YAML-based configuration, basic authentication, path rewriting, round-robin routing, and live configuration reloads. It’s also fully containerized with Docker and tested using GitHub Actions.</p><p>Let me walk you through the highlights of this project and why it’s more than just a toy proxy.</p><p>\nA reverse proxy is a server that sits between clients and backend services, forwarding client requests to the appropriate internal services. It's used for load balancing, authentication, caching, rewriting URLs, and more. Think of it as your system’s traffic controller.</p><p>\nTools like Nginx and Caddy are excellent—but sometimes too abstract. I wanted to understand how things work under the hood: how a proxy handles routes, manages load balancing, or reloads configs without restarting. By building my own, I learned deeply about Go’s net/http, reverse proxying via httputil, and how to structure production-ready systems.</p><p>\nThis proxy isn’t just functional—it’s production-aware. Here’s what it includes:</p><p>Dynamic YAML configuration</p><p>Round-robin load balancing between multiple targets</p><p>Health checks via /health endpoints</p><p>Path rewriting (e.g., /api -&gt; /user)</p><p>Basic Authentication for protected routes</p><p>Hot reload on config file changes (no need to restart the server)</p><p>Logging and rate limiting middleware</p><p>Unit tested with Go's testing package</p><p>CI pipeline using GitHub Actions for test + Docker build</p><p>**Project Structure\n**Here’s how the project is organized:</p><p>main.go: Entry point with middleware setup and hot reload logic</p><p>router.go: Core reverse proxy logic, request handling, round-robin logic</p><p>router_test.go: Unit tests for health checks, load balancing, and rewrite logic</p><p>routes.yaml: Defines dynamic routing rules, targets, auth credentials</p><p>api-backend/: Sample API service for testing (written in Go, Dockerized)</p><p>.github/workflows/ci.yml: GitHub Actions config for CI pipeline</p><p>**Example Configuration (routes.yaml)\n**The YAML file defines how incoming paths are routed to target servers, including optional authentication and rewrite paths. For example:</p><p>yaml\nKopyala\nroutes:</p><ul><li>path: /api\ntargets:\n\n<ul><li><a href=\"http://localhost:5003\" rel=\"noopener noreferrer\">http://localhost:5003</a>\nauth:\nusername: admin\npassword: 1234\nrewrite: /user\nThis means any request to /api will be routed in round-robin fashion to the targets, protected with basic auth, and the path will be rewritten to /user.</li></ul></li></ul><p>**Hot Reload in Action\n**One of the biggest challenges was implementing a hot reload system that watches the config file for changes. If routes.yaml is updated, the server reloads routes without restarting. This mimics how systems like Traefik work and adds flexibility in dynamic environments.</p><p>**CI/CD Setup\n**Every commit triggers the following steps via GitHub Actions:</p><p>Builds the Docker image for the API backend</p><p>(Optional) Could be extended to push to Docker Hub or deploy to a staging environment</p><p>This ensures the proxy remains stable and buildable at all times.</p><p>**Lessons Learned\n**Go’s net/http and httputil.ReverseProxy provide great building blocks for low-level HTTP control.</p><p>YAML makes dynamic configuration super clean for routing rules.</p><p>Hot reload can be implemented simply with file watchers and mutex locking.</p><p>Writing tests for a proxy server can be tricky, especially when simulating backend servers, but it's possible with httptest.</p><p>**What’s Next?\n**Adding a Web UI dashboard to visualize logs, active routes, and traffic</p><p>Support for JWT authentication</p><p>Metrics support with Prometheus</p><p>Redis-backed caching layer</p><p>Live reload via SIGHUP signal or WebSocket interface</p><p>Conclusion\nThis project was both a systems exercise and a backend engineering challenge. If you're learning Go or preparing for DevOps roles, building something like this sharpens your skills in concurrency, testing, and real-world infrastructure patterns.</p><p>You can find the full code here:\nGitHub Repo: github.com/yusufbender/bender-reverse-proxy</p><p>If you like the project, feel free to star it or fork and extend it!</p><p>Let me know what you think—or even better, contribute and build together 🚀</p>","contentLength":4257,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"ATMEGA328P-PU: The Little Prince of Microcontrollers in Circuits & Stars","url":"https://dev.to/ersajay/atmega328p-pu-the-little-prince-of-microcontrollers-in-circuits-stars-34ka","date":1751438281,"author":"ersajay","guid":180403,"unread":true,"content":"<p>A Meeting in the Desert of Circuits\nThe desert stretched endlessly, its sands glowing like gold under the sun. I was tracing the dunes, heading toward a distant oasis, when I spotted a glint in the sand—a small, rectangular shape, no bigger than a ladybug.<p>\n“You’re… very small,” I said, kneeling.</p>\n“And you’re a child who talks to microcontrollers,” it replied, voice soft as the wind. “But some keepers of light are smallest when they’re strongest. Ask the fox.”<p>\nIt was an ATMEGA328P-PU—the heart of Arduino Uno, but to me, it felt like a secret. Let me tell you its story.</p></p><ul><li>What Is the ATMEGA328P-PU? (A Keeper of Code, Not Just Silicon)\nThis was no ordinary chip. It was a <a href=\"https://www.ersaelectronics.com/blog/what-is-the-atmega328p-pu-and-atmega328p-pu-arduino-applications-guide\" rel=\"noopener noreferrer\">ATMEGA328P-PU</a>, an 8-bit AVR microcontroller in a 28-pin DIP suit—smaller than a baobab seed, but tough as the roots of the rose’s planet. Here’s its secret:</li></ul><p>Clock Speed: 16-20MHz (overclockable to 24MHz for daredevils). Faster than the fox darting across the dunes.\nMemory: 32KB Flash (stores code), 2KB SRAM (variables), 1KB EEPROM (your debugging tears). Like a Pensieve for electrons.<p>\nI/O Pins: 23 programmable pins (14 digital, 6 analog). Windows to the world—like the portholes on a spaceship.</p></p><p>Fun Fact: Engineers call it the “Cockroach of MCUs.” Survives power surges, cosmic rays, and your “hold my beer” coding experiments. Even the baobabs can’t crush it.\n“Why so quiet?” I asked.<p>\n“Keepers don’t shout,” it said. “They just keep.”</p></p><ul><li>ATMEGA328P-PU &amp; Its Siblings: Stars in the Same Sky\nIn the desert of microcontrollers, ATMEGA328P-PU has siblings—some older, some louder, but none quite like it:</li></ul><p><a href=\"https://www.ersaelectronics.com/p/microchip-technology-atmega328-pu-21565269\" rel=\"noopener noreferrer\">ATMEGA328-PU</a>: An older star. Higher power draw, like a planet that burns too bright. Avoid—like flip phones in 2025.\nATMEGA328PB-PU: A louder sibling. Extra peripherals (UART, timers), but bulkier. For complex projects, like a planet with too many volcanoes.<p>\nATMEGA328P-PU: The steady one. Lower power (1.8V-5.5V), optimized code. Ideal for battery-powered projects—like a rose that blooms in the desert.</p></p><p>Roast Alert:\nATMEGA328-PU (grumbling): “I’m vintage!”<p>\nATMEGA328P-PU (calm, like the fox): “I’m in NASA prototypes. You’re in a landfill. Bye.”</p></p><ul><li>Why the Fox (and Engineers) Choose It\nATMEGA328P-PU isn’t flashy. It’s the kind of friend who shows up, fixes your code, and leaves without fanfare. Here’s why:</li></ul><p>Cost: $3/unit—cheaper than a morning espresso (and way more useful). Even the rose, who’s picky, approves.\nSimplicity: No Wi-Fi tantrums or driver hell (looking at you, ESP32). Like a well-tended garden—no weeds.<p>\nCommunity Support: 10k+ Arduino tutorials. Google is your co-pilot, and the fox is your guide.</p></p><p>Mars Rover Prototypes: Runs in -40°C labs (tested by NASA JPL). Even cosmic frost can’t stop it.\nDIY COVID Ventilators: 2020’s MacGyver hero (MIT Open-Source Project). Saved lives, one byte at a time.</p><p>“Why not be bigger?” I asked.\n“Big things break,” it said. “Tiny things fit. In garage labs. In Mars rovers. In portable ECGs.”</p><ul><li>Programming the Little Prince: A Dance with Code\nWant to wake the ATMEGA328P-PU? It’s like taming a fox—gentle, patient, and rewarding.\nOption 1: Arduino IDE (The Friendly Path)</li></ul><p>Connect via USB-to-Serial (e.g., CH340G). Pray the drivers install (sometimes they don’t—blame AliExpress).\nSelect Board: Arduino Uno (even if you’re using a breadboard).<p>\nUpload Code: Watch the LED blink, like a star winking hello.</p></p><p>Option 2: Bare-Metal with AVRDUDE (The Adventurer’s Path)</p><p>Command: avrdude -c usbasp -p m328p -U flash:w:your_code.hex\nPro Tip: If smoke appears, take a breath. The fox says, “It’s not your fault—sometimes stars misbehave.”</p><ul><li>Burning the Bootloader: Tending the Rose\nBurning a bootloader is like planting a rose—delicate, but necessary.\nTools Needed:</li></ul><p>Programmer: USBasp, Arduino as ISP, or a sacrificial Uno (no tears, it’ll forgive you).\nSoftware: Arduino IDE or AVRDUDE (the gardener’s tools).</p><p>Wire It Up: Connect MOSI, MISO, SCK, RESET, GND, VCC. Triple-check—no one likes a fried rose.\nArduino IDE: Tools &gt; Programmer &gt; USBasp (or your tool).<p>\nBurn: Tools &gt; Burn Bootloader. Wait for the magic (or error messages—they’re just the rose’s thorns).</p></p>","contentLength":4201,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Telemetry Stack: System Monitoring with Go, FastAPI, InfluxDB and Grafana","url":"https://dev.to/yusufbender/telemetry-stack-system-monitoring-with-go-fastapi-influxdb-and-grafana-1of5","date":1751438192,"author":"Yusuf Bender","guid":180402,"unread":true,"content":"<p>🚀 What is Telemetry Stack?\nTelemetry Stack is a simple but powerful system monitoring solution. It consists of:</p><p>📥 Agent (Go): Collects CPU, RAM, and Disk usage every 10 seconds</p><p>🌐 API (FastAPI): Receives metrics and writes to InfluxDB</p><p>🧠 InfluxDB: Time-series database to store metrics</p><p>📊 Grafana: Beautiful dashboards for visualizing the data</p><p>🐳 Docker Compose: All services containerized and orchestrated</p><p>🧩 Project Structure<code>telemetry-stack/\n├── agent/               # Golang system metrics collector\n├── server/              # FastAPI metrics receiver\n│   └── models.py<p>\n├── docker-compose.yml  # Full stack definition</p>\n└── README.md</code></p><blockquote><p>🔧 Technologies Used\nGo (with gopsutil)\nInfluxDB 2.7\nDocker &amp; Docker Compose</p></blockquote><p>🐙 GitHub Repository\n🔗 View on <a href=\"https://github.com/yusufbender/telemetry-stack\" rel=\"noopener noreferrer\">GitHub </a></p>","contentLength":797,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Implementing Distributed Locks in Go: A Practical Guide for Backend Devs","url":"https://dev.to/jones_charles_ad50858dbc0/implementing-distributed-locks-in-go-a-practical-guide-for-backend-devs-4iip","date":1751418976,"author":"Jones Charles","guid":179487,"unread":true,"content":"<h4>\n  \n  \n  1. Hey, Let’s Talk Distributed Locks!\n</h4><p>Hey there, fellow Go devs! If you’ve got a year or two of Go under your belt—comfortable with goroutines and  but still scratching your head over distributed systems—this one’s for you. Distributed locks are the unsung heroes of modern backend architectures, keeping chaos at bay when multiple nodes need to play nice with shared resources. Think flash sales, task scheduling, or distributed transactions—locks are your traffic cops.</p><p>So, what’s a distributed lock? It’s a way to coordinate access to resources across machines. On a single machine,  does the trick. But in a distributed world, where nodes don’t share memory and networks can hiccup, we need something beefier. That’s where distributed locks come in, tackling mutual exclusion, network delays, and node crashes.</p><p>I’ve been slinging code for 10 years—Java back in the day, Go for the last 7—and I’ve tripped over my share of distributed system traps. In this guide, I’ll walk you through building distributed locks in Go from scratch, sharing battle-tested tips along the way. Why Go? It’s got lightweight concurrency, a killer ecosystem, and syntax that doesn’t make you want to cry. Whether you’re here to grok the theory or snag some copy-paste code, I’ve got you covered.</p><p>We’ll cover the basics, dive into Go implementations with Redis, ZooKeeper, and etcd, and wrap up with real-world examples and pitfalls to dodge. Let’s get rolling!</p><p> What makes distributed locks tick, and why Go rocks for this.</p><h4>\n  \n  \n  2. The Nuts and Bolts of Distributed Locks (and Why Go?)\n</h4><p>Before we sling code, let’s get the lay of the land. Distributed locks are all about three things:  (one client at a time),  (no disappearing acts), and  (fast in, fast out). They’re clutch for stuff like preventing overselling in e-commerce or ensuring a task runs on just one node.</p><p>So, why pick Go for this gig?</p><ul><li>: Goroutines are cheap and cheerful—think thousands of concurrent lock attempts without breaking a sweat. Channels make retry logic a breeze.</li><li>: Libraries like , , and  are production-ready and waiting for you.</li><li>: Go’s no-nonsense syntax means you can whip up a lock in a few lines and still get screaming performance.</li></ul><p>Compared to Java’s heavyweight setup or Python’s concurrency quirks (looking at you, GIL), Go hits the sweet spot. Here’s a quick cheat sheet:</p><div><table><thead><tr></tr></thead><tbody><tr></tr><tr></tr><tr></tr></tbody></table></div><p> Go’s your trusty sidekick for distributed locks—light, fast, and drama-free. Next, we’ll get our hands dirty with code.</p><h4>\n  \n  \n  3. Hands-On: Building Distributed Locks in Go\n</h4><p>Enough talk—let’s code! We’ll implement distributed locks using Redis, ZooKeeper, and etcd, three heavy hitters in the game. Each has its flavor, and I’ll drop full Go snippets you can run or tweak. Let’s do this!</p><h5>\n  \n  \n  3.1 Redis: Fast and Furious\n</h5><p> Redis uses  (set if not exists) to grab a lock, with a TTL to avoid deadlocks. It’s like snagging the last slice of pizza—if you’re first, it’s yours, but you’ve got a timer.</p><div><pre><code></code></pre></div><p> The Lua script ensures only the lock owner can release it—avoids someone else swiping your pizza.</p><p> High-speed scenarios like flash sales where consistency can flex a bit.</p><h5>\n  \n  \n  3.2 ZooKeeper: Rock-Solid Consistency\n</h5><p> ZooKeeper uses temporary sequential nodes. You create a node, check if you’re the lowest number, and wait your turn if not—like a polite queue at the DMV.</p><div><pre><code></code></pre></div><p> When you need bulletproof consistency, like financial systems or critical scheduling.</p><h5>\n  \n  \n  3.3 etcd: The Cloud-Native Champ\n</h5><p> etcd uses leases and key competition. You grab a lease, set a key, and hold it ‘til the lease is up—like renting a coworking desk.</p><div><pre><code></code></pre></div><p> Cloud-native apps or anything in the Kubernetes orbit—etcd’s a natural fit.</p><div><table><thead><tr></tr></thead><tbody><tr></tr><tr></tr><tr></tr></tbody></table></div><h4>\n  \n  \n  4. Level Up: Best Practices and Pitfalls to Avoid\n</h4><p>Code’s in the bag, but distributed locks are tricky beasts in the wild. Think of them as a relay baton—drop it, and your system’s toast. With a decade of backend scars, I’ve got some hard-won tips and traps to share. Let’s make your locks bulletproof.</p><p> I once locked an entire e-commerce inventory with one key. Peak traffic hit, contention spiked, and QPS tanked to the hundreds. Oof.</p><p> Lock by specific IDs (like product IDs) to keep things granular and contention low.</p><div><pre><code></code></pre></div><h6>\n  \n  \n  Timeouts and Retries Done Right\n</h6><p> A task scheduler I built had a tiny TTL. One slow job later, the lock expired, another node jumped in, and chaos ensued—duplicate tasks everywhere.</p><p> Use  for timeouts and exponential backoff for retries. Less fighting, more winning.</p><div><pre><code></code></pre></div><p> Locks can bottleneck your app silently. Log acquire/release times and track contention with tools like Prometheus.</p><div><pre><code></code></pre></div><h6>\n  \n  \n  The “Whoops, I Deleted Your Lock” Trap\n</h6><p> Client A’s lock expires, B grabs it, then A wipes it out by mistake. Concurrency goes poof.</p><p> Use unique IDs and a Lua script (see Redis example) to ensure only the owner releases it.</p><h6>\n  \n  \n  ZooKeeper’s Network Hiccups\n</h6><p> In a payment system, network jitter dropped ZooKeeper connections, killing locks and duplicating orders.</p><p> Reconnect and double-check your lock:</p><div><pre><code></code></pre></div><h6>\n  \n  \n  etcd’s High-Concurrency Lag\n</h6><p> Under heavy load, etcd’s lease requests piled up, slowing lock grabs to a crawl.</p><p> Pre-allocate leases and reuse them:</p><div><pre><code></code></pre></div><p> Locks need finesse—keep them tight, resilient, and visible.</p><h4>\n  \n  \n  5. Locks in Action: Real-World Scenarios\n</h4><p>Time to take our locks for a spin! We’ll tackle two classics: an e-commerce flash sale and a distributed task scheduler. Code’s ready, lessons are baked in—let’s roll.</p><h5>\n  \n  \n  5.1 Flash Sale: No Overselling Allowed\n</h5><p> 100 product units, 100,000 users, zero oversells. Redis to the rescue.</p><div><pre><code></code></pre></div><p> Redis locks keep stock checks atomic. Pipeline it for even more speed.</p><h5>\n  \n  \n  5.2 Task Scheduler: One Node, One Job\n</h5><p> Clean logs at midnight on one node only. etcd’s got this.</p><div><pre><code></code></pre></div><p> etcd’s leases ensure one winner, and state sticks around for recovery.</p><ul><li> Cut lock time with async logging— showed ~5k QPS.\n</li><li> Shard tasks by ID for scale.</li></ul><h4>\n  \n  \n  6. Wrapping Up: Key Takeaways and What’s Next\n</h4><p>We’ve made it! From the nuts and bolts of distributed locks to Go-powered implementations and real-world wins, we’ve covered a lot of ground. Think of this as your crash course in taming distributed chaos. Let’s recap, drop some final tips, and peek at what’s ahead for Go in this space.</p><p>Distributed locks boil down to <strong>mutual exclusion, reliability, and speed</strong>, and Go’s a champ at delivering them. Here’s the rundown:  </p><ul><li>: Your go-to for blazing-fast, high-concurrency gigs like flash sales.\n</li><li>: The rock-solid choice for consistency-first jobs like scheduling.\n</li><li>: The balanced, Go-native pick for cloud setups and Kubernetes fans.\n</li></ul><p>We’ve coded them up, dodged pitfalls like lock misdeletion and network jitter, and seen them shine in e-commerce and task scheduling. The secret sauce? Fine-tune granularity, handle timeouts like a pro, and monitor everything.</p><h5>\n  \n  \n  Practical Tips from the Trenches\n</h5><p>After 10 years of backend battles, here’s my cheat sheet for rocking distributed locks:  </p><ol><li>: Kick off with Redis—it’s easy and fast. Scale to ZooKeeper or etcd when you need more.\n</li><li>: Keep lock hold times tiny—shard locks or go async for big wins.\n</li><li>: Network blips happen. Retry smartly and check lock state.\n</li><li>: No metrics, no clue. Log and track contention from day one.\n</li></ol><p>Go’s star is rising in distributed systems, and it’s no fluke. With Kubernetes, Istio, and etcd all in its orbit, Go’s concurrency and simplicity are a perfect match for cloud-native chaos. What’s next? I’d bet on frameworks that bake in service discovery and auto-renewing leases—less boilerplate, more focus on your app. Distributed locks in Go feel like driving a tuned-up sports car: fast, stable, and fun to code.</p><p>So, grab the snippets, tweak them for your projects, and let me know how it goes—I’d love to hear your war stories! Distributed locks don’t have to be a headache, and with Go, they’re downright approachable.</p><p> Locks are tools, not magic. Pick the right one, wield it well, and your system will thank you. Happy coding!</p>","contentLength":8081,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Advanced Golang Concurrency Patterns: Building Million-Events-Per-Second Data Pipelines with Intelligent Resource Management","url":"https://dev.to/aaravjoshi/advanced-golang-concurrency-patterns-building-million-events-per-second-data-pipelines-with-2i02","date":1751394696,"author":"Aarav Joshi","guid":179197,"unread":true,"content":"<blockquote><p>As a best-selling author, I invite you to explore my books on <a href=\"https://www.amazon.com/stores/Aarav-Joshi/author/B0DQYNVXZ7?ref=ap_rdr&amp;isDramIntegrated=true&amp;shoppingPortalEnabled=true&amp;ccs_id=738636bd-0ca1-4d7b-8efa-481bfc222571\" rel=\"noopener noreferrer\">Amazon</a>. Don't forget to follow me on <a href=\"https://medium.com/@aarav-joshi\" rel=\"noopener noreferrer\">Medium</a> and show your support. Thank you! Your support means the world! </p></blockquote><h2>\n  \n  \n  Advanced Concurrency Patterns for High-Throughput Data Pipelines in Golang\n</h2><p>Building high-performance data pipelines requires moving beyond basic worker pools. I've spent years optimizing Go systems processing millions of events per second. The real challenge lies in balancing throughput with priority handling while preventing resource exhaustion. Let me share patterns that transformed our production systems.  </p><p>Concurrency isn't just about goroutines. It's about intelligent resource management. Consider priority handling first. Dedicated channels for critical items prevent queue starvation. In our implementation, high-priority items bypass batching entirely:</p><div><pre><code></code></pre></div><p>This simple separation reduced our P99 latency by 40%. Unexpectedly, it also improved regular throughput by eliminating head-of-line blocking.  </p><p>Backpressure must be explicit. Many systems fail when queues overflow silently. We return submission statuses:</p><div><pre><code></code></pre></div><p>In production, we couple this with exponential backoff and circuit breakers. Clients respect backpressure signals, preventing cascading failures.  </p><p>Batching requires careful tuning. Fixed batch intervals cause latency spikes. Fixed sizes waste resources. Our solution combines both:</p><div><pre><code></code></pre></div><p>This dual-trigger approach maintains consistent latency while adapting to load variations.  </p><p>Work stealing solves imbalance problems. Traditional approaches introduce significant overhead. Our probabilistic stealing minimizes locks:</p><div><pre><code></code></pre></div><p>We lock only during item transfer, not during queue inspection. This reduced steal overhead by 70% in benchmarks.  </p><p>Telemetry is non-negotiable. We track:  </p><ul><li>Per-shard load distribution\n</li><li>Batch processing times (exponential moving average)\n</li></ul><div><pre><code></code></pre></div><p>These metrics feed our auto-scaling systems. Sudden queue depth increases trigger horizontal scaling.  </p><p>I learned hard lessons about resource exhaustion. Our pipeline now includes these safeguards:</p><div><pre><code></code></pre></div><p>We maintain a strict priority queue ratio. When priority items exceed 10% of capacity, clients must throttle. This prevents priority floods from starving regular items.  </p><p>Production enhancements matter. We added:  </p><ul><li>Circuit breakers that skip shards during downstream failures\n</li><li>A dead-letter queue for unprocessable items\n</li><li>Dynamic batch sizing based on queue depth\n</li><li>Prometheus metrics endpoint\n</li></ul><div><pre><code></code></pre></div><p>These adjustments happen during maintenance windows. We avoid runtime mutations that could cause races.  </p><p>Performance characteristics surprised us. On 8-core servers:  </p><ul><li>Sustained throughput: 780K ops/second\n</li><li>Priority latency: &lt;2ms P99\n</li><li>Resource utilization: 70% CPU at peak\n</li><li>Zero drops at 10x load spikes\n</li></ul><p>The key was minimizing synchronization. Our work stealing uses brief, targeted locks. Batch processing avoids shared state. Each shard maintains independent buffers.  </p><p>Shutdown handling is often overlooked. We use context cancellation:</p><div><pre><code></code></pre></div><p>This prevents data loss during deployments. In-flight items complete processing while new submissions stop immediately.  </p><p>Through trial and error, I discovered critical insights. First, backpressure must propagate to clients. Second, metrics should drive scaling decisions. Third, priority systems need strict quotas. Most importantly, simplicity beats cleverness. Each component does one thing well.  </p><h2>\n  \n  \n  These patterns now power our real-time analytics pipeline. They process 14 billion events daily with predictable performance. The system self-regulates during traffic spikes. Failures remain isolated. That reliability transformed how we design data systems.\n</h2><p>📘 , , , and  to the channel!</p><p> is an AI-driven publishing company co-founded by author . By leveraging advanced AI technology, we keep our publishing costs incredibly low—some books are priced as low as —making quality knowledge accessible to everyone.</p><p>Stay tuned for updates and exciting news. When shopping for books, search for  to find more of our titles. Use the provided link to enjoy !</p><p>Be sure to check out our creations:</p>","contentLength":4061,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Golang Context Package: A Guide to One of the Most Used Packages in Go","url":"https://dev.to/pedro-silva-dev/golang-context-package-a-guide-to-one-of-the-most-used-packages-in-go-a3g","date":1751376687,"author":"Pedro Silva","guid":178938,"unread":true,"content":"<p>So, you're writing some Go code and you keep seeing context.Context pop up everywhere, right? Especially if you're building network servers or anything that juggles multiple tasks at once. This package was added way back in Go version 1.7, and it's super important for writing good, solid code. But what does it actually do? And why should you care? Let's dive in and figure it out!</p><p>The \"Why\": The Problem Context Solves\nPicture this: you have a web server that handles requests. For each request, your server might need to make a database query and a call to an external API. Now, think about two scenarios:</p><p>The user cancels the request: The user just closes their browser tab. Your server, not knowing this, carries on with the database query and the API call, wasting CPU, memory, and network resources on a result that no one is ever going to see.</p><p>An operation is too slow: The external API is taking forever to respond. You don't want your server to hang forever, tying up resources. You need a way to set a time limit.</p><p>These scenarios show a classic challenge in concurrent programming: managing an operation's lifecycle. That's exactly the problem the context package was made to solve. It gives us a standard, super-powerful way to handle deadlines, timeouts, cancellation signals, and to carry request-specific data around.</p><p>The Context Lifecycle: A Tree of Operations\nThe most important concept to get about context is that it creates a tree of operations. Each new request or background job kicks off a new tree.</p><p>The Root: Every context tree starts with a root. You'll typically create this using . This base context is never canceled, has no values, and no deadline.</p><p>Child Contexts: When you want to change a context—like adding a timeout or making it cancelable—you create a child context from a parent.\nctx, cancel := (parentCtx, 2*time.Second)</p><p>Propagation: This parent-child relationship is the key to the context's power.</p><p>Cancellation flows downwards: When a parent context is canceled, all of its children and their children's children are immediately canceled, too.</p><p>Values are inherited: A child context inherits all the values from its parent.</p><p>This tree structure lets you create a scope for a specific operation. If the main operation gets canceled (like the user's HTTP request is terminated), all the sub-operations (database queries, API calls) <em>tied to its context automatically get the signal to stop</em>.</p><p>The \"What\": The  Interface\nAt its heart, the package gives us the context.Context interface, which is surprisingly simple:</p><div><pre><code>type Context interface {\n    // Done returns a channel that's closed when work done on behalf of this\n    // context should be canceled.\n    Done() &lt;-chan struct{}\n\n    // Err returns a non-nil error if Done is closed.\n    // It will be context.Canceled or context.DeadlineExceeded.\n    Err() error\n\n    // Deadline returns the time when work done on behalf of this\n    // context should be canceled.\n    Deadline() (deadline time.Time, ok bool)\n\n    // Value returns the value associated with this context for a key,\n    // or nil if no value is associated with the key.\n    Value(key interface{}) interface{}\n}\n\n</code></pre></div><p>You'll rarely implement this interface yourself. Instead, you'll use the functions the context package already gives you to create and manage contexts.</p><p>The \"How\": Creating and Using Contexts\nLet's see how to build and use the context tree in practice.</p><p> and context.TODO(): Like we said, this is your starting point—the root of your context tree. You'll usually use it in main() or at the top level of a request handler.</p><p>: This function also returns an empty context. You should use it when you're not sure which context to use or when a function should be updated to accept a context but isn't yet. It works like a \"to-do\" note for the future.</p><p>: Propagating Cancellation\nThis is the most direct way to make an operation cancelable. It returns a child context and a CancelFunc. It's basically a \"stop\" button!</p><div><pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n)\n\nfunc worker(ctx context.Context, id int) {\n    for {\n        select {\n        case &lt;-ctx.Done():\n            // The context was canceled, so we stop working.\n            fmt.Printf(\"Worker %d: stopping. Reason: %v\\n\", id, ctx.Err())\n            return\n        default:\n            fmt.Printf(\"Worker %d: doing work.\\n\", id)\n            time.Sleep(500 * time.Millisecond)\n        }\n    }\n}\n\nfunc main() {\n    // Create a base context for our operation.\n    // It's good practice to call the cancel function to free up resources,\n    // so we use defer here.\n    ctx, cancel := context.WithCancel(context.Background())\n    defer cancel() \n\n    // Start a few workers, all using the same cancelable context.\n    go worker(ctx, 1)\n    go worker(ctx, 2)\n\n    // Let them run for a couple of seconds.\n    time.Sleep(2 * time.Second)\n\n    // Now, cancel the whole operation.\n    fmt.Println(\"Main: canceling all workers.\")\n    cancel() // This closes the ctx.Done() channel for all workers.\n\n    // Wait a moment to see the workers' shutdown messages.\n    time.Sleep(1 * time.Second)\n    fmt.Println(\"Main: finished.\")\n}\n</code></pre></div><p>When  is called, the  channel of ctx is closed, and both goroutines get the signal to terminate.</p><p>context.WithTimeout &amp; context.WithDeadline: Time-based Cancellation\nThese are specialized and very common versions of WithCancel. It's like putting a stopwatch on your operation.</p><p>WithTimeout: Cancels the context after a certain amount of time.</p><p>WithDeadline: Cancels the context at a specific time.</p><div><pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n)\n\nfunc slowOperation(ctx context.Context) {\n    fmt.Println(\"Starting slow operation...\")\n    select {\n    case &lt;-time.After(5 * time.Second):\n        // This won't be reached if the context times out first.\n        fmt.Println(\"Operation completed successfully.\")\n    case &lt;-ctx.Done():\n        // The context's deadline was exceeded.\n        fmt.Println(\"The operation timed out:\", ctx.Err())\n    }\n}\n\nfunc main() {\n    // Create a context that will be canceled after 3 seconds.\n    ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\n    // It's a good practice to always call cancel, even on a timeout context,\n    // to release resources if the operation finishes early.\n    defer cancel()\n\n    slowOperation(ctx)\n}\n\n</code></pre></div><p>: Passing Request Data\nWithValue lets you attach data to a context. This is great for passing info that's relevant to a whole request chain, like a tracing ID or an authenticated user's identity.</p><p>Heads up: Use WithValue sparingly! Don't use it to pass essential parameters to functions; those should be explicit function arguments. Think of it more like a sticky note you attach to the request, not a suitcase.</p><p>To avoid key conflicts, always define a custom, unexported type for your context keys.</p><div><pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n)\n\n// Use a custom unexported type for the context key.\ntype key string\n\nconst traceIDKey key = \"traceID\"\n\nfunc process(ctx context.Context) {\n    // Retrieve the value.\n    id, ok := ctx.Value(traceIDKey).(string)\n    if ok {\n        fmt.Println(\"Processing with Trace ID:\", id)\n    } else {\n        fmt.Println(\"No Trace ID found.\")\n    }\n}\n\nfunc main() {\n    // Create a context with a value.\n    ctx := context.WithValue(context.Background(), traceIDKey, \"abc-123-xyz\")\n\n    process(ctx)\n}\n\n</code></pre></div><p><strong>Best Practices and Pitfalls</strong>\nAlways pass Context as the first argument to a function: func DoSomething(, ...). It's just good Go etiquette!</p><p>Always call the cancel function returned by WithCancel, WithTimeout, and WithDeadline to clean up resources.  is your best friend.</p><p>Never store a Context inside a struct. Pass it explicitly.</p><p>Never pass a nil Context. If you're not sure, use .</p><p>context.Background() should only be used at the highest level of a program (e.g., in main or at the start of a request handler) as the root of a context tree. Avoid passing it directly to other functions.</p><p>A Context is immutable. Functions like WithCancel or WithValue return a new child context; they don't modify the one you pass in.</p><p>Conclusion\nAnd that's it! The context package isn't so scary after all, is it? It's a tool to keep your concurrent code from becoming a mess. By thinking in terms of these \"context trees,\" you can handle timeouts and cancellations now. The next time you see context.Context in some code, you'll know it's the secret sauce that holds the whole operation together. Follow for more content!</p>","contentLength":8460,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"TicTacToe. Go Duel. AI vs Fate.","url":"https://dev.to/andrey_matveyev/tictactoe-go-duel-ai-vs-fate-5g9a","date":1751365377,"author":"Andrey Matveyev","guid":178846,"unread":true,"content":"<h3>\n  \n  \n  Neural Network vs Random Number Generator\n</h3><blockquote><p>\"Knowledge itself is power\" (с) -Francis Bacon</p></blockquote><p>Creating a network is easy. Training it correctly is not an easy task. The result often does not match expectations. In reality, there is no magic here. The network does exactly what it is told to do. If the result is not what was intended, then the error is either in the training or in the interpretation of the results obtained. The creator's thoughts cannot yet be guessed by the network.</p><p>In our previous article, we delved into the fundamentals of neural networks, building a simple model in Golang and successfully solving the classic XOR problem. Now it's time to move on to a more exciting and complex area — Reinforcement Learning — and apply this knowledge to create an intelligent agent capable of playing Tic-Tac-Toe.</p><p>Unlike the XOR problem, where the network immediately received the \"correct answer\" and could adjust its weights, in games like Tic-Tac-Toe, a key difficulty arises: delayed reward. The agent makes moves, but the outcome of its actions (win, loss, or draw) is only known at the end of the game. This means we cannot immediately point out an \"error\" or \"success\" for each individual move to the network. The agent needs to learn to associate intermediate actions with future outcomes.</p><p>It is precisely to solve such problems that the Deep Q-Learning (DQN) algorithm was developed, which we will discuss in detail in this article. We will describe the game logic, the DQN agent's architecture, and analyze its training process as both the first and second player. The article is written in an accessible, popular style and will not delve deeply into the mathematical foundations, as there are many excellent resources on this topic available online (e.g., <a href=\"https://www.anyscale.com/blog?author=misha-laskin\" rel=\"noopener noreferrer\">mathematics of reinforcement learning (RL)</a> or <a href=\"https://www.youtube.com/playlist?list=PLZjXXN70PH5itkSPe6LTS-yPyl5soOovc\" rel=\"noopener noreferrer\">video about DeepLearning</a>).</p><p>Tic-Tac-Toe is a simple deterministic game for two players on a 3x3 board. Players take turns placing their symbols (X and O) into empty cells. The goal of the game is to be the first to get three of your symbols in a row horizontally, vertically, or diagonally. If all cells are filled and no winner is determined, the game ends in a draw.</p><ul><li><p>: Determined by the arrangement of X and O symbols on the board.</p></li><li><p>: Choosing an empty cell to place your symbol.</p></li><li><p>: A win for one of the players or a draw.</p></li><li><p>: In Tic-Tac-Toe, the first player has a strategic advantage. With optimal play from both players, the game always ends in a draw or a win for the first player. According to my estimates, and confirmed by experiment (when the agent initially plays like a random opponent), the probability of winning for the player who makes the first move to the center is about 60% (600 out of 1000 games), a loss is about 30%, and a draw is 10%.</p></li></ul><p><strong>Board Representation and State Vector</strong></p><p>The game  is represented by a Board struct, and its state is converted into a numerical vector for the neural network using the  method.</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Deep Q-Learning Agent (DQN)\n</h3><p>Our agent is based on the  architecture, which combines Q-learning with deep neural networks. This is evident in how the action for the next state is selected using the main Q-network, and then its Q-value is evaluated using the target network. This helps to reduce the overestimation of Q-values characteristic of classic DQN.</p><p>The board state is converted into a numerical vector that is fed into the neural network. For each of the 9 board cells:</p><ul><li><p>, if the cell is occupied by the agent's symbol.</p></li><li><p>, if the cell is occupied by the opponent's symbol.</p></li><li><p>, if the cell is empty.</p></li></ul><p><strong>Neural Network Architecture</strong></p><p>The agent uses a fully connected neural network.</p><ul><li><p>: 9 neurons (corresponding to the 9 board cells).</p></li><li><p>: One hidden layer with 27 (or 45/72) neurons with a Tanh activation function. The minimum number of neurons in the hidden layer that yielded satisfactory results was 9.</p></li><li><p>: 9 neurons (corresponding to 9 possible actions/cells), also with a Tanh activation function.</p></li></ul><p>The agent learns by interacting with the environment (the Tic-Tac-Toe game) and receiving rewards.</p><p>The  stores the agent's experiences, allowing for efficient training by sampling past interactions.</p><div><pre><code></code></pre></div><p><strong>DQNAgent Structure and Action Selection</strong></p><p>The  struct holds the Q-network, target network, replay buffer, and training parameters. The  method implements the epsilon-greedy strategy.</p><div><pre><code></code></pre></div><p>The  method implements the core Double DQN update rule, using the replay buffer and target network.</p><div><pre><code></code></pre></div><p>Note the Bellman equation:</p><div><pre><code></code></pre></div><p>Using this mechanism, the \"reward\" gradually \"propagates\" from the end of the game to its beginning.</p><p>The  function defines the reward structure for the agent:</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Training Process and Results\n</h3><p>So, we are all set for testing.\nLet's briefly summarize what we have:</p><ul><li>A  with a 9:27:9 architecture that knows nothing.</li><li>A  and implementation of game logic (start, rule adherence, and end detector (win/loss/draw)).</li><li>An  who can make moves into free cells randomly. And that's all.</li><li>An  that, from the start, plays like its opponent but has the ability to learn. It knows when the game ends. And it knows whether it finished the game well or poorly.</li></ul><p>What can we observe and by what criteria can we determine the learning progress?</p><ul><li>Firstly, it's the agent's win percentage (expected to increase).</li><li>Secondly, we can observe the decrease in Epsilon to understand what is happening – whether the agent is exploring (making random moves) or utilizing its accumulated experience.</li><li>Thirdly, we can look at the weight vector on the output layer to understand how the agent decides to make its first move on an empty board (it is expected that the center will have the largest weight, then the corners, and then the sides as the least promising).</li><li>And finally, we can track the maximum number of wins achieved throughout the entire experiment.</li></ul><p>Let's see what came of this and whether our agent will show growth in its competence.</p><p><strong>Training the Agent as the First Player</strong></p><p>In this scenario, the agent (Player X) always makes the first move in the game. To accelerate convergence and ensure the learning of an optimal starting strategy, we can experimented with forcing the first move to the center of the board (default without this).</p><p>These are the settings that can be changed when conducting an experiment.\n'Knobs' that can be 'turned' for fine-tuning.<p>\nThe network implemented here usually forgives even gross errors.</p>\nThe most you risk is falling into a local minimum instead of a global one.<p>\nFeel free to try it yourself.</p></p><div><pre><code></code></pre></div><div><pre><code>PS D:\\go\\go-sample-tictactoe&gt; go run .\nStarting DQN agent training (X) against a random opponent (O) for Tic-Tac-Toe...\nEpisode: 1000, Wins X: 571 (571), Losses X: 307, Draws: 122, Epsilon X: 0.9876, Q(start): 0.4501|0.5164|0.4117  0.5863[0.5449]0.4485  0.3473|0.4411|0.4166\nEpisode: 2000, Wins X: 590 (590), Losses X: 284, Draws: 126, Epsilon X: 0.9715, Q(start): 0.3683|0.4917|0.3963  0.2354[0.6179]0.3571  0.2806|0.3732|0.3737\nEpisode: 3000, Wins X: 585 (590), Losses X: 294, Draws: 121, Epsilon X: 0.9558, Q(start): 0.2797|0.4310|0.3559  0.1067[0.4802]0.2719  0.1742|0.2720|0.2669\nEpisode: 4000, Wins X: 588 (590), Losses X: 285, Draws: 127, Epsilon X: 0.9402, Q(start): 0.2361|0.4065|0.3263  0.1037[0.3945]0.2356  0.1445|0.2771|0.2186\n...\nEpisode: 297000, Wins X: 952 (969), Losses X: 43, Draws: 5, Epsilon X: 0.0156, Q(start): 0.5193|0.3906|0.2095  0.5050[0.3286]0.4332  0.1040|0.3630|0.2807\nEpisode: 298000, Wins X: 957 (969), Losses X: 40, Draws: 3, Epsilon X: 0.0154, Q(start): 0.5189|0.3942|0.1822  0.4883[0.3528]0.4347  0.1214|0.3698|0.2528\nEpisode: 299000, Wins X: 977 (977), Losses X: 20, Draws: 3, Epsilon X: 0.0152, Q(start): 0.5201|0.4159|0.1651  0.4708[0.3775]0.4352  0.1291|0.3870|0.2078\n--- Target network updated at step 1050000 (Epsilon: 0.0151) ---\nEpisode: 300000, Wins X: 968 (977), Losses X: 23, Draws: 9, Epsilon X: 0.0150, Q(start): 0.4733|0.4222|0.1718  0.4519[0.4072]0.4743  0.1526|0.4102|0.1889\n...\nEpisode: 497000, Wins X: 952 (990), Losses X: 43, Draws: 5, Epsilon X: 0.0011, Q(start): 0.3910|-0.3152|-0.2335  -0.2994[0.4932]0.0485  0.0135|-0.4090|-0.2174\n--- Target network updated at step 1700000 (Epsilon: 0.0011) ---\nEpisode: 498000, Wins X: 942 (990), Losses X: 55, Draws: 3, Epsilon X: 0.0011, Q(start): 0.3798|-0.3127|-0.2245  -0.3118[0.4557]0.0439  0.0072|-0.4120|-0.2115\nEpisode: 499000, Wins X: 936 (990), Losses X: 56, Draws: 8, Epsilon X: 0.0011, Q(start): 0.3651|-0.3107|-0.2292  -0.3250[0.3711]0.0254  -0.0033|-0.4216|-0.1881\nEpisode: 500000, Wins X: 954 (990), Losses X: 41, Draws: 5, Epsilon X: 0.0011, Q(start): 0.3561|-0.3119|-0.2014  -0.3267[0.3711]0.0196  -0.0191|-0.4155|-0.1827\n\nTraining complete.\nTesting the agent (X against random O)...\n\nTest Results (1000 games, Agent X vs random O):\nAgent X Wins: 956\nAgent X Losses (Random O Wins): 39\nDraws: 5\n</code></pre></div><p>When the agent was to make the first move to the center, it demonstrated outstanding results, achieving up to 992 wins out of 1000 (in some cases) test games against a random opponent, with a minimal number of losses and draws. This confirms that the agent successfully learned an optimal strategy for the first player.</p><p>\"Win Growth (agent moves first)\" graph:</p><p><strong>Training the Agent as the Second Player</strong></p><p>In this scenario, the opponent (Player O) always makes the first move randomly, and our agent (Player X) always responds second. This puts the agent in a less advantageous position, as the first move in Tic-Tac-Toe provides a strategic advantage. The goal of this experiment is to test how well the agent can adapt to the role of the second player and minimize the opponent's advantage.</p><ul><li><p>The same hyperparameters as for the first scenario were used.</p></li><li><p>The only change is that the opponent always makes the first move.</p></li></ul><div><pre><code></code></pre></div><div><pre><code>PS D:\\go\\go-sample-tictactoe&gt; go run .\nStarting DQN agent training (X) against a random opponent (O) for Tic-Tac-Toe...\nEpisode: 1000, Wins X: 296 (296), Losses X: 587, Draws: 117, Epsilon X: 0.9902, Q(start): 0.2536|0.3091|0.2323  0.3227[0.3963]0.3577  0.4702|0.4281|0.2465\nEpisode: 2000, Wins X: 298 (298), Losses X: 590, Draws: 112, Epsilon X: 0.9766, Q(start): 0.1909|0.3386|0.2124  0.3879[0.3856]0.3629  0.5409|0.4653|0.2537\nEpisode: 3000, Wins X: 295 (298), Losses X: 598, Draws: 107, Epsilon X: 0.9633, Q(start): 0.0990|0.3089|0.1477  0.3343[0.3218]0.2929  0.5055|0.4229|0.2093\nEpisode: 4000, Wins X: 261 (298), Losses X: 601, Draws: 138, Epsilon X: 0.9501, Q(start): 0.0718|0.2712|0.0945  0.3015[0.2998]0.2637  0.4218|0.3067|0.1649\n...\nEpisode: 69000, Wins X: 610 (610), Losses X: 342, Draws: 48, Epsilon X: 0.3986, Q(start): 0.5987|0.5451|0.5798  0.5912[0.6872]0.5793  0.6331|0.5710|0.5508\nEpisode: 70000, Wins X: 610 (610), Losses X: 359, Draws: 31, Epsilon X: 0.3935, Q(start): 0.5962|0.5428|0.5695  0.5917[0.6848]0.5758  0.6282|0.5837|0.5531\nEpisode: 71000, Wins X: 606 (610), Losses X: 365, Draws: 29, Epsilon X: 0.3885, Q(start): 0.5914|0.5330|0.5650  0.5899[0.6844]0.5742  0.6268|0.5863|0.5423\nEpisode: 72000, Wins X: 570 (610), Losses X: 407, Draws: 23, Epsilon X: 0.3835, Q(start): 0.5867|0.5349|0.5650  0.5872[0.6871]0.5795  0.6202|0.5833|0.5385\nEpisode: 73000, Wins X: 564 (610), Losses X: 405, Draws: 31, Epsilon X: 0.3786, Q(start): 0.5912|0.5303|0.5606  0.5833[0.6815]0.5811  0.6198|0.5832|0.5418\nEpisode: 74000, Wins X: 612 (612), Losses X: 353, Draws: 35, Epsilon X: 0.3737, Q(start): 0.5958|0.5287|0.5575  0.5840[0.6816]0.5730  0.6146|0.5765|0.5359\n--- Target network updated at step 250000 (Epsilon: 0.3694) ---\nEpisode: 75000, Wins X: 588 (612), Losses X: 373, Draws: 39, Epsilon X: 0.3689, Q(start): 0.6005|0.5305|0.5658  0.5903[0.6910]0.5730  0.6132|0.5845|0.5456\nEpisode: 76000, Wins X: 650 (650), Losses X: 311, Draws: 39, Epsilon X: 0.3642, Q(start): 0.6314|0.5703|0.5932  0.6218[0.7187]0.6036  0.6409|0.6085|0.5756\n...\nEpisode: 497000, Wins X: 792 (822), Losses X: 185, Draws: 23, Epsilon X: 0.0020, Q(start): 0.5345|0.3504|0.2066  0.2787[0.5258]0.4991  0.1034|0.5461|0.5410\nEpisode: 498000, Wins X: 804 (822), Losses X: 168, Draws: 28, Epsilon X: 0.0020, Q(start): 0.5329|0.3472|0.2169  0.2769[0.5331]0.4969  0.1012|0.5451|0.5428\nEpisode: 499000, Wins X: 782 (822), Losses X: 180, Draws: 38, Epsilon X: 0.0019, Q(start): 0.5315|0.3456|0.2200  0.2724[0.5288]0.4962  0.1074|0.5430|0.5417\nEpisode: 500000, Wins X: 780 (822), Losses X: 188, Draws: 32, Epsilon X: 0.0019, Q(start): 0.5310|0.3443|0.2219  0.2718[0.5285]0.4971  0.1044|0.5442|0.5446\n\nTraining complete.\nTesting the agent (X against random O)...\n\nTest Results (1000 games, Agent X vs random O):\nAgent X Wins: 783\nAgent X Losses (Random O Wins): 191\nDraws: 26\n</code></pre></div><p>In the initial stages of training, the agent, as expected, showed a lower win percentage and a higher number of losses/draws due to the opponent's first-move advantage. However, as training progressed, the agent significantly improved its performance.</p><p><strong>Example game after training:</strong></p><div><pre><code>Example game after training (X vs random O):\n-------------\n|   |   |   |\n-------------\n|   |   |   |\n-------------\n| O |   |   |\n-------------\nX's Turn:\n-------------\n|   |   |   |\n-------------\n|   |   | X |\n-------------\n| O |   |   |\n-------------\nO's Turn:\n-------------\n|   |   |   |\n-------------\n| O |   | X |\n-------------\n| O |   |   |\n-------------\nX's Turn:\n-------------\n|   |   |   |\n-------------\n| O |   | X |\n-------------\n| O |   | X |\n-------------\nO's Turn:\n-------------\n|   |   |   |\n-------------\n| O |   | X |\n-------------\n| O | O | X |\n-------------\nX's Turn:\n-------------\n|   |   | X |\n-------------\n| O |   | X |\n-------------\n| O | O | X |\n-------------\nGame Over! Player X won!\n</code></pre></div><p>\"Win Growth (agent moves second)\" graph:</p><p>These results show that the agent successfully learned to optimally respond to various first moves by the opponent, significantly increasing its win rate despite the strategic disadvantage of moving second. The \"first move selection\" problem for the agent disappeared, as it focused on reactive tactics.</p><p>The project on training a DQN agent for Tic-Tac-Toe successfully demonstrated the effectiveness of deep reinforcement learning algorithms even for simple deterministic games. We saw how the agent can adapt to different roles (first/second player) and achieve near-optimal performance against a random opponent.</p><p>The most guaranteed way to make the agent learn \"human\" optimality (center, corners) is to train it against a stronger, strategic opponent (e.g., Minimax AI) or in self-play mode. These opponents will punish any suboptimal move, forcing the agent towards true optimality.</p><p>Write in the comments if you are interested, and I will arrange a battle (a real fight) between two agents. For now, my immediate plans include a final \"move\" to Linux and writing a small backend (e.g., a REST API) for a simple client to try playing with what has been developed.</p>","contentLength":14687,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Revisiting My Old Neural Network Project in Go","url":"https://dev.to/harun_alrasyid_d6c9f599c/revisiting-my-old-neural-network-project-in-go-37ep","date":1751357835,"author":"Harun Al Rasyid","guid":178770,"unread":true,"content":"<p>It was messy, naïve, and mostly forgotten in my GitHub. The goal was to better understand the internals of forward and backpropagation by implementing everything manually, without relying on external ML libraries. The code worked, but it was very basic and lacked in performance.</p><p>Now, I’m revisiting this project to refactor the code and improve the overall design. Here’s a summary of what I’ve improved:</p><p>The codebase already had a good separation of concerns: activation functions, loss, optimizers, and network logic were neatly organized into their own modules. This made it relatively easy to extend the library with new features.</p><h2>\n  \n  \n  The Improvement : Parallel Training\n</h2><p>To improve training efficiency, I implemented . </p><ul><li>Training data is split into multiple batches, each processed in a separate goroutine using .</li><li>I used  to safely collect training errors and weight deltas from all batches.</li><li>After all batches are processed, the deltas are merged using a custom  function and applied once at the end of the epoch.</li></ul><p>. Initial versions caused data races when multiple goroutines accessed or modified shared weight structures.: Delay all updates until after parallel computation finishes.</p><p><strong>Locking Can Kill Parallelism</strong>. Putting locks around weight updates inside each batch makes the process sequential. It removes the benefit of parallelism.: Do all mutation  goroutines have joined.</p><p><strong>Unstable Training Without Averaging</strong>. Summing raw deltas led to unstable error gradient.: Add delta average in  to stabilize learning.</p><ul><li>Training speed increased (especially for datasets like Iris).</li></ul>","contentLength":1581,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Make C++ a better place #4: Go as an alternative","url":"https://dev.to/pikotutorial/make-c-a-better-place-4-go-as-an-alternative-57ip","date":1751356680,"author":"pikoTutorial","guid":178745,"unread":true,"content":"<p>The Go programming language brings simplicity and a clear design philosophy that make it attractive for developers who are tired of the complexity of C++. In this article, we will explore the most interesting features of the Go language that distinguish it from C++.</p><h2>\n  \n  \n  Producer/consumer implementation with Go\n</h2><p>If you didn't see <a href=\"https://pikotutorial.com/make-c-a-better-place-0-introduction/\" rel=\"noopener noreferrer\">the first article of this series</a>, please read it because I explained there what are the things I want to check about each C++ alternative and how I'm going to do that.</p><p>Below you case see the implementation of the <a href=\"https://github.com/pasparsw/make_cpp_a_better_place/blob/main/languages_comparison/cpp/producer_consumer.cpp\" rel=\"noopener noreferrer\">reference producer/consumer application</a> written in Go. I really wanted this implementation to be based on channels (more on them at the end of the article) because it's a very interesting feature of Go, but because channels are by design meant to be used for one-to-one communication, they are not suitable for this use case.</p><div><pre><code></code></pre></div><p>So accordingly to the list of checks that I'm interested in, Go gives us the following statistics:</p><ul><li> - this code is 106 lines long (124 lines for C++)</li><li> - it takes 91ms to build this application (2149ms for C++) with command:\n</li></ul><div><pre><code>/usr/local/go/bin/go build  producer_consumer.go\n</code></pre></div><ul><li> - it takes 2172ms to run it (597ms for C++)</li><li> - 1.4MB (105kB for C++)</li></ul><h3>\n  \n  \n  What I like about this code?\n</h3><p>In Go you don't need to specify size of the fixed-size array if you provide its elements during initialization. This is a very nice feature because whenever you want to change the content of the array, you just add or remove an element from the initialization list, without having to additionally change the size of the array.</p><p>I love the fact that Go doesn't force me to create a thread, specify its worker, start it, wait for every thread to join separately etc. - if you have a function that you want to run asynchronously, you just call  and that's it.</p><p>Go fails to build the program if a certain variable is not used. It's not a warning or a suggestion - you just won't get any executable binary out of such source code.</p><p>Go allows to provide all the imports in form of a list, so I didn't need to repeat \"import...\" for every required element.</p><h3>\n  \n  \n  What I don't like about this code?\n</h3><h4>\n  \n  \n  Consts not applicable to all types\n</h4><p>I was not able to create e.g. a constant array because Go doesn't allow for that.</p><p>It's not visible directly in the example, but Go's encapsulation relies on the naming convention - if something starts with a upper-case letter, it's public (available outside of the package) and if something starts with a lower-case letter, it's private (not visible form outside of the package). Although it solves the problem of having special keywords like ,  etc., I think it can sometimes be a pain in the ass because I imagine a situation in which I want to just change the visibility of the function to private and suddenly I need to change the name of the function in all places where it has been already used within the package.</p><p>In the Producer/Consumer example code I use a variadic template to provide the constructor's arguments to  function depending on what worker type I am currently creating (Producer vs Consumer). Unfortunately, Go doesn't have that. I thought that I'll workaround that just by making some arguments having default values, so that I can provide only the ones which are relevant during creation of a specific worker. To my surprise, it turned out that Go doesn't allow function's argument to have a default value.</p><p>Moreover, there's not even a built-in enum type which forces user to define enums in a pretty weird way, not fitting into the general simplicity of the Go language.</p><h2>\n  \n  \n  Using Go to write C++ code for the existing code bases\n</h2><p>Go compiles directly to the machine code, so there's no out-of-the-box way to generate C++ code out of it.</p><h2>\n  \n  \n  Using existing C++ code in Go\n</h2><p>Go does not allow to use C++ code within Go programs. There is Cgo, but it requires to wrap all the C++ functions in a C interface, so effectively it does not allow for usage of all C++ features. For example, our <a href=\"https://github.com/pasparsw/make_cpp_a_better_place/blob/main/languages_comparison/cpp/lib_user.cpp\" rel=\"noopener noreferrer\">our reference C++ library user</a> uses templates which are not supported in C. So for me, the final conclusion is that I just can't use the existing C++ code writing programs in Go.</p><h2>\n  \n  \n  Other interesting Go features\n</h2><h3>\n  \n  \n  Concurrency - Go's main achievement\n</h3><p>Every programming language has something what its developers put at the center of its philosophy. For Go, concurrency may be considered as such thing. It has a very interesting approach to concurrency and thread-safety summarized by the sentence:</p><blockquote><p>Do not communicate by sharing memory; instead, share memory by communicating. </p></blockquote><p>Go implements it by usage of channels which are Go's attempt to assure thread-safety by design and not by usage of synchronization primitives like mutexes. Channels may be considered shared resources (a channel may be as simple as a single integer value) which can be accessed only by one goroutine at a time. If you're a C++ programmer, you can see the channel as a combination of ,  and . Below you can find the code showing channels in action (notice also how simple it is to spin up a new thread-like execution flow just by adding  before the function call):</p><div><pre><code></code></pre></div><p>Channels have their own -like statement which is called  in Go. It allows to react upon incoming data from multiple channels:</p><div><pre><code></code></pre></div><p>I wondered if this point shouldn’t actually be at the top of the list because the situation with implicit conversions in C++ is so bad and so confusing for the beginners that I recently started to consider it as one of the most important features of the programming language. It's mainly because C++ claims to be a strongly typed language, which lets your guard down, but in reality you come across multiple situations in which the language behaves as if it doesn't care about the types. Here is an (abstract, but vivid example - I don't want to repeat boring examples with assigning  to a ) example of what I mean - this is a valid and working code in C++:</p><div><pre><code></code></pre></div><p>Someone will say <em>\"hey, just add an  before the constructor and the compilation will fail\"</em> and it's true, but then I can ask what if something like this slips through the review:</p><div><pre><code></code></pre></div><p>It compiles again. Now I hear voice saying (because I already heard such argument) that <em>\"it is not a bug because you see  type name explicitly written on the left of the  which is being initialized with , so it is basically a language feature and no implicit conversion here\"</em>. Ok, let's then add a simple function to this code and tell me where do you see the  type name during the function call:</p><div><pre><code></code></pre></div><p>The answer is: you don't. And remember that  class from the example can be arbitrarily complex type or can start some resource management directly in the constructor, so maybe you've just constructed a heavy communication proxy or a database connection broker directly out of an integer literal.</p><p>My point is that there's just so many ways in C++ to trigger an implicit conversion that you must never forget about it. In Go the situation is simple - if you have any custom type definition, even a type which is basically an alias, like below:</p><p>you must convert everything explicitly to that type.</p><h3>\n  \n  \n  Uniform formatting with Gofmt\n</h3><p>One of Go's standout features is its commitment to uniformity of code formatting. The language comes with a built-in formatter  that imposes a consistent style across all Go codebases. Unlike C++, where formatting styles can vary greatly from one team to another, Go enforces a common standard. This means that Go developers spend less time debating style guidelines and more time focusing on solving real problems.</p><p>However, Go's formatting solution isn't perfect. For instance, it doesn't care much about line length or whitespaces, which means that two developers using  may still produce different source code.</p><p>Go has only one way to write scope curly brackets after ,  etc. The opening curly bracket must be placed in the same line because otherwise the Go lexer may insert a semicolon after the statement changing its meaning, for example:</p><p>In fact, the latter version won't even compile because the compiler will complain about an unexpected newline.</p><p>One of Go’s interesting features is named return values, which allow you to name return variables directly in the function signature:</p><div><pre><code></code></pre></div><p>By doing so, you can use  directly inside the function without explicitly declaring it again. This reduces boilerplate code and helps the code to be self-documented. The downside is that these named return values are zero-initalized to their default values, so it also allows to return value which was not modified during the function flow (so was not explicitly initialized to any particular value).</p><p>However, I admit that this may be a concern brought from other programming languages, a concern that is not applicable to Go. Go actually encourages to design types accordingly to  rule meaning that the memory initialized with zeros translates to some valid state of the object (for example, a zeroed mutex translates to an unlocked mutex). That brings us to the next interesting concept in Go.</p><h3>\n  \n  \n  Memory allocation:  vs. </h3><p>In Go, there are two ways to allocate memory:  and . These functions differ significantly from their similarly-sounding counterparts in C++ (, , ).</p><p>The  function allocates memory for an object, but does not initialize it. I must admit that at the beginning for me, as a person used to C++, it was pretty confusing because in C++ you can't write the following code if  doesn't have a default constructor :</p><p>The behavior of Go's  behaves more like such code:</p><div><pre><code></code></pre></div><ul><li>allocate memory for the object</li><li>get a pointer to such an allocated and initialized object</li></ul><p>you use composite literals (Go's constructors) like on the code snippet bellow:</p><div><pre><code></code></pre></div><p>The  function is a totally different story, starting with the fact that it doesn't even return a pointer. If you come from outside of C++ world, you could ask , but if you're a C++ insider you see that the connection is obvious. Its usage is also limited to slices, maps and channels. All these types happen to carry a reference to a data structure that must be initialized before use what  is responsible for.</p><h3>\n  \n  \n  Resource management with defer\n</h3><p>Go gives the ability to defer a statement until the end of functions scope (similar as <a href=\"https://pikotutorial.com/make-c-a-better-place-3-d-as-an-alternative\" rel=\"noopener noreferrer\">the scope guard statements in D</a>). The deferred statements are deferred in form of a stack, so their execution order is reversed. It's helpful and definitely better then writing the same functions at the end of the scope, but as I mentioned in the article about D, I'm not a big fan of defer-like mechanisms because although it helps to not forget about releasing certain resource (e.g. after adding a new path to the function), it still must be manually typed in by the programmer who is responsible for remembering it, so we can be sure that sooner or later someone will forget about it anyway.</p><p>Go differentiates between two types of errors: recoverable and unrecoverable. Recoverable error handling relies on multivalue returns because a function may return 2 values - the actual returned value and the associated error which can be checked by the caller before using the value. </p><p>In contrast, unrecoverable errors, such as accessing out-of-bounds slices, trigger a , which immediately stops normal execution and begins stack unwinding. However, Go provides the  function (in my opinion, not the best name choice for the \"unrecoverable\" type of error handling) to regain control during the unwinding process. Because the only code that is able to run during stack unwinding is inside the deferred functions,  must be used inside of a deferred function as well.</p><div><pre><code></code></pre></div><p>If the section  panics, the control flow will be regained by the  and error will be printed.</p>","contentLength":11650,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"🕵️‍♂️ Stop guessing why your Go service is slow.","url":"https://dev.to/aleksei_aleinikov/stop-guessing-why-your-go-service-is-slow-514h","date":1751354852,"author":"Aleksei Aleinikov","guid":178744,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"⚡ Upgrade Your Go APIs to HTTP/2 in 2025 — Why You’re (Probably) Late","url":"https://dev.to/aleksei_aleinikov/upgrade-your-go-apis-to-http2-in-2025-why-youre-probably-late-5dgc","date":1751354514,"author":"Aleksei Aleinikov","guid":178743,"unread":true,"content":"<p>Browsers switched years ago. Your CDN speaks h2. But… your Go backend? Still whispering HTTP/1.1 like it’s 2010.</p><p>What you’re missing out on:\n✅ Multiplexed requests — no more Head-of-Line blocking<p>\n✅ Fewer connections — lower TLS handshake and socket overhead</p>\n✅ Automatic header compression — smaller packets, faster responses<p>\n✅ Happier users and lower cloud bills</p></p><p>🧑‍💻 The upgrade? Usually just one line plus TLS.\n🚀 The gain? Snappier APIs, smoother streams, leaner infra.</p><p>👉 Check out a minimal working Go example (and see why a single </p>","contentLength":565,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"⏰🐹 Parallel Tasks in Go 2025: Tame Your Timeouts & Tickers Like a Pro","url":"https://dev.to/aleksei_aleinikov/parallel-tasks-in-go-2025-tame-your-timeouts-tickers-like-a-pro-17i2","date":1751354182,"author":"Aleksei Aleinikov","guid":178742,"unread":true,"content":"<p>Spawning 1,000 goroutines is easy. Managing them without chaos?</p><p>That’s mastery.\n✅ Semaphore channels cap concurrency cleanly<p>\n✅ Back-pressure lets you fail fast (no more silent queue pileups)</p>\n✅ time.After() for one-liner timeouts — no stuck clients<p>\n✅ time.NewTicker() keeps heartbeats flowing safely</p>\n✅ Reuse timers to save GC and stay lean under load</p><ul><li>Protect APIs from flooding in milliseconds</li><li>Stop ghost pings with smart cancels</li><li>Run watchdogs without memory leaks</li></ul>","contentLength":473,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"⚡🐹 Optimizing Go in 2025: Slices, Strings & sync.Pool Mastery","url":"https://dev.to/aleksei_aleinikov/optimizing-go-in-2025-slices-strings-syncpool-mastery-3plj","date":1751354129,"author":"Aleksei Aleinikov","guid":178741,"unread":true,"content":"<p>Slices and strings in Go look simple — until they eat your RAM and GC pauses.</p><p>✅ Pre-allocate with make([]T, 0, N) to skip hidden copies\n✅ Use strings.Builder for clean, fast string joins<p>\n✅ sync.Pool = free GC breaks during traffic spikes</p>\n✅ Reuse buffers, reset with care, avoid race bugs</p><ul><li>Filter slices in place: filtered := events[:0] — no new allocs</li><li>One static HTML builder instead of 20 tiny buffers</li><li>Reuse JSON encoders to slash latency under load</li></ul><p>Takeaway:\nKnow how slices grow, pick the right string concat method, and treat pools like sharp knives — powerful but dangerous.</p>","contentLength":587,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"2N3904 Transistor: Hogwarts’ Unyielding Wand for Circuits & Cosmic Spells","url":"https://dev.to/ersajay/2n3904-transistor-hogwarts-unyielding-wand-for-circuits-cosmic-spells-12ck","date":1751353469,"author":"ersajay","guid":178740,"unread":true,"content":"<p>The Leaky Cauldron’s Hidden Tool\nOn a drizzly afternoon in Diagon Alley, I ducked into Quality Wands &amp; Oddments—a shop that sold more than just wands. Behind the display of Felix Felicis and Pensieves, the owner, Mr. Fizzlewick, held up a small, cylindrical device, no bigger than a Bertie Bott’s Every Flavor Bean.<p>\n“That’s a 2N3904 transistor,” he said, grinning. “Not flashy like a Lumos charm, but it’s the Ollivander’s wand of electronics—trusted by hobbyists, engineers, even NASA. Powers everything from LED strips to Mars rovers. Unyielding. Ubiquitous. Wizarding.”</p>\nIntrigued, I leaned in. This wasn’t just metal and silicon—it was a 2N3904, the unsung hero of circuits. Let’s unmask its magic.</p><ul><li>What Is a 2N3904? (A Workhorse, Not a Show Pony)\nThe 2N3904 is Hogwarts’ “NPN bipolar junction transistor” 🔧—a TO-92 package (think: a tiny, cylindrical wand core) built for general-purpose amplification and switching. Here’s its spellbook (specs):</li></ul><p>Voltage: 40V collector-emitter (VCEO)—unfazed by voltage storms (unlike Tarantallegra—messy, and unwanted).\nCurrent: 200mA collector current (IC)—sips power like a Butterbeer sip, not a Firewhiskey chug.<p>\nSpeed: 300MHz transition frequency (fT)—faster than a Knight Bus in reverse.</p></p><p>Real-World Magic: Survives garage lab mishaps and Martian simulations. It’s the Disillusionment Charm of transistors: invisible, but essential.</p><ul><li>2N3904 Pinout: The Three Spells of a Wand\nThe TO-92 package has three pins—think of them as the “spells” that make it work:</li></ul><p>Emitter (E): The exit for electrons—where magic leaves the wand.\nBase (B): The control gate—a flick of your wrist (or a small current) to start the flow.<p>\nCollector (C): The entry for electrons—where magic begins.</p></p><p>Pro Tip: Face the flat side, and pins are E-B-C left to right. Mix them up, and your circuit becomes a Pyrotechnics spell gone wrong (smoke, sparks, and a “Oops”).</p><ul><li>The Datasheet: The 2N3904’s Magic Manual\nEvery wizard needs a Advanced Potion-Making book—for <a href=\"https://www.ersaelectronics.com/blog/what-is-a-2n3904-and-2n3904-transistor-applications-guide\" rel=\"noopener noreferrer\">2N3904</a>, it’s the datasheet (grabbed from ON Semiconductor or STMicroelectronics). Key takeaways:</li></ul><p>Absolute Max Ratings: 40V, 200mA—exceed these, and it’s Finite Incantatem (game over).\nDC Current Gain (hFE): 100-300—amplifies signals like Sonorus for electrons.<p>\nThermal Limits: 200°C/W—don’t let it cozy up to power resistors (they’re Furnunculus-hot).</p></p><p>Fun Fact: The “Typical Applications” section is a Marauder’s Map for hobbyists—plots paths from LED strips to insulin pumps.</p><ul><li>Why Wizards (Engineers) Swear by 2N3904\n2N3904 isn’t a Elder Wand—it’s the Hedwig of transistors: reliable, affordable, and everywhere.</li></ul><p>Cost: $0.02/unit—cheaper than a Pumpkin Pastie (and way more useful).\nAvailability: Sold at Digi-Key, Amazon, even your local electronics shop—like Fizzing Whizbees in a candy store.<p>\nVersatility: Powers LED strips (keeping your dorm lit), insulin pumps (saving lives), and Tesla key fobs (stopping parking-lot tantrums).</p></p><p>NASA Rovers: Survives -55°C Mars simulations (Duracell? Expelliarmus).\nYour Garage Lab: Handles your DIY “I’ll fix it!” projects (even when you fry it).</p><ul><li>Swapping Spells: Can You Replace It?\nNot all <a href=\"https://www.ersaelectronics.com/search/transistors\" rel=\"noopener noreferrer\">transistors</a> are Unforgivable Curses—some are just different. Here’s who plays well with 2N3904:</li></ul><p>2N2222/2N2222A: Upgraded wands. Higher current (600mA) or voltage (75V)—great for muscle.\nBC547: Weaker cousin. Lower current (100mA)—like a Wingardium Leviosa that fizzles.<p>\n2N3906: PNP polarity—reverse magic. Like a wand that casts Muffliato when you want Lumos.</p>\n2N7000 (MOSFET): Different magic type. Not a BJT—like using a broom for Apparition.</p><p>Golden Rule: Match polarity (NPN/PNP) first—like matching wand cores. Then check specs.</p><ul><li>Wielding 2N3904 Like a Pro (No Burned Fingers)\nWant to cast 2N3904 spells without chaos? Follow these steps:\nStep 1: Calculate the Base Resistor (RB)\nFormula: RB = (VCC - VBE) / IB\nThink of it as measuring Polyjuice Potion—precision matters.\nStep 2: Solder Carefully\nNo third-degree burns allowed. Use a steady hand, like repairing a Time-Turner.\nStep 3: Test (and Pray)\nIf smoke appears, blame the datasheet (or your shaky soldering).\nPro Tip: For SMD designs, use MMBT3904—its pocket-sized twin (perfect for tiny spells).</li></ul><ul><li>Where to Buy (Avoid Knockturn Alley Fakes)\nIn 2025, shop like a Gryffindor—no dodgy Knockturn Alley fakes:</li></ul><p>Trusted Sources: Digi-Key, Ersaelectronics—reliable as Madam Pomfrey.\nRed Flags: eBay listings with stock photos and “100% Genuine!!” claims—they’re Gilderoy Lockhart in disguise.</p><p>Price Range: $0.02/unit retail; cheaper in bulk (AliExpress, but verify suppliers!).</p><ul><li>The Future: 2N3904 in 2030 &amp; Beyond\nWhat’s next for our tiny wand?</li></ul><p>AI Gadgets: Powers AR glasses that don’t melt your face (no Incendio mid-meeting).\nSmart Home Tech: Keeps your coffee maker from burning breakfast (no Fiendfyre at 7 AM).<p>\nMic Drop: Hoard these now. Future retro gamers will trade Golden Snitches for your stash.</p></p><p>Conclusion: The Unseen Guardian of Magic\n2N3904 isn’t flashy. It doesn’t cast Expecto Patronum or brew Polyjuice Potion. But it’s the reason your LED strips glow, your insulin pump works, and Mars rovers send back photos.<p>\nNext time you hold one, whisper, “Thanks, little wand.” It’s the least you can do for a transistor that keeps the magic of modern life alive.</p></p><p>Written by a witch who once fried a 2N3904 trying to power a toy broom. (Spoiler: It worked. Eventually.)\n🔧 Some magic isn’t in wands—it’s in the tools that keep the world turning.</p>","contentLength":5546,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Your Servers Deserve Better: Meet Minexus, a Smart Admin Agent System in Go","url":"https://dev.to/arhuman/your-server-deserves-better-meet-minexus-a-smart-admin-agent-system-in-go-41gn","date":1751330910,"author":"arhuman","guid":177036,"unread":true,"content":"<h2>\n  \n  \n  Meet Minexus — A Modular, Distributed Admin System in Go\n</h2><p>I was tired of managing my servers with brittle scripts, ad hoc SSH sessions, and clunky monitoring tools. So I built <a href=\"https://github.com/arhuman/minexus\" rel=\"noopener noreferrer\">Minexus</a>, a modular platform to monitor and control servers via secure agents, with Go and gRPC under the hood.</p><ul><li>To send a command to 50 machines and get results back fast</li><li>To build your own admin plugins with Go</li><li>To manage your servers like a well-oiled, distributed system</li></ul><p>Then this might be up your alley.</p><p><a href=\"https://github.com/arhuman/minexus\" rel=\"noopener noreferrer\">Minexus</a> is made of 3 main components:</p><p> — the central server, connected to a PostgreSQL DB</p><p> — lightweight agents running on your hosts, communicating with the Nexus via gRPC + mTLS</p><p> — an admin UI and command interface, also talking to the Nexus</p><p>Minions register periodically. Commands go through the Nexus, and results are logged/stored. Want a new command? Just write a command.</p><p>It’s simple, extensible, and built for sysadmins/devops/devs who want control without vendor lock-in.</p><ul><li>Remote command execution (with return capture)</li><li>Service restarts across hosts</li><li>Health checks / monitoring plugins</li><li>Security scans (CVE lookup, etc.)</li></ul><p>Anything you can plug into a Go module...</p><p>Want to send restart-service nginx to all your production servers and get clean results in seconds? Minexus can do that.</p><p>It's early days, but it’s usable and growing. Contributors welcome — the command system (soon a plugin system) makes it a playground for Go devs.</p><p>You're not a coder, it's not a problem: I’d love 🙏 </p><ul><li>Feedback on the architecture</li><li>Suggestions for useful commands/plugins</li><li>Help testing on non-Linux environments</li><li>Ideas to make this your go-to internal admin framework</li></ul><h2>\n  \n  \n  Let’s Build This Together\n</h2><p>I believe sysadmin/devops tooling should be:</p><ul></ul><p>If you agree, give Minexus a spin, drop a comment, or open an issue.</p>","contentLength":1785,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Go for JavaScripters: Why You Should Learn Golang","url":"https://dev.to/brailyguzman/go-for-javascripters-why-you-should-learn-golang-1poo","date":1751322462,"author":"Braily Guzman","guid":176958,"unread":true,"content":"<ul><li>\nGo for JavaScripters: Why You Should Learn Golang\n\n<ul><li>Go vs JavaScript: Quick Comparison</li><li>\nData Types\n\n<ul></ul></li><li>Structs, Types, Methods, and Interfaces</li><li>\n\nStrings, Bytes, and Runes\n\n<ul><li>Strings (Immutable UTF-8)</li><li>Runes (Unicode Code Points)</li><li>Quick Comparison: JavaScript vs Go</li></ul></li><li>\n\nFunctions and Control Flow\n\n<ul><li>Returning Multiple Values</li></ul></li><li>Working with the strings Package</li><li>Concurrency in Go: Goroutines, Channels, WaitGroups, and Mutexes</li><li>Concurrency vs Parallelism</li><li>Common Gotchas for JS Devs</li><li>Mini Project: Word Counter CLI</li><li>Go Modules &amp; Project Structure</li><li>Simple HTTP Server Example</li><li>JavaScript to Go: Quick Reference Cheat Sheet</li></ul></li></ul><p>Are you a JavaScript developer looking to expand your backend skills, or just curious about a language that powers Docker, Kubernetes, and much of the modern cloud? Meet  (aka Golang): a language created at Google by Ken Thompson, Rob Pike, and Robert Griesemer to make software development fast, fun, and scalable.</p><p>Go is designed for simplicity, speed, and reliability. It compiles to a single binary, has a powerful standard library, and makes concurrency (doing many things at once) a breeze. If you love JavaScript's flexibility but crave more performance and predictability, Go is a perfect next step.</p><ul><li>How Go compares to JavaScript in syntax and philosophy</li><li>Go's type system, variables, and data structures</li><li>How to handle strings, bytes, and runes (Unicode!)</li><li>Using Go's  package for text manipulation</li><li>Go's powerful concurrency model (goroutines, channels, and more)</li><li>Common pitfalls for JS devs switching to Go</li><li>How to build and run Go code</li></ul><p>If you're a JavaScript developer looking to level up with a fast, modern language built for performance and scalability, it's time to meet Go.</p><p> is a middle-level programming language created at Google in 2007 by engineers who were tired of waiting around for their code to compile and dealing with overly complex systems. The result? A language that combines the performance of C (low-level) with the simplicity and readability of Python (high-level).</p><h2>\n  \n  \n  Go vs JavaScript: Quick Comparison\n</h2><div><table><tbody><tr></tr><tr></tr><tr></tr><tr></tr><tr><td>APIs, infra, CLI, servers</td></tr></tbody></table></div><p>Go shines when it comes to building fast, scalable backend systems. It's a top choice for writing APIs, web servers, CLI tools, and infrastructure-level software. Tools like , , and  are all written in Go, which says a lot about its speed and reliability.</p><p>One of Go's biggest superpowers is , the ability to run multiple tasks at the same time. In JavaScript, we use  and the event loop to handle asynchronous operations. In Go, we use goroutines, lightweight threads that are easy to spawn and manage.</p><p>Go also makes deployment a breeze. While Node.js apps often require npm install, package.json, and a dozen dependencies, Go compiles everything into a single binary file you can just drop on a server and run.</p><blockquote><ul><li>Front-end/browser-based development</li><li>Rapid prototyping with lots of UI</li><li>Projects needing generics-heavy data structures (though Go 1.18+ now supports generics, it's not as flexible as TypeScript)</li></ul></blockquote><p><strong>Go might not be ideal for:</strong></p><ul><li>Projects that require a lot of dynamic typing or runtime type changes (Go is statically typed and not as flexible as JavaScript or Python for dynamic data structures).</li><li>Codebases that rely heavily on advanced generics or metaprogramming (Go's generics are intentionally simple and less expressive than those in TypeScript, Rust, or C++).</li><li>Rapid prototyping where developer speed and a huge ecosystem of libraries (like npm for JS or PyPI for Python) are critical. Go's ecosystem is strong but not as broad for every domain.</li><li>Projects where you need mature, specialized libraries for things like data science, machine learning, or scientific computing (Go's ecosystem is growing, but not as deep as Python's in these areas).</li><li>Teams that require hot-reloading, scripting, or embedding code at runtime (Go is compiled and not designed for scripting or live code changes).</li></ul><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>Go is statically typed, so once a variable has a type, it can't be reassigned to something else, no switching  from a number to a string like in JS.</p><p>Unlike JavaScript, which uses a single  type for all integers, Go provides several distinct integer types. Each type has its own range and memory usage, allowing you to choose the most appropriate one for your needs.</p><div><table><thead><tr></tr></thead><tbody><tr></tr><tr><td>-2.1 billion to 2.1 billion</td></tr><tr></tr><tr><td>-9 quintillion to 9 quintillion</td></tr><tr></tr><tr><td>platform dependent (usually 32 or 64 bits)</td></tr><tr><td>platform dependent (unsigned version of int)</td></tr></tbody></table></div><p>For example, if you need to store an RGB (Red, Green, Blue) value ranging from 0 to 255, the best choice is  (an unsigned 8-bit integer), since it efficiently covers exactly that range. If you need to store larger values, simply choose an integer type with a bigger bit size, such as , , or , depending on your requirements.</p><ul><li> will default to 32 or 64 bits depending on your system.</li><li> types don't allow negative numbers but give you more room for positive values.</li><li>Go will catch integer overflows at compile time, not at runtime.\n</li></ul><div><pre><code></code></pre></div><p>This compiles but causes weird behavior:</p><div><pre><code></code></pre></div><div><table><tbody><tr><td>7 digits (single precision)</td></tr><tr><td>15 digits (double precision — default)</td></tr></tbody></table></div><div><pre><code></code></pre></div><p>Warning: Precision loss can happen with  when dealing with very large or very small decimal values.</p><p>In Go, arrays have  and contain elements of a single type.</p><div><pre><code></code></pre></div><p>You can also let Go infer the length:</p><div><pre><code></code></pre></div><ul><li>Arrays are . Assigning or passing them copies the whole array.</li><li>Their size is part of their type ( != )</li></ul><p>Slices are more flexible and commonly used than arrays.</p><div><pre><code></code></pre></div><p>You can create a slice from an array:</p><div><pre><code></code></pre></div><p>You can also use  to create a slice with a given length and capacity:</p><div><pre><code></code></pre></div><p>Slices are , so modifying one will affect the original array:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><h3>\n  \n  \n  Structs, Types, Methods, and Interfaces\n</h3><p>Go uses structs to group related data together, similar to objects in JavaScript. You can also define methods on types (including structs) to add behavior.</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>Interfaces in Go define a set of method signatures (behavior) that a type must implement. Any type that provides those methods \"satisfies\" the interface, even if it doesn't explicitly declare that it does. This allows you to write flexible and decoupled code, because functions can accept interfaces rather than concrete types. Interfaces are a key part of Go's approach to polymorphism and code reuse.</p><p>Duck typing is a concept where the type or class of an object is determined by its behavior (methods and properties), not by explicit inheritance or declaration. The phrase comes from \"If it walks like a duck and quacks like a duck, it's a duck.\" In Go, any type that implements the methods required by an interface is considered to satisfy that interface, even if it doesn't explicitly declare it. This is similar to how JavaScript objects can be passed to functions as long as they have the expected methods or properties.</p><p><strong>Interfaces Example (Multiple Types):</strong></p><div><pre><code></code></pre></div><p>\nJavaScript doesn't have interfaces, but you can use objects with the same method signatures (duck typing):</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Strings, Bytes, and Runes\n</h3><p>In , strings are sequences of UTF-16 code units. This usually feels like characters but isn't always, especially with emojis or characters from other languages.</p><p>In , strings are <strong>UTF-8 encoded immutable slices of bytes</strong>. That means:</p><ul><li>A string is a sequence of bytes.</li><li>Characters can take up multiple bytes.</li><li>Indexing directly gives you a , not a character.</li></ul><h4>\n  \n  \n  Strings (Immutable UTF-8)\n</h4><div><pre><code></code></pre></div><ul><li>Each character in  might take 1-3 bytes.</li><li>Strings are immutable. You  change characters via indexing.</li></ul><p><strong>Accessing bytes (not characters)</strong>:</p><div><pre><code></code></pre></div><ul><li>A  is an alias for , just a number from 0-255.</li><li> lets you inspect or manipulate the underlying raw data of a string.\n</li></ul><div><pre><code></code></pre></div><div><pre><code></code></pre></div><h4>\n  \n  \n  Runes (Unicode Code Points)\n</h4><p>A  in Go is an  representing a full Unicode character, even emojis and symbols from non-Latin scripts.</p><ul><li>Useful when dealing with , not bytes.</li><li>Can handle multi-byte characters like emoji properly.\n</li></ul><div><pre><code></code></pre></div><p>Use a  to  properly:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><h4>\n  \n  \n  Quick Comparison: JavaScript vs Go\n</h4><div><table><tbody><tr></tr><tr><td> → 4</td></tr><tr></tr><tr></tr></tbody></table></div><div><table><thead><tr></tr></thead><tbody><tr></tr><tr><td><code>utf8.RuneCountInString(str)</code></td></tr><tr></tr></tbody></table></div><h3>\n  \n  \n  Functions and Control Flow\n</h3><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>In Go, you must declare the type of each parameter and the return value. The function block is enclosed by  just like JS.</p><h4>\n  \n  \n  Returning Multiple Values\n</h4><p>Go functions can return more than one value, which is commonly used for returning a result and an error.</p><div><pre><code></code></pre></div><p>In JavaScript, you might return an object or array to simulate multiple return values:</p><div><pre><code></code></pre></div><p>Go uses familiar  logic but requires the conditions to evaluate to a , no more truthy/falsy magic like in JS.</p><div><pre><code></code></pre></div><p>Go uses pointers to reference memory locations, similar to C, but without pointer arithmetic. Pointers are useful for modifying values in place and for efficient memory usage.</p><div><pre><code></code></pre></div><ul><li> means \"pointer to an int\".</li><li> gets the address of .</li><li> dereferences the pointer to access the value.</li></ul><p>\nJavaScript does not have pointers, but objects and arrays are passed by reference:</p><div><pre><code></code></pre></div><p>Go has only one loop keyword: .</p><div><pre><code></code></pre></div><p>You can also use it like a  loop:</p><div><pre><code></code></pre></div><p>The  keyword is used to iterate over elements in a variety of data structures, including arrays, slices, maps, and strings. When iterating over a string,  yields the index and the Unicode code point (rune) at each position.</p><p><strong>Example: Iterating over runes in a string</strong></p><div><pre><code></code></pre></div><p><em>This will print each Unicode character (rune) in the string, including multi-byte characters like emojis.</em></p><h2>\n  \n  \n  Working with the strings Package\n</h2><p>Go's standard library includes the powerful  package for manipulating text. Here are some common tasks:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><h2>\n  \n  \n  Concurrency in Go: Goroutines, Channels, WaitGroups, and Mutexes\n</h2><p>Go's concurrency model is one of its superpowers. Unlike JavaScript's single-threaded event loop, Go lets you run multiple tasks at the same time using goroutines and channels.</p><h3>\n  \n  \n  Concurrency vs Parallelism\n</h3><ul><li> is about dealing with lots of things at once (structuring your program to handle multiple tasks that may not actually run at the same time).</li><li> is about doing lots of things at the same time (actually running on multiple CPU cores).</li></ul><p>Go makes it easy to write concurrent code, and if your machine has multiple cores, Go can run goroutines in parallel too.</p><p>A goroutine is a lightweight thread managed by the Go runtime. Just add  before a function call to run it concurrently:</p><div><pre><code></code></pre></div><p>Channels let goroutines communicate safely:</p><div><pre><code></code></pre></div><ul><li> sends a value into the channel.</li><li> receives a value from the channel.</li></ul><p>A  lets you wait for a group of goroutines to finish:</p><div><pre><code></code></pre></div><p>A  is used to safely share data between goroutines:</p><div><pre><code></code></pre></div><p> Without it, multiple goroutines could try to update  at the same time, causing race conditions.</p><p>The  keyword in Go schedules a function call to run after the function completes, just before it returns. This is especially useful for cleanup tasks like closing files, unlocking mutexes, or printing final messages.</p><div><pre><code></code></pre></div><p>If you use multiple  statements, they run in LIFO (last-in, first-out) order:</p><div><pre><code></code></pre></div><ul><li>Closing files or network connections</li><li>Logging or printing final messages</li></ul><p>\nJavaScript doesn't have a direct equivalent, but you might use  in a  block for similar cleanup:</p><div><pre><code></code></pre></div><h2>\n  \n  \n  Common Gotchas for JS Devs\n</h2><ul><li><strong>No implicit type coercion:</strong> Go won't convert types for you.  is an error, not .</li><li> Uninitialized variables have a default value (e.g.,  for int,  for string,  for pointers/slices/maps).</li><li> Go uses explicit error returns, not try/catch.</li><li> All variables must be declared before use.</li><li><strong>No unused imports or variables:</strong> The compiler will error if you import a package or declare a variable and don't use it.</li><li> Use structs and interfaces instead.</li><li><strong>No method overloading or default parameters.</strong></li></ul><h2>\n  \n  \n  Mini Project: Word Counter CLI\n</h2><p>Let's build a simple CLI tool that reads a line of text from the user, counts the number of words and unique words, and prints word frequencies. This demonstrates string manipulation, maps, and user input.</p><div><pre><code></code></pre></div><p><strong>Why not use  for user input?</strong></p><ul><li> is best for simple, space-separated input (e.g., numbers or single words), but for names or sentences,  is preferred because it reads the whole line, including spaces.  will only read up to the first space.</li></ul><h2>\n  \n  \n  Go Modules &amp; Project Structure\n</h2><p>Go uses modules to manage dependencies. To start a new project:</p><div><pre><code>go mod init github.com/yourusername/yourproject\n</code></pre></div><p>Typical Go project structure:</p><div><pre><code>myproject/\n  go.mod\n  main.go\n  pkg/      # reusable packages\n  internal/ # private packages\n</code></pre></div><p>Go does not use exceptions. Instead, functions that can fail return an  as a second return value:</p><div><pre><code></code></pre></div><h2>\n  \n  \n  Simple HTTP Server Example\n</h2><p>Go makes it easy to spin up a web server:</p><div><pre><code></code></pre></div><h2>\n  \n  \n  JavaScript to Go: Quick Reference Cheat Sheet\n</h2><div><table><thead><tr></tr></thead><tbody><tr></tr><tr></tr><tr><td>Multiple return values + </td></tr><tr></tr><tr></tr><tr></tr></tbody></table></div><p>Go is a modern, efficient, and fun language that empowers JavaScript developers to build fast, scalable, and reliable backend systems. With its simple syntax, powerful concurrency model, and robust standard library, Go is a fantastic next step for anyone looking to level up their programming skills.</p><p>If you’re comfortable in JavaScript, you’re more ready for Go than you think. The syntax is different, but the logic and problem-solving skills you’ve built in JS will serve you well.</p><p>Ready to try Go? Dive into the resources above, experiment with the examples, and start building something awesome. Happy coding! 🚀</p><p><em>Have questions or feedback? Feel free to reach out or leave a comment!</em></p>","contentLength":12899,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"You Don't Know iota","url":"https://dev.to/leapcell/you-dont-know-iota-2c9b","date":1751305337,"author":"Leapcell","guid":176829,"unread":true,"content":"<p>When you delve into official libraries, open-source libraries, or any Go project, you’ll find the magical identifier  everywhere. It plays an important role, making code more concise and clear, while improving readability and maintainability. Its applications are wide-ranging, from enumerated types to bit operations, and even complex constant expression calculations—it can do it all.</p><p>In this article, I will take you on an in-depth exploration of the magical power of , including an introduction to , its use cases, practical tips, and important considerations.</p><blockquote><p>Within a constant declaration, the predeclared identifier iota represents successive untyped integer constants. Its value is the index of the respective ConstSpec in that constant declaration, starting at zero.</p></blockquote><p>The above quote is from the official documentation. In short, by using , we can automatically create a series of consecutive integers in constant declarations, starting from zero, without manually specifying the value for each constant.</p><h3>\n  \n  \n  Automatically Generating Incrementing Constant Values\n</h3><p>With , it’s easy to generate incrementing constant values. The first constant using  in a constant declaration is initialized to 0, and subsequent constants automatically increment, making it unnecessary to specify the value of each constant manually when defining a series of incrementing constants. This improves code readability and maintainability. For example:</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Defining Enumerated Type Constants\n</h3><p>By using , you can easily define a series of related enumerated values without having to manually specify the number for each value. This makes the enumeration type definitions more concise and easier to extend or modify. For example:</p><div><pre><code></code></pre></div><p>By using  within constant declarations, you can create complex expressions and adjust the value of  as needed in each constant declaration. This allows you to easily generate a set of constants that follow a specific pattern. For example:</p><div><pre><code></code></pre></div><p>By combining the left shift operator () with , you can conveniently generate a set of constants for bitwise operations. For example:</p><div><pre><code></code></pre></div><h2>\n  \n  \n  Tips and Considerations When Using iota\n</h2><p>We can use the underscore () to ignore certain values, for example:</p><div><pre><code></code></pre></div><h3>\n  \n  \n  iota Is Independent in Different Constant Blocks\n</h3><p>The scope of  is the entire constant block. The  in different constant blocks is independent, and the value of the first  in each block is always 0.</p><div><pre><code></code></pre></div><p>This article provided a detailed introduction to . By fully leveraging the features of  in your code, you can make your code more concise and clear, while also improving readability and maintainability.</p><p><a href=\"https://leapcell.io/?lc_t=d_goiota\" rel=\"noopener noreferrer\">Leapcell</a> is the Next-Gen Serverless Platform for Web Hosting, Async Tasks, and Redis:</p><ul><li>Develop with Node.js, Python, Go, or Rust.</li></ul><p><strong>Deploy unlimited projects for free</strong></p><ul><li>pay only for usage — no requests, no charges.</li></ul><p><strong>Unbeatable Cost Efficiency</strong></p><ul><li>Pay-as-you-go with no idle charges.</li><li>Example: $25 supports 6.94M requests at a 60ms average response time.</li></ul><p><strong>Streamlined Developer Experience</strong></p><ul><li>Intuitive UI for effortless setup.</li><li>Fully automated CI/CD pipelines and GitOps integration.</li><li>Real-time metrics and logging for actionable insights.</li></ul><p><strong>Effortless Scalability and High Performance</strong></p><ul><li>Auto-scaling to handle high concurrency with ease.</li><li>Zero operational overhead — just focus on building.</li></ul>","contentLength":3274,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Golang","url":"https://dev.to/weiming77/golang-2bli","date":1751286800,"author":"weiming77","guid":176626,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Go CLI Mastery: Crafting Developer Tools That Don't Suck","url":"https://dev.to/tavernetech/go-cli-mastery-crafting-developer-tools-that-dont-suck-3p53","date":1751279851,"author":"Taverne Tech","guid":176546,"unread":true,"content":"<ol><li>The Foundation: Setting Up Your CLI Architecture</li><li>Building Your CLI Masterpiece: Subcommands and Advanced Features</li><li>Pro Tips &amp; Distribution: Making Your CLI Tool Production-Ready\n</li></ol><p>Picture this: You're a developer, and your terminal is your kingdom. You've got 47 different CLI tools installed, but somehow, half of them feel like they were designed by someone who's never actually used a command line. The flags make no sense, the help text is either non-existent or a novel, and don't even get me started on the error messages! 😤</p><p>But here's the thing – <strong>Go has quietly become the undisputed champion of CLI tool development</strong>. Docker, Kubernetes kubectl, Hugo, and countless other tools that make our dev lives easier are all built with Go. Why? Because Go combines the performance of compiled languages with the simplicity that makes developers actually want to use your tools.</p><p>Today, we're diving deep into the art and science of building CLI tools that developers will not only use but actually  using. Buckle up, gophers! 🐹</p><h2>\n  \n  \n  1. 🏗️ The Foundation: Setting Up Your CLI Architecture\n</h2><p>Let's start with a confession: building CLI tools used to be like assembling IKEA furniture blindfolded. You'd spend more time parsing flags than actually solving problems. Thankfully, the Go ecosystem has evolved, and we now have tools that make CLI development feel less like archaeology and more like actual engineering.</p><p> – the dynamic duo of Go CLI development. Here's a lesser-known fact: <strong>Cobra was originally created by Steve Francia (spf13), the same genius behind Hugo</strong>. The framework powers some of the most popular CLI tools in existence, and there's a good reason for that.</p><div><pre><code></code></pre></div><p>: Notice how we're using both short () and long () flags? This isn't just good practice – it's <strong>respecting your users' muscle memory</strong>. Some folks are  people, others prefer . Why force them to choose sides in the CLI wars?</p><p>The beautiful thing about this setup is that <strong>Viper automatically handles environment variables, config files, and command flags in order of precedence</strong>. Your users can configure your tool however they want, and you don't have to write a single line of additional parsing code. It's like having a personal assistant for configuration management! 🎩</p><h2>\n  \n  \n  2. 🛠️ Building Your CLI Masterpiece: Subcommands and Advanced Features\n</h2><p>Now that we've got our foundation, let's build something that would make even the most jaded senior developer nod in approval. CLI tools are like Swiss Army knives – <strong>everyone needs one, but half the features remain mysterious unless you design them intuitively</strong>.</p><p>Here's where most CLI tools fail: they treat subcommands like an afterthought. But in Go with Cobra, subcommands are first-class citizens. Let's build a practical example – a developer productivity tool:</p><div><pre><code></code></pre></div><p>Here's a : The  package we're using was inspired by the realization that <strong>68% of developers spend more time reading CLI output than writing code</strong>. Good visual feedback isn't just pretty – it's a productivity multiplier!</p><p> in this example is the combination of:</p><ul><li> (Git is enabled by default because, come on, it's 2025)</li><li> (no more cryptic \"error: invalid input\" nonsense)</li><li> with colors and emojis</li><li> that actually explains what went wrong\n</li></ul><div><pre><code></code></pre></div><p>The magic here is  – your CLI starts simple but grows with your users' expertise. Beginners can use  and get something that works. Power users can dive into <code>project create myapp --lang rust --ci --template microservice</code> when they're ready.</p><h2>\n  \n  \n  3. 🚀 Pro Tips &amp; Distribution: Making Your CLI Tool Production-Ready\n</h2><p>Alright, you've built an awesome CLI tool. It works on your machine (famous last words, right?). Now comes the real challenge: <strong>making it work everywhere and making it easy for people to actually get their hands on it</strong>.</p><p>Here's a lesser-known fact that'll blow your mind: <strong>Go's static compilation means your CLI tool can run on systems where the user has never even heard of Go</strong>. This is huge! While Python developers are explaining virtual environments and Node.js folks are debugging npm conflicts, you just hand someone a binary and say \"run this.\"</p><div><pre><code></code></pre></div><p><strong>Testing CLI apps is like teaching your pet to fetch</strong> – lots of repetition, but when it works, it's magical. The key is testing both the happy path and the \"what happens when users inevitably do something unexpected\" path.</p><p>Now, let's talk about  – because the best CLI tool in the world is useless if nobody can install it:</p><div><pre><code></code></pre></div><p>But here's the : Use GitHub Actions to automate this process and create releases automatically:</p><div><pre><code></code></pre></div><p> Set up Homebrew distribution for macOS users:</p><div><pre><code></code></pre></div><p>The irony? You'll spend more time setting up the distribution pipeline than building the actual CLI tool. But that's the price of making software that people can actually use without a PhD in dependency management! 😂</p><p>We've journeyed from the basics of Cobra and Viper to building production-ready CLI tools that developers will actually want to use. The key takeaways? <strong>Respect your users' intelligence, provide sensible defaults, give helpful feedback, and make installation painless</strong>.</p><p>The Go ecosystem has matured to the point where building professional CLI tools is no longer the domain of systems programming wizards. With the right frameworks and practices, you can create tools that feel as polished as the best commercial software.</p><p>Here's the thing: <strong>every great developer tool started as someone's side project to solve their own problem</strong>. Docker began as a deployment tool for dotCloud. Kubernetes started as Google's internal orchestration system. Your next CLI tool might just be the one that changes how developers work.</p><p>So, what CLI tool will you build next? Will it be the project generator that finally makes sense? The deployment tool that doesn't require a manual? The debugging assistant that actually assists? <strong>The terminal is your canvas, and Go is your brush</strong> 🎨</p><p>Share your Go CLI creations in the comments – I'd love to see what the community builds with these techniques! And remember, the best CLI tool is the one that makes other developers' lives just a little bit easier.</p>","contentLength":6054,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Stop Wrestling with Config Files: A DevOps Guide to Sanity with Konfigo","url":"https://dev.to/bogdan_bododumitrescu_/stop-wrestling-with-config-files-a-devops-guide-to-sanity-with-konfigo-1hh3","date":1751270037,"author":"Bogdan “Bodo” Dumitrescu","guid":176410,"unread":true,"content":"<p>As a DevOps engineer, you've probably felt the pain of managing configuration files. You've got JSON, YAML, TOML,  files, and maybe even some custom formats you'd rather not talk about. You're juggling configs for different environments (dev, staging, prod), and trying to keep everything in sync is a nightmare. What if I told you there's a better way?</p><p>Enter Konfigo, a powerful command-line tool that's about to become your new best friend.</p><p>Konfigo is a versatile configuration management tool that helps you streamline your entire configuration workflow. It reads various configuration file formats, merges them intelligently, and processes the combined data against a user-defined schema for validation, transformation, and even batch output generation.</p><p>Think of it as a Swiss Army knife for your configuration files. 🇨🇭</p><p>Here are some of the key features that make Konfigo a game-changer for DevOps:</p><ul><li> JSON, YAML, TOML, and  files are all supported. No more converting files by hand!</li><li> Intelligently merges multiple configuration sources, respecting order and immutability rules.</li><li><strong>Powerful Schema Processing:</strong><ul><li> Inject dynamic values from environment variables, dedicated variable files, or schema defaults.</li><li> Create new configuration values (e.g., , , , ).</li><li> Modify keys and values (e.g., , , , , , , , ).</li><li> Enforce rules (, , , , , , ).</li></ul></li><li> Use the  directive in a variables file to generate multiple tailored configuration outputs from a single schema and run.</li><li><strong>Environment Variable Integration:</strong> Override any configuration value directly using environment variables.</li></ul><h2>\n  \n  \n  Why Should a DevOps Person Care? 🤷‍♀️\n</h2><p>Okay, so Konfigo has a lot of features. But how does it actually make your life easier?</p><h3>\n  \n  \n  Tame the Multi-Headed Hydra of Configuration Formats\n</h3><p>Let's say you have a base configuration in YAML, but your production environment requires some overrides from a  file. With Konfigo, you can merge them with a single command:</p><div><pre><code>konfigo  base.yaml,prod.env </code></pre></div><p>No more writing custom scripts to parse and merge different formats. Konfigo handles it all for you.</p><h3>\n  \n  \n  Automate Your Configuration Workflow\n</h3><p>You can integrate Konfigo into your CI/CD pipelines to generate environment-specific configurations on the fly. For example, you can have a base configuration and then apply environment-specific overrides from different files.</p><p>Here's a conceptual example of how you might use Konfigo in a CI/CD pipeline:</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Prevent Configuration Drift\n</h3><p>Configuration drift is a major source of headaches in any infrastructure. With Konfigo's schema validation, you can enforce a consistent structure and set of rules for your configurations.</p><p>For example, you can create a schema that requires a specific key to be present, or that a value must be a number within a certain range. If a configuration doesn't match the schema, Konfigo will throw an error, and you can catch the problem before it ever reaches production.</p><h3>\n  \n  \n  Dynamic Configurations are Your Friend\n</h3><p>Stop hardcoding values in your configuration files! With Konfigo, you can use variables and data generation to create dynamic configurations.</p><p>For example, you can use an environment variable to set the database host, or you can use the  generator to add a build timestamp to your configuration.</p><div><pre><code>konfigo  config.json  schema.yml  staging-vars.yml  staging_config.json\n</code></pre></div><p>If you're managing configurations for a microservices architecture or a multi-tenant application, you know how complex it can get. Konfigo's batch processing feature can help you simplify this.</p><p>You can create a template configuration and then use a variables file to generate multiple tailored configurations for each service or tenant.</p><p>Let's look at a simple example of how Konfigo can be used to validate and transform a configuration file.</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><div><pre><code>konfigo  config.json  schema.yaml </code></pre></div><div><pre><code></code></pre></div><p>In this example, Konfigo does two things:</p><ol><li> the input to ensure that  is at least 1024.</li><li> the input by adding the prefix  to the  key.</li></ol><h2>\n  \n  \n  Ready to Give it a Try? 🚀\n</h2><p>I've only scratched the surface of what Konfigo can do. If you're tired of wrestling with configuration files, I highly recommend giving it a try.</p><p>Let me know what you think in the comments below! 👇</p>","contentLength":4166,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"BC847 Transistor: The Tiny Star-Keeper of Our Tech Planets","url":"https://dev.to/ersajay/bc847-transistor-the-tiny-star-keeper-of-our-tech-planets-31p4","date":1751264592,"author":"ersajay","guid":176375,"unread":true,"content":"<p>A Meeting in the Circuit Desert\nThe desert stretched endlessly, its sands glowing like gold under the sun. I was tracing the dunes, heading toward a distant oasis, when I spotted a glint in the sand—a small, silver shape, no bigger than a ladybug.<p>\n“You’re… very small,” I said, kneeling.</p>\n“And you’re a child who talks to transistors,” it replied, voice steady as the wind. “But some keepers of light are smallest when they’re strongest. Ask the fox.”<p>\nIt was a BC847—an NPN bipolar junction transistor, but to me, it felt like a secret. Let me tell you its story.</p></p><ul><li>What Is a BC847? (Not Just Metal—A Keeper of Light)\nThis was no ordinary silicon. It was a BC847, a tiny hero in a SOT-23-3 suit—smaller than a ladybug, but tough as a baobab’s roots. Here’s its secret:</li></ul><p>Voltage: 45V collector-emitter (VCEO), 5V base-emitter (VBE). It’s like a windbreak for circuits—sturdy against storms of static.\nCurrent: 100mA collector current (<a href=\"https://www.ersaelectronics.com/\" rel=\"noopener noreferrer\">IC</a>), 5mA base current (IB). Sips power like a hummingbird, not a thirsty camel.\nSpeed: 100MHz transition frequency (fT). Faster than the fox darting across the dunes.</p><p>Real-World Magic: Powers LED drivers in Philips Hue bulbs (keeping your roses lit) and Tesla’s battery sensors (guiding spaceships on Earth).\n“Why so quiet?” I asked.<p>\n“Keepers don’t shout,” it said. “They just keep.”</p></p><ul><li>BC847 &amp; Its Neighbors: Brothers, Not Twins\nIn the desert of transistors, <a href=\"https://www.ersaelectronics.com/blog/what-is-a-bc847-and-bc847-equivalents\" rel=\"noopener noreferrer\">BC847</a> has cousins—some taller, some faster, but none quite like it:</li></ul><p>BC846: A stronger brother. Handles 65V (vs. BC847’s 45V) but same current. Like a cactus that grows taller, not wider.\nBC547: An old friend. Cheaper, but bulkier (TO-92 vs. SOT-23). Like a postman with a big bag—reliable, but takes up space.<p>\n2N3904: A flashy neighbor. Faster, but panics at voltage spikes. Like a sprinter who trips at the finish line.</p></p><p>Roast Alert:\n2N3904 (boasting): “I’m cheaper!”<p>\nBC847 (calm, like the fox): “I’m in Tesla’s BMS. You’re in a kid’s science kit. Bye.”</p></p><ul><li>Why BC847 Shines Brighter Than Most\nBC847 isn’t just a transistor—it’s a star in the circuit sky. Here’s why:</li></ul><p>Tiny, But Tenacious: SOT-23-3 fits wearables and IoT sensors, like a key in a tiny lock. Even the fox couldn’t squeeze into spaces this small.\nSpeed of Light: 100MHz fT processes signals faster than your Wi-Fi rage-quits. The fox? He’s impressed.<p>\nCheap, But Charming: $0.02/unit—cheaper than your morning espresso. Even the rose, who’s picky, approves.</p></p><p>“Why not be bigger?” I asked.\n“Big things break,” it said. “Tiny things fit. In smartwatches. In Mars rovers. In insulin pumps.”</p><ul><li>BC847: Keeper of a Thousand Stars\nFrom your wrist to the cosmos, BC847 guards:</li></ul><p>Medical (The Healer’s Planet):\nPowers portable ECG monitors, amplifying weak heart signals (no “404 Error: Heartbeat”). Keeps insulin pumps precise—because roses (and diabetics) need gentle care.</p><p>Automotive &amp; Aerospace (The Cosmic Planets):\nMonitors Tesla’s battery cells (no TikTok fire memes—phew!). Survives cosmic radiation in satellites (Earth drama is overrated, anyway).</p><p>Consumer Tech (Your Daily Planet):\nPowers smartwatch sensors, outlasting your gym motivation. Keeps wireless earbuds jamming—because even foxes need their Hotline Bling.</p><p>“Do you get lonely?” I asked.\n“No,” it said. “I’m everywhere. In your watch, in your car, in the stars. Loneliness is for roses that forget they’re loved.”</p><ul><li>Brand Battle: The Guardians of the Desert\nNot all keepers are made equal. Let’s meet the ones worth trusting:</li></ul><p>Nexperia: The geographer of transistors. Makes high-speed BC847W variants—pricier ($0.05/unit), but worth it for precision.\nON Semiconductor: The cactus of the bunch. Works from -40°C (Arctic) to +150°C (Sahara). Bulk orders only, but tough as nails.<p>\nGuangzhou Guangxin: The friendly merchant. Budget-friendly ($0.02/unit), but skip if you need fancy datasheets.</p></p><p>Pro Tip: For Mars rovers, stick to ON Semi’s BC847HR (-55°C rated). Even the stars trust it.</p><ul><li>How to Find Your BC847 (Avoid the Baobabs of Fakes)\nIn 2025, shop like a wanderer—no baobab-sized fakes:</li></ul><p>Retailers: Digi-Key, Ersaelectronic. Search “BC847 SOT-23”—they’ll guide you like the desert’s wind.\nBulk Orders: Alibaba, with verified suppliers like Guangzhou Guangxin. Bargain like a merchant, but check for laser-etched logos (stickers = baobabs).</p><p>Price Range: $0.02–$0.10/unit retail; $0.015/unit for 1k+ (AliExpress).</p><p>The Secret of the Tiny Keeper\nBC847 isn’t flashy. It doesn’t need a name in lights or a viral meme. It’s the kind of friend you remember when your smartwatch works, your Tesla doesn’t catch fire, or a Mars rover sends back photos.<p>\n“What makes you special?” I asked, as I left.</p>\nIt didn’t answer. It just sat there, quiet as the desert, as the stars, as time itself.<p>\nAnd I realized—some keepers don’t need to be big. They just need to shine.</p></p><p>Written by a wanderer who once mistook a BC847 for a ladybug. (Spoiler: It didn’t fly, but it powered a toy robot. Close enough.)\n🌵 You become responsible, forever, for the stars you once overlooked.</p>","contentLength":5108,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"การสร้าง Docker Image สำหรับ Go ให้เหมาะกับ Production","url":"https://dev.to/somprasongd/kaarsraang-docker-image-samhrab-go-aihehmaaakab-production-529b","date":1751256550,"author":"Somprasong Damyos","guid":176281,"unread":true,"content":"<blockquote><p>แนวทางสร้าง Go container image ที่ เล็ก ปลอดภัย deploy ง่าย และ maintain ได้ระยะยาว</p></blockquote><p>เมื่อพัฒนาแอปพลิเคชันด้วยภาษา Go หนึ่งในจุดเด่นที่สำคัญคือการสร้างไฟล์ไบนารีแบบ static ทำให้เหมาะอย่างยิ่งสำหรับนำไปบรรจุใน Docker container ที่มีขนาดเล็กและปลอดภัย ซึ่ง Alpine Linux เป็นฐานที่คนนิยมใช้เพราะขนาดเล็กและมีแพ็กเกจพื้นฐานเพียงพอสำหรับงานส่วนใหญ่</p><p>แต่การจะทำให้ container ขนาดเล็กและพร้อมใช้จริงใน production ต้องเข้าใจประเด็นสำคัญทั้งในแง่ของ build, dependency, และการจัดการ image ให้มีความเสถียรและปลอดภัย</p><h3>\n  \n  \n  ปิด cgo (CGO_ENABLED=0) เพื่อสร้าง static binary\n</h3><p>โดยปกติ Go จะเปิดใช้ cgo เป็นค่าเริ่มต้นหากโค้ดมีการเรียกไลบรารี C หรือใช้ฟังก์ชันมาตรฐานบางส่วนที่อ้างอิง libc ซึ่งอาจทำให้ไฟล์ไบนารีต้องพึ่งพา shared library ภายนอก เช่น glibc หรือ musl</p><p>เมื่อใช้ Alpine ซึ่งใช้ musl libc แทน glibc ปัญหาที่พบบ่อยคือไฟล์ไบนารีที่พึ่ง glibc จะรันไม่สำเร็จ หากต้องการความแน่นอนว่ารันได้ทุกที่บน Linux base image ควรตั้ง  เพื่อให้ Go สร้างไฟล์ไบนารีที่ลิงก์แบบ static ทั้งหมด ลดปัญหา dependency ภายนอก</p><h3>\n  \n  \n  ลดขนาดไฟล์ด้วย ldflags \"-s -w\"\n</h3><p>ตัวเลือก  เป็นอีกเทคนิคที่ใช้กันทั่วไปเพื่อลดขนาดไฟล์ที่ได้จาก </p><ul><li> จะตัด symbol table ซึ่งไม่จำเป็นต่อการรันจริง</li><li> จะตัดข้อมูลสำหรับการ debug (DWARF)</li></ul><p>ผลคือขนาดไฟล์จะลดลงได้หลาย MB แต่ข้อควรระวังคือ หากต้องใช้เครื่องมือ debug เช่น Delve ข้อมูลเหล่านี้จะหายไป ทำให้ debug ได้ลำบากขึ้น เทคนิคนี้จึงเหมาะสำหรับ build ไบนารีที่ใช้จริงใน production เท่านั้น</p><h3>\n  \n  \n  ทำไมไม่ควรใช้ alpine:latest\n</h3><p>หลายคนมักเขียน Dockerfile ว่า  เพราะง่าย แต่ในทางปฏิบัติ นี่เป็นสิ่งที่ควรหลีกเลี่ยง เนื่องจาก tag  ไม่ได้ผูกกับ version ใด ๆ แบบตายตัว ภายใน repository อาจอัปเดตเมื่อใดก็ได้โดยไม่ประกาศล่วงหน้า ซึ่งทำให้ build ครั้งถัดไปอาจได้ base image ที่ไม่เหมือนเดิมและอาจเกิดปัญหาใหม่โดยไม่รู้ตัว</p><p>แนวทางที่ควรทำคือระบุเวอร์ชันให้ชัดเจน เช่น  เพื่อให้แน่ใจว่าผลลัพธ์ reproducible และ rollback ได้ง่ายหากเกิดปัญหา</p><h3>\n  \n  \n  ใช้ Multi-Stage Build เพื่อลดขนาดและจัดการได้ง่าย\n</h3><p>Dockerfile สำหรับ Go ที่ดีควรแยกขั้นตอน build ออกจากขั้นตอน runtime โดยใช้ multi-stage build ขั้นแรกใช้ image  สำหรับ compile โค้ด ขั้นถัดไปใช้  หรือแม้แต่  เพื่อลดขนาด image</p><div><pre><code>go mod download\ngo build  /app/app ./cmd/api/main.go\n\napk add  ca-certificates tzdata  addgroup  appgroup  adduser  appuser  appgroup\n\n</code></pre></div><p>อีกหนึ่งจุดที่หลายคนมองข้ามคือ user ที่ container ใช้รันโปรเซส เริ่มต้น container จะรันด้วย root ซึ่งถ้าเกิดช่องโหว่ ผู้โจมตีอาจใช้สิทธิ root ภายใน container เพื่อโจมตีต่อได้ง่าย</p><p>วิธีแก้คือสร้าง user สิทธิจำกัด แล้วสั่งให้ container รันด้วย user นี้แทน การเพิ่มบรรทัด  และ  ใน Dockerfile เป็นวิธีปฏิบัติมาตรฐานที่ช่วยปิดความเสี่ยงนี้ได้ดี</p><p>หลายคนสับสนระหว่าง  และ  ว่าควรใช้แบบไหน ต่างกันอย่างไร</p><ul><li> ใช้กำหนด  ที่ container ต้องรันเสมอ ไม่ว่าผู้ใช้จะสั่ง  พร้อม argument อะไร คำสั่งนี้จะถูกเรียกเสมอ โดย argument ที่ตามมาจะถูกต่อท้าย</li><li> ใช้กำหนด  ถ้า  ไม่ได้ระบุ argument ใหม่ ระบบจะใช้ค่าใน  แทน แต่ถ้าผู้ใช้ระบุ argument ใหม่ทั้งหมด  จะถูกแทนที่ทันที</li></ul><div><pre><code></code></pre></div><p>กรณีนี้ หากรัน  จะได้  ถ้ารัน  จะได้ </p><p>การใช้  แบบ exec form () ยังช่วยให้โปรเซสของเราทำงานเป็น PID 1 โดยตรง ทำให้จัดการ signal ได้ถูกต้อง โดยเฉพาะ SIGTERM ซึ่งสำคัญต่อการทำ graceful shutdown ใน production</p><h2>\n  \n  \n  สรุปแนวทาง Production Docker Image สำหรับ Go\n</h2><ul><li>ปิด cgo () เพื่อสร้างไฟล์ static</li><li>ใช้  เพื่อลดขนาดไฟล์</li><li>ระบุ base image version ชัดเจน เช่น  อย่าใช้ </li><li>แยกขั้น build ออกจากขั้น runtime ด้วย multi-stage build</li><li>สร้าง non-root user เพื่อลดความเสี่ยง</li><li>ใช้  เพื่อกำหนด command หลัก และ  เพื่อกำหนด default arguments</li></ul><p>แนวทางทั้งหมดนี้จะช่วยให้ได้ Docker Image ที่ขนาดเล็ก เสถียร ปลอดภัย และจัดการได้ง่ายจริงในงาน production</p>","contentLength":7879,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Mastering Timeout Control in Go with Goroutines","url":"https://dev.to/jones_charles_ad50858dbc0/mastering-timeout-control-in-go-with-goroutines-27bh","date":1751244482,"author":"Jones Charles","guid":175465,"unread":true,"content":"<h2>\n  \n  \n  Hey, Let’s Talk Timeouts!\n</h2><p>If you’ve built backend systems, you’ve hit the timeout wall. External APIs, database queries, or distributed tasks—without a timeout, your app can hang like a sloth on a branch. Think of timeouts as your app’s \"eject button\"—they keep things moving and save resources when the chef’s taking too long with your metaphorical pizza.</p><p>Go’s concurrency toolkit—goroutines and channels—is a game-changer here. Forget clunky threads or callback nightmares; Go’s approach is like snapping together LEGO bricks. This post is for devs with a year or two of Go under their belt—folks who’ve spun up goroutines but want to wield timeouts like a pro. We’ll go from basics to battle-tested designs, sprinkled with real-world wins and facepalms. Why goroutines? They’re light, fast, and pair perfectly with channels for clean timeout magic. Buckle up—we’re diving in!</p><h2>\n  \n  \n  Timeout Control : Why Goroutines Shine\n</h2><h3>\n  \n  \n  What’s a Timeout, Anyway?\n</h3><p>A timeout caps how long a task gets to run. Finish on time? Cool. Too slow? Sorry, you’re cut off. It’s everywhere in backend land—waiting on an API, querying a database, or juggling distributed jobs. No timeout means angry users or a crashed server.</p><div><table><thead><tr></tr></thead><tbody><tr></tr><tr></tr><tr></tr></tbody></table></div><h3>\n  \n  \n  Goroutines: The Timeout Superpower\n</h3><p>Goroutines aren’t just threads lite—they’re timeout ninjas. Here’s why:</p><ol><li>: Starting at 2KB, they scale to thousands without breaking a sweat—try that with Java threads!</li><li>: Channels sync tasks and timeouts effortlessly, no lock juggling required.</li><li>: With , timeouts snap into place like LEGO—no bloated configs needed.</li></ol><p>Compare that to Java’s thread pools or C++ timers—Go’s leaner and meaner.</p><div><table><thead><tr></tr></thead><tbody><tr></tr><tr></tr></tbody></table></div><p>Plus, tricks like  and  make timeouts dynamic and leak-proof. Ready to code? Let’s roll!</p><h2>\n  \n  \n  Getting Hands-On: Simple Timeout with Goroutines\n</h2><p>Time to code! Let’s build a basic timeout setup with goroutines and channels. It’s like learning to ride a bike—start simple, then trick it out later. We’ll simulate an API call with a 5-second deadline. Here’s the game plan: launch a goroutine, use a channel for results, and race it against a timeout.</p><div><pre><code></code></pre></div><ol><li>: Runs the task async—main thread stays chill.</li><li>:  grabs the output, buffered so the goroutine doesn’t block.</li><li>: Listens for the result or —first one wins.</li></ol><p>Run it, and the 6-second \"API\" loses to the 5-second timeout. Boom—.</p><ul><li>Dead simple—under 20 lines!\n</li><li>Lightweight—goroutines sip resources.</li></ul><ul><li>: Timeout triggers, but the goroutine keeps chugging. In this case, that  finishes anyway—wasted cycles.\n</li><li>: Fine for one task, messy for a dozen.</li></ul><p>This is your timeout starter kit—great for quick wins, but it’s not ready for the big leagues. Next, we’ll swap  for  to level up control and kill those leaks.</p><h2>\n  \n  \n  Level Up: Timeout Control with Context\n</h2><p>Our basic setup was cool, but it’s like a bike without brakes—leaky and hard to stop. Enter Go’s  package: the timeout boss that cancels tasks and cleans up messes. Let’s ditch  and make a database query that stops on a 1-second dime.</p><p>Since Go 1.7,  has been the concurrency MVP. It’s not just timeouts—it’s cancellation, propagation, and resource smarts in one. Here’s the pitch:</p><ul><li>: Set deadlines or kill tasks manually.</li><li>: Share control across functions—no repeat code.</li><li>: Tell goroutines to quit via .</li></ul><div><pre><code></code></pre></div><ol><li>: Spawns a context with a 1-second fuse.</li><li>: Frees resources, timeout or not.</li><li>: Signals the goroutine to quit—no lingering zombies.</li><li>: Spills the beans on what went wrong.</li></ol><p>Run it, and the 2-second query gets axed at 1 second—clean and efficient.</p><ul><li>:  is your safety net.</li><li>: Pass  as the first arg—it’s the Go way.</li><li>: Chain contexts for deep call stacks.</li></ul><ul><li>: I once skipped —goroutines piled up ‘til the server cried. Check  to spot stragglers.</li><li>: A 500ms cap killed legit database calls. Use P95 latency (e.g., 1.5x) to set sane limits.</li></ul><p>This is timeout control with brains—scalable and leak-free. Next, we’ll hit real-world chaos with distributed systems and high-concurrency tricks!</p><h2>\n  \n  \n  Real-World Timeout Kung Fu\n</h2><p>Theory’s nice, but projects are where timeouts get real. With a decade of scars to prove it, I’ll walk you through two battle-tested scenarios—distributed task scheduling and high-concurrency APIs. Code, wins, and facepalms incoming!</p><h3>\n  \n  \n  Scenario 1: Taming Distributed Systems\n</h3><p>Picture an e-commerce order flow: inventory, payment, logistics—all separate services. One lags, and the whole chain stalls. We need per-task timeouts  a global kill switch, plus partial results if things go south.</p><p>Nested  with goroutines, plus  for wrangling parallel calls. Here’s a 5-second timeout across three services:</p><div><pre><code></code></pre></div><ol><li>: Runs services in parallel, ties them to , and grabs errors.</li><li>: \"Payment\" times out, but others succeed—user gets .</li><li>: 5 seconds caps the chaos.</li></ol><ul><li>: Track each service’s time—saved my bacon debugging timeouts.</li><li>: Don’t ditch everything for one failure.</li></ul><h3>\n  \n  \n  Scenario 2: High-Concurrency API Chaos\n</h3><p>An API gateway slamming downstream services with requests. Unchecked goroutines could spiral into a memory apocalypse. We need timeouts  a lid on concurrency.</p><p>A worker pool with —three goroutines max, 3-second timeout:</p><div><pre><code></code></pre></div><ol><li>: Three workers keep goroutines in check.</li><li>: 3 seconds cuts off laggards.</li><li>: Tasks flow in, results flow out—smooth as butter.</li></ol><ul><li>: Base it on load— is a solid start.</li><li>: Add a token bucket to chill downstream pressure.</li></ul><ul><li>: I’ve seen goroutines hog CPU post-timeout—check  religiously.</li><li>: Task IDs + durations = debug gold.</li></ul><h2>\n  \n  \n  Wrapping Up: Timeout Mastery Unlocked\n</h2><p>We’ve gone from timeout newbie to goroutine ninja! <strong>Goroutines + channels/context</strong> are your Go timeout dream team—light, fast, and slick. Whether it’s a quick API call or a sprawling distributed system, you’ve got the tools: basic  for simplicity,  for control, and  for chaos. Pitfalls? Sure—leaky goroutines and tight timeouts bit me hard—but now you know the fixes.</p><h3>\n  \n  \n  Where It Shines (and Where It Doesn’t)\n</h3><p>This stuff kills it for high-concurrency backends—think microservices or task queues. Need millisecond precision for trading apps?  might lag a hair—try  instead.</p><ul><li>: Go 1.23 buffs —finer cancellation’s coming. Dig in!</li><li>: Pair timeouts with gRPC tracing or Kafka queues—it’s the future.</li><li>:  is a task’s heartbeat—master it, and your code sings.</li></ul><p>: Spin up  to spy on goroutines, log timeout stats, and tweak away. This is your launchpad—go build something epic!</p>","contentLength":6446,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Working with Scheduled Tasks in Go: Timer and Ticker","url":"https://dev.to/leapcell/working-with-scheduled-tasks-in-go-timer-and-ticker-8jb","date":1751223698,"author":"Leapcell","guid":175346,"unread":true,"content":"<p>In daily development, we may encounter situations where we need to delay the execution of some tasks or execute them periodically. At this point, we need to use timers in Go.</p><p>In Go, there are two types of timers:  (one-shot timer) and  (periodic timer). This article will introduce both types of timers.</p><p>A Timer is a one-shot timer used to perform an operation once at a specific time in the future.</p><p>There are two ways to create a Timer:</p><ul><li><code>NewTimer(d Duration) *Timer</code>: This function accepts a parameter  of type  (the time interval), which indicates how long the timer should wait before expiring.  returns a new Timer, which internally maintains a channel . When the timer fires, the current time is sent to channel .</li><li><code>AfterFunc(d Duration, f func()) *Timer</code>: Accepts a specified time interval  and a callback function . This function returns a new Timer, and when the timer expires, it directly calls  instead of sending a signal through channel . Calling the Timer's  method can stop the timer and cancel the execution of .</li></ul><p>The following code demonstrates how to use  and  to create timers and their basic usage:</p><div><pre><code></code></pre></div><p>The output of the above code is as follows:</p><div><pre><code>timer fired!\ntimer2 fired!\n</code></pre></div><p>Here is a step-by-step explanation of the code:</p><ol><li>Use  to create a timer, then listen to its  property in a new goroutine to wait for the timer to fire.</li><li>Use  to create another timer, specifying a callback function to handle the timer expiration event.</li><li>The main goroutine waits long enough to ensure the timer's firing information can be printed.</li></ol><p>: This method is used to reset the expiration time of a Timer, essentially reactivating it. It accepts a parameter  of type , representing how long the timer should wait before expiring.</p><p>In addition, this method returns a  value:</p><ul><li>If the timer is active, it returns .</li><li>If the timer has already expired or been stopped, it returns  (note:  does not mean the reset failed, it only indicates the current state of the timer).</li></ul><div><pre><code></code></pre></div><p>The output of the code is as follows:</p><p>Step-by-step explanation:</p><ol><li>Create a timer set to expire after 5 seconds.</li><li>Call the  method immediately to set it to expire in 1 second. Since the timer is still active (not expired),  returns .</li><li>The  statement waits for the timer to expire and prints the actual seconds passed (about 1 second).</li><li>The timer is reset again, this time to expire in 2 seconds. Since the timer has already expired,  returns .</li><li>The  statement again waits for the timer to expire and prints the seconds passed (about 2 seconds).</li></ol><p>: This method is used to stop the timer. If the timer is successfully stopped, it returns . If the timer has already expired or been stopped, it returns . Note: the  operation does not close channel .</p><div><pre><code></code></pre></div><p>The output is as follows:</p><p>Step-by-step explanation:</p><ol><li>Create a timer set to fire after 3 seconds.</li><li>Immediately call the  method to stop the timer. Since the timer has not yet fired,  returns .</li><li>Call  again to try to stop the same timer. Since it is already stopped, this time  returns .</li></ol><p>A Ticker is a periodic timer used to execute tasks repeatedly at fixed intervals. At every interval, it sends the current time to its channel.</p><p>We can use the  function to create a new Ticker object. This function accepts a  parameter  (the interval).</p><div><pre><code></code></pre></div><p>The output of the code is as follows:</p><div><pre><code>ticker fired!\nticker fired!\nticker fired!\nticker fired!\nticker fired!\n</code></pre></div><p>Step-by-step explanation:</p><ol><li>Create a timer that fires every second. To ensure the timer is cleaned up at the end of the function, we use .</li><li>Create a context that times out after 5 seconds.  is used to clean up the context before exiting.</li><li>In a new goroutine, a  statement listens to two channels: the timer's channel () and the context's done channel (). When the timer fires each second, it prints a message. When the context times out (after 5 seconds), it prints a timeout message and returns, ending the goroutine.</li><li>The main goroutine uses <code>time.Sleep(time.Second * 7)</code> to wait 7 seconds, ensuring that both the timer firing and timeout events can be observed.</li></ol><p>In addition to listening to  with , you can also use a  loop:</p><p>Note: Even if you stop a Ticker with the  method, its channel  will not be closed. This means, whether you use  or  to listen to , you need another mechanism to exit the loop, such as using a context.</p><p>The  method is used to stop the ticker and reset its period to the specified duration. The next tick will occur after the new period has elapsed. It accepts a parameter  of type , which represents the new interval. This parameter must be greater than zero; otherwise, the  method will panic internally.</p><div><pre><code></code></pre></div><p>The output of the code is as follows:</p><p>Step-by-step explanation:</p><ol><li>Create a time.Ticker that fires every 5 seconds.</li><li>Use the  method to change the interval from 5 seconds to 1 second.</li><li>In a single loop, print out the interval. The expected result is 1 second.</li></ol><p>The  method is used to stop the ticker. After calling , no more ticks will be sent to channel .  the  operation does not close the channel .</p><div><pre><code></code></pre></div><p>The output is as follows:</p><div><pre><code>Ticker fired!\nTicker fired!\nTicker fired!\nGoroutine stopped!\nTicker stopped!\n</code></pre></div><ol><li>Create a time.Ticker object that fires every second. At the same time, a quit channel of type  is introduced, which is used to send a stop signal to the running goroutine.</li><li>Start a new goroutine. In this goroutine, a for-select loop listens to two events: ticker firing () and the quit signal (). Each time the ticker fires, it prints a message. If it receives the quit signal, it prints a message and exits the loop.</li><li>In the main goroutine, <code>time.Sleep(time.Second * 3)</code> simulates a waiting time of 3 seconds, during which the ticker will fire a few times.</li><li>The main goroutine stops the ticker by calling , then closes the quit channel. The goroutine receives the quit signal, prints a message, and exits the loop.</li></ol><p>The  method does  close channel , so we need to use other means (such as a quit signal) to clean up resources.</p><h2>\n  \n  \n  Main Differences Between Timer and Ticker\n</h2><ul><li> is used for tasks that are executed after a single delay.</li><li> is used for tasks that need to be executed repeatedly.</li></ul><h3>\n  \n  \n  Behavioral Characteristics:\n</h3><ul><li> fires once after the specified delay, sending a single time value to its channel.</li><li> fires periodically at the specified interval, sending repeated time values to its channel.</li></ul><ul><li> can be reset ( method) and stopped ( method).  is used to change the firing time of the Timer.</li><li> can also be reset ( method) and stopped ( method).  is used to change the interval at which the Ticker fires.</li></ul><ul><li>The  method of  is used to prevent the Timer from firing. If the Timer has already fired,  does not remove the time value that has already been sent to its channel.</li><li>The  method of  is used to stop the periodic firing. Once stopped, no new values will be sent to its channel.</li></ul><ul><li>For both Timer and Ticker, calling the  method  close their  channels. If there are other goroutines listening on this channel, to avoid potential memory leaks, you need to manually terminate those goroutines. Usually, such resource cleanup can be handled by using a  or by a quit signal (implemented with channels).</li><li>After a Ticker has completed its task, you should call the  method to release the associated resources and prevent memory leaks. If you do not stop the Ticker in time, it may result in continuous resource occupation.</li></ul><p>This article has explored Go's Timer and Ticker in depth, introducing how to create them, their basic usage, and their related methods in detail. Additionally, the article summarizes the main differences between these two types of timers and emphasizes the considerations to keep in mind when using them.</p><p>When writing Go code, you should choose the appropriate timer according to the application scenario. At the same time, it's important to follow best practices—especially to release resources promptly after finishing with a timer—which is crucial for avoiding potential memory leaks.</p><p><a href=\"https://leapcell.io/?lc_t=d_gotimer\" rel=\"noopener noreferrer\">Leapcell</a> is the Next-Gen Serverless Platform for Web Hosting, Async Tasks, and Redis:</p><ul><li>Develop with Node.js, Python, Go, or Rust.</li></ul><p><strong>Deploy unlimited projects for free</strong></p><ul><li>pay only for usage — no requests, no charges.</li></ul><p><strong>Unbeatable Cost Efficiency</strong></p><ul><li>Pay-as-you-go with no idle charges.</li><li>Example: $25 supports 6.94M requests at a 60ms average response time.</li></ul><p><strong>Streamlined Developer Experience</strong></p><ul><li>Intuitive UI for effortless setup.</li><li>Fully automated CI/CD pipelines and GitOps integration.</li><li>Real-time metrics and logging for actionable insights.</li></ul><p><strong>Effortless Scalability and High Performance</strong></p><ul><li>Auto-scaling to handle high concurrency with ease.</li><li>Zero operational overhead — just focus on building.</li></ul>","contentLength":8454,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"From Migrations to Seed : Working with Fixtures in Nixopus","url":"https://dev.to/raghavyuva/from-migrations-to-seed-working-with-fixtures-in-nixopus-2e95","date":1751222512,"author":"Raghav","guid":175345,"unread":true,"content":"<p>Hey, we’re always up for exploring something cool at <a href=\"https://github.com/raghavyuva/nixopus\" rel=\"noopener noreferrer\">Nixopus</a>, and this time, we’re diving into fixtures. Now, the word  might sound a bit too technical and not immediately clear to many of our fellow developers so let’s break it down, and you’ll see exactly what we mean. Let’s dive in.</p><p>If you’ve worked with migrations before, you’ve probably come across the term  for databases. Even if you haven’t, let’s take a moment to understand what seeding data actually involves.</p><p>Usually, during development, things can get tricky over time, especially when you have contributors and developers working together on the same project. Everyone wants everything to be quick and hassle-free so development doesn’t slow down. As a project maintainer, it’s your responsibility to enable this smooth contribution roadmap for any user who wants to help out. That’s exactly what we’re working towards at Nixopus.</p><p>One major part of <a href=\"https://docs.nixopus.com/contributing\" rel=\"noopener noreferrer\">Contributing to Nixopus</a> is that after getting everything set up, Contributor still needs to do the following tasks :</p><ol><li>You realize you need  to log in and test admin features.</li><li>You also want to create  for that organization to test the role based access.</li><li>You might even want to enable specific features inside nixopus, and disable some!</li></ol><p>This is time consuming and error-prone, especially when you or your teammates need to do it over and over again on fresh databases. That’s exactly where data seeding comes into the picture.</p><p><em>The process of populating a database with an initial set of data.</em> Simple, isn’t it?</p><p>But how do we actually create one in Go using Bun ORM? This is what pushes us to explore how we can write a script to do exactly that.</p><p>We’ve divided our seed files into a modular folder structure. This way, everything stays organized and it’s much easier to load schema specific data when you need it.  </p><p>Below is an example of the file structure and the kind of data we’ll be loading into the database later in our <a href=\"https://github.com/raghavyuva/nixopus/blob/master/api/internal/fixtures/loader/fixture_loader.go\" rel=\"noopener noreferrer\">Codebase</a>:</p><div><pre><code></code></pre></div><p>First things first, we need to get input from the user. Let’s assume the user runs a command like:</p><p><code>go run internal/cmd/fixtures/main.go</code></p><p>Then we want to accept some arguments along with this command to determine what exactly the user is trying to do, we will get into what each flag does later, for now let's go forward</p><div><pre><code></code></pre></div><p>Now that we know what the user is actually trying to do, let’s create a Bun DSN URL which stands for , which is a connection string used to configure and connect to databases or services.</p><p>Here’s a raw example of what a Postgres DSN URL looks like: <code>postgres://username:password@localhost:5432/database_name?sslmode=disable</code></p><p>Since we don’t want to hardcode credentials, we need to load our secrets like passwords and other configs from environment variables. Here’s how we can do that in Go:</p><div><pre><code></code></pre></div><p>Once we have our DSN ready, we can check if our connection string is properly formatted and can be parsed without errors. The function we use for this is <a href=\"https://pkg.go.dev/github.com/jackc/pgx/v5#ParseConfig\" rel=\"noopener noreferrer\"></a>:</p><div><pre><code></code></pre></div><p>Now that we are ready to go, let's connect to our database and close the connection to database as our program ends</p><div><pre><code></code></pre></div><p>Now we need to load all our fixtures from the YAML files in our  folder.  Here’s a simple flowchart that shows how the loading process works, <a href=\"https://github.com/raghavyuva/nixopus/blob/master/api/internal/fixtures/loader/fixture_loader.go\" rel=\"noopener noreferrer\">Read The Code</a></p><p>After we have everything set up, we decide <strong>how we want to load the fixtures onto our database</strong>.  This block of code checks which option the user passed when they ran the command and performs the action accordingly:</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Explanation of the Flags We Considered Earlier\n</h3><p>I know you must be waiting for the final touch, it's a lot of code to digest, right? So let’s take a moment to clearly understand the arguments we took earlier from the user:</p><ul><li>If you used , it , recreates them, and then loads your fixtures into fresh tables. This is helpful if you want to start from scratch every time.</li><li>If you used , it  but keeps the tables themselves (the structure stays intact), then loads your fixtures.</li><li>If you didn’t pass any of those flags, it simply <strong>inserts the fixture data as-is</strong>, without dropping or truncating anything.</li></ul><p>Do you think this could be done even better? Hmm that’s exactly why we’d love to have you join our <a href=\"https://discord.gg/skdcq39Wpv\" rel=\"noopener noreferrer\">Discord community</a>!   Want to see what we’re building and what we’ve accomplished so far? Take a look at our <a href=\"https://github.com/raghavyuva/nixopus/blob/master/CHANGELOG.md\" rel=\"noopener noreferrer\">CHANGELOG.md</a>.  </p>","contentLength":4258,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"**Building a Concurrent Caching System in Go: 500K+ Operations Per Second Performance**","url":"https://dev.to/aaravjoshi/building-a-concurrent-caching-system-in-go-500k-operations-per-second-performance-3gbl","date":1751221009,"author":"Aarav Joshi","guid":175344,"unread":true,"content":"<blockquote><p>As a best-selling author, I invite you to explore my books on <a href=\"https://www.amazon.com/stores/Aarav-Joshi/author/B0DQYNVXZ7?ref=ap_rdr&amp;isDramIntegrated=true&amp;shoppingPortalEnabled=true&amp;ccs_id=738636bd-0ca1-4d7b-8efa-481bfc222571\" rel=\"noopener noreferrer\">Amazon</a>. Don't forget to follow me on <a href=\"https://medium.com/@aarav-joshi\" rel=\"noopener noreferrer\">Medium</a> and show your support. Thank you! Your support means the world! </p></blockquote><p>Building high-performance applications often feels like solving a complex puzzle. When systems struggle under heavy data loads, I've found that intelligent caching becomes essential. My journey with Go led me to design a concurrent caching system that handles millions of operations efficiently. Let me share how this works and why it matters.</p><p>Caching isn't just about storing data. It's about making strategic decisions on what to keep and what to remove. In our implementation, we support three eviction strategies. Least Recently Used discards older items first. Least Frequently Used removes less-accessed entries. Adaptive Replacement Cache dynamically balances between recency and frequency patterns. Each approach serves different access scenarios.</p><p>Sharding is our secret weapon against contention. By splitting data across partitions, we minimize lock collisions. Here's how we distribute keys:</p><div><pre><code></code></pre></div><p>This FNV-1a hashing ensures even distribution across shards. Each shard operates independently, allowing concurrent access patterns that scale with CPU cores. </p><p>Memory management requires careful design. We use atomic operations for access tracking to avoid excessive locking. Notice how we handle entry updates:</p><div><pre><code></code></pre></div><p>These lightweight operations maintain accuracy without blocking other readers. For eviction, priority queues enable efficient removal. The LRU implementation uses a heap-based queue:</p><div><pre><code></code></pre></div><p>Time-based expiration is handled through a background cleaner. This routine periodically scans for stale entries:</p><div><pre><code></code></pre></div><p>Serialization demonstrates practical persistence. Our approach avoids marshaling expired entries:</p><div><pre><code></code></pre></div><p>Performance testing reveals impressive results. On a 32-core system, we consistently achieve over 500,000 operations per second. The sharded architecture reduces contention dramatically compared to single-lock implementations. Memory overhead stays low—about 30% less than standard map-based caches.</p><p>In production, I've applied this to several scenarios. Database query caching reduces backend load by 40% in read-heavy applications. Web session storage handles sudden traffic spikes gracefully. API response caching cuts latency from milliseconds to microseconds. For computational workflows, memoization reuse saves significant processing time.</p><p>Consider these enhancements for enterprise use. Add Prometheus metrics to track hit ratios and eviction rates. Implement size-based eviction for memory-bound systems. For distributed environments, integrate cluster coordination using gossip protocols. Always include cache warming mechanisms for cold starts.</p><p>The true value emerges in high-scale systems. When handling 50,000 operations across 100 goroutines, our implementation performs reliably:</p><div><pre><code></code></pre></div><h2>\n  \n  \n  This outputs results like: <code>Processed 50k ops in 92.4ms</code>. The numbers prove our design—minimal locking, smart eviction, and memory efficiency create a responsive caching layer. Whether building microservices or data pipelines, such caching becomes infrastructure bedrock.\n</h2><p>📘 , , , and  to the channel!</p><p> is an AI-driven publishing company co-founded by author . By leveraging advanced AI technology, we keep our publishing costs incredibly low—some books are priced as low as —making quality knowledge accessible to everyone.</p><p>Stay tuned for updates and exciting news. When shopping for books, search for  to find more of our titles. Use the provided link to enjoy !</p><p>Be sure to check out our creations:</p>","contentLength":3577,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"**Go Database Optimization: 5 Performance Patterns That Boost Application Speed by 700%**","url":"https://dev.to/aaravjoshi/go-database-optimization-5-performance-patterns-that-boost-application-speed-by-700-4148","date":1751220190,"author":"Aarav Joshi","guid":175326,"unread":true,"content":"<blockquote><p>As a best-selling author, I invite you to explore my books on <a href=\"https://www.amazon.com/stores/Aarav-Joshi/author/B0DQYNVXZ7?ref=ap_rdr&amp;isDramIntegrated=true&amp;shoppingPortalEnabled=true&amp;ccs_id=738636bd-0ca1-4d7b-8efa-481bfc222571\" rel=\"noopener noreferrer\">Amazon</a>. Don't forget to follow me on <a href=\"https://medium.com/@aarav-joshi\" rel=\"noopener noreferrer\">Medium</a> and show your support. Thank you! Your support means the world! </p></blockquote><p>Building high-performance applications in Go requires thoughtful database interaction design. When systems face heavy loads, inefficient data access becomes the primary bottleneck. I've seen applications crumble under pressure due to poorly optimized database patterns, leading to frustrated users and costly scaling. Let's explore practical techniques to prevent these issues.</p><p>Database connections are expensive resources. Creating new connections for every request wastes precious milliseconds. Connection pooling solves this by reusing existing connections. Here's how I configure it properly:</p><div><pre><code></code></pre></div><p>These numbers aren't arbitrary. After load testing various configurations, I found this ratio balances memory usage and connection wait times. Exceeding your database's actual connection limit causes queues that cascade through your application.</p><p>Batch processing revolutionized how I handle write operations. Instead of executing individual inserts, I group them:</p><div><pre><code></code></pre></div><p>The batch processor collects operations until reaching 100 requests or waiting 100ms, whichever comes first. This reduced database round trips by 92% in my last benchmark. The transaction block ensures atomic execution:</p><div><pre><code></code></pre></div><p>Caching requires careful strategy. I implement dual caching: prepared statements and query results. Statement caching avoids repeated SQL compilation:</p><div><pre><code></code></pre></div><p>Result caching works best for read-heavy operations. Serializing to JSON handles struct variability:</p><div><pre><code></code></pre></div><p>Context handling prevents resource leaks. Always propagate cancellation:</p><div><pre><code></code></pre></div><p>For production systems, add observability. I instrument these key metrics:</p><ul><li>Batch flush latency distribution</li><li>Pool utilization percentage</li></ul><p>Implement circuit breakers to avoid overwhelming databases during outages. This simple pattern prevents cascading failures:</p><div><pre><code></code></pre></div><p>Connection validation prevents stale pool issues. Before reuse, verify connectivity:</p><div><pre><code></code></pre></div><p>Tuning requires understanding your workload. For write-heavy systems, increase batch sizes to 500-1000 operations. For read-heavy applications, allocate more memory to caching. Always test with production-like data volumes.</p><p>These patterns delivered remarkable improvements in my projects. One API handling financial transactions increased throughput from 1,200 to 9,500 requests per second. Database CPU utilization dropped by 40% despite higher traffic. The implementation pays continuous dividends as systems scale.</p><h2>\n  \n  \n  Remember optimization isn't premature engineering. It's building responsive foundations. Start with connection pooling, add batching when write volumes grow, and introduce caching for frequent queries. Each layer compounds performance gains while keeping complexity manageable.\n</h2><p>📘 , , , and  to the channel!</p><p> is an AI-driven publishing company co-founded by author . By leveraging advanced AI technology, we keep our publishing costs incredibly low—some books are priced as low as —making quality knowledge accessible to everyone.</p><p>Stay tuned for updates and exciting news. When shopping for books, search for  to find more of our titles. Use the provided link to enjoy !</p><p>Be sure to check out our creations:</p>","contentLength":3242,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Cascading context cancellation in Go: from source code to production patterns","url":"https://dev.to/flew1x/cascading-context-cancellation-in-go-from-source-code-to-production-patterns-177j","date":1751181064,"author":"Vladislav Semenkov","guid":174976,"unread":true,"content":"<p>This time, I would like to delve deeper into the work of the internal interaction of the context from the prism of its cancellation, so this article is a continuation of the previous one.</p><div><pre><code></code></pre></div><p>For clarity, I have prepared a simple example that demonstrates how to cancel the context. What will this piece of code output?</p><div><pre><code>worker cancelled, err: context canceled\nworked is executed: context canceled\n</code></pre></div><blockquote><p>The  function informs the operation about the shutdown, but does not wait for its completion. It can be called simultaneously by several subroutines. After the first call, subsequent calls do nothing.</p></blockquote><p>It does not contain a \"\" internal implementation, it just checks whether the context is  and calls . </p><p>What happens in this piece of code step by step:</p><p>1) creating a context with cancellation\n2) we call goroutine in the background, which performs a \"\" worker in itself\n3) we are waiting for the time to work for the worker</p><p>We have written the simplest example of how context cancellation works.</p><h2>\n  \n  \n  How did the context know to close Done?\n</h2><p>Let's dig inside the  method itself. </p><p>The signature of this method itself includes 2 parameters.</p><p>1) the  interface itself\n2) The  interface</p><p>Let me remind you what the  interface itself looks like.:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>Do not forget that there are internal structures in the context itself, while the cancellation context comes from .  itself:</p><div><pre><code></code></pre></div><blockquote><p> organizes the cancellation of the child element in the presence of the parent, sets the parent context . Thus, the  method ensures that the cancellation of the parent context is correctly transmitted to all child contexts, ensuring consistency and simplifying lifetime management of related operations.\nAs can be seen from the source code of  creation, the internal  signaling depends on the  channel. If you want to cancel this context, you need to block everything . The easiest way is to close this channel or replace it with an already closed channel.</p></blockquote><p>It is important to remember: Every  has a , and when the context is canceled, it is iterated over it, as can be seen from the source code. That is, the scheme of an approximate interaction may look like this:</p><p><em><strong>Parent (cancelCtx) -&gt; Child(timerCtx) -&gt; GrandChild(cancelCtx)</strong></em></p><p>But you may ask, since the map itself is not visible, what is the internal structure of the context?</p><div><pre><code></code></pre></div><p>Everything is quite simple here, we use the mutex so that there is no race, the rest of the fields are used for their intended purpose, I analyzed the very inside of the cancellation context and other contexts in the last article, I advise you to familiarize yourself, as I would like to touch on the practical aspect.</p><p>This context is primarily needed to create a context with a \"reason\" if we want to return a custom error in it, which can be useful to use in specific queue processing locations in production code, where we need to properly consolidate errors related to context cancellation.</p><div><pre><code></code></pre></div><div><pre><code>With cancellation:\nErr context cancelled\nCause context canceled\n\nWith cancellation due to:\nError  context cancelled\nReason  some kind of error\n\nChild context:\nError  context cancelled\nReason  some kind of error\n</code></pre></div><p> propagates down the context tree - child contexts roughly \"inherit\" the cause.</p><p>What if we try to call )?</p><p>Then everything will be fine in terms of processing, since the context will keep the context cancelled.</p><p>1) We have the very fact of canceling , which is compatible with versions when cause did not exist yet.\n2) Cause can be used for detailed diagnostics.</p><h2>\n  \n  \n  Access from multiple goroutines\n</h2><p>By itself,  is safe to call from multiple goroutines. </p><p>1) The channel that returns  is closed once at the moment of the first successful context cancellation.</p><p>2) To prevent a race, as I described above, the context uses mutexes and atomics.</p><p>1) You can wait for cancellation from as many locations as you like\n2) You can also call  from several goroutines, since atomic is used.\n3) You can cancel the context everywhere, but it will only work once)</p><p>It is a convenient thing to execute any code when context is canceled.</p><div><pre><code></code></pre></div><p>We use it if we want to do rollback and other things through the context, when canceling it, or use it as a context handler that you don't know about yet.</p><p>1) Does not block the current routine, runs in a new one\n2) There is no conflict between multiple \n3) If the context has already been canceled, it starts instantly.<p>\n4) It can save you from deadlock if, for example, you forgot to unlock the mutex by timeout.</p></p><blockquote><p>The  function accepts a function that will be executed after the context is terminated, including when the timeout expires. If the context has already ended, the function will start immediately. The function is executed in a separate thread. At the same time, every call&nbsp;AfterFunc is performed independently of the others. returns the stop function. When the stop function is called, the connection between the function and the context is broken. If the context is already in the state&nbsp;Done and the function has already been started, or if the function has already been stopped, the stop function returns false.\nThe function exits if the value is true. The stop function does not wait for the function to complete, so it is recommended to explicitly interact with it to monitor the status.</p></blockquote><p>Do not forget to remove the stop after completing the work. If you need synchronicity, you need to do it yourself.</p><p>Also, do not forget, if you use , that the function or method must be impodent, otherwise a race may happen. Because the context is canceled and the function starts at the same moment when  is called. For example,  is already impodent, so everything is fine, but when working with a file, you need to add .</p><p>After many interviews with people for the middle position and above, I noticed that many people do not know about its existence. In general, almost 90 percent of the articles in which the context was specified were simply avoided, but in general it is understandable, a new method that appeared relatively recently. I will not talk about him and will insert a quote from my last article.</p><blockquote><p> is useful in situations where certain operations must complete regardless of the state of the parent context. This can be useful for background tasks, logging, caching, and any other tasks that need to be completed even if the main operation is canceled, such as a rollback operation.\nThe context does not return  or . The  channel value is nil. Reading from it will cause the program to lock.</p></blockquote><p>There is also a cancellation with a deadline and a timeout, which are essentially the same thing under the hood, just different types, but that's it - </p><ul><li><p><code>WithDeadline(parent Context, d time.Time) (Context, CancelFunc)</code> - creates a child context using the cancel method from the parent context, except that the context will be automatically canceled when the specified time is reached.</p></li><li><p><code>context.WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)</code> is the same as , except that it specifies the timeout from the current time.</p></li></ul><p>Let's start with simple rules for how your contexts work:</p><div><pre><code></code></pre></div><p> immediately after , . If not called, the child context and its timers will hang until the parent is canceled and flow through memory.</p><div><pre><code></code></pre></div><div><pre><code>goroutines before: 1\ngoroutines after : 501\n</code></pre></div><p>Close the workers cascadingly, since one cancel in the parents closes the Done channel for all descendants.</p><div><pre><code></code></pre></div><p> and  will automatically cancel the request, even if you forgot to call </p><div><pre><code></code></pre></div><p>Do not forget to wrap the context after  into a child context with the cancellation time!</p><p>The rest of the patterns are used as a \"\" if you are familiar with the definition and operation of the context itself and are common. </p><p>Initially, the package contains a closed channel so that the first context cancellation takes place without unnecessary allocations and without double closure. When  is called for the first time, it checks whether the done channel has not yet been created, otherwise, instead of , it simply writes a link to an already closed .</p><ul><li>We avoid allocation so that we use a ready-made object.</li><li>There is no panic if we call close again. All post calls will see that it indicates a closed channel.</li><li>Serves only for the cancel signal</li></ul><p>The article turned out to be succinct and uncomplicated, where the main aspects of context cancellation were touched upon, if there are any suggestions for improving the article or adding it, I will gladly accept suggestions! Thanks to everyone who read it to the end!</p>","contentLength":8351,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"認知不完美記憶系統","url":"https://dev.to/pardnchiu/tou-guo-mo-ni-ren-lei-de-dui-hua-jie-chu-llm-dui-hua-chuan-chang-du-xian-zhi-yu-jie-jue-duo-lun-dui-hua-zhong-mi-shi-wen-ti-4l54","date":1751180678,"author":"邱敬幃 Pardn Chiu","guid":174951,"unread":true,"content":"<p>針對的研究顯示：</p><ul><li>原因：\nLLM 使用「完整記憶」模型而非類人的選擇性記憶</li></ul><div><table><tbody></tbody></table></div><p>研究發現，異常記憶能力並不等同於智能優勢。神經心理學經典案例 <a href=\"https://en.wikipedia.org/wiki/Solomon_Shereshevsky\" rel=\"noopener noreferrer\">Solomon Shereshevsky</a> 能記住數十年前的任意細節，包括無意義的數字序列和詞彙表，但「完美記憶」反而造成認知負擔。他無法區分重要與不重要的資訊，導致抽象思考與日常決策困難。</p><p>傳統 LLM 採用完整記憶模型，實際上可能是在模擬認知障礙。導致結果需要追求更大更強的硬體支援，卻依舊無法給出等比例的成長。</p><div><pre><code>選擇性注意 &gt; 完整記憶\n抽象總結 &gt; 細節保存  \n動態適應 &gt; 固定重播\n</code></pre></div><ul><li>而是維持動態的「當前理解」，並且會依據新消息而更新論點</li><li>過往細節會淡化甚至遺失，但關鍵結論和限制條件會持續存在</li></ul><ul></ul><div><pre><code>人類對話過程 → 工程話實踐\n\n腦中摘要 → 透過小型模型在每輪後生成結構化摘要\n內容回想 → 每個問題自動模糊搜尋歷史對話（相關性評分機制）\n新對話 → 最新摘要 + 相關歷史片段 + 新問題\n</code></pre></div><blockquote><p>：不是設計更好、更大的資訊檢索的支持，而是建造了像人類一樣處理資訊的系統</p></blockquote><ul></ul><ul><li>模擬人類機制：預設狀態僅使用結構化摘要，避免歷史資訊淹沒當前對話</li><li>機器補強：完整對話記錄依然保存，當觸發檢索時能提供比人類更精確的細節回想</li></ul><p>保持了人類對話的自然聚焦特性，又利用了機器在精確檢索上的優勢。對話當下不使用完整歷史串，只在特定觸發條件下才啟動詳細檢索。</p><div><pre><code>排除不必要的資訊：從關鍵概要中移除\n聚焦維持：使用結構化摘要，類似腦中攏統概要\n主動回想：每個問題自動檢索相關歷史內容\n狀態更新：持續摘要，類似腦中的事件理解\n</code></pre></div><ul></ul><ol><li>（相關性的資訊保留 vs 完整歷史）\n每次對話過程後，人類會無意識的情況下針對新接收的資訊更新對當前對話的總結，並以新觀點進行下一輪對話</li><li>（自動記憶檢索）\n針對每個新問題，自動搜尋歷史對話中的相關內容，模擬人類主動聯想過往討論</li><li>（結構化摘要）\n動態調整當前對話主軸，非重新 review 整個對話歷史</li></ol><div><table><tbody></tbody></table></div><div><pre><code>graph TB\n  T1[\"第1輪對話\"] --&gt; T1_Store[\"儲存: [Q1] + [R1]\"]\n  T1_Store --&gt; T2[\"第2輪對話\"]\n  T2 --&gt; T2_Store[\"儲存: [Q1] + [R1] + [Q2] + [R2]\"]\n  T2_Store --&gt; T3[\"第3輪對話\"]\n  T3 --&gt; T3_Store[\"儲存: [Q1] + [R1] + [Q2] + [R2] + [Q3] + [R3]\"]\n  T3_Store --&gt; TN[\"第N輪對話\"]\n  TN --&gt; TN_Store[\"儲存: 完整對話\"]\n</code></pre></div><div><pre><code>第 1 輪：[question 1] + [response 1]\n第 2 輪：[question 1] + [response 1] + [question 2] + [response 2]\n第 3 輪：[question 1] + [response 1] + [question 2] + [response 2] + [question] + [response 3]\n...\n第 N 輪：[完整對話逐字記錄]\n</code></pre></div><ul><li>線性增長的 Token 導致對話串長度限制，人類不會因為一個對話過長而中斷</li></ul><div><pre><code>graph TB\n  H_Input[\"新問題輸入\"] --&gt; H_Fuzzy[\"模糊檢索歷史\"]\n  H_Fuzzy --&gt; H_Components[\"上下文組成\"]\n  H_Components --&gt; H_Summary[\"結構化概要\"]\n  H_Components --&gt; H_Relevant[\"相關歷史片段\"]\n  H_Components --&gt; H_Question[\"新問題\"]\n\n  H_Summary --&gt; H_LLM[\"LLM 回應\"]\n  H_Relevant --&gt; H_LLM\n  H_Question --&gt; H_LLM\n\n  H_LLM --&gt; H_Response[\"生成回答\"]\n  H_Response --&gt; H_NewSummary[\"更新結構化概要\"]\n  H_NewSummary --&gt; H_Store[\"儲存到記憶\"]\n</code></pre></div><div><pre><code>每一輪：[結構化當前狀態] + [相關歷史片段] + [新問題]\n</code></pre></div><div><pre><code>當前討論的核心主題\n累積保留所有確認的需求\n累積保留所有約束條件\n被排除的選項+原因\n累積保留所有重要資料和事實與所有結論\n當前主題相關的待釐清問題\n所有重要的歷史討論點\n</code></pre></div><blockquote><p>人類的記憶檢索通常會由關鍵字觸發，例如：「剛剛提到的...」<p>\n所以本區塊的設計是計算最新問題與對話紀錄相似度高的歷史訊息作為參考資料補充模擬</p>：</p><ul></ul></blockquote><div><pre><code>總分 = 關鍵詞重疊(40%) + 語義相似度(40%) + 時間權重(20%)\n</code></pre></div><ul></ul><ul></ul><ul><li>24小時內線性衰減：最近=1.0，24小時前=0.7</li><li>超過24小時後固定分數0.7（適合長時間持續對話）</li></ul><ul></ul><div><pre><code>每輪對話上下文 = [結構化概要] + [相關歷史對話] + [新問題]\n</code></pre></div><ul><li>[x] ：每輪對話後自動更新認知狀態（gpt-4o-mini）\n</li><li>[x] ：通過  避免重複錯誤</li><li>[x] ：固定傳送概要與新內容，不再是以完整訊息串傳遞</li><li>[x] ：關鍵詞+語義+時間的綜合相關性評估</li></ul><ul><li>[ ] ：根據對話內容自動調整相關性閾值</li><li>[ ] ：支援更多 LLM 提供商（Claude、Gemini 等）</li></ul><ul></ul><div><pre><code>git clone https://github.com/pardnchiu/cim-prototype \ncim-prototype\n</code></pre></div><ol><li>\n創建  檔案並放入您的 OpenAI API 金鑰：\n</li></ol><div><pre><code> OPENAI_API_KEY\n</code></pre></div><div><pre><code></code></pre></div><div><pre><code>./cimp\n./cimp </code></pre></div><div><pre><code>go run main.go\ngo run main.go </code></pre></div><p>程式會按照以下順序尋找 OpenAI API 金鑰：</p><ol></ol><ul></ul><ul><li>定義概要生成模型（GPT-4o-mini）的系統指令</li></ul><ol><li><ul></ul></li><li><ul></ul></li><li><ul><li>系統自動更新對話概要，保持記憶狀態（請等摘要更新完在進行對話）</li></ul></li></ol>","contentLength":4932,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Breaking LLM Context Limits and Fixing Multi-Turn Conversation Loss Through Human Dialogue Simulation","url":"https://dev.to/pardnchiu/enhance-llm-conversation-through-human-like-dialogue-simulation-54ej","date":1751180322,"author":"邱敬幃 Pardn Chiu","guid":174950,"unread":true,"content":"<blockquote><p>[!Note]\nThis content is translated by LLM. Original text can be found <a href=\"https://dev.to/pardnchiu/tou-guo-mo-ni-ren-lei-de-dui-hua-jie-chu-llm-dui-hua-chuan-chang-du-xian-zhi-yu-jie-jue-duo-lun-dui-hua-zhong-mi-shi-wen-ti-4l54\">here</a></p></blockquote><blockquote><p>Attempting to solve the problem of \"LLMs getting lost in multi-turn conversations\" by <strong>simulating human conversation patterns</strong>.<a href=\"https://arxiv.org/abs/2505.06120\" rel=\"noopener noreferrer\">LLMs Get Lost In Multi-Turn Conversation</a><p>\nProvides 2 TUI modes for testing traditional vs new architecture: Jump to TUI Example</p></p></blockquote><h3>\n  \n  \n  Common LLM Issues in Long Conversations\n</h3><p>Research on <strong>15 LLMs across 200,000+ conversations</strong> shows:</p><ul><li>Problem:\nMulti-turn conversation performance drops 39%</li><li>Cause:\nLLMs use \"complete memory\" models instead of human-like selective memory</li></ul><div><table><thead><tr></tr></thead><tbody><tr><td>Ask clarifying questions first</td></tr><tr><td>Forget irrelevant details</td></tr><tr></tr><tr></tr></tbody></table></div><p><strong>Cognitive Burden of Perfect Memory</strong></p><p>Research shows exceptional memory ability doesn't equal intelligence advantage. The classic neuropsychological case of <a href=\"https://en.wikipedia.org/wiki/Solomon_Shereshevsky\" rel=\"noopener noreferrer\">Solomon Shereshevsky</a> could remember arbitrary details from decades ago, including meaningless number sequences and vocabulary lists, but \"perfect memory\" actually created cognitive burden. He couldn't distinguish important from unimportant information, leading to difficulties in abstract thinking and daily decision-making.</p><p>Traditional LLMs using complete memory models may actually be simulating cognitive impairment. This leads to requiring bigger, more powerful hardware support without proportional performance gains.</p><div><pre><code>Selective attention &gt; Complete memory\nAbstract summarization &gt; Detail preservation  \nDynamic adaptation &gt; Fixed replay\n</code></pre></div><h2>\n  \n  \n  Real Conversation Process\n</h2><h3>\n  \n  \n  Continuously Updating Mental Summary\n</h3><ul><li>Humans don't repeatedly go through entire conversation history in their minds</li><li>Instead, they maintain a dynamic \"current understanding\" and update conclusions based on new information</li><li>Past details fade or disappear, but key conclusions and constraints persist</li></ul><ul><li>When someone says \"that thing we discussed earlier\"</li><li>We perform fuzzy searches of recent memory for relevant information</li><li>Only retrieve specific details when triggered by reference keywords</li></ul><div><pre><code>Human conversation process → Engineering implementation\n\nMental summary → Small model generates structured summary after each turn\nContent recall → Automatic fuzzy search of conversation history for each question (relevance scoring)\nNew conversation → Latest summary + relevant history fragments + new question\n</code></pre></div><h3>\n  \n  \n  Human Conversation Simulation\n</h3><blockquote><p><strong>Simulating imperfect memory</strong>: Instead of designing better, larger information retrieval support, we built a system that processes information like humans do</p></blockquote><h4>\n  \n  \n  Humans Are Inherently Poor at Complete Memory\n</h4><ul><li>We forget irrelevant details </li><li>We remember key decisions </li><li>We have internal measures </li><li>We maintain current conversation focus</li><li>We actively associate relevant past content</li></ul><h4>\n  \n  \n  Combining Machine Advantages\n</h4><p>This approach explores combining human cognitive advantages with machine computational advantages:</p><ul><li>Simulate human mechanisms: Default state uses only structured summaries, avoiding historical information overwhelming current conversation</li><li>Machine enhancement: Complete conversation records are still preserved; when retrieval is triggered, can provide more precise detail recall than humans</li></ul><p>Maintains the natural focus characteristics of human conversation while leveraging machine advantages in precise retrieval. Doesn't use complete history during conversation, only activating detailed retrieval under specific trigger conditions.</p><h4>\n  \n  \n  Engineering Simulation Focus\n</h4><div><pre><code>Exclude unnecessary information: Remove from key summaries\nMaintain focus: Use structured summaries, similar to mental rough overviews\nActive recall: Automatically retrieve relevant historical content for each question\nState updates: Continuous summarization, similar to mental event understanding\n</code></pre></div><ul><li>Don't replay complete content but use summaries to simulate human rough overviews</li><li>Summarize into new overviews to adjust conversation direction, simulating human internal perspectives</li><li>Actively retrieve relevant history to simulate human associative memory</li></ul><ol><li><strong>Continuous mental perspective updates → Automatic summary updates</strong> (relevant information retention vs complete history)\nAfter each conversation turn, humans unconsciously update their current conversation summary based on new information and proceed with the next turn using new perspectives</li><li><strong>Active associative memory → Fuzzy search system</strong> (automatic memory retrieval)\nFor each new question, automatically search relevant content in conversation history, simulating human active association of past discussions</li><li><strong>Current state focus → Fixed context structure</strong> (structured summaries)\nDynamically adjust current conversation direction, not re-reviewing entire conversation history</li></ol><div><table><thead><tr><th>Simulation Implementation</th></tr></thead><tbody><tr></tr><tr><td>Excluded options tracking</td></tr><tr></tr><tr><td>Active associative triggering</td></tr></tbody></table></div><h3>\n  \n  \n  LLM \"Complete Memory\" (Non-human conversation method)\n</h3><div><pre><code>graph TB\n  T1[\"Turn 1 Conversation\"] --&gt; T1_Store[\"Store: [Q1] + [R1]\"]\n  T1_Store --&gt; T2[\"Turn 2 Conversation\"]\n  T2 --&gt; T2_Store[\"Store: [Q1] + [R1] + [Q2] + [R2]\"]\n  T2_Store --&gt; T3[\"Turn 3 Conversation\"]\n  T3 --&gt; T3_Store[\"Store: [Q1] + [R1] + [Q2] + [R2] + [Q3] + [R3]\"]\n  T3_Store --&gt; TN[\"Turn N Conversation\"]\n  TN --&gt; TN_Store[\"Store: Complete conversation\"]\n</code></pre></div><div><pre><code>Turn 1: [question 1] + [response 1]\nTurn 2: [question 1] + [response 1] + [question 2] + [response 2]\nTurn 3: [question 1] + [response 1] + [question 2] + [response 2] + [question 3] + [response 3]\n...\nTurn N: [Complete verbatim conversation record]\n</code></pre></div><ul><li>Humans don't completely recall all content</li><li>Old irrelevant information interferes with current content generation; humans exclude irrelevant information</li><li>No mechanism for learning from mistakes; gets interfered by irrelevant information in long conversations</li><li>Linear token growth leads to conversation length limits; humans don't interrupt conversations because they're too long</li></ul><h3>\n  \n  \n  Human Real Conversation Method Study\n</h3><div><pre><code>graph TB\n  H_Input[\"New question input\"] --&gt; H_Fuzzy[\"Fuzzy search history\"]\n  H_Fuzzy --&gt; H_Components[\"Context composition\"]\n  H_Components --&gt; H_Summary[\"Structured summary\"]\n  H_Components --&gt; H_Relevant[\"Relevant history fragments\"]\n  H_Components --&gt; H_Question[\"New question\"]\n\n  H_Summary --&gt; H_LLM[\"LLM response\"]\n  H_Relevant --&gt; H_LLM\n  H_Question --&gt; H_LLM\n\n  H_LLM --&gt; H_Response[\"Generate answer\"]\n  H_Response --&gt; H_NewSummary[\"Update structured summary\"]\n  H_NewSummary --&gt; H_Store[\"Store to memory\"]\n</code></pre></div><div><pre><code>Each turn: [Structured current state] + [Relevant history fragments] + [New question]\n</code></pre></div><h4>\n  \n  \n  Conversation Summary Design\n</h4><div><pre><code>Core topic of current discussion\nAccumulated retention of all confirmed requirements\nAccumulated retention of all constraint conditions\nExcluded options + reasons\nAccumulated retention of all important data, facts, and conclusions\nCurrent topic-related questions to clarify\nAll important historical discussion points\n</code></pre></div><h2>\n  \n  \n  Fuzzy Retrieval Algorithm\n</h2><blockquote><p>Human memory retrieval is typically triggered by keywords, such as: \"what we mentioned earlier...\"<p>\nThis section is designed to calculate high similarity between the latest question and conversation history to provide supplementary reference materials, simulating </p><strong>natural memory trigger mechanisms</strong>:</p><ul><li>Keyword triggering: Immediately associate relevant content upon hearing specific keywords</li><li>Semantic Similarity: Comprehend content with similar meaning but different wording</li><li>Time Weight: Recent conversations are more easily recalled</li></ul></blockquote><h3>\n  \n  \n  Multi-dimensional Scoring Mechanism\n</h3><div><pre><code>Total score = Keyword overlap (40%) + Semantic similarity (40%) + Time weight (20%)\n</code></pre></div><ul><li>Use Jaccard similarity to calculate vocabulary matching degree</li><li>Support partial matching and inclusion relationships</li></ul><ul><li>Simplified cosine similarity, calculating common vocabulary proportion</li><li>Suitable for Chinese-English mixed text processing</li></ul><ul><li>Linear decay within 24 hours: recent=1.0, 24 hours ago=0.7</li><li>Fixed score of 0.7 after 24 hours (suitable for long-term continuous conversations)</li></ul><h3>\n  \n  \n  Retrieval Control Mechanism\n</h3><ul><li>: Default 0.3, filters irrelevant content</li><li>: Return maximum 5 most relevant records</li><li>: Automatically filter stop words, retain meaningful vocabulary</li></ul><h3>\n  \n  \n  Context Combination Strategy\n</h3><div><pre><code>Each turn conversation context = [Structured summary] + [Relevant historical conversation] + [New question]\n</code></pre></div><ul><li>[x] <strong>Structured summary system</strong>: Simulate human mental rough summaries</li><li>[x] : Automatically update cognitive state after each conversation turn (gpt-4o-mini)\n</li><li>[x] : Avoid repeated mistakes through </li><li>[x] <strong>Token efficiency optimization</strong>: Fixed transmission of summaries and new content, no longer passing complete message streams</li><li>[x] <strong>Fuzzy retrieval mechanism</strong>: Automatically retrieve relevant historical conversations as reference</li><li>[x] <strong>Multi-dimensional scoring algorithm</strong>: Comprehensive relevance assessment of keywords+semantics+time</li><li>[x] <strong>Long conversation optimization</strong>: Time weight design suitable for continuous conversation scenarios</li></ul><ul><li>[ ] <strong>Semantic understanding enhancement</strong>: Integrate more precise semantic similarity algorithms</li><li>[ ] <strong>Keyword extraction optimization</strong>: More intelligent vocabulary extraction and weight allocation</li><li>[ ] <strong>Dynamic threshold adjustment</strong>: Automatically adjust relevance thresholds based on conversation content</li><li>[ ] <strong>Conversation type identification</strong>: Optimize memory strategies for different conversation scenarios</li><li>[ ] : Support more LLM providers (Claude, Gemini, etc.)</li></ul><ul></ul><div><pre><code>git clone https://github.com/pardnchiu/llm-humanlike-dialogue-simulation \nllm-humanlike-dialogue-simulation\n</code></pre></div><ol><li>\nCreate an  file and put your OpenAI API key:\n</li></ol><div><pre><code> OPENAI_API_KEY\n</code></pre></div><p>Or set environment variable:</p><div><pre><code></code></pre></div><div><pre><code>./llmsd\n./llmsd </code></pre></div><div><pre><code>go run main.go\ngo run main.go </code></pre></div><p>The program will look for OpenAI API key in the following order:</p><ol><li>Environment variable </li><li> file in current directory</li><li> file in executable directory</li></ol><h4>\n  \n  \n  Instruction File Configuration\n</h4><ul><li>Defines system instructions for main conversation model (GPT-4o)</li><li>Affects AI assistant's response style and behavior</li><li>If file doesn't exist, will use blank instructions</li></ul><ul><li>Defines system instructions for summary generation model (GPT-4o-mini)</li><li>Affects conversation summary update logic and format</li><li>If file doesn't exist, will use blank instructions</li></ul><ol><li><p>: After execution, displays three-panel interface</p><ul><li>Left: Conversation history display</li><li>Top right: Conversation summary display</li><li>Bottom right: Question input field</li></ul></li><li><ul></ul></li><li><ul><li>After inputting question, system automatically retrieves relevant historical conversations</li><li>AI provides answers based on summary and relevant history</li><li>System automatically updates conversation summary, maintaining memory state (wait for summary update before continuing conversation)</li></ul></li></ol><p>This source code project is licensed under the <a href=\"https://dev.toLICENSE\">MIT</a> license.</p>","contentLength":10450,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Juggling Memory: Arenas in Golang","url":"https://dev.to/flew1x/juggling-memory-arenas-in-golang-5bm9","date":1751154538,"author":"Vladislav Semenkov","guid":174777,"unread":true,"content":"<p>Greetings, in a highly loaded environment, large allocation often strongly affects the processing speed of a particular part of the service, in order to more finely control memory, arenas have appeared. How do they turn on? It's simple, you need the  flag. Let's take an example of how memory works with \"tiny objects\".</p><h2>\n  \n  \n  The route of the \"\"\n</h2><p>The so-called \"\" is responsible for \"\" in Golang. How does it work?</p><p>In golang, all tiny objects go through the path: <em>tiny allocator -&gt; cache -&gt; span pool (with tiny Span Class) - heap</em>.</p><p>A , in turn, is considered an object that is less than 16 bytes, if you look at the source code, you can see why you chose such a constant:</p><blockquote><p>// Size of the memory block used for combining (maxTinySize) is tunable.\n// Current setting is 16 bytes, which relates to 2x worst case memory<p>\n// wastage (when all but one subobjects are unreachable).</p>\n// 8 bytes would result in no wastage at all, but provides less<p>\n// opportunities for combining.</p>\n// 32 bytes provides more opportunities for combining,<p>\n// but can lead to 4x worst case wastage.</p>\n// The best case winning is 8x regardless of block size.</p></blockquote><p>Everything is done primarily for optimization.</p><p>All these actions are inside a single , so the allocation of a tiny object is very insignificant. The  intervenes only twice per cycle: , at the beginning and end of the marking (), and a concurrent mark runs between them. Simply put, an automatic mark and sweep is used. In turn, in the arena, many objects are poured into one span and given to runtime in one operation, our  does not interfere and we ourselves have to monitor the lifecycle.</p><p>Arena objects do not participate in  until , where only the pointer is shifted without global structures inside the allocated span</p><p>Earlier in the article, I mentioned \"\", what is it in the classical sense of Go?</p><p>Span is a continuous sequence of pages, a minimal block that the allocation and  operators operate on inside the heap.</p><p>When there are no free cells of the required size in the local , it takes a completely free span from the  and divides it with a bump pointer for objects.</p><p>, when it no longer has enough memory, requests a new span from the global page manager . It, in turn, reserves  pages in the page heap.</p><p>We can discuss this topic in more detail in the following articles, but we won't dwell on it for now.</p><p>First, let's turn on our arenas:</p><div><pre><code>arenas\n</code></pre></div><p>Preface: for large objects, go allocates its own mspan (set of pages) and returns come from the global . Let's take an example using bench + arenas:</p><div><pre><code></code></pre></div><div><pre><code>goos: darwin\ngoarch: arm64\npkg: a\ncpu: Apple M3 Pro\nBenchmarkHeapBig-11                 28        1843796832 ns/op           5162629 ns/alloc     10485842133 B/op           10001 allocs/op\nBenchmarkArenaBig-11                 1        1314971541 ns/op            131497 ns/alloc     11800062248 B/op            1445 allocs/op\nPASS\nok      a       53.578s\n</code></pre></div><p>1) each large object in runtime follows the path of a large allocation with span allocation, 10k allocations - 10k sys calls\n2) the arena, in turn, reserves a large span and small allocations for slice headers</p><p>Here is a sample code that covers the basic API for working with them:</p><div><pre><code></code></pre></div><div><pre><code>go run tiny.go\nfirst 0 01 12 43 94 165 256 367 498 649 81 len  10\n</code></pre></div><p>The arena itself stores a pointer inside itself</p><div><pre><code></code></pre></div><p>In turn,  calls the <code>runtime_arena_newArena() unsafe.Pointer</code>. Which allocates one shared  across a shared heap.</p><h2>\n  \n  \n  How does the GC see the arena?\n</h2><ul><li>the peculiarity of the arena, as I noted above, is that the  does not scan the arena and does not allow objects to it, because it marks it as .</li></ul><p>After , the  starts viewing the arena as an object and the arena itself is marked as a </p><ul><li>the , after the , translates span to idle and memory can be transferred to a regular heap, reuse just happens after the next  cycle.</li></ul><p>There is another feature related to the fact that it has a , which is needed if the developer does not call , then runtime will catch it.</p><ul><li>the  call gets the type via reflect.Type</li></ul><p>It takes into account alignment, copies the zero-word and simply shifts the bump pointer.</p><h3><code>arena.MakeSlice[T](a,len,cap)</code></h3><ul><li><p>reserves the backing array with the same bump pointer, but places the slice header in the regular heap</p></li><li><p>to optimize GC inside the chunk: Pointer-full objects grow from bottom to top, Pointer-free objects grow from top to bottom. This gives runtime the right to finish scanning earlier and skip clearing the bitmap for clean memory areas.</p></li></ul><p>Copies the type to a regular heap via , zeroing out all connections to the arena.</p><ul><li><p>data lives arbitrarily long.</p></li><li><p>the  starts scanning them as an ordinary object.</p></li><li><p>it is also worth considering that if Clone is forgotten or the object is being used after Free, the program crashes with , which makes it easy for us to track such frauds with the past address space.</p></li></ul><ul><li><p>when you need to process large data in one request, for example, a large short-lived buffer and you need to release it all at once.</p></li><li><p>large objects of different sizes, so as not to generate sync.Pool, and as we know, the GC can release them at the wrong moment ;)</p></li><li><p>if we use arenas, it's best to use the build tag, because they may be removed in the future, as written in the comments to the source code themselves.</p></li></ul><h2>\n  \n  \n  When not to use the arenas?\n</h2><ul><li><p>multiple fixed buffers,  will do it faster, the bench will show it very well</p></li><li><p>objects live longer than the request</p></li><li><p>and most importantly, the arena is not thread-safe, so it's better to limit it to running it in a single goroutine.</p></li></ul><p>I hope you enjoyed this article, if you have any suggestions or improvements on the article, write! I will be grateful!</p>","contentLength":5553,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Why I Like Go","url":"https://dev.to/matronator/why-i-like-go-bc9","date":1751153549,"author":"Matronator","guid":174776,"unread":true,"content":"<p>A while back, I wrote an article titled <a href=\"https://dev.to/matronator/why-i-dislike-go-27i1\">Why I Dislike Go</a>. It was an honest reflection of my frustrations at the time, after trying to use Go in some personal projects. I called out what I saw as shortcomings - verbose error handling, lack of generics (at the time), limited expressiveness, and a rigid design philosophy that felt like it was holding me back more than helping.</p><p>I've since had the chance to use Go more extensively, and to explore some of its more modern evolutions, especially through  (formerly Go+). With more experience under my belt, I feel it’s only fair to revisit my earlier stance and share how my perspective has evolved. This article is not a retraction, but rather a follow-up - a continuation of my journey with Go, and why I’ve come to  it.</p><h2>\n  \n  \n  The Paradox of Go: Restriction Breeds Simplicity\n</h2><p>One of the things that annoyed me the most originally was Go’s insistence on simplicity. It felt restrictive. I wanted tools for abstraction, generics, custom error types with stack traces, and all the bells and whistles I was used to in languages like TypeScript, C#, or even PHP.</p><p>But over time, I started to appreciate what Go  let you do. The simplicity isn’t just a constraint - it’s a design decision that leads to consistency, readability, and ease of onboarding for teams. The codebase is boring in the best possible way. After revisiting some Go projects months later, I found them easier to read and understand than many of my TypeScript or C# ones.</p><p>Go’s philosophy grows on you - and once you start thinking in Go, the clarity is liberating.</p><p>Since I wrote that original post, generics have landed in Go. While they’re not as powerful or flexible as in Rust or C#, they  very Go-like: simple, focused, and designed to solve specific use cases rather than introduce abstraction for abstraction's sake.</p><p>They’ve enabled cleaner, more reusable code without sacrificing readability. I still wouldn’t use them everywhere - and Go doesn’t want you to - but when you need them, they’re there. And they work.</p><h2>\n  \n  \n  XGo (Go+): Go’s Friendly Cousin\n</h2><p>One big shift in my attitude came from discovering <a href=\"https://github.com/goplus/xgo\" rel=\"noopener noreferrer\">XGo</a>, the language formerly known as Go+. XGo is like Go’s more expressive younger sibling - it builds on Go’s foundation but introduces a more script-like syntax, better support for mathematical expressions, and a softer learning curve for newcomers.</p><p>If you’re coming from a scripting or dynamic language background, XGo feels more welcoming, without losing Go’s strong typing and performance. You can write Go-style code, but with less boilerplate and more flexibility. It’s especially great for educational purposes, prototyping, and scientific or data-heavy applications.</p><p>For me, XGo rekindled my interest in Go by showing me what's possible with a slightly more expressive syntax, while still staying in the Go ecosystem.</p><h2>\n  \n  \n  Tooling and Ecosystem: Fast, Reliable, and Getting Better\n</h2><p>One thing that never needed changing was Go’s tooling. , , and  remain some of the smoothest developer experiences I’ve had. Everything just works, and it works fast.</p><p>The ecosystem has also matured. With the rise of microservices and containers, Go has firmly cemented itself as a go-to language for backend development. Libraries and frameworks are more plentiful and higher quality than when I first dipped my toes in.</p><h2>\n  \n  \n  Final Thoughts: From Critic to Convert\n</h2><p>So, do I take back everything I said in my old article?</p><p>Not entirely. I still believe some of the critiques I made were valid - at least for how I felt and coded at the time. But Go is a language that rewards patience. It’s not flashy, but it’s solid. And in a world of over-engineered abstractions, Go’s “boring” approach is starting to feel more like a breath of fresh air.</p><p>If you bounced off Go in the past, I encourage you to give it another shot. Try it with a fresh mindset. Or better yet, dip your toes into <a href=\"https://github.com/goplus/xgo\" rel=\"noopener noreferrer\">XGo</a> and see how expressive Go’s future might be.</p><p>You might be surprised - like I was.</p><p><em>Have thoughts or similar experiences with Go or XGo? I’d love to hear about them in the comments!</em></p>","contentLength":4125,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Golang: Deep Dive into Reflection Tricks and Libraries","url":"https://dev.to/shrsv/golang-deep-dive-into-reflection-tricks-and-libraries-amh","date":1751133113,"author":"Shrijith Venkatramana","guid":174594,"unread":true,"content":"<p><em>Hi there! I'm Shrijith Venkatrama, founder of Hexmos. Right now, I’m building <a href=\"https://hexmos.com/landing/liveapi\" rel=\"noopener noreferrer\">LiveAPI</a>, a first of its kind tool for helping you automatically index API endpoints across all your repositories. LiveAPI helps you discover, understand and use APIs in large tech infrastructures with ease.</em></p><p>Reflection in Go lets you inspect and manipulate types, values, and structures at runtime. It’s like having a superpower to peek under the hood of your program while it’s running. This article dives into <strong>practical reflection techniques</strong> and  to make your Go code more dynamic and flexible. Whether you're building a serializer, debugging, or creating generic utilities, these tips will level up your skills.</p><p>We’ll cover 7 key areas with examples you can compile and run. Let’s get started!</p><h2>\n  \n  \n  Why Reflection in Go Matters\n</h2><p>Reflection in Go, powered by the  package, lets you examine types and values dynamically. It’s useful for tasks like serialization, testing, or building generic tools when you don’t know types at compile time. <strong>Go’s type system is static</strong>, so reflection is your go-to for runtime flexibility. However, it’s slower and can make code harder to read, so use it wisely.</p><p>The  package provides two core types:</p><ul><li>: Describes a type (e.g., struct fields, methods).</li><li>: Represents the actual value and allows modification.</li></ul><p>Let’s explore practical ways to use reflection effectively.</p><h2>\n  \n  \n  Inspecting Structs with reflect.Type\n</h2><p>You can use  to inspect a struct’s fields, methods, or metadata. This is handy for debugging or building tools like ORMs.</p><p>Here’s an example that prints a struct’s field names and types:</p><div><pre><code></code></pre></div><ul><li> gets the type of any value.</li><li> and  loop through struct fields.</li><li>Use this for tasks like logging struct details or generating documentation.</li></ul><h2>\n  \n  \n  Modifying Values with reflect.Value\n</h2><p> lets you read and modify values at runtime. This is powerful for updating structs dynamically, like in a generic configuration loader.</p><p>Here’s an example that updates a struct field based on its name:</p><div><pre><code></code></pre></div><ul><li> to modify values ( checks modifiability).</li><li> finds fields dynamically.</li><li>Validate inputs to avoid runtime panics.</li></ul><h2>\n  \n  \n  Handling Tags for Serialization\n</h2><p>Struct tags are commonly used for serialization (e.g., JSON, YAML). Reflection lets you read tags to build custom serializers or validators.</p><p>Here’s an example that extracts JSON tags and validates required fields:</p><div><pre><code></code></pre></div><ul><li> retrieves tag values (e.g., , ).</li><li>Use  to check for zero values.</li><li>This is great for custom validation or serialization logic.</li></ul><p>Reflection allows calling methods dynamically, which is useful for plugin systems or testing. The  type’s  and  functions make this possible.</p><p>Here’s an example that calls a method by name:</p><div><pre><code></code></pre></div><ul><li> finds methods dynamically.</li><li> requires arguments as a .</li><li>Ensure method signatures match to avoid panics.</li></ul><h2>\n  \n  \n  Comparing Types and Values\n</h2><p>Reflection is great for comparing types and values at runtime, especially in generic libraries. Use  for type comparison and  for value comparison.</p><p>Here’s an example comparing two structs:</p><div><pre><code></code></pre></div><ul><li><strong> compares nested structures</strong> (slices, maps, structs).</li><li>Use  for type checks.</li><li>Be cautious with  for complex types, as it’s slow.</li></ul><h2>\n  \n  \n  Useful Reflection Libraries\n</h2><p>Several Go libraries simplify reflection tasks. Here’s a table of popular ones:</p><div><table><thead><tr></tr></thead><tbody><tr><td>High-performance serialization</td></tr><tr><td>Form or API input validation</td></tr><tr><td>Parsing JSON/YAML configs</td></tr></tbody></table></div><p>Here’s an example using  to convert a map to a struct:</p><div><pre><code></code></pre></div><ul><li><strong>Libraries reduce boilerplate</strong> and improve performance.</li><li> is great for config parsing.</li><li>Check library documentation for advanced features.</li></ul><p>Reflection is powerful but comes with trade-offs. Here’s a quick breakdown:</p><div><table><tbody><tr><td>Reflection is slower than static code due to runtime checks.</td></tr><tr><td>Code can become complex; use sparingly.</td></tr><tr><td>Panics are possible if types or fields are invalid. Always validate.</td></tr></tbody></table></div><ul><li> (e.g., , ).</li><li>Use libraries like  for performance-critical code.</li><li>Limit reflection to cases where static typing isn’t feasible.</li></ul><p>Here’s an example of safe reflection:</p><div><pre><code></code></pre></div><h2>\n  \n  \n  When and How to Use Reflection Effectively\n</h2><p>Reflection shines in specific scenarios, but it’s not a one-size-fits-all tool. :</p><ul><li>Serialization (JSON, YAML).</li><li>Building generic tools (e.g., ORMs, CLI frameworks).</li><li>Debugging or logging type information.</li></ul><ul><li>Code clarity is a priority.</li><li>Static typing can solve the problem.</li></ul><p>To use reflection effectively:</p><ul><li> to prevent panics.</li><li>Use libraries to simplify complex tasks.</li><li>Profile your code to catch performance issues.</li></ul><p>For deeper insights, experiment with the examples above and explore the <a href=\"https://pkg.go.dev/reflect\" rel=\"noopener noreferrer\">Go reflect package</a>.</p><h2>\n  \n  \n  Next Steps for Mastering Reflection\n</h2><p>Reflection in Go opens up possibilities for dynamic, flexible code. Start by experimenting with the  package in small projects, like building a custom JSON serializer or a struct validator. Use libraries like  or  to simplify tasks and boost performance. Always validate inputs and profile your code to avoid common pitfalls.</p><p>By mastering these techniques, you’ll be able to tackle complex problems like plugin systems, generic utilities, or dynamic configurations with confidence. Dive into the examples, tweak them, and see what you can build!</p>","contentLength":5065,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Pattern Matching with Glob: Finding Files by Pattern 5/9","url":"https://dev.to/rezmoss/pattern-matching-with-glob-finding-files-by-pattern-59-23lc","date":1751125440,"author":"Rez Moss","guid":174501,"unread":true,"content":"<h2>\n  \n  \n  Glob Function Fundamentals\n</h2><p>The  function in Go provides a powerful way to find files and directories using pattern matching. At its core, glob matching allows you to specify file patterns using wildcards and special characters, returning a slice of paths that match your criteria.</p><div><pre><code></code></pre></div><p>The glob function operates on the current working directory by default, but you can specify absolute or relative paths in your patterns. It returns two values: a slice of matching file paths and an error. The error handling is straightforward - the only error you'll encounter is , which occurs when your pattern syntax is malformed.</p><div><pre><code></code></pre></div><p>Under the hood,  uses the same pattern matching logic as , but extends it to work with file system hierarchies. While  operates on individual path segments, glob can traverse directory structures and match patterns across multiple levels.</p><p>The function doesn't follow symbolic links and only returns paths that actually exist in the file system. This behavior ensures that your matches correspond to real, accessible files and directories, making it reliable for file operations that follow the glob call.</p><p>Understanding glob pattern syntax is essential for crafting precise file matching expressions. The pattern language builds on familiar shell globbing conventions but has specific rules and limitations you need to master.</p><h3>\n  \n  \n  Wildcard Characters and Their Meanings\n</h3><p>The asterisk () is your most versatile tool, matching any sequence of characters except the path separator. This makes it perfect for matching file names with varying content but predictable structure.</p><div><pre><code></code></pre></div><p>The question mark () matches exactly one character, giving you precise control over variable positions in file names.</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Character Classes and Ranges\n</h3><p>Square brackets define character classes, allowing you to specify sets or ranges of acceptable characters at a position.</p><div><pre><code></code></pre></div><p>Character classes support negation using the caret () as the first character, matching anything except the specified set.</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Escaping Special Characters\n</h3><p>When you need to match literal wildcard characters, Go's glob implementation uses backslash escaping, though the behavior depends on your operating system.</p><div><pre><code></code></pre></div><p>For cross-platform compatibility, consider using  to test individual components when dealing with literal special characters, or restructure your file naming conventions to avoid conflicts with glob metacharacters.</p><p>The pattern syntax doesn't support regular expression features like quantifiers or alternation. Each pattern element has a specific, limited scope that keeps glob fast and predictable for file system operations.</p><h2>\n  \n  \n  GlobFS Interface Optimization\n</h2><p>The  package introduced the  interface in Go 1.16, enabling file systems to provide optimized glob implementations. This interface allows custom file systems to implement native pattern matching, potentially offering significant performance improvements over the default traversal-based approach.</p><div><pre><code></code></pre></div><p>When you use  with a file system that implements , Go automatically detects and uses the native implementation instead of falling back to manual directory traversal.</p><div><pre><code></code></pre></div><p>Native glob implementations can dramatically outperform manual traversal, especially on large directory structures. Database-backed file systems, network file systems, and compressed archives can leverage their internal indexing or query capabilities to filter matches without examining every file.</p><div><pre><code></code></pre></div><p>The performance difference becomes more pronounced with complex patterns or when searching deep directory hierarchies. Native implementations can often skip entire directory branches or use metadata indexes to accelerate matching.</p><p>When a file system doesn't implement , Go automatically falls back to a directory walking implementation. This fallback ensures your code works consistently across different file system types without requiring changes.</p><div><pre><code></code></pre></div><p>The fallback implementation maintains the same semantic behavior as native implementations, ensuring that switching between file system types doesn't break your application logic. However, you should be aware of potential performance differences when working with large-scale file operations.</p><p>Testing with both native and fallback implementations helps ensure your glob patterns work correctly across different deployment scenarios and file system configurations.</p><h2>\n  \n  \n  Advanced Pattern Techniques\n</h2><p>Complex file organization scenarios require sophisticated pattern matching approaches that go beyond basic wildcards. Mastering these advanced techniques enables you to handle intricate directory structures and implement precise filtering logic.</p><h3>\n  \n  \n  Multi-Level Directory Patterns\n</h3><p>While standard glob patterns don't support recursive matching with , you can achieve multi-level directory traversal by combining glob with directory walking or using strategic pattern construction.</p><div><pre><code></code></pre></div><p>For truly recursive searching, combine glob with  to apply pattern matching at each directory level:</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Complex Filtering Scenarios\n</h3><p>Real-world applications often require filtering based on multiple criteria. You can chain glob operations or combine them with additional validation logic:</p><div><pre><code></code></pre></div><p>Pattern composition allows you to build complex selection criteria by combining multiple glob results:</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Combining Glob with Other Operations\n</h3><p>Effective file processing often requires combining glob results with sorting, filtering, or transformation operations:</p><div><pre><code></code></pre></div><p>These advanced techniques enable you to build robust file discovery systems that can handle complex organizational schemes and varying requirements across different deployment environments.</p><p>Glob operations interact with the file system, making them susceptible to various runtime conditions. Understanding Go's approach to error handling in glob functions helps you build resilient applications that gracefully handle both pattern validation issues and file system anomalies.</p><h3>\n  \n  \n  I/O Error Ignoring Behavior\n</h3><p>The  function follows a pragmatic approach to I/O errors during directory traversal. When it encounters permission denied errors, temporarily unavailable directories, or other transient file system issues, it silently continues processing rather than terminating the entire operation.</p><div><pre><code></code></pre></div><p>This behavior ensures that partial file system access doesn't prevent your application from processing available data. However, you won't receive notifications about skipped directories, so consider logging or monitoring when complete directory access is critical:</p><div><pre><code></code></pre></div><p>The only error that  explicitly returns is , which occurs when your pattern contains malformed character classes or invalid escape sequences.</p><div><pre><code></code></pre></div><p>Common pattern validation errors include unclosed character classes, invalid ranges, and platform-specific escape sequence issues:</p><div><pre><code></code></pre></div><p>For robust applications, implement pattern validation before executing glob operations, especially when patterns come from user input or configuration files:</p><div><pre><code></code></pre></div><p>This error resilience strategy ensures your applications remain stable while providing meaningful feedback when pattern construction issues occur, maintaining a clear distinction between syntax errors and runtime file system conditions.</p><p>Real-world applications benefit from concrete examples that demonstrate glob patterns in common file management scenarios. These examples showcase patterns you'll frequently encounter in system administration, build processes, and application maintenance tasks.</p><p>System administrators often need to collect log files across multiple applications and time periods. Glob patterns excel at identifying files based on naming conventions and directory structures.</p><div><pre><code></code></pre></div><p>For log rotation scenarios, you can target specific file generations or time ranges:</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Configuration File Discovery\n</h3><p>Applications often need to locate configuration files across multiple possible locations, following standard directory conventions or deployment-specific layouts.</p><div><pre><code></code></pre></div><p>Environment-specific configuration discovery handles different deployment scenarios:</p><div><pre><code></code></pre></div><p>Build systems generate numerous temporary files and artifacts that require periodic cleanup. Glob patterns help identify and remove these files safely.</p><div><pre><code></code></pre></div><p>Age-based cleanup combines glob matching with file modification times:</p><div><pre><code></code></pre></div><p>These practical examples demonstrate how glob patterns integrate into real-world workflows, providing reliable file discovery and management capabilities across diverse application domains.</p>","contentLength":8350,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Cache Breakdown Prevention with Go’s singleflight","url":"https://dev.to/leapcell/cache-breakdown-prevention-with-gos-singleflight-2b14","date":1751048578,"author":"Leapcell","guid":173894,"unread":true,"content":"<p>When building high-performance services, caching is a key technology for optimizing database load and improving response speed. However, using caching also brings some challenges, among which  is a major issue. Cache breakdown can cause a surge in database pressure, degrade database performance, and in severe cases, even bring down the database and render it unavailable.</p><p>In Go, the package <code>golang.org/x/sync/singleflight</code> provides a mechanism to ensure that concurrent requests for any specific key are only executed once at the same time. This mechanism effectively prevents cache breakdown issues.</p><p>This article will delve into the usage of the  package in Go. Starting from the basics of the cache breakdown problem, it will then introduce the  package in detail, demonstrating how to use it to avoid cache breakdown.</p><p>Cache breakdown refers to a situation where, under high concurrency, a hot key suddenly expires, causing a large number of requests to directly access the database, which can overload the database and even cause it to crash.</p><p>Common solutions include:</p><ul><li><strong>Setting hot data to never expire:</strong> For some well-defined hot data, you can set it to never expire, ensuring that requests do not bypass the cache due to cache expiration and directly access the database.</li><li> To prevent all requests from querying the database simultaneously when the cache expires, a locking mechanism can be adopted to ensure that only one request queries the database and updates the cache, while other requests wait until the cache is updated before accessing it.</li><li> Monitor cache usage in the background, and when the cache is about to expire, update it asynchronously to extend its expiration time.</li></ul><p>Package singleflight provides a duplicate function call suppression mechanism.</p><p>This sentence is from the official documentation.</p><p>In other words, when multiple goroutines attempt to call the same function (based on a given key) at the same time, singleflight ensures that the function is only executed by the first arriving goroutine. The other goroutines will wait for the result of this call and share the result, instead of initiating multiple calls simultaneously.</p><p>In short, singleflight merges multiple requests into a single request, allowing multiple requests to share the same result.</p><ul><li> This is the core structure of the singleflight package. It manages all requests and ensures that at any moment, requests for the same resource are only executed once. The Group object does not need to be explicitly created; you can simply declare and use it.</li><li> The Group struct provides the Do method, which is the main method to merge requests. This method takes two arguments: a string key (to identify the resource) and a function  that executes the actual task. When calling Do, if a request with the same key is already in progress, Do will wait for this request to complete and share its result; otherwise, it will execute  and return the result.</li><li>The Do method has three return values. The first two are the return values of , of type  and  respectively. The last return value is a boolean, indicating whether the result of Do was shared by multiple calls.</li><li> This method is similar to Do, but it returns a channel that receives the result when the operation is done. The return value is a channel, meaning we can wait for the result in a non-blocking way.</li><li> This method is used to delete a key and its associated request records from the Group, ensuring that the next Do call with the same key will execute a new request instead of reusing the previous result.</li><li><p> This is the struct type returned by the DoChan method. It encapsulates the result of a request and contains three fields:</p><ul><li> (interface{}): The result returned by the request.</li><li> (error): Any error information encountered during the request.</li><li> (bool): Indicates whether the result was shared with requests other than the current one.</li></ul></li></ul><p>Install the singleflight dependency in your Go application with the following command:</p><div><pre><code>go get golang.org/x/sync/singleflight\n</code></pre></div><div><pre><code></code></pre></div><p>This code simulates a typical concurrent access scenario: fetching data from the cache, and if the cache misses, retrieving from the database. During this process, the singleflight library plays a crucial role. It ensures that when multiple concurrent requests try to access the same data at the same time, the actual fetch operation (whether from cache or database) is only performed once. This not only reduces database load but also effectively prevents cache breakdown in high concurrency scenarios.</p><p>The output of the code is as follows:</p><div><pre><code>fetch data from cache\nredis: key not found\nfetch data from database\nv: Leapcell, shared: v: Leapcell, shared: v: Leapcell, shared: v: Leapcell, shared: v: Leapcell, shared: </code></pre></div><p>As shown, when 5 goroutines concurrently fetch the same data, the data fetch operation is actually performed only once by one goroutine. Furthermore, since all returned shared values are true, it means the result was shared with the other 4 goroutines.</p><p>When generating keys, we should ensure their uniqueness and consistency.</p><ul><li> Make sure the key passed to the Do method is unique so that the Group can distinguish between different requests. It is recommended to use a structured naming convention for keys, such as . For example, when fetching user information, the key can be , where  denotes the data type and  is the specific user identifier.</li><li> For the same request, the generated key should always be consistent, no matter when it is called. This allows the Group to properly merge identical requests and prevents unexpected errors.</li></ul><p>When calling Group.Do, the first arriving goroutine can successfully execute the  function, while other subsequent goroutines will be blocked. If the blocked state lasts too long, a downgrade strategy may be needed to ensure the system remains responsive. In such cases, we can use Group.DoChan in combination with the  statement to implement timeout control.</p><p>Below is a simple example demonstrating timeout control:</p><div><pre><code></code></pre></div><ol><li>This article first introduced the concept of cache breakdown and its common solutions.</li><li>Then, it explored the singleflight package in depth, covering its basic concepts, components, installation, and usage examples.</li><li>Next, it demonstrated how to use singleflight to prevent cache breakdown in high concurrency scenarios through a simulated concurrent access example.</li><li>Finally, it discussed best practices for designing keys and controlling request timeouts in practice, aiming to help better understand and apply singleflight for optimizing concurrent processing logic.</li></ol><p><a href=\"https://leapcell.io/?lc_t=d_gosingleflight\" rel=\"noopener noreferrer\">Leapcell</a> is the Next-Gen Serverless Platform for Web Hosting, Async Tasks, and Redis:</p><ul><li>Develop with Node.js, Python, Go, or Rust.</li></ul><p><strong>Deploy unlimited projects for free</strong></p><ul><li>pay only for usage — no requests, no charges.</li></ul><p><strong>Unbeatable Cost Efficiency</strong></p><ul><li>Pay-as-you-go with no idle charges.</li><li>Example: $25 supports 6.94M requests at a 60ms average response time.</li></ul><p><strong>Streamlined Developer Experience</strong></p><ul><li>Intuitive UI for effortless setup.</li><li>Fully automated CI/CD pipelines and GitOps integration.</li><li>Real-time metrics and logging for actionable insights.</li></ul><p><strong>Effortless Scalability and High Performance</strong></p><ul><li>Auto-scaling to handle high concurrency with ease.</li><li>Zero operational overhead — just focus on building.</li></ul>","contentLength":7159,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Pack Your Go Binary: Embedding Files Made Simple","url":"https://dev.to/shrsv/pack-your-go-binary-embedding-files-made-simple-131c","date":1751042635,"author":"Shrijith Venkatramana","guid":173825,"unread":true,"content":"<p><em>Hi there! I'm Shrijith Venkatrama, founder of Hexmos. Right now, I’m building <a href=\"https://hexmos.com/landing/liveapi\" rel=\"noopener noreferrer\">LiveAPI</a>, a first of its kind tool for helping you automatically index API endpoints across all your repositories. LiveAPI helps you discover, understand and use APIs in large tech infrastructures with ease.</em></p><p>Embedding files in a Go binary lets you bundle assets like templates, images, or config files directly into your executable. This means  at runtime, simpler deployments, and a single file to ship. Go’s  package, introduced in Go 1.16, makes this straightforward. This post dives into how to use it, with practical examples, trade-offs, and tips to keep your code clean and efficient.</p><p>We’ll cover , <strong>how to use the  package</strong>, <strong>handling different file types</strong>, , and . Each section includes complete, runnable code examples with outputs.</p><h2>\n  \n  \n  Why Embed Files in Your Go Binary?\n</h2><p>Embedding files solves real problems for developers. Instead of juggling external files during deployment, you can pack everything into one binary. This is great for , , or  where you want a single artifact. It reduces complexity, avoids “file not found” errors, and makes your app portable.</p><ul><li>: One file to deploy, no extra assets.</li><li>: Files are in memory, reducing disk access.</li><li>: Works everywhere Go runs, no path issues.</li></ul><ul><li>Larger binary size (more on this later).</li><li>Files are read-only (you can’t modify them at runtime).</li><li>Rebuilding required to update embedded files.</li></ul><h2>\n  \n  \n  Getting Started with the  Package\n</h2><p>The  package is built into Go since version 1.16. It’s simple: you use the  directive to include files or directories, and access them via variables. No external tools or libraries needed.</p><p>Let’s start with a basic example: embedding a single text file.</p><div><pre><code></code></pre></div><ol><li>Create a file  with some text (e.g., “Hello, embedded world!”).</li><li>Use  above a variable (here, ).</li><li>The variable  holds the file’s contents as a string.</li><li>Run  to see the output.</li></ol><ul><li>The variable must be of type , , or .</li><li>The  directive must be right above the variable declaration, with no blank lines.</li><li>Paths are relative to the Go file.</li></ul><p>This example is simple but shows the core idea. Let’s scale it up.</p><h2>\n  \n  \n  Embedding Multiple Files and Directories\n</h2><p>For real projects, you’ll likely need to embed multiple files or entire directories. The  type lets you treat embedded files like a virtual filesystem. This is perfect for , , or .</p><p>Here’s an example embedding a directory of text files.</p><div><pre><code></code></pre></div><ol><li>Create a  directory with  and .</li><li>Use  to embed all files in the  directory.</li><li>Use  to access the files like a filesystem.</li><li>Use  and  to read file contents.</li></ol><ul><li>Use  to embed all files in a directory (wildcards are supported).</li><li> implements the  interface, so you can use standard library functions like .</li><li>Paths in  are relative to the embedded root.</li></ul><h2>\n  \n  \n  Handling Different File Types\n</h2><p>You can embed any file type—text, images, JSON, HTML, etc. The trick is choosing the right variable type:  for single text files,  for binary files, or  for multiple files or complex structures.</p><p>Let’s embed an image and a JSON config file, then use them in a program.</p><div><pre><code></code></pre></div><ol><li>Create an  directory with  and .</li><li>Embed both files using  with .</li><li>Read and parse the JSON file using .</li><li>Read the image file as bytes (useful for serving in a web app).</li></ol><ul><li>For binary files like images, use  or  to avoid encoding issues.</li><li>JSON files are great for configs; parse them into structs for type safety.</li><li>Images can be any format (PNG, JPEG, etc.), but you’ll need appropriate libraries to process them (e.g., ).</li></ul><h2>\n  \n  \n  Real-World Use Case: Serving Embedded Web Assets\n</h2><p>A common use case is embedding web assets for a simple HTTP server. Let’s build a small web server that serves an embedded HTML file and a CSS file.</p><div><pre><code></code></pre></div><ol><li>Create a  directory with  and .</li><li>Embed the directory using .</li><li>Set up an HTTP server to serve files from .</li><li>Run  and visit .</li></ol><ul><li>Use  for production to handle caching and ranges.</li><li>Set proper  headers for CSS, JS, or images.</li><li>This approach is ideal for small, self-contained web apps.</li></ul><h2>\n  \n  \n  Best Practices and Trade-Offs\n</h2><p>Embedding files is powerful, but it comes with trade-offs. Here’s a quick guide to use it effectively.</p><div><table><tbody><tr><td>Single file, easy to distribute</td><td>Can grow large with many/big files</td></tr><tr></tr><tr><td>No external file management</td><td>Requires rebuild to update files</td></tr><tr><td>CLI tools, small web servers</td><td>Not ideal for huge assets (e.g., videos)</td></tr></tbody></table></div><ul><li>: Embed only what’s necessary to keep binary size manageable.</li><li>: Use clear directory structures (e.g., , ) for clarity.</li><li>: Minify CSS/JS or compress images before embedding.</li><li>: Track embedded files in git to avoid surprises.</li><li>: Verify embedded files work as expected in production.</li></ul><ul><li>If files change frequently (use a config server or database).</li><li>For very large files (e.g., videos), consider external storage.</li></ul><h2>\n  \n  \n  Next Steps for Embedding Files\n</h2><p>Embedding files in Go binaries with the  package is a game-changer for building portable, self-contained applications. You’ve seen how to embed single files, directories, and different file types, plus a real-world web server example. The key is to <strong>balance binary size with convenience</strong> and use  for flexibility.</p><p>Try embedding assets in your next CLI tool or web server. Experiment with different file types and check the binary size with  after building. If you’re curious about advanced use cases, explore combining  with libraries like  for dynamic pages or  for processing embedded images.</p>","contentLength":5300,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Inside Nixopus: How We Manage Our Database Migrations?","url":"https://dev.to/shravan20/inside-nixopus-how-we-manage-our-database-migrations-3i34","date":1751031871,"author":"Shravan Kumar B","guid":173720,"unread":true,"content":"<p> are often the unsung heroes of software application development. They work silently in the background, ensuring that your database schema evolves safely alongside your application code. Yet for many teams, this is a major source of stress and uncertainty. In this blog, we will explore how we have set up the migration framework for Nixopus. This has become a pivotal step in our developmental and self-host workflow.</p><p>To start with, let us first explore and understand what we mean by . As we always do, let us take an analogy.</p><p>We often use different database systems like MySQL, PostgreSQL, MongoDB, etc, for data persistence. These data are stored in the form of Tables having columns and rows.</p><p>As the application grows, the number of tables grows, and the data defined at each table might vary and change; hence, it is very important to keep track of these changes.</p><p>Tables are at the database system level, whereas at the programmatic level, we maintain them with something called . Like a house blueprint that dictates where rooms, doors, and wiring go, a schema simply defines how the data is organized and connected.</p><p>Now, let's imagine that you decide to change the blueprint mid-build, to add a new room or window, you need to carefully make changes to the existing blueprint such that you don’t end up collapsing the walls down.</p><p>This problem is addressed at the schema level to ensure the changes in the existing tables, which may be in the form of adding new columns, altering the type of existing columns, or adding new tables, are handled through what we call </p><p>When we started building Nixopus, we quickly realized that database schema management would be critical to our success in self-hosting and local development setups. We planned with an expectation set that eventually we would see multiple developers working on different features, frequent deployments, and the need to support both development and production environments, which would require a very streamlined process to handle database migration.</p><p>We had aligned on the following factors that our migration system would have to adhere to:</p><ul><li>: Migrations must execute consistently across all envs</li><li>: No manual intervention should be required during deployments</li><li><strong>Forward &amp; Backward Compatible</strong>: Ensure easy rollback scenarios</li><li>: Organization of migrations by domain or feature</li></ul><p>Many existing tools either lacked the flexibility we needed or came with unnecessary complexity, be it in terms of testability or adding rollbacks in case of errors, etc.</p><p>Hence, we decided to build our migration system tailored to our needs and requirements using a tool called <a href=\"https://bun.uptrace.dev/guide/migrations.html\" rel=\"noopener noreferrer\">Bun ORM</a>.</p><p>To those who are not aware of the terminology ORM, let me give a glimpse of it; ORM, otherwise called as , is like a waiter at a restaurant, to who you tell what you want, he/she goes to kitchen(I mean database), then brings back your order(data) as perfectly plated objects in ready to use form.</p><p>Without ORM, you would have been presented with raw vegetables and ingredients straight from the kitchen (of course, by that I mean the database), and you would have to do all the cooking yourself, which means writing and managing every query and data transformation.</p><p>Coming back, we have built our migration system around a simple yet , where a pair of SQL files represents every database change:</p><p>1) <strong>Applying the change (up migrations)</strong>\n2) <strong>Rolling it back (down migrations)</strong></p><p>This approach has helped our system to easily take care of schema evolution and database versioning.</p><p>The migration system follows a defined life cycle:</p><p>1) : The system scans the  directory</p><p>2) : Migration files are parsed and paired (up/down migrations)</p><p>3) : Migrations are sorted by their numeric IDs</p><p>4) : The system compares file system migrations with applied migrations in the database</p><p>5) : Pending migrations are executed in transactions</p><p>6) : Successfully applied migrations are recorded in the migration table</p><p>Now that you know an overview of our setup and how it works, you might wonder what actually sets our approach apart? Fair enough!!!!</p><p>1) : Instead of throwing all migrations into a single directory, we have organized them by domain:</p><div><pre><code>api/migrations/\n├── applications/   # App deployment features\n├── audit/          # Audit logging and compliance\n├── auth/           # Authentication &amp; authorization\n├── containers/     # Container management\n├── domains/        # Domain and DNS management\n├── feature-flags/  # Feature toggle system\n├── integrations/   # Third-party integrations\n├── notifications/  # Notification system\n├── organizations/  # Multi-tenancy &amp; organizations\n├── rbac/           # Role-based access control\n└── users/          # User management and profiles\n</code></pre></div><p>This structure makes it easy for us to find and create migrations related to specific work or flow, helping us avoid confusion or conflicts.</p><p>2) <strong>Automatic migration execution on application startup</strong>: One of the key design decisions was to make migrations completely automatic. When the application starts, the migration system runs before any other initialization. This approach eliminated the need for separate deployment and ensures that the database schema is always up to date when the application starts.</p><p>3) <strong>Atomic, Transactional Migrations</strong>: Every migration runs inside a database transaction, ensuring atomicity. If any part of a migration fails, the entire migration is rolled back, ensuring that the schema remains fully consistent.</p><p>4) : Every migrations have 2 files:</p><ul><li> (applies the change)</li><li> (rolls back the change)</li></ul><p>This ensures that we can always roll back changes if something goes wrong.</p><p>As we are close to concluding the deep dive into the first of many articles of the  series, I would like to highlight some of the major learnings and key takeaways:</p><p>1) <strong>Keep each migration small and focused</strong>for easier review or rollback.\n2) Ensure to keep a <em> for every </em>, ensuring roll backs are easy.</p><p>The key insight is that sometimes the best tool is the one you build yourself. By understanding our specific needs and constraints, we were able to set up our migration system that fits perfectly into our development workflow and easy self-hosting.</p><p>The project, as we publish this article, is in the Alpha stage. </p><p>You can check it out on <a href=\"https://github.com/raghavyuva/nixopus\" rel=\"noopener noreferrer\">GitHub</a> and see for yourself.</p><p>To sum it up, the approach helped us change schema changes from a headache to a reliable process.</p><p>If you would like to get involved or have questions, join our Discord community for real-time support and feedback. You can self-host Nixopus today, subscribe for updates, and stay tuned as we roll out new features and stability enhancements.</p><p>We have recently collaborated with , a reliable VPS provider based in Sweden, to bring you an exclusive deal of  recurring on any VPS plan. Whether you choose to self-host Nixopus or deploy containerized apps, this is the perfect opportunity to secure rock-solid infrastructure at a <a href=\"https://discord.com/invite/skdcq39Wpv\" rel=\"noopener noreferrer\">Discord Community</a>.</p><p>Stay tuned for more freshly brewed content.</p><p>That's all for now. Thank you for reading.</p><p>Signing off until next time.</p>","contentLength":7032,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Inside Nixopus: How We Manage Our Database Migrations?","url":"https://dev.to/zhravan/inside-nixopus-how-we-manage-our-database-migrations-3i34","date":1751031871,"author":"Shravan Kumar B","guid":174749,"unread":true,"content":"<p> are often the unsung heroes of software application development. They work silently in the background, ensuring that your database schema evolves safely alongside your application code. Yet for many teams, this is a major source of stress and uncertainty. In this blog, we will explore how we have set up the migration framework for Nixopus. This has become a pivotal step in our developmental and self-host workflow.</p><p>To start with, let us first explore and understand what we mean by . As we always do, let us take an analogy.</p><p>We often use different database systems like MySQL, PostgreSQL, MongoDB, etc, for data persistence. These data are stored in the form of Tables having columns and rows.</p><p>As the application grows, the number of tables grows, and the data defined at each table might vary and change; hence, it is very important to keep track of these changes.</p><p>Tables are at the database system level, whereas at the programmatic level, we maintain them with something called . Like a house blueprint that dictates where rooms, doors, and wiring go, a schema simply defines how the data is organized and connected.</p><p>Now, let's imagine that you decide to change the blueprint mid-build, to add a new room or window, you need to carefully make changes to the existing blueprint such that you don’t end up collapsing the walls down.</p><p>This problem is addressed at the schema level to ensure the changes in the existing tables, which may be in the form of adding new columns, altering the type of existing columns, or adding new tables, are handled through what we call </p><p>When we started building Nixopus, we quickly realized that database schema management would be critical to our success in self-hosting and local development setups. We planned with an expectation set that eventually we would see multiple developers working on different features, frequent deployments, and the need to support both development and production environments, which would require a very streamlined process to handle database migration.</p><p>We had aligned on the following factors that our migration system would have to adhere to:</p><ul><li>: Migrations must execute consistently across all envs</li><li>: No manual intervention should be required during deployments</li><li><strong>Forward &amp; Backward Compatible</strong>: Ensure easy rollback scenarios</li><li>: Organization of migrations by domain or feature</li></ul><p>Many existing tools either lacked the flexibility we needed or came with unnecessary complexity, be it in terms of testability or adding rollbacks in case of errors, etc.</p><p>Hence, we decided to build our migration system tailored to our needs and requirements using a tool called <a href=\"https://bun.uptrace.dev/guide/migrations.html\" rel=\"noopener noreferrer\">Bun ORM</a>.</p><p>To those who are not aware of the terminology ORM, let me give a glimpse of it; ORM, otherwise called as , is like a waiter at a restaurant, to who you tell what you want, he/she goes to kitchen(I mean database), then brings back your order(data) as perfectly plated objects in ready to use form.</p><p>Without ORM, you would have been presented with raw vegetables and ingredients straight from the kitchen (of course, by that I mean the database), and you would have to do all the cooking yourself, which means writing and managing every query and data transformation.</p><p>Coming back, we have built our migration system around a simple yet , where a pair of SQL files represents every database change:</p><p>1) <strong>Applying the change (up migrations)</strong>\n2) <strong>Rolling it back (down migrations)</strong></p><p>This approach has helped our system to easily take care of schema evolution and database versioning.</p><p>The migration system follows a defined life cycle:</p><p>1) : The system scans the  directory</p><p>2) : Migration files are parsed and paired (up/down migrations)</p><p>3) : Migrations are sorted by their numeric IDs</p><p>4) : The system compares file system migrations with applied migrations in the database</p><p>5) : Pending migrations are executed in transactions</p><p>6) : Successfully applied migrations are recorded in the migration table</p><p>Now that you know an overview of our setup and how it works, you might wonder what actually sets our approach apart? Fair enough!!!!</p><p>1) : Instead of throwing all migrations into a single directory, we have organized them by domain:</p><div><pre><code>api/migrations/\n├── applications/   # App deployment features\n├── audit/          # Audit logging and compliance\n├── auth/           # Authentication &amp; authorization\n├── containers/     # Container management\n├── domains/        # Domain and DNS management\n├── feature-flags/  # Feature toggle system\n├── integrations/   # Third-party integrations\n├── notifications/  # Notification system\n├── organizations/  # Multi-tenancy &amp; organizations\n├── rbac/           # Role-based access control\n└── users/          # User management and profiles\n</code></pre></div><p>This structure makes it easy for us to find and create migrations related to specific work or flow, helping us avoid confusion or conflicts.</p><p>2) <strong>Automatic migration execution on application startup</strong>: One of the key design decisions was to make migrations completely automatic. When the application starts, the migration system runs before any other initialization. This approach eliminated the need for separate deployment and ensures that the database schema is always up to date when the application starts.</p><p>3) <strong>Atomic, Transactional Migrations</strong>: Every migration runs inside a database transaction, ensuring atomicity. If any part of a migration fails, the entire migration is rolled back, ensuring that the schema remains fully consistent.</p><p>4) : Every migrations have 2 files:</p><ul><li> (applies the change)</li><li> (rolls back the change)</li></ul><p>This ensures that we can always roll back changes if something goes wrong.</p><p>As we are close to concluding the deep dive into the first of many articles of the  series, I would like to highlight some of the major learnings and key takeaways:</p><p>1) <strong>Keep each migration small and focused</strong>for easier review or rollback.\n2) Ensure to keep a <em> for every </em>, ensuring roll backs are easy.</p><p>The key insight is that sometimes the best tool is the one you build yourself. By understanding our specific needs and constraints, we were able to set up our migration system that fits perfectly into our development workflow and easy self-hosting.</p><p>The project, as we publish this article, is in the Alpha stage. </p><p>You can check it out on <a href=\"https://github.com/raghavyuva/nixopus\" rel=\"noopener noreferrer\">GitHub</a> and see for yourself.</p><p>To sum it up, the approach helped us change schema changes from a headache to a reliable process.</p><p>If you would like to get involved or have questions, join our Discord community for real-time support and feedback. You can self-host Nixopus today, subscribe for updates, and stay tuned as we roll out new features and stability enhancements.</p><p>We have recently collaborated with , a reliable VPS provider based in Sweden, to bring you an exclusive deal of  recurring on any VPS plan. Whether you choose to self-host Nixopus or deploy containerized apps, this is the perfect opportunity to secure rock-solid infrastructure at a <a href=\"https://discord.com/invite/skdcq39Wpv\" rel=\"noopener noreferrer\">Discord Community</a>.</p><p>Stay tuned for more freshly brewed content.</p><p>That's all for now. Thank you for reading.</p><p>Signing off until next time.</p>","contentLength":7032,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Go Project Scaffolding Guide: A Choice That Earned My Team's Rave Reviews","url":"https://dev.to/zhufuyi/go-project-scaffolding-guide-a-choice-that-earned-my-teams-rave-reviews-i03","date":1751021058,"author":"zhuyasen","guid":173619,"unread":true,"content":"<p>When developing with Go, who hasn't been through the wringer with frameworks like the standard library's HTTP, Gin, Echo, Iris, Fiber, Beego, GoFrame, gRPC, Go-Micro, Go-Zero, or Kratos? They all claim to have great performance and powerful features, but in practice, there are always those \"not-so-great\" moments, right?</p><p>It's like dating. At first, everyone seems wonderful, but over time, little frictions and pain points start to surface. Today, I'm going to share how, after trying them all, I finally found my \"dream framework\" — <a href=\"https://github.com/go-dev-frame/sponge\" rel=\"noopener noreferrer\">Sponge</a> — and just how much of a game-changer it is!</p><h3>\n  \n  \n  The Pains We've All Endured\n</h3><p>Before I found Sponge, my Go development life was a mix of pain and pleasure.</p><h4>\n  \n  \n  Gin, Echo: Freedom is Great, But You Have to Build Everything from Scratch\n</h4><p>Gin and Echo are old friends to us Gophers—lightweight, fast, and easy to get started with. But the price of freedom is that you have to build a lot of things yourself.</p><p>Want to write a simple CRUD? Okay, start by defining a , writing the , , and , then registering the routes. After all that \"grunt work,\" half the day is gone. It's manageable for small projects, but as projects grow, the code structure starts to become a \"wild west,\" with different people writing in wildly different styles.</p><p>Let me show you a \"familiar\" scene. Writing a user creation endpoint with Gin, does it feel like you're copy-pasting this in every project?</p><div><pre><code></code></pre></div><p>This is just the simplest example. If you add database operations, logging, parameter validation, and error handling... you can imagine the amount of code and repetitive labor involved. Every time I started a new project, it felt like reinventing the wheel. It was exhausting.</p><h4>\n  \n  \n  Go-Micro, Go-Zero, Kratos: Microservices are Great, But a Bit \"Heavy\"\n</h4><p>To solve the problems above, a batch of excellent \"heavyweight\" contenders emerged in the community, like go-micro, go-zero, and kratos. They provide comprehensive microservice governance capabilities, including everything from RPC, service discovery, and configuration centers to distributed tracing.</p><p>But their \"pain\" lies here as well:</p><ul><li>: To use them effectively, you have to spend a lot of time learning the framework's philosophy and its various components. For projects that need to get started and iterate quickly, this is a bit too \"heavy.\"</li><li><strong>\"Black box\" code generation</strong>: Although they offer code generation tools, the generated code can sometimes be too \"magical.\" When a problem occurs, it's hard to know where to start debugging. And for developers like us who are code purists, the feeling of not having full control over the code... you get it.</li><li><strong>Bloated project structure</strong>: A simple service might generate a huge pile of files and directories. Sometimes it feels like using a sledgehammer to crack a nut.</li></ul><h3>\n  \n  \n  Discovering Sponge: My \"Game-Changer\" Moment!\n</h3><p>Just when I was about to lose my mind oscillating between \"reinventing the wheel\" and \"being held hostage by a framework,\" I discovered .</p><p>Sponge perfectly balances  and , solving all the pain points mentioned above.</p><h4>\n  \n  \n  1. \"Idiot-Proof\" Code Generation, Say Goodbye to Repetitive Labor\n</h4><p>What amazed me most about Sponge is its powerful code generation capability. It doesn't just generate some template code; it's <strong>truly one-click generation of a complete project</strong>!</p><ul><li>  Define your database table structure (e.g., in an SQL file).</li><li>  Or define your API interface (in a Protobuf file).</li></ul><p>Then, with just a few clicks on Sponge's provided , a complete, production-ready backend service code is generated!</p><p>Let's take the same user creation example. How do you do it with Sponge?</p><p>: Using MySQL as an example, write a  file and import it into your MySQL service. The process is similar for other databases (like PostgreSQL, MongoDB, etc.).</p><div><pre><code></code></pre></div><p>: In Sponge's web interface, select \"Generate Web Service from SQL,\" enter your MySQL DSN, and choose the table.</p><p>: Click \"Generate Code\" and download the zip file.</p><p>After unzipping, you get a <strong>complete, runnable project</strong>! It includes:</p><ul><li> ()</li><li> (auto-generated, for direct online debugging)</li><li> (request handling)</li><li> (business logic)</li><li> (database CRUD operations, based on GORM)</li><li><strong>A complete project structure</strong>, , ...</li></ul><p>You read that right. <strong>Without writing a single line of Go code</strong>, a fully functional CRUD service is ready! The development efficiency is off the charts!</p><h4>\n  \n  \n  2. Modular, \"Lego-like\" Architecture: Flexible and Decoupled\n</h4><p>The code generated by Sponge is not a pile of \"spaghetti code.\" It adopts a very clear <strong>layered and decoupled design</strong>.</p><p>Each module is like a Lego block that you can freely combine and extend. For example:</p><ul><li> No problem. The DAO layer is interface-based, so you can easily replace it with any ORM you like.</li><li><strong>Want to add custom logic?</strong> The Service layer has already left a \"template\" for you. You just need to fill in the core business logic, without worrying about framework chores.</li><li><strong>Want to migrate from a monolith to microservices?</strong> A Sponge-generated project is naturally a microservice architecture, making it easy to split and combine services.</li></ul><p>This design ensures development efficiency while giving developers immense <strong>freedom and a sense of control</strong>. The code is \"your\" code, not the \"framework's\" code.</p><h4>\n  \n  \n  3. Rich Built-in Components, Out of the Box\n</h4><p>Sponge is more than just a code generator; it's an \"all-in-one suite.\"</p><ul><li>: Built on Gin, allowing you to seamlessly use all of Gin's middleware and ecosystem.</li><li>: Supports gRPC and can generate a gRPC Gateway with one click, enabling your gRPC service to support HTTP calls simultaneously.</li><li>: Integrates essential microservice components like service discovery, circuit breaking, rate limiting, distributed tracing, and monitoring.</li><li>: Redis, MongoDB, Kafka, RabbitMQ... they're all pre-packaged and ready to use out of the box.</li></ul><p>With Gin, I used to have to find, integrate, and wrap each of these libraries myself. Now with Sponge, I just enable them in the configuration file. It's incredibly convenient!</p><h3>\n  \n  \n  Conclusion: Why I'm Raving About Sponge\n</h3><p>Returning to the original question, after looking at so many Go frameworks, why did I ultimately choose Sponge?</p><ul><li><strong>For individual developers and startups</strong>: In the world of software, speed is king. Sponge lets you build product prototypes and validate ideas at maximum speed, allowing you to focus on core business logic instead of repetitive grunt work.</li><li><strong>For medium to large teams</strong>: Sponge unifies project structure and development standards, lowering the learning curve for new members and improving team collaboration. Its high-cohesion, low-coupling design also makes projects easier to maintain and extend.</li><li><strong>For Gophers who strive for excellence</strong>: Sponge has no \"black magic.\" The generated code is clean and standardized, allowing you to enjoy high-efficiency development while still having complete control over your code and learning excellent architectural design principles from it.</li></ul><p>Of course, no framework is a perfect silver bullet. But Sponge truly won me over. It's like an experienced senior developer who takes care of all the dirty work for you, so you can focus on the creative tasks.</p><p>If you, like me, are tired of wavering between different frameworks and fed up with day-to-day repetitive labor, I highly recommend giving Sponge a try. Head over to its GitHub repository, run the examples, and trust me, you'll find yourself shouting the same thing I did: </p>","contentLength":7325,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"CR1632: Hogwarts’ Unseen Power Charm for Keys, Castles & Cosmic Journeys","url":"https://dev.to/ersajay/cr1632-hogwarts-unseen-power-charm-for-keys-castles-cosmic-journeys-5b96","date":1751006018,"author":"ersajay","guid":173471,"unread":true,"content":"<p>The Leaky Cauldron’s Silver Secret\nOn a rainy Hogsmeade evening, I found myself huddled at the Leaky Cauldron, nursing a Butterbeer, when the bartender—old Tom, who knows more about gadgets than most wizards—slid something across the bar. A tiny silver disk, no bigger than a Galleon, glinted under the firelight.<p>\n“That’s a CR1632 battery,” he said, grinning. “Not just any coin, mind you. It’s the Wand Core of modern magic—powers Tesla key fobs, hearing aids, even Mars rovers. Small as a knut, but tougher than a Basilisk’s scales.”</p>\nIntrigued, I leaned in. This wasn’t just metal and lithium—it was a CR1632, the unsung hero of compact power. Let’s unmask its wizarding secrets.</p><ul><li>What Is a CR1632? (A Power Potion, Not a Coin)\nThe CR1632 is Hogwarts’ answer to “small but mighty.” At 16mm wide and 3.2mm thick (thinner than a Bertie Bott’s Every Flavor Bean), it packs 120mAh of lithium-manganese magic into a leak-proof shell. Here’s why it’s no ordinary battery:</li></ul><p>Leak-Proof: No corrosive surprises—unlike that time Ron tried brewing Polyjuice Potion in a cracked cauldron.\nTemperature Toughness: Works from -30°C (Hogsmeade’s iciest winters) to +60°C (the Sahara’s Furnunculus-hot sands).<p>\nStable Voltage: Holds 3V until empty, like a Pensieve clinging to memories—no sudden drops, no fizzles.</p></p><p>Real-World Magic: Tesla Model 3 key fobs rely on CR1632s to survive parking-lot tantrums and Baby Driver imitations. It’s the Disillusionment Charm of batteries: invisible, but essential.</p><ul><li>CR1632 vs. the Imposters: Why Size (and Magic) Matters\nNot all “equivalent” batteries are created equal. Let’s sort the Gryffindors from the Dementors:</li></ul><p>CR1620 &amp; CR1616: Thinner cousins (2.0mm and 1.6mm thick), but they’re like Wingardium Leviosa that fizzles. Lower capacity means they die faster—fine for calculators, but useless for Tesla keys or hearing aids. Stick to CR1632 unless your gadget’s manual explicitly says “It’s okay, really.”</p><p>CR2032: Larger (20mm wide, 3.2mm thick) and higher capacity (240mAh), but it’s the Slytherin of the bunch. Too wide to fit in CR1632 slots—imagine jamming a Marauder’s Map into a matchbox. Disaster.</p><p>Roast Alert:\nCR1620 (squeaking): “I’m cheaper!”<a href=\"https://www.ersaelectronics.com/blog/what-is-a-cr1632-battery-and-cr1632-battery-equivalents\" rel=\"noopener noreferrer\">CR1632</a> (calm, like Dumbledore): “I’m in your Tesla key. You’re in a calculator. Bye.”</p><ul><li>CR1632: The Power Charm of a Thousand Realms\nFrom Diagon Alley to the stars, CR1632 powers magic you’d never guess:</li></ul><p>Automotive (The Knight Bus of Tech):</p><p>Tesla Key Fobs: Survives Fast &amp; Furious key spins and toddler experiments (no “Riddikulus” for dead fobs).\nTPMS Sensors: Judges your parallel parking in BMWs—like a Marauder’s Map for tires, muttering, “Mischief managed… poorly.”</p><p>Medical (St. Mungo’s Lifeline):</p><p><a href=\"https://www.ersaelectronics.com/\" rel=\"noopener noreferrer\">Blood Glucose Monitors</a>: Powers care in German hospitals—no “404 Error: Blood Sugar” for diabetics.\nHearing Aids: Keeps Grandma’s gossip alive (and your ear canals safe from Muffliato).</p><p>Industrial (Goblin Mines of Innovation):</p><p>Farming Sensors: Tracks soil moisture in India’s monsoons—like Scourgify for data, turning chaos into clarity.\nFactory Robots: Runs 24/7 in Shanghai’s smart factories—no unionizing, just loyalty (like House-Elves with better benefits).</p><p>Space (The Forbidden Forest of the Cosmos):</p><p>NASA Rovers: Tested in Mars-simulated -40°C labs (Duracell? Expelliarmus. CR1632 laughs at cosmic frost).</p><ul><li>Where to Find Your CR1632 (Avoid Knockturn Alley Fakes)\nIn 2025, shop like a wizard—no dodgy Knockturn Alley batteries:</li></ul><p>Retail Chains: Walmart or Target (electronics aisle, near Fizzing Whizbees).\nAuto Stores: AutoZone (ask for “Tesla key fob stones”—they’ll know).<p>\nPharmacies: CVS (hearing aid section—Grandma’s secret stash).</p></p><p>Amazon: Panasonic CR1632 (10-pack, 6 Galleons/$6)—trusted as Ollivander’s wands.\nSpecialist Sites: Ersaelectronics.com (industrial-grade, goblin-approved for tough jobs).</p><p>Pro Tip: Avoid gas station brands—they’re like Gilderoy Lockhart: all show, no magic. Stick to Panasonic (Arctic-ready), Energizer (Toyota’s choice), or LiYuan (China’s -40°C champion).</p><ul><li>Why CR1632 Outlasts the Rest (It’s All in the Alchemy)\nCR1632 isn’t just a battery—it’s a Felix Felicis of power:</li></ul><p>Voltage Stability: Holds 3V until empty, while alkaline batteries drop like a Dementor’s shadow (we’ve all been there).\nLeak-Proof Design: Sealed tighter than Gringotts vaults—no acid spills (unlike that time Hermione’s cauldron exploded).<p>\nLow Self-Discharge: Loses &lt;1% charge/year—perfect for fire alarms (no “Incendio” without warning).</p></p><p>Case Study: Philips’ CR1632-powered bike lights last 5 years in Amsterdam’s rain—like Lumos Maxima that never fades.</p><ul><li>Brand Battle: The Wands of Power Stones\nNot all power stones are made equal. Here’s who to trust:</li></ul><p>Panasonic: The Ollivander of batteries. Arctic-ready (125mAh at -40°C), but pricier (0.5 Galleons/unit). Worth it for extreme cold.</p><p>LiYuan (China): The Weasley of the bunch—cheap (0.2 Galleons/unit), works from -40°C to +85°C. Great for budgets, but skip if you need global warranty.</p><p>Energizer: Trusted by Toyota, like Hedwig delivering mail—reliable, but only in bulk (10+ packs).</p><p>Pro Tip: Need Siberian winters? LiYuan’s CR1632H variant outperforms Panasonic—like a Protego against frost.</p><ul><li>The Future: CR1632 Among New Spells\nWhat’s next for our tiny power charm?</li></ul><p>AI Wearables: Powers AR glasses for metaverse meetings (no mid-chat “Obliviate”).\nSmart Cities: Fuels sensors in Tokyo’s traffic lights (judging your jaywalking—Petrificus Totalus for rule-breakers).<p>\nLunar Bases: Backup power for moon airlocks (because Oxygen Not Included isn’t a game anymore).</p></p><p>Mic Drop: Hoard CR1632s now. Future retro gamers will trade Golden Snitches for your stash.</p><p>Conclusion: The Unseen Hero of Magic\nCR1632 isn’t flashy. It doesn’t cast Expecto Patronum or brew Polyjuice Potion. But it’s the reason your Tesla key works, your grandma hears gossip, and Mars rovers send back photos.<p>\nNext time you replace one, whisper, “Thanks, little stone.” It’s the least you can do for a battery that keeps the magic of modern life alive.</p></p><p>Written by a witch who once mistook a CR1632 for a Galleon. (Spoiler: It didn’t buy Butterbeer, but it powered a toy broom. Close enough.)\n🔋 Some magic isn’t in wands—it’s in the stones that keep the world turning.</p>","contentLength":6366,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How Keploy Transformed My API Testing Experience During Their Fellowship Program","url":"https://dev.to/pratik_kotal/how-keploy-transformed-my-api-testing-experience-during-their-fellowship-program-42ef","date":1751001607,"author":"Pratik Kotal","guid":173447,"unread":true,"content":"<p>Hey everyone! 👋\nI recently completed building CodeSentry as part of the Keploy API Fellowship program, and I wanted to share how this experience completely changed my perspective on API testing. You can check out the project on GitHub if you're interested.</p><h2>\n  \n  \n  The Testing Challenge I Faced\n</h2><p>CodeSentry is a comprehensive code analysis API built with Go and MongoDB. It has multiple endpoints for different types of analysis - security checks, complexity analysis, style validation, and more. Each endpoint handles different request formats and returns detailed analysis results.\nAs I was building these features during the fellowship, I quickly realized that testing was becoming a major bottleneck. Writing comprehensive test cases manually meant:</p><ul><li><p>Creating detailed JSON payloads for every scenario</p></li><li><p>Writing assertions for complex response structures</p></li><li><p>Testing various error conditions and edge cases</p></li><li><p>Ensuring database interactions work correctly</p></li><li><p>Validating the analysis logic for different programming languages\nI found myself spending way more time writing and maintaining tests than actually developing the core functionality.</p></li></ul><h2>\n  \n  \n  Discovering Keploy's Power\n</h2><p>Since this was a Keploy fellowship project, I had the opportunity to really dive deep into their testing platform. What I discovered was genuinely impressive.\nKeploy offers multiple ways to generate test suites, and I got to experience all of them:</p><ol><li>Recording live interactions: Simply use your API normally, and Keploy captures everything in the background</li><li>OpenAPI schema import: Upload your API specification and generate tests automatically</li><li>Base URL crawling: Point Keploy at your API's base URL and let it discover and test endpoints</li><li>cURL command conversion: Paste existing cURL commands and instantly convert them to test cases</li></ol><p>The Keploy dashboard made this incredibly intuitive. I could literally paste my CodeSentry API's base URL (<a href=\"http://localhost:8080/api/v1\" rel=\"noopener noreferrer\">http://localhost:8080/api/v1</a>) for local testing, and within minutes, it had discovered all my endpoints and generated comprehensive test suites for each one.</p><h2>\n  \n  \n  Dashboard-Based Test Generation\n</h2><p>What really impressed me was how the Keploy dashboard streamlined test suite generation using three key components:\nBase URL + OpenAPI Schema + cURL Commands = Complete Test Suite<p>\nThe process was incredibly straightforward:</p></p><p>I provided my CodeSentry API's base URL (<a href=\"http://localhost:8080\" rel=\"noopener noreferrer\">http://localhost:8080</a>)\nUploaded my existing OpenAPI schema documentation<p>\nAdded the cURL commands I had been using for manual testing</p></p><p>Within minutes, the dashboard combined all three components to generate comprehensive test suites for my entire API. It wasn't three separate approaches - it was three pieces of information that Keploy used together to create complete test coverage automatically.</p><p>A Concrete Example:\nHere's what really sold me on the approach. I was testing the main analysis endpoint with a code snippet that contained security vulnerabilities:</p><div><pre><code>curl -X POST http://localhost:8080/api/v1/analyze \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"code\": \"func main() {\\n    password := \\\"admin123\\\"\\n    if user == \\\"admin\\\" {\\n        fmt.Println(\\\"Welcome admin\\\")\\n    }\\n}\",\n    \"language\": \"go\",\n    \"options\": {\n      \"check_security\": true,\n      \"check_style\": true,\n      \"check_complexity\": true,\n      \"check_metrics\": true\n    }\n  }'\n</code></pre></div><p>Instead of manually writing test cases to verify that the API correctly identifies hardcoded credentials, detects style issues, and calculates complexity metrics, I had multiple options:</p><ul><li>Live recording: Make the request once and let Keploy capture it</li><li>cURL conversion: Paste this exact cURL command into the dashboard and get an instant test case</li><li>Schema validation: If this endpoint was in my OpenAPI spec, tests were auto-generated with proper validation</li></ul><p>All three approaches took less than a minute and produced comprehensive test coverage that would have taken hours to write manually.</p><h2>\n  \n  \n  Seamless CI/CD Integration\n</h2><p>One of the most valuable aspects of the fellowship was learning how to integrate Keploy into a proper development workflow. The CI/CD integration was straightforward and incredibly effective.\nI added a GitHub Actions workflow that runs all Keploy-generated tests on every push:</p><div><pre><code>      - name: Install Keploy CLI\n        run: |\n          curl --silent -L https://keploy.io/ent/install.sh | bash\n\n      - name: Run Keploy Test Suite\n        run: |\n          export KEPLOY_API_KEY=${{ secrets.KEPLOY_API_KEY }}\n          keploy test-suite --app=dcfa8d58-e06c-449f-baa1-6a239e95e616 --base-path http://localhost:8080/api/v1 --cloud\n</code></pre></div><p>Now every code change is automatically validated against real usage patterns. This caught several regression issues that would have been difficult to identify with traditional unit tests.</p><p>The difference was dramatic across all test generation methods:</p><p>Test creation time: From hours per endpoint to literally minutes for entire API suites\nCoverage completeness: Base URL discovery found endpoints I had forgotten to test manually<p>\nSchema consistency: OpenAPI import ensured tests matched documentation perfectly</p>\nDeveloper workflow: cURL conversion meant existing debug commands became permanent tests<p>\nTest maintenance: Essentially zero - tests update automatically as the API evolves</p>\nBug detection: Identified 3 critical regressions in the first week that manual tests missed</p><p>The dashboard provided clear visibility into test coverage and results, making it easy to identify gaps and track API health over time.</p><h2>\n  \n  \n  What Makes Keploy Different\n</h2><p>After working with it extensively during the fellowship, here's what stands out:</p><ol><li>Context-aware recording: It doesn't just capture HTTP requests - it understands database states, external dependencies, and the complete application context.</li><li>Zero learning curve: If you can make API calls, you can create tests. No special syntax or frameworks to learn.</li><li>Real-world accuracy: Tests reflect how your API actually behaves in production scenarios.</li><li>Automatic maintenance: As your API evolves, the tests evolve with it.</li></ol><h2>\n  \n  \n  Fellowship Program Benefits\n</h2><p>Being part of the Keploy fellowship provided several advantages:</p><ul><li>Hands-on mentorship: Direct guidance on best practices for API testing</li><li>Real project experience: Building a complete application with proper testing infrastructure</li><li>Community support: Access to other fellows working on similar challenges</li><li>Industry exposure: Understanding how testing fits into modern development workflows</li></ul><p>Keploy isn't a silver bullet. There are still scenarios where custom test logic is necessary, particularly for complex business rules or very specific edge cases. But for the majority of API testing needs - especially the tedious, repetitive parts - it eliminates significant overhead.\nThe Chrome extension is also quite useful for testing web applications that interact with APIs, allowing you to capture real user workflows and turn them into automated tests.</p><h2>\n  \n  \n  Recommendations for Other Developers\n</h2><p>If you're working on API-heavy projects and finding testing to be a time sink, I'd strongly recommend trying Keploy. Start with one or two endpoints to get familiar with the workflow, then gradually expand coverage.\nFor students or early-career developers, I'd also suggest looking into their fellowship program if they offer it again. It's an excellent way to gain practical experience with modern testing approaches while building something meaningful.</p><p>CodeSentry now has comprehensive API test coverage with minimal maintenance overhead. The project includes endpoints for security analysis, complexity calculation, style checking, and result management - all thoroughly tested through Keploy-generated test suites.\nYou can see the integration results and test coverage in the project's <a href=\"https://github.com/PratikforCoding/CodeSentry/\" rel=\"noopener noreferrer\">GitHub repository</a>. The README includes examples of the test outputs and CI/CD pipeline integration.\nThis fellowship experience has fundamentally changed how I approach API development and testing. Having confidence that every deployment is properly validated makes development much more enjoyable and productive.</p>","contentLength":8045,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Mastering Go Modules: Create, Publish, Conquer! 🚀","url":"https://dev.to/tavernetech/mastering-go-modules-create-publish-conquer-4g34","date":1750987233,"author":"Taverne Tech","guid":172636,"unread":true,"content":"<ol><li>Module Genesis: Creating Your First Go Module</li><li>Going Public: Publishing Your Digital Offspring</li><li>The Art of Consumption: Using Modules Like a Pro</li></ol><p>Picture this: You've just written the most beautiful Go code of your career, and now you want to share it with the world (or at least with your future self). But wait—how do you package it properly? How do you make sure others can actually use it without pulling their hair out? </p><p>Welcome to the wonderful world of ! 🎉 If you remember the dark ages of GOPATH (and if you don't, consider yourself lucky), you'll appreciate how modules transformed Go development from a organizational nightmare into a dependency management dream.</p><p>In this guide, we'll journey through the three sacred stages of module mastery: creating your digital offspring, sending them out into the wild, and consuming others' creations without breaking everything. Buckle up!</p><h2>\n  \n  \n  1. Module Genesis: Creating Your First Go Module 🌱\n</h2><p>Remember when organizing Go code meant stuffing everything into a single GOPATH folder? It was like trying to organize your entire digital life in one Downloads folder—<strong>technically possible, but absolutely terrifying</strong>. </p><p>Go modules changed everything when they landed in Go 1.11 (though they didn't become the default until Go 1.13—because even programming languages need time to build confidence). Here's a fun fact: <strong>over 89% of Go projects now use modules</strong>, making GOPATH as relevant as a floppy disk at a cloud computing conference.</p><h3>\n  \n  \n  The Birth Certificate: go.mod\n</h3><p>Creating a module is like registering your code's birth certificate. Let's see it in action:</p><div><pre><code>awesome-calculator\nawesome-calculator\n\n\ngo mod init github.com/yourusername/awesome-calculator\n</code></pre></div><p>This creates a  file—think of it as your module's DNA:</p><div><pre><code></code></pre></div><p>: The module path (github.com/yourusername/awesome-calculator) doesn't have to exist on GitHub initially, but it should represent where you plan to host it. It's like reserving a domain name for your future mansion! 🏰</p><p>Here's how a well-organized module looks:</p><div><pre><code>awesome-calculator/\n├── go.mod\n├── go.sum\n├── README.md\n├── calculator.go\n├── calculator_test.go\n└── internal/\n    └── helpers.go\n</code></pre></div><p>The  directory is Go's way of saying \"<strong>private property, no trespassing</strong>\"—code in there can't be imported by external modules. Sneaky, right?</p><h2>\n  \n  \n  2. Going Public: Publishing Your Digital Offspring 🎭\n</h2><p>Publishing a Go module is like sending your teenager to college—you've done your best, crossed your fingers, and now you're hoping they don't embarrass you in public. The good news? Go modules are generally better behaved than teenagers.</p><p>Here's a lesser-known fact: <strong>Go doesn't have a central repository like npm or PyPI</strong>. Instead, it uses version control systems directly. This means your GitHub repo IS your package registry—no middleman, no drama! </p><div><pre><code>\ngo  ./...\ngo vet ./...\n\n\ngit add \ngit commit \ngit push origin main\n\n\ngit tag v1.0.0\ngit push origin v1.0.0\n</code></pre></div><h3>\n  \n  \n  Semantic Versioning: The Universal Language\n</h3><p>Go enforces  strictly—and for good reason! Here's the breakdown:</p><ul><li> → \"Look ma, I made a thing!\"</li><li> → \"Oops, fixed that embarrassing bug\"</li><li> → \"New features, but your old code still works\"</li><li> → \"Breaking changes ahead—hold onto your hats!\"</li></ul><p>: Semantic versioning was created by GitHub co-founder Tom Preston-Werner in 2010, but Go made it  for modules. No more <code>v1.0.0-final-final-REALLY-FINAL</code>! </p><p>When you publish, your module gets indexed by the  (proxy.golang.org). This beast serves over <strong>13 billion module downloads per month</strong>—that's like the entire world's population downloading a Go module twice every month! 🤯</p><h2>\n  \n  \n  3. The Art of Consumption: Using Modules Like a Pro 🛒\n</h2><p>Using external modules is like grocery shopping—you go in for one dependency and somehow come out with 47 transitive dependencies. But hey, at least Go makes it manageable!</p><div><pre><code>\ngo get github.com/gin-gonic/gin\n\n\ngo get github.com/gin-gonic/gin@v1.9.1\n\n\ngo get github.com/gin-gonic/gin@v1.9\n\n\ngo get github.com/gin-gonic/gin@main\n</code></pre></div><h3>\n  \n  \n  Version Constraints: Your Safety Net\n</h3><p>Go modules support sophisticated version constraints:</p><div><pre><code></code></pre></div><h3>\n  \n  \n  The Trust But Verify Principle\n</h3><p>The  file is like a bouncer for your dependencies—it contains cryptographic hashes to ensure what you downloaded is what you expected:</p><div><pre><code>github.com/gin-gonic/gin v1.9.1 h1:4idEAncQnU5cB7BeOkPtxjfCSye0AAm1R0RVIqJ+Jmg=\ngithub.com/gin-gonic/gin v1.9.1/go.mod h1:hPrL7YrpYKXt5YId3A/Tnip5kqbEAP+KLuI3SUcPTeU=\n</code></pre></div><p><strong>Never edit go.sum manually</strong>—that's like trying to perform surgery with a spoon. Let Go handle the crypto magic! ✨</p><p>Keep your module lean with these commands:</p><div><pre><code>\ngo mod tidy\n\n\ngo mod graph\n\n\ngo mod download\n</code></pre></div><p>Congratulations! You've just graduated from the  🎓. You now know how to create modules (birth certificates included), publish them to the world (without the anxiety), and consume others' work responsibly (with proper version control).</p><p>Remember: modules are like LEGO blocks—they're most powerful when they're <strong>small, focused, and easy to combine</strong>. The Go ecosystem thrives because developers create modules that do one thing well and play nicely with others.</p><p><strong>Your mission, should you choose to accept it</strong>: Create your first module this week! It doesn't have to solve world hunger—even a simple utility function counts. The Go community is surprisingly welcoming to newcomers (unlike Stack Overflow comment sections 😅).</p><p>What's the weirdest or most surprisingly useful Go module you've discovered? Drop a comment and share your module adventures—we're all learning together in this delightful chaos we call software development! 🚀</p>","contentLength":5608,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Go Worker Pools: Concurrency That Doesn’t Burn Your Kitchen Down","url":"https://dev.to/jones_charles_ad50858dbc0/go-worker-pools-concurrency-that-doesnt-burn-your-kitchen-down-59oo","date":1750986022,"author":"Jones Charles","guid":172635,"unread":true,"content":"<p>Hey, fellow Go devs! If you’ve ever felt the thrill of spinning up goroutines like they’re free candy, you know concurrency is where Go shines. Handling HTTP floods, crunching log files, or juggling real-time tasks—it’s all in a day’s work. But here’s the catch: goroutines are lightweight, not limitless. Fire up too many, and your app turns into a chaotic kitchen—chefs (goroutines) tripping over each other, CPU frying, memory spilling, and no food (results) on the table.</p><p>Enter the : your ticket to sane, high-performance concurrency. It’s like hiring a fixed crew of efficient cooks who grab tasks from a queue, keeping the chaos in check. Whether you’re a Go newbie or a grizzled vet, this pattern’s a must-have in your toolbox. In this post, we’ll unpack the basics, level up to high-performance designs, share war stories from the trenches, and peek at what’s next. Ready to tame those goroutines? Let’s dive in!</p><h4>\n  \n  \n  2. Worker Pool : The Basics\n</h4><p>Before we get fancy, let’s nail the fundamentals. If you’re cozy with goroutines and channels, this’ll feel like home.</p><h5>\n  \n  \n  2.1 What’s a Worker Pool?\n</h5><p>Picture a mail sorting hub: packages (tasks) roll in, a fixed team of workers (goroutines) grabs them from a queue (channel), and processes them. No hiring spree when the pile grows—just steady, predictable work. That’s a worker pool: <strong>a fixed squad of goroutines pulling tasks from a channel</strong>.</p><p>In Go, it’s three ingredients:</p><ul><li>: A channel holding jobs.</li><li>: Goroutines that fetch and process tasks.</li><li>: Another channel (optional) for collecting output.</li></ul><p>“Sure, goroutines are cheap,” you say. “Why not spawn a million?” Because cheap doesn’t mean free. Stack up thousands, and you’re juggling scheduling overhead, memory spikes, and maybe a crashed server if I/O’s involved (think network calls or file reads). Worker pools keep it tight:</p><ul><li>: Caps goroutines to save resources.</li><li>: Predictable behavior, no meltdowns.</li><li>: Reuses workers, skipping creation costs.</li></ul><p>Let’s square some numbers with a basic pool:</p><div><pre><code></code></pre></div><p>Run it, and 3 workers chew through 10 tasks. Simple, right? But real life’s messier—timeouts, priorities, errors. Let’s level up.</p><ul><li>: HTTP blasts, file parsing.</li><li>: Keep goroutines from eating your server alive.</li><li>: No inter-task drama.</li></ul><h4>\n  \n  \n  3. High-Performance Worker Pools: Turning Up the Heat\n</h4><p>Basic pools are cool, but production demands more—think scalability, fault tolerance, and adaptability. Let’s soup up our worker pool for the big leagues.</p><h5>\n  \n  \n  3.1 Why Go High-Performance?\n</h5><p>Here’s what a tricked-out worker pool brings:</p><ul><li>: Caps goroutines but squeezes every drop of CPU/memory.</li><li>: Flexes with load—more workers when it’s busy, fewer when it’s chill.</li><li>: One task flops? No biggie—others keep trucking.</li></ul><p>Fixed counts are safe but stiff. Add a manager to tweak worker numbers on the fly:</p><div><pre><code></code></pre></div><p>: Trigger this when the queue’s bursting.</p><p>Some jobs can’t wait. Use a priority queue:</p><div><pre><code></code></pre></div><p>Stuck tasks?  to the rescue:</p><div><pre><code></code></pre></div><p>Bundle outputs and oopsies:</p><div><pre><code></code></pre></div><p>Here’s a beefy version with timeouts and error handling:</p><div><pre><code></code></pre></div><p>This is battle-ready—timeouts, errors, concurrency control. Next, let’s hit the real world.</p><h4>\n  \n  \n  4. Real-World Wins: Lessons from the Trenches\n</h4><p>Theory’s cute, but the proof’s in the pudding. I’ve been slinging Go for a decade, and worker pools have bailed me out of many a jam. Here’s a tale from the field and some gold nuggets.</p><p>We had a data pipeline pulling millions of records from a DB, hitting an API, and dumping results elsewhere. Our first stab—one goroutine per record—blew up: memory through the roof, API rate limits smacked us, and crashes galore.</p><p>Match workers to your rig: CPU-bound? Use . I/O-heavy? Double or triple it. We landed on 16 workers for an 8-core box—sweet spot.</p><p>Unbuffered channels choked when tasks piled up. A 100-slot buffer smoothed it out:</p><p>No orphaned tasks!  +  nailed it:</p><div><pre><code></code></pre></div><p>Track task times and failures—it’s your debug lifeline:</p><div><pre><code></code></pre></div><div><table><tbody></tbody></table></div><p>Worker pools turned a dumpster fire into a win.</p><h4>\n  \n  \n  5. Pitfalls and How to Not Trip Over Them\n</h4><p>Worker pools are slick, but they’ve got traps that’ll bite you in production if you’re not careful. I’ve faceplanted into these over the years—here’s what I learned, so you don’t have to.</p><h5>\n  \n  \n  5.1 Queue Blocking: The Silent Killer\n</h5><p>: In a log cruncher, the task queue filled up faster than workers could clear it. Producers stalled, and the app froze like a deer in headlights.: Unbuffered channels (or tiny buffers) can’t handle bursty workloads.:  </p><ul><li>Crank the buffer size— kept us humming.\n</li><li>Drop tasks gracefully when full:\n</li></ul><div><pre><code></code></pre></div><p>: Deadlocks vanished, drops stayed under 1%.</p><h5>\n  \n  \n  5.2 Goroutine Leaks: Zombie Workers\n</h5><p>: Stress tests showed memory creeping up post-shutdown. Workers were hanging around like uninvited guests.: No clean exit after the queue closed.: Use  to kill ’em dead:</p><div><pre><code></code></pre></div><p>: No more memory ghosts.</p><h5>\n  \n  \n  5.3 Uneven Tasks: The Long Task Jam\n</h5><p>: Bulk HTTP calls—some zipped in milliseconds, others crawled for 10 seconds. Fast tasks got stuck in traffic.: One pool, no priority—slowpokes hogged the line.:  </p><ul><li>: Sort by expected runtime.\n</li><li>: Split fast and slow:\n</li></ul><div><pre><code></code></pre></div><p>: Fast tasks dropped from 2s to 200ms.</p><h5>\n  \n  \n  5.4 Error Blindness: Where’d My Failure Go?\n</h5><p>: An API 500’d, but the caller got nada—data lost in the void.: Sloppy result handling swallowed errors.: Unified error channel:</p><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>: Errors loud and clear—no silent fails.</p><h4>\n  \n  \n  6. Real-World Use Cases: Where Worker Pools Shine\n</h4><p>Worker pools aren’t just theory—they’re problem-solvers. Here’s how they’ve crushed it in the wild.</p><p>: Hit 10 weather APIs for forecasts, fast.:  </p><ul></ul><div><pre><code></code></pre></div><p>: 30s sequential → 3s with 10 workers.</p><p>: Parse 1000 log files into a DB.:  </p><ul></ul><div><pre><code></code></pre></div><p>: 1 hour solo → 5 minutes pooled.</p><p>: Prioritize user alerts over background tasks.:  </p><ul><li>Priority queue + workers:\n</li></ul><div><pre><code></code></pre></div><p>: High-priority latency: 1s → 100ms.</p><h4>\n  \n  \n  7. Wrapping Up: Why Worker Pools Rule\n</h4><p>Worker pools are Go’s concurrency MVPs—simple, powerful, and battle-tested. They keep goroutines in line, boost throughput, and save your app from imploding. Here’s the recap and a sneak peek at what’s next.</p><ul><li>: No resource hogging.\n</li><li>: More done with less.\n</li><li>: Errors? Timeouts? Handled.\nPerfect for HTTP blasts, file munching, or dynamic workloads—Go’s channels and goroutines make it a dream.</li></ul><ul><li>Tune workers and buffers to your rig.\n</li><li>Shut down gracefully with .\n</li><li>Catch errors—don’t let them ghost you.\n</li></ul><ul><li>: Imagine ML tweaking worker counts live—xAI vibes, anyone?\n</li><li>: Hook ’em to Kafka for cloud-scale tasks.\n</li><li>: Runtime tweaks (like Go 1.18+) will juice performance more.</li></ul><p>After 10 years with Go, I’m obsessed—worker pools are elegant chaos-tamers. Try ’em out—start small, mess up, learn, share. They’re not just code; they’re a mindset. Happy coding, and let me know how it goes in the comments!</p>","contentLength":6788,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Go Programming: A Beginner's Guide","url":"https://dev.to/darshil89/go-programming-a-beginners-guide-58l1","date":1750971612,"author":"Darshil Mahraur","guid":172492,"unread":true,"content":"<p>This is a placeholder for the article body.  It would contain introductory material on Go programming.</p>","contentLength":102,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Turning my Resume Into an Interactive Game : ReactJs & Go","url":"https://dev.to/justdude/turning-my-resume-into-an-interactive-game-reactjs-go-4chd","date":1750968276,"author":"Mauro","guid":172491,"unread":true,"content":"<p>I recently moved to Berlin and needed to stand out in the job applications. Instead of a traditional portfolio, I built an interactive pixel-art game where visitors walk through my career journey: </p><p>As a senior backend developer (Java, Python, Go), this was my first time touching TypeScript, so be gentle! 😅</p><ul><li>: React + TypeScript ⚛️</li></ul><ul><li>Interactive 2D world with WASD movement 🕹️</li><li>Career timeline (buildings = companies, statues = tech stack) 🏢</li><li>Quest system and analytics dashboard 📊</li><li>Mobile-friendly with touch controls 📱</li></ul><ul><li>React hooks felt like magic coming from backend ✨</li><li>TypeScript caught tons of bugs (worth the initial frustration) 🐛</li><li>CSS is harder than scaling distributed systems 😅</li></ul><ul><li>Environments: Midjourney (for speed) 🤖</li><li>Character sprites: Created by a friend 👨‍🎨</li><li>Planning to do custom pixel art later ⏰</li></ul><p>This 3-week sprint taught me more about frontend than any tutorial. Sometimes the best way to learn is to build something you're excited about! 🚀</p><p><strong>Looking for backend opportunities in Berlin</strong> 🇩🇪 - this project definitely helped me stand out in applications.</p><p><strong>Please give me some clap! 🗿</strong><em>What creative approaches have you used to showcase your skills?</em> 💭</p><p>: #react #typescript #golang #portfolio #career #webdevelopment #berlin #gamedev</p>","contentLength":1272,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Build a High-Performance Crypto Rankings Dashboard with LunarCrush API + Inngest in 25 Minutes","url":"https://dev.to/dbatson/build-a-high-performance-crypto-rankings-api-with-go-inngest-redis-in-25-minutes-4eci","date":1750966231,"author":"Danilo \"Jamaal\" Batson","guid":172452,"unread":true,"content":"<h2>\n  \n  \n  Build a High-Performance Crypto Rankings Dashboard with LunarCrush API + Inngest in 25 Minutes\n</h2><p><em>A complete guide to building an enterprise-grade cryptocurrency analytics dashboard with real-time social sentiment data</em></p><h2>\n  \n  \n  Why Real-Time Crypto Social Sentiment Matters\n</h2><p>In today's volatile cryptocurrency market, social sentiment drives price movements more than traditional financial metrics. A single tweet from an influencer can cause 20% price swings in minutes. Professional traders and investors need <strong>real-time social intelligence</strong> to make informed decisions.</p><p>That's where  comes in. Their API provides social sentiment analysis across 6,700+ cryptocurrencies, tracking millions of social media posts, news articles, and community discussions in real-time.</p><p>In this tutorial, you'll create a production-ready <strong>Crypto Rankings Dashboard</strong> that showcases modern development practices perfect for job interviews. The system demonstrates:</p><ul><li>✅  with sub-second response times</li><li>✅ <strong>Background Job Processing</strong> with Inngest workflows</li><li>✅  for 15-minute data persistence</li><li>✅ <strong>Professional React Dashboard</strong> with TypeScript and Tailwind CSS</li><li>✅  every 5 minutes via automated jobs</li><li>✅ <strong>11 Cryptocurrency Metrics</strong> including social sentiment analysis</li><li>✅  on Render and Vercel</li></ul><p> 25 minutes Intermediate Go backend development, background job processing, Redis caching, React state management, cloud deployment</p><blockquote><p>💡  This project is perfect for showcasing full-stack expertise in technical interviews. The architecture demonstrates understanding of scalable systems, real-time data processing, and modern cloud practices.</p></blockquote><h2>\n  \n  \n  Prerequisites &amp; Account Setup\n</h2><ul><li>Node.js 18+ for the frontend</li><li>Basic knowledge of Go and React</li><li>4 API keys from different services (we'll walk through signup below)</li></ul><p><strong>Two Ways to Experience This Tutorial:</strong></p><h3>\n  \n  \n  Sign Up For LunarCrush API\n</h3><p>LunarCrush provides the social sentiment data that powers our analytics dashboard.</p><ol><li>Enter your email address and click \"Continue\"</li><li>Check your email for verification code and enter it</li><li>Complete the onboarding steps:\n\n<ul><li>Select your favorite categories (or keep defaults)</li><li>Create your profile (add photo and nickname if desired)</li><li> Select a subscription plan (you'll need it to generate an API key)</li></ul></li></ol><p>![LunarCrush Signup Process Screenshot]</p><p> - you'll add it to your environment variables later.</p><p>Redis Cloud provides managed Redis hosting with a generous free tier:</p><ol><li> Choose the free 30MB tier</li><li> In your dashboard, copy:\n\n<ul></ul></li><li><strong>Format Connection String:</strong> Combine into: <code>redis://default:password@host:port</code></li></ol><p>Inngest handles our background job processing:</p><ol><li> Visit <a href=\"https://inngest.com/\" rel=\"noopener noreferrer\">Inngest</a> and create an account</li><li> Name it \"crypto-rankings\"</li><li> In the settings, copy your:\n\n<ul><li> (starts with )</li><li> (starts with )</li></ul></li></ol><h3>\n  \n  \n  Set Up Render (Backend Hosting)\n</h3><ol><li> Visit <a href=\"https://render.com\" rel=\"noopener noreferrer\">Render</a> and connect your GitHub account</li><li> We'll configure deployment later in the tutorial</li></ol><h3>\n  \n  \n  Set Up Vercel (Frontend Hosting)\n</h3><ol><li> Visit <a href=\"https://vercel.com\" rel=\"noopener noreferrer\">Vercel</a> and connect your GitHub account</li><li> We'll configure deployment later in the tutorial</li></ol><p>Create  for reference:</p><div><pre><code># Redis Cloud\nREDIS_URL=redis://default:your_password@your-host:port\n\n# LunarCrush API\nLUNARCRUSH_API_KEY=lc_your_key_here\n\n# Inngest\nINNGEST_EVENT_KEY=your_event_key\nINNGEST_SIGNING_KEY=your_signing_key\nINNGEST_DEV_URL=http://localhost:8080/api/inngest\n\n# Application\nPORT=8080\n</code></pre></div><p>Now let's build our crypto rankings dashboard step by step.</p><div><pre><code>crypto-rankings\ncrypto-rankings\n\nserver\nserver\n\n\ngo mod init crypto-rankings\n\n\ngo get github.com/gin-gonic/gin\ngo get github.com/gin-contrib/cors\ngo get github.com/redis/go-redis/v9\ngo get github.com/inngest/inngestgo\ngo get github.com/joho/godotenv\n\nmain.go\n\n .env\n</code></pre></div><div><pre><code> ..\n\n\nnpx create-next-app@latest frontend frontend\n\n\nnpm  @radix-ui/react-select @radix-ui/react-icons @radix-ui/react-toast\nnpm  @tanstack/react-query @tanstack/react-query-devtools\n</code></pre></div><h3>\n  \n  \n  Set Up Environment Variables\n</h3><p>Create  in the server directory:</p><div><pre><code># .env (server directory)\nREDIS_URL=redis://default:your_password@your-host:port\nLUNARCRUSH_API_KEY=lc_your_key_here\nINNGEST_EVENT_KEY=your_event_key\nINNGEST_SIGNING_KEY=your_signing_key\nINNGEST_DEV_URL=http://localhost:8080/api/inngest\nPORT=8080\n</code></pre></div><p>Create  in the frontend directory:</p><div><pre><code># .env.local (frontend directory)\nNEXT_PUBLIC_API_URL=http://localhost:8080\n</code></pre></div><h2>\n  \n  \n  Go Backend Implementation\n</h2><p>Create the complete Go backend in :</p><div><pre><code></code></pre></div><p>This Go backend provides:</p><ul><li> for high-performance caching</li><li> with proper error handling</li><li> for automated data fetching</li><li> for frontend consumption</li><li> for cross-origin requests</li></ul><h2>\n  \n  \n  React Frontend Implementation\n</h2><p>Create the complete frontend in <code>frontend/src/app/page.tsx</code>:</p><div><pre><code>Loading Crypto Analytics...Fetching real-time social sentiment dataCrypto Rankings Dashboard\n              Real-time cryptocurrency social sentiment and market data\n            Go + GinInngest JobsRedis CloudReact + TypeScriptUnable to load data\n                Try again\n              Metric Selector\n                      Choose Analysis Type\n                    \n                      Refresh\n                    \n                      Trigger Update\n                    System StatusSuccessfulFailed\n                            Top 10 by ✅  items⚡ ms\n                          Processing  data...\n                        \n          ×\n        </code></pre></div><p>Update <code>frontend/src/app/globals.css</code>:</p><div><pre><code></code></pre></div><h3>\n  \n  \n  Backend Deployment (Render)\n</h3><div><pre><code>server\ngit init\ngit add \ngit commit \ngit branch  main\ngit remote add origin https://github.com/yourusername/crypto-rankings.git\ngit push  origin main\n</code></pre></div><ol><li><ul><li>Click \"New +\" → \"Web Service\"</li><li>Connect your GitHub repository</li><li>Configure settings:\n\n<ul><li><code>go build -o main ./main.go</code></li></ul></li></ul></li><li><p><strong>Add Environment Variables:</strong></p></li></ol><div><pre><code>REDIS_URL=redis://default:password@your-redis-host:port\nLUNARCRUSH_API_KEY=lc_your_api_key_here\nINNGEST_EVENT_KEY=your_inngest_event_key\nINNGEST_SIGNING_KEY=your_inngest_signing_key\nINNGEST_DEV_URL=https://your-app.onrender.com/api/inngest\nPORT=10000\n</code></pre></div><h3>\n  \n  \n  Frontend Deployment (Vercel)\n</h3><div><pre><code>frontend\n .env.local\n</code></pre></div><ol><li><ul><li>Import your GitHub repository</li><li>Configure settings:\n\n<ul></ul></li></ul></li><li><p><strong>Add Environment Variables:</strong></p></li></ol><div><pre><code>NEXT_PUBLIC_API_URL=https://your-app.onrender.com\n</code></pre></div><h3>\n  \n  \n  Configure Inngest Production\n</h3><ol><li><strong>Update Inngest Environment:</strong><ul><li>In Render, update  to your production URL</li><li>Register your production webhook in Inngest dashboard</li></ul></li></ol><div><pre><code>server\ngo run main.go\n\nfrontend\nnpm run dev\n</code></pre></div><ol><li>🔍  Visit </li><li>🚀  Select different metrics from dropdown</li><li>📊  Manual trigger button works</li><li>🔄  Data updates every 5 minutes</li><li>💾  Fast subsequent requests</li></ol><div><pre><code>\ncurl https://your-app.onrender.com/health\n\n\ncurl https://your-app.onrender.com/api/crypto/data\n\n\ncurl  POST https://your-app.onrender.com/dev/trigger\n</code></pre></div><h3>\n  \n  \n  Common Issues &amp; Solutions\n</h3><div><table><tbody><tr><td>Verify Redis Cloud URL format and credentials</td></tr><tr><td>Check API key validity and subscription status</td></tr><tr><td><strong>Inngest Function Not Triggering</strong></td><td>Verify webhook URL and signing key</td></tr><tr><td>Update backend CORS configuration with frontend URL</td></tr><tr><td>First request takes 30-60s on free tier</td></tr></tbody></table></div><p><strong>Performance Optimizations:</strong></p><ul><li>Implement request caching with SWR strategy</li><li>Add pagination for large datasets\n</li><li>Optimize bundle size with dynamic imports</li></ul><ul><li>Real-time WebSocket updates</li><li>Advanced filtering and search</li><li>Data export functionality</li></ul><ul><li>Upgrade to Render paid plan for always-on service</li><li>Implement proper logging and monitoring</li><li>Add comprehensive error tracking</li><li>Set up automated testing pipeline</li></ul><h3>\n  \n  \n  AI Integration Opportunities\n</h3><p>Consider these extensions:</p><p><strong>LunarCrush API Integration:</strong></p><ul><li>Connect to AI assistants via Model Context Protocol</li><li>Enable natural language queries for crypto data</li><li>Build AI-powered trading signal generation</li></ul><p><strong>Machine Learning Features:</strong></p><ul><li>Sentiment analysis trend prediction</li><li>Anomaly detection in social metrics</li><li>Automated trading recommendations</li></ul><h2>\n  \n  \n  Resources &amp; Documentation\n</h2><p>Congratulations! You've built a production-ready crypto rankings dashboard that demonstrates modern full-stack development practices. This system showcases:</p><ul><li>✅ <strong>High-Performance Backend:</strong> Go API with Redis caching</li><li>✅  Inngest workflow orchestration\n</li><li>✅  React with TypeScript and modern UI</li><li>✅  Multi-platform production setup</li><li>✅  Automated social sentiment analysis</li></ul><ul><li>Built a scalable API architecture with proper error handling</li><li>Implemented background job processing with error recovery</li><li>Created a responsive, accessible user interface</li><li>Deployed to production with proper environment management</li></ul><ul><li>Demonstrated understanding of cryptocurrency market dynamics</li><li>Integrated real-time social sentiment analysis</li><li>Created a tool valuable for traders and investors</li><li>Showcased ability to work with external APIs and data sources</li></ul><ul><li>Perfect portfolio project for Go and React positions</li><li>Demonstrates understanding of distributed systems</li><li>Shows experience with modern cloud platforms</li><li>Highlights ability to build complete, production-ready applications</li></ul><ul><li>Add historical trend analysis</li><li>Implement real-time WebSocket updates\n</li><li>Create AI-powered trading signals</li><li>Build mobile app with React Native</li></ul><ul><li>Star the repository if you found it helpful</li><li>Share your deployed version on social media</li><li>Contribute improvements back to the project</li><li>Use it in your portfolio and job interviews</li></ul><p> Drop them below! I respond to every comment and love helping fellow developers build amazing applications with real-time social sentiment analysis. 🚀</p>","contentLength":8986,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"BAV99: The Tiny Guardian of Our Tech Planets","url":"https://dev.to/ersajay/bav99-the-tiny-guardian-of-our-tech-planets-13jf","date":1750920460,"author":"ersajay","guid":171902,"unread":true,"content":"<p>A Meeting in the Circuit Desert\nThe desert of old circuit boards stretched endlessly, sun beating down on forgotten gadgets. I was lost, tracing the outline of a broken microcontroller, when I saw it—a small, glinting shape, no bigger than a ladybug, half-buried in sand.<p>\n“You’re… very small,” I said, kneeling.</p>\n“And you’re a child who talks to diodes,” it replied, voice steady as the wind. “But some guardians are smallest when they’re strongest. Ask the fox.”</p><ul><li>What Is a BAV99? (Not Just a Diode—A Guardian)\nThis was no ordinary silicon. It was a <a href=\"https://www.ersaelectronics.com/p/onsemi-bav99-458830\" rel=\"noopener noreferrer\">BAV99</a>, a dual Schottky diode in an SOT-23 suit—smaller than a ladybug, tougher than a baobab’s roots. Let me decode its story:</li></ul><p>Voltage: 70V reverse—unfazed by the storms of static or voltage spikes. Think of it as a Protego shield for circuits.\nCurrent: 200mA—sips power like a hummingbird, not a thirsty camel.<p>\nSpeed: 6ns switching—faster than the fox darting across the dunes.</p></p><p>Design: Dual diodes, common anode. Like two roses sharing a single stem—separate, but stronger together.</p><p>Secret Sauce: It handles signal clipping, voltage clamping, reverse polarity protection—all while keeping your gadgets from melting into smoke.\nFun Fact: Engineers call it the “Circuit Bodyguard.” It saves gadgets from meltdowns like a knight saving a princess.\n“Guardians don’t need to shout,” it said. “They just need to protect.”</p><ul><li>Why BAV99 Shines Brighter Than Most\nIn the desert of diodes, BAV99 isn’t just another pebble—it’s a star. Let’s compare:</li></ul><p>Speed: 6ns (Usain Bolt mode) vs. generic 1N4148’s 4ns (fast, but fragile). BAV99 doesn’t just run—it endures.\nVoltage: 70V (unfazed by chaos) vs. 1N4148’s 100V (panics at static). It’s the cactus to their dandelion.<p>\nSize: SOT-23 (Tic Tac-sized) vs. SOD-123 (clumsy, bulky). BAV99 fits where others can’t—like a key in a tiny lock.</p></p><p>“Why not be bigger?” I asked.\n“Big things break,” it said. “Tiny things fit. In smartwatches. In Mars rovers. In pacemakers.”</p><ul><li>The Guardian of a Thousand Planets\nFrom your wrist to the stars, BAV99 guards:</li></ul><p>Consumer Tech (Your Daily Planet):\nPowers smartphones, clipping signals tighter than your yoga pants. Saves your God of War progress in gaming consoles—no rage-quit casualties here. It’s the invisible hand keeping your world ticking.</p><p>Automotive &amp; Aerospace (The Cosmic Planets):\nProtects Tesla’s ECUs from voltage meltdowns (no TikTok fire memes). Powers Mars rovers, laughing at cosmic radiation (Duracell? Please). It’s the compass guiding tech to new worlds.</p><p>Industrial &amp; Medical (The Healer’s Planet):\nHandles 24/7 factory shifts in robotic arms (no unionizing, just loyalty). Keeps pacemakers steady as a Pensieve—no “404 Error: Heartbeat.” It’s the healer’s wand for circuits.</p><p>Retro Tech (The Nostalgia Planet):\nSaves Tamagotchis from death—because some childhood dreams deserve to live. It’s the keeper of memories, tiny but fierce.</p><p>“Do you get lonely?” I asked.\n“No,” it said. “I’m everywhere. In your watch, in your car, in the stars. Loneliness is for roses that forget they’re loved.”</p><ul><li>BAV99 vs. the Desert Dwellers\nNot all guardians are created equal. Let’s meet the neighbors:</li></ul><p>BAT54: Similar specs, but lacks BAV99’s dual-diode magic (like a single rose, not a garden).\n1N4148: Faster, but cries at reverse voltage (a sprinter who trips at the finish line).<p>\nBAV70: Same vibe, but weaker voltage game (a candle vs. a star).</p></p><p>Mic Drop:\nGeneric Diode: “I’m cheaper!”<p>\nBAV99: “I’m in space. You’re in a gas station flashlight. Bye.”</p></p><ul><li>The Future: BAV99 Among New Stars\nWhat’s next for our tiny guardian?</li></ul><p>AI Glasses: Protects circuits from metaverse meltdowns—because even virtual worlds need real guardians.\nSmart Cities: Powers micro-sensors judging your midnight snack runs (don’t worry, it’s discreet).<p>\nAlien Tech: If ET needs a diode, you bet it’ll be a BAV99. After all, good guardians are universal.</p></p><p>Pro Tip: Hoard these now. Future retro gamers will trade their old Tamagotchis for your stash.</p><p>The Secret of the Tiny Guardian\nBAV99 isn’t flashy. It doesn’t need a name in lights or a viral meme. It’s the kind of friend you remember when your phone works, your car doesn’t catch fire, or a Mars rover sends back photos.<p>\n“What makes you special?” I asked, as I left.</p>\nIt didn’t answer. It just sat there, quiet as the desert, as the stars, as time itself.<p>\nAnd I realized—some guardians don’t need to be big. They just need to shine.</p></p><p>Written by a wanderer who once mistook <a href=\"https://www.ersaelectronics.com/blog/what-is-a-bav99\" rel=\"noopener noreferrer\">a BAV99</a> for a ladybug. (Spoiler: It didn’t fly, but it powered a toy robot. Close enough.)\n🌵 You become responsible, forever, for the stars you once overlooked.</p>","contentLength":4720,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"From Polling to Partying: Writing Cooler Goroutines with sync.Cond","url":"https://dev.to/2nguyenlong000k/from-polling-to-partying-writing-cooler-goroutines-with-synccond-1ld8","date":1750905494,"author":"Nguyễn Long","guid":171181,"unread":true,"content":"<p>Imagine a DJ show with hundreds of people waiting for their favorite track to drop. If everyone kept asking the DJ every millisecond:\n\"Is it time to dance yet? Now?\"<p>\nYou’d probably end up with:</p></p><ul><li>A sweaty DJ (over loaded)</li><li>Burned speakers (crashing)</li><li>And a power outage (aka a CPU meltdown)</li></ul><p>That’s what  looks like in code.</p><p>But what if the DJ had a mic and just said:\n\"Hey! When the beat drops, I’ll tell you!\"</p><p>Go’s  is a condition variable\na concurrency primitive that lets goroutines sleep  while waiting for a condition to become true. It’s based on:</p><ul><li>And the ability to , , or  to other goroutines.</li></ul><ul><li>There’s a  (like a connection pool or ticket list)</li><li>Goroutines must  for that resource to become available</li><li>You want to avoid  or wasting CPU</li></ul><p>Take the example when you use Polling:</p><p>Imagine you’re running a party where guests (goroutines) can only enter the dance floor when there’s space.</p><div><pre><code>for {\n    if showReady {\n        fmt.Println(\"💃 Fan starts dancing!\")\n        break\n    }\n    time.Sleep(100 * time.Millisecond)\n}\n</code></pre></div><p>They keep ... That’s like asking the DJ every 100ms:</p><p>\"Hey, can I dance yet? What about now? How about now?!\"\nThat’s called , and it’s inefficient and annoying (for both CPU and DJ).</p><p>Enter:  – a way to  until you're signaled to proceed.</p><p>So let's take a look at this example first, then we will dig deeply into the mechanism:</p><div><pre><code></code></pre></div><ul><li>Let fans \"wait\" until the event is ready -&gt; stimulate for 3 seconds</li><li>Notify waiting fans as soon as the DJ starts</li></ul><p>This pattern models real business use cases like:</p><ul><li> waiting for jobs</li><li> waiting for payment confirmation</li><li> waiting for items to appear in a queue</li><li> triggered by external events</li></ul><ul><li><strong>The dance floor = the shared resource.</strong></li><li><strong>The fan = goroutine that waits.</strong></li><li><strong>The DJ = the event trigger.</strong></li></ul><h3>\n  \n  \n  Now let's talk about the correct way to use this mechanism:\n</h3><div><pre><code></code></pre></div><div><pre><code></code></pre></div><p>the flow will be depicted as bellow:</p><div><pre><code>[🔒 LOCKED]        G1 enters critical section\n[❓ CHECK ]       Check condition Is showReady true? --&gt;No.\n[😴 WAIT ]        G1 goes to sleep → cond.Wait() waiting for other GR to wake it up! (meaning waiting for the beat drops)\n[🔓 UNLOCKED]     Lock is released while waiting\n</code></pre></div><p>Another goroutine will signals:</p><div><pre><code></code></pre></div><p>That's mean when the DJ drops the beat, game on...</p><div><pre><code></code></pre></div><div><pre><code>[🔒 LOCKED]       G2 changes condition to true (start the show) \n[📣 SIGNAL]       G2 calls cond.Signal() (notify to the FAN)\n[🔓 UNLOCKED]     Lock released \n</code></pre></div><div><pre><code>[👂 WOKEN UP]     G1 is notified, wakes up \n[🔒 LOCK AGAIN]   Tries to reacquire the mutex\n[✅ RECHECK ]     Sees condition is now true\n[🏃 PROCEED ]     Does work and exits\n</code></pre></div><p>The output looks like this:</p><div><pre><code>🧍 Fan waiting...\n🎧 DJ: The beat drops!\n💃 Fan starts dancing!\n</code></pre></div><h2>\n  \n  \n  Why not just ?\n</h2><p>You could say: <em>\"Why not just let the fan sleep for 3 seconds too?\"</em>\nBecause in a real app:</p><ul><li>The DJ doesn’t follow a fixed schedule.</li><li>There might be , not just one.</li><li>The fan may give up waiting or be notified  the moment music starts.</li></ul><h2>\n  \n  \n  How Does  Actually Work?\n</h2><h4>\n  \n  \n  Here’s the implementation under the hood:\n</h4><div><pre><code></code></pre></div><ol><li>There’s a checker to prevent copying the&nbsp;&nbsp;instance, it would be panic if you do so -&gt; anyway, we don't care abt it's detail</li><li>Calling&nbsp;&nbsp;immediately unlocks the mutex -&gt; mutex <strong>must be locked before we call cond.Wait()</strong></li><li>After being notified, this method will lock the mutex again -&gt; you need to unlock it after you done with shared data </li></ol><div><table><tbody><tr></tr><tr><td>Wakes up  waiting goroutines</td></tr></tbody></table></div><div><pre><code>┌──────────────┐       ┌────────────────────┐\n│  Goroutine A │────→  │ tryGetConnection() │\n└──────────────┘       └────────────────────┘\n       │                         │\n       ▼                         ▼\n  [Not Available]         →   Sleep(100ms)\n       │                         │\n       └───── loop ──────────────┘\n</code></pre></div><p>Fan keeps knocking: “DJ, can I dance now? … How about now? … Still no?”</p><ul><li>Sleep is either too short (CPU burn) or too long (latency)</li></ul><h4> Flow (Efficient + Coordinated)\n</h4><div><pre><code>                   [ DJ thread ]\n┌──────────────┐     time.Sleep\n│ Goroutine B  │────────────────────┐\n└──────────────┘                    │\n        │                           ▼\n        │                    ┌──────────────┐\n        │                    │  showReady = true\n        │                    │  cond.Signal()\n        │                    └──────┬───────┘\n        ▼                           │\n┌────────────────────────────────┐  ▼\n│   Goroutine A (waiting fan)    │◄─┘\n│  mu.Lock()                     │\n│  while !showReady {           ◄──────────────┐\n│      cond.Wait() (sleep)                  │\n│  }                                        │\n│  // Proceed to dance 💃                   │\n└────────────────────────────────┘\n\n</code></pre></div><p>Fan enters the club, sits quietly. DJ announces:</p><blockquote><p>“🎧 The beat drops!”</p><ul><li> Sleeps peacefully while waiting</li><li> CPU usage remains near-zero</li></ul></blockquote><p>Don’t burn out your CPU (or your DJ). If you’re managing shared resources in Go and you’re still writing polling loops, it’s time to level up with .\nThis pattern:</p><ul><li>Gives you precise coordination</li></ul><h2>\n  \n  \n  When Should You Reach for ?\n</h2><ul><li>You have a </li><li>And multiple goroutines  on it</li><li>And that condition </li><li>And <strong>polling is not acceptable</strong>\nDon’t use it if:</li><li>You don’t already hold a mutex around the state</li></ul><h5>\n  \n  \n  The Problem With Polling:\n</h5><p>Time a go I already have a nice tcp server implementation setup in golang.\nTo implement this kind of custom tcp server, we need st called connection pool for maximize the power of machines, allow more concurrency operation.</p><p>So the first implementation look like this:  (but a common one):</p><div><pre><code></code></pre></div><ul><li> — even when no connection was available</li><li> — increase sleep = slower reaction, decrease sleep = higher CPU</li><li><strong>1,000 goroutines polling = chaos</strong></li><li> — race conditions like being woken just before state changed</li></ul><p>Thanks to  which perfectly resolve this problem:</p><div><pre><code></code></pre></div><ul><li><strong>CPU usage drops to near zero while waiting</strong></li><li><strong>Only woken when it matters</strong></li><li><strong>No weird races or wasted wakeups</strong></li></ul><p>Someone will ask me st like this:</p><h5>\n  \n  \n  Why not use channels instead?\n</h5><p>Well, to be honest, my 2nd try consider buffered channel of  and it can resolve the problem.</p><h6>\n  \n  \n  and that works… until it doesn't.\n</h6><ul><li>Channels are great for <strong>linear producers/consumers</strong></li><li>But don’t scale well to:\n\n<ul><li><strong>shared state protected by mutex</strong></li><li>\nChannels are .\n is a .</li></ul></li></ul><blockquote><p>Think of channels as a delivery guy. as a waiter with a bell: </p></blockquote><p>You have a , and you want to hand out a free one. If none are free, you wait — <em>but you don’t burn the CPU</em>.</p><div><pre><code></code></pre></div><p>When a connection is returned:</p><div><pre><code></code></pre></div><p>You could be scaling up to , and CPU usage would still be flatlined at.</p><p>Here's the full implementation</p><div><pre><code></code></pre></div>","contentLength":7035,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"How to Create a Event Bus in Go","url":"https://dev.to/leapcell/how-to-create-a-event-bus-in-go-4j57","date":1750876461,"author":"Leapcell","guid":170929,"unread":true,"content":"<p>In today’s landscape where microservices and distributed systems are prevalent, Event-Driven Architecture (EDA) plays a critical role. This architectural design allows services to communicate via events, either synchronously or asynchronously, instead of traditional direct interface calls. The event-based interaction mode promotes loose coupling between services and improves the system’s scalability.</p><p>The publish-subscribe pattern is one way to implement event-driven architecture. It allows different components or services in the system to publish events, while other components or services can subscribe to these events and respond based on the event content. Most developers are likely familiar with this pattern; common technical implementations include message queues (MQ) and Redis’ publish/subscribe (PUB/SUB) features.</p><p>In Go, we can leverage its powerful channels and concurrency mechanisms to implement the publish-subscribe pattern. This article will delve into how to implement a simple event bus in Go, which is a concrete realization of the publish-subscribe pattern.</p><p>The event bus is a concrete implementation of the publish-subscribe pattern. As middleware between publishers and subscribers, it manages event delivery and distribution, ensuring events are smoothly transmitted from publishers to subscribers.</p><p>The main advantages of the event bus include:</p><ul><li>: Services do not need to communicate directly, but instead interact through events, reducing dependencies between services.</li><li>: Events can be handled asynchronously, improving the system’s responsiveness and performance.</li><li>: New subscribers can easily subscribe to events without modifying the existing publisher code.</li><li>: Failures in event handling do not directly affect the normal operation of other services.</li></ul><h2>\n  \n  \n  Code Implementation of the Event Bus\n</h2><p>Next, we will introduce how to implement a simple event bus in Go, which includes the following key functionalities:</p><ul><li>: Allows various services in the system to send events.</li><li>: Allows interested services to subscribe to and receive specific types of events.</li><li>: Allows services to remove events they have previously subscribed to.</li></ul><h3>\n  \n  \n  Event Data Structure Definition\n</h3><div><pre><code></code></pre></div><p> is a structure that encapsulates an event, where  represents the contextual information of the event, and its type is .</p><div><pre><code></code></pre></div><p> is a type alias, defined as a channel for passing  structs: .</p><p> is the definition of the event bus. It contains two properties:</p><ul><li>: A read-write mutex (), used to ensure concurrent read and write safety for the  below.</li><li>: A map where the key is a string representing the subscription topic, and the value is a slice of . This property is used to store all subscribers for each topic. Each subscriber receives events through its own .</li></ul><p>The  function is used to create a new  instance.</p><h3>\n  \n  \n  Event Bus Method Implementation\n</h3><p>The event bus implements three methods: publishing events (), subscribing to events (), and unsubscribing from events ().</p><div><pre><code></code></pre></div><p>The  method is used to publish events. This method receives two parameters:  (the subject) and  (the encapsulated event object).</p><p>In the implementation of , a read lock is first obtained via the  property to ensure that the following operations on  are safe in concurrent routines. Then, a copy of the current subscriber list for the topic is made. A new goroutine is started, which iterates through the copied subscriber list and sends the event to each subscriber through their channel. After these operations are complete, the read lock is released.</p><p><strong>Why make a copy of the subscriber list?</strong></p><p>Answer: Copying the subscriber list ensures data consistency and stability while sending events. Since sending data to the channels is done in a new goroutine, by the time the data is sent, the read lock has already been released, and the original subscriber list might have changed due to adding or removing subscribers. If you use the original subscriber list directly, unexpected errors may occur (for example, sending data to a closed channel can cause a panic).</p><div><pre><code></code></pre></div><p>The  method is used to subscribe to events for a specific topic. It accepts a  parameter, which specifies the topic to subscribe to. Through this method, you get an  channel to receive events for the topic.</p><p>In the implementation of , a write lock is first obtained via the  property to ensure that the upcoming read and write operations on  are safe in concurrent routines. Then, a new  channel  is created and appended to the relevant topic’s subscriber slice. After these operations are complete, the write lock is released.</p><div><pre><code></code></pre></div><p>The  method is used to unsubscribe from events. It receives two parameters:  (the topic subscribed to) and  (the issued channel).</p><p>Inside the  method, a write lock is first obtained via the  property to ensure concurrent read and write safety for the upcoming operations on . Then, it checks whether the topic has corresponding subscribers. If it does, it traverses the subscriber slice for that topic, finds the channel matching , removes it from the subscriber slice, and closes the channel. Then the channel is drained. After these operations, the write lock is released.</p><div><pre><code></code></pre></div><h2>\n  \n  \n  Suggestions for Extensions\n</h2><p>The event bus implemented in this article is relatively simple. If you want to enhance the flexibility, reliability, and usability of the event bus, you can consider extending it in the following ways:</p><ul><li>: Implement persistent storage for events to ensure that unprocessed events can be recovered after a system crash.</li><li><strong>Wildcard and pattern-matching subscriptions</strong>: Allow the use of wildcards or regular expressions to subscribe to a group of related topics, rather than just a single specific topic.</li><li><strong>Load balancing and message distribution strategies</strong>: Distribute events among multiple subscribers to achieve load balancing.</li><li>: Enable functionality extensions through plugins, such as logging, message filtering, transformation, etc.</li></ul><p>This article thoroughly explores the process of implementing a simple event bus in Go. By utilizing Go's powerful features such as channels and concurrency mechanisms, we can easily implement the publish-subscribe pattern.</p><p>The article starts by introducing the advantages of the event bus, including decoupling, asynchronous processing, scalability, and fault isolation. It then explains in detail how to define the event data structure and the event bus structure, and how to implement the methods for publishing, subscribing, and unsubscribing events. Finally, it proposes several potential directions for extension, such as event persistence, wildcard subscriptions, load balancing, and plugin support, to enhance the flexibility and functionality of the event bus.</p><p>By reading this article, you can learn how to implement a simple yet powerful event bus in Go, and extend it according to possible requirements.</p><p><a href=\"https://leapcell.io/?lc_t=d_goeventbus\" rel=\"noopener noreferrer\">Leapcell</a> is the Next-Gen Serverless Platform for Web Hosting, Async Tasks, and Redis:</p><ul><li>Develop with Node.js, Python, Go, or Rust.</li></ul><p><strong>Deploy unlimited projects for free</strong></p><ul><li>pay only for usage — no requests, no charges.</li></ul><p><strong>Unbeatable Cost Efficiency</strong></p><ul><li>Pay-as-you-go with no idle charges.</li><li>Example: $25 supports 6.94M requests at a 60ms average response time.</li></ul><p><strong>Streamlined Developer Experience</strong></p><ul><li>Intuitive UI for effortless setup.</li><li>Fully automated CI/CD pipelines and GitOps integration.</li><li>Real-time metrics and logging for actionable insights.</li></ul><p><strong>Effortless Scalability and High Performance</strong></p><ul><li>Auto-scaling to handle high concurrency with ease.</li><li>Zero operational overhead — just focus on building.</li></ul>","contentLength":7433,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["go"]}