{"id":"Dn8x7kLjAGW","title":"Learning","displayTitle":"Learning","url":"","feedLink":"","isQuery":true,"isEmpty":false,"isHidden":false,"itemCount":14,"items":[{"title":"Speedrunning Guide: Junior to Staff Engineer in 3 years","url":"https://blog.algomaster.io/p/speedrunning-guide-junior-to-staff","date":1739680258,"author":"Ashish Pratap Singh","guid":510,"unread":true,"content":"<p>Today’s newsletter features a special guest, , who was promoted from Junior to Staff Engineer at Meta in just 3 years.</p><p>In this article, Ryan will share his insights on how to fast track your career growth and get promoted faster.</p><p>Once you land that first software engineering job, the next big question becomes: how do you get promoted? Many engineers fall into the day-to-day routine of writing code without a clear idea of how to grow their careers.</p><p>This happened to me. At my first job at Amazon, I landed code without knowing what I could do to grow my skills. I left that job within eight months because I felt I wasn’t growing as an engineer. Three years later, I made it to Staff Software Engineer at Instagram after tons of mentorship. Early on, I learned that being good at coding wasn’t enough to get promoted; you have to think strategically about your career and often need to develop new behaviors to move up.</p><p>In this article, I’ll share everything that helped me fast-track my way up the ladder, from developing the right mindset to making key moves that many overlook. Even if rapid growth isn’t your goal, this guide has learnings for all tech career paths.</p><ul><li><p>Software Engineering Levels</p></li><li><p>An Algorithm for Promotion</p></li><li><p>Junior (IC3) → Mid-level (IC4)</p></li><li><p>Mid-level (IC4) → Senior (IC5)</p></li><li><p>Senior (IC5) → Staff (IC6)</p></li></ul><h2>Software Engineering Levels</h2><p><em>Note: “IC” = “Individual Contributor”</em></p><p>In software engineering, companies measure career progression by levels that measure both behaviors and impact within the company. While the exact titles and structure can vary between companies, most tech companies follow a similar system:</p><ul><li><p> - Early in your career, working on smaller, well-defined tasks with guidance from more experienced engineers.</p></li><li><p> - More autonomous, handling moderately complex projects, and beginning to take initiative in improving the codebase and what they build.</p></li><li><p> - Leading larger projects with team-level influence. You’ll mentor and guide the team while having a broad impact on the codebase.</p></li><li><p>: Focusing on cross-team collaboration and solving org-wide challenges. Staff engineers are strategic thinkers who influence the technical direction of their organization.</p></li><li><p><strong>Senior Staff Engineer and Beyond (IC7+): </strong>Senior staff engineers and up operate with top technical expertise, driving large-scale initiatives that have a broad impact on the company. Senior staff engineers mentor staff engineers and work closely with executive leadership to meet business objectives.</p></li></ul><p>Your impact and compensation increase as you progress, which is a lot more satisfying in my experience. Not to mention that the skills that get you promoted also let you control what you and the company work on.</p><p>Also, many companies consider only senior engineers (IC5) and higher to be “terminal levels.” You must eventually get promoted to IC5, or you’ll be managed out. Most engineers are promoted in time, so it’s not meant to scare you but to encourage you to grow.</p><h2>An Algorithm For Promotion</h2><p>There’s a common set of steps across all promotions that will get you to Staff:</p><p><strong>1) Exceed expectations at your current level</strong> - Your manager will be hesitant to find you opportunities at the next level if they have concerns about your performance at the current level. Also, when your manager puts together a promotion packet, it’ll contain a history of your past ratings. The promotion committee will have concerns about your packet if you have a history of only meeting expectations for your level. Work with your manager to understand the expectations for your level and how to exceed them.</p><p><strong>2) Be direct with your manager about promotion </strong>- Once you know you’re exceeding expectations for your level, ask your manager what next-level performance looks like. Your manager plays a huge role in your promotion. They build your case and advocate for it, so they have a lot of influence on this process. Also, the lower the level, the more control your manager has. IC3 -&gt; IC4 promotions are straightforward, so your manager’s perspective is usually what happens. For IC5 -&gt; IC6, there is a lot more ambiguity, so <a href=\"https://www.developing.dev/p/how-promotions-and-ratings-work\">your manager serves more as a middleman between you and the promotion committee</a>. Your manager still plays a significant role in writing your packet and delivering feedback.</p><p><strong>3) Find next-level scope - </strong>If you only work on projects that fit your level’s behaviors, you won’t get any closer to promotion, no matter how good your work is. One simple pattern for finding next-level scope is brainstorming projects with engineers who are 1-2 levels higher than you are. Often, they will have a lot of projects sitting in their backlog that are big enough to help you get promoted. If you take on one of their projects, they’ll often help mentor you, review your designs and code, and give you strong peer feedback for your future promotion packet. I wrote <a href=\"https://www.developing.dev/p/a-simple-pattern-for-finding-next\">more on this here</a>. Make sure to confirm with your manager that they agree that what you’re working on fits the behaviors of the next level.<strong>4) Maintain next-level behaviors and impact </strong>- The duration you need to perform at the next level varies depending on your level and your company. At minimum though, you need to maintain that performance for 6-12 months. This is because promotions are “lagging” in tech. You must prove that you’re already operating at the next level before getting promoted. This reduces the risk of failing to meet expectations at the new level.</p><p>Getting promoted faster is a matter of doing steps (1), (2) and (3) as fast as possible. The best you can do is immediately start exceeding expectations in your first half and working with your manager on the next level.</p><p>Almost every team has scope for more Senior Engineers (IC5). You can get promoted up to that level if you have the skills and behaviors. Past that, situation and business scope play a much larger role. <a href=\"https://www.developing.dev/p/staff-career-growth-product-or-infra\">Many teams don’t need someone who has Staff-level leadership and technical skills</a>. If you find yourself stuck at any point due to your situation, you’ll likely have to switch teams to continue growing your career.</p><p>Now that you have the algorithm that applies at any of these levels let’s get into the level-specific strategies. I’ll share what got me promoted and what I would change if I did it again.</p><h2>Junior (IC3) → Mid-level (IC4)</h2><p>The main difference between these levels is in the size of the scope that you can handle independently. Here’s a rule of thumb:</p><ul><li><p>IC3 - Can handle individual tasks (&lt;2 weeks of work) with minimal guidance</p></li><li><p>IC4 - Can handle medium-to-large features (&lt;2 months of work) with minimal guidance</p></li></ul><p>“Minimal guidance” doesn’t mean that you can’t ask for help—it simply means that you can unblock yourself and make consistent progress. Asking good questions is one of the most effective ways to unblock yourself.</p><p>You should drive full features and do the project management for them. You should break your project into tasks, set reasonable timelines, and keep stakeholders updated.</p><p>You will not be expected to come up with the projects yet at this level—Senior Engineers will often outline them. However, at the IC4 level, you’re expected to take more initiative:</p><ul><li><p>Initiate refactoring and code cleanups, and <a href=\"https://www.developing.dev/p/how-to-start-reviewing-code\">give thoughtful code reviews</a>. Leave the code in a better state than you found it.</p></li><li><p><strong>Contributing to production excellence - Participate in the team’s oncall, and help debug production breakages.</strong></p></li><li><p><strong>Own the health of what you build - Add test coverage, logging, and build dashboards to monitor correctness.</strong></p></li></ul><p>Optimize your dev velocity to grow faster at this level. <a href=\"https://www.developing.dev/p/shipping-code-faster\">Shipping code faster</a> creates a shorter feedback loop, accelerating your learning process. This core skill will help you ship IC4-scope projects and improve as an engineer.</p><p>Here’s an example of several promotion timelines for what you can expect:</p><ol><li><p><strong>Promotion in 6 months (exceptional) - </strong>Rare since this means meeting IC4 expectations while onboarding. This is easier for high-performing return interns since they skip onboarding and may have some past track record already.</p></li><li><p><strong>Promotion in 12 months (great) - I’d shoot for this timeline. It’s challenging yet reasonable since it gives you six months to onboard and then start meeting IC4 expectations.</strong></p></li></ol><p>Here’s my promotion timeline as an example:<strong>H1 (L3 Exceeds Expectations)</strong> - First, I took on any task that came my way. These were nice-to-have features that others didn’t have time for. I completed them quickly and started on a larger pipeline rewrite (L4 scope) that my tech lead offered me. Outside of my main project work, I made many contributions to removing dead code and speeding up existing code because I enjoyed it.</p><p>I started to hit L4 expectations in the last few months of the half. But, since I didn’t have six months track record, I didn’t meet the promotion criteria.</p><p><strong>H2 (L3→L4 Promotion, Greatly Exceeds Expectations)</strong> - I continued driving my L4-scope project independently with high engineering quality. I came up with the idea to build a test harness to validate this rewrite that was “comparable to L5 quality” execution. I continued my passion for improving the codebase and led the company in adding static type annotations that MonkeyType couldn’t.</p><p>At this point, I had delivered on L4 scope for over six months, so the promotion made sense.</p><p><strong>What I Would Have Changed:</strong></p><p>Looking back, I would have discussed what IC4 growth looked like with my manager. I wasted our one-on-one time on project updates instead of career growth. This led to two problems:</p><ul><li><p><strong>Spent time on work that wasn’t impactful</strong> - I took on any work that was passed my way, even though not all of it was impactful. I probably could’ve gotten more out of my time.</p></li></ul><ul><li><p><strong>Didn’t have accurate expectations</strong> - I had another engineer tell me my work was IC4 level and that I should get promoted in my first half. I knew nothing then, so I took their word for it. I was surprised when I didn’t get promoted, which could have been avoided if I had been in sync with my manager.</p></li></ul><p>Although I could have been more calculated, writing as much code as I did opened doors. My tech lead trusted me with an IC4 project because I showed I could handle it. Similarly, some of the engineering craft work I did for my own personal pleasure ended up being part of what got me promoted too. <strong>The more work you do, the luckier you get.</strong></p><h2>Mid-level (IC4) → Senior (IC5)</h2><p>The IC4 to IC5 gap is larger than the IC3 to IC4 one. This is because IC5 promotion requires significant behavior changes. Raw code output is no longer the top priority. You <a href=\"https://www.developing.dev/p/how-some-engineers-always-lead\">need to lead</a> and <a href=\"https://www.developing.dev/p/how-to-influence-without-authority\">have a larger influence</a> within your team too. Here are a few examples of those differences:</p><p>Example 1 - Improving the codebase</p><ul><li><p>IC4 - Initiates refactoring and code cleanups.</p></li><li><p>IC5 - Identifies areas of improvement, <strong>influences the team to take goals on improving it together</strong>, then leads the charge on those goals.</p></li></ul><p>Example 2 - Production excellence</p><ul><li><p>IC4 - Participates in team’s oncall and mitigating outages.</p></li><li><p>IC5 - Creates an “oncall improvement” workstream and <strong>builds a process for everyone to improve the team’s oncall.</strong></p></li></ul><p>Example 3 - Project direction</p><ul><li><p>IC4 - Owns the project management of a medium-to-large feature.</p></li><li><p>IC5 - <strong>Drives team planning and builds a roadmap</strong> of several medium-to-large features.</p></li></ul><p>I wouldn’t say the IC5 examples are harder, but they require a mindset shift to own things at the team level.</p><p>Also, you’ll need to work on projects of sufficient scope for an IC5. There are a few ways that tech companies measure scope. Here’s a comparison of the criteria for IC4 and IC5 levels:</p><p>These criteria aren’t a checklist. Your work can be IC5 scope by meeting only some of these criteria.</p><p>IC5 is also the first time engineers begin to focus on growing others. At this level, you should mentor others and build up the team’s culture, which includes <a href=\"https://www.developing.dev/p/how-to-drive-meetings\">driving meetings</a>, knowledge sharing, recruiting activities, and organizing team activities. Starting mentorship relationships early is a good idea since you can’t rush mentorship.</p><p>If you can learn the above behaviors quickly, you can expect promotion on these timelines:</p><ol><li><p><strong>Promotion in 6 months (exceptional) - </strong>This is rare since you need to exert team-level influence as soon as you join the team. I could see this happening for someone who was under-leveled and just got promoted to IC4.</p></li><li><p><strong>Promotion in 12 months (great) - </strong>If you’re ambitious, I’d aim for this goal. It is possible to do this if you find IC5 scope in your first half. If not, one more half should secure your promotion.</p></li></ol><p>Here’s my promotion timeline as an example:</p><p><strong>H1 (IC4 Exceeds Expectations)</strong> - This half I wrapped up the workstream that got me promoted to IC4 and picked up another IC4 project. I spent a ton of time on engineering craft this half because I enjoyed it. I deprecated a few legacy systems that no one else would because they were dangerous and not that impactful. I didn’t exhibit any IC5 behaviors this half.</p><p>My manager handed me an IC5 workstream (~6 eng) to <a href=\"https://about.instagram.com/blog/engineering/cutting-threads-send-latency-in-half\">cut video messaging latency in half</a>, which I led successfully. I also began a side project, which became a multiple-half collaboration with another team. Lastly, I took on an intern who did a phenomenal job helping me execute these two roadmaps I led. Although I started exhibiting IC5 behaviors, the company canceled performance reviews this half because of the pandemic.</p><p><strong>H3 (IC4 → IC5 Promotion, Greatly Exceeds Expectations)</strong> - My impact this half could’ve met expectations at the IC6 level. I doubled down on the cross-org scope I created in H2 and developed a multi-half roadmap. I influenced and led another team to invest several engineers to <a href=\"https://about.instagram.com/blog/engineering/making-instagram-video-ads-performant\">revamp the IG video ads pipeline</a> with great results. I built out a second workstream and mentored another engineer to deliver it. This half, I had massive impact, team-level influence, and mentorship, which is what got me promoted.</p><ul><li><p><strong>The Skill of Tech Leading</strong> - If you grew from L3 → L4 right, you should be exceptional at landing code. The L5 behavior of team-level influence is just helping others do the same. In my first half of leading an initiative, I remember feeling unsure about it since I only had two years of experience. Leaning on my strong execution skills helped me become comfortable leading others.</p></li><li><p><strong>Working Hard Led To More Opportunities</strong> - I worked a lot and had a ton of workstreams in flight at the same time. This approach increased my chances of having one that had a ton of impact. At the time, I didn’t know it and was just throwing myself at any problems that came my way. Looking back, it was a great way to derisk my promotion.</p></li><li><p> - In my first half as an L4, I took on projects that were time-intensive and not impactful. I did these migrations because I loved cleaning up tech debt. I would’ve had more impact if I had influenced someone else to do them while I found IC5 scope instead.</p></li></ul><h2>Senior (IC5) → Staff (IC6)</h2><p>Staff Engineers (IC6) are at the same level as engineering managers. They solve problems that few others can and play a critical role in setting team direction. They lead major initiatives and influence the engineering culture of teams around them.</p><p>Some say that promotion from IC5 → IC6 is harder than IC6 → IC7 due to the significant behavior changes needed. There are a few major differences between IC5 and IC6.</p><p><strong>1) Influence Across Teams - </strong>Staff Engineer’s projects often extend beyond their team. They take on larger problems by influencing other teams without authority.</p><p>Once IC6s establish these workstreams, they tackle the hardest problems and work through others. They focus on outcomes and don’t always do the work themselves. <strong>Working through delegation and influence across teams is the biggest mindset shift from IC5 → IC6.</strong></p><p>This style of working isn’t limited to their main project impact. IC6s should also use their influence to inspire a culture of higher engineering quality and reliability across teams.</p><p> - Senior Engineers (IC5) build roadmaps of several medium-to-large features that help achieve their team’s goals. In this case, the problem and its business impact are clear; we just need an engineer to create a plan to solve it.</p><p>Staff Engineers (L6) handle more ambiguity. They don’t just solve known problems; they create scope by finding impactful opportunities and problems. <strong>Managers work with their L6s to expand the scope of the team.</strong></p><p>- Big tech companies determine what level projects are in a few ways. Here’s a comparison of the criteria for L5 and L6 levels:</p><p>Project complexity also distinguishes IC6 scope. <strong>Problems that IC5s can’t solve are considered IC6 scope</strong>. This is why specialists often have IC6+ scope; others often can’t do their projects.</p><p>These criteria aren’t a checklist. Work can be IC6 scope by meeting only some of these. Your manager will use these criteria to argue that your work is IC6 scope. This is one of the reasons why it’s important to align with your manager on your work’s scope.</p><p> - Staff engineers uplift others around them. They should have the ability to help IC5 engineers grow. There are a few ways they uplift others:</p><ul><li><p>Mentorship - Dedicated mentorship, preferably with senior engineers</p></li><li><p>Knowledge sharing - Writing wikis, giving presentations, contributing to Q&amp;A groups</p></li><li><p>Collaborations - Growing others while working with them (e.g. code reviews, design reviews, discussions)</p></li></ul><p>IC6 engineers should also contribute to growing the organization. This means that they help with recruiting and partner with their manager to improve team health.</p><p>Getting to the Staff Engineering level can take a long time. Since IC5 is considered “terminal,” there is no external pressure to achieve IC6 fast. However, if you are eager to grow as fast as possible, here’s how fas you can expect promotion:</p><ul><li><p><strong>Promotion in 1 half (Ridiculous)</strong> - You’d need to start influencing outside your team as soon as you join. Even then, it’s unlikely you’d get promoted this fast unless you create something company-changing.</p></li><li><p><strong>Promotion in 2 halves (Exceptional) </strong>- Finding IC6 opportunities on your team is not always possible this fast. It’s a combination of situation and skill to get promoted in two halves, even if you execute well.</p></li><li><p><strong>Promotion in 3 halves (Great) </strong>- If you’re ambitious I’d aim for this goal. It gives you a year to find IC6 scope, which is a reasonable amount of time to pivot if needed. Also, your track record of successes in the first year will help build the narrative for promotion.</p></li></ul><p><strong>H1 (IC5 Exceeds Expectations)</strong> - I led two workstreams that were partnerships with other teams to hit our goals. I also landed a <a href=\"https://about.instagram.com/blog/engineering/making-instagram-video-ads-performant\">large win in an unplanned ads workstream</a>, which is what brought my rating above expectations. I was also one of the top contributors to code review and interviewing in my 70-person eng org. The hidden success here was that I bootstrapped a new workstream towards the end of the half that was certainly IC6 scope.</p><p><strong>H2 (IC5 → IC6 Promotion, Greatly Exceeds Expectations)</strong> - The IC6 workstream I created turned out to be a massive opportunity. <a href=\"https://engineering.fb.com/2022/11/04/video-engineering/instagram-video-processing-encoding-reduction/\">This work was a huge success</a>, resulting in a company-wide award and <a href=\"https://www.linkedin.com/feed/update/urn:li:activity:6994387208375873536/\">public recognition from Mark Zuckerberg</a>. I also created a cross-org collaboration between 3 large orgs (70+ eng each), which received positive feedback from each director. Lastly, I ran infrastructure preparations for my org resulting in no major incidents during the most critical time of the year. The repeated influence and impact of these large initiatives is what got me promoted to IC6.</p><p> - My past context and relationships at Instagram helped me move a lot faster. I could lead several workstreams at once because I knew so much about the codebase. Also, it was easier to get work done in collaboration because I knew partner engineers from past work. Staying at one company for a longer time does have its benefits.</p><p> - When I was an IC4, I stumbled upon some IC6 scope without realizing it. I had strong initiative so I started solving problems without thinking through why it was impactful. I got lucky that the work had IC6 impact. I’ve since learned the importance of understanding the “why” before diving in. It helps you have consistent IC6 impact and makes it easier to get buy-in for your work.</p><p><strong>The Tech Lead Skillset Scales Well </strong>- In my promotion to Senior (IC5), I learned how to lead initiatives within my team. This skillset turned out to work well at higher levels too. The difference was just that more people were involved. This skill is a great way to continue your IC growth to the highest levels if you fit the “tech lead” archetype.</p><p>Growth to the Staff level can take a long time, and luck plays a role. As you move up the ladder, each promotion depends more and more on your situation in addition to your skill.</p><p>There are ways to increase your luck. For instance, you can go to growing companies and teams. You can pick business-critical projects. You can go where the most talented people are. None of these are foolproof, but they increase your chances.</p><p>Aside from picking your situation, one way to manufacture luck is to do as much good work as you can. Many growth opportunities came to me because of some past work I did. People would reach out to me to do more of it or because they wanted to ask me questions about something I had launched.</p><p>Although luck plays a role, there are aspects of getting promoted that rely less on luck. Here are four high-level areas:</p><p>Impact is any measurable and objective outcome that benefits your company. Promotions are a byproduct of your elevated, sustained impact. If you can learn what your organization considers impactful and you deliver that, you will be rewarded.</p><p><strong>2) Leverage is how you have more impact.</strong> Software engineers increase their leverage through people, writing, and code. Leverage is what differentiates higher-level ICs from lower-level ones. What I mean by each type of leverage:</p><ul><li><p>People - People leverage comes from technical leadership. This means setting direction, reviewing designs/code, and growing others.</p></li><li><p>Writing - Writing gives us leverage by influencing and helping others without your active involvement.</p></li><li><p>Code - Not all code is created equal. High-leverage code solves problems that few others can or helps engineers move faster at scale.</p></li></ul><p> When people hear “personal brand,” their minds often go to social media. But the brand that matters most is your “internal brand.” What do people within your company think about your work and its value? This is the brand that you should care most about.</p><p>Most of the top ICs I know are not well-known outside of Meta. They are legendary within the company, though because people see their impressive work. Build your internal brand by doing great work and letting others know about it (<a href=\"https://www.developing.dev/p/be-visible\">further reading here</a>).</p><p><strong>4) Build your soft skills.</strong> Working with others is a necessity to do anything of consequence. Also, being someone others want to work with makes it easier to find mentors who will uplift you along the way.</p><p>Soft skills are underrated among software engineers. It’s important to be an excellent IC, but you can go so much further if you also communicate well. Also, engineers don’t often prioritize soft skills, so having them will help you stand out and lead.</p><p>One last thing I’ll leave you with is something that I didn’t realize until looking back. When I first joined the industry, I was an absolute machine. I would get in early and stay until the last shuttle left at 9:27 PM. Although this might sound like hell to some people, I loved it. No one made me do that; I put in those hours because I enjoyed the work and thought it was interesting.</p><p>Looking back years later, I realize that was an unfair advantage I had. It let me put in a ton of work without getting burned out. Also, I got much more out of what I did because I was intrinsically motivated.</p><p>If there’s one thing I wish for you, it is that you find work at the intersection of what you enjoy and what will get you promoted. That is the best recipe for hyper-career growth.</p><p>Thanks for reading,Ryan Peterman</p><p>If you found it valuable, hit a like ❤️ and consider subscribing for more such content every week.</p><p>If you have any questions or suggestions, leave a comment.</p><p> If you’re enjoying this newsletter and want to get even more value, consider becoming a .</p>","contentLength":24211,"flags":null,"enclosureUrl":"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0173844b-0e38-4ca8-b779-b34f7f778872_1600x413.png","enclosureMime":"","commentsUrl":null},{"title":"Beyond Chat: Bringing Models to The Canvas • Lu Wilson • YOW! 2024","url":"https://www.youtube.com/watch?v=pLvMsGG7zE8","date":1739624470,"author":"GOTO Conferences","guid":327,"unread":true,"content":"<article>This presentation was recorded at YOW! Australia 2024. #GOTOcon #YOW\nhttps://yowcon.com\n\nLu Wilson - Software Engineer at tldraw @TodePond \n\nRESOURCES\nhttps://bsky.app/profile/todepond.com\nhttps://mastodon.social/@TodePond\nhttps://twitter.com/TodePond\nhttps://www.todepond.com\n\nLinks\nhttps://tldraw.dev\nhttps://makereal.tldraw.com\nhttps://drawfast.tldraw.com\nhttps://teach.tldraw.com\n\nABSTRACT\nWhenever a new technology appears, our first instinct as developers is to offer \"text\" as the primary method of interaction. This has happened throughout computing history, with the computer terminal, with early smartphones, and now it's happening again with AI.\n\nAt tldraw, we’ve been working on moving AI interaction away from the chat-based interface, towards a richer canvas environment. It hasn't been easy! I'll show you all the challenges we've faced, and how we're currently overcoming them. Some of the solutions have been surprising. [...]\n\nTIMECODES\n00:00 Intro\n00:58 The canvas\n06:16 Beyond chat?\n07:09 Demo\n09:25 Demo: Make Real\n14:52 Demo: Draw Fast\n19:01 Demo: Teach\n27:28 Demo: Computer\n35:42 Demo: Fight Simulator\n28:13 Conclusion\n41:10 Outro\n\nRead the full abstract here:\nhttps://yowcon.com/brisbane-2024/sessions/3533\n\nRECOMMENDED BOOKS\nAlex Castrounis • AI for People and Business • https://amzn.to/3NYKKTo\nPhil Winder • Reinforcement Learning • https://amzn.to/3t1S1VZ\nHolden Karau, Trevor Grant, Boris Lublinsky, Richard Liu &amp; Ilan Filonenko • Kubeflow for Machine Learning • https://amzn.to/3JVngcx\nKelleher &amp; Tierney • Data Science (The MIT Press Essential Knowledge series) • https://amzn.to/3AQmIRg\nLakshmanan, Robinson &amp; Munn • Machine Learning Design Patterns • https://amzn.to/2ZD7t0x\nLakshmanan, Görner &amp; Gillard • Practical Machine Learning for Computer Vision • https://amzn.to/3m9HNjP\n\nhttps://bsky.app/profile/gotocon.com\nhttps://twitter.com/GOTOcon\nhttps://www.linkedin.com/company/goto-\nhttps://www.instagram.com/goto_con\nhttps://www.facebook.com/GOTOConferences\n#AI #GenAI #GenerativeAI #ArtificialIntelligence #ChatGPT #ML #MakeRealtldraw #MakeReal #tldraw #Teachtldraw #AIDriven&nbsp;#LuWilson #YOWcon\n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket at https://gotopia.tech\nSign up for updates and specials at https://gotopia.tech/newsletter\n\nSUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.\nhttps://www.youtube.com/user/GotoConferences/?sub_confirmation=1</article>","contentLength":2626,"flags":null,"enclosureUrl":"https://www.youtube.com/v/pLvMsGG7zE8?version=3","enclosureMime":"","commentsUrl":null},{"title":"How Neurodiversity Can Help Your Life, Team & Business • Katrine Hald Kjeldsen • GOTO 2024","url":"https://www.youtube.com/watch?v=CIBlbmk1U_c","date":1739538016,"author":"GOTO Conferences","guid":326,"unread":true,"content":"<article>This presentation was recorded at GOTO Copenhagen 2024. #GOTOcon #GOTOcph\nhttps://gotocph.com\n\nKatrine Hald Kjeldsen - Neuro-inclusion Specialist @katrinehaldkjeldsen6145 \n\nORIGINAL TALK TITLE\nChange Your Life, Help Your Team &amp; Boost Your Business with Neurodiversity\n\nRESOURCES\nhttps://www.linkedin.com/in/katrinekjeldsen\n\nABSTRACT\nAre you a little spicy? If not, your colleague most probably is. Either way, this talk is for you.\n\nIn this session, Katrine will shine a light on neurodiversity and the transformative impact it can have on your life, your team, and your business.\n\nNeurodiversity is not only abundantly prevalent in tech organizations; it is a powerful, often underutilized asset that manifests in every corner of our work environments. It is paramount that we adjust our understanding and strategies around this diversity to thrive. Katrine will explore how neurodiversity shows up in the most unexpected ways and why it’s both surprisingly easy and surprisingly challenging to harness its potential in team collaboration and leadership.\n\nThis talk will emphasize practical daily strategies to strengthen collaboration and leverage the advantages of neurodiversity in everyday work contexts, whether it’s adopting clear communication methods, allowing flexible work arrangements, or designing team workflows that play to diverse cognitive strengths. [...]\n\nTIMECODES\n00:00 Intro\n04:58 Neurodivergent\n16:37 Dopamine &amp; ADHD\n21:25 Autism\n24:47 Diverse perspective\n34:40 Conclusions\n42:52 Outro\n\nDownload slides and read the full abstract here:\nhttps://gotocph.com/2024/sessions/3472\n\nRECOMMENDED BOOKS\nPh.D. Thomas Armstrong • The Power of Neurodiversity • https://amzn.to/3OrbPOg\nMaureen Dunne • The Neurodiversity Edge • https://amzn.to/494dGSE\nEmily Kircher-Morris &amp; Amanda Morin • Neurodiversity-Affirming Schools • https://amzn.to/3ZjJRdI\nNancy Doyle &amp; Almuth McDowall • Neurodiversity Coaching • https://amzn.to/4fGDdnn\n\nhttps://bsky.app/profile/gotocon.com\nhttps://twitter.com/GOTOcon\nhttps://www.linkedin.com/company/goto-\nhttps://www.instagram.com/goto_con\nhttps://www.facebook.com/GOTOConferences\n#Neurodiversity #Neurodivergent #Autism #ADHD #ParallelPlay #DeepCuriosity #Diversity #Inclusivity #Autism #DiverseTeams #Teams #KatrineHaldKjeldsen\n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket at https://gotopia.tech\nSign up for updates and specials at https://gotopia.tech/newsletter\n\nSUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.\nhttps://www.youtube.com/user/GotoConferences/?sub_confirmation=1</article>","contentLength":2759,"flags":null,"enclosureUrl":"https://www.youtube.com/v/CIBlbmk1U_c?version=3","enclosureMime":"","commentsUrl":null},{"title":"Learning Microsoft Azure • Jonah Andersson & Håkan Silfvernagel","url":"https://www.youtube.com/watch?v=gEQZBmoN8LM","date":1739529660,"author":"GOTO Conferences","guid":325,"unread":true,"content":"<article>This interview was recorded for the GOTO Book Club.\nhttp://gotopia.tech/bookclub\n\nRead the full transcription of the interview here\n (https://gotopia.tech/episodes/339) \nJonah Andersson - Senior Azure Consultant at Solidify &amp; Author of \"Learning Microsoft Azure\"\nHåkan Silfvernagel - Senior AI Architect at Sopra Steria &amp; Microsoft AI MVP\n\nRESOURCES\nJonah\nhttps://x.com/cjkodare\nhttps://medium.com/@jonah.andersson\nhttps://www.linkedin.com/in/jonahandersson\nhttps://github.com/jonahandersson\nhttps://jonahandersson.tech\n\nHåkan\nhttps://x.com/agrevlis\nhttps://www.linkedin.com/in/hakansilfvernagel\nhttps://sessionize.com/hakan-silfvernagel\n\nLinks\nhttps://www.meetup.com/azureusergroupsundsvallsverige\nhttps://podcasters.spotify.com/pod/show/extendwomenintechpodcast\n\nDESCRIPTION\nJonah Andersson, interviewed by Håkan Silfvernagel, shared her experiences writing \"Learning Microsoft Azure\". With a focus on making the content accessible for beginners, she carefully structured the book to cover essential Azure topics such as cloud computing fundamentals, security, and AI, while drawing on insights from experts in her network, including Microsoft Certified Trainers and MVPs.\n\nOver nearly two years, Jonah Andersson navigated the challenges of a rapidly evolving tech landscape, incorporating emerging trends like generative AI. Passionate about fostering inclusivity in tech, she emphasized the importance of mentorship and community support for underrepresented groups, particularly women. Looking ahead, Jonah Andersson expressed a desire to write a biography that reflects her life lessons and professional journey in technology.\n\nRECOMMENDED BOOKS\nJonah Andersson • Learning Microsoft Azure\n (https://amzn.to/48cOw3T) Adrienne Braganza Tacke • \"Looks Good to Me\": Constructive Code Reviews\n (https://amzn.to/3E75XrD) Adrienne Braganza Tacke • Coding for Kids\n (https://amzn.to/3Ukd5Gw) Martin Fowler • Refactoring\n (https://amzn.to/3EVcHXQ) Matthew Skelton &amp; Manuel Pais • Team Topologies (http://amzn.to/3sVLyLQ) \n\n\nBluesky (https://bsky.app/profile/gotocon.com) \nTwitter (https://twitter.com/GOTOcon) \nInstagram (https://www.instagram.com/goto_con) \nLinkedIn (https://www.linkedin.com/company/goto-) \nFacebook (https://www.facebook.com/GOTOConferences) \n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket: gotopia.tech (https://gotopia.tech) \n\nSUBSCRIBE TO OUR YOUTUBE CHANNEL (https://www.youtube.com/user/GotoConferences/?sub_confirmation=1)  - new videos posted daily!</article>","contentLength":2691,"flags":null,"enclosureUrl":"https://www.youtube.com/v/gEQZBmoN8LM?version=3","enclosureMime":"","commentsUrl":null},{"title":"Coding Interviews were HARD Until I Learned These 20 Tips","url":"https://blog.algomaster.io/p/20-coding-interviews-tips","date":1739467827,"author":"Ashish Pratap Singh","guid":403,"unread":true,"content":"<p>I gave my first  in 2016—and failed. I failed the next five interviews as well before finally landing my first job at .</p><p>Since then, I’ve interviewed with many companies and faced my fair share of rejections. However, over the years, my failure rate in coding interviews dropped significantly.</p><p>By 2022, with just 1.5 months of focused preparation, I successfully cleared interviews at  and .</p><p>Surprisingly, my success wasn’t due to a dramatic improvement in problem-solving skills. The real game-changer was my approach— and  during the interview.</p><p>In this article, I’ll share  that made coding interviews significantly easier for me.</p><p>These tips cover everything you need to know, including:</p><ul><li><p>How to systematically approach coding interview problems</p></li><li><p>Key concepts and patterns you should know</p></li><li><p>The type of problems you should practice</p></li><li><p>How to choose the right algorithm for a given problem</p></li><li><p>Techniques to optimize your solution</p></li><li><p>How to communicate your thought process effectively</p></li></ul><p>By applying these strategies, you’ll be able to tackle coding interviews with confidence and massively increase your chances of success.</p><p>In a coding interview, interviewers want to see how well you , , and  under pressure.</p><p>Here's a breakdown of what they look for:</p><ol><li><p><strong>Understanding the problem</strong>: Do you ask clarifying questions instead of making assumptions to ensure you fully understand the problem?</p></li><li><p>: Can you decompose the problem into smaller, manageable parts?</p></li><li><p>: Can you design an optimal solution in terms of time and space complexity?</p></li><li><p>: Do you handle edge cases like empty inputs, duplicates, large values, or special conditions?</p></li><li><p>: Can you explain why one approach is better than another?</p></li><li><p>: Do you have a strong grasp of data structures and algorithms, and can you choose the right one for the problem?</p></li><li><p>Can you quickly compute the time and space complexity of your solution?</p></li><li><p><strong>Explaining your thought process</strong>: Can you clearly articulate your approach and why it works?</p></li><li><p>: Are you receptive to hints and able to adjust your approach accordingly?</p></li><li><p>: Do you follow good coding practices (meaningful variable names, proper indentation, modular functions etc..)?</p></li><li><p><strong>Improving the initial solution</strong>: Can you optimize and refine your first solution when prompted?</p></li><li><p>Are you able to tackle variations of the original problem?</p></li><li><p>Can you manually walk through your code with sample inputs to verify correctness?</p></li></ol><p>Most coding interviews last </p><p>Depending on the company and interviewer, you may be asked to solve 2-3easy/medium problems or 1 hard problem with follow-ups.</p><p>Lets assume you are given one problem, with a follow up in a 45-minute interview. Here’s how you can optimally allocate your time:</p><ol><li><p>The interviewer may ask you to introduce yourself. Prepare a concise 1-2 minute introduction that highlights your background, experience, and key strengths. Practice it beforehand so that you can deliver it smoothly.</p></li><li><p><strong>Understand the Problem (5-10 mins):  </strong>Carefully read the problem statement, ask clarifying questions, and walk through sample inputs and expected outputs.</p></li><li><p><strong>Plan the Approach (10-20 mins): </strong>Brainstorm possible solutions, evaluate trade-offs, and discuss time and space complexity.</p></li><li><p><strong>Implement the Code (20-30 mins): </strong>Write a clean, modular and readable code.</p></li><li><p>Dry-run your code with sample inputs, debug any issues, and ensure edge cases are handled.</p></li><li><p><strong>Follow-ups and Wrap Up (35-45 mins): </strong>Answer follow up questions, and ask thoughtful questions to the interviewer about the company, role, or team.</p></li></ol><p>One of the biggest mistakes candidates make in coding interviews is jumping into coding too soon.</p><p>If you don't fully understand the question, you might end up solving the </p><p>Here’s how to ensure you grasp the problem before coding:</p><h4><strong>Read the Problem Carefully</strong></h4><p>Take a moment to absorb the problem statement. Rephrase it in your own words to confirm your understanding. </p><p>Identify the expected input/output format and any hidden constraints.</p><p>If anything is unclear, ask questions before diving into the solution. Interviewers appreciate when you seek clarity. Never assume details that aren’t explicitly mentioned in the problem statement.</p><p>Common clarifications include:</p><ul><li><p>Are there duplicate values?</p></li><li><p>Can the input be empty? If so, what should the output be?</p></li><li><p>Should the solution handle negative numbers?</p></li><li><p>Should the output maintain the original order of elements?</p></li><li><p>Is the graph directed or undirected?</p></li><li><p>Does the input contain only lowercase English letters, or can it have uppercase, digits, or special characters?</p></li><li><p>What should happen if multiple solutions exist? Should I return any valid solution, or does the problem have specific requirements?</p></li></ul><h4><strong>Walk Through Input/Output Examples</strong></h4><p>Once you understand the problem statement and constraints, go over a few input and output examples to make sure you get it.</p><p>Draw them out if it helps, especially for visual data structures like trees or graphs.</p><p>Try to take examples that cover different scenarios of the problem. Think about any  that might come up.</p>","contentLength":4908,"flags":null,"enclosureUrl":"https://substack-post-media.s3.amazonaws.com/public/images/61c3f6c0-4027-4d37-b4a7-a30fc183fa12_1602x1032.png","enclosureMime":"","commentsUrl":null},{"title":"A new tool for visualizing Rust lifetimes","url":"https://www.youtube.com/watch?v=NV6Xo_el_2o","date":1739458834,"author":"Let's Get Rusty","guid":372,"unread":true,"content":"<article>See how RustOwl can help you understand lifetimes in a real Rust codebase. A brand-new tool designed to visualize Rust lifetimes and make learning Rust easier. Check it out and see how it can change the way you write Rust!\n\nFree Rust training: https://letsgetrusty.com/bootcamp\n\nRustOwl: https://github.com/cordx56/rustowl\n\nCorrections:\n- Bacon is a CLI tool, not a library. Check it out here: https://github.com/Canop/bacon</article>","contentLength":424,"flags":null,"enclosureUrl":"https://www.youtube.com/v/NV6Xo_el_2o?version=3","enclosureMime":"","commentsUrl":null},{"title":"Better Value Sooner Safer Happier • Simon Rohrer & Eduardo da Silva • GOTO 2025","url":"https://www.youtube.com/watch?v=8oqT5tjqf-0","date":1739451611,"author":"GOTO Conferences","guid":324,"unread":true,"content":"<article>This interview was recorded for the GOTO Book Club. #GOTOcon #GOTObookclub\nhttp://gotopia.tech/bookclub\n\nRead the full transcription of the interview here:\nhttps://gotopia.tech/episodes/356\n\nSimon Rohrer - Co-Author of \"Better Value Sooner Safer Happier\" &amp; Senior Director at Saxo Bank @SimonRohrer \nEduardo da Sliva - Independent Consultant on Organization, Architecture, and Leadership Modernization @emgsilva \n\nRESOURCES\nSimon\nhttps://bsky.app/profile/simon.bvssh.com\nhttps://mastodon.social/@simonr\nhttps://x.com/sirohrer\nhttps://www.linkedin.com/in/simonrohrer\nhttps://github.com/sirohrer\nhttps://www.soonersaferhappier.com\n\nEduardo\nhttps://bsky.app/profile/esilva.net\nhttps://mastodon.social/@eduardodasilva\nhttps://x.com/emgsilva\nhttps://www.linkedin.com/in/emgsilva\nhttps://github.com/emgsilva\nhttps://esilva.net\n\nLinks\nhttps://youtu.be/oOYddleBsuk\nhttps://youtu.be/ESOaDiv3lXA\nhttps://youtu.be/B3b4tremI5o\nhttps://youtu.be/WPCrGYjrJ1Y\nhttps://youtu.be/48g7CRlMUD8\nhttps://youtu.be/86-Dy5U2p5Y\nhttps://youtu.be/l1tyfb5we7I\nhttps://youtu.be/B7JqZh9A2pQ\nhttps://youtu.be/yuEbZYKgZas\nhttps://youtu.be/hBxV3Cr0lXY\nhttps://youtu.be/HKS5sKsIkkc\n\nDESCRIPTION\nEduardo da Silva and Simon Rohrer discuss the core ideas of \"Better Value Sooner Safer Happier\" diving into the principles of organizational transformation.\n\nSimon shares insights on the shift from output-driven to outcome-focused thinking, emphasizing value over productivity, and the need for continuous improvement in delivery speed, stakeholder satisfaction, and safety.\nThe conversation explores key concepts like technical excellence, integrating safety into development, and balancing incremental changes with occasional larger steps.\n\nSimon Rohrer discusses organizational patterns and the importance of decentralizing decision-making, recommending a flexible, context-driven approach to transformation. The session concludes with practical advice on how to start implementing these ideas, using the book’s map to guide organizations toward the right transformation strategy based on their specific goals.\n\nTIMECODES\n00:00 Intro\n01:55 The journey to \"Better Value Sooner Safer Happier\"\n06:14 Antipatterns &amp; patterns for business agility\n14:09 Embracing continuous attention to technical excellence\n24:43 Embedding safety in continuous delivery\n33:31 Balancing incremental change &amp; big leaps in transformation\n40:18 Exploring organizational patterns\n44:12 Outro\n\nRECOMMENDED BOOKS\nJonathan Smart, Zsolt Berend, Myles Ogilvie &amp; Simon Rohrer • Sooner Safer Happier • https://amzn.to/3Emm9p2\nStephen Fishman &amp; Matt McLarty • Unbundling the Enterprise • https://amzn.to/3W2EcXw\nCarliss Y. Baldwin • Design Rules, Vol. 2 • https://amzn.to/4hdllRr\nMatthew Skelton &amp; Manuel Pais • Team Topologies • http://amzn.to/3sVLyLQ\nForsgren, Humble &amp; Kim • Accelerate: The Science of Lean Software and DevOps • https://amzn.to/3tCz1xO\nKim, Humble, Debois, Willis &amp; Forsgren • The DevOps Handbook • https://amzn.to/47oAf3l\n\nhttps://twitter.com/GOTOcon\nhttps://www.linkedin.com/company/goto-\nhttps://www.instagram.com/goto_con\nhttps://www.facebook.com/GOTOConferences\n#BetterValue #SoonerSaferHappier #OrganizationalTransformation #BusinessAgility #Agility #ValueOverProductivity #ContinuousDelivery #ContinuousAttention #Safety #TechnicalExcellence #BookClub\n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket at https://gotopia.tech\nSign up for updates and specials at https://gotopia.tech/newsletter\n\nSUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.\nhttps://www.youtube.com/user/GotoConferences/?sub_confirmation=1</article>","contentLength":3802,"flags":null,"enclosureUrl":"https://www.youtube.com/v/8oqT5tjqf-0?version=3","enclosureMime":"","commentsUrl":null},{"title":"Apache Kafka Meets Apache Iceberg: Real-Time Data Streaming • Kasun Indrasiri • GOTO 2024","url":"https://www.youtube.com/watch?v=bzVjBu5nhyM","date":1739365258,"author":"GOTO Conferences","guid":323,"unread":true,"content":"<article>This presentation was recorded at GOTO Chicago 2024. #GOTOcon #GOTOchgo\nhttps://gotochgo.com\n\nKasun Indrasiri - Author of \"Microservices for the Enterprise\" @kasunindrasiri \n\nORIGINAL TALK TITLE\nKafka Meets Iceberg: Real-Time Data Streaming into Modern Data Lakes &amp; Warehouses\n\nRESOURCES\nhttps://twitter.com/kasunindrasiri\nhttps://medium.com/@kasunindrasiri\nhttps://www.linkedin.com/in/kasun-indrasiri\n\nABSTRACT\nIn this talk, we'll explore how Kafka serves as a powerful platform for capturing real-time streaming data and how organizations are increasingly adopting Apache Iceberg table format to store data in data lakes and data warehouses. We'll discuss the key benefits of using Apache Iceberg tables in your data lake such as schema evolution, ACID transactions, hidden partitioning, time traveling and efficient querying.\n\nNext, we'll dive into how to efficiently stream data from Kafka into Iceberg-based data lakes. Confluent Tableflow will be introduced as a potential solution for streamlining the ingestion of Kafka streams into Iceberg tables within your data lake. A live demo will showcase the seamless integration of Kafka with Iceberg, equipping participants with practical knowledge to enhance their data architectures for powerful real-time analytics.\n\n• The role of Kafka in real-time data streaming\n• Why Apache Iceberg is essential for data lakes and data warehouses\n• Iceberg fundamentals: Core concepts and key features\n• Streaming data from Kafka to Iceberg tables in data lakes\n• Use case: Leveraging Confluent Tableflow to stream Kafka data into data lakes and warehouses [...]\n\nTIMECODES\n00:00 Intro\n01:10 Overview\n02:06 Kafka is the standard for operational data\n03:41 Iceberg for analytical data in data lakes\n04:42 Apache Iceberg\n05:27 Why Iceberg?\n12:24 Structure of an Iceberg table\n16:40 Streaming to data lakes is complicated\n20:47 Tableflow materialize Kafka topics as Iceberg tables\n23:47 Demo\n35:37 Outro\n\nDownload slides and read the full abstract here:\nhttps://gotochgo.com/2024/sessions/3370\n\nRECOMMENDED BOOKS\nKasun Indrasiri &amp; Sriskandarajah Suhothayan • Design Patterns for Cloud Native Applications • https://amzn.to/3szGx0p\nKasun Indrasiri &amp; Danesh Kuruppu • gRPC: Up and Running • https://amzn.to/3sBGBJJ\nKasun Indrasiri &amp; Prabath Siriwardena • Microservices for the Enterprise • https://amzn.to/40FhxkQ\nKasun Indrasiri • Beginning WSO2 ESB • https://amzn.to/3sx9NF0\n\nhttps://bsky.app/profile/gotocon.com\nhttps://twitter.com/GOTOcon\nhttps://www.linkedin.com/company/goto-\nhttps://www.instagram.com/goto_con\nhttps://www.facebook.com/GOTOConferences\n#ApacheKafka #Kafka #ApacheIceberg #Iceberg #AmazonAthena #DataStreaming #DataLake #DataWarehouse #ACIDTransactions #KafkaStreams #Confluent #Tableflow #ConfluentTableflow #KasunIndrasiri\n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket at https://gotopia.tech\nSign up for updates and specials at https://gotopia.tech/newsletter\n\nSUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.\nhttps://www.youtube.com/user/GotoConferences/?sub_confirmation=1</article>","contentLength":3277,"flags":null,"enclosureUrl":"https://www.youtube.com/v/bzVjBu5nhyM?version=3","enclosureMime":"","commentsUrl":null},{"title":"The difference between metrics and scorers","url":"https://www.youtube.com/watch?v=67KMDSitw1M","date":1739356864,"author":"probabl","guid":369,"unread":true,"content":"<article>You can easily write custom metric functions for scikit-learn, but you need to take an extra step if you want to use those metrics in a hyperparameter search. To add a number there, you need to use a scorer instead. The goal of this video is to explain the difference and to show how to leverage the `make_scorer` helper utility here.\n\nWebsite: https://probabl.ai/\nLinkedIn: https://www.linkedin.com/company/probabl\nBluesky: https://bsky.app/profile/probabl.bsky.social\nTwitter: https://x.com/probabl_ai\nDiscord: https://discord.probabl.ai\n\nWe also host a podcast called Sample Space, which you can find on your favourite podcast player. All the links can be found here:\nhttps://rss.com/podcasts/sample-space/\n\n#probabl</article>","contentLength":719,"flags":null,"enclosureUrl":"https://www.youtube.com/v/67KMDSitw1M?version=3","enclosureMime":"","commentsUrl":null},{"title":"From XP to TCR & Limbo • Kent Beck & Daniel Terhorst-North • GOTO 2025","url":"https://www.youtube.com/watch?v=48g7CRlMUD8","date":1739278805,"author":"GOTO Conferences","guid":322,"unread":true,"content":"<article>This interview was recorded for GOTO Unscripted. #GOTOcon #GOTOunscripted\nhttps://gotopia.tech\n\nRead the full transcription of this interview here:\nhttps://gotopia.tech/articles/355\n\nKent Beck - Software Engineer &amp; Creator of Extreme Programming @KentLBeck \nDaniel Terhorst-North - Originator of Behavior Driven Development (BDD) &amp; Principal at Dan North &amp; Associates @daniel-terhorst-north \n\nRESOURCES\nKent\nhttps://bsky.app/profile/kentbeck.bsky.social\nhttps://www.kentbeck.com\nhttps://github.com/KentBeck\nhttps://twitter.com/KentBeck\nhttps://www.linkedin.com/in/kentbeck\n\nDaniel\nhttps://bsky.app/profile/tastapod.com\nhttps://twitter.com/tastapod\nhttps://linkedin.com/in/danielterhorstnorth\nhttps://github.com/tastapod\nhttps://mastodon.social/@tastapod\nhttp://dannorth.net/blog\n\nLinks\nhttps://youtu.be/tgaKAF_eiOg\nhttps://youtu.be/k9lwn-RqEsE\nhttps://youtu.be/Saaz6D1azlU\nhttps://youtu.be/lOcXdXRxFgA\nhttps://youtu.be/klqo1oPdbpM\nhttps://youtu.be/ShAzlhS_TCg\nhttps://youtu.be/86-Dy5U2p5Y\nhttps://youtu.be/yuEbZYKgZas\nhttps://youtu.be/-4Ybn0Cz2oU\nhttps://youtu.be/XShcmCBK93E\n\nDESCRIPTION\nKent Beck and Daniel Terhorst-North reflect on the evolution of Extreme Programming (XP) and its lasting impact on agile software development. They explore the importance of short feedback loops, iterative learning, and adaptability in different phases of product development, as outlined in Beck’s 3X model (Exploration, Expansion, Extraction).\n\nKent introduces radical techniques like Test &amp;&amp; Commit || Revert (TCR) and Limbo, which challenge traditional coding and collaboration practices by emphasizing tiny, safe iterations. The conversation ties in psychological safety, a key factor in high-performing teams, as outlined by Amy C. Edmondson.\n\nKent envisions a future where software development scales in real-time, pushing teams to embrace faster experimentation, responsibility, and continuous learning in a rapidly evolving tech landscape. [...]\n\nTIMECODES\n00:00 Intro\n00:53 Extreme Programming (XP)\n03:09 The power of feedback &amp; Continuous Delivery\n07:44 Evolution of XP: From practices to people\n11:39 3X Model: Managing risk through software evolution\n25:02 TCR, Limbo &amp; the future of software development\n33:28 The importance of psychological safety for high-performing teams\n39:32 Outro\n\nRECOMMENDED BOOKS\nKent Beck • Tidy First? • https://amzn.to/4gscjjK\nKent Beck &amp; Cynthia Andres • Extreme Programming Explained • https://amzn.to/3sBASDG\nAmy C. Edmondson • The Fearless Organization • https://amzn.to/3Q5QPxu\nAmy C. Edmondson • Right Kind of Wrong • https://amzn.to/3CRbiTD\nJez Humble &amp; David Farley • Continuous Delivery • https://amzn.to/452ZRky\n\nhttps://bsky.app/profile/gotocon.com\nhttps://twitter.com/GOTOcon\nhttps://www.linkedin.com/company/goto-\nhttps://www.instagram.com/goto_con\nhttps://www.facebook.com/GOTOConferences\n#XP #EmpiricalDesign #ExtremeProgramming #Explore #Expand #Extract #3X #TDD #TCR #Limbo #PsychologicalSafety #Programming #SoftwareEngineering #KentBeck #DanNorth #DanielTerhorstNorth\n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket at https://gotopia.tech\nSign up for updates and specials at https://gotopia.tech/newsletter\n\nSUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.\nhttps://www.youtube.com/user/GotoConferences/?sub_confirmation=1</article>","contentLength":3509,"flags":null,"enclosureUrl":"https://www.youtube.com/v/48g7CRlMUD8?version=3","enclosureMime":"","commentsUrl":null},{"title":"Introducing the CrossValidationReport","url":"https://www.youtube.com/watch?v=R6dRAE83Y2c","date":1739277902,"author":"probabl","guid":368,"unread":true,"content":"<article>Skore version 0.6 introduces the `CrossValidationReport` that provides you with an `EstimatorReport` for each fold of your cross-validation, enabling you to inspect your estimator on each fold.\n\n------\nLinks:\n\nskore v0.6 documentation:\nhttps://skore.probabl.ai/0.6/index.html\n\nskore GitHub repository:\nhttps://github.com/probabl-ai/skore\n\nWebsite: https://probabl.ai/\nLinkedIn: https://www.linkedin.com/company/probabl\nTwitter: https://x.com/probabl_ai\nBluesky: https://bsky.app/profile/probabl.bsky.social\nDiscord: https://discord.probabl.ai\n\nWe also host a podcast called Sample Space, which you can find on your favourite podcast player. All the links can be found here:\nhttps://rss.com/podcasts/sample-space/\n\n#probabl</article>","contentLength":722,"flags":null,"enclosureUrl":"https://www.youtube.com/v/R6dRAE83Y2c?version=3","enclosureMime":"","commentsUrl":null},{"title":"Stateful vs. Stateless Architecture","url":"https://blog.algomaster.io/p/stateful-vs-stateless-architecture","date":1739263586,"author":"Ashish Pratap Singh","guid":402,"unread":true,"content":"<p>When a client interacts with a server, there are two ways to handle it:</p><ul><li><p> The client includes all necessary data in each request, so the server doesn’t store any prior information.</p></li><li><p> The server retains some data from previous requests, making future interactions dependent on past state.</p></li></ul><blockquote><p>In software systems,  refers to any data that persists across requests, such as user sessions, shopping carts, or authentication details.</p></blockquote><p>The choice between stateless and stateful architecture can affect scalability, performance, complexity, and cost.</p><p>In this article, we’ll break down both the approaches, their advantages and trade-offs, and when to use each—with real-world examples.</p><p>If you’re finding this newsletter valuable and want to deepen your learning, consider becoming a .</p><p>As a paid subscriber, you'll receive an <strong>exclusive deep-dive article</strong> every week, access to a structured100+topics and interview questions, and other .</p><p>In a , the system remembers client or process data () across multiple requests.</p><p>Once a client connects, the server holds on to certain details—like user preferences, shopping cart contents, or authentication sessions—so the client doesn’t need to resend everything with each request.</p><p>Stateful systems typically store the state data in a database or in-memory storage.</p><blockquote><p> During online shopping, when you add items to your cart, the website remembers your selections. If you navigate away to browse more items and then return to your cart, your items are still there, waiting for you to check out.</p></blockquote><h2>Common Patterns in Stateful Architecture</h2><p>If you use  session storage (i.e., each app server keeps its own sessions locally), you can configure your load balancer for “sticky sessions.” </p><p>This means: Once a client is assigned to , all subsequent requests from that client are routed to .</p><blockquote><p>: If Server A fails, the user’s session data is lost or the user is forced to re-log in. Sticky sessions are also less flexible when scaling because you can’t seamlessly redistribute user traffic to other servers.</p></blockquote><h3>2. Centralized Session Store</h3><p>A more robust approach is to store session data in a  or  store (e.g., Redis). </p><ul><li><p>: All servers can access and update session data for any user. Any server can handle any request, because the session data is not tied to a specific server’s memory.</p></li></ul><blockquote><p>: You introduce network overhead and rely on an external storage. If the centralized storage fails, you lose session data unless you have a fallback strategy.</p></blockquote><ul><li><p><strong>Personalized Experiences:</strong> Stateful systems can deliver highly tailored interactions, as they remember user preferences and past actions.</p></li><li><p> Users can seamlessly resume activities where they left off, even if they disconnect and reconnect.</p></li><li><p> Certain operations can be faster because the server already possesses necessary data.</p></li></ul><ul><li><p> Maintaining state for a large number of users can become resource-intensive and complex, as each server needs to keep track of specific sessions.</p></li><li><p> Managing and synchronizing state across multiple servers (if needed) introduces additional challenges.</p></li><li><p> If a server holding a user's state fails, their session data might be lost.</p></li></ul><ul><li><p><strong>E-commerce Shopping Carts</strong> – Stores cart contents and user preferences across multiple interactions, even if the user navigates away and returns.</p></li><li><p><strong>Video Streaming Services (Netflix, YouTube)</strong> – Remembers user watch progress, recommendations, and session data for a seamless experience.</p></li><li><p><strong>Messaging Apps (WhatsApp, Slack)</strong> – Maintains active user sessions and message history for real-time communication.</p></li></ul><p>In a  architecture, the server does  preserve client-specific data between individual requests.</p><ul><li><p>Each request is treated as , with no memory of previous interactions.</p></li><li><p>Every request must include <strong>all necessary information</strong> for processing.</p></li><li><p>Once the server responds, it <strong>discards any temporary data</strong> used for that request.</p></li></ul><blockquote><p>: Most  follow a stateless design. For instance, when you request weather data from a public API, you must provide all required details (e.g., location) in each request. The server processes it, sends a response, and forgets the interaction.</p></blockquote><h2>Common Patterns in Stateless Architecture</h2><h3>1. Token-Based Authentication (JWT)</h3><p>A very popular way to implement statelessness is through tokens, particularly  (JSON Web Tokens):</p><ol><li><p><strong>Client Authenticates Once</strong>: The user logs in using credentials (username/password) for the first time, and the server issues a signed .</p></li><li><p>: The client includes JWT token in each request (e.g., <code>Authorization: Bearer &lt;token&gt;</code> header).</p></li><li><p>: The server validates the token’s signature and any embedded claims (e.g., user ID, expiry time).</p></li><li><p>: The server does  need to store session data; it just verifies the token on each request.</p></li></ol><blockquote><p>Many APIs, including OAuth-based authentication systems, use JWTs to enable stateless, scalable authentication.</p></blockquote><p>Stateless architectures benefit from , ensuring that repeated requests produce the same result. This prevents inconsistencies due to network retries or client errors.</p><p> A  request with the same payload  updates the user’s data but doesn’t create duplicates.</p><blockquote><p>Idempotent APIsensures consistency and reliability, especially in distributed systems where requests might be retried automatically.</p></blockquote><ul><li><p> Stateless systems are inherently easier to scale horizontally. New servers can be added effortlessly, as they don't need to maintain any specific user sessions.</p></li><li><p> Since servers don't track state, the architecture is generally simpler and easier to manage.</p></li><li><p> The failure of a single server won't disrupt user sessions, as data isn't tied to specific servers.</p></li><li><p>With no session data stored on the server, you free up memory that would otherwise be reserved for session management.</p></li><li><p><strong>Easier to Cache Responses: </strong>Since requests are self-contained, caching layers (like CDNs) can more easily store and serve responses.</p></li></ul><ul><li><p> Stateless systems can't provide the same level of personalization or context awareness as stateful systems without additional effort (like using cookies or tokens).</p></li><li><p>The client must keep track of the authentication token or relevant data. If it loses the token, it must re-authenticate.</p></li><li><p> Every request needs to carry all the required information, potentially leading to larger payloads.</p></li></ul><ol><li><p><strong>Microservices Architecture: </strong>Each service handles requests independently, relying on external databases or caches instead of maintaining session data.</p></li><li><p><strong>Public APIs (REST, GraphQL): </strong>Clients send tokens with each request, eliminating the need for server-side sessions.</p></li><li><p>Tokens are securely stored on the device and sent with every request to authenticate users.</p></li><li><p>Stateless endpoints make caching easier since responses depend only on request parameters, not stored session data. A CDNcan cache and serve repeated requests, improving performance and reducing backend load.</p></li></ol><p>There's no one-size-fits-all answer when choosing between stateful and stateless architectures.</p><p>The best choice depends on your application’s needs, scalability goals, and user experience expectations.</p><h3><strong>When to Choose Stateful Architecture</strong></h3><p>Stateful systems are ideal when <strong>user context and continuity</strong> are critical. </p><p>Consider a stateful approach if your application:</p><ul><li><p>Requires personalization (e.g., user preferences, session history)</p></li><li><p>Needs real-time interactions (e.g., chat applications, multiplayer gaming)</p></li><li><p>Manages multi-step workflows (e.g., online banking transactions, checkout processes)</p></li><li><p>Must retain authentication sessions for security and convenience</p></li></ul><blockquote><p> A shopping cart in an e-commerce app should persist, so users don’t have to re-add items after refreshing the page.</p></blockquote><h3><strong>When to Choose Stateless Architecture</strong></h3><p>Stateless systems work best when <strong>scalability, simplicity, and resilience</strong> are top priorities. </p><p>Use a stateless approach if your application:</p><ul><li><p>Handles a high volume of requests and needs to scale efficiently</p></li><li><p>Doesn’t require storing client-specific data between requests</p></li><li><p>Needs fast, distributed processing without server dependencies</p></li><li><p>Must ensure reliability and failover readiness</p></li></ul><blockquote><p> A weather API doesn’t need to remember previous requests. Each query includes the location, and the response is processed independently.</p></blockquote><h3><strong>Hybrid Approaches: The Best of Both Worlds</strong></h3><p>Many modern applications  stateful and stateless components for flexibility.</p><p>This hybrid approach allows:</p><ul><li><p>Stateless APIs for core functionality, ensuring high scalability</p></li><li><p>Stateful sessions for personalization, improving user experience</p></li><li><p>External session stores (e.g., Redis) to manage state while keeping app servers stateless</p></li></ul><blockquote><p> A video streaming platform (e.g., Netflix) uses a stateless backend for streaming but retains stateful user sessions to track watch history and recommendations.</p></blockquote><p>If you found it valuable, hit a like ❤️ and consider subscribing for more such content every week.</p><p>If you have any questions or suggestions, leave a comment.</p><div data-attrs=\"{&quot;url&quot;:&quot;https://blog.algomaster.io/p/how-i-mastered-data-structures-and-algorithms?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&amp;token=eyJ1c2VyX2lkIjo4MzYwMjc0MywicG9zdF9pZCI6MTQ1NjU1MjUyLCJpYXQiOjE3MjE1MjE3MzEsImV4cCI6MTcyNDExMzczMSwiaXNzIjoicHViLTIyMDIyNjgiLCJzdWIiOiJwb3N0LXJlYWN0aW9uIn0.2cNY811YEugd5iH9XJQhakBzyahGqF7PcATBlFj5J2w&quot;,&quot;text&quot;:&quot;Share&quot;}\" data-component-name=\"CaptionedButtonToDOM\"><div><p>This post is public so feel free to share it.</p></div></div><p> If you’re enjoying this newsletter and want to get even more value, consider becoming a .</p><p>I hope you have a lovely day!</p>","contentLength":8861,"flags":null,"enclosureUrl":"https://substack-post-media.s3.amazonaws.com/public/images/7e4801c3-e3aa-4ab6-8fe6-759af4a1f91a_1684x1196.png","enclosureMime":"","commentsUrl":null},{"title":"@osherove about Pipeline Driven Organizations","url":"https://www.youtube.com/watch?v=xOKEXaxRdfs","date":1739192491,"author":"GOTO Conferences","guid":321,"unread":true,"content":"<article>Check out the full version on our YouTube channel now! #GOTOcon #GOTOams #PipelineDriven #Cooperative #CooperativePipeline #CoOpsPipelines #ContinuousDelivery #CICD #DevOps #DevSecOps #DevTestOps #Programming #DevOps2 #SDLC #RoyOsherove #Viral #ViralShorts #GOTO\n\nFull version available here:\nhttps://youtu.be/zmA5fhV-FGk\n\nRoy Osherove - Author of \"The Art Of Unit Testing\" and \"Elastic Leadership: Growing Self-Organizing Teams\" @osherove \n\nRECOMMENDED BOOK\nRoy Osherove • The Art of Unit Testing • https://bit.ly/3obiKNB\nRoy Osherove • Elastic Leadership • https://amzn.to/3fxEgID\nRoy Osherove • Notes to a Software Team Leader • https://amzn.to/3wjroxJ\nGoldratt &amp; Cox • The Goal: A Process of Ongoing Improvement • https://amzn.to/3jqNpZv\n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket at https://gotopia.tech\nSign up for updates and specials at https://gotopia.tech/newsletter\n\nSUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.\nhttps://www.youtube.com/user/GotoConferences/?sub_confirmation=1</article>","contentLength":1226,"flags":null,"enclosureUrl":"https://www.youtube.com/v/xOKEXaxRdfs?version=3","enclosureMime":"","commentsUrl":null},{"title":"Lessons From the Design & Implementation of a CSV Library • George Wilson • YOW! 2018","url":"https://www.youtube.com/watch?v=5nZ1AiWWnUE","date":1739106013,"author":"GOTO Conferences","guid":320,"unread":true,"content":"<article>This presentation was recorded at YOW! 2018. #GOTOcon #YOW\nhttps://yowcon.com\n\nGeorge Wilson - Functional Programming Engineer at CSIRO's Data61\n\nRESOURCES\nhttps://github.com/gwils\nhttps://wils.online\nhttps://www.linkedin.com/in/george-wilson-49a54457\n\nRECOMMENDED BOOKS\nDaniel Higginbotham • Clojure for the Brave and True • https://amzn.to/38tZjsF\nUlisses Almeida • Learn Functional Programming with Elixir • https://amzn.to/389grn6\nNeal Ford • Functional Thinking • https://amzn.to/3DdP35B\nPetricek &amp; Skeet • Real-World Functional Programming • https://amzn.to/38diF4M\nVenkat Subramaniam • Functional Programming in Java • https://amzn.to/2WlOXIt\nCristian Salcescu • Functional Programming in JavaScript • https://amzn.to/3y75jBS\nRichard Feldman • Elm in Action • https://amzn.to/387kujI\nJeremy Fairbank • Programming Elm • https://amzn.to/2WhZCE8\nWolfgang Loder • Web Applications with Elm • https://amzn.to/3jblQ3q\n\nhttps://bsky.app/profile/gotocon.com\nhttps://twitter.com/GOTOcon\nhttps://www.linkedin.com/company/goto-\nhttps://www.instagram.com/goto_con\nhttps://www.facebook.com/GOTOConferences\n#CSVLibrary CSV #Haskell #FunctionalProgramming #Programming #Coding #FunctionalTraining #GeorgeWilson #Functional #HaskellTutorial #YOWcon\n\nCHANNEL MEMBERSHIP BONUS\nJoin this channel to get early access to videos &amp; other perks:\nhttps://www.youtube.com/channel/UCs_tLP3AiwYKwdUHpltJPuA/join\n\nLooking for a unique learning experience?\nAttend the next GOTO conference near you! Get your ticket at https://gotopia.tech\nSign up for updates and specials at https://gotopia.tech/newsletter\n\nSUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.\nhttps://www.youtube.com/user/GotoConferences/?sub_confirmation=1</article>","contentLength":1745,"flags":null,"enclosureUrl":"https://www.youtube.com/v/5nZ1AiWWnUE?version=3","enclosureMime":"","commentsUrl":null}],"tags":["learning"]}